// DIALOGS.CPP : Dialogs Related Interface Definition.
//
// This is a part of the SatView(TM) spacecraft operating system.
// Copyright© 1992-2016 by BINARY SPACE, Switzerland.
// All rights reserved.
//
// This source code contains the definition of the dialogs related
// interface.
//
/**********************************************************************
* Modifications:                                                     *
*====================================================================*
* Date       | Release | Comments                                    *
*------------|---------|---------------------------------------------*
* 1995/11/26 | 1.00.00 | Initial creation. [AW]                      *
**********************************************************************/

#include "SatView.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif



/////////////////////////////////////////////////////////////////////////////
// CWelcomeDialog dialog

IMPLEMENT_DYNCREATE(CWelcomeDialog, CLocaleDialog)

CWelcomeDialog::CWelcomeDialog(CWnd *pParentWnd) : CLocaleDialog(CWelcomeDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CWelcomeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CWelcomeDialog::EnumSpacecrafts()
{
	INT  nSpacecraft;
	INT  nSpacecrafts;
	CString  szSpacecraft;
	CStringArray  szSpacecrafts;

	for (nSpacecraft = 0, nSpacecrafts = EnumAccounts((LPCTSTR)NULL, szSpacecrafts); nSpacecraft < nSpacecrafts; nSpacecraft++)
	{
		if (SendDlgItemMessage(IDC_WELCOME_SPACECRAFTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szSpacecraft = szSpacecrafts.GetAt(nSpacecraft))) == CB_ERR)
		{
			SendDlgItemMessage(IDC_WELCOME_SPACECRAFTNAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szSpacecraft);
			continue;
		}
	}
	return((SendDlgItemMessage(IDC_WELCOME_SPACECRAFTNAME, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

INT CWelcomeDialog::EnumAccounts(LPCTSTR pszPath, CStringArray &szAccounts)
{
	LPTSTR  pszName;
	CString  szName;
	CString  szFileName;
	CString  szDirectory;
	CFileFindEx  cFileFind;
	CModuleToken  cModuleToken;
	CVersionInfo  cVersionInfo;

	for (szDirectory = cModuleToken.GetModuleFileRoot(); cFileFind.FindFile((AfxIsValidString(pszPath)) ? (CString(pszPath) + STRING(IDS_FILENAME_ALL)) : (szDirectory + STRING(IDS_FILENAME_ALL))); )
	{
		for (szFileName = cVersionInfo.QueryOriginalFileName(); cFileFind.FindNextFile(); )
		{
			if (!cFileFind.IsDots() && cFileFind.IsDirectory())
			{
				if (EnumAccounts(cFileFind.GetFilePath(), szAccounts) > 0) break;
				continue;
			}
			if (!cFileFind.IsDots() && SearchPath(pszPath, szFileName, (LPCTSTR)NULL, 0, (LPTSTR)NULL, &pszName) && TestAccount(cFileFind.GetFilePath(), szName)) szAccounts.Add(szName);
		}
		cFileFind.Close();
		break;
	}
	return((INT)szAccounts.GetSize());
}

BOOL CWelcomeDialog::TestAccount(LPCTSTR pszAccount, CString &szName)
{
	CString  szFileDescription;
	CVersionInfo  cVersionInfo[2];

	if (cVersionInfo[0].SetModuleName(GetLibraryModuleName()) && cVersionInfo[1].SetModuleName(pszAccount) && cVersionInfo[0].QueryCompanyName() == cVersionInfo[1].QueryCompanyName() && cVersionInfo[0].QueryProductName() == cVersionInfo[1].QueryProductName() && cVersionInfo[0].QueryFileVersion() == cVersionInfo[1].QueryFileVersion() && cVersionInfo[0].QueryInternalName() != cVersionInfo[1].QueryInternalName())
	{
		for (szFileDescription.Format(STRING(IDS_DATABASE_DRIVER_APPENDIX), (LPCTSTR)cVersionInfo[1].QueryInternalName()); szFileDescription == cVersionInfo[1].QueryFileDescription(); )
		{
			szName = cVersionInfo[1].QueryInternalName();
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CWelcomeDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_WELCOME_PASSWORD)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

void CWelcomeDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CWelcomeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CWelcomeDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CWelcomeDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_WELCOME_HELP, OnHelp)
	ON_EN_CHANGE(IDC_WELCOME_PASSWORD, OnEditchangePassword)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CWelcomeDialog message handlers

BOOL CWelcomeDialog::OnInitDialog()
{
	INT  nAccount;
	INT  nAccounts;
	CString  szText;
	CString  szTitle;
	CString  szFormat[2];
	CAccounts  cAccounts;
	CUserToken  cUserToken;
	CStringArray  szAccounts;
	CVersionInfo  cVersionInfo;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	for (nAccount = 0, nAccounts = cAccounts.EnumUsers(szAccounts, TRUE); nAccount < nAccounts; nAccount++)
	{
		if (cUserToken.SetUserName(szAccounts.GetAt(nAccount)) && cUserToken.IsAdministrator())
		{
			SendDlgItemMessage(IDC_WELCOME_USERNAME, CB_INSERTSTRING, -1, (LPARAM)(LPCTSTR)cUserToken.GetUserName());
		}
	}
	for (SetForegroundWindow(), GetWindowText(szFormat[0]), GetDlgItem(IDC_WELCOME_TEXT)->GetWindowText(szFormat[1]); TRUE; )
	{
		szTitle.Format(szFormat[0], (LPCTSTR)cVersionInfo.QueryProductName());
		szText.Format(szFormat[1], (LPCTSTR)cVersionInfo.QueryProductName());
		GetDlgItem(IDC_WELCOME_TEXT)->SetWindowText(szText);
		SetWindowText(szTitle);
		break;
	}
	EnumSpacecrafts();
	GetDlgItem(IDC_WELCOME_SETUP)->EnableWindow();
	GetDlgItem(IDC_WELCOME_TEXT)->EnableWindow();
	GetDlgItem(IDC_WELCOME_COMMENT)->EnableWindow();
	GetDlgItem(IDC_WELCOME_USERNAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_WELCOME_USERNAME)->EnableWindow();
	GetDlgItem(IDC_WELCOME_SPACECRAFTNAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_WELCOME_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_WELCOME_SPACECRAFTNAME)->EnableWindow((SendDlgItemMessage(IDC_WELCOME_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_WELCOME_PASSWORD_STATIC)->EnableWindow((SendDlgItemMessage(IDC_WELCOME_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_WELCOME_PASSWORD)->EnableWindow((SendDlgItemMessage(IDC_WELCOME_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_WELCOME_USERNAME)->SetFocus();
	return TRUE;
}

void CWelcomeDialog::OnEditchangePassword()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CWelcomeDialog::OnOK()
{
	CString  szUserName;
	CString  szPassword;
	CString  szSpacecraft;
	CUserAccounts  cUserAccounts;
	CAccountToken  cAccountToken;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_WELCOME_USERNAME)->GetWindowText(szUserName);
	GetDlgItem(IDC_WELCOME_PASSWORD)->GetWindowText(szPassword);
	GetDlgItem(IDC_WELCOME_SPACECRAFTNAME)->GetWindowText(szSpacecraft);
	if (cAccountToken.SetSpacecraftName(szSpacecraft) && cAccountToken.SetUserName(szUserName) && cAccountToken.SetPassword(szPassword) && cAccountToken.SetMode(ACCOUNT_MODE_ONLINE))
	{
		if (cUserAccounts.WriteAccount(&cAccountToken) && cUserAccounts.SetActiveAccount(&cAccountToken))
		{
			EndDialog(IDOK);
			return;
		}
	}
	GetDlgItem(IDC_WELCOME_PASSWORD)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_WELCOME_PASSWORD)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(FALSE);
	CAudioDevice::AlertBySound();
}

BOOL CWelcomeDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_WELCOMEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CWelcomeDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_WELCOMEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CLoginInfo

CLoginInfo::CLoginInfo() : CObject()
{
	m_tTime[0] = 0;
	m_tTime[1] = 0;
}

VOID CLoginInfo::SetServer(LPCTSTR pszServer)
{
	m_szServer = pszServer;
}

CString CLoginInfo::GetServer() CONST
{
	return m_szServer;
}

VOID CLoginInfo::SetUser(LPCTSTR pszUser)
{
	m_szUser = pszUser;
}

CString CLoginInfo::GetUser() CONST
{
	return m_szUser;
}

VOID CLoginInfo::SetPassword(LPCTSTR pszPassword)
{
	m_szPassword = pszPassword;
}

CString CLoginInfo::GetPassword() CONST
{
	return m_szPassword;
}

VOID CLoginInfo::SetTimeRange(CONST CTimeKey &tStartTime, CONST CTimeKey &tStopTime)
{
	m_tTime[0] = tStartTime;
	m_tTime[1] = tStopTime;
}

BOOL CLoginInfo::GetTimeRange(CTimeKey &tStartTime, CTimeKey &tStopTime) CONST
{
	tStartTime = m_tTime[0];
	tStopTime = m_tTime[1];
	return((m_tTime[0] != 0 && m_tTime[1] != 0) ? TRUE : FALSE);
}

VOID CLoginInfo::Copy(CONST CLoginInfo *pInfo)
{
	m_szUser = pInfo->m_szUser;
	m_szServer = pInfo->m_szServer;
	m_szPassword = pInfo->m_szPassword;
	m_tTime[0] = pInfo->m_tTime[0];
	m_tTime[1] = pInfo->m_tTime[1];
}

BOOL CLoginInfo::Compare(CONST CLoginInfo *pInfo) CONST
{
	return((!pInfo->m_szServer.CompareNoCase(m_szServer) && pInfo->m_szUser == m_szUser  &&  pInfo->m_szPassword == m_szPassword  &&  pInfo->m_tTime[0] == m_tTime[0] && pInfo->m_tTime[1] == m_tTime[1]) ? TRUE : FALSE);
}

BOOL CLoginInfo::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbUser = (m_szUser.GetLength() + 1)*sizeof(TCHAR);
	sData.cbServer = (m_szServer.GetLength() + 1)*sizeof(TCHAR);
	sData.cbPassword = (m_szPassword.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbServer + sData.cbUser + sData.cbPassword)), sData.tTime[0] = m_tTime[0].GetTime(), sData.tTime[1] = m_tTime[1].GetTime(); nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szServer, sData.cbServer);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbServer), (LPCTSTR)m_szUser, sData.cbUser);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbUser), (LPCTSTR)m_szPassword, sData.cbPassword);
		return TRUE;
	}
	return FALSE;
}

BOOL CLoginInfo::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbServer + sData.cbUser + sData.cbPassword && sData.cbServer > 0 && sData.cbUser > 0 && sData.cbPassword > 0; )
	{
		CopyMemory(m_szServer.GetBufferSetLength(STRINGCHARS(sData.cbServer)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbServer));
		CopyMemory(m_szUser.GetBufferSetLength(STRINGCHARS(sData.cbUser)), nInfo.GetData() + (cbData = cbData + sData.cbServer), STRINGBYTES(sData.cbUser));
		CopyMemory(m_szPassword.GetBufferSetLength(STRINGCHARS(sData.cbPassword)), nInfo.GetData() + (cbData = cbData + sData.cbUser), STRINGBYTES(sData.cbPassword));
		m_tTime[0] = sData.tTime[0];
		m_tTime[1] = sData.tTime[1];
		m_szServer.ReleaseBuffer();
		m_szUser.ReleaseBuffer();
		m_szPassword.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CLoginOptions

CLoginOptions::CLoginOptions() : CMutexArray()
{
	m_nOptions = 0;
	m_nRetryCount[0] = 0;
	m_nRetryCount[1] = 0;
	m_tRetryInterval = 0;
}

CLoginOptions::~CLoginOptions()
{
	RemoveAll();
}

INT CLoginOptions::Add(CLoginInfo *pInfo)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pInfo, TRUE)) >= 0) InsertAt(nIndex, pInfo, 1);
	return nIndex;
}

INT CLoginOptions::Find(CONST CLoginInfo *pInfo) CONST
{
	return FindIndex(pInfo);
}

CLoginInfo *CLoginOptions::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CLoginInfo *)CMutexArray::GetAt(nIndex) : (CLoginInfo *)NULL);
}
CLoginInfo *CLoginOptions::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CLoginInfo *)CMutexArray::GetAt(nIndex) : (CLoginInfo *)NULL);
}

VOID CLoginOptions::SetOptions(UINT nOptions)
{
	m_nOptions = nOptions;
}

UINT CLoginOptions::GetOptions()
{
	return m_nOptions;
}

BOOL CLoginOptions::SetRetention(CONST CTimeSpan &tInterval, UINT nCount)
{
	for (; m_nOptions & LOGIN_OPTION_RECONNECTBYINTERVAL; )
	{
		m_tRetryInterval = tInterval;
		break;
	}
	for (; m_nOptions & LOGIN_OPTION_RECONNECTBYCOUNT; )
	{
		m_nRetryCount[0] = nCount;
		m_nRetryCount[1] = 0;
		break;
	}
	return(((m_nOptions & LOGIN_OPTION_RECONNECTBYINTERVAL) || (m_nOptions & LOGIN_OPTION_RECONNECTBYCOUNT)) ? TRUE : FALSE);
}

BOOL CLoginOptions::GetRetention(CTimeSpan &tInterval, UINT &nCount) CONST
{
	for (tInterval = 0, nCount = 0; m_nOptions & LOGIN_OPTION_RECONNECTBYINTERVAL; )
	{
		tInterval = m_tRetryInterval;
		break;
	}
	for (; m_nOptions & LOGIN_OPTION_RECONNECTBYCOUNT; )
	{
		nCount = m_nRetryCount[0];
		break;
	}
	return(((m_nOptions & LOGIN_OPTION_RECONNECTBYINTERVAL) || (m_nOptions & LOGIN_OPTION_RECONNECTBYCOUNT)) ? TRUE : FALSE);
}

BOOL CLoginOptions::SetRetentionRetries(UINT nCount)
{
	if (m_nOptions & LOGIN_OPTION_RECONNECTBYCOUNT)
	{
		m_nRetryCount[1] = nCount;
		return TRUE;
	}
	return FALSE;
}

UINT CLoginOptions::GetRetentionRetries() CONST
{
	return((m_nOptions & LOGIN_OPTION_RECONNECTBYCOUNT) ? m_nRetryCount[1] : 0);
}

VOID CLoginOptions::RemoveAll()
{
	INT  nItem;
	INT  nItems;

	for (nItem = 0, nItems = (INT)GetSize(); nItem < nItems; nItem++)
	{
		delete GetAt(nItem);
		continue;
	}
	CMutexArray::RemoveAll();
}

BOOL CLoginOptions::Copy(CONST CLoginOptions *pOptions)
{
	INT  nItem;
	INT  nItems;
	CLoginInfo  *pLoginInfo;

	for (nItem = 0, nItems = (INT)pOptions->GetSize(), m_nOptions = pOptions->m_nOptions, m_nRetryCount[0] = pOptions->m_nRetryCount[0], m_nRetryCount[1] = pOptions->m_nRetryCount[1], m_tRetryInterval = pOptions->m_tRetryInterval, RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pLoginInfo = new CLoginInfo) != (CLoginInfo *)NULL)
		{
			pLoginInfo->Copy(pOptions->GetAt(nItem));
			InsertAt(nItem, pLoginInfo, 1);
			continue;
		}
		break;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CLoginOptions::Compare(CONST CLoginOptions *pOptions) CONST
{
	INT  nItem;
	INT  nItems;

	for (nItem = 0, nItems = (pOptions->m_nOptions == m_nOptions && ((m_nOptions & LOGIN_OPTION_RECONNECTBYINTERVAL) != LOGIN_OPTION_RECONNECTBYINTERVAL || pOptions->m_tRetryInterval == m_tRetryInterval) && ((m_nOptions & LOGIN_OPTION_RECONNECTBYCOUNT) != LOGIN_OPTION_RECONNECTBYCOUNT || (pOptions->m_nRetryCount[0] == m_nRetryCount[0] && pOptions->m_nRetryCount[1] == m_nRetryCount[1])) && pOptions->GetSize() == GetSize()) ? (INT)GetSize() : -1; nItem < nItems; nItem++)
	{
		if (!pOptions->GetAt(nItem)->Compare(GetAt(nItem))) break;
		continue;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CLoginOptions::Map(CByteArray &nInfo) CONST
{
	INT  nItem;
	INT  nItems;
	INT  cbData;
	DATA  sData;
	CByteArray  nItemData[2];
	CLoginInfo  *pLoginInfo;

	for (nItem = 0, nItems = (INT)GetSize(), sData.nOptions = m_nOptions, sData.nRetryCount[0] = m_nRetryCount[0], sData.nRetryCount[1] = m_nRetryCount[1], sData.tRetryInterval = m_tRetryInterval.GetTotalSeconds(), nInfo.RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pLoginInfo = GetAt(nItem)) && pLoginInfo->Map(nItemData[1]) && nItemData[0].Append(nItemData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + (sData.cbItems = (INT)(nItemData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nItem == nItems; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), nItemData[0].GetData(), sData.cbItems);
		return TRUE;
	}
	return FALSE;
}

BOOL CLoginOptions::Unmap(CONST CByteArray &nInfo)
{
	INT  cbItem;
	INT  cbItems;
	INT  cbData;
	DATA  sData;
	CByteArray  nItemData[2];
	CLoginInfo  *pLoginInfo;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbItems && sData.cbItems >= 0; )
	{
		for (nItemData[0].SetSize(sData.cbItems), CopyMemory(nItemData[0].GetData(), nInfo.GetData() + (cbData = sizeof(DATA)), sData.cbItems), m_nOptions = sData.nOptions, m_nRetryCount[0] = sData.nRetryCount[0], m_nRetryCount[1] = sData.nRetryCount[1], m_tRetryInterval = sData.tRetryInterval, RemoveAll(), cbItem = cbItems = 0; cbItems < sData.cbItems; cbItems += cbItem)
		{
			for (CopyMemory(&cbItem, nItemData[0].GetData() + cbItems, sizeof(cbItem)), nItemData[1].SetSize(max(min(cbItem, nItemData[0].GetSize() - cbItems), 0)); nItemData[1].GetSize() >= 0; )
			{
				CopyMemory(nItemData[1].GetData(), nItemData[0].GetData() + cbItems, nItemData[1].GetSize());
				break;
			}
			if ((pLoginInfo = new CLoginInfo))
			{
				if (pLoginInfo->Unmap(nItemData[1]) && Add(pLoginInfo) >= 0) continue;
				delete pLoginInfo;
			}
			break;
		}
		return((cbItems == sData.cbItems) ? TRUE : FALSE);
	}
	return((!nInfo.GetSize()) ? TRUE : FALSE);
}

INT CLoginOptions::FindIndex(CONST CLoginInfo *pInfo, BOOL bInsert) CONST
{
	INT  nItem;
	INT  nItems;
	CTimeKey  tTime[2][2];
	CLoginInfo  *pLoginInfo;

	for (nItem = 0, nItems = (pInfo->GetTimeRange(tTime[0][0], tTime[0][1])) ? (INT)GetSize() : -1; nItem < nItems; nItem++)
	{
		if ((pLoginInfo = GetAt(nItem)) && pLoginInfo->GetTimeRange(tTime[1][0], tTime[1][1]))
		{
			if ((!bInsert  &&  pLoginInfo->Compare(pInfo)) || (bInsert  &&  tTime[0][0] < tTime[1][0])) break;
			continue;
		}
		nItems = -1;
		break;
	}
	return(((!bInsert  &&  nItem >= 0 && nItem < nItems) || (bInsert  &&  nItem >= 0)) ? nItem : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CLoginDialog dialog

IMPLEMENT_DYNCREATE(CLoginDialog, CLocaleDialog)

CLoginDialog::CLoginDialog(CWnd *pParentWnd) : CLocaleDialog(CLoginDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CLoginDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CLoginDialog::EnumComputers()
{
	GetDlgItem(IDC_LOGIN_COMPUTERNAME)->SetWindowText(GetAccountComputerName());
	GetDlgItem(IDC_LOGIN_DETAILS)->EnableWindow((GetDlgItem(IDC_LOGIN_COMPUTERNAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_COMPUTERNAME_STATIC)->EnableWindow((GetDlgItem(IDC_LOGIN_COMPUTERNAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_COMPUTERNAME)->EnableWindow((GetDlgItem(IDC_LOGIN_COMPUTERNAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	return((GetDlgItem(IDC_LOGIN_COMPUTERNAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

BOOL CLoginDialog::EnumSpacecrafts()
{
	INT  nAccount[2];
	INT  nAccounts[2];
	CString  szAccount;
	CStringArray  szAccounts;
	CUserAccounts  cUserAccounts;
	CAccountToken  *pAccountToken;

	for (nAccount[0] = 0, nAccounts[0] = (EnumAccounts((LPCTSTR)NULL, szAccounts) > 0) ? cUserAccounts.EnumAccounts(m_pAccounts) : 0; nAccount[0] < nAccounts[0]; nAccount[0]++)
	{
		for (nAccount[1] = 0, nAccounts[1] = ((pAccountToken = m_pAccounts.GetAt(nAccount[0]))) ? (INT)szAccounts.GetSize() : 0; nAccount[1] < nAccounts[1]; nAccount[1]++)
		{
			if ((szAccount = pAccountToken->GetSpacecraftName()).CompareNoCase(szAccounts.GetAt(nAccount[1])) == 0) break;
			continue;
		}
		if (nAccount[1] < nAccounts[1])
		{
			if (SendDlgItemMessage(IDC_LOGIN_SPACECRAFTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szAccount) == CB_ERR)
			{
				SendDlgItemMessage(IDC_LOGIN_SPACECRAFTNAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szAccount);
				continue;
			}
		}
	}
	SendDlgItemMessage(IDC_LOGIN_SPACECRAFTNAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_LOGIN_SPACECRAFTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)GetAccountSpacecraftName()), 0));
	GetDlgItem(IDC_LOGIN_SPACECRAFTNAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_SPACECRAFTNAME)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_LOGIN_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CLoginDialog::EnumUsers()
{
	INT  nUser;
	INT  nUsers;
	CString  szComputer;
	CString  szSpacecraft;
	CAccountToken  *pAccountToken;

	SendDlgItemMessage(IDC_LOGIN_USERNAME, CB_RESETCONTENT);
	GetDlgItem(IDC_LOGIN_COMPUTERNAME)->GetWindowText(szComputer);
	GetDlgItem(IDC_LOGIN_SPACECRAFTNAME)->GetWindowText(szSpacecraft);
	for (nUser = 0, nUsers = (INT)m_pAccounts.GetSize(); nUser < nUsers; nUser++)
	{
		if ((pAccountToken = m_pAccounts.GetAt(nUser)) && !pAccountToken->GetComputerName().CompareNoCase(szComputer) && !pAccountToken->GetSpacecraftName().CompareNoCase(szSpacecraft))
		{
			if (pAccountToken->CheckPrivilege(PRIVILEGE_ONLINE_OPERATE) || pAccountToken->CheckPrivilege(PRIVILEGE_OFFLINE_OPERATE))
			{
				if (SendDlgItemMessage(IDC_LOGIN_USERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pAccountToken->GetUserName()) == CB_ERR)
				{
					SendDlgItemMessage(IDC_LOGIN_USERNAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pAccountToken->GetUserName());
					continue;
				}
			}
		}
	}
	SendDlgItemMessage(IDC_LOGIN_USERNAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_LOGIN_USERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)GetAccountUserName()), 0));
	GetDlgItem(IDC_LOGIN_USERNAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_USERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_USERNAME)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_USERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_LOGIN_USERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CLoginDialog::EnumDatabases()
{
	INT  nUser;
	INT  nUsers;
	INT  nDatabase;
	INT  nDatabases;
	CString  szUser;
	CString  szDatabase;
	CString  szSpacecraft;
	CStringArray  szUsers;
	CAccountToken  *pAccountToken;
	CDatabaseProfileInfo  *pDatabaseProfileInfo;
	CDatabases  cDatabases;

	SendDlgItemMessage(IDC_LOGIN_DATABASE, CB_RESETCONTENT);
	GetDlgItem(IDC_LOGIN_USERNAME)->GetWindowText(szUser);
	GetDlgItem(IDC_LOGIN_SPACECRAFTNAME)->GetWindowText(szSpacecraft);
	for (nDatabase = 0, nDatabases = ((pAccountToken = m_pAccounts.GetAt(FindAccount()))) ? ((IsDlgButtonChecked(IDC_LOGIN_MODE_ONLINE) || IsDlgButtonChecked(IDC_LOGIN_MODE_OFFLINE) || (cDatabases.GetDatabases(m_pDatabases[0], FALSE) && cDatabases.GetDatabases(m_pDatabases[1], TRUE))) ? (((!IsDlgButtonChecked(IDC_LOGIN_MODE_ONLINE) && !IsDlgButtonChecked(IDC_LOGIN_MODE_OFFLINE) && pAccountToken->CheckPrivilege(PRIVILEGE_ONLINE_OPERATE) && m_pDatabases[0].GetSize() > 0) || IsDlgButtonChecked(IDC_LOGIN_MODE_ONLINE)) ? (INT)m_pDatabases[0].GetSize() : (INT)m_pDatabases[1].GetSize()) : 0) : 0; nDatabase < nDatabases; nDatabase++)
	{
		if ((pDatabaseProfileInfo = ((!IsDlgButtonChecked(IDC_LOGIN_MODE_ONLINE) && !IsDlgButtonChecked(IDC_LOGIN_MODE_OFFLINE) && pAccountToken->CheckPrivilege(PRIVILEGE_ONLINE_OPERATE) && m_pDatabases[0].GetSize() > 0) || IsDlgButtonChecked(IDC_LOGIN_MODE_ONLINE)) ? m_pDatabases[0].GetAt(nDatabase) : m_pDatabases[1].GetAt(nDatabase)) && pDatabaseProfileInfo->GetUsers(szUsers) > 0 && pDatabaseProfileInfo->GetSpacecraft() == szSpacecraft)
		{
			for (nUser = 0, nUsers = (INT)szUsers.GetSize(); nUser < nUsers; nUser++)
			{
				if (szUsers.GetAt(nUser) == szUser) break;
				continue;
			}
			if (nUser < nUsers)
			{
				if (SendDlgItemMessage(IDC_LOGIN_DATABASE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szDatabase = pDatabaseProfileInfo->GetName())) == CB_ERR)
				{
					SendDlgItemMessage(IDC_LOGIN_DATABASE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szDatabase);
					continue;
				}
			}
		}
	}
	SendDlgItemMessage(IDC_LOGIN_DATABASE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_LOGIN_DATABASE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)GetAccountDatabase()), 0));
	GetDlgItem(IDC_LOGIN_DATABASE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_DATABASE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_DATABASE)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_DATABASE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return TRUE;
}

BOOL CLoginDialog::EnumServers()
{
	INT  nPos;
	INT  nServer;
	INT  nServers;
	CString  szServer;
	CStringArray  szServers;
	CAccountToken  *pAccountToken;
	CServerAddressBook  cServerAddressBook;

	SendDlgItemMessage(IDC_LOGIN_REMOTENETWORK_SERVER, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_LOGIN_REMOTENETWORK_SERVER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_LOGINACCOUNTSDIALOG_NOREMOTENETWORK));
	for (nServer = 0, nServers = ((pAccountToken = m_pAccounts.GetAt(FindAccount())) && pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN)) ? ((cServerAddressBook.GetServerAddressBook(m_pServers)) ? cServerAddressBook.EnumServers(szServers) : 0) : 0; nServer < nServers; nServer++)
	{
		if (SendDlgItemMessage(IDC_LOGIN_REMOTENETWORK_SERVER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szServers.GetAt(nServer)) == CB_ERR)
		{
			SendDlgItemMessage(IDC_LOGIN_REMOTENETWORK_SERVER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szServers.GetAt(nServer));
			continue;
		}
	}
	for (szServer = GetAccountRASServer(); (nPos = szServer.Find(TAB)) >= 0; )
	{
		szServer = szServer.Left(nPos);
		break;
	}
	SendDlgItemMessage(IDC_LOGIN_REMOTENETWORK_SERVER, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_LOGIN_REMOTENETWORK_SERVER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szServer), 0));
	return TRUE;
}

BOOL CLoginDialog::EnumLogins()
{
	return((GetLoginOptions(m_pLoginOptions[0])) ? m_pLoginOptions[1].Copy(&m_pLoginOptions[0]) : FALSE);
}

BOOL CLoginDialog::ShowLoginInfo(BOOL bReset)
{
	CString  szServer;
	CString  szPassword;
	CAccountToken  *pAccountToken;
	CServerProfileInfo  *pServerInfo;

	if ((pAccountToken = m_pAccounts.GetAt(FindAccount())))
	{
		for (GetDlgItem(IDC_LOGIN_REMOTENETWORK_SERVER)->GetWindowText(szServer), szServer = (szServer != STRING(IDS_LOGINACCOUNTSDIALOG_NOREMOTENETWORK)) ? szServer : EMPTYSTRING; szServer.IsEmpty(); )
		{
			SendDlgItemMessage(IDC_LOGIN_REMOTENETWORK_SERVER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_LOGIN_REMOTENETWORK_SERVER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_LOGINACCOUNTSDIALOG_NOREMOTENETWORK)));
			GetDlgItem(IDC_LOGIN_REMOTENETWORK_USER)->SetWindowText(EMPTYSTRING);
			GetDlgItem(IDC_LOGIN_REMOTENETWORK_PASSWORD)->SetWindowText(EMPTYSTRING);
			break;
		}
		for (CheckRadioButton(IDC_LOGIN_MODE_ONLINE, IDC_LOGIN_MODE_OFFLINE, (!IsDlgButtonChecked(IDC_LOGIN_MODE_ONLINE) && !IsDlgButtonChecked(IDC_LOGIN_MODE_OFFLINE)) ? ((pAccountToken->CheckPrivilege(PRIVILEGE_ONLINE_OPERATE) && m_pDatabases[0].GetSize() > 0) ? IDC_LOGIN_MODE_ONLINE : ((pAccountToken->CheckPrivilege(PRIVILEGE_OFFLINE_OPERATE) && m_pDatabases[1].GetSize() > 0) ? IDC_LOGIN_MODE_OFFLINE : -1)) : ((IsDlgButtonChecked(IDC_LOGIN_MODE_ONLINE)) ? IDC_LOGIN_MODE_ONLINE : IDC_LOGIN_MODE_OFFLINE)), CheckDlgButton(IDC_LOGIN_REMOTENETWORK_DIALUP, ((pServerInfo = m_pServers.GetAt(m_pServers.Find(szServer))) && (pServerInfo->GetMode() & SERVERPROFILE_ACCESS_PHONE)) ? pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN) : FALSE); !pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN); )
		{
			SendDlgItemMessage(IDC_LOGIN_REMOTENETWORK_SERVER, CB_SETCURSEL, (WPARAM)-1);
			GetDlgItem(IDC_LOGIN_REMOTENETWORK_SERVER)->GetWindowText(szServer);
			GetDlgItem(IDC_LOGIN_REMOTENETWORK_USER)->SetWindowText(EMPTYSTRING);
			GetDlgItem(IDC_LOGIN_REMOTENETWORK_PASSWORD)->SetWindowText(EMPTYSTRING);
			CheckDlgButton(IDC_LOGIN_REMOTENETWORK_DIALUP, FALSE);
			break;
		}
		for (GetDlgItem(IDC_LOGIN_PASSWORD)->GetWindowText(szPassword); bReset; )
		{
			szPassword.Empty();
			break;
		}
		GetDlgItem(IDC_LOGIN_PASSWORD)->SetWindowText(szPassword);
		GetDlgItem(IDC_LOGIN_PASSWORD_STATIC)->EnableWindow(!pAccountToken->GetPassword().IsEmpty());
		GetDlgItem(IDC_LOGIN_PASSWORD)->EnableWindow(!pAccountToken->GetPassword().IsEmpty());
		GetDlgItem(IDC_LOGIN_MODE)->EnableWindow(IsDlgButtonChecked(IDC_LOGIN_MODE_ONLINE) || IsDlgButtonChecked(IDC_LOGIN_MODE_OFFLINE));
		GetDlgItem(IDC_LOGIN_MODE_ONLINE)->EnableWindow(((IsDlgButtonChecked(IDC_LOGIN_MODE_ONLINE) || IsDlgButtonChecked(IDC_LOGIN_MODE_OFFLINE)) && m_pDatabases[0].GetSize() > 0) ? pAccountToken->CheckPrivilege(PRIVILEGE_ONLINE_OPERATE) : FALSE);
		GetDlgItem(IDC_LOGIN_MODE_OFFLINE)->EnableWindow(((IsDlgButtonChecked(IDC_LOGIN_MODE_ONLINE) || IsDlgButtonChecked(IDC_LOGIN_MODE_OFFLINE)) && m_pDatabases[1].GetSize() > 0) ? pAccountToken->CheckPrivilege(PRIVILEGE_OFFLINE_OPERATE) : FALSE);
		GetDlgItem(IDC_LOGIN_REMOTENETWORK)->EnableWindow(pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN));
		GetDlgItem(IDC_LOGIN_REMOTENETWORK_SERVER_STATIC)->EnableWindow(pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN));
		GetDlgItem(IDC_LOGIN_REMOTENETWORK_SERVER)->EnableWindow(pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN));
		GetDlgItem(IDC_LOGIN_REMOTENETWORK_OPTIONS)->EnableWindow(pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN));
		GetDlgItem(IDC_LOGIN_REMOTENETWORK_USER_STATIC)->EnableWindow((!szServer.IsEmpty()) ? pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN) : FALSE);
		GetDlgItem(IDC_LOGIN_REMOTENETWORK_USER)->EnableWindow((!szServer.IsEmpty()) ? pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN) : FALSE);
		GetDlgItem(IDC_LOGIN_REMOTENETWORK_PASSWORD_STATIC)->EnableWindow((!szServer.IsEmpty()) ? pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN) : FALSE);
		GetDlgItem(IDC_LOGIN_REMOTENETWORK_PASSWORD)->EnableWindow((!szServer.IsEmpty()) ? pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN) : FALSE);
		GetDlgItem(IDC_LOGIN_REMOTENETWORK_DIALUP)->EnableWindow((!szServer.IsEmpty()) ? pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN) : FALSE);
		return(!pAccountToken->GetPassword().IsEmpty());
	}
	CheckDlgButton(IDC_LOGIN_MODE_ONLINE, FALSE);
	CheckDlgButton(IDC_LOGIN_MODE_OFFLINE, FALSE);
	CheckDlgButton(IDC_LOGIN_REMOTENETWORK_DIALUP, FALSE);
	SendDlgItemMessage(IDC_LOGIN_REMOTENETWORK_SERVER, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_LOGIN_PASSWORD)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_LOGIN_REMOTENETWORK_USER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_LOGIN_REMOTENETWORK_PASSWORD)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_LOGIN_PASSWORD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_PASSWORD)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_MODE)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_MODE_ONLINE)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_MODE_OFFLINE)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_REMOTENETWORK)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_REMOTENETWORK_SERVER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_REMOTENETWORK_SERVER)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_REMOTENETWORK_OPTIONS)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_REMOTENETWORK_USER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_REMOTENETWORK_USER)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_REMOTENETWORK_PASSWORD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_REMOTENETWORK_PASSWORD)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_REMOTENETWORK_DIALUP)->EnableWindow(FALSE);
	return FALSE;
}

INT CLoginDialog::EnumAccounts(LPCTSTR pszPath, CStringArray &szAccounts)
{
	LPTSTR  pszName;
	CString  szName;
	CString  szFileName;
	CString  szDirectory;
	CFileFindEx  cFileFind;
	CModuleToken  cModuleToken;
	CVersionInfo  cVersionInfo;

	for (szDirectory = cModuleToken.GetModuleFileRoot(); cFileFind.FindFile((AfxIsValidString(pszPath)) ? (CString(pszPath) + STRING(IDS_FILENAME_ALL)) : (szDirectory + STRING(IDS_FILENAME_ALL))); )
	{
		for (szFileName = cVersionInfo.QueryOriginalFileName(); cFileFind.FindNextFile(); )
		{
			if (!cFileFind.IsDots() && cFileFind.IsDirectory())
			{
				if (EnumAccounts(cFileFind.GetFilePath(), szAccounts) > 0) break;
				continue;
			}
			if (!cFileFind.IsDots() && SearchPath(pszPath, szFileName, (LPCTSTR)NULL, 0, (LPTSTR)NULL, &pszName) && TestAccount(cFileFind.GetFilePath(), szName)) szAccounts.Add(szName);
		}
		cFileFind.Close();
		break;
	}
	return((INT)szAccounts.GetSize());
}

BOOL CLoginDialog::TestAccount(LPCTSTR pszAccount, CString &szName)
{
	CString  szFileDescription;
	CVersionInfo  cVersionInfo[2];

	if (cVersionInfo[0].SetModuleName(GetLibraryModuleName()) && cVersionInfo[1].SetModuleName(pszAccount) && cVersionInfo[0].QueryCompanyName() == cVersionInfo[1].QueryCompanyName() && cVersionInfo[0].QueryProductName() == cVersionInfo[1].QueryProductName() && cVersionInfo[0].QueryFileVersion() == cVersionInfo[1].QueryFileVersion() && cVersionInfo[0].QueryInternalName() != cVersionInfo[1].QueryInternalName())
	{
		for (szFileDescription.Format(STRING(IDS_DATABASE_DRIVER_APPENDIX), (LPCTSTR)cVersionInfo[1].QueryInternalName()); szFileDescription == cVersionInfo[1].QueryFileDescription(); )
		{
			szName = cVersionInfo[1].QueryInternalName();
			return TRUE;
		}
	}
	return FALSE;
}

INT CLoginDialog::FindAccount() CONST
{
	CString  szUser;
	CString  szComputer;
	CString  szSpacecraft;

	GetDlgItem(IDC_LOGIN_COMPUTERNAME)->GetWindowText(szComputer);
	GetDlgItem(IDC_LOGIN_SPACECRAFTNAME)->GetWindowText(szSpacecraft);
	GetDlgItem(IDC_LOGIN_USERNAME)->GetWindowText(szUser);
	return FindAccount(szComputer, szSpacecraft, szUser);
}
INT CLoginDialog::FindAccount(LPCTSTR pszComputer, LPCTSTR pszSpacecraft, LPCTSTR pszUser) CONST
{
	return m_pAccounts.Find(pszComputer, pszSpacecraft, pszUser);
}

BOOL CLoginDialog::Check(BOOL bModified) CONST
{
	CString  szUser;
	CString  szServer;
	CString  szPassword[2];
	CAccountToken  *pAccountToken;

	GetDlgItem(IDC_LOGIN_PASSWORD)->GetWindowText(szPassword[0]);
	GetDlgItem(IDC_LOGIN_REMOTENETWORK_USER)->GetWindowText(szUser);
	GetDlgItem(IDC_LOGIN_REMOTENETWORK_SERVER)->GetWindowText(szServer);
	GetDlgItem(IDC_LOGIN_REMOTENETWORK_PASSWORD)->GetWindowText(szPassword[1]);
	return(((((pAccountToken = m_pAccounts.GetAt(FindAccount())) && pAccountToken->GetPassword().IsEmpty()) || !szPassword[0].IsEmpty()) && (((szServer == STRING(IDS_LOGINACCOUNTSDIALOG_NOREMOTENETWORK) || szServer.IsEmpty()) && szUser.IsEmpty() && szPassword[1].IsEmpty()) || (szServer != STRING(IDS_LOGINACCOUNTSDIALOG_NOREMOTENETWORK) && !szServer.IsEmpty() && !szUser.IsEmpty()))) ? TRUE : FALSE);
}

void CLoginDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CLoginDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CLoginDialog::PostNcDestroy()
{
	m_pServers.RemoveAll();
	m_pAccounts.RemoveAll();
	m_pDatabases[0].RemoveAll();
	m_pDatabases[1].RemoveAll();
	m_pLoginOptions[0].RemoveAll();
	m_pLoginOptions[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CLoginDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CLoginDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_LOGIN_MODE_ONLINE, OnOnlineMode)
	ON_BN_CLICKED(IDC_LOGIN_MODE_OFFLINE, OnOfflineMode)
	ON_BN_CLICKED(IDC_LOGIN_REMOTENETWORK_OPTIONS, OnOptions)
	ON_BN_CLICKED(IDC_LOGIN_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_LOGIN_SPACECRAFTNAME, OnSelchangeSpacecraftName)
	ON_CBN_SELCHANGE(IDC_LOGIN_USERNAME, OnSelchangeUserName)
	ON_CBN_SELCHANGE(IDC_LOGIN_DATABASE, OnSelchangeDatabase)
	ON_CBN_SELCHANGE(IDC_LOGIN_REMOTENETWORK_SERVER, OnSelchangeNetworkServer)
	ON_CBN_EDITCHANGE(IDC_LOGIN_REMOTENETWORK_SERVER, OnEditchangeNetworkServer)
	ON_EN_CHANGE(IDC_LOGIN_PASSWORD, OnEditchangePassword)
	ON_EN_CHANGE(IDC_LOGIN_REMOTENETWORK_USER, OnEditchangeNetworkUser)
	ON_EN_CHANGE(IDC_LOGIN_REMOTENETWORK_PASSWORD, OnEditchangeNetworkPassword)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CLoginDialog message handlers

BOOL CLoginDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	AccessControl(IDC_LOGIN_REMOTENETWORK_DIALUP, FALSE);
	for (SetForegroundWindow(); EnumComputers() && EnumSpacecrafts() && EnumUsers(); )
	{
		EnumDatabases();
		EnumServers();
		EnumLogins();
		if (ShowLoginInfo())
		{
			GetDlgItem(IDC_LOGIN_PASSWORD)->SetFocus();
			return FALSE;
		}
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
	return TRUE;
}

void CLoginDialog::OnOnlineMode()
{
	for (EnumDatabases(); ShowLoginInfo(); )
	{
		SendDlgItemMessage(IDC_LOGIN_PASSWORD, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_LOGIN_PASSWORD)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginDialog::OnOfflineMode()
{
	for (EnumDatabases(); ShowLoginInfo(); )
	{
		SendDlgItemMessage(IDC_LOGIN_PASSWORD, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_LOGIN_PASSWORD)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginDialog::OnOptions()
{
	CLoginOptionsDialog  cLoginOptionsDialog;

	cLoginOptionsDialog.DoModal(m_pLoginOptions[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginDialog::OnSelchangeSpacecraftName()
{
	for (EnumUsers(), EnumDatabases(); ShowLoginInfo(TRUE); )
	{
		SendDlgItemMessage(IDC_LOGIN_PASSWORD, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_LOGIN_PASSWORD)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginDialog::OnSelchangeUserName()
{
	for (EnumDatabases(); ShowLoginInfo(TRUE); )
	{
		SendDlgItemMessage(IDC_LOGIN_PASSWORD, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_LOGIN_PASSWORD)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginDialog::OnSelchangeDatabase()
{
	if (ShowLoginInfo(TRUE))
	{
		SendDlgItemMessage(IDC_LOGIN_PASSWORD, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_LOGIN_PASSWORD)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginDialog::OnSelchangeNetworkServer()
{
	for (SendDlgItemMessage(IDC_LOGIN_REMOTENETWORK_SERVER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_LOGIN_REMOTENETWORK_SERVER, CB_GETCURSEL)); ShowLoginInfo() >= 0; )
	{
		SendDlgItemMessage(IDC_LOGIN_REMOTENETWORK_USER, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_LOGIN_REMOTENETWORK_USER)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginDialog::OnEditchangePassword()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginDialog::OnEditchangeNetworkServer()
{
	ShowLoginInfo();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginDialog::OnEditchangeNetworkUser()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginDialog::OnEditchangeNetworkPassword()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginDialog::OnOK()
{
	INT  nAccount;
	INT  nAccounts;
	CString  szUser;
	CString  szServer;
	CString  szDatabase;
	CString  szPassword[2];
	CAccountToken  *pAccountToken;
	CHourglassCursor  cCursor;

	if ((pAccountToken = m_pAccounts.GetAt(FindAccount())))
	{
		GetDlgItem(IDC_LOGIN_DATABASE)->GetWindowText(szDatabase);
		GetDlgItem(IDC_LOGIN_PASSWORD)->GetWindowText(szPassword[0]);
		GetDlgItem(IDC_LOGIN_REMOTENETWORK_USER)->GetWindowText(szUser);
		GetDlgItem(IDC_LOGIN_REMOTENETWORK_SERVER)->GetWindowText(szServer);
		GetDlgItem(IDC_LOGIN_REMOTENETWORK_PASSWORD)->GetWindowText(szPassword[1]);
		for (szServer = (szServer != STRING(IDS_LOGINACCOUNTSDIALOG_NOREMOTENETWORK)) ? szServer : EMPTYSTRING, szServer = (IsDlgButtonChecked(IDC_LOGIN_REMOTENETWORK_DIALUP)) ? CString(szServer + TAB) : szServer; pAccountToken->GetPassword() == szPassword[0]; )
		{
			if (!m_pLoginOptions[0].Compare(&m_pLoginOptions[1]))
			{
				SetLoginOptions(m_pLoginOptions[0]);
			}
			pAccountToken->SetMode((IsDlgButtonChecked(IDC_LOGIN_MODE_ONLINE) || IsDlgButtonChecked(IDC_LOGIN_MODE_OFFLINE)) ? ((IsDlgButtonChecked(IDC_LOGIN_MODE_ONLINE)) ? ACCOUNT_MODE_ONLINE : ACCOUNT_MODE_OFFLINE) : 0);
			pAccountToken->SetDatabase(szDatabase);
			pAccountToken->SetRASServer(szServer);
			pAccountToken->SetRASUserName(szUser);
			pAccountToken->SetRASPassword(szPassword[1]);
			SetAccount(pAccountToken);
			EndDialog(IDOK);
			return;
		}
		for (nAccount = 0, nAccounts = (INT)m_pAccounts.GetSize(); nAccount < nAccounts; nAccount++)
		{
			if (m_pAccounts.GetAt(nAccount)->IsAdministrator() && m_pAccounts.GetAt(nAccount)->GetPassword() == szPassword[0]) break;
			continue;
		}
		if (nAccount < nAccounts)
		{
			if (!m_pLoginOptions[0].Compare(&m_pLoginOptions[1]))
			{
				SetLoginOptions(m_pLoginOptions[0]);
			}
			pAccountToken->SetMode((IsDlgButtonChecked(IDC_LOGIN_MODE_ONLINE) || IsDlgButtonChecked(IDC_LOGIN_MODE_OFFLINE)) ? ((IsDlgButtonChecked(IDC_LOGIN_MODE_ONLINE)) ? ACCOUNT_MODE_ONLINE : ACCOUNT_MODE_OFFLINE) : 0);
			pAccountToken->SetDatabase(szDatabase);
			pAccountToken->SetRASServer(szServer);
			pAccountToken->SetRASUserName(szUser);
			pAccountToken->SetRASPassword(szPassword[1]);
			SetAccount(pAccountToken);
			EndDialog(IDOK);
			return;
		}
	}
	GetDlgItem(IDC_LOGIN_PASSWORD)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_LOGIN_PASSWORD)->SetFocus();
	CAudioDevice::AlertBySound();
}

BOOL CLoginDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_LOGINDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CLoginDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_LOGINDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CLoginOptionsDialog dialog

IMPLEMENT_DYNCREATE(CLoginOptionsDialog, CLocaleDialog)

CLoginOptionsDialog::CLoginOptionsDialog(CWnd *pParentWnd) : CLocaleDialog(CLoginOptionsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CLoginOptionsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CLoginOptionsDialog::DoModal(CLoginOptions &pOptions)
{
	INT  nResult;

	for (m_pOptions[0].Copy(&pOptions), m_pOptions[1].Copy(&pOptions); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		pOptions.Copy(&m_pOptions[0]);
		break;
	}
	m_pOptions[0].RemoveAll();
	m_pOptions[1].RemoveAll();
	return nResult;
}

BOOL CLoginOptionsDialog::EnumScheduledLogins()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CTimeKey  tTime[3];
	CLoginInfo  *pLoginInfo;

	for (nItem = 0, nItems = (INT)m_pOptions[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pLoginInfo = m_pOptions[0].GetAt(nItem)) && pLoginInfo->GetTimeRange(tTime[0], tTime[1]))
		{
			if (tTime[1].GetTime() < tTime[2].GetTime())
			{
				delete m_pOptions[0].GetAt(nItem);
				delete m_pOptions[1].GetAt(nItem);
				m_pOptions[0].RemoveAt(nItem);
				m_pOptions[1].RemoveAt(nItem);
				nItems--;
				nItem--;
				continue;
			}
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (szItem.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_LOGINOPTIONSDIALOG_TITLEITEM_TIME); )
				{
					szItem.Format(STRING(IDS_LOGINOPTIONSDIALOG_TIMERANGE_FORMAT), (LPCTSTR)tTime[0].FormatGmt(), (LPCTSTR)tTime[1].FormatGmt());
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_LOGINOPTIONSDIALOG_TITLEITEM_SERVER); )
				{
					szItem = pLoginInfo->GetServer();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_LOGINOPTIONSDIALOG_TITLEITEM_USER); )
				{
					szItem = pLoginInfo->GetUser();
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_LOGIN_OPTIONS_LIST), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_LOGIN_OPTIONS_LIST), nItem, nColumn, szItem);
			}
		}
	}
	if (SendDlgItemMessage(IDC_LOGIN_OPTIONS_LIST, LVM_GETITEMCOUNT) > 0)
	{
		Listview_SetCurText(GetDlgItem(IDC_LOGIN_OPTIONS_LIST), 0);
		GetDlgItem(IDC_LOGIN_OPTIONS_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_LOGIN_OPTIONS_LIST)->EnableWindow();
		GetDlgItem(IDC_LOGIN_OPTIONS_LIST_REMOVE)->EnableWindow();
		GetDlgItem(IDC_LOGIN_OPTIONS_LIST_REMOVEALL)->EnableWindow();
	}
	else
	{
		GetDlgItem(IDC_LOGIN_OPTIONS_LIST_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_LOGIN_OPTIONS_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_LOGIN_OPTIONS_LIST_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_LOGIN_OPTIONS_LIST_REMOVEALL)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST_ADD)->EnableWindow();
	return TRUE;
}

VOID CLoginOptionsDialog::ShowLoginOptions()
{
	UINT  nCount;
	CTimeSpan  tInterval;

	m_pOptions[0].GetRetention(tInterval, nCount);
	Spinbox_SetPos(GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT_NUMBER), nCount);
	Spinbox_SetPos(GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL_MINUTES), tInterval.GetTotalMinutes());
	CheckDlgButton(IDC_LOGIN_OPTIONS_RECONNECTION, (m_pOptions[0].GetOptions() & LOGIN_OPTION_RECONNECT) ? TRUE : FALSE);
	CheckDlgButton(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL, ((m_pOptions[0].GetOptions() & LOGIN_OPTION_RECONNECT) && (m_pOptions[0].GetOptions() & LOGIN_OPTION_RECONNECTBYINTERVAL)) ? TRUE : FALSE);
	CheckDlgButton(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT, ((m_pOptions[0].GetOptions() & LOGIN_OPTION_RECONNECT) && (m_pOptions[0].GetOptions() & LOGIN_OPTION_RECONNECTBYCOUNT)) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_LOGIN_OPTIONS_RECONNECTION));
	GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL_MINUTES)->EnableWindow(IsDlgButtonChecked(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL));
	GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL));
	GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_LOGIN_OPTIONS_RECONNECTION));
	GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT));
	GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT));
}

INT CLoginOptionsDialog::CalcColumnWidth(LPCTSTR pszColumn)
{
	CDC  *pDC;
	INT  nWidth;
	CFont  *pOldFont;
	CString  szFormat;
	CTimeKey  tTime[2];

	if ((pDC = GetDC()))
	{
		if ((pOldFont = pDC->SelectObject(GetFont())))
		{
			for (nWidth = 0; !lstrcmp(pszColumn, STRING(IDS_LOGINOPTIONSDIALOG_TITLEITEM_TIME)); )
			{
				szFormat.Format(STRING(IDS_LOGINOPTIONSDIALOG_TIMERANGE_FORMAT), (LPCTSTR)tTime[0].FormatGmt(), (LPCTSTR)tTime[1].FormatGmt());
				nWidth = pDC->GetTextExtent(szFormat).cx;
				break;
			}
			for (; !lstrcmp(pszColumn, STRING(IDS_LOGINOPTIONSDIALOG_TITLEITEM_SERVER)); )
			{
				nWidth = 4 * pDC->GetTextExtent(pszColumn).cx;
				break;
			}
			for (; !lstrcmp(pszColumn, STRING(IDS_LOGINOPTIONSDIALOG_TITLEITEM_USER)); )
			{
				nWidth = 3 * pDC->GetTextExtent(pszColumn).cx;
				break;
			}
			for (; !nWidth; )
			{
				nWidth = pDC->GetTextExtent(pszColumn).cx;
				break;
			}
			nWidth += 6 * pDC->GetTextExtent(SPACE).cx;
			pDC->SelectObject(pOldFont);
			ReleaseDC(pDC);
			return nWidth;
		}
		ReleaseDC(pDC);
	}
	return 0;
}

BOOL CLoginOptionsDialog::IsModified() CONST
{
	return((!m_pOptions[0].Compare(&m_pOptions[1])) ? TRUE : FALSE);
}

void CLoginOptionsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CLoginOptionsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CLoginOptionsDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CLoginOptionsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CLoginOptionsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_LOGIN_OPTIONS_LIST_ADD, OnListAdd)
	ON_BN_CLICKED(IDC_LOGIN_OPTIONS_LIST_REMOVE, OnListRemove)
	ON_BN_CLICKED(IDC_LOGIN_OPTIONS_LIST_REMOVEALL, OnListRemoveAll)
	ON_BN_CLICKED(IDC_LOGIN_OPTIONS_RECONNECTION, OnReconnect)
	ON_BN_CLICKED(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL, OnReconnectInterval)
	ON_BN_CLICKED(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT, OnReconnectCount)
	ON_BN_CLICKED(IDC_LOGIN_OPTIONS_HELP, OnHelp)
	ON_CONTROL(SBXN_CHANGE, IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL_MINUTES, OnSpinchangeReconnectInterval)
	ON_CONTROL(SBXN_CHANGE, IDC_LOGIN_OPTIONS_RECONNECTION_COUNT_NUMBER, OnSpinchangeReconnectCount)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CLoginOptionsDialog message handlers

BOOL CLoginOptionsDialog::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_LOGINOPTIONSDIALOG_TITLEITEM_TIME));
	m_szColumns.Add(STRING(IDS_LOGINOPTIONSDIALOG_TITLEITEM_SERVER));
	m_szColumns.Add(STRING(IDS_LOGINOPTIONSDIALOG_TITLEITEM_USER));
	Spinbox_SetRange(GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL_MINUTES), LOGINOPTIONS_INTERVAL_MINIMUM, LOGINOPTIONS_INTERVAL_MAXIMUM);
	Spinbox_SetRange(GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT_NUMBER), LOGINOPTIONS_COUNT_MINIMUM, LOGINOPTIONS_COUNT_MAXIMUM);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nWidth = CalcColumnWidth(m_szColumns.GetAt(nColumn)), SendDlgItemMessage(IDC_LOGIN_OPTIONS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nWidth = (++nColumn < nColumns) ? CalcColumnWidth(m_szColumns.GetAt(nColumn)) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_LOGIN_OPTIONS_LIST), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	if (EnumScheduledLogins())
	{
		GetDlgItem(IDC_LOGIN_OPTIONS_DETAILS)->EnableWindow();
		GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION)->EnableWindow();
		ShowLoginOptions();
	}
	return TRUE;
}

void CLoginOptionsDialog::OnListAdd()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CTimeKey  tTime[2];
	CLoginInfo  *pLoginInfo;
	CLoginScheduleDialog  cLoginScheduleDialog;

	for (; (pLoginInfo = new CLoginInfo); )
	{
		pLoginInfo->Copy(&m_cDefaultOption);
		if (cLoginScheduleDialog.DoModal(pLoginInfo) == IDOK)
		{
			if ((nIndex = m_pOptions[0].Add(pLoginInfo)) >= 0)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (szItem.Empty(), pLoginInfo->GetTimeRange(tTime[0], tTime[1]); m_szColumns.GetAt(nColumn) == STRING(IDS_LOGINOPTIONSDIALOG_TITLEITEM_TIME); )
					{
						szItem.Format(STRING(IDS_LOGINOPTIONSDIALOG_TIMERANGE_FORMAT), (LPCTSTR)tTime[0].FormatGmt(), (LPCTSTR)tTime[1].FormatGmt());
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_LOGINOPTIONSDIALOG_TITLEITEM_SERVER); )
					{
						szItem = pLoginInfo->GetServer();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_LOGINOPTIONSDIALOG_TITLEITEM_USER); )
					{
						szItem = pLoginInfo->GetUser();
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_LOGIN_OPTIONS_LIST), nIndex, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_LOGIN_OPTIONS_LIST), nIndex, nColumn, szItem);
				}
				Listview_SetCurText(GetDlgItem(IDC_LOGIN_OPTIONS_LIST), nIndex);
				m_cDefaultOption.Copy(pLoginInfo);
				break;
			}
		}
		delete pLoginInfo;
		break;
	}
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_OPTIONS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_OPTIONS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_LOGIN_OPTIONS_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_OPTIONS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST_ADD)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginOptionsDialog::OnListRemove()
{
	INT  nIndex;
	CLoginInfo  *pLoginInfo;
	CHourglassCursor  cCursor;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_LOGIN_OPTIONS_LIST))) >= 0)
	{
		if (SendDlgItemMessage(IDC_LOGIN_OPTIONS_LIST, LVM_DELETEITEM, nIndex))
		{
			if ((pLoginInfo = m_pOptions[0].GetAt(nIndex)))
			{
				m_pOptions[0].RemoveAt(nIndex);
				delete pLoginInfo;
			}
			for (; SendDlgItemMessage(IDC_LOGIN_OPTIONS_LIST, LVM_GETITEMCOUNT) > 0; )
			{
				Listview_SetCurText(GetDlgItem(IDC_LOGIN_OPTIONS_LIST), 0);
				break;
			}
		}
	}
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_OPTIONS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_OPTIONS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_LOGIN_OPTIONS_LIST)) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_OPTIONS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST_ADD)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginOptionsDialog::OnListRemoveAll()
{
	CHourglassCursor  cCursor;

	m_pOptions[0].RemoveAll();
	SendDlgItemMessage(IDC_LOGIN_OPTIONS_LIST, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_LIST_ADD)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginOptionsDialog::OnReconnect()
{
	m_pOptions[0].SetOptions((IsDlgButtonChecked(IDC_LOGIN_OPTIONS_RECONNECTION)) ? (m_pOptions[0].GetOptions() | LOGIN_OPTION_RECONNECT) : (m_pOptions[0].GetOptions() & ~(LOGIN_OPTION_RECONNECT | LOGIN_OPTION_RECONNECTBYINTERVAL | LOGIN_OPTION_RECONNECTBYCOUNT)));
	CheckDlgButton(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL, FALSE);
	CheckDlgButton(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT, FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_LOGIN_OPTIONS_RECONNECTION));
	GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_LOGIN_OPTIONS_RECONNECTION));
	GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginOptionsDialog::OnReconnectInterval()
{
	UINT  nCount;
	CTimeSpan  tInterval;

	if (IsDlgButtonChecked(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL))
	{
		m_pOptions[0].SetOptions(m_pOptions[0].GetOptions() | LOGIN_OPTION_RECONNECTBYINTERVAL);
		m_pOptions[0].GetRetention(tInterval, nCount);
		m_pOptions[0].SetRetention(SECONDSPERMINUTE*LOGINOPTIONS_INTERVAL_DEFAULT, nCount);
		Spinbox_SetPos(GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL_MINUTES), LOGINOPTIONS_INTERVAL_DEFAULT);
		GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL_MINUTES)->EnableWindow();
		GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL_STATIC)->EnableWindow();
		GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL_MINUTES)->SetFocus();
	}
	else
	{
		m_pOptions[0].SetOptions(m_pOptions[0].GetOptions() & ~LOGIN_OPTION_RECONNECTBYINTERVAL);
		GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL_MINUTES)->EnableWindow(FALSE);
		GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL_STATIC)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginOptionsDialog::OnReconnectCount()
{
	UINT  nCount;
	CTimeSpan  tInterval;

	if (IsDlgButtonChecked(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT))
	{
		m_pOptions[0].SetOptions(m_pOptions[0].GetOptions() | LOGIN_OPTION_RECONNECTBYCOUNT);
		m_pOptions[0].GetRetention(tInterval, nCount);
		m_pOptions[0].SetRetention(tInterval, LOGINOPTIONS_COUNT_DEFAULT);
		Spinbox_SetPos(GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT_NUMBER), LOGINOPTIONS_COUNT_DEFAULT);
		GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT_NUMBER)->EnableWindow();
		GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT_STATIC)->EnableWindow();
		GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT_NUMBER)->SetFocus();
	}
	else
	{
		m_pOptions[0].SetOptions(m_pOptions[0].GetOptions() & ~LOGIN_OPTION_RECONNECTBYCOUNT);
		GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT_NUMBER)->EnableWindow(FALSE);
		GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT_STATIC)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginOptionsDialog::OnSpinchangeReconnectInterval()
{
	UINT  nCount;
	CTimeSpan  tInterval;

	m_pOptions[0].GetRetention(tInterval, nCount);
	m_pOptions[0].SetRetention(SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_INTERVAL_MINUTES)), nCount);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginOptionsDialog::OnSpinchangeReconnectCount()
{
	UINT  nCount;
	CTimeSpan  tInterval;

	m_pOptions[0].GetRetention(tInterval, nCount);
	m_pOptions[0].SetRetention(tInterval, (UINT)Spinbox_GetPos(GetDlgItem(IDC_LOGIN_OPTIONS_RECONNECTION_COUNT_NUMBER)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginOptionsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	EndDialog(IDOK);
}

BOOL CLoginOptionsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_LOGINOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CLoginOptionsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_LOGINOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CLoginScheduleDialog dialog

IMPLEMENT_DYNCREATE(CLoginScheduleDialog, CLocaleDialog)

CLoginScheduleDialog::CLoginScheduleDialog(CWnd *pParentWnd) : CLocaleDialog(CLoginScheduleDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CLoginScheduleDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CLoginScheduleDialog::DoModal(CLoginInfo *pInfo)
{
	INT  nResult;

	for (m_cLoginInfo.Copy(pInfo); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		pInfo->Copy(&m_cLoginInfo);
		break;
	}
	return nResult;
}

BOOL CLoginScheduleDialog::EnumServers()
{
	INT  nServer;
	INT  nServers;
	CStringArray  szServers;
	CServerAddressBook  cServerAddressBook;

	SendDlgItemMessage(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER, CB_RESETCONTENT);
	for (nServer = 0, nServers = cServerAddressBook.EnumServers(szServers); nServer < nServers; nServer++)
	{
		if (SendDlgItemMessage(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szServers.GetAt(nServer)) == CB_ERR)
		{
			SendDlgItemMessage(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szServers.GetAt(nServer));
			continue;
		}
	}
	return TRUE;
}

BOOL CLoginScheduleDialog::IsModified() CONST
{
	CString  szUser;
	CString  szServer;
	CTimeKey  tTime[2];
	CTimeKey  tTimeKey[2];

	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_USER)->GetWindowText(szUser);
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER)->GetWindowText(szServer);
	tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_LOGIN_SCHEDULE_STARTTIME));
	tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_LOGIN_SCHEDULE_STOPTIME));
	return(((m_cLoginInfo.GetServer().CompareNoCase(szServer) || m_cLoginInfo.GetUser().Compare(szUser) || (m_cLoginInfo.GetTimeRange(tTimeKey[0], tTimeKey[1]) && (tTimeKey[0] != tTime[0] || tTimeKey[1] != tTime[1]))) && tTime[0] < tTime[1]) ? TRUE : FALSE);
}

BOOL CLoginScheduleDialog::Check(BOOL bModified) CONST
{
	CString  szUser;
	CString  szServer;

	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_USER)->GetWindowText(szUser);
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER)->GetWindowText(szServer);
	return((!szServer.IsEmpty() && !szUser.IsEmpty()) ? (!bModified || IsModified()) : FALSE);
}

void CLoginScheduleDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CLoginScheduleDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CLoginScheduleDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CLoginScheduleDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_LOGIN_SCHEDULE_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER, OnEditchangeServer)
	ON_CBN_SELCHANGE(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER, OnSelchangeServer)
	ON_CONTROL(TSBXN_CHANGE, IDC_LOGIN_SCHEDULE_STARTTIME, OnSpinchangeStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_LOGIN_SCHEDULE_STOPTIME, OnSpinchangeStopTime)
	ON_EN_CHANGE(IDC_LOGIN_SCHEDULE_PROPERTIES_USER, OnEditchangeUser)
	ON_EN_CHANGE(IDC_LOGIN_SCHEDULE_PROPERTIES_PASSWORD, OnEditchangePassword)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CLoginScheduleDialog message handlers

BOOL CLoginScheduleDialog::OnInitDialog()
{
	CTimeKey  tTime;
	CTimeKey  tRange[2];
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	Timespinbox_SetTime(GetDlgItem(IDC_LOGIN_SCHEDULE_STARTTIME), CTimeKey(tTime.GetTime() + LOGINSCHEDULE_TIMERANGE_DEFAULT));
	Timespinbox_SetTime(GetDlgItem(IDC_LOGIN_SCHEDULE_STOPTIME), CTimeKey(tTime.GetTime() + 2 * LOGINSCHEDULE_TIMERANGE_DEFAULT));
	for (EnumServers(); SendDlgItemMessage(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_cLoginInfo.GetServer())) >= 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_LOGIN_SCHEDULE_STARTTIME), (m_cLoginInfo.GetTimeRange(tRange[0], tRange[1])) ? tRange[0] : (tTime.GetTime() + LOGINSCHEDULE_TIMERANGE_DEFAULT));
		Timespinbox_SetTime(GetDlgItem(IDC_LOGIN_SCHEDULE_STOPTIME), (m_cLoginInfo.GetTimeRange(tRange[0], tRange[1])) ? tRange[1] : (tTime.GetTime() + 2 * LOGINSCHEDULE_TIMERANGE_DEFAULT));
		GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_PASSWORD)->SetWindowText(m_cLoginInfo.GetPassword());
		GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_USER)->SetWindowText(m_cLoginInfo.GetUser());
		break;
	}
	GetDlgItem(IDC_LOGIN_SCHEDULE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_LOGIN_SCHEDULE_STARTTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_LOGIN_SCHEDULE_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_LOGIN_SCHEDULE_STOPTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_LOGIN_SCHEDULE_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES)->EnableWindow();
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER_STATIC)->EnableWindow();
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER)->EnableWindow();
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER)->SetFocus();
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_USER_STATIC)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_USER)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_PASSWORD_STATIC)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_PASSWORD)->EnableWindow((SendDlgItemMessage(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	return TRUE;
}

void CLoginScheduleDialog::OnEditchangeServer()
{
	CString  szServer;

	for (GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER)->GetWindowText(szServer); szServer.IsEmpty(); )
	{
		GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_USER)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_PASSWORD)->SetWindowText(EMPTYSTRING);
		break;
	}
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_USER_STATIC)->EnableWindow(!szServer.IsEmpty());
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_USER)->EnableWindow(!szServer.IsEmpty());
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_PASSWORD_STATIC)->EnableWindow(!szServer.IsEmpty());
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_PASSWORD)->EnableWindow(!szServer.IsEmpty());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginScheduleDialog::OnEditchangeUser()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginScheduleDialog::OnEditchangePassword()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginScheduleDialog::OnSelchangeServer()
{
	SendDlgItemMessage(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER, CB_GETCURSEL));
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_USER_STATIC)->EnableWindow();
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_USER)->EnableWindow();
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_PASSWORD_STATIC)->EnableWindow();
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_PASSWORD)->EnableWindow();
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_USER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginScheduleDialog::OnSpinchangeStartTime()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginScheduleDialog::OnSpinchangeStopTime()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CLoginScheduleDialog::OnOK()
{
	CString  szUser;
	CString  szServer;
	CString  szPassword;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_USER)->GetWindowText(szUser);
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_SERVER)->GetWindowText(szServer);
	GetDlgItem(IDC_LOGIN_SCHEDULE_PROPERTIES_PASSWORD)->GetWindowText(szPassword);
	m_cLoginInfo.SetTimeRange(Timespinbox_GetTime(GetDlgItem(IDC_LOGIN_SCHEDULE_STARTTIME)), Timespinbox_GetTime(GetDlgItem(IDC_LOGIN_SCHEDULE_STOPTIME)));
	m_cLoginInfo.SetPassword(szPassword);
	m_cLoginInfo.SetServer(szServer);
	m_cLoginInfo.SetUser(szUser);
	EndDialog(IDOK);
}

BOOL CLoginScheduleDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_LOGINSCHEDULEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CLoginScheduleDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_LOGINSCHEDULEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CSettingsDisplayAreaPage property page

IMPLEMENT_DYNCREATE(CSettingsDisplayAreaPage, CLocalePropertyPage)

CSettingsDisplayAreaPage::CSettingsDisplayAreaPage() : CLocalePropertyPage(CSettingsDisplayAreaPage::IDD)
{
	//{{AFX_DATA_INIT(CSettingsDisplayAreaPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CSettingsDisplayAreaPage::EnumUsers(INT nIndex)
{
	INT  nDisplayPageUser;
	INT  nDisplayPageUsers;
	CStringArray  *pDisplayPageUsers;

	if ((pDisplayPageUsers = (CStringArray *)m_pUsers.GetAt(nIndex)))
	{
		for (nDisplayPageUser = 0, nDisplayPageUsers = (INT)pDisplayPageUsers->GetSize(), SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_RESETCONTENT); nDisplayPageUser < nDisplayPageUsers; nDisplayPageUser++)
		{
			SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pDisplayPageUsers->GetAt(nDisplayPageUser));
			continue;
		}
	}
	CheckRadioButton(IDC_SETTINGS_DISPLAYAREAPAGE_ALLUSERS, IDC_SETTINGS_DISPLAYAREAPAGE_LIMITEDUSERS, (!SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_GETCOUNT)) ? IDC_SETTINGS_DISPLAYAREAPAGE_ALLUSERS : IDC_SETTINGS_DISPLAYAREAPAGE_LIMITEDUSERS);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS)->EnableWindow((IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_LIMITEDUSERS) && SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_ADDUSER)->EnableWindow((IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_LIMITEDUSERS)) ? CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_REMOVEUSER)->EnableWindow(FALSE);
}

VOID CSettingsDisplayAreaPage::EnumPasswords(INT nIndex)
{
	CheckRadioButton(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_NONE, IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL, (nIndex < 0 || m_szPasswords.GetAt(nIndex).IsEmpty()) ? IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_NONE : ((m_szPasswords.GetAt(nIndex)[0] == EOL) ? IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_USER : IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL));
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONTENTS)->SetWindowText((IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL)) ? (LPCTSTR)m_szPasswords.GetAt(nIndex) : EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION)->SetWindowText((IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL)) ? (LPCTSTR)m_szPasswords.GetAt(nIndex) : EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONTENTS)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL));
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL));
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL));
}

BOOL CSettingsDisplayAreaPage::InsertTab(LPCTSTR pszTitle, INT nIndex)
{
	TC_ITEM  sDisplayPage;
	CStringArray  *pDisplayPageUsers;

	for (; (pDisplayPageUsers = new CStringArray); )
	{
		for (m_szTabs[0].InsertAt(nIndex, pszTitle), m_nTabs.InsertAt(nIndex, TRUE), m_pUsers.InsertAt(nIndex, pDisplayPageUsers), m_szPasswords.InsertAt(nIndex, EMPTYSTRING), m_nBehaviorFlags.InsertAt(nIndex, FALSE, 1), SaveDisplayPageInfo(), sDisplayPage.mask = TCIF_TEXT, sDisplayPage.cchTextMax = lstrlen(pszTitle) + 1, sDisplayPage.pszText = (LPTSTR)(LPCTSTR)m_szTabs[0][nIndex]; SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_INSERTITEM, nIndex, (LPARAM)&sDisplayPage) == nIndex; ) return TRUE;
		break;
	}
	return FALSE;
}

BOOL CSettingsDisplayAreaPage::ModifyTab(LPCTSTR pszTitle, INT nIndex)
{
	TC_ITEM  sDisplayPage;

	for (m_szTabs[0].SetAt(nIndex, pszTitle), m_nTabs.SetAt(nIndex, -TRUE), sDisplayPage.mask = TCIF_TEXT, sDisplayPage.cchTextMax = lstrlen(pszTitle) + 1, sDisplayPage.pszText = (LPTSTR)(LPCTSTR)m_szTabs[0][nIndex]; SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_SETITEM, nIndex, (LPARAM)&sDisplayPage); ) return TRUE;
	return FALSE;
}

BOOL CSettingsDisplayAreaPage::DeleteTab(INT nIndex)
{
	INT  nDisplayPage;
	INT  nDisplayPages;

	if (nIndex < m_szTabs[0].GetSize() && nIndex < m_nTabs.GetSize() && nIndex < m_pUsers.GetSize() && nIndex < m_szPasswords.GetSize() && nIndex < m_nBehaviorFlags.GetSize() && SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_DELETEITEM, nIndex) > 0)
	{
		for (nDisplayPage = 0, nDisplayPages = (INT)m_szTabs[1].GetSize(); nDisplayPage < nDisplayPages; nDisplayPage++)
		{
			if (m_szTabs[0].GetAt(nIndex) == m_szTabs[1].GetAt(nDisplayPage))
			{
				m_szList += TAB + m_szTabs[0].GetAt(nIndex) + TAB;
				break;
			}
		}
		delete (CStringArray *)m_pUsers.GetAt(nIndex);
		m_szTabs[0].RemoveAt(nIndex);
		m_nTabs.RemoveAt(nIndex);
		m_pUsers.RemoveAt(nIndex);
		m_szPasswords.RemoveAt(nIndex);
		m_nBehaviorFlags.RemoveAt(nIndex);
		return TRUE;
	}
	return FALSE;
}

VOID CSettingsDisplayAreaPage::ShowDisplayPageInfo()
{
	INT  nIndex;

	if ((nIndex = (IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_FOLDER)) ? (INT)SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_GETCURSEL) : -1) >= 0)
	{
		CheckDlgButton(IDC_SETTINGS_DISPLAYAREAPAGE_BEHAVIOR, (nIndex < m_nBehaviorFlags.GetSize()) ? (BOOL)m_nBehaviorFlags.GetAt(nIndex) : FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TABS)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TABSCOMMENT)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TABS)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TABSCOMMENT)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_DELETE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_GETITEMCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE) : FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_BEHAVIOR)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_ACCESS)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_ALLUSERS)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_LIMITEDUSERS)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_NONE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_USER)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL)->EnableWindow();
		EnumPasswords(nIndex);
		EnumUsers(nIndex);
		return;
	}
	CheckDlgButton(IDC_SETTINGS_DISPLAYAREAPAGE_BEHAVIOR, FALSE);
	CheckDlgButton(IDC_SETTINGS_DISPLAYAREAPAGE_ALLUSERS, FALSE);
	CheckDlgButton(IDC_SETTINGS_DISPLAYAREAPAGE_LIMITEDUSERS, FALSE);
	CheckDlgButton(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_NONE, FALSE);
	CheckDlgButton(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_USER, FALSE);
	CheckDlgButton(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL, FALSE);
	SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_RESETCONTENT);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TABS)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TABSCOMMENT)->ShowWindow(SW_SHOW);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONTENTS)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TABS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TABSCOMMENT)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_INSERTBEFORE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_INSERTAFTER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_MODIFY)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_DELETE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_BEHAVIOR)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_ACCESS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_ALLUSERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_LIMITEDUSERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_ADDUSER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_REMOVEUSER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_NONE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_USER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONTENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION)->EnableWindow(FALSE);
}

VOID CSettingsDisplayAreaPage::SaveDisplayPageInfo()
{
	INT  nDisplayPage;
	INT  nDisplayPages;
	INT  nDisplayPageUser;
	INT  nDisplayPageUsers;
	CString  szDisplayPageUser;
	CString  szDisplayPageTitle;
	CString  szDisplayPagePassword[2];
	CStringArray  *pDisplayPageUsers;

	if (IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_FOLDER))
	{
		for (nDisplayPage = 0, nDisplayPages = (INT)m_szTabs[0].GetSize(), GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE)->GetWindowText(szDisplayPageTitle); nDisplayPage < nDisplayPages; nDisplayPage++)
		{
			if (m_szTabs[0].GetAt(nDisplayPage) == szDisplayPageTitle) break;
			continue;
		}
		if ((pDisplayPageUsers = (nDisplayPage < nDisplayPages) ? (CStringArray *)m_pUsers.GetAt(nDisplayPage) : (CStringArray *)NULL))
		{
			for (nDisplayPageUser = 0, nDisplayPageUsers = (INT)GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS)->SendMessage(LB_GETCOUNT), GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONTENTS)->GetWindowText(szDisplayPagePassword[0]), GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION)->GetWindowText(szDisplayPagePassword[1]), m_nBehaviorFlags.SetAt(nDisplayPage, IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_BEHAVIOR)), pDisplayPageUsers->RemoveAll(); nDisplayPageUser < nDisplayPageUsers && IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_LIMITEDUSERS); nDisplayPageUser++)
			{
				szDisplayPageUser = Listbox_GetText(GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS), nDisplayPageUser);
				pDisplayPageUsers->Add(szDisplayPageUser);
			}
			if (IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_NONE) || (IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL) && (szDisplayPagePassword[0] != szDisplayPagePassword[1] || szDisplayPagePassword[0].IsEmpty() || szDisplayPagePassword[1].IsEmpty())))
			{
				m_szPasswords.SetAt(nDisplayPage, EMPTYSTRING);
				return;
			}
			if (IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_USER))
			{
				m_szPasswords.SetAt(nDisplayPage, CString(EOL));
				return;
			}
			if (IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL))
			{
				m_szPasswords.SetAt(nDisplayPage, szDisplayPagePassword[0]);
				return;
			}
		}
	}
}

VOID CSettingsDisplayAreaPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_STANDARD, (bCheck = CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE)));
	AccessControl(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_FOLDER, bCheck);
	AccessControl(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE, bCheck);
	AccessControl(IDC_SETTINGS_DISPLAYAREAPAGE_BEHAVIOR, bCheck);
	AccessControl(IDC_SETTINGS_DISPLAYAREAPAGE_ALLUSERS, bCheck);
	AccessControl(IDC_SETTINGS_DISPLAYAREAPAGE_LIMITEDUSERS, bCheck);
	AccessControl(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_NONE, bCheck);
	AccessControl(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_USER, bCheck);
	AccessControl(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL, bCheck);
	AccessControl(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONTENTS, bCheck);
	AccessControl(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION, bCheck);
}

BOOL CSettingsDisplayAreaPage::IsModified(BOOL bAll) CONST
{
	INT  nDisplayPage;
	INT  nDisplayPages;
	INT  nDisplayPageUser;
	INT  nDisplayPageUsers;
	UINT  nDisplayPageFlags;
	CString  szDisplayPageUser;
	CString  szDisplayPagePassword[3];
	CStringArray  *pDisplayPageUsers;
	CStringArray  szDisplayPageUsers;
	CStringArray  szDisplayPages;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		if ((GetDisplayArea()->GetType() == DISPLAYAREA_TYPE_FOLDER  &&  IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_STANDARD)) || IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_FOLDER))
		{
			for (nDisplayPage = 0, nDisplayPages = (IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_FOLDER)) ? GetDisplayArea()->EnumPages(szDisplayPages) : 0; nDisplayPage < nDisplayPages && m_szTabs[0].GetSize() == nDisplayPages && m_nTabs.GetSize() == nDisplayPages && m_szPasswords.GetSize() == nDisplayPages && m_pUsers.GetSize() == nDisplayPages && m_nBehaviorFlags.GetSize() == nDisplayPages; nDisplayPage++)
			{
				if ((pDisplayPageUsers = (CStringArray *)m_pUsers.GetAt(nDisplayPage)) && GetDisplayArea()->GetUsers(nDisplayPage, szDisplayPageUsers) >= 0 && GetDisplayArea()->GetPassword(nDisplayPage, szDisplayPagePassword[0]) && GetDisplayArea()->GetBehavior(nDisplayPage, nDisplayPageFlags))
				{
					if (GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TABS)->SendMessage(TCM_GETCURSEL) == nDisplayPage)
					{
						GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONTENTS)->GetWindowText(szDisplayPagePassword[1]);
						GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION)->GetWindowText(szDisplayPagePassword[2]);
						if (m_szTabs[0].GetAt(nDisplayPage) == szDisplayPages.GetAt(nDisplayPage) && ((!IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_USER) && szDisplayPagePassword[0] == szDisplayPagePassword[1]) || (IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_USER) && szDisplayPagePassword[0] == CString(EOL) && szDisplayPagePassword[1].IsEmpty())) && szDisplayPagePassword[1] == szDisplayPagePassword[2] && szDisplayPageUsers.GetSize() == GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS)->SendMessage(LB_GETCOUNT) && m_nBehaviorFlags.GetAt(nDisplayPage) == IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_BEHAVIOR))
						{
							for (nDisplayPageUser = 0, nDisplayPageUsers = (INT)GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS)->SendMessage(LB_GETCOUNT); nDisplayPageUser < nDisplayPageUsers; nDisplayPageUser++)
							{
								if ((szDisplayPageUser = Listbox_GetText(GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS), nDisplayPageUser)) != szDisplayPageUsers.GetAt(nDisplayPageUser)) break;
								continue;
							}
							if (nDisplayPageUser == nDisplayPageUsers) continue;
						}
						break;
					}
					if (m_szTabs[0].GetAt(nDisplayPage) == szDisplayPages.GetAt(nDisplayPage) && m_szPasswords.GetAt(nDisplayPage) == szDisplayPagePassword[0] && szDisplayPageUsers.GetSize() == pDisplayPageUsers->GetSize() && !m_nTabs.GetAt(nDisplayPage) && m_nBehaviorFlags.GetAt(nDisplayPage) == nDisplayPageFlags)
					{
						for (nDisplayPageUser = 0, nDisplayPageUsers = (INT)szDisplayPageUsers.GetSize(); nDisplayPageUser < nDisplayPageUsers; nDisplayPageUser++)
						{
							if (szDisplayPageUsers.GetAt(nDisplayPageUser) != pDisplayPageUsers->GetAt(nDisplayPageUser)) break;
							continue;
						}
						if (nDisplayPageUser == nDisplayPageUsers) continue;
					}
					break;
				}
			}
			return((IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_STANDARD) || (GetDisplayArea()->GetType() == DISPLAYAREA_TYPE_STANDARD || GetDisplayArea()->GetActivePage() != GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TABS)->SendMessage(TCM_GETCURSEL) || !m_szList.IsEmpty() || nDisplayPage < nDisplayPages)) ? TRUE : FALSE);
		}
		return TRUE;
	}
	return((bAll) ? CLocalePropertyPage::IsModified() : FALSE);
}

BOOL CSettingsDisplayAreaPage::Check(BOOL bAll) CONST
{
	CString  szDisplayPagePassword[2];

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONTENTS)->GetWindowText(szDisplayPagePassword[0]);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION)->GetWindowText(szDisplayPagePassword[1]);
		return((m_szTabs[0].GetSize() == m_nTabs.GetSize() && m_szTabs[0].GetSize() == m_szPasswords.GetSize() && m_szTabs[0].GetSize() == m_pUsers.GetSize() && m_szTabs[0].GetSize() == m_nBehaviorFlags.GetSize() && (IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_STANDARD) || (IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_FOLDER) && (IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_ALLUSERS) || (IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_LIMITEDUSERS) && GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS)->SendMessage(LB_GETCOUNT) && GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS)->SendMessage(LB_FINDSTRINGEXACT, 0, (LPARAM)(LPCTSTR)GetAccountUserName()) != LB_ERR)) && (IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_NONE) || IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_USER) || (IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL) && szDisplayPagePassword[0] == szDisplayPagePassword[1] && !szDisplayPagePassword[0].IsEmpty() && !szDisplayPagePassword[1].IsEmpty()))))) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

VOID CSettingsDisplayAreaPage::Update()
{
	INT  nDisplayPage;
	INT  nDisplayPages;
	CStringArray  szDisplayPages;
	CStringArray  *pDisplayPageUsers;
	CProfile  cProfile;

	if (IsWindow(GetSafeHwnd()) && IsModified(FALSE))
	{
		for (; (GetDisplayArea()->GetType() == DISPLAYAREA_TYPE_STANDARD && IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_FOLDER) && cProfile.SetDisplayAreaType(DISPLAYAREA_TYPE_FOLDER)) || (GetDisplayArea()->GetType() == DISPLAYAREA_TYPE_FOLDER && IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_STANDARD) && cProfile.SetDisplayAreaType(DISPLAYAREA_TYPE_STANDARD)); )
		{
			ReloadAccount(CDesktopApp::ChangeArea);
			break;
		}
		if (GetMainWnd()->CheckDisplays())
		{
			if (GetDisplayArea()->GetType() == DISPLAYAREA_TYPE_FOLDER)
			{
				for (nDisplayPage = 0, nDisplayPages = GetDisplayArea()->EnumPages(szDisplayPages), SaveDisplayPageInfo(); nDisplayPages != m_szTabs[0].GetSize() || nDisplayPage < nDisplayPages; nDisplayPages = (INT)szDisplayPages.GetSize())
				{
					if ((nDisplayPage < nDisplayPages  &&  m_szList.Find(TAB + szDisplayPages.GetAt(nDisplayPage) + TAB) >= 0) || nDisplayPage == m_szTabs[0].GetSize())
					{
						if (GetDisplayArea()->RemovePage(nDisplayPage))
						{
							szDisplayPages.RemoveAt(nDisplayPage);
							continue;
						}
						break;
					}
					if (m_nTabs.GetAt(nDisplayPage))
					{
						if ((pDisplayPageUsers = (CStringArray *)m_pUsers.GetAt(nDisplayPage)))
						{
							if ((m_nTabs.GetAt(nDisplayPage) == TRUE  &&  GetDisplayArea()->AddPage(m_szTabs[0].GetAt(nDisplayPage), nDisplayPage)) || (m_nTabs.GetAt(nDisplayPage) != TRUE  &&  GetDisplayArea()->ModifyPage(m_szTabs[0].GetAt(nDisplayPage), nDisplayPage)))
							{
								for (GetDisplayArea()->SetUsers(nDisplayPage, *pDisplayPageUsers), GetDisplayArea()->SetPassword(nDisplayPage, m_szPasswords.GetAt(nDisplayPage)), GetDisplayArea()->SetBehavior(nDisplayPage, m_nBehaviorFlags.GetAt(nDisplayPage)); m_nTabs.GetAt(nDisplayPage) == TRUE; )
								{
									szDisplayPages.InsertAt(nDisplayPage, m_szTabs[0].GetAt(nDisplayPage));
									break;
								}
								for (; m_nTabs.GetAt(nDisplayPage) != TRUE; )
								{
									szDisplayPages.SetAt(nDisplayPage, m_szTabs[0].GetAt(nDisplayPage));
									break;
								}
								nDisplayPage++;
								continue;
							}
						}
						break;
					}
					if ((pDisplayPageUsers = (CStringArray *)m_pUsers.GetAt(nDisplayPage)))
					{
						GetDisplayArea()->SetUsers(nDisplayPage, *pDisplayPageUsers);
						GetDisplayArea()->SetPassword(nDisplayPage, m_szPasswords.GetAt(nDisplayPage));
						GetDisplayArea()->SetBehavior(nDisplayPage, m_nBehaviorFlags.GetAt(nDisplayPage));
						nDisplayPage++;
						continue;
					}
					break;
				}
				if (szDisplayPages.GetSize() == m_szTabs[0].GetSize() && nDisplayPage == nDisplayPages)
				{
					GetDisplayArea()->ActivatePage(-(INT)(SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_GETCURSEL) + 1));
					GetMainWnd()->UpdateMenus();
					ShowMessage(IDS_STATUSBAR_READY);
					return;
				}
				ResetAccount(SYSTEM_WARNING_DISPLAYS_UPDATE_FAILURE);
				return;
			}
			GetMainWnd()->UpdateMenus();
			ShowMessage(IDS_STATUSBAR_READY);
			return;
		}
		ResetAccount(SYSTEM_WARNING_DISPLAYS_UPDATE_FAILURE);
	}
}

CSettingsDialog *CSettingsDisplayAreaPage::GetParent() CONST
{
	return((CSettingsDialog *)CLocalePropertyPage::GetParent());
}

void CSettingsDisplayAreaPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CSettingsDisplayAreaPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CSettingsDisplayAreaPage::PostNcDestroy()
{
	INT  nDisplayPageUser;
	INT  nDisplayPageUsers;
	CStringArray  *pStringArray;

	for (nDisplayPageUser = 0, nDisplayPageUsers = (INT)m_pUsers.GetSize(), m_szTabs[0].RemoveAll(), m_szTabs[1].RemoveAll(), m_nTabs.RemoveAll(), m_szList.Empty(), m_szPasswords.RemoveAll(), m_nBehaviorFlags.RemoveAll(); nDisplayPageUser < nDisplayPageUsers; nDisplayPageUser++)
	{
		if ((pStringArray = (CStringArray *)m_pUsers.GetAt(nDisplayPageUser))) delete pStringArray;
		continue;
	}
	m_pUsers.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CSettingsDisplayAreaPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CSettingsDisplayAreaPage)
	ON_BN_CLICKED(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_STANDARD, OnStandardType)
	ON_BN_CLICKED(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_FOLDER, OnFolderType)
	ON_BN_CLICKED(IDC_SETTINGS_DISPLAYAREAPAGE_INSERTBEFORE, OnInsertBefore)
	ON_BN_CLICKED(IDC_SETTINGS_DISPLAYAREAPAGE_INSERTAFTER, OnInsertAfter)
	ON_BN_CLICKED(IDC_SETTINGS_DISPLAYAREAPAGE_MODIFY, OnModify)
	ON_BN_CLICKED(IDC_SETTINGS_DISPLAYAREAPAGE_DELETE, OnDelete)
	ON_BN_CLICKED(IDC_SETTINGS_DISPLAYAREAPAGE_BEHAVIOR, OnBehavior)
	ON_BN_CLICKED(IDC_SETTINGS_DISPLAYAREAPAGE_ALLUSERS, OnAllUsers)
	ON_BN_CLICKED(IDC_SETTINGS_DISPLAYAREAPAGE_LIMITEDUSERS, OnLimitedUsers)
	ON_BN_CLICKED(IDC_SETTINGS_DISPLAYAREAPAGE_ADDUSER, OnAddUser)
	ON_BN_CLICKED(IDC_SETTINGS_DISPLAYAREAPAGE_REMOVEUSER, OnRemoveUser)
	ON_BN_CLICKED(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_NONE, OnPasswordNone)
	ON_BN_CLICKED(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_USER, OnPasswordUser)
	ON_BN_CLICKED(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL, OnPasswordSpecial)
	ON_EN_CHANGE(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE, OnEditchangeTitle)
	ON_EN_CHANGE(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONTENTS, OnEditchangePasswordContents)
	ON_EN_CHANGE(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION, OnEditchangePasswordConfirmation)
	ON_LBN_SELCHANGE(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, OnSelchangeUsers)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSettingsDisplayAreaPage message handlers

BOOL CSettingsDisplayAreaPage::OnInitDialog()
{
	INT  nDisplayPage;
	INT  nDisplayPages;
	UINT  nDisplayPageFlags;
	CString  szDisplayPageTitle;
	CString  szDisplayPagePassword;
	CUIntArray  nDisplayPageBehaviors;
	CStringArray  szDisplayPageTitles;
	CStringArray  szDisplayPageUsers;
	CStringArray  *pDisplayPageUsers;
	CDisplayArea  *pDisplayArea;
	CProfile  cProfile;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	if ((pDisplayArea = GetDisplayArea()))
	{
		if (pDisplayArea->GetType() == DISPLAYAREA_TYPE_STANDARD)
		{
			for (nDisplayPage = 0, nDisplayPages = (cProfile.GetDisplayAreaPageCount(nDisplayPages)) ? nDisplayPages : 0, nDisplayPageFlags = FALSE; nDisplayPage < nDisplayPages; nDisplayPage++)
			{
				if (cProfile.GetDisplayPageTitle(nDisplayPage, szDisplayPageTitle))
				{
					cProfile.GetDisplayPageFlags(nDisplayPage, nDisplayPageFlags);
					nDisplayPageBehaviors.Add(nDisplayPageFlags);
					szDisplayPageTitles.Add(szDisplayPageTitle);
					continue;
				}
				break;
			}
		}
		for (nDisplayPage = 0, nDisplayPages = (pDisplayArea->GetType() == DISPLAYAREA_TYPE_FOLDER) ? (((nDisplayPages = pDisplayArea->EnumPages(szDisplayPageTitles)) > 0) ? nDisplayPages : 0) : (INT)szDisplayPageTitles.GetSize(), GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TABS)->GetWindowText(szDisplayPageTitle), GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_CONTENTS)->SetWindowPos(GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TABS), 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE), szDisplayPageTitle.Format(STRING(IDS_DISPLAYFOLDER_TITLE), nDisplayPage + 1), m_szList.Empty(), nDisplayPageFlags = (nDisplayPage < nDisplayPageBehaviors.GetSize()) ? nDisplayPageBehaviors.GetAt(nDisplayPage) : FALSE; nDisplayPage < nDisplayPages || !nDisplayPage; nDisplayPage++, szDisplayPageTitle.Format(STRING(IDS_DISPLAYFOLDER_TITLE), nDisplayPage + 1), nDisplayPageFlags = (nDisplayPage < nDisplayPageBehaviors.GetSize()) ? nDisplayPageBehaviors.GetAt(nDisplayPage) : FALSE, szDisplayPageUsers.RemoveAll(), szDisplayPagePassword.Empty())
		{
			if (pDisplayArea->GetType() == DISPLAYAREA_TYPE_STANDARD || (pDisplayArea->GetType() == DISPLAYAREA_TYPE_FOLDER  &&  pDisplayArea->GetUsers(nDisplayPage, szDisplayPageUsers) >= 0 && pDisplayArea->GetPassword(nDisplayPage, szDisplayPagePassword) && pDisplayArea->GetBehavior(nDisplayPage, nDisplayPageFlags)))
			{
				if (InsertTab((nDisplayPage < szDisplayPageTitles.GetSize()) ? szDisplayPageTitles.GetAt(nDisplayPage) : szDisplayPageTitle, nDisplayPage))
				{
					if ((pDisplayPageUsers = (CStringArray *)m_pUsers.GetAt(nDisplayPage)))
					{
						pDisplayPageUsers->Copy(szDisplayPageUsers);
						m_szTabs[1].SetAtGrow(nDisplayPage, m_szTabs[0].GetAt(nDisplayPage));
						m_szPasswords.SetAtGrow(nDisplayPage, szDisplayPagePassword);
						m_nBehaviorFlags.SetAtGrow(nDisplayPage, nDisplayPageFlags);
						m_pUsers.SetAtGrow(nDisplayPage, pDisplayPageUsers);
						m_nTabs.SetAtGrow(nDisplayPage, FALSE);
						continue;
					}
				}
			}
			break;
		}
		if (SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_GETITEMCOUNT) == nDisplayPages || !nDisplayPages)
		{
			CheckDlgButton(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_STANDARD, (pDisplayArea->GetType() == DISPLAYAREA_TYPE_STANDARD) ? TRUE : FALSE);
			CheckDlgButton(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_FOLDER, (pDisplayArea->GetType() == DISPLAYAREA_TYPE_FOLDER) ? TRUE : FALSE);
			if (IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_STANDARD) || IsDlgButtonChecked(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_FOLDER))
			{
				SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_SETCURSEL, (pDisplayArea->GetType() == DISPLAYAREA_TYPE_STANDARD) ? ((cProfile.GetDisplayAreaActivePage(nDisplayPage)) ? nDisplayPage : 0) : pDisplayArea->GetActivePage());
				SetDlgItemText(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE, (pDisplayArea->GetType() == DISPLAYAREA_TYPE_FOLDER) ? (LPCTSTR)m_szTabs[0].GetAt(max(SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_GETCURSEL), 0)) : EMPTYSTRING);
				ShowDisplayPageInfo();
			}
		}
	}
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TABS)->SetWindowPos(&wndTop, 0, 0, 0, 0, SWP_NOACTIVATE | SWP_NOMOVE | SWP_NOSIZE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_FOLDER)->SetWindowPos(&wndTop, 0, 0, 0, 0, SWP_NOACTIVATE | SWP_NOMOVE | SWP_NOSIZE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_STANDARD)->SetWindowPos(&wndTop, 0, 0, 0, 0, SWP_NOACTIVATE | SWP_NOMOVE | SWP_NOSIZE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_STANDARD)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TYPE_FOLDER)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_CONTENTS)->EnableWindow();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CSettingsDisplayAreaPage::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CWnd  *pCtrl;
	NMTCKEYDOWN  *pNotifyInfo = (NMTCKEYDOWN *)lParam;

	if (pNotifyInfo->hdr.idFrom == IDC_SETTINGS_DISPLAYAREAPAGE_TABS)
	{
		for (; pNotifyInfo->hdr.code == TCN_SELCHANGING; )
		{
			SaveDisplayPageInfo();
			break;
		}
		if (pNotifyInfo->hdr.code == TCN_SELCHANGE)
		{
			SetDlgItemText(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE, m_szTabs[0].GetAt(max(SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_GETCURSEL), 0)));
			ShowDisplayPageInfo();
		}
		if (pNotifyInfo->hdr.code == TCN_KEYDOWN  &&  pNotifyInfo->wVKey == VK_TAB)
		{
			if ((pCtrl = GetNextDlgTabItem(GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TABS), (HIBYTE(GetKeyState(VK_SHIFT))) ? TRUE : FALSE)) != GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TABS))
			{
				pCtrl->SetFocus();
				return TRUE;
			}
			GetParent()->GetNextDlgTabItem(this, (HIBYTE(GetKeyState(VK_SHIFT))))->SetFocus();
		}
		GetDlgItem(IDOK)->EnableWindow(Check());
	}
	return CLocalePropertyPage::OnNotify(wParam, lParam, pResult);
}

void CSettingsDisplayAreaPage::OnStandardType()
{
	INT  nIndex;
	CProfile  cProfile;

	if (SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_SETCURSEL, (GetDisplayArea()->GetType() == DISPLAYAREA_TYPE_STANDARD) ? ((cProfile.GetDisplayAreaActivePage(nIndex)) ? nIndex : 0) : GetDisplayArea()->GetActivePage()) >= 0)
	{
		SetDlgItemText(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE, EMPTYSTRING);
		ShowDisplayPageInfo();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnFolderType()
{
	INT  nIndex;
	CProfile  cProfile;

	if (SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_SETCURSEL, (GetDisplayArea()->GetType() == DISPLAYAREA_TYPE_STANDARD) ? ((cProfile.GetDisplayAreaActivePage(nIndex)) ? nIndex : 0) : GetDisplayArea()->GetActivePage()) >= 0)
	{
		SetDlgItemText(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE, m_szTabs[0].GetAt(max(SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_GETCURSEL), 0)));
		ShowDisplayPageInfo();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnInsertBefore()
{
	INT  nIndex;
	CString  szDisplayPageTitle;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE)->GetWindowText(szDisplayPageTitle);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_GETCURSEL)) >= 0 && InsertTab(szDisplayPageTitle, nIndex))
	{
		SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_SETCURSEL, nIndex);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_INSERTBEFORE)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_INSERTAFTER)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_MODIFY)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_DELETE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE));
		ShowDisplayPageInfo();
	}
	SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnInsertAfter()
{
	INT  nIndex;
	CString  szDisplayPageTitle;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE)->GetWindowText(szDisplayPageTitle);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_GETCURSEL)) >= 0 && InsertTab(szDisplayPageTitle, nIndex + 1))
	{
		SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_SETCURSEL, nIndex + 1);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_INSERTBEFORE)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_INSERTAFTER)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_MODIFY)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_DELETE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE));
		ShowDisplayPageInfo();
	}
	SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnModify()
{
	INT  nIndex;
	CString  szDisplayPageTitle;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE)->GetWindowText(szDisplayPageTitle);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_GETCURSEL)) >= 0 && ModifyTab(szDisplayPageTitle, nIndex))
	{
		SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_SETCURSEL, nIndex);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_INSERTBEFORE)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_INSERTAFTER)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_MODIFY)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_DELETE)->EnableWindow((m_szTabs[0].GetSize() > 1) ? CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE) : FALSE);
		ShowDisplayPageInfo();
	}
	SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnDelete()
{
	INT  nIndex;
	CHourglassCursor  cCursor;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_GETCURSEL)) >= 0 && DeleteTab(nIndex))
	{
		SetDlgItemText(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE, m_szTabs[0].GetAt(0));
		SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_SETCURSEL);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_INSERTBEFORE)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_INSERTAFTER)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_MODIFY)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_DELETE)->EnableWindow((m_szTabs[0].GetSize() > 1) ? CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE) : FALSE);
		ShowDisplayPageInfo();
	}
	SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnBehavior()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnEditchangeTitle()
{
	INT  nDisplayPage;
	INT  nDisplayPages;
	CString  szDisplayPageTitle;

	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_TITLE)->GetWindowText(szDisplayPageTitle);
	for (nDisplayPage = 0, nDisplayPages = (INT)m_szTabs[0].GetSize(); nDisplayPage < nDisplayPages; nDisplayPage++)
	{
		if (szDisplayPageTitle == m_szTabs[0].GetAt(nDisplayPage)) break;
		continue;
	}
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_INSERTBEFORE)->EnableWindow((!szDisplayPageTitle.IsEmpty() && nDisplayPage == nDisplayPages) ? CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_INSERTAFTER)->EnableWindow((!szDisplayPageTitle.IsEmpty() && nDisplayPage == nDisplayPages) ? CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_MODIFY)->EnableWindow((!szDisplayPageTitle.IsEmpty() && nDisplayPage == nDisplayPages) ? CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_DELETE)->EnableWindow((!szDisplayPageTitle.IsEmpty() && nDisplayPage < nDisplayPages  &&  nDisplayPages > 1) ? CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE) : FALSE);
	if (!szDisplayPageTitle.IsEmpty() && nDisplayPage < nDisplayPages)
	{
		SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_TABS, TCM_SETCURSEL, nDisplayPage);
		ShowDisplayPageInfo();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnAllUsers()
{
	CheckRadioButton(IDC_SETTINGS_DISPLAYAREAPAGE_ALLUSERS, IDC_SETTINGS_DISPLAYAREAPAGE_LIMITEDUSERS, IDC_SETTINGS_DISPLAYAREAPAGE_ALLUSERS);
	SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_RESETCONTENT);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_ADDUSER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_REMOVEUSER)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnLimitedUsers()
{
	CheckRadioButton(IDC_SETTINGS_DISPLAYAREAPAGE_ALLUSERS, IDC_SETTINGS_DISPLAYAREAPAGE_LIMITEDUSERS, IDC_SETTINGS_DISPLAYAREAPAGE_LIMITEDUSERS);
	SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_RESETCONTENT);
	SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)GetAccountUserName());
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_ADDUSER)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE));
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_REMOVEUSER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_ADDUSER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnSelchangeUsers()
{
	INT  nIndex;

	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_REMOVEUSER)->EnableWindow(((nIndex = (INT)SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_GETCURSEL)) >= 0 && Listbox_GetText(GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS), nIndex) != GetAccountUserName()) ? CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE) : FALSE);
}

void CSettingsDisplayAreaPage::OnAddUser()
{
	INT  nDisplayPageUser;
	INT  nDisplayPageUsers;
	CStringArray  szDisplayPageUsers;
	CAccountDirectoryDialog  cAccountDirectoryDialog(this);

	for (nDisplayPageUser = 0, nDisplayPageUsers = (cAccountDirectoryDialog.DoModal(szDisplayPageUsers) == IDOK) ? (INT)szDisplayPageUsers.GetSize() : 0; nDisplayPageUser < nDisplayPageUsers; nDisplayPageUser++)
	{
		if (SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_FINDSTRINGEXACT, 0, (LPARAM)(LPCTSTR)szDisplayPageUsers.GetAt(nDisplayPageUser)) == LB_ERR)
		{
			SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szDisplayPageUsers.GetAt(nDisplayPageUser));
			continue;
		}
	}
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_REMOVEUSER)->EnableWindow(((nDisplayPageUser = (INT)SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_GETCURSEL)) >= 0 && Listbox_GetText(GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS), nDisplayPageUser) != GetAccountUserName()) ? CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_ADDUSER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnRemoveUser()
{
	INT  nIndex;

	SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_GETCURSEL));
	SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_SETCURSEL);
	if (!SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_GETCOUNT))
	{
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_REMOVEUSER)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_ADDUSER)->SetFocus();
	}
	else
	{
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_REMOVEUSER)->EnableWindow(((nIndex = (INT)SendDlgItemMessage(IDC_SETTINGS_DISPLAYAREAPAGE_USERS, LB_GETCURSEL)) >= 0 && Listbox_GetText(GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS), nIndex) != GetAccountUserName()) ? CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE) : FALSE);
		GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_USERS)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnPasswordNone()
{
	CheckRadioButton(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_NONE, IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL, IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_NONE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONTENTS)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONTENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnPasswordUser()
{
	CheckRadioButton(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_NONE, IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL, IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_USER);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONTENTS)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONTENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnPasswordSpecial()
{
	CheckRadioButton(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_NONE, IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL, IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_SPECIAL);
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONTENTS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONFIRMATION)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_DISPLAYAREAPAGE_PASSWORD_CONTENTS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnEditchangePasswordContents()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsDisplayAreaPage::OnEditchangePasswordConfirmation()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CSettingsEventLogsPage property page

IMPLEMENT_DYNCREATE(CSettingsEventLogsPage, CLocalePropertyPage)

CSettingsEventLogsPage::CSettingsEventLogsPage() : CLocalePropertyPage(CSettingsEventLogsPage::IDD)
{
	//{{AFX_DATA_INIT(CSettingsEventLogsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CSettingsEventLogsPage::EnumComputers()
{
	INT  nComputer;
	INT  nComputers;
	CString  szComputer;
	CStringArray  szComputers;
	CComputerToken  cComputerToken;

	for (szComputer = cComputerToken.GetComputerName(), szComputers.Add(szComputer); CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTEBROWSE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE); )
	{
		GetNetworkBrowseService()->EnumNetworkComputers(szComputers);
		break;
	}
	for (nComputer = 0, nComputers = (INT)szComputers.GetSize(), SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_RESETCONTENT); nComputer < nComputers; nComputer++)
	{
		if (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGNAME_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE))
		{
			SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
			continue;
		}
	}
	SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer), 0));
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_DETAILS)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CSettingsEventLogsPage::EnumSpacecrafts()
{
	INT  nAccount;
	INT  nAccounts;
	CString  szComputerName;
	CString  szSpacecraftName;
	CUserAccounts  cUserAccounts;
	CAccountTokens  pAccountTokens;

	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME)->GetWindowText(szComputerName);
	for (nAccount = 0, nAccounts = (cUserAccounts.SetComputerName(szComputerName)) ? cUserAccounts.EnumAccounts(pAccountTokens) : 0, SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME, CB_RESETCONTENT); SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_GETCOUNT) > 0 && nAccount < nAccounts; nAccount++)
	{
		if (!pAccountTokens.GetAt(nAccount)->GetComputerName().CompareNoCase(szComputerName) && (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTEBROWSE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || ((CheckAccountPrivilege(PRIVILEGE_EVENTLOGNAME_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE)) && !pAccountTokens.GetAt(nAccount)->GetSpacecraftName().CompareNoCase(GetAccountSpacecraftName()))))
		{
			if (SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szSpacecraftName = pAccountTokens.GetAt(nAccount)->GetSpacecraftName())) == CB_ERR)
			{
				SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szSpacecraftName);
				continue;
			}
		}
	}
	if (!nAccounts)
	{
		SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME)->SetFocus();
	}
	SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)GetAccountSpacecraftName()), 0));
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CSettingsEventLogsPage::EnumUsers()
{
	INT  nAccount;
	INT  nAccounts;
	CString  szUserName;
	CString  szComputerName;
	CString  szSpacecraftName;
	CUserAccounts  cUserAccounts;
	CAccountTokens  pAccountTokens;

	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME)->GetWindowText(szComputerName);
	for (nAccount = 0, nAccounts = (cUserAccounts.SetComputerName(szComputerName)) ? cUserAccounts.EnumAccounts(pAccountTokens) : 0, GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME)->GetWindowText(szSpacecraftName), SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME, CB_RESETCONTENT); SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME, CB_GETCOUNT) > 0 && nAccount < nAccounts; nAccount++)
	{
		if (!pAccountTokens.GetAt(nAccount)->GetComputerName().CompareNoCase(szComputerName) && !pAccountTokens.GetAt(nAccount)->GetSpacecraftName().CompareNoCase(szSpacecraftName) && (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTEBROWSE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || ((CheckAccountPrivilege(PRIVILEGE_EVENTLOGNAME_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE)) && !pAccountTokens.GetAt(nAccount)->GetUserName().CompareNoCase(GetAccountUserName()))))
		{
			if (SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szUserName = pAccountTokens.GetAt(nAccount)->GetUserName())) == CB_ERR)
			{
				SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szUserName);
				continue;
			}
		}
	}
	SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)GetAccountUserName()), 0));
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CSettingsEventLogsPage::EnumCategories()
{
	INT  nCategory;
	INT  nCategories;

	for (nCategory = 0, nCategories = MAXEVENTCATEGORY - MINEVENTCATEGORY, SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_CATEGORY, CB_RESETCONTENT); SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME, CB_GETCOUNT) > 0 && nCategory <= nCategories; nCategory++)
	{
		if (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTEBROWSE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || ((CheckAccountPrivilege(PRIVILEGE_EVENTLOGNAME_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE)) && STRING(MINEVENTCATEGORY + nCategory) == STRING(IDS_EVENTCATEGORY_USER)))
		{
			SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_CATEGORY, CB_INSERTSTRING, (MINEVENTCATEGORY + nCategory == IDS_EVENTCATEGORY_SYSTEM) ? 0 : -1, (LPARAM)STRING(MINEVENTCATEGORY + nCategory));
			continue;
		}
	}
	SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_CATEGORY, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_CATEGORY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_EVENTCATEGORY_USER)));
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_CATEGORYDETAILS)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_CATEGORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_CATEGORY_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_CATEGORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_CATEGORY)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_CATEGORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_CATEGORY, CB_GETCOUNT) > 0) ? LoadEventLogInfo() : FALSE);
}

BOOL CSettingsEventLogsPage::SaveEventLogInfo()
{
	INT  nSet;
	INT  nSets;
	INT  nIndex;
	INT  nCategory;
	INT  nCategories;
	CString  szUserName;
	CString  szComputerName;
	CString  szSpacecraftName;

	for (LoadEventLogCategoryInfo(); (nIndex = FindEventLogInfo()) > 0; )
	{
		for (nCategory = min(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER), nCategories = max(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER); nCategory <= nCategories; nCategory++)
		{
			m_szFileName[0][nCategory].SetAt(nIndex, m_szFileName[0][nCategory].GetAt(0));
			m_nPolicy[0][nCategory].SetAt(nIndex, m_nPolicy[0][nCategory].GetAt(0));
			m_fRetention[0][nCategory].SetAt(nIndex, m_fRetention[0][nCategory].GetAt(0));
			m_tRetention[0][nCategory].SetAt(nIndex, m_tRetention[0][nCategory].GetAt(0));
			m_bCompression[0][nCategory].SetAt(nIndex, m_bCompression[0][nCategory].GetAt(0));
			m_bReset[0][nCategory].SetAt(nIndex, m_bReset[0][nCategory].GetAt(0));
		}
		SaveCommonEventLogCategoryInfo();
		return TRUE;
	}
	if (CheckEventLogInfo())
	{
		for (nSet = 0, nSets = sizeof(m_szFileName) / sizeof(m_szFileName[0]), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME)->GetWindowText(szComputerName), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME)->GetWindowText(szSpacecraftName), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME)->GetWindowText(szUserName); nSet < nSets; nSet++)
		{
			for (nCategory = min(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER), nCategories = max(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER), m_szComputerName[nSet].Add(szComputerName), m_szSpacecraftName[nSet].Add(szSpacecraftName), m_szUserName[nSet].Add(szUserName); nCategory <= nCategories; nCategory++)
			{
				m_szFileName[nSet][nCategory].Add(CString(m_szFileName[nSet][nCategory].GetAt(0)));
				m_nPolicy[nSet][nCategory].Add(m_nPolicy[nSet][nCategory].GetAt(0));
				m_fRetention[nSet][nCategory].Add(m_fRetention[nSet][nCategory].GetAt(0));
				m_tRetention[nSet][nCategory].Add(m_tRetention[nSet][nCategory].GetAt(0));
				m_bCompression[nSet][nCategory].Add(m_bCompression[nSet][nCategory].GetAt(0));
				m_bReset[nSet][nCategory].Add(m_bReset[nSet][nCategory].GetAt(0));
			}
		}
		SaveCommonEventLogCategoryInfo();
		return TRUE;
	}
	return FALSE;
}

BOOL CSettingsEventLogsPage::LoadEventLogInfo()
{
	INT  nSet;
	INT  nSets;
	INT  nIndex;
	INT  nCategory;
	INT  nCategories;
	UINT  nCategoryID;
	CEventLog  cEventLog;
	CString  szUserName;
	CString  szComputerName;
	CString  szSpacecraftName;
	CString  szFileName[EVENTLOGS_CATEGORIES];
	DWORDLONG  fRetention[EVENTLOGS_CATEGORIES];
	CTimeSpan  tRetention[EVENTLOGS_CATEGORIES];
	UINT  nPolicy[EVENTLOGS_CATEGORIES];

	if ((nIndex = FindEventLogInfo()) > 0)
	{
		for (nSet = 0, nSets = sizeof(m_szFileName) / sizeof(m_szFileName[0]); nSet < nSets; nSet++)
		{
			for (nCategory = min(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER), nCategories = max(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER), m_szComputerName[nSet].SetAt(0, m_szComputerName[nSet].GetAt(nIndex)), m_szSpacecraftName[nSet].SetAt(0, m_szSpacecraftName[nSet].GetAt(nIndex)), m_szUserName[nSet].SetAt(0, m_szUserName[nSet].GetAt(nIndex)); nCategory <= nCategories; nCategory++)
			{
				m_szFileName[nSet][nCategory].SetAt(0, m_szFileName[nSet][nCategory].GetAt(nIndex));
				m_nPolicy[nSet][nCategory].SetAt(0, m_nPolicy[nSet][nCategory].GetAt(nIndex));
				m_fRetention[nSet][nCategory].SetAt(0, m_fRetention[nSet][nCategory].GetAt(nIndex));
				m_tRetention[nSet][nCategory].SetAt(0, m_tRetention[nSet][nCategory].GetAt(nIndex));
				m_bCompression[nSet][nCategory].SetAt(0, m_bCompression[nSet][nCategory].GetAt(nIndex));
				m_bReset[nSet][nCategory].SetAt(0, m_bReset[nSet][nCategory].GetAt(nIndex));
			}
		}
		ShowEventLogCategoryInfo();
		return TRUE;
	}
	for (nSet = 0, nSets = sizeof(m_szFileName) / sizeof(m_szFileName[0]), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME)->GetWindowText(szComputerName), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME)->GetWindowText(szSpacecraftName), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME)->GetWindowText(szUserName); ((!nSet && ((!m_szComputerName[0].GetSize() && !m_szSpacecraftName[0].GetSize() && !m_szUserName[0].GetSize()) || (m_szComputerName[0].GetSize() > 0 && m_szSpacecraftName[0].GetSize() > 0 && m_szUserName[0].GetSize() > 0 && (m_szComputerName[0].GetAt(0) != szComputerName || m_szSpacecraftName[0].GetAt(0) != szSpacecraftName || m_szUserName[0].GetAt(0) != szUserName))) && SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME, CB_GETCOUNT) > 0) || nSet > 0) && nSet < nSets; nSet++)
	{
		for (nCategory = min(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER), nCategories = max(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER); !nSet && ((nCategory == EVENTLOGS_CATEGORY_SYSTEM && cEventLog.SetOwner(szComputerName, szSpacecraftName, szUserName) && cEventLog.QuerySystemLogFileName(szFileName[EVENTLOGS_CATEGORY_SYSTEM]) && cEventLog.QueryGlobalSpacecraftLogFileName(szFileName[EVENTLOGS_CATEGORY_GLOBALSPACECRAFT]) && cEventLog.QuerySpacecraftLogFileName(szFileName[EVENTLOGS_CATEGORY_SPACECRAFT]) && cEventLog.QueryUserLogFileName(szFileName[EVENTLOGS_CATEGORY_USER])) || (nCategory != EVENTLOGS_CATEGORY_SYSTEM && nCategory <= nCategories)); nCategory++)
		{
			if (cEventLog.Open(szComputerName, szSpacecraftName, szUserName, (nCategoryID = (nCategory == EVENTLOGS_CATEGORY_SYSTEM) ? EVENTLOG_CATEGORY_SYSTEM : ((nCategory == EVENTLOGS_CATEGORY_GLOBALSPACECRAFT || nCategory == EVENTLOGS_CATEGORY_SPACECRAFT) ? EVENTLOG_CATEGORY_SPACECRAFT : EVENTLOG_CATEGORY_USER)), CFile::modeRead, (nCategory != EVENTLOGS_CATEGORY_GLOBALSPACECRAFT) ? TRUE : FALSE))
			{
				if ((nCategory == EVENTLOGS_CATEGORY_SYSTEM  &&  cEventLog.GetSystemLogPolicy(nPolicy[nCategory]) && ((!(nPolicy[nCategory] & LOGFILE_POLICY_RETENTIONBYSIZE) || cEventLog.GetSystemLogRetentionBySize(fRetention[nCategory])) && (!(nPolicy[nCategory] & LOGFILE_POLICY_RETENTIONBYTIME) || cEventLog.GetSystemLogRetentionByTime(tRetention[nCategory])))) || ((nCategory == EVENTLOGS_CATEGORY_GLOBALSPACECRAFT || nCategory == EVENTLOGS_CATEGORY_SPACECRAFT) && cEventLog.GetSpacecraftLogPolicy(nPolicy[nCategory]) && ((!(nPolicy[nCategory] & LOGFILE_POLICY_RETENTIONBYSIZE) || cEventLog.GetSpacecraftLogRetentionBySize(fRetention[nCategory])) && (!(nPolicy[nCategory] & LOGFILE_POLICY_RETENTIONBYTIME) || cEventLog.GetSpacecraftLogRetentionByTime(tRetention[nCategory])))) || (nCategory == EVENTLOGS_CATEGORY_USER  &&  cEventLog.GetUserLogPolicy(nPolicy[nCategory]) && ((!(nPolicy[nCategory] & LOGFILE_POLICY_RETENTIONBYSIZE) || cEventLog.GetUserLogRetentionBySize(fRetention[nCategory])) && (!(nPolicy[nCategory] & LOGFILE_POLICY_RETENTIONBYTIME) || cEventLog.GetUserLogRetentionByTime(tRetention[nCategory])))))
				{
					m_szFileName[nSet][nCategory].SetAtGrow(0, szFileName[nCategory]);
					m_nPolicy[nSet][nCategory].SetAtGrow(0, nPolicy[nCategory]);
					m_fRetention[nSet][nCategory].SetAtGrow(0, (nPolicy[nCategory] & LOGFILE_POLICY_RETENTIONBYSIZE) ? (UINT)(fRetention[nCategory] / 1024) : 0);
					m_tRetention[nSet][nCategory].SetAtGrow(0, (nPolicy[nCategory] & LOGFILE_POLICY_RETENTIONBYTIME) ? (UINT)(tRetention[nCategory].GetDays()) : 0);
					m_bCompression[nSet][nCategory].SetAtGrow(0, (CFileEx::GetAttributes(szFileName[nCategory]) & FILE_ATTRIBUTE_COMPRESSED) ? TRUE : FALSE);
					m_bReset[nSet][nCategory].SetAtGrow(0, FALSE);
					cEventLog.Close(nCategoryID);
					continue;
				}
				cEventLog.Close(nCategoryID);
			}
			m_szFileName[nSet][nCategory].SetAtGrow(0, szFileName[nCategory]);
			m_nPolicy[nSet][nCategory].SetAtGrow(0, LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_RETENTIONBYSIZE);
			m_fRetention[nSet][nCategory].SetAtGrow(0, LOGFILE_DEFAULT_SIZE / 1024);
			m_tRetention[nSet][nCategory].SetAtGrow(0, 0);
			m_bCompression[nSet][nCategory].SetAtGrow(0, FALSE);
			m_bReset[nSet][nCategory].SetAtGrow(0, FALSE);
		}
		m_szComputerName[nSet].SetAtGrow(0, szComputerName);
		m_szSpacecraftName[nSet].SetAtGrow(0, szSpacecraftName);
		m_szUserName[nSet].SetAtGrow(0, szUserName);
	}
	if (nSet != 0)
	{
		for (nCategory = min(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER), nCategories = max(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER), LoadCommonEventLogCategoryInfo(); nCategory <= nCategories; nCategory++)
		{
			m_szFileName[1][nCategory].SetAtGrow(0, m_szFileName[0][nCategory].GetAt(0));
			m_nPolicy[1][nCategory].SetAtGrow(0, m_nPolicy[0][nCategory].GetAt(0));
			m_fRetention[1][nCategory].SetAtGrow(0, m_fRetention[0][nCategory].GetAt(0));
			m_tRetention[1][nCategory].SetAtGrow(0, m_tRetention[0][nCategory].GetAt(0));
			m_bCompression[1][nCategory].SetAtGrow(0, m_bCompression[0][nCategory].GetAt(0));
			m_bReset[1][nCategory].SetAtGrow(0, m_bReset[0][nCategory].GetAt(0));
		}
	}
	ShowEventLogCategoryInfo();
	return((nSet != 0) ? TRUE : FALSE);
}

BOOL CSettingsEventLogsPage::DefaultEventLogInfo()
{
	INT  nCategory;
	INT  nCategories;
	CString  szFileName;
	CString  szUserName;
	CString  szComputerName;
	CString  szSpacecraftName;
	CEventLog  cEventLog;

	for (nCategory = min(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER), nCategories = max(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME)->GetWindowText(szComputerName), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME)->GetWindowText(szSpacecraftName), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME)->GetWindowText(szUserName); (nCategory == EVENTLOGS_CATEGORY_SYSTEM && cEventLog.SetOwner(szComputerName, szSpacecraftName, szUserName)) || (nCategory != EVENTLOGS_CATEGORY_SYSTEM && nCategory <= nCategories); nCategory++)
	{
		if (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || (nCategory == EVENTLOGS_CATEGORY_USER && (CheckAccountPrivilege(PRIVILEGE_EVENTLOGNAME_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE))))
		{
			if (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGNAME_CHANGE)) m_szFileName[0][nCategory].SetAtGrow(0, ((nCategory == EVENTLOGS_CATEGORY_SYSTEM  &&  cEventLog.QuerySystemLogFileName(szFileName)) || (nCategory == EVENTLOGS_CATEGORY_GLOBALSPACECRAFT  &&  cEventLog.QueryGlobalSpacecraftLogFileName(szFileName)) || (nCategory == EVENTLOGS_CATEGORY_SPACECRAFT  &&  cEventLog.QuerySpacecraftLogFileName(szFileName)) || (nCategory == EVENTLOGS_CATEGORY_USER  &&  cEventLog.QueryUserLogFileName(szFileName))) ? (LPCTSTR)szFileName : EMPTYSTRING);
			if (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE)) m_nPolicy[0][nCategory].SetAtGrow(0, LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_RETENTIONBYSIZE);
			if (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE))
			{
				m_tRetention[0][nCategory].SetAtGrow(0, 0);
				m_bReset[0][nCategory].SetAtGrow(0, TRUE);
			}
			if (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE))
			{
				m_fRetention[0][nCategory].SetAtGrow(0, LOGFILE_DEFAULT_SIZE / 1024);
				m_bCompression[0][nCategory].SetAtGrow(0, FALSE);
				m_bReset[0][nCategory].SetAtGrow(0, TRUE);
			}
		}
	}
	if (nCategory > nCategories)
	{
		m_szComputerName[0].SetAtGrow(0, szComputerName);
		m_szSpacecraftName[0].SetAtGrow(0, szSpacecraftName);
		m_szUserName[0].SetAtGrow(0, szUserName);
		SaveCommonEventLogCategoryInfo();
		ShowEventLogCategoryInfo();
		return TRUE;
	}
	return FALSE;
}

BOOL CSettingsEventLogsPage::CheckEventLogInfo() CONST
{
	INT  nCategory;
	INT  nCategories;

	for (nCategory = min(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER), nCategories = max(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER); nCategory <= nCategories; nCategory++)
	{
		if (m_szFileName[0][nCategory].GetAt(0) != m_szFileName[1][nCategory].GetAt(0) || m_nPolicy[0][nCategory].GetAt(0) != m_nPolicy[1][nCategory].GetAt(0) || m_fRetention[0][nCategory].GetAt(0) != m_fRetention[1][nCategory].GetAt(0) || m_tRetention[0][nCategory].GetAt(0) != m_tRetention[1][nCategory].GetAt(0) || m_bCompression[0][nCategory].GetAt(0) != m_bCompression[1][nCategory].GetAt(0) || m_bReset[0][nCategory].GetAt(0) != m_bReset[1][nCategory].GetAt(0)) break;
		continue;
	}
	return((nCategory <= nCategories) ? TRUE : FALSE);
}

INT CSettingsEventLogsPage::FindEventLogInfo() CONST
{
	INT  nEventLog;
	INT  nEventLogs;
	CString  szUserName;
	CString  szComputerName;
	CString  szSpacecraftName;

	for (nEventLog = 0, nEventLogs = (m_szComputerName[0].GetSize() == m_szSpacecraftName[0].GetSize() && m_szComputerName[0].GetSize() == m_szUserName[0].GetSize()) ? (INT)(m_szComputerName[0].GetSize() - 1) : 0, GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME)->GetWindowText(szComputerName), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME)->GetWindowText(szSpacecraftName), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME)->GetWindowText(szUserName); nEventLog < nEventLogs; nEventLog++)
	{
		if (m_szComputerName[0].GetAt(nEventLog + 1) == szComputerName  &&  m_szSpacecraftName[0].GetAt(nEventLog + 1) == szSpacecraftName  &&  m_szUserName[0].GetAt(nEventLog + 1) == szUserName) break;
		continue;
	}
	return((nEventLog < nEventLogs) ? (nEventLog + 1) : 0);
}

VOID CSettingsEventLogsPage::ShowEventLogCategoryInfo()
{
	INT  nCategory;

	if ((nCategory = (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTEBROWSE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGNAME_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE)) ? QueryEventLogCategory() : -1) >= EVENTLOGS_CATEGORY_SYSTEM  &&  nCategory <= EVENTLOGS_CATEGORY_USER)
	{
		CheckRadioButton(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OVERWRITE, IDC_SETTINGS_EVENTLOGSPAGE_POLICY_NOOVERWRITE, (m_nPolicy[0][nCategory].GetAt(0) & LOGFILE_POLICY_CYCLICMODE) ? ((m_nPolicy[0][nCategory].GetAt(0) & LOGFILE_POLICY_RETENTIONBYTIME) ? IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OLDOVERWRITE : IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OVERWRITE) : IDC_SETTINGS_EVENTLOGSPAGE_POLICY_NOOVERWRITE);
		CheckRadioButton(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_UNLIMITED, IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED, (m_nPolicy[0][nCategory].GetAt(0) & LOGFILE_POLICY_RETENTIONBYSIZE) ? IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED : IDC_SETTINGS_EVENTLOGSPAGE_SIZE_UNLIMITED);
		CheckDlgButton(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_COMPRESSION, m_bCompression[0][nCategory].GetAt(0));
		CheckDlgButton(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_RESET, m_bReset[0][nCategory].GetAt(0));
		SetDlgItemText(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME, m_szFileName[0][nCategory].GetAt(0));
		SetDlgItemText(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE, GetFreeEventLogDiskSpace(m_szFileName[0][nCategory].GetAt(0)));
		Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS), EVENTLOGS_MINIMUMDAYS, EVENTLOGS_MAXIMUMDAYS);
		Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM), EVENTLOGS_MINIMUMSIZE, EVENTLOGS_MAXIMUMSIZE);
		Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS), m_tRetention[0][nCategory].GetAt(0));
		Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM), m_fRetention[0][nCategory].GetAt(0));
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_DEFAULTS)->EnableWindow(CheckPrivileges(0));
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_BROWSE)->EnableWindow(CheckPrivileges(PRIVILEGE_EVENTLOGNAME_CHANGE));
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE_STATIC)->ShowWindow((GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->ShowWindow((GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE_KB)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE_KB)->ShowWindow((GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OVERWRITE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OLDOVERWRITE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OLDOVERWRITE));
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OLDOVERWRITE));
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_NOOVERWRITE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_UNLIMITED)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED));
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED));
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_COMPRESSION)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_RESET)->EnableWindow();
	}
	else
	{
		CheckDlgButton(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OVERWRITE, FALSE);
		CheckDlgButton(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OLDOVERWRITE, FALSE);
		CheckDlgButton(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_NOOVERWRITE, FALSE);
		CheckDlgButton(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_UNLIMITED, FALSE);
		CheckDlgButton(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED, FALSE);
		CheckDlgButton(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_COMPRESSION, FALSE);
		CheckDlgButton(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_RESET, FALSE);
		SetDlgItemText(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME, EMPTYSTRING);
		SetDlgItemInt(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE, 0, FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_DEFAULTS)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_BROWSE)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE_STATIC)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE_KB)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE_KB)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OVERWRITE)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OLDOVERWRITE)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_NOOVERWRITE)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_UNLIMITED)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_COMPRESSION)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_RESET)->EnableWindow(FALSE);
	}
	AdjustToPrivileges();
}

VOID CSettingsEventLogsPage::LoadEventLogCategoryInfo()
{
	INT  nCategory;

	if ((nCategory = QueryEventLogCategory()) >= EVENTLOGS_CATEGORY_SYSTEM  &&  nCategory <= EVENTLOGS_CATEGORY_USER)
	{
		if (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGNAME_CHANGE)) GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME)->GetWindowText(m_szFileName[0][nCategory][0]);
		if (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE)) m_nPolicy[0][nCategory].SetAt(0, ((CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE)) ? ((!IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_NOOVERWRITE)) ? LOGFILE_POLICY_CYCLICMODE : LOGFILE_POLICY_NONCYCLICMODE) : (m_nPolicy[0][nCategory].GetAt(0) & (LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_NONCYCLICMODE))) | ((CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE)) ? ((IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OLDOVERWRITE)) ? LOGFILE_POLICY_RETENTIONBYTIME : 0) : (m_nPolicy[0][nCategory].GetAt(0) & LOGFILE_POLICY_RETENTIONBYTIME)) | ((CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE)) ? ((IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED)) ? LOGFILE_POLICY_RETENTIONBYSIZE : 0) : (m_nPolicy[0][nCategory].GetAt(0) & LOGFILE_POLICY_RETENTIONBYSIZE)));
		if (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE))
		{
			m_tRetention[0][nCategory].SetAt(0, (IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OLDOVERWRITE)) ? (UINT)Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS)) : 0);
			m_bReset[0][nCategory].SetAt(0, IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_RESET));
		}
		if (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE))
		{
			m_fRetention[0][nCategory].SetAt(0, (IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED)) ? (UINT)Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM)) : 0);
			m_bCompression[0][nCategory].SetAt(0, IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_COMPRESSION));
			m_bReset[0][nCategory].SetAt(0, IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_RESET));
		}
		if ((nCategory == EVENTLOGS_CATEGORY_GLOBALSPACECRAFT || nCategory == EVENTLOGS_CATEGORY_SPACECRAFT) && !m_szFileName[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(0).CompareNoCase(m_szFileName[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(0)))
		{
			m_nPolicy[0][(nCategory != EVENTLOGS_CATEGORY_GLOBALSPACECRAFT) ? EVENTLOGS_CATEGORY_GLOBALSPACECRAFT : EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(0, m_nPolicy[0][nCategory].GetAt(0));
			m_fRetention[0][(nCategory != EVENTLOGS_CATEGORY_GLOBALSPACECRAFT) ? EVENTLOGS_CATEGORY_GLOBALSPACECRAFT : EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(0, m_fRetention[0][nCategory].GetAt(0));
			m_tRetention[0][(nCategory != EVENTLOGS_CATEGORY_GLOBALSPACECRAFT) ? EVENTLOGS_CATEGORY_GLOBALSPACECRAFT : EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(0, m_tRetention[0][nCategory].GetAt(0));
			m_bCompression[0][(nCategory != EVENTLOGS_CATEGORY_GLOBALSPACECRAFT) ? EVENTLOGS_CATEGORY_GLOBALSPACECRAFT : EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(0, m_bCompression[0][nCategory].GetAt(0));
			m_bReset[0][(nCategory != EVENTLOGS_CATEGORY_GLOBALSPACECRAFT) ? EVENTLOGS_CATEGORY_GLOBALSPACECRAFT : EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(0, m_bReset[0][nCategory].GetAt(0));
		}
	}
}

VOID CSettingsEventLogsPage::SaveCommonEventLogCategoryInfo()
{
	INT  nEventLog;
	INT  nEventLogs;
	CString  szUserName;
	CString  szComputerName;
	CString  szSpacecraftName;

	for (nEventLog = 0, nEventLogs = ((CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE)) && m_szComputerName[0].GetSize() == m_szSpacecraftName[0].GetSize() && m_szComputerName[0].GetSize() == m_szUserName[0].GetSize()) ? (INT)(m_szComputerName[0].GetSize() - 1) : 0, GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME)->GetWindowText(szComputerName), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME)->GetWindowText(szSpacecraftName), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME)->GetWindowText(szUserName); nEventLog < nEventLogs; nEventLog++)
	{
		if (m_szComputerName[0].GetAt(nEventLog + 1) == szComputerName  &&  m_szUserName[0].GetAt(nEventLog + 1) != szUserName)
		{
			m_szFileName[0][EVENTLOGS_CATEGORY_SYSTEM].SetAt(nEventLog + 1, m_szFileName[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(0));
			m_nPolicy[0][EVENTLOGS_CATEGORY_SYSTEM].SetAt(nEventLog + 1, m_nPolicy[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(0));
			m_fRetention[0][EVENTLOGS_CATEGORY_SYSTEM].SetAt(nEventLog + 1, m_fRetention[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(0));
			m_tRetention[0][EVENTLOGS_CATEGORY_SYSTEM].SetAt(nEventLog + 1, m_tRetention[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(0));
			m_bCompression[0][EVENTLOGS_CATEGORY_SYSTEM].SetAt(nEventLog + 1, m_bCompression[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(0));
			m_bReset[0][EVENTLOGS_CATEGORY_SYSTEM].SetAt(nEventLog + 1, m_bReset[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(0));
		}
		if (m_szSpacecraftName[0].GetAt(nEventLog + 1) == szSpacecraftName  &&  m_szUserName[0].GetAt(nEventLog + 1) != szUserName)
		{
			m_szFileName[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].SetAt(nEventLog + 1, m_szFileName[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(0));
			m_nPolicy[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].SetAt(nEventLog + 1, m_nPolicy[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(0));
			m_fRetention[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].SetAt(nEventLog + 1, m_fRetention[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(0));
			m_tRetention[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].SetAt(nEventLog + 1, m_tRetention[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(0));
			m_bCompression[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].SetAt(nEventLog + 1, m_bCompression[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(0));
			m_bReset[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].SetAt(nEventLog + 1, m_bReset[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(0));
		}
		if (m_szComputerName[0].GetAt(nEventLog + 1) == szComputerName  &&  m_szSpacecraftName[0].GetAt(nEventLog + 1) == szSpacecraftName  &&  m_szUserName[0].GetAt(nEventLog + 1) != szUserName)
		{
			m_szFileName[0][EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(nEventLog + 1, m_szFileName[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(0));
			m_nPolicy[0][EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(nEventLog + 1, m_nPolicy[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(0));
			m_fRetention[0][EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(nEventLog + 1, m_fRetention[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(0));
			m_tRetention[0][EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(nEventLog + 1, m_tRetention[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(0));
			m_bCompression[0][EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(nEventLog + 1, m_bCompression[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(0));
			m_bReset[0][EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(nEventLog + 1, m_bReset[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(0));
		}
	}
}

VOID CSettingsEventLogsPage::LoadCommonEventLogCategoryInfo()
{
	INT  nEventLog;
	INT  nEventLogs;
	CString  szUserName;
	CString  szComputerName;
	CString  szSpacecraftName;

	for (nEventLog = 0, nEventLogs = ((CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE)) && m_szComputerName[0].GetSize() == m_szSpacecraftName[0].GetSize() && m_szComputerName[0].GetSize() == m_szUserName[0].GetSize()) ? (INT)(m_szComputerName[0].GetSize() - 1) : 0, GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME)->GetWindowText(szComputerName), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME)->GetWindowText(szSpacecraftName), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME)->GetWindowText(szUserName); nEventLog < nEventLogs; nEventLog++)
	{
		if (m_szComputerName[0].GetAt(nEventLog + 1) == szComputerName  &&  m_szUserName[0].GetAt(nEventLog + 1) != szUserName)
		{
			m_szFileName[0][EVENTLOGS_CATEGORY_SYSTEM].SetAt(0, m_szFileName[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1));
			m_nPolicy[0][EVENTLOGS_CATEGORY_SYSTEM].SetAt(0, m_nPolicy[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1));
			m_fRetention[0][EVENTLOGS_CATEGORY_SYSTEM].SetAt(0, m_fRetention[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1));
			m_tRetention[0][EVENTLOGS_CATEGORY_SYSTEM].SetAt(0, m_tRetention[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1));
			m_bCompression[0][EVENTLOGS_CATEGORY_SYSTEM].SetAt(0, m_bCompression[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1));
			m_bReset[0][EVENTLOGS_CATEGORY_SYSTEM].SetAt(0, m_bReset[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1));
		}
		if (m_szSpacecraftName[0].GetAt(nEventLog + 1) == szSpacecraftName  &&  m_szUserName[0].GetAt(nEventLog + 1) != szUserName)
		{
			m_szFileName[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].SetAt(0, m_szFileName[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(nEventLog + 1));
			m_nPolicy[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].SetAt(0, m_nPolicy[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(nEventLog + 1));
			m_fRetention[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].SetAt(0, m_fRetention[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(nEventLog + 1));
			m_tRetention[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].SetAt(0, m_tRetention[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(nEventLog + 1));
			m_bCompression[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].SetAt(0, m_bCompression[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(nEventLog + 1));
			m_bReset[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].SetAt(0, m_bReset[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(nEventLog + 1));
		}
		if (m_szComputerName[0].GetAt(nEventLog + 1) == szComputerName  &&  m_szSpacecraftName[0].GetAt(nEventLog + 1) == szSpacecraftName  &&  m_szUserName[0].GetAt(nEventLog + 1) != szUserName)
		{
			m_szFileName[0][EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(0, m_szFileName[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(nEventLog + 1));
			m_nPolicy[0][EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(0, m_nPolicy[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(nEventLog + 1));
			m_fRetention[0][EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(0, m_fRetention[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(nEventLog + 1));
			m_tRetention[0][EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(0, m_tRetention[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(nEventLog + 1));
			m_bCompression[0][EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(0, m_bCompression[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(nEventLog + 1));
			m_bReset[0][EVENTLOGS_CATEGORY_SPACECRAFT].SetAt(0, m_bReset[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(nEventLog + 1));
		}
	}
}

BOOL CSettingsEventLogsPage::CheckEventLogCategoryFileName() CONST
{
	INT  nCategory;
	CString  szFileName;

	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME)->GetWindowText(szFileName);
	return(((nCategory = QueryEventLogCategory()) >= EVENTLOGS_CATEGORY_SYSTEM  &&  nCategory <= EVENTLOGS_CATEGORY_USER && (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGNAME_CHANGE)) && m_szFileName[1][nCategory].GetSize() && m_szFileName[1][nCategory].GetAt(0).CompareNoCase(szFileName)) ? TRUE : FALSE);
}

BOOL CSettingsEventLogsPage::CheckEventLogCategoryPolicy() CONST
{
	INT  nCategory;
	UINT  nPolicy;

	if ((nCategory = QueryEventLogCategory()) >= EVENTLOGS_CATEGORY_SYSTEM  &&  nCategory <= EVENTLOGS_CATEGORY_USER)
	{
		nPolicy = ((CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE)) ? ((!IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_NOOVERWRITE)) ? LOGFILE_POLICY_CYCLICMODE : LOGFILE_POLICY_NONCYCLICMODE) : (m_nPolicy[0][nCategory].GetAt(0) & (LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_NONCYCLICMODE))) | ((CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE)) ? ((IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OLDOVERWRITE)) ? LOGFILE_POLICY_RETENTIONBYTIME : 0) : (m_nPolicy[0][nCategory].GetAt(0) & LOGFILE_POLICY_RETENTIONBYTIME)) | ((CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE)) ? ((IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED)) ? LOGFILE_POLICY_RETENTIONBYSIZE : 0) : (m_nPolicy[0][nCategory].GetAt(0) & LOGFILE_POLICY_RETENTIONBYSIZE));
		return(((CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE)) && m_nPolicy[1][nCategory].GetSize() && m_bReset[0][nCategory].GetSize() && (m_bReset[0][nCategory].GetAt(0) || m_nPolicy[1][nCategory].GetAt(0) != nPolicy || ((nPolicy & LOGFILE_POLICY_RETENTIONBYTIME) && m_tRetention[1][nCategory].GetSize() && m_tRetention[1][nCategory].GetAt(0) != (UINT)Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS))))) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CSettingsEventLogsPage::CheckEventLogCategorySize() CONST
{
	INT  nCategory;
	UINT  nPolicy;

	if ((nCategory = QueryEventLogCategory()) >= EVENTLOGS_CATEGORY_SYSTEM  &&  nCategory <= EVENTLOGS_CATEGORY_USER)
	{
		nPolicy = ((CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE)) ? ((!IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_NOOVERWRITE)) ? LOGFILE_POLICY_CYCLICMODE : LOGFILE_POLICY_NONCYCLICMODE) : (m_nPolicy[0][nCategory].GetAt(0) & (LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_NONCYCLICMODE))) | ((CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE)) ? ((IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OLDOVERWRITE)) ? LOGFILE_POLICY_RETENTIONBYTIME : 0) : (m_nPolicy[0][nCategory].GetAt(0) & LOGFILE_POLICY_RETENTIONBYTIME)) | ((CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE)) ? ((IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED)) ? LOGFILE_POLICY_RETENTIONBYSIZE : 0) : (m_nPolicy[0][nCategory].GetAt(0) & LOGFILE_POLICY_RETENTIONBYSIZE));
		return(((CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE)) && m_nPolicy[1][nCategory].GetSize() && m_bReset[0][nCategory].GetSize() && (m_bReset[0][nCategory].GetAt(0) || m_nPolicy[1][nCategory].GetAt(0) != nPolicy || ((nPolicy & LOGFILE_POLICY_RETENTIONBYSIZE) && m_fRetention[1][nCategory].GetSize() && m_fRetention[1][nCategory].GetAt(0) != (UINT)Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM))))) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CSettingsEventLogsPage::CheckEventLogCategoryCompression() CONST
{
	INT  nCategory;

	return(((nCategory = QueryEventLogCategory()) >= EVENTLOGS_CATEGORY_SYSTEM  &&  nCategory <= EVENTLOGS_CATEGORY_USER && (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE)) && m_bCompression[1][nCategory].GetSize() && m_bCompression[1][nCategory].GetAt(0) != IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_COMPRESSION)) ? TRUE : FALSE);
}

INT CSettingsEventLogsPage::QueryEventLogCategory() CONST
{
	CString  szCategory;

	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_CATEGORY)->GetWindowText(szCategory);
	return((szCategory != STRING(IDS_EVENTCATEGORY_SYSTEM)) ? ((szCategory != STRING(IDS_EVENTCATEGORY_GLOBALSPACECRAFT)) ? ((szCategory != STRING(IDS_EVENTCATEGORY_SPACECRAFT)) ? ((szCategory != STRING(IDS_EVENTCATEGORY_USER)) ? -1 : EVENTLOGS_CATEGORY_USER) : EVENTLOGS_CATEGORY_SPACECRAFT) : EVENTLOGS_CATEGORY_GLOBALSPACECRAFT) : EVENTLOGS_CATEGORY_SYSTEM);
}

CString CSettingsEventLogsPage::GetFreeEventLogDiskSpace(LPCTSTR pszFileName) CONST
{
	INT  nPos;
	INT  cbDelimiter;
	CString  szDigit;
	CString  szDelimiter;
	CString  szDiskSpace;
	CString  szDirectory;
	CLogicalDrives  cDrives;
	ULARGE_INTEGER  nDiskSpace[3];
	CStringTools  cStringTools;
	DWORDLONG  dwFreeDiskSpace;

	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->GetWindowText(szDiskSpace);
	if (GetDiskFreeSpaceEx((szDirectory = cDrives.ExtractDrive(pszFileName)), &nDiskSpace[0], &nDiskSpace[1], &nDiskSpace[2]))
	{
		if ((cbDelimiter = GetLocaleInfo(MAKELCID(GetLanguageID(), SORT_DEFAULT), LOCALE_STHOUSAND, (LPTSTR)NULL, 0)))
		{
			if (GetLocaleInfo(MAKELCID(GetLanguageID(), SORT_DEFAULT), LOCALE_STHOUSAND, szDelimiter.GetBufferSetLength(cbDelimiter - 1), cbDelimiter))
			{
				for (nPos = 0, dwFreeDiskSpace = ((DWORDLONG)nDiskSpace[0].HighPart << 32) + nDiskSpace[0].LowPart, dwFreeDiskSpace = dwFreeDiskSpace / 1024, szDigit = cStringTools.ConvertIntToString(0), szDiskSpace.Empty(), szDelimiter.ReleaseBuffer(); !nPos || dwFreeDiskSpace > 0; nPos++, dwFreeDiskSpace = dwFreeDiskSpace / 10)
				{
					szDiskSpace = (nPos > 0 && nPos % 3 == 0) ? (CString((TCHAR)(dwFreeDiskSpace % 10 + __toascii(szDigit[0]))) + szDelimiter + szDiskSpace) : (CString((TCHAR)(dwFreeDiskSpace % 10 + __toascii(szDigit[0]))) + szDiskSpace);
					continue;
				}
				return szDiskSpace;
			}
			szDelimiter.ReleaseBuffer();
		}
	}
	return((szDirectory.IsEmpty()) ? (LPCTSTR)szDiskSpace : EMPTYSTRING);
}

BOOL CSettingsEventLogsPage::CheckPrivileges(UINT nPrivilege) CONST
{
	CString  szUserName;
	CString  szComputerName;
	CString  szSpacecraftName;

	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME)->GetWindowText(szComputerName);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME)->GetWindowText(szSpacecraftName);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME)->GetWindowText(szUserName);
	return(((!GetAccountComputerName().CompareNoCase(szComputerName) && GetAccountSpacecraftName() == szSpacecraftName  &&  GetAccountUserName() == szUserName  &&  QueryEventLogCategory() == EVENTLOGS_CATEGORY_USER  &&  CheckAccountPrivilege(nPrivilege)) || (!GetAccountComputerName().CompareNoCase(szComputerName) && CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE)) || (GetAccountComputerName().CompareNoCase(szComputerName) && CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE))) ? TRUE : FALSE);
}

VOID CSettingsEventLogsPage::AdjustToPrivileges()
{
	AccessControl(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME, CheckPrivileges(PRIVILEGE_EVENTLOGNAME_CHANGE));
	AccessControl(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OVERWRITE, CheckPrivileges(PRIVILEGE_EVENTLOGPOLICY_CHANGE));
	AccessControl(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OLDOVERWRITE, CheckPrivileges(PRIVILEGE_EVENTLOGPOLICY_CHANGE));
	AccessControl(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_NOOVERWRITE, CheckPrivileges(PRIVILEGE_EVENTLOGPOLICY_CHANGE));
	AccessControl(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS, CheckPrivileges(PRIVILEGE_EVENTLOGPOLICY_CHANGE));
	AccessControl(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_UNLIMITED, CheckPrivileges(PRIVILEGE_EVENTLOGSIZE_CHANGE));
	AccessControl(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED, CheckPrivileges(PRIVILEGE_EVENTLOGSIZE_CHANGE));
	AccessControl(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM, CheckPrivileges(PRIVILEGE_EVENTLOGSIZE_CHANGE));
	AccessControl(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_COMPRESSION, CheckPrivileges(PRIVILEGE_EVENTLOGSIZE_CHANGE));
	AccessControl(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_RESET, CheckPrivileges(PRIVILEGE_EVENTLOGSIZE_CHANGE));
}

BOOL CSettingsEventLogsPage::IsModified(BOOL bAll) CONST
{
	INT  nCategory;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nCategory = (m_szComputerName[0].GetSize() == m_szSpacecraftName[0].GetSize() && m_szComputerName[0].GetSize() == m_szUserName[0].GetSize() && m_szComputerName[0].GetSize() == m_szComputerName[1].GetSize() && m_szSpacecraftName[0].GetSize() == m_szSpacecraftName[1].GetSize() && m_szUserName[0].GetSize() == m_szUserName[1].GetSize()) ? EVENTLOGS_CATEGORY_SYSTEM : (EVENTLOGS_CATEGORY_USER + 1); nCategory <= EVENTLOGS_CATEGORY_USER && m_szComputerName[0].GetSize() == 1; nCategory++)
		{
			if (nCategory != QueryEventLogCategory() && (m_szFileName[0][nCategory].GetAt(0).CompareNoCase(m_szFileName[1][nCategory].GetAt(0)) || m_nPolicy[0][nCategory].GetAt(0) != m_nPolicy[1][nCategory].GetAt(0) || m_fRetention[0][nCategory].GetAt(0) != m_fRetention[1][nCategory].GetAt(0) || m_tRetention[0][nCategory].GetAt(0) != m_tRetention[1][nCategory].GetAt(0) || m_bCompression[0][nCategory].GetAt(0) != m_bCompression[1][nCategory].GetAt(0) || m_bReset[0][nCategory].GetAt(0) != m_bReset[1][nCategory].GetAt(0))) break;
			if (nCategory == QueryEventLogCategory() && (CheckEventLogCategoryFileName() || CheckEventLogCategoryPolicy() || CheckEventLogCategorySize() || CheckEventLogCategoryCompression())) break;
		}
		return((nCategory <= EVENTLOGS_CATEGORY_USER) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::IsModified() : FALSE);
}

BOOL CSettingsEventLogsPage::Check(BOOL bAll) CONST
{
	INT  nCategory;
	INT  nEventLog;
	INT  nEventLogs;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nEventLog = 0, nEventLogs = (m_szComputerName[0].GetSize() == m_szSpacecraftName[0].GetSize() && m_szComputerName[0].GetSize() == m_szUserName[0].GetSize()) ? (INT)m_szComputerName[0].GetSize() : 0; nEventLog < nEventLogs; nEventLog++)
		{
			for (nCategory = EVENTLOGS_CATEGORY_SYSTEM; (nCategory == EVENTLOGS_CATEGORY_SYSTEM && m_szComputerName[0].GetSize() == m_szComputerName[1].GetSize() && m_szSpacecraftName[0].GetSize() == m_szSpacecraftName[1].GetSize() && m_szUserName[0].GetSize() == m_szUserName[1].GetSize()) || (nCategory != EVENTLOGS_CATEGORY_SYSTEM && nCategory <= EVENTLOGS_CATEGORY_USER); nCategory++)
			{
				if (m_szFileName[0][nCategory].GetSize() != m_szFileName[1][nCategory].GetSize() || m_nPolicy[0][nCategory].GetSize() != m_nPolicy[1][nCategory].GetSize() || m_fRetention[0][nCategory].GetSize() != m_fRetention[1][nCategory].GetSize() || m_tRetention[0][nCategory].GetSize() != m_tRetention[1][nCategory].GetSize() || m_bCompression[0][nCategory].GetSize() != m_bCompression[1][nCategory].GetSize() || m_bReset[0][nCategory].GetSize() != m_bReset[1][nCategory].GetSize()) break;
				continue;
			}
			if (nCategory <= EVENTLOGS_CATEGORY_USER) break;
		}
		return((nEventLog == nEventLogs) ? (((((!CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) && !CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) && !CheckAccountPrivilege(PRIVILEGE_EVENTLOGNAME_CHANGE)) || GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME)->GetWindowTextLength() > 0) && ((!CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) && !CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) && !CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE)) || (!IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OLDOVERWRITE) || Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS)) >= EVENTLOGS_MINIMUMDAYS)) && ((!CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) && !CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) && !CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE)) || (!IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED) || Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM)) >= EVENTLOGS_MINIMUMSIZE)))) ? TRUE : FALSE) : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

VOID CSettingsEventLogsPage::Update()
{
	INT  nCategory;
	INT  nEventLog;
	INT  nEventLogs;
	UINT  nEventLogPolicy;
	UINT  nEventLogCategory;
	CString  szEventLogFileName[EVENTLOGS_CATEGORIES];
	DWORDLONG  fEventLogRetention;
	CTimeSpan  tEventLogRetention;
	CEventLog  cEventLog;

	if (IsWindow(GetSafeHwnd()) && IsModified(FALSE))
	{
		for (nEventLog = 0, nEventLogs = (SaveEventLogInfo() && m_szComputerName[0].GetSize() == m_szSpacecraftName[0].GetSize() && m_szComputerName[0].GetSize() == m_szUserName[0].GetSize()) ? (INT)(m_szComputerName[0].GetSize() - 1) : 0; nEventLog < nEventLogs; nEventLog++)
		{
			for (nCategory = (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE)) ? EVENTLOGS_CATEGORY_SYSTEM : EVENTLOGS_CATEGORY_USER; ((((CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE)) && nCategory == EVENTLOGS_CATEGORY_SYSTEM) || ((!CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) && !CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE)) && nCategory == EVENTLOGS_CATEGORY_USER)) && cEventLog.SetOwner(m_szComputerName[0].GetAt(nEventLog + 1), m_szSpacecraftName[0].GetAt(nEventLog + 1), m_szUserName[0].GetAt(nEventLog + 1)) && cEventLog.QuerySystemLogFileName(szEventLogFileName[EVENTLOGS_CATEGORY_SYSTEM]) && cEventLog.QueryGlobalSpacecraftLogFileName(szEventLogFileName[EVENTLOGS_CATEGORY_GLOBALSPACECRAFT]) && cEventLog.QuerySpacecraftLogFileName(szEventLogFileName[EVENTLOGS_CATEGORY_SPACECRAFT]) && cEventLog.QueryUserLogFileName(szEventLogFileName[EVENTLOGS_CATEGORY_USER]) && cEventLog.RegisterSource(m_szFileName[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1), m_szFileName[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(nEventLog + 1), m_szFileName[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(nEventLog + 1), m_szFileName[0][EVENTLOGS_CATEGORY_USER].GetAt(nEventLog + 1))) || ((((CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE)) && nCategory != EVENTLOGS_CATEGORY_SYSTEM) || ((!CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) && !CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE)) && nCategory != EVENTLOGS_CATEGORY_USER)) && nCategory <= EVENTLOGS_CATEGORY_USER); nCategory++)
			{
				if (cEventLog.Open((nEventLogCategory = (nCategory == EVENTLOGS_CATEGORY_SYSTEM) ? EVENTLOG_CATEGORY_SYSTEM : ((nCategory == EVENTLOGS_CATEGORY_GLOBALSPACECRAFT || nCategory == EVENTLOGS_CATEGORY_SPACECRAFT) ? EVENTLOG_CATEGORY_SPACECRAFT : EVENTLOG_CATEGORY_USER)), CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite, (nCategory != EVENTLOGS_CATEGORY_GLOBALSPACECRAFT) ? TRUE : FALSE, TRUE))
				{
					if (((nCategory == EVENTLOGS_CATEGORY_SYSTEM  &&  cEventLog.GetSystemLogPolicy(nEventLogPolicy) &&
						(!(nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYSIZE) || cEventLog.GetSystemLogRetentionBySize(fEventLogRetention)) &&
						(!(nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYTIME) || cEventLog.GetSystemLogRetentionByTime(tEventLogRetention))) ||
						((nCategory == EVENTLOGS_CATEGORY_GLOBALSPACECRAFT || nCategory == EVENTLOGS_CATEGORY_SPACECRAFT) && cEventLog.GetSpacecraftLogPolicy(nEventLogPolicy) &&
							(!(nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYSIZE) || cEventLog.GetSpacecraftLogRetentionBySize(fEventLogRetention)) &&
							(!(nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYTIME) || cEventLog.GetSpacecraftLogRetentionByTime(tEventLogRetention))) ||
						(nCategory == EVENTLOGS_CATEGORY_USER  &&  cEventLog.GetUserLogPolicy(nEventLogPolicy) &&
							(!(nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYSIZE) || cEventLog.GetUserLogRetentionBySize(fEventLogRetention)) &&
							(!(nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYTIME) || cEventLog.GetUserLogRetentionByTime(tEventLogRetention)))) &&
						((nCategory == EVENTLOGS_CATEGORY_SYSTEM && ((m_nPolicy[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1) & (LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_NONCYCLICMODE)) == (nEventLogPolicy & (LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_NONCYCLICMODE)) || cEventLog.SetSystemLogMode(m_nPolicy[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1) & (LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_NONCYCLICMODE))) &&
							(((m_nPolicy[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYSIZE) == (nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYSIZE) && m_fRetention[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1) == (UINT)(fEventLogRetention / 1024)) || ((!(m_nPolicy[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYSIZE) && !(nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYSIZE)) || cEventLog.SetSystemLogRetentionBySize((m_nPolicy[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYSIZE) ? (m_fRetention[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1) * 1024) : 0))) &&
							(((m_nPolicy[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYTIME) == (nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYTIME) && m_tRetention[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1) == (UINT)(tEventLogRetention.GetTotalSeconds() / SECONDSPERDAY)) || ((!(m_nPolicy[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYTIME) && !(nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYTIME)) || cEventLog.SetSystemLogRetentionByTime((m_nPolicy[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYTIME) ? CTimeSpan(m_tRetention[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1)*SECONDSPERDAY) : CTimeSpan(0)))) &&
							(!m_bReset[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1) || cEventLog.Reset(EVENTLOG_CATEGORY_SYSTEM)) && cEventLog.Compress(EVENTLOG_CATEGORY_SYSTEM, m_bCompression[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1))) ||
							((nCategory == EVENTLOGS_CATEGORY_GLOBALSPACECRAFT || nCategory == EVENTLOGS_CATEGORY_SPACECRAFT) && ((m_nPolicy[0][nCategory].GetAt(nEventLog + 1) & (LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_NONCYCLICMODE)) == (nEventLogPolicy & (LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_NONCYCLICMODE)) || cEventLog.SetSpacecraftLogMode(m_nPolicy[0][nCategory].GetAt(nEventLog + 1) & (LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_NONCYCLICMODE))) &&
								(((m_nPolicy[0][nCategory].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYSIZE) == (nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYSIZE) && m_fRetention[0][nCategory].GetAt(nEventLog + 1) == (UINT)(fEventLogRetention / 1024)) || ((!(m_nPolicy[0][nCategory].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYSIZE) && !(nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYSIZE)) || cEventLog.SetSpacecraftLogRetentionBySize((m_nPolicy[0][nCategory].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYSIZE) ? (m_fRetention[0][nCategory].GetAt(nEventLog + 1) * 1024) : 0))) &&
								(((m_nPolicy[0][nCategory].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYTIME) == (nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYTIME) && m_tRetention[0][nCategory].GetAt(nEventLog + 1) == (UINT)(tEventLogRetention.GetTotalSeconds() / SECONDSPERDAY)) || ((!(m_nPolicy[0][nCategory].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYTIME) && !(nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYTIME)) || cEventLog.SetSpacecraftLogRetentionByTime((m_nPolicy[0][nCategory].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYTIME) ? CTimeSpan(m_tRetention[0][nCategory].GetAt(nEventLog + 1)*SECONDSPERDAY) : CTimeSpan(0)))) &&
								(!m_bReset[0][nCategory].GetAt(nEventLog + 1) || cEventLog.Reset(EVENTLOG_CATEGORY_SPACECRAFT)) && cEventLog.Compress(EVENTLOG_CATEGORY_SPACECRAFT, m_bCompression[0][nCategory].GetAt(nEventLog + 1))) ||
							(nCategory == EVENTLOGS_CATEGORY_USER && ((m_nPolicy[0][EVENTLOGS_CATEGORY_USER].GetAt(nEventLog + 1) & (LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_NONCYCLICMODE)) == (nEventLogPolicy & (LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_NONCYCLICMODE)) || cEventLog.SetUserLogMode(m_nPolicy[0][EVENTLOGS_CATEGORY_USER].GetAt(nEventLog + 1) & (LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_NONCYCLICMODE))) &&
								(((m_nPolicy[0][EVENTLOGS_CATEGORY_USER].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYSIZE) == (nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYSIZE) && m_fRetention[0][EVENTLOGS_CATEGORY_USER].GetAt(nEventLog + 1) == (UINT)(fEventLogRetention / 1024)) || ((!(m_nPolicy[0][EVENTLOGS_CATEGORY_USER].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYSIZE) && !(nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYSIZE)) || cEventLog.SetUserLogRetentionBySize((m_nPolicy[0][EVENTLOGS_CATEGORY_USER].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYSIZE) ? (m_fRetention[0][EVENTLOGS_CATEGORY_USER].GetAt(nEventLog + 1) * 1024) : 0))) &&
								(((m_nPolicy[0][EVENTLOGS_CATEGORY_USER].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYTIME) == (nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYTIME) && m_tRetention[0][EVENTLOGS_CATEGORY_USER].GetAt(nEventLog + 1) == (UINT)(tEventLogRetention.GetTotalSeconds() / SECONDSPERDAY)) || ((!(m_nPolicy[0][EVENTLOGS_CATEGORY_USER].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYTIME) && !(nEventLogPolicy & LOGFILE_POLICY_RETENTIONBYTIME)) || cEventLog.SetUserLogRetentionByTime((m_nPolicy[0][EVENTLOGS_CATEGORY_USER].GetAt(nEventLog + 1) & LOGFILE_POLICY_RETENTIONBYTIME) ? CTimeSpan(m_tRetention[0][EVENTLOGS_CATEGORY_USER].GetAt(nEventLog + 1)*SECONDSPERDAY) : CTimeSpan(0)))) &&
								(!m_bReset[0][EVENTLOGS_CATEGORY_USER].GetAt(nEventLog + 1) || cEventLog.Reset(EVENTLOG_CATEGORY_USER)) && cEventLog.Compress(EVENTLOG_CATEGORY_USER, m_bCompression[0][EVENTLOGS_CATEGORY_USER].GetAt(nEventLog + 1)))))
					{
						cEventLog.Close(nEventLogCategory);
						continue;
					}
					cEventLog.Close(nEventLogCategory);
				}
				break;
			}
			if (nCategory <= EVENTLOGS_CATEGORY_USER)
			{
				cEventLog.RegisterSource((nCategory > EVENTLOGS_CATEGORY_SYSTEM) ? m_szFileName[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(nEventLog + 1) : szEventLogFileName[EVENTLOGS_CATEGORY_SYSTEM], (nCategory > EVENTLOGS_CATEGORY_GLOBALSPACECRAFT) ? m_szFileName[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(nEventLog + 1) : szEventLogFileName[EVENTLOGS_CATEGORY_GLOBALSPACECRAFT], (nCategory > EVENTLOGS_CATEGORY_SPACECRAFT) ? m_szFileName[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(nEventLog + 1) : szEventLogFileName[EVENTLOGS_CATEGORY_SPACECRAFT], szEventLogFileName[EVENTLOGS_CATEGORY_USER]);
				ReportEvent(SYSTEM_WARNING_EVENTLOG_SETUP_FAILURE);
				break;
			}
		}
	}
}

CSettingsDialog *CSettingsEventLogsPage::GetParent() CONST
{
	return((CSettingsDialog *)CLocalePropertyPage::GetParent());
}

void CSettingsEventLogsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CSettingsEventLogsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CSettingsEventLogsPage::PostNcDestroy()
{
	INT  nSet;
	INT  nSets;
	INT  nCategory;
	INT  nCategories;

	for (nSet = 0, nSets = sizeof(m_szFileName) / sizeof(m_szFileName[0]); nSet < nSets; nSet++)
	{
		for (nCategory = min(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER), nCategories = max(EVENTLOGS_CATEGORY_SYSTEM, EVENTLOGS_CATEGORY_USER), m_szComputerName[nSet].RemoveAll(), m_szSpacecraftName[nSet].RemoveAll(), m_szUserName[nSet].RemoveAll(); nCategory <= nCategories; nCategory++)
		{
			m_szFileName[nSet][nCategory].RemoveAll();
			m_nPolicy[nSet][nCategory].RemoveAll();
			m_fRetention[nSet][nCategory].RemoveAll();
			m_tRetention[nSet][nCategory].RemoveAll();
			m_bCompression[nSet][nCategory].RemoveAll();
			m_bReset[nSet][nCategory].RemoveAll();
		}
	}
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CSettingsEventLogsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CSettingsEventLogsPage)
	ON_BN_CLICKED(IDC_SETTINGS_EVENTLOGSPAGE_CONNECT, OnConnectComputer)
	ON_BN_CLICKED(IDC_SETTINGS_EVENTLOGSPAGE_DEFAULTS, OnDefaults)
	ON_BN_CLICKED(IDC_SETTINGS_EVENTLOGSPAGE_BROWSE, OnBrowseFilename)
	ON_BN_CLICKED(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OVERWRITE, OnOverwriteEvents)
	ON_BN_CLICKED(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OLDOVERWRITE, OnOverwriteOldEvents)
	ON_BN_CLICKED(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_NOOVERWRITE, OnOverwriteNoEvents)
	ON_BN_CLICKED(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_UNLIMITED, OnUnlimitedSize)
	ON_BN_CLICKED(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED, OnLimitedSize)
	ON_BN_CLICKED(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_RESET, OnResetSize)
	ON_BN_CLICKED(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_COMPRESSION, OnCompression)
	ON_CBN_DROPDOWN(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, OnDropdownComputerName)
	ON_CBN_DROPDOWN(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME, OnDropdownSpacecraftName)
	ON_CBN_DROPDOWN(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME, OnDropdownUserName)
	ON_CBN_DROPDOWN(IDC_SETTINGS_EVENTLOGSPAGE_CATEGORY, OnDropdownCategory)
	ON_CBN_EDITCHANGE(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, OnEditchangeComputerName)
	ON_CBN_SELCHANGE(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, OnSelchangeComputerName)
	ON_CBN_SELCHANGE(IDC_SETTINGS_EVENTLOGSPAGE_SPACECRAFTNAME, OnSelchangeSpacecraftName)
	ON_CBN_SELCHANGE(IDC_SETTINGS_EVENTLOGSPAGE_USERNAME, OnSelchangeUserName)
	ON_CBN_SELCHANGE(IDC_SETTINGS_EVENTLOGSPAGE_CATEGORY, OnSelchangeCategory)
	ON_EN_CHANGE(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME, OnEditchangeFileName)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS, OnSpinchangeDays)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM, OnSpinchangeSize)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSettingsEventLogsPage message handlers

BOOL CSettingsEventLogsPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	EnumComputers();
	EnumSpacecrafts();
	EnumUsers();
	EnumCategories();
	return TRUE;
}

void CSettingsEventLogsPage::OnSelchangeComputerName()
{
	CString  szComputer;
	CComputerToken  cComputerToken;

	SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_GETCURSEL));
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME)->GetWindowText(szComputer);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_CONNECT)->EnableWindow((cComputerToken.SetComputerName(szComputer) && !szComputer.IsEmpty() && !cComputerToken.IsHost() && SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) < 0) ? (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTEBROWSE)) : FALSE);
	EnumSpacecrafts();
	EnumUsers();
	EnumCategories();
}

void CSettingsEventLogsPage::OnSelchangeSpacecraftName()
{
	EnumUsers();
	EnumCategories();
}

void CSettingsEventLogsPage::OnSelchangeUserName()
{
	EnumCategories();
}

void CSettingsEventLogsPage::OnDropdownComputerName()
{
	SaveEventLogInfo();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsEventLogsPage::OnDropdownSpacecraftName()
{
	SaveEventLogInfo();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsEventLogsPage::OnDropdownUserName()
{
	SaveEventLogInfo();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsEventLogsPage::OnEditchangeComputerName()
{
	CString  szComputer;
	CComputerToken  cComputerToken;

	for (GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME)->GetWindowText(szComputer), GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_CONNECT)->EnableWindow((cComputerToken.SetComputerName(szComputer) && !szComputer.IsEmpty() && !cComputerToken.IsHost() && SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) < 0) ? (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTEBROWSE)) : FALSE); SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_COMPUTERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) >= 0; )
	{
		EnumSpacecrafts();
		EnumUsers();
		EnumCategories();
		break;
	}
}

void CSettingsEventLogsPage::OnConnectComputer()
{
	CHourglassCursor  cCursor;

	EnumSpacecrafts();
	EnumUsers();
	EnumCategories();
}

void CSettingsEventLogsPage::OnDefaults()
{
	CHourglassCursor  cCursor;

	DefaultEventLogInfo();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsEventLogsPage::OnSelchangeCategory()
{
	ShowEventLogCategoryInfo();
}

void CSettingsEventLogsPage::OnDropdownCategory()
{
	LoadEventLogCategoryInfo();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsEventLogsPage::OnEditchangeFileName()
{
	CString  szFileName;

	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME)->GetWindowText(szFileName);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->SetWindowText(GetFreeEventLogDiskSpace(szFileName));
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE_STATIC)->ShowWindow((GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->ShowWindow((GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE_KB)->ShowWindow((GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsEventLogsPage::OnBrowseFilename()
{
	INT  nCategory;
	CString  szFileName[EVENTLOGS_CATEGORIES];
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_SETTINGS_EVENTLOGSPAGE_FILENAME, STRING(IDS_FILEBROWSEDIALOG_EVENTLOGFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_EVENTLOGFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		for (szFileName[0] = cFileBrowseDialog.GetPathName(); (nCategory = QueryEventLogCategory()) == EVENTLOGS_CATEGORY_SYSTEM; )
		{
			szFileName[1] = m_szFileName[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(0);
			szFileName[2] = m_szFileName[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(0);
			szFileName[3] = m_szFileName[0][EVENTLOGS_CATEGORY_USER].GetAt(0);
			break;
		}
		if (nCategory == EVENTLOGS_CATEGORY_GLOBALSPACECRAFT || nCategory == EVENTLOGS_CATEGORY_SPACECRAFT)
		{
			szFileName[1] = m_szFileName[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(0);
			szFileName[2] = m_szFileName[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(0);
			szFileName[3] = m_szFileName[0][EVENTLOGS_CATEGORY_USER].GetAt(0);
		}
		if (nCategory == EVENTLOGS_CATEGORY_USER)
		{
			szFileName[1] = m_szFileName[0][EVENTLOGS_CATEGORY_SYSTEM].GetAt(0);
			szFileName[2] = m_szFileName[0][EVENTLOGS_CATEGORY_GLOBALSPACECRAFT].GetAt(0);
			szFileName[3] = m_szFileName[0][EVENTLOGS_CATEGORY_SPACECRAFT].GetAt(0);
		}
		for (szFileName[0].MakeUpper(), szFileName[1].MakeUpper(), szFileName[2].MakeUpper(), szFileName[3].MakeUpper(); szFileName[0].IsEmpty() || szFileName[0].Right(cFileBrowseDialog.GetFileName().GetLength()) == szFileName[1].Right(cFileBrowseDialog.GetFileName().GetLength()) || szFileName[0].Right(cFileBrowseDialog.GetFileName().GetLength()) == szFileName[2].Right(cFileBrowseDialog.GetFileName().GetLength()) || szFileName[0].Right(cFileBrowseDialog.GetFileName().GetLength()) == szFileName[3].Right(cFileBrowseDialog.GetFileName().GetLength()); )
		{
			SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME, EM_SETSEL, 0, -1);
			GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME)->SetFocus();
			ReportEvent(USER_ERROR_INVALID_EVENTLOGFILENAME);
			return;
		}
		SetDlgItemText(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME, cFileBrowseDialog.GetPathName());
		SetDlgItemText(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE, GetFreeEventLogDiskSpace(cFileBrowseDialog.GetPathName()));
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE_STATIC)->ShowWindow((GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->ShowWindow((GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE_KB)->ShowWindow((GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	}
	SendDlgItemMessage(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsEventLogsPage::OnOverwriteEvents()
{
	CheckRadioButton(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OVERWRITE, IDC_SETTINGS_EVENTLOGSPAGE_POLICY_NOOVERWRITE, IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OVERWRITE);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsEventLogsPage::OnOverwriteOldEvents()
{
	CheckRadioButton(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OVERWRITE, IDC_SETTINGS_EVENTLOGSPAGE_POLICY_NOOVERWRITE, IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OLDOVERWRITE);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS), EVENTLOGS_DEFAULTDAYS);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsEventLogsPage::OnSpinchangeDays()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsEventLogsPage::OnOverwriteNoEvents()
{
	CheckRadioButton(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_OVERWRITE, IDC_SETTINGS_EVENTLOGSPAGE_POLICY_NOOVERWRITE, IDC_SETTINGS_EVENTLOGSPAGE_POLICY_NOOVERWRITE);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_POLICY_DAYS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsEventLogsPage::OnUnlimitedSize()
{
	CheckRadioButton(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_UNLIMITED, IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED, IDC_SETTINGS_EVENTLOGSPAGE_SIZE_UNLIMITED);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsEventLogsPage::OnLimitedSize()
{
	CheckRadioButton(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_UNLIMITED, IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED, IDC_SETTINGS_EVENTLOGSPAGE_SIZE_LIMITED);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM), EVENTLOGS_DEFAULTSIZE);
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_MAXIMUM)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsEventLogsPage::OnSpinchangeSize()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsEventLogsPage::OnResetSize()
{
	INT  nCategory;

	for (; (nCategory = QueryEventLogCategory()) >= EVENTLOGS_CATEGORY_SYSTEM && nCategory <= EVENTLOGS_CATEGORY_USER; )
	{
		m_bReset[0][nCategory].SetAt(0, IsDlgButtonChecked(IDC_SETTINGS_EVENTLOGSPAGE_SIZE_RESET));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsEventLogsPage::OnCompression()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CSettingsPrintingPage property page

IMPLEMENT_DYNCREATE(CSettingsPrintingPage, CLocalePropertyPage)

CSettingsPrintingPage::CSettingsPrintingPage() : CLocalePropertyPage(CSettingsPrintingPage::IDD)
{
	//{{AFX_DATA_INIT(CSettingsPrintingPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CSettingsPrintingPage::Initialize()
{
	return((GetPrintProfiles(m_pProfiles[0])) ? m_pProfiles[1].Copy(&m_pProfiles[0]) : FALSE);
}

VOID CSettingsPrintingPage::ShowProfileInfo()
{
	CString  szMargins[4];
	CPrintProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		GetPaperMargins(pProfileInfo, szMargins[0], szMargins[1], szMargins[2], szMargins[3]);
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PRINTER)->SetWindowText(pProfileInfo->GetPrinterName());
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERSIZE)->SetWindowText(GetPaperSize(pProfileInfo));
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERSOURCE)->SetWindowText(GetPaperSource(pProfileInfo));
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERCOPIES)->SetWindowText(GetCopies(pProfileInfo));
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERRESOLUTION)->SetWindowText(GetResolution(pProfileInfo));
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERLEFTMARGIN)->SetWindowText(szMargins[0]);
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERTOPMARGIN)->SetWindowText(szMargins[1]);
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERRIGHTMARGIN)->SetWindowText(szMargins[2]);
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERBOTTOMMARGIN)->SetWindowText(szMargins[3]);
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PRINTER_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PRINTER)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_CHANGE)->EnableWindow((IsDefaultPrinterAvailable()) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_SETUP)->EnableWindow((IsDefaultPrinterAvailable()) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPER)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERSIZE_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERSIZE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERSOURCE_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERSOURCE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERCOPIES_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERCOPIES)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERRESOLUTION_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERRESOLUTION)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERMARGINS)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERLEFTMARGIN_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERLEFTMARGIN)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERRIGHTMARGIN_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERRIGHTMARGIN)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERTOPMARGIN_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERTOPMARGIN)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERBOTTOMMARGIN_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERBOTTOMMARGIN)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERLEFTMARGIN_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERORIENTATION)->EnableWindow();
	}
	ShowPaperPicture();
}

CPrintProfileInfo *CSettingsPrintingPage::FindProfileInfo() CONST
{
	CString  szName;

	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROFILES)->GetWindowText(szName);
	return m_pProfiles[0].GetAt(m_pProfiles[0].Find(szName));
}

VOID CSettingsPrintingPage::GetPaperMargins(CONST CPrintProfileInfo *pProfileInfo, CString &szLeft, CString &szTop, CString &szRight, CString &szBottom) CONST
{
	BOOL  bMetric;
	RECT  rtMargin[2];
	SIZE  ptPaperSize;

	if (pProfileInfo->GetPaperInfo(ptPaperSize, rtMargin[0], rtMargin[1], bMetric))
	{
		szLeft.Format((bMetric) ? STRING(IDS_PRINTPROFILE_DEFAULTMETRICMARGIN) : STRING(IDS_PRINTPROFILE_DEFAULTINCHMARGIN), (bMetric) ? ((float)rtMargin[0].left / 100.0) : ((float)rtMargin[0].left / 1000.0));
		szTop.Format((bMetric) ? STRING(IDS_PRINTPROFILE_DEFAULTMETRICMARGIN) : STRING(IDS_PRINTPROFILE_DEFAULTINCHMARGIN), (bMetric) ? ((float)rtMargin[0].top / 100.0) : ((float)rtMargin[0].top / 1000.0));
		szRight.Format((bMetric) ? STRING(IDS_PRINTPROFILE_DEFAULTMETRICMARGIN) : STRING(IDS_PRINTPROFILE_DEFAULTINCHMARGIN), (bMetric) ? ((float)rtMargin[0].right / 100.0) : ((float)rtMargin[0].right / 1000.0));
		szBottom.Format((bMetric) ? STRING(IDS_PRINTPROFILE_DEFAULTMETRICMARGIN) : STRING(IDS_PRINTPROFILE_DEFAULTINCHMARGIN), (bMetric) ? ((float)rtMargin[0].bottom / 100.0) : ((float)rtMargin[0].bottom / 1000.0));
		return;
	}
	szLeft = szTop = szRight = szBottom = STRING(IDS_PRINTPROFILE_DEFAULTMARGIN);
}

CString CSettingsPrintingPage::GetPaperSize(CONST CPrintProfileInfo *pProfileInfo) CONST
{
	CString  szForm;

	return(((szForm = pProfileInfo->GetPaperForm()).IsEmpty()) ? STRING(IDS_PRINTPROFILE_DEFAULTPAPERFORM) : (LPCTSTR)szForm);
}

CString CSettingsPrintingPage::GetPaperSource(CONST CPrintProfileInfo *pProfileInfo) CONST
{
	CString  szSource;

	return(((szSource = pProfileInfo->GetPaperSource()).IsEmpty()) ? STRING(IDS_PRINTPROFILE_DEFAULTPAPERSOURCE) : (LPCTSTR)szSource);
}

CString CSettingsPrintingPage::GetResolution(CONST CPrintProfileInfo *pProfileInfo) CONST
{
	CSize  sizeResolution;
	CString  szResolution;

	switch ((sizeResolution = pProfileInfo->GetPaperResolution()).cx)
	{
	case DMRES_HIGH:
	{ szResolution = STRING(IDS_PRINTPROFILE_DEFAULTHIGHRESOLUTION);
	break;
	}
	case DMRES_MEDIUM:
	{ szResolution = STRING(IDS_PRINTPROFILE_DEFAULTMEDIUMRESOLUTION);
	break;
	}
	case DMRES_LOW:
	{ szResolution = STRING(IDS_PRINTPROFILE_DEFAULTLOWRESOLUTION);
	break;
	}
	case DMRES_DRAFT:
	{ szResolution = STRING(IDS_PRINTPROFILE_DEFAULTDRAFTRESOLUTION);
	break;
	}
	default:
	{ if (sizeResolution.cx > 0 && sizeResolution.cx != sizeResolution.cy)
	{
		szResolution.Format(STRING(IDS_PRINTPROFILE_DEFAULTXYRESOLUTION), sizeResolution.cx, sizeResolution.cy);
		break;
	}
	if (sizeResolution.cx > 0)
	{
		szResolution.Format(STRING(IDS_PRINTPROFILE_DEFAULTDPIRESOLUTION), sizeResolution.cx);
		break;
	}
	szResolution = STRING(IDS_PRINTPROFILE_DEFAULTRESOLUTION);
	}
	}
	return szResolution;
}

CString CSettingsPrintingPage::GetCopies(CONST CPrintProfileInfo *pProfileInfo) CONST
{
	CStringTools  cStringTools;

	return((pProfileInfo->GetCopies() > 0) ? (LPCTSTR)cStringTools.ConvertIntToString(pProfileInfo->GetCopies()) : STRING(IDS_PRINTPROFILE_DEFAULTCOPIES));
}

VOID CSettingsPrintingPage::ShowPaperPicture()
{
	CDC  *pDC;

	if ((pDC = GetDC()))
	{
		ShowPaperPicture(pDC);
		ReleaseDC(pDC);
	}
}
VOID CSettingsPrintingPage::ShowPaperPicture(CDC *pDC)
{
	CDC  cDC;
	CRect  rFrame;
	CPoint  ptImage;
	BITMAP  sBitmap;
	CBitmap  cBitmap;
	CBitmap  *pOldBitmap;
	CPrintProfileInfo  *pProfileInfo;

	if (cDC.CreateCompatibleDC(pDC))
	{
		if (cBitmap.LoadBitmap(((pProfileInfo = FindProfileInfo()) && pProfileInfo->GetPaperOrientation() == DMORIENT_LANDSCAPE) ? IDB_PAPERLANDSCAPE : IDB_PAPERPORTRAIT))
		{
			for (GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_PAPERORIENTATION)->GetWindowRect(rFrame), ScreenToClient(rFrame); (pOldBitmap = (cBitmap.GetObject(sizeof(BITMAP), &sBitmap) > 0) ? cDC.SelectObject(&cBitmap) : (CBitmap *)NULL); )
			{
				pDC->BitBlt((ptImage.x = rFrame.left + (rFrame.Width() - sBitmap.bmWidth) / 2), (ptImage.y = rFrame.top + (rFrame.Height() - sBitmap.bmHeight) / 2), sBitmap.bmWidth, sBitmap.bmHeight, &cDC, 0, 0, SRCCOPY);
				pDC->ExcludeClipRect(ptImage.x, ptImage.y, ptImage.x + sBitmap.bmWidth, ptImage.y + sBitmap.bmHeight);
				pDC->FillSolidRect(rFrame.left + (rFrame.Width() - max(sBitmap.bmWidth, sBitmap.bmHeight)) / 2, rFrame.top + (rFrame.Height() - max(sBitmap.bmWidth, sBitmap.bmHeight)) / 2, max(sBitmap.bmWidth, sBitmap.bmHeight), max(sBitmap.bmWidth, sBitmap.bmHeight), pDC->GetBkColor());
				cDC.SelectObject(pOldBitmap);
				break;
			}
			cBitmap.DeleteObject();
		}
		cDC.DeleteDC();
	}
}

VOID CSettingsPrintingPage::AdjustToPrivileges()
{
	AccessControl(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE));
}

BOOL CSettingsPrintingPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_pProfiles[0].Compare(&m_pProfiles[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CSettingsPrintingPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

VOID CSettingsPrintingPage::Update()
{
	ReportEvent((IsWindow(GetSafeHwnd())) ? ((IsModified(FALSE) && !SetPrintProfiles(m_pProfiles[0])) ? SYSTEM_WARNING_PRINTPROFILES_UPDATE_FAILURE : SYSTEM_NOERROR) : SYSTEM_NOERROR);
}

CSettingsDialog *CSettingsPrintingPage::GetParent() CONST
{
	return((CSettingsDialog *)CLocalePropertyPage::GetParent());
}

void CSettingsPrintingPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CSettingsPrintingPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CSettingsPrintingPage::PostNcDestroy()
{
	m_pProfiles[0].RemoveAll();
	m_pProfiles[1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CSettingsPrintingPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CSettingsPrintingPage)
	ON_WM_PAINT()
	ON_BN_CLICKED(IDC_SETTINGS_PRINTINGPAGE_ADDPROFILE, OnAddProfile)
	ON_BN_CLICKED(IDC_SETTINGS_PRINTINGPAGE_REMOVEPROFILE, OnRemoveProfile)
	ON_BN_CLICKED(IDC_SETTINGS_PRINTINGPAGE_REMOVEALLPROFILES, OnRemoveAllProfiles)
	ON_BN_CLICKED(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_CHANGE, OnChangePrinter)
	ON_BN_CLICKED(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_SETUP, OnChangePrinterSetup)
	ON_CBN_EDITCHANGE(IDC_SETTINGS_PRINTINGPAGE_PROFILES, OnEditchangeProfile)
	ON_CBN_SELCHANGE(IDC_SETTINGS_PRINTINGPAGE_PROFILES, OnSelchangeProfile)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSettingsPrintingPage message handlers

BOOL CSettingsPrintingPage::OnInitDialog()
{
	INT  nProfile;
	INT  nProfiles;
	CString  szProfileName;
	CStringArray  szProfiles;
	CPrintProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	for (nProfile = 0, nProfiles = (m_pProfiles[0].Enum(szProfiles)) ? (INT)szProfiles.GetSize() : 0; nProfile < nProfiles; nProfile++)
	{
		SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfiles.GetAt(nProfile));
		continue;
	}
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROFILES_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROFILES)->EnableWindow();
	if ((pProfileInfo = m_pProfiles[0].GetAt(m_pProfiles[0].Find(STRING(IDS_PRINTPROFILE_DEFAULTNAME)))))
	{
		if (SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pProfileInfo->GetName())) >= 0)
		{
			GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_ADDPROFILE)->EnableWindow(FALSE);
			GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_REMOVEPROFILE)->EnableWindow(FALSE);
			GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
		}
		ShowProfileInfo();
	}
	AdjustToPrivileges();
	return TRUE;
}

void CSettingsPrintingPage::OnPaint()
{
	CPaintDC  cDC(this);

	ShowPaperPicture(&cDC);
	CLocalePropertyPage::OnPaint();
}

void CSettingsPrintingPage::OnEditchangeProfile()
{
	CString  szName;

	for (GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROFILES)->GetWindowText(szName); SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0; )
	{
		ShowProfileInfo();
		break;
	}
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_ADDPROFILE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) < 0) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_REMOVEPROFILE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0 && szName != STRING(IDS_PRINTPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_CHANGE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_SETUP)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
}

void CSettingsPrintingPage::OnSelchangeProfile()
{
	for (; SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_GETCURSEL)) >= 0; )
	{
		ShowProfileInfo();
		break;
	}
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_ADDPROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_REMOVEPROFILE)->EnableWindow((Combobox_GetText(GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROFILES), (INT)SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_GETCURSEL)) != STRING(IDS_PRINTPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_CHANGE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE));
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_SETUP)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE));
}

void CSettingsPrintingPage::OnAddProfile()
{
	CString  szName;
	PAGESETUPDLG  sPrinterInfo;
	CPrintProfileInfo  *pProfileInfo;
	CPageSetupDialog  cPrintPageSetupDialog(PSD_INWININIINTLMEASURE | PSD_MARGINS | PSD_NOWARNING, this);
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROFILES)->GetWindowText(szName), ZeroMemory(&sPrinterInfo, sizeof(PAGESETUPDLG)); (pProfileInfo = new CPrintProfileInfo); )
	{
		if (SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szName)) >= 0)
		{
			for (pProfileInfo->SetName(szName); GetDefaultPrinterInfo(&sPrinterInfo); )
			{
				pProfileInfo->SetDeviceInfo(sPrinterInfo.hDevNames, sPrinterInfo.hDevMode);
				pProfileInfo->SetPaperInfo(CSize(sPrinterInfo.ptPaperSize.x, sPrinterInfo.ptPaperSize.y), sPrinterInfo.rtMargin, sPrinterInfo.rtMinMargin, (sPrinterInfo.Flags & PSD_INHUNDREDTHSOFMILLIMETERS) ? TRUE : FALSE);
				m_pProfiles[0].Add(pProfileInfo);
				break;
			}
			if (m_pProfiles[0].Find(szName) < 0 && cPrintPageSetupDialog.DoModal() == IDOK)
			{
				pProfileInfo->SetDeviceInfo(cPrintPageSetupDialog.m_psd.hDevNames, cPrintPageSetupDialog.m_psd.hDevMode);
				pProfileInfo->SetPaperInfo(CSize(cPrintPageSetupDialog.m_psd.ptPaperSize.x, cPrintPageSetupDialog.m_psd.ptPaperSize.y), cPrintPageSetupDialog.m_psd.rtMargin, cPrintPageSetupDialog.m_psd.rtMinMargin, (cPrintPageSetupDialog.m_psd.Flags & PSD_INHUNDREDTHSOFMILLIMETERS) ? TRUE : FALSE);
				m_pProfiles[0].Add(pProfileInfo);
			}
			if (m_pProfiles[0].Find(szName) >= 0) break;
		}
		delete pProfileInfo;
		break;
	}
	ShowProfileInfo();
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_ADDPROFILE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) < 0) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_REMOVEPROFILE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_GETCURSEL) >= 0 && Combobox_GetText(GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROFILES), (INT)SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_GETCURSEL)) != STRING(IDS_PRINTPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_CHANGE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_SETUP)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROFILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsPrintingPage::OnRemoveProfile()
{
	CString  szName;
	CPrintProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROFILES)->GetWindowText(szName); (pProfileInfo = m_pProfiles[0].GetAt(m_pProfiles[0].Find(szName))); )
	{
		if (SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName)) > 0)
		{
			m_pProfiles[0].RemoveAt(m_pProfiles[0].Find(szName));
			delete pProfileInfo;
		}
		break;
	}
	for (; SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_PRINTPROFILE_DEFAULTNAME))) >= 0; )
	{
		ShowProfileInfo();
		break;
	}
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_ADDPROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_REMOVEPROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_CHANGE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_SETUP)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROFILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsPrintingPage::OnRemoveAllProfiles()
{
	INT  nProfile;
	INT  nProfiles;
	CPrintProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (nProfile = 0, nProfiles = (INT)m_pProfiles[0].GetSize(); nProfile < nProfiles; nProfile++)
	{
		if ((pProfileInfo = m_pProfiles[0].GetAt(nProfile)) && pProfileInfo->GetName() != STRING(IDS_PRINTPROFILE_DEFAULTNAME) && SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pProfileInfo->GetName())) > 0)
		{
			m_pProfiles[0].RemoveAt(nProfile);
			delete pProfileInfo;
			nProfiles--;
			nProfile--;
		}
	}
	for (; SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_PRINTPROFILE_DEFAULTNAME))) >= 0; )
	{
		ShowProfileInfo();
		break;
	}
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_ADDPROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_REMOVEPROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_REMOVEALLPROFILES)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_CHANGE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROPERTIES_SETUP)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_PRINTINGPAGE_PROFILES, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_PRINTINGPAGE_PROFILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsPrintingPage::OnChangePrinter()
{
	HANDLE  hDevMode;
	HANDLE  hDevNames;
	CPrintProfileInfo  *pProfileInfo;
	CPrintPagePrepareDialog  cPrintPrepareDialog(this);

	if ((pProfileInfo = FindProfileInfo()))
	{
		if (pProfileInfo->GetDeviceInfo(hDevNames, hDevMode))
		{
			cPrintPrepareDialog.m_pd.hDevNames = hDevNames;
			cPrintPrepareDialog.m_pd.hDevMode = hDevMode;
		}
		if (cPrintPrepareDialog.DoModal() == IDOK)
		{
			pProfileInfo->SetDeviceInfo(cPrintPrepareDialog.m_pd.hDevNames, cPrintPrepareDialog.m_pd.hDevMode);
		}
		ShowProfileInfo();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsPrintingPage::OnChangePrinterSetup()
{
	BOOL  bMetric;
	RECT  rtMargin[2];
	SIZE  ptPaperSize;
	HANDLE  hDevMode;
	HANDLE  hDevNames;
	CPrintProfileInfo  *pProfileInfo;
	CPageSetupDialog  cPrintPageSetupDialog(PSD_INWININIINTLMEASURE | PSD_MARGINS | PSD_NOWARNING, this);

	if ((pProfileInfo = FindProfileInfo()))
	{
		if (pProfileInfo->GetPaperInfo(ptPaperSize, rtMargin[0], rtMargin[1], bMetric) && pProfileInfo->GetDeviceInfo(hDevNames, hDevMode))
		{
			cPrintPageSetupDialog.m_psd.ptPaperSize.x = ptPaperSize.cx;
			cPrintPageSetupDialog.m_psd.ptPaperSize.y = ptPaperSize.cy;
			CopyMemory(&cPrintPageSetupDialog.m_psd.rtMargin, &rtMargin[0], sizeof(RECT));
			CopyMemory(&cPrintPageSetupDialog.m_psd.rtMinMargin, &rtMargin[1], sizeof(RECT));
			cPrintPageSetupDialog.m_psd.Flags |= (bMetric) ? PSD_INHUNDREDTHSOFMILLIMETERS : PSD_INTHOUSANDTHSOFINCHES;
			cPrintPageSetupDialog.m_psd.hDevNames = hDevNames;
			cPrintPageSetupDialog.m_psd.hDevMode = hDevMode;
		}
		if (cPrintPageSetupDialog.DoModal() == IDOK)
		{
			pProfileInfo->SetDeviceInfo(cPrintPageSetupDialog.m_psd.hDevNames, cPrintPageSetupDialog.m_psd.hDevMode);
			pProfileInfo->SetPaperInfo(CSize(cPrintPageSetupDialog.m_psd.ptPaperSize.x, cPrintPageSetupDialog.m_psd.ptPaperSize.y), cPrintPageSetupDialog.m_psd.rtMargin, cPrintPageSetupDialog.m_psd.rtMinMargin, (cPrintPageSetupDialog.m_psd.Flags & PSD_INHUNDREDTHSOFMILLIMETERS) ? TRUE : FALSE);
		}
		ShowProfileInfo();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CSettingsAuditionsPage property page

IMPLEMENT_DYNCREATE(CSettingsAuditionsPage, CLocalePropertyPage)

CSettingsAuditionsPage::CSettingsAuditionsPage() : CLocalePropertyPage(CSettingsAuditionsPage::IDD)
{
	//{{AFX_DATA_INIT(CSettingsAuditionsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CSettingsAuditionsPage::Initialize()
{
	return((GetAuditionProfiles(m_pProfiles[0])) ? m_pProfiles[1].Copy(&m_pProfiles[0]) : FALSE);
}

VOID CSettingsAuditionsPage::ShowProfileInfo()
{
	INT  nAudition;
	WORD  wVoice[2];
	DWORD  dwVolume;
	DWORD  dwPitch;
	DWORD  dwPlayback;
	DWORD  dwFeatures;
	DWORD  dwFrequency;
	CAudio  cAudioAdapter;
	CString  szAudioAdapter;
	CString  szVoiceSpeaker;
	CString  szSoundFileName;
	CAuditionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		for (nAudition = pProfileInfo->GetAudition(), pProfileInfo->GetAdapterInfo(szAudioAdapter, dwVolume, dwPitch, dwPlayback), dwFrequency = pProfileInfo->GetBeepSound(), szSoundFileName = pProfileInfo->GetWaveSound(), pProfileInfo->GetVoiceSound(szVoiceSpeaker, wVoice[0], wVoice[1]); TRUE; )
		{
			dwFeatures = (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_SETCURSEL, ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND)) ? max(SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szAudioAdapter), 0) : -1) >= 0) ? cAudioAdapter.EnumOutputDeviceFeatures(Combobox_GetText(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER), (INT)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCURSEL))) : 0;
			dwFeatures |= ((nAudition & AUDIO_VOICE_SOUND) && (dwFeatures & WAVECAPS_VOLUME)) ? (WAVECAPS_PLAYBACKRATE | WAVECAPS_PITCH) : 0;
			break;
		}
		CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_NONE, (nAudition & AUDIO_NO_SOUND) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_SPEAKER, (nAudition & AUDIO_STANDARD_SOUND) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP, (nAudition & AUDIO_BEEP_SOUND) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE, ((nAudition & AUDIO_WAVE_SOUND) && SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE, ((nAudition & AUDIO_VOICE_SOUND) && SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? EnumVoiceSpeakers(wVoice[0], wVoice[1]) : FALSE);
		Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY), (nAudition & AUDIO_BEEP_SOUND) ? dwFrequency : AUDIO_DEFAULTBEEPFREQUENCY);
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND)) && (dwFeatures & WAVECAPS_VOLUME)) ? (LOWORD(dwVolume) * 100) / 0xFFFF : 0);
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND)) && (dwFeatures & WAVECAPS_VOLUME)) ? ((dwFeatures & WAVECAPS_LRVOLUME) ? ((HIWORD(dwVolume) * 100) / 0xFFFF) : ((LOWORD(dwVolume) * 100) / 0xFFFF)) : 0);
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND)) && (dwFeatures & WAVECAPS_PLAYBACKRATE)) ? ((dwPlayback <= AUDIO_DEFAULTPLAYBACKRATE) ? (DWORD)(50.0*((double)dwPlayback / (double)AUDIO_DEFAULTPLAYBACKRATE - (double)AUDIO_MINPLAYBACKRATE / (double)AUDIO_DEFAULTPLAYBACKRATE) / (1.0 - (double)AUDIO_MINPLAYBACKRATE / (double)AUDIO_DEFAULTPLAYBACKRATE)) : (DWORD)(50.0*(1.0 + ((double)dwPlayback / (double)AUDIO_DEFAULTPLAYBACKRATE - 1.0) / ((double)AUDIO_DEFAULTPLAYBACKRATE / (double)AUDIO_MINPLAYBACKRATE - 1.0)))) : 0);
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND)) && (dwFeatures & WAVECAPS_PITCH)) ? ((dwPitch <= AUDIO_DEFAULTPITCH) ? (DWORD)(50.0*((double)dwPitch / (double)AUDIO_DEFAULTPITCH - (double)AUDIO_MINPITCH / (double)AUDIO_DEFAULTPITCH) / (1.0 - (double)AUDIO_MINPITCH / (double)AUDIO_DEFAULTPITCH)) : (DWORD)(50.0*(1.0 + ((double)dwPitch / (double)AUDIO_DEFAULTPITCH - 1.0) / ((double)AUDIO_DEFAULTPITCH / (double)AUDIO_MINPITCH - 1.0)))) : 0);
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER, CB_SETCURSEL, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (nAudition & AUDIO_VOICE_SOUND)) ? wVoice[0] : (WPARAM)-1);
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE, CB_SETCURSEL, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (nAudition & AUDIO_VOICE_SOUND)) ? wVoice[1] : (WPARAM)-1);
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER, CB_SETCURSEL, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (nAudition & AUDIO_VOICE_SOUND) && SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER, CB_GETCURSEL) == wVoice[0] && SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE, CB_GETCURSEL) == wVoice[1]) ? max(SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szVoiceSpeaker), 0) : (WPARAM)-1);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->SetWindowText((nAudition & AUDIO_WAVE_SOUND) ? (LPCTSTR)szSoundFileName : EMPTYSTRING);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_NONE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_SPEAKER)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP));
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP));
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND))) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND))) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND))) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND)) && (dwFeatures & WAVECAPS_VOLUME)) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND)) && (dwFeatures & WAVECAPS_VOLUME)) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND)) && (dwFeatures & WAVECAPS_VOLUME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND)) && (dwFeatures & WAVECAPS_VOLUME)) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND)) && (dwFeatures & WAVECAPS_VOLUME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND)) && (dwFeatures & WAVECAPS_PLAYBACKRATE)) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND)) && (dwFeatures & WAVECAPS_PLAYBACKRATE)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND)) && (dwFeatures & WAVECAPS_PITCH)) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && ((nAudition & AUDIO_BEEP_SOUND) || (nAudition & AUDIO_WAVE_SOUND) || (nAudition & AUDIO_VOICE_SOUND)) && (dwFeatures & WAVECAPS_PITCH)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE)->EnableWindow((nAudition & AUDIO_WAVE_SOUND) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME_STATIC)->EnableWindow((nAudition & AUDIO_WAVE_SOUND) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->EnableWindow((nAudition & AUDIO_WAVE_SOUND) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_BROWSE)->EnableWindow((nAudition & AUDIO_WAVE_SOUND) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE)->EnableWindow((nAudition & AUDIO_VOICE_SOUND) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER_STATIC)->EnableWindow((nAudition & AUDIO_VOICE_SOUND) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER)->EnableWindow((nAudition & AUDIO_VOICE_SOUND) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE_STATIC)->EnableWindow((nAudition & AUDIO_VOICE_SOUND) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE)->EnableWindow((nAudition & AUDIO_VOICE_SOUND) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER_STATIC)->EnableWindow((nAudition & AUDIO_VOICE_SOUND) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER)->EnableWindow((nAudition & AUDIO_VOICE_SOUND) ? TRUE : FALSE);
	}
}

VOID CSettingsAuditionsPage::SaveProfileInfo()
{
	DWORD  dwPos;
	DWORD  dwPitch;
	DWORD  dwVolume;
	DWORD  dwPlayback;
	CString  szSound;
	CString  szAdapter;
	CString  szVoiceSpeaker;
	CAuditionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER)->GetWindowText(szAdapter);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->GetWindowText(szSound);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER)->GetWindowText(szVoiceSpeaker);
		if (IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_NONE)) pProfileInfo->SetAudition(AUDIO_NO_SOUND);
		if (IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_SPEAKER)) pProfileInfo->SetAudition(AUDIO_STANDARD_SOUND);
		if (IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP))
		{
			pProfileInfo->SetAudition(AUDIO_BEEP_SOUND);
			pProfileInfo->SetBeepSound((DWORD)Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY)));
		}
		if (IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE))
		{
			pProfileInfo->SetAudition(AUDIO_WAVE_SOUND);
			pProfileInfo->SetWaveSound(szSound);
		}
		if (IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE))
		{
			pProfileInfo->SetAudition(AUDIO_VOICE_SOUND);
			pProfileInfo->SetVoiceSound(szVoiceSpeaker, (WORD)GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER)->SendMessage(CB_GETCURSEL), (WORD)GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE)->SendMessage(CB_GETCURSEL));
		}
		dwVolume = MAKELONG((GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT)->SendMessage(TBM_GETPOS) * 0xFFFF + 99) / 100, (GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT)->SendMessage(TBM_GETPOS) * 0xFFFF + 99) / 100);
		dwPlayback = ((dwPos = (DWORD)GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE)->SendMessage(TBM_GETPOS)) <= 50) ? (DWORD)(((double)AUDIO_MINPLAYBACKRATE / (double)AUDIO_DEFAULTPLAYBACKRATE + ((double)dwPos*(1.0 - (double)AUDIO_MINPLAYBACKRATE / (double)AUDIO_DEFAULTPLAYBACKRATE)) / 50.0)*(double)AUDIO_DEFAULTPLAYBACKRATE) : (DWORD)((1.0 + (((double)dwPos - 50.0)*((double)AUDIO_DEFAULTPLAYBACKRATE / (double)AUDIO_MINPLAYBACKRATE - 1.0)) / 50.0)*(double)AUDIO_DEFAULTPLAYBACKRATE);
		dwPitch = ((dwPos = (DWORD)GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH)->SendMessage(TBM_GETPOS)) <= 50) ? (DWORD)(((double)AUDIO_MINPITCH / (double)AUDIO_DEFAULTPITCH + ((double)dwPos*(1.0 - (double)AUDIO_MINPITCH / (double)AUDIO_DEFAULTPITCH)) / 50.0)*(double)AUDIO_DEFAULTPITCH) : (DWORD)((1.0 + (((double)dwPos - 50.0)*((double)AUDIO_DEFAULTPITCH / (double)AUDIO_MINPITCH - 1.0)) / 50.0)*(double)AUDIO_DEFAULTPITCH);
		pProfileInfo->SetAdapterInfo(szAdapter, dwVolume, dwPitch, dwPlayback);
	}
}

CAuditionProfileInfo *CSettingsAuditionsPage::FindProfileInfo() CONST
{
	CString  szName;

	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROFILES)->GetWindowText(szName);
	return m_pProfiles[0].GetAt(m_pProfiles[0].Find(szName));
}

BOOL CSettingsAuditionsPage::EnumVoiceSpeakers(WORD wGender, WORD wAge)
{
	INT  nVoice;
	INT  nVoices;
	CAudio  cAudioAdapter;
	CStringArray  szVoices;

	for (nVoice = 0, nVoices = cAudioAdapter.EnumVoices(szVoices, wGender, wAge), SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER, CB_RESETCONTENT); nVoice < nVoices; nVoice++)
	{
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szVoices.GetAt(nVoice));
		continue;
	}
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER, CB_SETCURSEL);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((nVoices >= 0) ? TRUE : FALSE);
}

BOOL CSettingsAuditionsPage::FindDefaultSoundPath(LPCTSTR pszDirectory, CString &szPath) CONST
{
	BOOL  bFileFind;
	CFileFindEx  cFileFind;

	if (cFileFind.FindFile((pszDirectory[lstrlen(pszDirectory) - 1] != CHAR(IDS_FILENAME_ALL)) ? (CString(pszDirectory) + STRING(IDS_FILENAME_ALL)) : (CString(pszDirectory).Left(lstrlen(pszDirectory) - 1) + STRING(IDS_FILENAME_ALL))))
	{
		while ((bFileFind = cFileFind.FindNextFile()))
		{
			if (!cFileFind.IsDots() && cFileFind.IsDirectory())
			{
				if (FindDefaultSoundPath(cFileFind.GetFilePath(), szPath)) break;
				continue;
			}
			if (!cFileFind.IsDots() && FindDefaultSoundPath(cFileFind.GetFilePath(), szPath)) break;
			if (cFileFind.GetFileName().GetLength() > cFileFind.GetFileTitle().GetLength() && !_tcsicmp(cFileFind.GetFilePath().Right(cFileFind.GetFileName().GetLength() - cFileFind.GetFileTitle().GetLength()), CString(STRING(IDS_SETTINGS_AUDITIONSPAGE_WAVESOUND_FILEEXTENSION)).Right(cFileFind.GetFileName().GetLength() - cFileFind.GetFileTitle().GetLength())))
			{
				szPath = pszDirectory;
				break;
			}
		}
		cFileFind.Close();
		return bFileFind;
	}
	return FALSE;
}

VOID CSettingsAuditionsPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, (bCheck = CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE)));
	AccessControl(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_NONE, bCheck);
	AccessControl(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_SPEAKER, bCheck);
	AccessControl(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP, bCheck);
	AccessControl(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY, bCheck);
	AccessControl(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE, bCheck);
	AccessControl(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE, bCheck);
	AccessControl(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, bCheck);
	AccessControl(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME, bCheck);
	AccessControl(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER, bCheck);
	AccessControl(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE, bCheck);
	AccessControl(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER, bCheck);
}

BOOL CSettingsAuditionsPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_pProfiles[0].Compare(&m_pProfiles[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CSettingsAuditionsPage::Check(BOOL bAll) CONST
{
	INT  nProfile;
	INT  nProfiles;
	CAuditionProfileInfo  *pProfileInfo;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nProfile = 0, nProfiles = (INT)m_pProfiles[0].GetSize(); nProfile < nProfiles; nProfile++)
		{
			if ((pProfileInfo = m_pProfiles[0].GetAt(nProfile)) && ((pProfileInfo->GetAudition() & AUDIO_WAVE_SOUND) != AUDIO_WAVE_SOUND || !pProfileInfo->GetWaveSound().IsEmpty())) continue;
			break;
		}
		return(((!IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->GetWindowTextLength() > 0) && nProfile == nProfiles) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

VOID CSettingsAuditionsPage::Update()
{
	ReportEvent((IsWindow(GetSafeHwnd())) ? ((IsModified(FALSE) && !SetAuditionProfiles(m_pProfiles[0])) ? SYSTEM_WARNING_AUDITIONPROFILES_UPDATE_FAILURE : SYSTEM_NOERROR) : SYSTEM_NOERROR);
}

CSettingsDialog *CSettingsAuditionsPage::GetParent() CONST
{
	return((CSettingsDialog *)CLocalePropertyPage::GetParent());
}

void CSettingsAuditionsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CSettingsAuditionsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CSettingsAuditionsPage::PostNcDestroy()
{
	m_pProfiles[0].RemoveAll();
	m_pProfiles[1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CSettingsAuditionsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CSettingsAuditionsPage)
	ON_WM_HSCROLL()
	ON_BN_CLICKED(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE, OnAddProfile)
	ON_BN_CLICKED(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE, OnRemoveProfile)
	ON_BN_CLICKED(IDC_SETTINGS_AUDITIONSPAGE_REMOVEALLPROFILES, OnRemoveAllProfiles)
	ON_BN_CLICKED(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_NONE, OnNoSound)
	ON_BN_CLICKED(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_SPEAKER, OnSpeakerSound)
	ON_BN_CLICKED(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP, OnBeepSound)
	ON_BN_CLICKED(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE, OnWaveSound)
	ON_BN_CLICKED(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE, OnVoiceSound)
	ON_BN_CLICKED(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_BROWSE, OnBrowseWave)
	ON_CBN_EDITCHANGE(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, OnEditchangeProfile)
	ON_CBN_SELCHANGE(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, OnSelchangeProfile)
	ON_CBN_SELCHANGE(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, OnSelchangeAdapter)
	ON_CBN_SELCHANGE(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER, OnSelchangeVoiceGender)
	ON_CBN_SELCHANGE(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE, OnSelchangeVoiceAge)
	ON_CBN_SELCHANGE(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER, OnSelchangeVoiceSpeaker)
	ON_EN_CHANGE(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME, OnEditchangeWave)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY, OnSpinchangeFrequency)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSettingsAuditionsPage message handlers

BOOL CSettingsAuditionsPage::OnInitDialog()
{
	INT  nAge;
	INT  nAges;
	INT  nGender;
	INT  nGenders;
	INT  nDevice;
	INT  nDevices;
	INT  nProfile;
	INT  nProfiles;
	DWORD  dwPitch;
	DWORD  dwVolume;
	DWORD  dwPlaybackRate;
	CAudio  cAudioAdapter;
	CString  szAudioAdapter;
	CDWordArray  dwDevCaps;
	CDWordArray  dwDevFormats;
	CStringArray  szDevices;
	CStringArray  szProfiles;
	CStringArray  szVoice[2];
	CAuditionProfileInfo  *pProfileInfo[2];
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	for (nDevice = 0, nDevices = cAudioAdapter.EnumOutputDevices(szDevices, dwDevFormats, dwDevCaps); nDevice < nDevices; nDevice++)
	{
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, (dwDevCaps.GetAt(nDevice) & WAVECAPS_VOLUME) ? CB_ADDSTRING : CB_GETCOUNT, (WPARAM)NULL, (LPARAM)(LPCTSTR)szDevices.GetAt(nDevice));
		continue;
	}
	for (nProfile = 0, nProfiles = (m_pProfiles[0].Enum(szProfiles)) ? (INT)szProfiles.GetSize() : 0; nProfile < nProfiles; nProfile++)
	{
		if ((pProfileInfo[0] = m_pProfiles[0].GetAt(nProfile)) && ((pProfileInfo[0]->GetAudition() != AUDIO_WAVE_SOUND  &&  pProfileInfo[0]->GetAudition() != AUDIO_VOICE_SOUND) || nDevices > 0))
		{
			for (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfiles.GetAt(nProfile)), pProfileInfo[0]->GetAdapterInfo(szAudioAdapter, dwVolume, dwPitch, dwPlaybackRate); SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szAudioAdapter) < 0; )
			{
				for (szAudioAdapter = Combobox_GetText(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER), 0); (pProfileInfo[1] = m_pProfiles[1].GetAt(m_pProfiles[1].Find(pProfileInfo[0]->GetName()))); )
				{
					pProfileInfo[1]->SetAdapterInfo(szAudioAdapter, dwVolume, dwPitch, dwPlaybackRate);
					break;
				}
				pProfileInfo[0]->SetAdapterInfo(szAudioAdapter, dwVolume, dwPitch, dwPlaybackRate);
				break;
			}
			continue;
		}
		if (pProfileInfo[0]->GetName() == STRING(IDS_AUDITIONPROFILE_DEFAULTNAME))
		{
			pProfileInfo[0]->SetAudition(AUDIO_NO_SOUND);
			pProfileInfo[0]->SetAdapterInfo(EMPTYSTRING, 0, 0, 0);
			SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pProfileInfo[0]->GetName());
		}
	}
	for (nGender = 0, nGenders = cAudioAdapter.EnumVoiceGenders(szVoice[0]); nGender < nGenders; nGender++)
	{
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER, CB_INSERTSTRING, nGender, (LPARAM)(LPCTSTR)szVoice[0].GetAt(nGender));
		continue;
	}
	for (nAge = 0, nAges = cAudioAdapter.EnumVoiceAges(szVoice[1]); nAge < nAges; nAge++)
	{
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE, CB_INSERTSTRING, nAge, (LPARAM)(LPCTSTR)szVoice[1].GetAt(nAge));
		continue;
	}
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROFILES_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROFILES)->EnableWindow();
	if (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_AUDITIONPROFILE_DEFAULTNAME)) >= 0 && nDevice == nDevices  &&  nGender == nGenders  &&  nAge == nAges)
	{
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_AUDITIONPROFILE_DEFAULTNAME)));
		Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY), AUDIO_MINBEEPFREQUENCY, AUDIO_MAXBEEPFREQUENCY);
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT, TBM_SETRANGE, TRUE, MAKELPARAM(0, 100));
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT, TBM_SETRANGE, TRUE, MAKELPARAM(0, 100));
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE, TBM_SETRANGE, TRUE, MAKELPARAM(0, 100));
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH, TBM_SETRANGE, TRUE, MAKELPARAM(0, 100));
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT, TBM_SETTICFREQ, 10, 0);
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT, TBM_SETTICFREQ, 10, 0);
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE, TBM_SETTICFREQ, 10, 0);
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH, TBM_SETTICFREQ, 10, 0);
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME, EM_LIMITTEXT, MAX_PATH);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
		ShowProfileInfo();
	}
	AdjustToPrivileges();
	return TRUE;
}

void CSettingsAuditionsPage::OnHScroll(UINT nSBCode, UINT nPos, CScrollBar *pScrollBar)
{
	DWORD  dwPos;
	DWORD  dwPitch;
	DWORD  dwVolume;
	DWORD  dwPlayback;
	DWORD  dwFeatures;
	CAudio  cAudioAdapter;
	CString  szAudioAdapters[2];
	CAuditionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		pProfileInfo->GetAdapterInfo(szAudioAdapters[0], dwVolume, dwPitch, dwPlayback);
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER)->GetWindowText(szAudioAdapters[1]);
		dwVolume = ((dwFeatures = (pProfileInfo->GetAudition() & AUDIO_VOICE_SOUND) ? (cAudioAdapter.EnumOutputDeviceFeatures(szAudioAdapters[1]) | WAVECAPS_PLAYBACKRATE | WAVECAPS_PITCH) : cAudioAdapter.EnumOutputDeviceFeatures(szAudioAdapters[1])) & WAVECAPS_VOLUME) ? MAKELONG((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT, TBM_GETPOS) * 0xFFFF + 99) / 100, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT, TBM_GETPOS) * 0xFFFF + 99) / 100) : dwVolume;
		dwVolume = ((dwFeatures & WAVECAPS_VOLUME) && (!(dwFeatures & WAVECAPS_LRVOLUME) || (pProfileInfo->GetAudition() & AUDIO_VOICE_SOUND)) && GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT) == (CWnd *)pScrollBar) ? MAKELONG((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT, TBM_GETPOS) * 0xFFFF + 99) / 100, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT, TBM_GETPOS) * 0xFFFF + 99) / 100) : dwVolume;
		dwVolume = ((dwFeatures & WAVECAPS_VOLUME) && (!(dwFeatures & WAVECAPS_LRVOLUME) || (pProfileInfo->GetAudition() & AUDIO_VOICE_SOUND)) && GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT) == (CWnd *)pScrollBar) ? MAKELONG((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT, TBM_GETPOS) * 0xFFFF + 99) / 100, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT, TBM_GETPOS) * 0xFFFF + 99) / 100) : dwVolume;
		dwPlayback = (dwFeatures & WAVECAPS_PLAYBACKRATE) ? (((dwPos = (DWORD)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE, TBM_GETPOS)) <= 50) ? (DWORD)(((double)AUDIO_MINPLAYBACKRATE / (double)AUDIO_DEFAULTPLAYBACKRATE + ((double)dwPos*(1.0 - (double)AUDIO_MINPLAYBACKRATE / (double)AUDIO_DEFAULTPLAYBACKRATE)) / 50.0)*(double)AUDIO_DEFAULTPLAYBACKRATE) : (DWORD)((1.0 + (((double)dwPos - 50.0)*((double)AUDIO_DEFAULTPLAYBACKRATE / (double)AUDIO_MINPLAYBACKRATE - 1.0)) / 50.0)*(double)AUDIO_DEFAULTPLAYBACKRATE)) : dwPlayback;
		dwPitch = (dwFeatures & WAVECAPS_PITCH) ? (((dwPos = (DWORD)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH, TBM_GETPOS)) <= 50) ? (DWORD)(((double)AUDIO_MINPITCH / (double)AUDIO_DEFAULTPITCH + ((double)dwPos*(1.0 - (double)AUDIO_MINPITCH / (double)AUDIO_DEFAULTPITCH)) / 50.0)*(double)AUDIO_DEFAULTPITCH) : (DWORD)((1.0 + (((double)dwPos - 50.0)*((double)AUDIO_DEFAULTPITCH / (double)AUDIO_MINPITCH - 1.0)) / 50.0)*(double)AUDIO_DEFAULTPITCH)) : dwPitch;
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT, TBM_SETPOS, TRUE, (LOWORD(dwVolume) * 100) / 0xFFFF);
		SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT, TBM_SETPOS, TRUE, (HIWORD(dwVolume) * 100) / 0xFFFF);
		pProfileInfo->SetAdapterInfo(szAudioAdapters[0], dwVolume, dwPitch, dwPlayback);
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE))
	{
		if (GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT) == (CWnd *)pScrollBar)
		{
			dwVolume = (DWORD)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT, TBM_GETPOS);
			SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT, TBM_SETPOS, TRUE, dwVolume);
		}
		if (GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT) == (CWnd *)pScrollBar)
		{
			dwVolume = (DWORD)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT, TBM_GETPOS);
			SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT, TBM_SETPOS, TRUE, dwVolume);
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
	CLocalePropertyPage::OnHScroll(nSBCode, nPos, pScrollBar);
}

void CSettingsAuditionsPage::OnEditchangeProfile()
{
	CString  szName;

	for (GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROFILES)->GetWindowText(szName); SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0; )
	{
		ShowProfileInfo();
		break;
	}
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) < 0) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0 && szName != STRING(IDS_AUDITIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
}

void CSettingsAuditionsPage::OnSelchangeProfile()
{
	for (; SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCURSEL)) >= 0; )
	{
		ShowProfileInfo();
		break;
	}
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE)->EnableWindow((Combobox_GetText(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROFILES), (INT)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCURSEL)) != STRING(IDS_AUDITIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
}

void CSettingsAuditionsPage::OnAddProfile()
{
	CString  szName;
	CAuditionProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROFILES)->GetWindowText(szName); (pProfileInfo = new CAuditionProfileInfo); )
	{
		if (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szName)) >= 0)
		{
			for (pProfileInfo->SetName(szName); m_pProfiles[0].Add(pProfileInfo) >= 0; )
			{
				SaveProfileInfo();
				break;
			}
			if (m_pProfiles[0].Find(szName) >= 0) break;
		}
		delete pProfileInfo;
		break;
	}
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) < 0) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCURSEL) >= 0 && Combobox_GetText(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROFILES), (INT)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCURSEL)) != STRING(IDS_AUDITIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROFILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsAuditionsPage::OnRemoveProfile()
{
	CString  szName;
	CAuditionProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROFILES)->GetWindowText(szName); (pProfileInfo = m_pProfiles[0].GetAt(m_pProfiles[0].Find(szName))); )
	{
		if (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName)) > 0)
		{
			m_pProfiles[0].RemoveAt(m_pProfiles[0].Find(szName));
			delete pProfileInfo;
		}
		break;
	}
	for (; SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_AUDITIONPROFILE_DEFAULTNAME))) >= 0; )
	{
		ShowProfileInfo();
		break;
	}
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROFILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsAuditionsPage::OnRemoveAllProfiles()
{
	INT  nProfile;
	INT  nProfiles;
	CAuditionProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (nProfile = 0, nProfiles = (INT)m_pProfiles[0].GetSize(); nProfile < nProfiles; nProfile++)
	{
		if ((pProfileInfo = m_pProfiles[0].GetAt(nProfile)) && pProfileInfo->GetName() != STRING(IDS_AUDITIONPROFILE_DEFAULTNAME) && SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pProfileInfo->GetName())) > 0)
		{
			m_pProfiles[0].RemoveAt(nProfile);
			delete pProfileInfo;
			nProfiles--;
			nProfile--;
		}
	}
	for (; SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_AUDITIONPROFILE_DEFAULTNAME))) >= 0; )
	{
		ShowProfileInfo();
		break;
	}
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEALLPROFILES)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROFILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsAuditionsPage::OnNoSound()
{
	CAuditionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		pProfileInfo->SetAudition(AUDIO_NO_SOUND);
		pProfileInfo->SetAdapterInfo(EMPTYSTRING, AUDITIONINFO_DEFAULT_VOLUME, AUDITIONINFO_DEFAULT_PITCH, AUDITIONINFO_DEFAULT_PLAYBACKRATE);
	}
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_NONE, TRUE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_SPEAKER, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY), AUDIO_DEFAULTBEEPFREQUENCY);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT, TBM_SETPOS, TRUE, 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT, TBM_SETPOS, TRUE, 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE, TBM_SETPOS, TRUE, 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH, TBM_SETPOS, TRUE, 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_NONE)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_SPEAKER)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_BROWSE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE)->EnableWindow(((!IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->GetWindowTextLength() > 0) && !pProfileInfo) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CAuditionProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_AUDITIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsAuditionsPage::OnSpeakerSound()
{
	CAuditionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		pProfileInfo->SetAudition(AUDIO_STANDARD_SOUND);
		pProfileInfo->SetAdapterInfo(EMPTYSTRING, AUDITIONINFO_DEFAULT_VOLUME, AUDITIONINFO_DEFAULT_PITCH, AUDITIONINFO_DEFAULT_PLAYBACKRATE);
	}
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_NONE, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_SPEAKER, TRUE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY), AUDIO_DEFAULTBEEPFREQUENCY);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT, TBM_SETPOS, TRUE, 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT, TBM_SETPOS, TRUE, 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE, TBM_SETPOS, TRUE, 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH, TBM_SETPOS, TRUE, 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_NONE)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_SPEAKER)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP));
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP));
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_BROWSE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE)->EnableWindow(((!IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->GetWindowTextLength() > 0) && !pProfileInfo) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CAuditionProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_AUDITIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsAuditionsPage::OnBeepSound()
{
	DWORD  dwPitch;
	DWORD  dwVolume;
	DWORD  dwPlayback;
	DWORD  dwFeatures;
	CAudio  cAudioAdapter;
	CString  szAudioAdapter;
	CAuditionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		pProfileInfo->SetAudition(AUDIO_BEEP_SOUND);
		pProfileInfo->SetBeepSound(AUDIO_DEFAULTBEEPFREQUENCY);
		pProfileInfo->GetAdapterInfo(szAudioAdapter, dwVolume, dwPitch, dwPlayback);
		pProfileInfo->SetAdapterInfo(szAudioAdapter, (dwVolume = AUDITIONINFO_DEFAULT_VOLUME), (dwPitch = AUDITIONINFO_DEFAULT_PITCH), (dwPlayback = AUDITIONINFO_DEFAULT_PLAYBACKRATE));
	}
	else
	{
		dwPitch = AUDITIONINFO_DEFAULT_PITCH;
		dwVolume = AUDITIONINFO_DEFAULT_VOLUME;
		dwPlayback = AUDITIONINFO_DEFAULT_PLAYBACKRATE;
	}
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_NONE, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_SPEAKER, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP, TRUE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE, FALSE);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_SETCURSEL, max(SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szAudioAdapter), 0));
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY), ((dwFeatures = cAudioAdapter.EnumOutputDeviceFeatures((szAudioAdapter = Combobox_GetText(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER), (INT)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCURSEL))))) != 0 && pProfileInfo != (CAuditionProfileInfo *)NULL) ? pProfileInfo->GetBeepSound() : AUDIO_DEFAULTBEEPFREQUENCY);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? (LOWORD(dwVolume) * 100) / 0xFFFF : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? ((dwFeatures & WAVECAPS_LRVOLUME) ? ((HIWORD(dwVolume) * 100) / 0xFFFF) : ((LOWORD(dwVolume) * 100) / 0xFFFF)) : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PLAYBACKRATE)) ? ((dwPlayback <= AUDIO_DEFAULTPLAYBACKRATE) ? (DWORD)(50.0*((double)dwPlayback / (double)AUDIO_DEFAULTPLAYBACKRATE - (double)AUDIO_MINPLAYBACKRATE / (double)AUDIO_DEFAULTPLAYBACKRATE) / (1.0 - (double)AUDIO_MINPLAYBACKRATE / (double)AUDIO_DEFAULTPLAYBACKRATE)) : (DWORD)(50.0*(1.0 + ((double)dwPlayback / (double)AUDIO_DEFAULTPLAYBACKRATE - 1.0) / ((double)AUDIO_DEFAULTPLAYBACKRATE / (double)AUDIO_MINPLAYBACKRATE - 1.0)))) : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PITCH)) ? ((dwPitch <= AUDIO_DEFAULTPITCH) ? (DWORD)(50.0*((double)dwPitch / (double)AUDIO_DEFAULTPITCH - (double)AUDIO_MINPITCH / (double)AUDIO_DEFAULTPITCH) / (1.0 - (double)AUDIO_MINPITCH / (double)AUDIO_DEFAULTPITCH)) : (DWORD)(50.0*(1.0 + ((double)dwPitch / (double)AUDIO_DEFAULTPITCH - 1.0) / ((double)AUDIO_DEFAULTPITCH / (double)AUDIO_MINPITCH - 1.0)))) : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_NONE)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_SPEAKER)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP));
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP));
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PLAYBACKRATE)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PLAYBACKRATE)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PITCH)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PITCH)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_BROWSE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE)->EnableWindow(((!IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->GetWindowTextLength() > 0) && !pProfileInfo) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CAuditionProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_AUDITIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsAuditionsPage::OnWaveSound()
{
	DWORD  dwPitch;
	DWORD  dwVolume;
	DWORD  dwPlayback;
	DWORD  dwFeatures;
	CAudio  cAudioAdapter;
	CString  szAudioAdapter;
	CAuditionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		pProfileInfo->SetAudition(AUDIO_WAVE_SOUND);
		pProfileInfo->SetWaveSound(EMPTYSTRING);
		pProfileInfo->GetAdapterInfo(szAudioAdapter, dwVolume, dwPitch, dwPlayback);
		pProfileInfo->SetAdapterInfo(szAudioAdapter, (dwVolume = AUDITIONINFO_DEFAULT_VOLUME), (dwPitch = AUDITIONINFO_DEFAULT_PITCH), (dwPlayback = AUDITIONINFO_DEFAULT_PLAYBACKRATE));
	}
	else
	{
		dwPitch = AUDITIONINFO_DEFAULT_PITCH;
		dwVolume = AUDITIONINFO_DEFAULT_VOLUME;
		dwPlayback = AUDITIONINFO_DEFAULT_PLAYBACKRATE;
	}
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_NONE, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_SPEAKER, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE, TRUE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE, FALSE);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_SETCURSEL, max(SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szAudioAdapter), 0));
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY), ((dwFeatures = cAudioAdapter.EnumOutputDeviceFeatures((szAudioAdapter = Combobox_GetText(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER), (INT)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCURSEL))))) >= 0) ? AUDIO_DEFAULTBEEPFREQUENCY : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? (LOWORD(dwVolume) * 100) / 0xFFFF : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? ((dwFeatures & WAVECAPS_LRVOLUME) ? ((HIWORD(dwVolume) * 100) / 0xFFFF) : ((LOWORD(dwVolume) * 100) / 0xFFFF)) : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PLAYBACKRATE)) ? ((dwPlayback <= AUDIO_DEFAULTPLAYBACKRATE) ? (DWORD)(50.0*((double)dwPlayback / (double)AUDIO_DEFAULTPLAYBACKRATE - (double)AUDIO_MINPLAYBACKRATE / (double)AUDIO_DEFAULTPLAYBACKRATE) / (1.0 - (double)AUDIO_MINPLAYBACKRATE / (double)AUDIO_DEFAULTPLAYBACKRATE)) : (DWORD)(50.0*(1.0 + ((double)dwPlayback / (double)AUDIO_DEFAULTPLAYBACKRATE - 1.0) / ((double)AUDIO_DEFAULTPLAYBACKRATE / (double)AUDIO_MINPLAYBACKRATE - 1.0)))) : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PITCH)) ? ((dwPitch <= AUDIO_DEFAULTPITCH) ? (DWORD)(50.0*((double)dwPitch / (double)AUDIO_DEFAULTPITCH - (double)AUDIO_MINPITCH / (double)AUDIO_DEFAULTPITCH) / (1.0 - (double)AUDIO_MINPITCH / (double)AUDIO_DEFAULTPITCH)) : (DWORD)(50.0*(1.0 + ((double)dwPitch / (double)AUDIO_DEFAULTPITCH - 1.0) / ((double)AUDIO_DEFAULTPITCH / (double)AUDIO_MINPITCH - 1.0)))) : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_NONE)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_SPEAKER)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP));
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP));
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PLAYBACKRATE)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PLAYBACKRATE)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PITCH)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PITCH)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE));
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE)->EnableWindow(((!IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->GetWindowTextLength() > 0) && !pProfileInfo) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CAuditionProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_AUDITIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsAuditionsPage::OnVoiceSound()
{
	DWORD  dwPitch;
	DWORD  dwVolume;
	DWORD  dwPlayback;
	DWORD  dwFeatures;
	CAudio  cAudioAdapter;
	CString  szAudioAdapter;
	CAuditionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		pProfileInfo->SetAudition(AUDIO_VOICE_SOUND);
		pProfileInfo->SetVoiceSound(EMPTYSTRING, AUDIO_VOICEGENDER_MALE, AUDIO_VOICEAGE_ADULT);
		pProfileInfo->GetAdapterInfo(szAudioAdapter, dwVolume, dwPitch, dwPlayback);
		pProfileInfo->SetAdapterInfo(szAudioAdapter, (dwVolume = AUDITIONINFO_DEFAULT_VOLUME), (dwPitch = AUDITIONINFO_DEFAULT_PITCH), (dwPlayback = AUDITIONINFO_DEFAULT_PLAYBACKRATE));
	}
	else
	{
		dwPitch = AUDITIONINFO_DEFAULT_PITCH;
		dwVolume = AUDITIONINFO_DEFAULT_VOLUME;
		dwPlayback = AUDITIONINFO_DEFAULT_PLAYBACKRATE;
	}
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_NONE, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_SPEAKER, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE, FALSE);
	CheckDlgButton(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE, TRUE);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_SETCURSEL, max(SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szAudioAdapter), 0));
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY), ((dwFeatures = cAudioAdapter.EnumOutputDeviceFeatures((szAudioAdapter = Combobox_GetText(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER), (INT)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCURSEL)))) | WAVECAPS_PLAYBACKRATE | WAVECAPS_PITCH) >= 0) ? AUDIO_DEFAULTBEEPFREQUENCY : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? (LOWORD(dwVolume) * 100) / 0xFFFF : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? ((dwFeatures & WAVECAPS_LRVOLUME) ? ((HIWORD(dwVolume) * 100) / 0xFFFF) : ((LOWORD(dwVolume) * 100) / 0xFFFF)) : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PLAYBACKRATE)) ? ((dwPlayback <= AUDIO_DEFAULTPLAYBACKRATE) ? (DWORD)(50.0*((double)dwPlayback / (double)AUDIO_DEFAULTPLAYBACKRATE - (double)AUDIO_MINPLAYBACKRATE / (double)AUDIO_DEFAULTPLAYBACKRATE) / (1.0 - (double)AUDIO_MINPLAYBACKRATE / (double)AUDIO_DEFAULTPLAYBACKRATE)) : (DWORD)(50.0*(1.0 + ((double)dwPlayback / (double)AUDIO_DEFAULTPLAYBACKRATE - 1.0) / ((double)AUDIO_DEFAULTPLAYBACKRATE / (double)AUDIO_MINPLAYBACKRATE - 1.0)))) : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH, TBM_SETPOS, TRUE, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PITCH)) ? ((dwPitch <= AUDIO_DEFAULTPITCH) ? (DWORD)(50.0*((double)dwPitch / (double)AUDIO_DEFAULTPITCH - (double)AUDIO_MINPITCH / (double)AUDIO_DEFAULTPITCH) / (1.0 - (double)AUDIO_MINPITCH / (double)AUDIO_DEFAULTPITCH)) : (DWORD)(50.0*(1.0 + ((double)dwPitch / (double)AUDIO_DEFAULTPITCH - 1.0) / ((double)AUDIO_DEFAULTPITCH / (double)AUDIO_MINPITCH - 1.0)))) : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER, CB_SETCURSEL, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? AUDIO_VOICEGENDER_MALE : (WPARAM)-1);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE, CB_SETCURSEL, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? AUDIO_VOICEAGE_ADULT : (WPARAM)-1);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER, CB_SETCURSEL, (SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && EnumVoiceSpeakers(AUDIO_VOICEGENDER_MALE, AUDIO_VOICEAGE_ADULT)) ? 0 : (WPARAM)-1);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_NONE)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_SPEAKER)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP));
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP));
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_VOLUME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PLAYBACKRATE)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PLAYBACKRATE)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PITCH)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCOUNT) > 0 && (dwFeatures & WAVECAPS_PITCH)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_BROWSE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE)->EnableWindow(((!IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->GetWindowTextLength() > 0) && !pProfileInfo) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CAuditionProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_AUDITIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsAuditionsPage::OnSelchangeAdapter()
{
	DWORD  dwPitch;
	DWORD  dwVolume;
	DWORD  dwPlayback;
	DWORD  dwFeatures;
	CAudio  cAudioAdapter;
	CString  szAdapter[2];
	CAuditionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER)->GetWindowText(szAdapter[0]);
		pProfileInfo->GetAdapterInfo(szAdapter[1], dwVolume, dwPitch, dwPlayback);
		pProfileInfo->SetAdapterInfo(szAdapter[0], dwVolume, dwPitch, dwPlayback);
	}
	szAdapter[0] = Combobox_GetText(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER), (INT)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_ADAPTER, CB_GETCURSEL));
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT, TBM_SETPOS, TRUE, ((IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)) && ((dwFeatures = (IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)) ? (cAudioAdapter.EnumOutputDeviceFeatures(szAdapter[0]) | WAVECAPS_PLAYBACKRATE | WAVECAPS_PITCH) : cAudioAdapter.EnumOutputDeviceFeatures(szAdapter[0])) & WAVECAPS_VOLUME)) ? ((LOWORD(dwVolume) * 100) / 0xFFFF) : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT, TBM_SETPOS, TRUE, ((IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)) && (dwFeatures & WAVECAPS_VOLUME)) ? ((dwFeatures & WAVECAPS_LRVOLUME) ? ((HIWORD(dwVolume) * 100) / 0xFFFF) : ((LOWORD(dwVolume) * 100) / 0xFFFF)) : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE, TBM_SETPOS, TRUE, ((IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)) && (dwFeatures & WAVECAPS_PLAYBACKRATE)) ? ((HIWORD(dwPlayback) > 0) ? (49 + HIWORD(dwPlayback)) : ((50 * LOWORD(dwPlayback)) / 0x10000)) : 0);
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH, TBM_SETPOS, TRUE, ((IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)) && (dwFeatures & WAVECAPS_PITCH)) ? ((HIWORD(dwPitch) > 0) ? (49 + HIWORD(dwPitch)) : ((50 * LOWORD(dwPitch)) / 0x10000)) : 0);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME)->EnableWindow(((IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)) && (dwFeatures & WAVECAPS_VOLUME)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT_STATIC)->EnableWindow(((IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)) && (dwFeatures & WAVECAPS_VOLUME)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_LEFT)->EnableWindow(((IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)) && (dwFeatures & WAVECAPS_VOLUME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT_STATIC)->EnableWindow(((IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)) && (dwFeatures & WAVECAPS_VOLUME)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOLUME_RIGHT)->EnableWindow(((IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)) && (dwFeatures & WAVECAPS_VOLUME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE_STATIC)->EnableWindow(((IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)) && (dwFeatures & WAVECAPS_PLAYBACKRATE)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PLAYBACKRATE)->EnableWindow(((IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)) && (dwFeatures & WAVECAPS_PLAYBACKRATE)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH_STATIC)->EnableWindow(((IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)) && (dwFeatures & WAVECAPS_PITCH)) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_PITCH)->EnableWindow(((IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEP) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_VOICE)) && (dwFeatures & WAVECAPS_PITCH)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE)->EnableWindow(((!IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->GetWindowTextLength() > 0) && !pProfileInfo) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CAuditionProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_AUDITIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsAuditionsPage::OnSpinchangeFrequency()
{
	CAuditionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo())) pProfileInfo->SetBeepSound((DWORD)Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_BEEPFREQUENCY)));
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE)->EnableWindow(((!IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->GetWindowTextLength() > 0) && !pProfileInfo) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CAuditionProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_AUDITIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsAuditionsPage::OnEditchangeWave()
{
	CString  szFileName;
	CAuditionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->GetWindowText(szFileName);
		pProfileInfo->SetWaveSound(szFileName);
	}
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE)->EnableWindow(((!IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->GetWindowTextLength() > 0) && !pProfileInfo) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CAuditionProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_AUDITIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsAuditionsPage::OnBrowseWave()
{
	TCHAR  szDir[MAX_PATH];
	TCHAR  szFileName[MAX_PATH];
	CString  szSoundFileName[2];
	CString  szSoundDirectory;
	CAuditionProfileInfo  *pProfileInfo;
	CFileBrowseDialog  cFileBrowseDialog(this, (LPCTSTR)NULL, STRING(IDS_FILEBROWSEDIALOG_WAVEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_WAVEFILEFILTER));

	GetWindowsDirectory(szDir, sizeof(szDir) / sizeof(TCHAR));
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->GetWindowText(szSoundFileName[0]);
	for (cFileBrowseDialog.m_ofn.lpstrInitialDir = (FindDefaultSoundPath(szDir, szSoundDirectory)) ? (LPCTSTR)szSoundDirectory : (LPCTSTR)NULL, _tcscpy_s((cFileBrowseDialog.m_ofn.lpstrFile = szFileName), sizeof(szFileName) / sizeof(TCHAR), szSoundFileName[0]); cFileBrowseDialog.DoModal() == IDOK; )
	{
		if ((pProfileInfo = FindProfileInfo()) != (CAuditionProfileInfo *)NULL)
		{
			szSoundFileName[1] = cFileBrowseDialog.GetPathName();
			pProfileInfo->SetWaveSound(szSoundFileName[1]);
		}
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
		break;
	}
	SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_ADDPROFILE)->EnableWindow(((!IsDlgButtonChecked(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SOUND_WAVE) || GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->GetWindowTextLength() > 0) && !FindProfileInfo()) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEPROFILE)->EnableWindow(((pProfileInfo = FindProfileInfo()) != (CAuditionProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_AUDITIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_WAVE_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsAuditionsPage::OnSelchangeVoiceGender()
{
	WORD  wVoice[2];
	CString  szVoiceSpeaker;
	CAuditionProfileInfo  *pProfileInfo;

	for (EnumVoiceSpeakers((wVoice[0] = (WORD)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER, CB_GETCURSEL)), (wVoice[1] = (WORD)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE, CB_GETCURSEL))); (pProfileInfo = FindProfileInfo()) != (CAuditionProfileInfo *)NULL; )
	{
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER)->GetWindowText(szVoiceSpeaker);
		pProfileInfo->SetVoiceSound(szVoiceSpeaker, wVoice[0], wVoice[1]);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsAuditionsPage::OnSelchangeVoiceAge()
{
	WORD  wVoice[2];
	CString  szVoiceSpeaker;
	CAuditionProfileInfo  *pProfileInfo;

	for (EnumVoiceSpeakers((wVoice[0] = (WORD)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_GENDER, CB_GETCURSEL)), (wVoice[1] = (WORD)SendDlgItemMessage(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_AGE, CB_GETCURSEL))); (pProfileInfo = FindProfileInfo()) != (CAuditionProfileInfo *)NULL; )
	{
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER)->GetWindowText(szVoiceSpeaker);
		pProfileInfo->SetVoiceSound(szVoiceSpeaker, wVoice[0], wVoice[1]);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsAuditionsPage::OnSelchangeVoiceSpeaker()
{
	WORD  wVoice[2];
	CString  szVoiceSpeaker[2];
	CAuditionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		GetDlgItem(IDC_SETTINGS_AUDITIONSPAGE_PROPERTIES_SETTINGS_VOICE_SPEAKER)->GetWindowText(szVoiceSpeaker[0]);
		pProfileInfo->GetVoiceSound(szVoiceSpeaker[1], wVoice[0], wVoice[1]);
		pProfileInfo->SetVoiceSound(szVoiceSpeaker[0], wVoice[0], wVoice[1]);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsEMailDialog dialog

IMPLEMENT_DYNCREATE(CSettingsNotificationsEMailDialog, CLocaleDialog)

CSettingsNotificationsEMailDialog::CSettingsNotificationsEMailDialog(CWnd *pParentWnd) : CLocaleDialog(CSettingsNotificationsEMailDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CSettingsNotificationsEMailDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CSettingsNotificationsEMailDialog::SetDetails(CONST CNotificationProfileInfo *pProfileInfo)
{
	m_cProfileInfo[0].Copy(pProfileInfo);
	m_cProfileInfo[1].Copy(pProfileInfo);
}

VOID CSettingsNotificationsEMailDialog::GetDetails(CNotificationProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cProfileInfo[0]);
}

BOOL CSettingsNotificationsEMailDialog::EnumMailAttachments()
{
	INT  nAttachment;
	INT  nAttachments;
	CStringArray  szAttachments;

	for (nAttachment = 0, nAttachments = m_cProfileInfo[0].GetAttachments(szAttachments); nAttachment < nAttachments; nAttachment++)
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szAttachments.GetAt(nAttachment));
	}
	SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST, LB_SETCURSEL);
	return((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CSettingsNotificationsEMailDialog::EnumMailPriorities()
{
	INT  nPriority;
	INT  nPriorities;

	for (nPriority = 0, nPriorities = MAXSETTINGSNOTIFICATIONEMAILPRIORITY - MINSETTINGSNOTIFICATIONEMAILPRIORITY; nPriority <= nPriorities; nPriority++)
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_PRIORITY, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(MINSETTINGSNOTIFICATIONEMAILPRIORITY + nPriority));
	}
	SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_PRIORITY, CB_SETCURSEL, max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_PRIORITY, CB_FINDSTRINGEXACT, (WPARAM)-1, ((m_cProfileInfo[0].GetPriority() == NOTIFICATIONINFO_PRIORITY_LOW) ? (LPARAM)STRING(IDS_SETTINGS_NOTIFICATIONSDIALOG_EMAIL_LOWPRIORITY) : ((m_cProfileInfo[0].GetPriority() == NOTIFICATIONINFO_PRIORITY_NORMAL) ? (LPARAM)STRING(IDS_SETTINGS_NOTIFICATIONSDIALOG_EMAIL_NORMALPRIORITY) : ((m_cProfileInfo[0].GetPriority() == NOTIFICATIONINFO_PRIORITY_HIGH) ? (LPARAM)STRING(IDS_SETTINGS_NOTIFICATIONSDIALOG_EMAIL_HIGHPRIORITY) : (LPARAM)STRING(IDS_SETTINGS_NOTIFICATIONSDIALOG_EMAIL_DEFAULTPRIORITY))))), 0));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_PRIORITY_STATIC)->EnableWindow(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_PRIORITY, CB_GETCOUNT) > 0);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_PRIORITY)->EnableWindow(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_PRIORITY, CB_GETCOUNT) > 0);
	return((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_PRIORITY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CSettingsNotificationsEMailDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT, (bCheck = CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE)));
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_PRIORITY, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_NUMBER, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_MINUTES_NUMBER, bCheck);
}

BOOL CSettingsNotificationsEMailDialog::IsModified() CONST
{
	return((!m_cProfileInfo[0].Compare(&m_cProfileInfo[1])) ? TRUE : FALSE);
}

void CSettingsNotificationsEMailDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CSettingsNotificationsEMailDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CSettingsNotificationsEMailDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CSettingsNotificationsEMailDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_ADD, OnAddAttachment)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_REMOVE, OnRemoveAttachment)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_BROWSE, OnBrowseAttachment)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY, OnRetryNotification)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_HELP, OnHelp)
	ON_EN_CHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT, OnEditchangeAttachment)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_PRIORITY, OnSelchangePriority)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_NUMBER, OnSpinchangeRetryCount)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_MINUTES_NUMBER, OnSpinchangeRetryInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsEMailDialog message handlers

BOOL CSettingsNotificationsEMailDialog::OnInitDialog()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
	CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY, (nCount > 0) ? TRUE : FALSE);
	Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_NUMBER), NOTIFICATIONS_EMAIL_MINIMUMRETRIES, NOTIFICATIONS_EMAIL_MAXIMUMRETRIES);
	Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_MINUTES_NUMBER), NOTIFICATIONS_EMAIL_MINIMUMRETRYINTERVAL, NOTIFICATIONS_EMAIL_MAXIMUMRETRYINTERVAL);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_MINUTES_NUMBER), tInterval[0].GetTotalMinutes());
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_NUMBER), nCount);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_DETAILS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST)->EnableWindow(EnumMailAttachments());
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_ADD)->EnableWindow((GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT)->GetWindowTextLength() > 0) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST, LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_MINUTES_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY));
	EnumMailPriorities();
	AdjustToPrivileges();
	return TRUE;
}

void CSettingsNotificationsEMailDialog::OnAddAttachment()
{
	INT  nIndex;
	CString  szFileName;
	CStringArray  szAttachments;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT)->GetWindowText(szFileName);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName)) >= 0)
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST, LB_SETCURSEL, nIndex);
		m_cProfileInfo[0].GetAttachments(szAttachments);
		szAttachments.InsertAt(nIndex, szFileName);
		m_cProfileInfo[0].SetAttachments(szAttachments);
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsEMailDialog::OnRemoveAttachment()
{
	INT  nIndex;
	CStringArray  szAttachments;
	CHourglassCursor  cCursor;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST, LB_GETCURSEL)) >= 0 && nIndex < m_cProfileInfo[0].GetAttachments(szAttachments))
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST, LB_DELETESTRING, nIndex);
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST, LB_SETCURSEL);
		szAttachments.RemoveAt(nIndex, 1);
		m_cProfileInfo[0].SetAttachments(szAttachments);
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsEMailDialog::OnBrowseAttachment()
{
	CString  szFileName;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT, STRING(IDS_FILEBROWSEDIALOG_TEXTFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TEXTFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT)->SetWindowText(cFileBrowseDialog.GetPathName());
	}
	SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT)->GetWindowText(szFileName);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_ADD)->EnableWindow((!szFileName.IsEmpty()) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_LIST, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsEMailDialog::OnRetryNotification()
{
	m_cProfileInfo[0].SetBehaviorInfo((IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY)) ? NOTIFICATIONS_EMAIL_DEFAULTRETRIES : 0, (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY)) ? (SECONDSPERMINUTE*NOTIFICATIONS_EMAIL_DEFAULTRETRYINTERVAL) : 0, 0);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_NUMBER), NOTIFICATIONS_EMAIL_DEFAULTRETRIES);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_MINUTES_NUMBER), NOTIFICATIONS_EMAIL_DEFAULTRETRYINTERVAL);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_MINUTES_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsEMailDialog::OnEditchangeAttachment()
{
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT_ADD)->EnableWindow((GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_ATTACHMENT)->GetWindowTextLength() > 0) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
}

void CSettingsNotificationsEMailDialog::OnSelchangePriority()
{
	CString  szPriority;

	m_cProfileInfo[0].SetPriority(((szPriority = Combobox_GetText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_PRIORITY), (INT)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_PRIORITY, CB_GETCURSEL))) == STRING(IDS_SETTINGS_NOTIFICATIONSDIALOG_EMAIL_LOWPRIORITY)) ? NOTIFICATIONINFO_PRIORITY_LOW : ((szPriority == STRING(IDS_SETTINGS_NOTIFICATIONSDIALOG_EMAIL_NORMALPRIORITY)) ? NOTIFICATIONINFO_PRIORITY_NORMAL : ((szPriority == STRING(IDS_SETTINGS_NOTIFICATIONSDIALOG_EMAIL_HIGHPRIORITY)) ? NOTIFICATIONINFO_PRIORITY_HIGH : NOTIFICATIONINFO_PRIORITY_DEFAULT)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsEMailDialog::OnSpinchangeRetryCount()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];

	m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
	m_cProfileInfo[0].SetBehaviorInfo((UINT)Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_NUMBER)), tInterval[0], tInterval[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsEMailDialog::OnSpinchangeRetryInterval()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];

	m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
	m_cProfileInfo[0].SetBehaviorInfo(nCount, SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_EMAIL_BEHAVIOR_RETRY_MINUTES_NUMBER)), tInterval[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsEMailDialog::OnOK()
{
	CHourglassCursor  cCursor;

	EndDialog(IDOK);
}

BOOL CSettingsNotificationsEMailDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSNOTIFICATIONSEMAILDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CSettingsNotificationsEMailDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSNOTIFICATIONSEMAILDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsFAXDialog dialog

IMPLEMENT_DYNCREATE(CSettingsNotificationsFAXDialog, CLocaleDialog)

CSettingsNotificationsFAXDialog::CSettingsNotificationsFAXDialog(CWnd *pParentWnd) : CLocaleDialog(CSettingsNotificationsFAXDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CSettingsNotificationsFAXDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CSettingsNotificationsFAXDialog::SetDetails(CONST CNotificationProfileInfo *pProfileInfo)
{
	m_cProfileInfo[0].Copy(pProfileInfo);
	m_cProfileInfo[1].Copy(pProfileInfo);
}

VOID CSettingsNotificationsFAXDialog::GetDetails(CNotificationProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cProfileInfo[0]);
}

BOOL CSettingsNotificationsFAXDialog::EnumFontAreaLocations()
{
	m_cProfileInfo[0].GetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
	return((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_PROLOGFONTTYPE)) >= 0 && SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_MESSAGEFONTTYPE)) >= 0 && SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_EPILOGFONTTYPE)) >= 0) ? TRUE : FALSE);
}

VOID CSettingsNotificationsFAXDialog::ShowFontDetails()
{
	INT  nSize;
	INT  nSizes;
	INT  nStyle;
	INT  nStyles;
	BOOL  bUnderlined;
	CString  szFontArea;
	CStringArray  szSizes;
	CStringArray  szStyles;
	CStringTools  cStringTools;
	CFontTools  cFontTools;

	for (SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, CB_RESETCONTENT), SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, CB_RESETCONTENT), GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA)->GetWindowText(szFontArea); (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_PROLOGFONTTYPE) && cFontTools.EnumerateFont(m_lfFonts[0].lfFaceName, szStyles, szSizes, bUnderlined)) || (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_MESSAGEFONTTYPE) && cFontTools.EnumerateFont(m_lfFonts[1].lfFaceName, szStyles, szSizes, bUnderlined)) || (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_EPILOGFONTTYPE) && cFontTools.EnumerateFont(m_lfFonts[2].lfFaceName, szStyles, szSizes, bUnderlined)); )
	{
		for (nStyle = 0, nStyles = (INT)szStyles.GetSize(); nStyle < nStyles; nStyle++) SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szStyles.GetAt(nStyle));
		for (nSize = 0, nSizes = (INT)szSizes.GetSize(); nSize < nSizes; nSize++) SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSizes.GetAt(nSize));
		break;
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_PROLOGFONTTYPE))
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontStyle(&m_lfFonts[0])), 0));
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_lfFonts[0])), 0));
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nFontColors[0]);
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_MESSAGEFONTTYPE))
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontStyle(&m_lfFonts[1])), 0));
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_lfFonts[1])), 0));
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nFontColors[1]);
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_EPILOGFONTTYPE))
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontStyle(&m_lfFonts[2])), 0));
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_lfFonts[2])), 0));
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nFontColors[2]);
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSAMPLE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSAMPLE_AREA)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CSettingsNotificationsFAXDialog::ShowFontSample()
{
	CRect  rSampleText;

	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSAMPLE_AREA)->GetWindowRect(rSampleText);
	ScreenToClient(rSampleText);
	InvalidateRect(rSampleText);
	UpdateWindow();
}

VOID CSettingsNotificationsFAXDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME, (bCheck = CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE)));
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_NUMBER, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_MINUTES_NUMBER, bCheck);
}

BOOL CSettingsNotificationsFAXDialog::IsModified() CONST
{
	return((!m_cProfileInfo[0].Compare(&m_cProfileInfo[1])) ? TRUE : FALSE);
}

BOOL CSettingsNotificationsFAXDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME)->GetWindowTextLength() >= 0 && GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE)->GetWindowTextLength() > 0 && GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE)->GetWindowTextLength() > 0) ? (!bModified || IsModified()) : FALSE);
}

void CSettingsNotificationsFAXDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CSettingsNotificationsFAXDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CSettingsNotificationsFAXDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CSettingsNotificationsFAXDialog)
	ON_WM_PAINT()
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY, OnRetryNotification)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME, OnEditchangeFontName)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA, OnSelchangeFontArea)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME, OnSelchangeFontName)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE, OnSelchangeFontStyle)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE, OnSelchangeFontSize)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR, OnSelchangeFontColor)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_NUMBER, OnSpinchangeRetryCount)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_MINUTES_NUMBER, OnSpinchangeRetryInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsFAXDialog message handlers

BOOL CSettingsNotificationsFAXDialog::OnInitDialog()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	if (EnumFontAreaLocations())
	{
		m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA, CB_SETCURSEL, 0);
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME, FCB_DIR, CF_EFFECTS | CF_SCREENFONTS);
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)m_lfFonts[0].lfFaceName));
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nFontColors[0]);
		Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_NUMBER), NOTIFICATIONS_FAX_MINIMUMRETRIES, NOTIFICATIONS_FAX_MAXIMUMRETRIES);
		Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_MINUTES_NUMBER), NOTIFICATIONS_FAX_MINIMUMRETRYINTERVAL, NOTIFICATIONS_FAX_MAXIMUMRETRYINTERVAL);
		Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_MINUTES_NUMBER), tInterval[0].GetTotalMinutes());
		Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_NUMBER), nCount);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY, (nCount > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSAMPLE_AREA)->GetWindowText(m_szFontSampleText);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_DETAILS)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA_PROLOG_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA_EPILOG_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSAMPLE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_MINUTES_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY));
		ShowFontDetails();
	}
	AdjustToPrivileges();
	return TRUE;
}

void CSettingsNotificationsFAXDialog::OnPaint()
{
	INT  nBkMode;
	CFont  cFont;
	CFont  *pOldFont;
	CRect  rSampleText;
	CString  szFontArea;
	COLORREF  nOldColor;
	CPaintDC  cDC(this);

	for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSAMPLE_AREA)->GetWindowRect(rSampleText), GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA)->GetWindowText(szFontArea), ScreenToClient(rSampleText); cFont.CreateFontIndirect((szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_PROLOGFONTTYPE)) ? &m_lfFonts[0] : ((szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_MESSAGEFONTTYPE)) ? &m_lfFonts[1] : &m_lfFonts[2])); )
	{
		if ((pOldFont = cDC.SelectObject(&cFont)))
		{
			nBkMode = cDC.SetBkMode(TRANSPARENT);
			nOldColor = cDC.SetTextColor((szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_PROLOGFONTTYPE)) ? m_nFontColors[0] : ((szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_MESSAGEFONTTYPE)) ? m_nFontColors[1] : m_nFontColors[2]));
			cDC.DrawText(m_szFontSampleText, rSampleText, DT_SINGLELINE | DT_CENTER | DT_VCENTER);
			cDC.SetTextColor(nOldColor);
			cDC.SelectObject(pOldFont);
			cDC.SetBkMode(nBkMode);
			ValidateRect(rSampleText);
		}
		cFont.DeleteObject();
		break;
	}
}

void CSettingsNotificationsFAXDialog::OnRetryNotification()
{
	m_cProfileInfo[0].SetBehaviorInfo((IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY)) ? NOTIFICATIONS_FAX_DEFAULTRETRIES : 0, (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY)) ? (SECONDSPERMINUTE*NOTIFICATIONS_FAX_DEFAULTRETRYINTERVAL) : 0, 0);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_NUMBER), NOTIFICATIONS_FAX_DEFAULTRETRIES);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_MINUTES_NUMBER), NOTIFICATIONS_FAX_DEFAULTRETRYINTERVAL);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_MINUTES_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFAXDialog::OnEditchangeFontName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFAXDialog::OnSelchangeFontArea()
{
	CString  szFontArea;

	for (szFontArea = Combobox_GetText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA), (INT)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA, CB_GETCURSEL)); szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_PROLOGFONTTYPE); )
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)m_lfFonts[0].lfFaceName));
		break;
	}
	for (; szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_MESSAGEFONTTYPE); )
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)m_lfFonts[1].lfFaceName));
		break;
	}
	for (; szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_EPILOGFONTTYPE); )
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)m_lfFonts[2].lfFaceName));
		break;
	}
	ShowFontDetails();
	ShowFontSample();
}

void CSettingsNotificationsFAXDialog::OnSelchangeFontName()
{
	CString  szSize;
	CString  szStyle;
	CString  szFontArea;
	CFontTools  cFontTools;

	for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA)->GetWindowText(szFontArea); szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_PROLOGFONTTYPE); )
	{
		_tcscpy_s(m_lfFonts[0].lfFaceName, sizeof(m_lfFonts[0].lfFaceName) / sizeof(TCHAR), Combobox_GetText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME), (INT)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME, CB_GETCURSEL)));
		ShowFontDetails();
		break;
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_MESSAGEFONTTYPE))
	{
		_tcscpy_s(m_lfFonts[1].lfFaceName, sizeof(m_lfFonts[1].lfFaceName) / sizeof(TCHAR), Combobox_GetText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME), (INT)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME, CB_GETCURSEL)));
		ShowFontDetails();
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_EPILOGFONTTYPE))
	{
		_tcscpy_s(m_lfFonts[2].lfFaceName, sizeof(m_lfFonts[2].lfFaceName) / sizeof(TCHAR), Combobox_GetText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME), (INT)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTNAME, CB_GETCURSEL)));
		ShowFontDetails();
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_PROLOGFONTTYPE))
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfFonts[0].lfWeight, m_lfFonts[0].lfItalic);
		cFontTools.TranslateFontSize(szSize, m_lfFonts[0].lfHeight);
		cFontTools.EnumerateFontCharacteristics(&m_lfFonts[0]);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_MESSAGEFONTTYPE))
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfFonts[1].lfWeight, m_lfFonts[1].lfItalic);
		cFontTools.TranslateFontSize(szSize, m_lfFonts[1].lfHeight);
		cFontTools.EnumerateFontCharacteristics(&m_lfFonts[1]);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_EPILOGFONTTYPE))
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfFonts[2].lfWeight, m_lfFonts[2].lfItalic);
		cFontTools.TranslateFontSize(szSize, m_lfFonts[2].lfHeight);
		cFontTools.EnumerateFontCharacteristics(&m_lfFonts[2]);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
	}
	ShowFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFAXDialog::OnSelchangeFontStyle()
{
	CString  szStyle;
	CString  szFontArea;
	CFontTools  cFontTools;

	for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA)->GetWindowText(szFontArea); szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_PROLOGFONTTYPE); )
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfFonts[0].lfWeight, m_lfFonts[0].lfItalic);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
		break;
	}
	for (; szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_MESSAGEFONTTYPE); )
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfFonts[1].lfWeight, m_lfFonts[1].lfItalic);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
		break;
	}
	for (; szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_EPILOGFONTTYPE); )
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSTYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfFonts[2].lfWeight, m_lfFonts[2].lfItalic);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
		break;
	}
	ShowFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFAXDialog::OnSelchangeFontSize()
{
	CString  szSize;
	CString  szFontArea;
	CFontTools  cFontTools;

	for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA)->GetWindowText(szFontArea); szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_PROLOGFONTTYPE); )
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, m_lfFonts[0].lfHeight);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
		break;
	}
	for (; szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_MESSAGEFONTTYPE); )
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, m_lfFonts[1].lfHeight);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
		break;
	}
	for (; szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_EPILOGFONTTYPE); )
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTSIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, m_lfFonts[2].lfHeight);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
		break;
	}
	ShowFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFAXDialog::OnSelchangeFontColor()
{
	CString  szFontArea;

	for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTAREA)->GetWindowText(szFontArea); szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_PROLOGFONTTYPE); )
	{
		m_nFontColors[0] = (COLORREF)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR, CB_GETCURSEL));
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
		break;
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_MESSAGEFONTTYPE))
	{
		m_nFontColors[1] = (COLORREF)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR, CB_GETCURSEL));
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_EPILOGFONTTYPE))
	{
		m_nFontColors[2] = (COLORREF)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_FONTCOLOR, CB_GETCURSEL));
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
	}
	ShowFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFAXDialog::OnSpinchangeRetryCount()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];

	m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
	m_cProfileInfo[0].SetBehaviorInfo((UINT)Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_NUMBER)), tInterval[0], tInterval[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFAXDialog::OnSpinchangeRetryInterval()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];

	m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
	m_cProfileInfo[0].SetBehaviorInfo(nCount, SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FAX_BEHAVIOR_RETRY_MINUTES_NUMBER)), tInterval[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFAXDialog::OnOK()
{
	CHourglassCursor  cCursor;

	EndDialog(IDOK);
}

BOOL CSettingsNotificationsFAXDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSNOTIFICATIONSFAXDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CSettingsNotificationsFAXDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSNOTIFICATIONSFAXDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsPhoneCallDialog dialog

IMPLEMENT_DYNCREATE(CSettingsNotificationsPhoneCallDialog, CLocaleDialog)

CSettingsNotificationsPhoneCallDialog::CSettingsNotificationsPhoneCallDialog(CWnd *pParentWnd) : CLocaleDialog(CSettingsNotificationsPhoneCallDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CSettingsNotificationsPhoneCallDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CSettingsNotificationsPhoneCallDialog::SetDetails(CONST CNotificationProfileInfo *pProfileInfo)
{
	m_cProfileInfo[0].Copy(pProfileInfo);
	m_cProfileInfo[1].Copy(pProfileInfo);
}

VOID CSettingsNotificationsPhoneCallDialog::GetDetails(CNotificationProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cProfileInfo[0]);
}

BOOL CSettingsNotificationsPhoneCallDialog::EnumModems()
{
	INT  nDevice;
	INT  nDevices;
	DWORD  dwDevices;
	DWORD  cbDevicesInfo;
	RASDEVINFO  *pDevicesInfo;

	SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_MODEM, CB_RESETCONTENT);
	RasEnumDevices((LPRASDEVINFO)NULL, &(cbDevicesInfo = 0), &(dwDevices = 0));
	if ((pDevicesInfo = (LPRASDEVINFO)GlobalAlloc(GPTR, cbDevicesInfo)))
	{
		pDevicesInfo->dwSize = (dwDevices > 0) ? sizeof(RASDEVINFO) : 0;
		if (RasEnumDevices(pDevicesInfo, &cbDevicesInfo, &dwDevices) == 0)
		{
			for (nDevice = 0, nDevices = dwDevices; nDevice < nDevices; nDevice++)
			{
				if (!_tcsicmp(pDevicesInfo[nDevice].szDeviceType, RASDT_Modem) || !_tcsicmp(pDevicesInfo[nDevice].szDeviceType, RASDT_Isdn) || !_tcsicmp(pDevicesInfo[nDevice].szDeviceType, RASDT_X25))
				{
					if (SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_MODEM, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDevicesInfo[nDevice].szDeviceName) == CB_ERR)
					{
						SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_MODEM, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pDevicesInfo[nDevice].szDeviceName);
						continue;
					}
				}
			}
		}
		GlobalFree(pDevicesInfo);
	}
	return((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_MODEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CSettingsNotificationsPhoneCallDialog::EnumVoiceGenders()
{
	INT  nGender;
	INT  nGenders;
	CAudio  cAudio;
	CStringArray  szVoiceGenders;

	for (nGender = 0, nGenders = cAudio.EnumVoiceGenders(szVoiceGenders); nGender < nGenders; nGender++)
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_GENDER, CB_INSERTSTRING, nGender, (LPARAM)(LPCTSTR)szVoiceGenders.GetAt(nGender));
		continue;
	}
	return((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_GENDER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CSettingsNotificationsPhoneCallDialog::EnumVoiceAges()
{
	INT  nAge;
	INT  nAges;
	CAudio  cAudio;
	CStringArray  szVoiceAges;

	for (nAge = 0, nAges = cAudio.EnumVoiceAges(szVoiceAges); nAge < nAges; nAge++)
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_AGE, CB_INSERTSTRING, nAge, (LPARAM)(LPCTSTR)szVoiceAges.GetAt(nAge));
		continue;
	}
	return((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_AGE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CSettingsNotificationsPhoneCallDialog::EnumVoiceSpeakers(WORD wGender, WORD wAge)
{
	INT  nVoice;
	INT  nVoices;
	CStringArray  szVoices;
	CAudio  cAudio;

	for (nVoice = 0, nVoices = cAudio.EnumVoices(szVoices, wGender, wAge), SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_SPEAKER, CB_RESETCONTENT); nVoice < nVoices; nVoice++)
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_SPEAKER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szVoices.GetAt(nVoice));
		continue;
	}
	SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_SPEAKER, CB_SETCURSEL);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_SPEAKER_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_SPEAKER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_SPEAKER)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_SPEAKER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((nVoices >= 0) ? TRUE : FALSE);
}

VOID CSettingsNotificationsPhoneCallDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_MODEM, (bCheck = CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE)));
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_CONVERSATION, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_GENDER, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_AGE, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_SPEAKER, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_NUMBER, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_MINUTES_NUMBER, bCheck);
}

BOOL CSettingsNotificationsPhoneCallDialog::IsModified() CONST
{
	return((!m_cProfileInfo[0].Compare(&m_cProfileInfo[1])) ? TRUE : FALSE);
}

void CSettingsNotificationsPhoneCallDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CSettingsNotificationsPhoneCallDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CSettingsNotificationsPhoneCallDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CSettingsNotificationsPhoneCallDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_CONVERSATION, OnConversation)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY, OnRetryNotification)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_MODEM, OnSelchangeModem)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_GENDER, OnSelchangeVoiceGender)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_AGE, OnSelchangeVoiceAge)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_SPEAKER, OnSelchangeVoiceSpeaker)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_NUMBER, OnSpinchangeRetryCount)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_MINUTES_NUMBER, OnSpinchangeRetryInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsPhoneCallDialog message handlers

BOOL CSettingsNotificationsPhoneCallDialog::OnInitDialog()
{
	UINT  nCount;
	WORD  wVoiceAge;
	WORD  wVoiceGender;
	BOOL  bConversation;
	CString  szModem[2];
	CString  szSpeaker[2];
	CTimeSpan  tInterval[2];
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	if (EnumModems() && EnumVoiceGenders() && EnumVoiceAges())
	{
		m_cProfileInfo[0].GetModemInfo(szModem[0]);
		m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
		m_cProfileInfo[0].GetVoiceInfo(szSpeaker[0], wVoiceGender, wVoiceAge, bConversation);
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_GENDER, CB_SETCURSEL, (EnumVoiceSpeakers(wVoiceGender, wVoiceAge)) ? wVoiceGender : 0);
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_AGE, CB_SETCURSEL, (EnumVoiceSpeakers(wVoiceGender, wVoiceAge)) ? wVoiceAge : 0);
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_SPEAKER, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_SPEAKER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szSpeaker[0]), 0));
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_MODEM, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_MODEM, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szModem[0]), 0));
		Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_NUMBER), NOTIFICATIONS_PHONECALL_MINIMUMRETRIES, NOTIFICATIONS_PHONECALL_MAXIMUMRETRIES);
		Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_MINUTES_NUMBER), NOTIFICATIONS_PHONECALL_MINIMUMRETRYINTERVAL, NOTIFICATIONS_PHONECALL_MAXIMUMRETRYINTERVAL);
		Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_MINUTES_NUMBER), tInterval[0].GetTotalMinutes());
		Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_NUMBER), nCount);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_CONVERSATION, (bConversation) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY, (nCount > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_DETAILS)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_MODEM_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_MODEM)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_CONVERSATION)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_GENDER_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_GENDER)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_AGE_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_AGE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_MINUTES_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY));
		for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_MODEM)->GetWindowText(szModem[0]); !m_cProfileInfo[0].GetModemInfo(szModem[1]); )
		{
			m_cProfileInfo[0].SetModemInfo(szModem[0]);
			m_cProfileInfo[1].SetModemInfo(szModem[0]);
			break;
		}
		for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_SPEAKER)->GetWindowText(szSpeaker[0]); !m_cProfileInfo[0].GetVoiceInfo(szSpeaker[1], wVoiceAge, wVoiceGender, bConversation); )
		{
			m_cProfileInfo[0].SetVoiceInfo(szSpeaker[0], (WORD)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_GENDER, CB_GETCURSEL), (WORD)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_AGE, CB_GETCURSEL), IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_CONVERSATION));
			m_cProfileInfo[1].SetVoiceInfo(szSpeaker[0], (WORD)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_GENDER, CB_GETCURSEL), (WORD)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_AGE, CB_GETCURSEL), IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_CONVERSATION));
			break;
		}
	}
	AdjustToPrivileges();
	return TRUE;
}

void CSettingsNotificationsPhoneCallDialog::OnConversation()
{
	WORD  wVoice[2];
	BOOL  bConversation;
	CString  szVoiceSpeaker;

	m_cProfileInfo[0].GetVoiceInfo(szVoiceSpeaker, wVoice[0], wVoice[1], bConversation);
	m_cProfileInfo[0].SetVoiceInfo(szVoiceSpeaker, wVoice[0], wVoice[1], IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_CONVERSATION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPhoneCallDialog::OnRetryNotification()
{
	m_cProfileInfo[0].SetBehaviorInfo((IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY)) ? NOTIFICATIONS_PHONECALL_DEFAULTRETRIES : 0, (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY)) ? (SECONDSPERMINUTE*NOTIFICATIONS_PHONECALL_DEFAULTRETRYINTERVAL) : 0, 0);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_NUMBER), NOTIFICATIONS_PHONECALL_DEFAULTRETRIES);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_MINUTES_NUMBER), NOTIFICATIONS_PHONECALL_DEFAULTRETRYINTERVAL);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_MINUTES_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPhoneCallDialog::OnSelchangeModem()
{
	CString  szModem;

	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_MODEM)->GetWindowText(szModem);
	m_cProfileInfo[0].SetModemInfo(szModem);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPhoneCallDialog::OnSelchangeVoiceGender()
{
	WORD  wVoice[2];
	CString  szVoiceSpeaker;

	for (EnumVoiceSpeakers((wVoice[0] = (WORD)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_GENDER, CB_GETCURSEL)), (wVoice[1] = (WORD)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_AGE, CB_GETCURSEL))), GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_SPEAKER)->GetWindowText(szVoiceSpeaker); TRUE; )
	{
		m_cProfileInfo[0].SetVoiceInfo(szVoiceSpeaker, wVoice[0], wVoice[1], IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_CONVERSATION));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPhoneCallDialog::OnSelchangeVoiceAge()
{
	WORD  wVoice[2];
	CString  szVoiceSpeaker;

	for (EnumVoiceSpeakers((wVoice[0] = (WORD)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_GENDER, CB_GETCURSEL)), (wVoice[1] = (WORD)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_AGE, CB_GETCURSEL))), GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_SPEAKER)->GetWindowText(szVoiceSpeaker); TRUE; )
	{
		m_cProfileInfo[0].SetVoiceInfo(szVoiceSpeaker, wVoice[0], wVoice[1], IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_CONVERSATION));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPhoneCallDialog::OnSelchangeVoiceSpeaker()
{
	WORD  wVoice[2];
	BOOL  bConversation;
	CString  szVoiceSpeaker[2];

	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_VOICE_SPEAKER)->GetWindowText(szVoiceSpeaker[0]);
	m_cProfileInfo[0].GetVoiceInfo(szVoiceSpeaker[1], wVoice[0], wVoice[1], bConversation);
	m_cProfileInfo[0].SetVoiceInfo(szVoiceSpeaker[0], wVoice[0], wVoice[1], bConversation);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPhoneCallDialog::OnSpinchangeRetryCount()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];

	m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
	m_cProfileInfo[0].SetBehaviorInfo((UINT)Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_NUMBER)), tInterval[0], tInterval[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPhoneCallDialog::OnSpinchangeRetryInterval()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];

	m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
	m_cProfileInfo[0].SetBehaviorInfo(nCount, SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PHONECALL_BEHAVIOR_RETRY_MINUTES_NUMBER)), tInterval[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPhoneCallDialog::OnOK()
{
	CHourglassCursor  cCursor;

	EndDialog(IDOK);
}

BOOL CSettingsNotificationsPhoneCallDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSNOTIFICATIONSPHONECALLDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CSettingsNotificationsPhoneCallDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSNOTIFICATIONSPHONECALLDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsPagerCallDialog dialog

IMPLEMENT_DYNCREATE(CSettingsNotificationsPagerCallDialog, CLocaleDialog)

CSettingsNotificationsPagerCallDialog::CSettingsNotificationsPagerCallDialog(CWnd *pParentWnd) : CLocaleDialog(CSettingsNotificationsPagerCallDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CSettingsNotificationsPagerCallDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CSettingsNotificationsPagerCallDialog::SetDetails(CONST CNotificationProfileInfo *pProfileInfo)
{
	m_cProfileInfo[0].Copy(pProfileInfo);
	m_cProfileInfo[1].Copy(pProfileInfo);
}

VOID CSettingsNotificationsPagerCallDialog::GetDetails(CNotificationProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cProfileInfo[0]);
}

BOOL CSettingsNotificationsPagerCallDialog::EnumAllAvailableModems()
{
	INT  nDevice;
	INT  nDevices;
	DWORD  dwDevices;
	DWORD  cbDevicesInfo;
	RASDEVINFO  *pDevicesInfo;

	SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_MODEM, CB_RESETCONTENT);
	RasEnumDevices((LPRASDEVINFO)NULL, &(cbDevicesInfo = 0), &(dwDevices = 0));
	if ((pDevicesInfo = (LPRASDEVINFO)GlobalAlloc(GPTR, cbDevicesInfo)))
	{
		pDevicesInfo->dwSize = (dwDevices > 0) ? sizeof(RASDEVINFO) : 0;
		if (RasEnumDevices(pDevicesInfo, &cbDevicesInfo, &dwDevices) == 0)
		{
			for (nDevice = 0, nDevices = dwDevices; nDevice < nDevices; nDevice++)
			{
				if (!_tcsicmp(pDevicesInfo[nDevice].szDeviceType, RASDT_Modem) || !_tcsicmp(pDevicesInfo[nDevice].szDeviceType, RASDT_Isdn) || !_tcsicmp(pDevicesInfo[nDevice].szDeviceType, RASDT_X25))
				{
					if (SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_MODEM, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDevicesInfo[nDevice].szDeviceName) == CB_ERR)
					{
						SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_MODEM, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pDevicesInfo[nDevice].szDeviceName);
						continue;
					}
				}
			}
		}
		GlobalFree(pDevicesInfo);
	}
	return((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_MODEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CSettingsNotificationsPagerCallDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_MODEM, (bCheck = CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE)));
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_ABORT_SECONDS, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_NUMBER, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_MINUTES_NUMBER, bCheck);
}

BOOL CSettingsNotificationsPagerCallDialog::Check(BOOL bModified) CONST
{
	return((!m_cProfileInfo[0].Compare(&m_cProfileInfo[1])) ? TRUE : FALSE);
}

void CSettingsNotificationsPagerCallDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CSettingsNotificationsPagerCallDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CSettingsNotificationsPagerCallDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CSettingsNotificationsPagerCallDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY, OnRetryNotification)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_MODEM, OnSelchangeModem)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_ABORT_SECONDS, OnSpinchangeDisconnectTime)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_NUMBER, OnSpinchangeRetryCount)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_MINUTES_NUMBER, OnSpinchangeRetryInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsPagerCallDialog message handlers

BOOL CSettingsNotificationsPagerCallDialog::OnInitDialog()
{
	UINT  nCount;
	CString  szModem[2];
	CTimeSpan  tInterval[2];
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	if (EnumAllAvailableModems())
	{
		m_cProfileInfo[0].GetModemInfo(szModem[0]);
		m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_MODEM, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_MODEM, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szModem[0]), 0));
		Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_ABORT_SECONDS), NOTIFICATIONS_PAGER_MINIMUMDISCONNECTTIME, NOTIFICATIONS_PAGER_MAXIMUMDISCONNECTTIME);
		Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_NUMBER), NOTIFICATIONS_PAGER_MINIMUMRETRIES, NOTIFICATIONS_PAGER_MAXIMUMRETRIES);
		Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_MINUTES_NUMBER), NOTIFICATIONS_PAGER_MINIMUMRETRYINTERVAL, NOTIFICATIONS_PAGER_MAXIMUMRETRYINTERVAL);
		Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_ABORT_SECONDS), (!tInterval[1].GetTotalSeconds()) ? NOTIFICATIONS_PAGER_DEFAULTDISCONNECTTIME : tInterval[1].GetTotalSeconds());
		Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_MINUTES_NUMBER), tInterval[0].GetTotalMinutes());
		Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_NUMBER), nCount);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY, (nCount > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_DETAILS)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_MODEM_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_MODEM)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_ABORT_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_ABORT_SECONDS)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_ABORT_SECONDS_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_MINUTES_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY));
		for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_MODEM)->GetWindowText(szModem[0]); !m_cProfileInfo[0].GetModemInfo(szModem[1]); )
		{
			m_cProfileInfo[0].SetModemInfo(szModem[0]);
			m_cProfileInfo[1].SetModemInfo(szModem[0]);
			break;
		}
		m_cProfileInfo[0].SetBehaviorInfo(nCount, tInterval[0], Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_ABORT_SECONDS)));
		m_cProfileInfo[1].SetBehaviorInfo(nCount, tInterval[0], Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_ABORT_SECONDS)));
	}
	AdjustToPrivileges();
	return TRUE;
}

void CSettingsNotificationsPagerCallDialog::OnRetryNotification()
{
	m_cProfileInfo[0].SetBehaviorInfo((IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY)) ? NOTIFICATIONS_PAGER_DEFAULTRETRIES : 0, (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY)) ? (SECONDSPERMINUTE*NOTIFICATIONS_PAGER_DEFAULTRETRYINTERVAL) : 0, Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_ABORT_SECONDS)));
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_NUMBER), NOTIFICATIONS_PAGER_DEFAULTRETRIES);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_MINUTES_NUMBER), NOTIFICATIONS_PAGER_DEFAULTRETRYINTERVAL);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_MINUTES_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPagerCallDialog::OnSelchangeModem()
{
	CString  szModem;

	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_MODEM)->GetWindowText(szModem);
	m_cProfileInfo[0].SetModemInfo(szModem);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPagerCallDialog::OnSpinchangeDisconnectTime()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];

	m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
	m_cProfileInfo[0].SetBehaviorInfo(nCount, tInterval[0], Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_ABORT_SECONDS)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPagerCallDialog::OnSpinchangeRetryCount()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];

	m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
	m_cProfileInfo[0].SetBehaviorInfo((UINT)Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_NUMBER)), tInterval[0], tInterval[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPagerCallDialog::OnSpinchangeRetryInterval()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];

	m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
	m_cProfileInfo[0].SetBehaviorInfo(nCount, SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PAGERCALL_BEHAVIOR_RETRY_MINUTES_NUMBER)), tInterval[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPagerCallDialog::OnOK()
{
	CHourglassCursor  cCursor;

	EndDialog(IDOK);
}

BOOL CSettingsNotificationsPagerCallDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSNOTIFICATIONSPAGERDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CSettingsNotificationsPagerCallDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSNOTIFICATIONSPAGERDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsFTPMessageDialog dialog

IMPLEMENT_DYNCREATE(CSettingsNotificationsFTPMessageDialog, CLocaleDialog)

CSettingsNotificationsFTPMessageDialog::CSettingsNotificationsFTPMessageDialog(CWnd *pParentWnd) : CLocaleDialog(CSettingsNotificationsFTPMessageDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CSettingsNotificationsFTPMessageDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CSettingsNotificationsFTPMessageDialog::SetDetails(CONST CNotificationProfileInfo *pProfileInfo)
{
	m_cProfileInfo[0].Copy(pProfileInfo);
	m_cProfileInfo[1].Copy(pProfileInfo);
}

VOID CSettingsNotificationsFTPMessageDialog::GetDetails(CNotificationProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cProfileInfo[0]);
}

VOID CSettingsNotificationsFTPMessageDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOGINNAME, (bCheck = CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE)));
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOCATION, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PASSWORD, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT_NUMBER, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_NUMBER, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER, bCheck);
}

BOOL CSettingsNotificationsFTPMessageDialog::CheckURL(LPCTSTR pszLocation) CONST
{
	DWORD  dwService;
	CString  szServer;
	CString  szDirectory;
	INTERNET_PORT  nPort;

	return((AfxParseURL(pszLocation, dwService, szServer, szDirectory, nPort) && dwService == AFX_INET_SERVICE_FTP) ? TRUE : FALSE);
}

BOOL CSettingsNotificationsFTPMessageDialog::IsModified() CONST
{
	return((!m_cProfileInfo[0].Compare(&m_cProfileInfo[1])) ? TRUE : FALSE);
}

BOOL CSettingsNotificationsFTPMessageDialog::Check(BOOL bModified) CONST
{
	CString  szLocation;

	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOCATION)->GetWindowText(szLocation);
	return((GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOCATION)->GetWindowTextLength() > 0 && (!GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PASSWORD)->GetWindowTextLength() || GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOGINNAME)->GetWindowTextLength() > 0) && CheckURL(szLocation)) ? (!bModified || IsModified()) : FALSE);
}

void CSettingsNotificationsFTPMessageDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CSettingsNotificationsFTPMessageDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CSettingsNotificationsFTPMessageDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CSettingsNotificationsFTPMessageDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT, OnUseFTPPort)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY, OnRetryNotification)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME, OnSelchangeFTPUserName)
	ON_EN_CHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOGINNAME, OnEditchangeFTPLoginName)
	ON_EN_CHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOCATION, OnEditchangeFTPLocation)
	ON_EN_CHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PASSWORD, OnEditchangeFTPPassword)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT_NUMBER, OnSpinchangeFTPPort)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_NUMBER, OnSpinchangeRetryCount)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER, OnSpinchangeRetryInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsFTPMessageDialog message handlers

BOOL CSettingsNotificationsFTPMessageDialog::OnInitDialog()
{
	INT  nUser;
	INT  nUsers;
	UINT  nCount;
	UINT  nFTPPort;
	CString  szUserName;
	CTimeSpan  tInterval[2];
	CStringArray  szRecipients;
	CStringArray  szFTPUserNames[2];
	CStringArray  szFTPAddresses;
	CStringArray  szFTPPasswords;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
	m_cProfileInfo[0].GetFTPInfo(szFTPUserNames[0], szFTPUserNames[1], szFTPAddresses, szFTPPasswords, nFTPPort);
	for (nUser = 0, nUsers = m_cProfileInfo[0].GetRecipients(szRecipients); nUser < nUsers; nUser = nUser + 1)
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szRecipients.GetAt(nUser));
		continue;
	}
	Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT_NUMBER), NOTIFICATIONS_FTPMESSAGE_FIRSTPORT, NOTIFICATIONS_FTPMESSAGE_LASTPORT);
	Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_NUMBER), NOTIFICATIONS_FTPMESSAGE_MINIMUMRETRIES, NOTIFICATIONS_FTPMESSAGE_MAXIMUMRETRIES);
	Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER), NOTIFICATIONS_FTPMESSAGE_MINIMUMRETRYINTERVAL, NOTIFICATIONS_FTPMESSAGE_MAXIMUMRETRYINTERVAL);
	SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME, CB_SETCURSEL);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT_NUMBER), nFTPPort);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER), tInterval[0].GetTotalMinutes());
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_NUMBER), nCount);
	CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT, (nFTPPort >= NOTIFICATIONS_FTPMESSAGE_FIRSTPORT  &&  nFTPPort <= NOTIFICATIONS_FTPMESSAGE_LASTPORT) ? TRUE : FALSE);
	CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY, (nCount > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME)->GetWindowText(szUserName);
	for (nUser = 0, nUsers = (INT)szFTPUserNames[0].GetSize(); nUser < nUsers; nUser++)
	{
		if (szFTPUserNames[0].GetAt(nUser) == szUserName) break;
		continue;
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOGINNAME)->SetWindowText((nUser < nUsers) ? (LPCTSTR)szFTPUserNames[1].GetAt(nUser) : EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOCATION)->SetWindowText((nUser < nUsers) ? (LPCTSTR)szFTPAddresses.GetAt(nUser) : EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PASSWORD)->SetWindowText((nUser < nUsers) ? (LPCTSTR)szFTPPasswords.GetAt(nUser) : EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOCATION_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOCATION)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOGINNAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOGINNAME)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PASSWORD_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PASSWORD)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY));
	AdjustToPrivileges();
	return TRUE;
}

void CSettingsNotificationsFTPMessageDialog::OnUseFTPPort()
{
	UINT  nFTPPort;
	CStringArray  szFTPUserNames[2];
	CStringArray  szFTPAddresses;
	CStringArray  szFTPPasswords;

	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT_NUMBER), NOTIFICATIONS_FTPMESSAGE_DEFAULTPORT);
	m_cProfileInfo[0].GetFTPInfo(szFTPUserNames[0], szFTPUserNames[1], szFTPAddresses, szFTPPasswords, nFTPPort);
	m_cProfileInfo[0].SetFTPInfo(szFTPUserNames[0], szFTPUserNames[1], szFTPAddresses, szFTPPasswords, (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT)) ? NOTIFICATIONS_FTPMESSAGE_DEFAULTPORT : 0);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFTPMessageDialog::OnRetryNotification()
{
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_NUMBER), NOTIFICATIONS_FTPMESSAGE_DEFAULTRETRIES);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER), NOTIFICATIONS_FTPMESSAGE_DEFAULTRETRYINTERVAL);
	m_cProfileInfo[0].SetBehaviorInfo((IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY)) ? NOTIFICATIONS_FTPMESSAGE_DEFAULTRETRIES : 0, (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY)) ? (SECONDSPERMINUTE*NOTIFICATIONS_FTPMESSAGE_DEFAULTRETRYINTERVAL) : 0, 0);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFTPMessageDialog::OnEditchangeFTPLoginName()
{
	INT  nUser;
	INT  nUsers;
	UINT  nFTPPort;
	CString  szFTPUserName;
	CString  szFTPLocation;
	CString  szFTPPassword;
	CString  szFTPLoginName;
	CStringArray  szFTPUserNames[2];
	CStringArray  szFTPAddresses;
	CStringArray  szFTPPasswords;

	m_cProfileInfo[0].GetFTPInfo(szFTPUserNames[0], szFTPUserNames[1], szFTPAddresses, szFTPPasswords, nFTPPort);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOGINNAME)->GetWindowText(szFTPLoginName);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOCATION)->GetWindowText(szFTPLocation);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME)->GetWindowText(szFTPUserName);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PASSWORD)->GetWindowText(szFTPPassword);
	for (nUser = 0, nUsers = (INT)szFTPUserNames[0].GetSize(); nUser < nUsers; nUser++)
	{
		if (szFTPUserNames[0].GetAt(nUser) == szFTPUserName) break;
		continue;
	}
	if (nUser == nUsers)
	{
		szFTPUserNames[0].Add(szFTPUserName);
		szFTPUserNames[1].Add(szFTPLoginName);
		szFTPAddresses.Add(szFTPLocation);
		szFTPPasswords.Add(szFTPPassword);
	}
	szFTPUserNames[1].SetAt(nUser, szFTPLoginName);
	m_cProfileInfo[0].SetFTPInfo(szFTPUserNames[0], szFTPUserNames[1], szFTPAddresses, szFTPPasswords, nFTPPort);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFTPMessageDialog::OnEditchangeFTPLocation()
{
	INT  nUser;
	INT  nUsers;
	UINT  nFTPPort;
	CString  szFTPUserName;
	CString  szFTPLocation;
	CString  szFTPPassword;
	CString  szFTPLoginName;
	CStringArray  szFTPUserNames[2];
	CStringArray  szFTPAddresses;
	CStringArray  szFTPPasswords;

	m_cProfileInfo[0].GetFTPInfo(szFTPUserNames[0], szFTPUserNames[1], szFTPAddresses, szFTPPasswords, nFTPPort);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOGINNAME)->GetWindowText(szFTPLoginName);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOCATION)->GetWindowText(szFTPLocation);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME)->GetWindowText(szFTPUserName);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PASSWORD)->GetWindowText(szFTPPassword);
	for (nUser = 0, nUsers = (INT)szFTPUserNames[0].GetSize(); nUser < nUsers; nUser++)
	{
		if (szFTPUserNames[0].GetAt(nUser) == szFTPUserName) break;
		continue;
	}
	if (nUser == nUsers)
	{
		szFTPUserNames[0].Add(szFTPUserName);
		szFTPUserNames[1].Add(szFTPLoginName);
		szFTPAddresses.Add(szFTPLocation);
		szFTPPasswords.Add(szFTPPassword);
	}
	szFTPAddresses.SetAt(nUser, szFTPLocation);
	m_cProfileInfo[0].SetFTPInfo(szFTPUserNames[0], szFTPUserNames[1], szFTPAddresses, szFTPPasswords, nFTPPort);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFTPMessageDialog::OnEditchangeFTPPassword()
{
	INT  nUser;
	INT  nUsers;
	UINT  nFTPPort;
	CString  szFTPUserName;
	CString  szFTPLocation;
	CString  szFTPPassword;
	CString  szFTPLoginName;
	CStringArray  szFTPUserNames[2];
	CStringArray  szFTPAddresses;
	CStringArray  szFTPPasswords;

	m_cProfileInfo[0].GetFTPInfo(szFTPUserNames[0], szFTPUserNames[1], szFTPAddresses, szFTPPasswords, nFTPPort);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOGINNAME)->GetWindowText(szFTPLoginName);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOCATION)->GetWindowText(szFTPLocation);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME)->GetWindowText(szFTPUserName);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PASSWORD)->GetWindowText(szFTPPassword);
	for (nUser = 0, nUsers = (INT)szFTPUserNames[0].GetSize(); nUser < nUsers; nUser++)
	{
		if (szFTPUserNames[0].GetAt(nUser) == szFTPUserName) break;
		continue;
	}
	if (nUser == nUsers)
	{
		szFTPUserNames[0].Add(szFTPUserName);
		szFTPUserNames[1].Add(szFTPLoginName);
		szFTPAddresses.Add(szFTPLocation);
		szFTPPasswords.Add(szFTPPassword);
	}
	szFTPPasswords.SetAt(nUser, szFTPPassword);
	m_cProfileInfo[0].SetFTPInfo(szFTPUserNames[0], szFTPUserNames[1], szFTPAddresses, szFTPPasswords, nFTPPort);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFTPMessageDialog::OnSelchangeFTPUserName()
{
	INT  nUser;
	INT  nUsers;
	UINT  nFTPPort;
	CString  szUserName;
	CStringArray  szFTPUserNames[2];
	CStringArray  szFTPAddresses;
	CStringArray  szFTPPasswords;

	m_cProfileInfo[0].GetFTPInfo(szFTPUserNames[0], szFTPUserNames[1], szFTPAddresses, szFTPPasswords, nFTPPort);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_USERNAME)->GetWindowText(szUserName);
	for (nUser = 0, nUsers = (INT)szFTPUserNames[0].GetSize(); nUser < nUsers; nUser++)
	{
		if (szFTPUserNames[0].GetAt(nUser) == szUserName) break;
		continue;
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOGINNAME)->SetWindowText((nUser < nUsers) ? szFTPUserNames[1].GetAt(nUser) : EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_LOCATION)->SetWindowText((nUser < nUsers) ? szFTPAddresses.GetAt(nUser) : EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PASSWORD)->SetWindowText((nUser < nUsers) ? szFTPPasswords.GetAt(nUser) : EMPTYSTRING);
}

void CSettingsNotificationsFTPMessageDialog::OnSpinchangeFTPPort()
{
	UINT  nFTPPort;
	CStringArray  szFTPUserNames[2];
	CStringArray  szFTPAddresses;
	CStringArray  szFTPPasswords;

	m_cProfileInfo[0].GetFTPInfo(szFTPUserNames[0], szFTPUserNames[1], szFTPAddresses, szFTPPasswords, nFTPPort);
	m_cProfileInfo[0].SetFTPInfo(szFTPUserNames[0], szFTPUserNames[1], szFTPAddresses, szFTPPasswords, (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT)) ? (UINT)Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_PORT_NUMBER)) : 0);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFTPMessageDialog::OnSpinchangeRetryCount()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];

	m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
	m_cProfileInfo[0].SetBehaviorInfo((UINT)Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_NUMBER)), tInterval[0], tInterval[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFTPMessageDialog::OnSpinchangeRetryInterval()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];

	m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
	m_cProfileInfo[0].SetBehaviorInfo(nCount, SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_FTPMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER)), tInterval[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsFTPMessageDialog::OnOK()
{
	CHourglassCursor  cCursor;

	EndDialog(IDOK);
}

BOOL CSettingsNotificationsFTPMessageDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSNOTIFICATIONSFTPMESSAGEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CSettingsNotificationsFTPMessageDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSNOTIFICATIONSFTPMESSAGEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsPrinterMessageDialog dialog

IMPLEMENT_DYNCREATE(CSettingsNotificationsPrinterMessageDialog, CLocaleDialog)

CSettingsNotificationsPrinterMessageDialog::CSettingsNotificationsPrinterMessageDialog(CWnd *pParentWnd) : CLocaleDialog(CSettingsNotificationsPrinterMessageDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CSettingsNotificationsPrinterMessageDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CSettingsNotificationsPrinterMessageDialog::SetDetails(CONST CNotificationProfileInfo *pProfileInfo)
{
	m_cProfileInfo[0].Copy(pProfileInfo);
	m_cProfileInfo[1].Copy(pProfileInfo);
}

VOID CSettingsNotificationsPrinterMessageDialog::GetDetails(CNotificationProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cProfileInfo[0]);
}

BOOL CSettingsNotificationsPrinterMessageDialog::EnumFontAreaLocations()
{
	m_cProfileInfo[0].GetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
	return((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_PROLOGFONTTYPE)) >= 0 && SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_MESSAGEFONTTYPE)) >= 0 && SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_EPILOGFONTTYPE)) >= 0) ? TRUE : FALSE);
}

VOID CSettingsNotificationsPrinterMessageDialog::ShowFontDetails()
{
	INT  nSize;
	INT  nSizes;
	INT  nStyle;
	INT  nStyles;
	BOOL  bUnderlined;
	CString  szFontArea;
	CStringArray  szSizes;
	CStringArray  szStyles;
	CStringTools  cStringTools;
	CFontTools  cFontTools;

	for (SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, CB_RESETCONTENT), SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, CB_RESETCONTENT), GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA)->GetWindowText(szFontArea); (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_PROLOGFONTTYPE) && cFontTools.EnumerateFont(m_lfFonts[0].lfFaceName, szStyles, szSizes, bUnderlined)) || (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_MESSAGEFONTTYPE) && cFontTools.EnumerateFont(m_lfFonts[1].lfFaceName, szStyles, szSizes, bUnderlined)) || (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_EPILOGFONTTYPE) && cFontTools.EnumerateFont(m_lfFonts[2].lfFaceName, szStyles, szSizes, bUnderlined)); )
	{
		for (nStyle = 0, nStyles = (INT)szStyles.GetSize(); nStyle < nStyles; nStyle++) SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szStyles.GetAt(nStyle));
		for (nSize = 0, nSizes = (INT)szSizes.GetSize(); nSize < nSizes; nSize++) SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSizes.GetAt(nSize));
		break;
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_PROLOGFONTTYPE))
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontStyle(&m_lfFonts[0])), 0));
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_lfFonts[0])), 0));
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nFontColors[0]);
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_MESSAGEFONTTYPE))
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontStyle(&m_lfFonts[1])), 0));
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_lfFonts[1])), 0));
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nFontColors[1]);
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_EPILOGFONTTYPE))
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontStyle(&m_lfFonts[2])), 0));
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_lfFonts[2])), 0));
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nFontColors[2]);
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSAMPLE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSAMPLE_AREA)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CSettingsNotificationsPrinterMessageDialog::ShowFontSample()
{
	CRect  rSampleText;

	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSAMPLE_AREA)->GetWindowRect(rSampleText);
	ScreenToClient(rSampleText);
	InvalidateRect(rSampleText);
	UpdateWindow();
}

VOID CSettingsNotificationsPrinterMessageDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME, (bCheck = CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE)));
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_NUMBER, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER, bCheck);
}

BOOL CSettingsNotificationsPrinterMessageDialog::IsModified() CONST
{
	return((!m_cProfileInfo[0].Compare(&m_cProfileInfo[1])) ? TRUE : FALSE);
}

BOOL CSettingsNotificationsPrinterMessageDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME)->GetWindowTextLength() >= 0 && GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE)->GetWindowTextLength() > 0 && GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE)->GetWindowTextLength() > 0) ? (!bModified || IsModified()) : FALSE);
}

void CSettingsNotificationsPrinterMessageDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CSettingsNotificationsPrinterMessageDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CSettingsNotificationsPrinterMessageDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CSettingsNotificationsPrinterMessageDialog)
	ON_WM_PAINT()
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY, OnRetryNotification)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME, OnEditchangeFontName)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA, OnSelchangeFontArea)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME, OnSelchangeFontName)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE, OnSelchangeFontStyle)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE, OnSelchangeFontSize)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR, OnSelchangeFontColor)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_NUMBER, OnSpinchangeRetryCount)
	ON_CONTROL(SBXN_CHANGE, IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER, OnSpinchangeRetryInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsPrinterMessageDialog message handlers

BOOL CSettingsNotificationsPrinterMessageDialog::OnInitDialog()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	if (EnumFontAreaLocations())
	{
		m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA, CB_SETCURSEL, 0);
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME, FCB_DIR, CF_EFFECTS | CF_SCREENFONTS);
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nFontColors[0]);
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)m_lfFonts[0].lfFaceName));
		Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_NUMBER), NOTIFICATIONS_PRINTERMESSAGE_MINIMUMRETRIES, NOTIFICATIONS_PRINTERMESSAGE_MAXIMUMRETRIES);
		Spinbox_SetRange(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER), NOTIFICATIONS_PRINTERMESSAGE_MINIMUMRETRYINTERVAL, NOTIFICATIONS_PRINTERMESSAGE_MAXIMUMRETRYINTERVAL);
		Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER), tInterval[0].GetTotalMinutes());
		Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_NUMBER), nCount);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY, (nCount > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSAMPLE_AREA)->GetWindowText(m_szFontSampleText);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA_PROLOG_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA_EPILOG_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR_STATIC)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSAMPLE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY));
		ShowFontDetails();
	}
	AdjustToPrivileges();
	return TRUE;
}

void CSettingsNotificationsPrinterMessageDialog::OnPaint()
{
	INT  nBkMode;
	CFont  cFont;
	CFont  *pOldFont;
	CRect  rSampleText;
	CString  szFontArea;
	COLORREF  nOldColor;
	CPaintDC  cDC(this);

	for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSAMPLE_AREA)->GetWindowRect(rSampleText), GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA)->GetWindowText(szFontArea), ScreenToClient(rSampleText); cFont.CreateFontIndirect((szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_PROLOGFONTTYPE)) ? &m_lfFonts[0] : ((szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_MESSAGEFONTTYPE)) ? &m_lfFonts[1] : &m_lfFonts[2])); )
	{
		if ((pOldFont = cDC.SelectObject(&cFont)))
		{
			nBkMode = cDC.SetBkMode(TRANSPARENT);
			nOldColor = cDC.SetTextColor((szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_PROLOGFONTTYPE)) ? m_nFontColors[0] : ((szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_FAX_MESSAGEFONTTYPE)) ? m_nFontColors[1] : m_nFontColors[2]));
			cDC.DrawText(m_szFontSampleText, rSampleText, DT_SINGLELINE | DT_CENTER | DT_VCENTER);
			cDC.SetTextColor(nOldColor);
			cDC.SelectObject(pOldFont);
			cDC.SetBkMode(nBkMode);
			ValidateRect(rSampleText);
		}
		cFont.DeleteObject();
		break;
	}
}

void CSettingsNotificationsPrinterMessageDialog::OnRetryNotification()
{
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_NUMBER), NOTIFICATIONS_PRINTERMESSAGE_DEFAULTRETRIES);
	Spinbox_SetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER), NOTIFICATIONS_PRINTERMESSAGE_DEFAULTRETRYINTERVAL);
	m_cProfileInfo[0].SetBehaviorInfo((IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY)) ? NOTIFICATIONS_PRINTERMESSAGE_DEFAULTRETRIES : 0, (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY)) ? (SECONDSPERMINUTE*NOTIFICATIONS_PRINTERMESSAGE_DEFAULTRETRYINTERVAL) : 0, 0);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPrinterMessageDialog::OnEditchangeFontName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPrinterMessageDialog::OnSelchangeFontArea()
{
	CString  szFontArea;

	for (szFontArea = Combobox_GetText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA), (INT)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA, CB_GETCURSEL)); szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_PROLOGFONTTYPE); )
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)m_lfFonts[0].lfFaceName));
		break;
	}
	for (; szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_MESSAGEFONTTYPE); )
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)m_lfFonts[1].lfFaceName));
		break;
	}
	for (; szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_EPILOGFONTTYPE); )
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)m_lfFonts[2].lfFaceName));
		break;
	}
	ShowFontDetails();
	ShowFontSample();
}

void CSettingsNotificationsPrinterMessageDialog::OnSelchangeFontName()
{
	CString  szSize;
	CString  szStyle;
	CString  szFontArea;
	CFontTools  cFontTools;

	for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA)->GetWindowText(szFontArea); szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_PROLOGFONTTYPE); )
	{
		_tcscpy_s(m_lfFonts[0].lfFaceName, sizeof(m_lfFonts[0].lfFaceName) / sizeof(TCHAR), Combobox_GetText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME), (INT)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME, CB_GETCURSEL)));
		ShowFontDetails();
		break;
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_MESSAGEFONTTYPE))
	{
		_tcscpy_s(m_lfFonts[1].lfFaceName, sizeof(m_lfFonts[1].lfFaceName) / sizeof(TCHAR), Combobox_GetText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME), (INT)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME, CB_GETCURSEL)));
		ShowFontDetails();
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_EPILOGFONTTYPE))
	{
		_tcscpy_s(m_lfFonts[2].lfFaceName, sizeof(m_lfFonts[2].lfFaceName) / sizeof(TCHAR), Combobox_GetText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME), (INT)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTNAME, CB_GETCURSEL)));
		ShowFontDetails();
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_PROLOGFONTTYPE))
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfFonts[0].lfWeight, m_lfFonts[0].lfItalic);
		cFontTools.TranslateFontSize(szSize, m_lfFonts[0].lfHeight);
		cFontTools.EnumerateFontCharacteristics(&m_lfFonts[0]);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_MESSAGEFONTTYPE))
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfFonts[1].lfWeight, m_lfFonts[1].lfItalic);
		cFontTools.TranslateFontSize(szSize, m_lfFonts[1].lfHeight);
		cFontTools.EnumerateFontCharacteristics(&m_lfFonts[1]);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_EPILOGFONTTYPE))
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE)->GetWindowText(szSize);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfFonts[2].lfWeight, m_lfFonts[2].lfItalic);
		cFontTools.TranslateFontSize(szSize, m_lfFonts[2].lfHeight);
		cFontTools.EnumerateFontCharacteristics(&m_lfFonts[2]);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
	}
	ShowFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPrinterMessageDialog::OnSelchangeFontStyle()
{
	CString  szStyle;
	CString  szFontArea;
	CFontTools  cFontTools;

	for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA)->GetWindowText(szFontArea); szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_PROLOGFONTTYPE); )
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfFonts[0].lfWeight, m_lfFonts[0].lfItalic);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
		break;
	}
	for (; szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_MESSAGEFONTTYPE); )
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfFonts[1].lfWeight, m_lfFonts[1].lfItalic);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
		break;
	}
	for (; szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_EPILOGFONTTYPE); )
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSTYLE)->GetWindowText(szStyle);
		cFontTools.TranslateFontStyle(szStyle, m_lfFonts[2].lfWeight, m_lfFonts[2].lfItalic);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
		break;
	}
	ShowFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPrinterMessageDialog::OnSelchangeFontSize()
{
	CString  szSize;
	CString  szFontArea;
	CFontTools  cFontTools;

	for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA)->GetWindowText(szFontArea); szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_PROLOGFONTTYPE); )
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, m_lfFonts[0].lfHeight);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
		break;
	}
	for (; szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_MESSAGEFONTTYPE); )
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, m_lfFonts[1].lfHeight);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
		break;
	}
	for (; szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_EPILOGFONTTYPE); )
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTSIZE)->GetWindowText(szSize);
		cFontTools.TranslateFontSize(szSize, m_lfFonts[2].lfHeight);
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
		break;
	}
	ShowFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPrinterMessageDialog::OnSelchangeFontColor()
{
	CString  szFontArea;

	for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTAREA)->GetWindowText(szFontArea); szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_PROLOGFONTTYPE); )
	{
		m_nFontColors[0] = (COLORREF)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR, CB_GETCURSEL));
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
		break;
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_MESSAGEFONTTYPE))
	{
		m_nFontColors[1] = (COLORREF)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR, CB_GETCURSEL));
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
	}
	if (szFontArea == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_EPILOGFONTTYPE))
	{
		m_nFontColors[2] = (COLORREF)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_FONTCOLOR, CB_GETCURSEL));
		m_cProfileInfo[0].SetFontInfo(&m_lfFonts[0], m_nFontColors[0], &m_lfFonts[1], m_nFontColors[1], &m_lfFonts[2], m_nFontColors[2]);
	}
	ShowFontSample();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPrinterMessageDialog::OnSpinchangeRetryCount()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];

	m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
	m_cProfileInfo[0].SetBehaviorInfo((UINT)Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_NUMBER)), tInterval[0], tInterval[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPrinterMessageDialog::OnSpinchangeRetryInterval()
{
	UINT  nCount;
	CTimeSpan  tInterval[2];

	m_cProfileInfo[0].GetBehaviorInfo(nCount, tInterval[0], tInterval[1]);
	m_cProfileInfo[0].SetBehaviorInfo(nCount, SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PRINTERMESSAGE_BEHAVIOR_RETRY_MINUTES_NUMBER)), tInterval[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPrinterMessageDialog::OnOK()
{
	CHourglassCursor  cCursor;

	EndDialog(IDOK);
}

BOOL CSettingsNotificationsPrinterMessageDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSNOTIFICATIONSPRINTERMESSAGEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CSettingsNotificationsPrinterMessageDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSNOTIFICATIONSPRINTERMESSAGEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsAbortDialog dialog

IMPLEMENT_DYNCREATE(CSettingsNotificationsAbortDialog, CLocaleDialog)

CSettingsNotificationsAbortDialog::CSettingsNotificationsAbortDialog(CWnd *pParentWnd) : CLocaleDialog(CSettingsNotificationsAbortDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CSettingsNotificationsAbortDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CSettingsNotificationsAbortDialog::Initialize()
{
	return GetNotificationService()->EnumNotifications(m_pProfiles);
}

BOOL CSettingsNotificationsAbortDialog::EnumJobs()
{
	INT  nPos;
	INT  nItem;
	INT  nItems;
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CString  szColumn;
	CNotificationProfileInfo  *pProfileInfo;

	for (nItem = 0, nItems = (INT)m_pProfiles.GetSize(); nItem < nItems; nItem++)
	{
		if ((pProfileInfo = m_pProfiles.GetAt(nItem)) != (CNotificationProfileInfo *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TITLEITEM_NAME); )
				{
					szItem = pProfileInfo->GetName();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TITLEITEM_TYPE))
				{
					szItem = (pProfileInfo->GetType() == NOTIFICATIONINFO_TYPE_EMAIL) ? STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TYPE_EMAIL) : EMPTYSTRING;
					szItem = (pProfileInfo->GetType() == NOTIFICATIONINFO_TYPE_FAX) ? STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TYPE_FAX) : (LPCTSTR)szItem;
					szItem = (pProfileInfo->GetType() == NOTIFICATIONINFO_TYPE_PHONECALL) ? STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TYPE_PHONECALL) : (LPCTSTR)szItem;
					szItem = (pProfileInfo->GetType() == NOTIFICATIONINFO_TYPE_PAGERCALL) ? STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TYPE_PAGERCALL) : (LPCTSTR)szItem;
					szItem = (pProfileInfo->GetType() == NOTIFICATIONINFO_TYPE_FTPMESSAGE) ? STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TYPE_FTPMESSAGE) : (LPCTSTR)szItem;
					szItem = (pProfileInfo->GetType() == NOTIFICATIONINFO_TYPE_PRINTERMESSAGE) ? STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TYPE_PRINTERMESSAGE) : (LPCTSTR)szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TITLEITEM_MESSAGE))
				{
					szItem = pProfileInfo->GetMessage().Left(pProfileInfo->GetMessage().GetLength());
					szItem = ((nPos = szItem.Find(CR)) >= 0) ? szItem.Left(nPos) : szItem;
					szItem = ((nPos = szItem.Find(EOL)) >= 0) ? szItem.Left(nPos) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TITLEITEM_STATUS); )
				{
					szItem = (!nItem) ? STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_STATUS_EXECUTING) : STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_STATUS_QUEUED);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST), nItem, nColumn, szItem);
			}
		}
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST, LVM_GETITEMCOUNT), nWidth = (!Listview_GetColumn(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST), nColumn, szColumn, nWidth)) ? CalcColumnWidth(m_szColumns.GetAt(nColumn)) : nWidth; nItem < nItems; nItem++)
		{
			nWidth = max(CalcColumnWidth(Listview_GetText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST), nItem, nColumn)), nWidth);
			continue;
		}
		Listview_SetColumn(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST), nColumn, m_szColumns.GetAt(nColumn), nWidth);
	}
	Listview_SetCurText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST), 0);
	return((nItem == nItems) ? TRUE : FALSE);
}

INT CSettingsNotificationsAbortDialog::CalcColumnWidth(LPCTSTR pszColumn)
{
	CDC  *pDC;
	INT  nWidth;
	CFont  *pOldFont;

	if ((pDC = GetDC()))
	{
		if ((pOldFont = pDC->SelectObject(GetFont())))
		{
			nWidth = pDC->GetTextExtent(pszColumn).cx;
			nWidth += 6 * pDC->GetTextExtent(SPACE).cx;
			pDC->SelectObject(pOldFont);
			ReleaseDC(pDC);
			return nWidth;
		}
		ReleaseDC(pDC);
	}
	return 0;
}

BOOL CSettingsNotificationsAbortDialog::Check(BOOL bModified) CONST
{
	CUIntArray  nItems;

	return((Listview_GetSelText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST), nItems) > 0) ? TRUE : FALSE);
}

void CSettingsNotificationsAbortDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CSettingsNotificationsAbortDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CSettingsNotificationsAbortDialog::PostNcDestroy()
{
	m_pProfiles.RemoveAll();
	m_szColumns.RemoveAll();
	return CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CSettingsNotificationsAbortDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CSettingsNotificationsAbortDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsAbortDialog message handlers

BOOL CSettingsNotificationsAbortDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TITLEITEM_MESSAGE));
	m_szColumns.Add(STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TITLEITEM_STATUS));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TITLEITEM_NAME)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TITLEITEM_TYPE)) ? (rColumns.Width() / 6) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_ABORTDIALOG_TITLEITEM_MESSAGE)) ? ((103 * rColumns.Width()) / 210) : (rColumns.Width() / 7))));
		continue;
	}
	if (EnumJobs())
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_DETAILS)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
	return TRUE;
}

void CSettingsNotificationsAbortDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
	{
		if (!Listview_IsSelText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORT_LIST), nItem))
		{
			delete m_pProfiles.GetAt(nItem);
			m_pProfiles.SetAt(nItem, NULL);
		}
	}
	for (nItem = 0, nItems = (INT)m_pProfiles.GetSize(); nItem < nItems; nItem++)
	{
		if (!m_pProfiles.GetAt(nItem))
		{
			m_pProfiles.RemoveAt(nItem);
			nItems--;
			nItem--;
		}
	}
	GetNotificationService()->AbortNotifications(m_pProfiles);
	EndDialog(IDOK);
}

BOOL CSettingsNotificationsAbortDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSNOTIFICATIONSABORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CSettingsNotificationsAbortDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSNOTIFICATIONSABORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsPage property page

IMPLEMENT_DYNCREATE(CSettingsNotificationsPage, CLocalePropertyPage)

CSettingsNotificationsPage::CSettingsNotificationsPage() : CLocalePropertyPage(CSettingsNotificationsPage::IDD)
{
	//{{AFX_DATA_INIT(CSettingsNotificationsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CSettingsNotificationsPage::Initialize()
{
	CUserAddressBook  cUserAddressBook;

	if (GetNotificationProfiles(m_pProfiles[0]) && cUserAddressBook.GetUserAddressBook(m_pUsers[0]))
	{
		m_pProfiles[1].Copy(&m_pProfiles[0]);
		return TRUE;
	}
	return FALSE;
}

VOID CSettingsNotificationsPage::ShowProfileInfo()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nUser[2];
	INT  nUsers[2];
	UINT  nType[1];
	UINT  nOptions;
	CString  szItem;
	CStringArray  szRecipients;
	CUserProfileInfo  *pUserInfo[2];
	CNotificationProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST, LVM_DELETEALLITEMS);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE, ((nType[0] = pProfileInfo->GetType()) == NOTIFICATIONINFO_TYPE_NONE) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_EMAIL, (nType[0] == NOTIFICATIONINFO_TYPE_EMAIL) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_FAX, (nType[0] == NOTIFICATIONINFO_TYPE_FAX) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PHONECALL, (nType[0] == NOTIFICATIONINFO_TYPE_PHONECALL) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PAGERCALL, (nType[0] == NOTIFICATIONINFO_TYPE_PAGERCALL) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_FTPMESSAGE, (nType[0] == NOTIFICATIONINFO_TYPE_FTPMESSAGE) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PRINTERMESSAGE, (nType[0] == NOTIFICATIONINFO_TYPE_PRINTERMESSAGE) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, ((nOptions = pProfileInfo->GetOptions()) == NOTIFICATIONINFO_OPTION_AUDIT_NOTHING) ? !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE) : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, (nOptions == NOTIFICATIONINFO_OPTION_AUDIT_EVERYTHING) ? !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE) : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, (nOptions == NOTIFICATIONINFO_OPTION_AUDIT_FAILURES) ? !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE) : FALSE);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG)->SetWindowText(pProfileInfo->GetProlog());
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG)->SetWindowText(pProfileInfo->GetEpilog());
		for (nUser[0] = 0, nUsers[0] = (pProfileInfo->GetRecipients(szRecipients) > 0) ? (INT)szRecipients.GetSize() : 0, m_pUsers[1].RemoveAll(); nUser[0] < nUsers[0]; nUser[0]++)
		{
			for (nUser[1] = 0, nUsers[1] = (INT)m_pUsers[0].GetSize(); nUser[1] < nUsers[1]; nUser[1]++)
			{
				if ((pUserInfo[0] = m_pUsers[0].GetAt(nUser[1])) != (CUserProfileInfo *)NULL)
				{
					if (pUserInfo[0]->GetFullName() == szRecipients.GetAt(nUser[0])) break;
					continue;
				}
			}
			if (nUser[1] < nUsers[1])
			{
				if ((pUserInfo[1] = new CUserProfileInfo))
				{
					for (pUserInfo[1]->Copy(pUserInfo[0]); (nIndex = m_pUsers[1].Add(pUserInfo[1])) >= 0; )
					{
						for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
						{
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_RECIPIENTS_NAME); )
							{
								szItem = pUserInfo[0]->GetFullName();
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_RECIPIENTS_PHONENUMBER); )
							{
								szItem = pUserInfo[0]->GetOfficePhone();
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_RECIPIENTS_FAXNUMBER); )
							{
								szItem = pUserInfo[0]->GetOfficeFAX();
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_RECIPIENTS_EMAILADDRESS); )
							{
								szItem = pUserInfo[0]->GetOfficeEMail();
								break;
							}
							if (!nColumn)
							{
								Listview_InsertText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST), nIndex, szItem);
								continue;
							}
							Listview_SetText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST), nIndex, nColumn, szItem);
						}
						break;
					}
					for (; nIndex < 0; )
					{
						delete pUserInfo[1];
						break;
					}
				}
			}
		}
		Listview_SetCurText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST), 0);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_EMAIL)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_FAX)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PHONECALL)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PAGERCALL)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_FTPMESSAGE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PRINTERMESSAGE)->EnableWindow();
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_STATIC)->EnableWindow(!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING)->EnableWindow(!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING)->EnableWindow(!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES)->EnableWindow(!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_DETAILS)->EnableWindow(!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE)->EnableWindow(!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PAGERCALL));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG_STATIC)->EnableWindow(!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PAGERCALL));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG)->EnableWindow(!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PAGERCALL));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG_STATIC)->EnableWindow(!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PAGERCALL));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG)->EnableWindow(!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PAGERCALL));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS)->EnableWindow(!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST, LVM_GETITEMCOUNT) > 0) ? !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE) : FALSE);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_ADD)->EnableWindow((!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST, LVM_GETITEMCOUNT) > 0 && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST, LVM_GETITEMCOUNT) > 0 && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	}
}

VOID CSettingsNotificationsPage::SaveProfileInfo()
{
	INT  nUser;
	INT  nUsers;
	CString  szText[2];
	CStringArray  szRecipients;
	CUserProfileInfo  *pUserInfo;
	CNotificationProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		if (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE))
		{
			pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_NONE);
			pProfileInfo->SetOptions(NOTIFICATIONINFO_OPTION_AUDIT_NOTHING);
		}
		if (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_EMAIL))
		{
			m_cProfileInfo[0].SetName(pProfileInfo->GetName());
			pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_EMAIL);
			pProfileInfo->Copy(&m_cProfileInfo[0]);
		}
		if (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_FAX))
		{
			m_cProfileInfo[1].SetName(pProfileInfo->GetName());
			pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_FAX);
			pProfileInfo->Copy(&m_cProfileInfo[1]);
		}
		if (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PHONECALL))
		{
			m_cProfileInfo[2].SetName(pProfileInfo->GetName());
			pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_PHONECALL);
			pProfileInfo->Copy(&m_cProfileInfo[2]);
		}
		if (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PAGERCALL))
		{
			m_cProfileInfo[3].SetName(pProfileInfo->GetName());
			pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_PAGERCALL);
			pProfileInfo->Copy(&m_cProfileInfo[3]);
		}
		if (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_FTPMESSAGE))
		{
			m_cProfileInfo[4].SetName(pProfileInfo->GetName());
			pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_FTPMESSAGE);
			pProfileInfo->Copy(&m_cProfileInfo[4]);
		}
		if (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PRINTERMESSAGE))
		{
			m_cProfileInfo[5].SetName(pProfileInfo->GetName());
			pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_PRINTERMESSAGE);
			pProfileInfo->Copy(&m_cProfileInfo[5]);
		}
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG)->GetWindowText(szText[0]);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG)->GetWindowText(szText[1]);
		for (nUser = 0, nUsers = (INT)m_pUsers[1].GetSize(), pProfileInfo->SetOptions((IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING)) ? NOTIFICATIONINFO_OPTION_AUDIT_NOTHING : ((IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING)) ? NOTIFICATIONINFO_OPTION_AUDIT_EVERYTHING : NOTIFICATIONINFO_OPTION_AUDIT_FAILURES)), pProfileInfo->SetProlog(szText[0]), pProfileInfo->SetEpilog(szText[1]); nUser < nUsers; nUser++)
		{
			if ((pUserInfo = m_pUsers[1].GetAt(nUser)) != (CUserProfileInfo *)NULL)
			{
				szRecipients.Add(pUserInfo->GetFullName());
				continue;
			}
		}
		pProfileInfo->SetRecipients(szRecipients);
	}
}

CNotificationProfileInfo *CSettingsNotificationsPage::FindProfileInfo() CONST
{
	CString  szName;

	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES)->GetWindowText(szName);
	return m_pProfiles[0].GetAt(m_pProfiles[0].Find(szName));
}

VOID CSettingsNotificationsPage::GetDefaultEMailProperties(CNotificationProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_EMAIL);
}

VOID CSettingsNotificationsPage::GetDefaultFAXProperties(CNotificationProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_FAX);
}

VOID CSettingsNotificationsPage::GetDefaultPhoneCallProperties(CNotificationProfileInfo *pProfileInfo) CONST
{
	WORD  wAge;
	WORD  wGender;
	BOOL  bDialog;
	CAudio  cAudio;
	CString  szSpeaker;
	CStringArray  szVoices;

	for (pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_PHONECALL), pProfileInfo->GetVoiceInfo(szSpeaker, wGender, wAge, bDialog); cAudio.EnumVoices(szVoices, wGender, wAge) > 0; )
	{
		pProfileInfo->SetVoiceInfo(szVoices.GetAt(0), wGender, wAge);
		pProfileInfo->SetModemInfo(GetDefaultModemName());
		break;
	}
}

VOID CSettingsNotificationsPage::GetDefaultPagerCallProperties(CNotificationProfileInfo *pProfileInfo) CONST
{
	UINT  nRetryCount;
	CTimeSpan  tRetryInterval;
	CTimeSpan  tAbortInterval;

	for (pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_PAGERCALL), pProfileInfo->GetBehaviorInfo(nRetryCount, tRetryInterval, tAbortInterval); TRUE; )
	{
		pProfileInfo->SetBehaviorInfo(nRetryCount, tRetryInterval, NOTIFICATIONS_PAGER_DEFAULTDISCONNECTTIME);
		pProfileInfo->SetModemInfo(GetDefaultModemName());
		break;
	}
}

VOID CSettingsNotificationsPage::GetDefaultFTPMessageProperties(CNotificationProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_FTPMESSAGE);
}

VOID CSettingsNotificationsPage::GetDefaultPrinterMessageProperties(CNotificationProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_PRINTERMESSAGE);
}

CString CSettingsNotificationsPage::GetDefaultModemName() CONST
{
	INT  nDevice;
	INT  nDevices;
	DWORD  dwDevices;
	DWORD  cbDevicesInfo;
	CString  szDeviceName;
	RASDEVINFO  *pDevicesInfo;

	for (RasEnumDevices((LPRASDEVINFO)NULL, &(cbDevicesInfo = 0), &(dwDevices = 0)); (pDevicesInfo = (LPRASDEVINFO)GlobalAlloc(GPTR, cbDevicesInfo)); )
	{
		for (pDevicesInfo->dwSize = (dwDevices > 0) ? sizeof(RASDEVINFO) : 0; !RasEnumDevices(pDevicesInfo, &cbDevicesInfo, &dwDevices); )
		{
			for (nDevice = 0, nDevices = dwDevices; nDevice < nDevices; nDevice++)
			{
				if (!_tcsicmp(pDevicesInfo[nDevice].szDeviceType, RASDT_Modem))
				{
					szDeviceName = pDevicesInfo[nDevice].szDeviceName;
					GlobalFree(pDevicesInfo);
					return szDeviceName;
				}
				if (!_tcsicmp(pDevicesInfo[nDevice].szDeviceType, RASDT_Isdn))
				{
					szDeviceName = pDevicesInfo[nDevice].szDeviceName;
					GlobalFree(pDevicesInfo);
					return szDeviceName;
				}
				if (!_tcsicmp(pDevicesInfo[nDevice].szDeviceType, RASDT_X25))
				{
					szDeviceName = pDevicesInfo[nDevice].szDeviceName;
					GlobalFree(pDevicesInfo);
					return szDeviceName;
				}
			}
			break;
		}
		GlobalFree(pDevicesInfo);
		break;
	}
	return EMPTYSTRING;
}

BOOL CSettingsNotificationsPage::CheckRecipients(CONST CNotificationProfileInfo *pProfileInfo) CONST
{
	UINT  nPort;
	CStringArray  szUsers;
	CStringArray  szLogins;
	CStringArray  szPasswords;
	CStringArray  szAddresses;
	CStringArray  szRecipients;

	return(((pProfileInfo->GetType() == NOTIFICATIONINFO_TYPE_NONE || pProfileInfo->GetRecipients(szRecipients) > 0) && (pProfileInfo->GetType() != NOTIFICATIONINFO_TYPE_FTPMESSAGE || szRecipients.GetSize() == pProfileInfo->GetFTPInfo(szUsers, szLogins, szAddresses, szPasswords, nPort))) ? TRUE : FALSE);
}
BOOL CSettingsNotificationsPage::CheckRecipients() CONST
{
	UINT  nPort;
	CStringArray  szUsers;
	CStringArray  szLogins;
	CStringArray  szPasswords;
	CStringArray  szAddresses;

	return(((IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE) || GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST)->SendMessage(LVM_GETITEMCOUNT) > 0) && (!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_FTPMESSAGE) || GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST)->SendMessage(LVM_GETITEMCOUNT) == m_cProfileInfo[4].GetFTPInfo(szUsers, szLogins, szAddresses, szPasswords, nPort))) ? TRUE : FALSE);
}

VOID CSettingsNotificationsPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, (bCheck = CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE)));
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_EMAIL, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_FAX, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PHONECALL, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PAGERCALL, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_FTPMESSAGE, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PRINTERMESSAGE, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG, bCheck);
	AccessControl(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG, bCheck);
}

BOOL CSettingsNotificationsPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_pProfiles[0].Compare(&m_pProfiles[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CSettingsNotificationsPage::Check(BOOL bAll) CONST
{
	INT  nProfile;
	INT  nProfiles;
	CNotificationProfileInfo  *pProfileInfo;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nProfile = 0, nProfiles = (INT)m_pProfiles[0].GetSize(); nProfile < nProfiles; nProfile++)
		{
			if ((pProfileInfo = m_pProfiles[0].GetAt(nProfile)) && CheckRecipients(pProfileInfo)) continue;
			break;
		}
		return(((IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE) || GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST)->SendMessage(LVM_GETITEMCOUNT) > 0) && nProfile == nProfiles) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

VOID CSettingsNotificationsPage::Update()
{
	ReportEvent((IsWindow(GetSafeHwnd())) ? ((IsModified(FALSE) && !SetNotificationProfiles(m_pProfiles[0])) ? SYSTEM_WARNING_NOTIFICATIONPROFILES_UPDATE_FAILURE : SYSTEM_NOERROR) : SYSTEM_NOERROR);
}

CSettingsDialog *CSettingsNotificationsPage::GetParent() CONST
{
	return((CSettingsDialog *)CLocalePropertyPage::GetParent());
}

void CSettingsNotificationsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CSettingsNotificationsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CSettingsNotificationsPage::PostNcDestroy()
{
	m_pUsers[0].RemoveAll();
	m_pUsers[1].RemoveAll();
	m_szColumns.RemoveAll();
	m_pProfiles[0].RemoveAll();
	m_pProfiles[1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CSettingsNotificationsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CSettingsNotificationsPage)
	ON_CBN_EDITCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, OnEditchangeProfile)
	ON_CBN_SELCHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, OnSelchangeProfile)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE, OnAddProfile)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE, OnRemoveProfile)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES, OnRemoveAllProfiles)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORTPROFILE, OnAbortProfile)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_NONE, OnNone)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_EMAIL, OnEMail)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_FAX, OnFAX)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PHONECALL, OnPhoneCall)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PAGERCALL, OnPagerCall)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_FTPMESSAGE, OnFTPMessage)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PRINTERMESSAGE, OnPrinterMessage)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, OnAuditNothing)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, OnAuditEverything)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, OnAuditFailures)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_DETAILS, OnDetails)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_ADD, OnAddRecipient)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_REMOVE, OnRemoveRecipient)
	ON_BN_CLICKED(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_REMOVEALL, OnRemoveAllRecipients)
	ON_EN_CHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG, OnEditchangeProlog)
	ON_EN_CHANGE(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG, OnEditchangeEpilog)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSettingsNotificationsPage message handlers

BOOL CSettingsNotificationsPage::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	INT  nProfile;
	INT  nProfiles;
	CRect  rColumns;
	CStringArray  szProfiles;
	CNotificationProfiles  pProfiles;
	CNotificationProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	GetDefaultEMailProperties(&m_cProfileInfo[0]);
	GetDefaultFAXProperties(&m_cProfileInfo[1]);
	GetDefaultPhoneCallProperties(&m_cProfileInfo[2]);
	GetDefaultPagerCallProperties(&m_cProfileInfo[3]);
	GetDefaultFTPMessageProperties(&m_cProfileInfo[4]);
	GetDefaultPrinterMessageProperties(&m_cProfileInfo[5]);
	m_szColumns.Add(STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_RECIPIENTS_NAME));
	m_szColumns.Add(STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_RECIPIENTS_PHONENUMBER));
	m_szColumns.Add(STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_RECIPIENTS_FAXNUMBER));
	m_szColumns.Add(STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_RECIPIENTS_EMAILADDRESS));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), rColumns.InflateRect(0, 0, rColumns.Width() / 2, 0), nWidth = (2 * rColumns.Width()) / 7; nColumn < nColumns; nWidth = (++nColumn < nColumns - 1) ? (rColumns.Width() / 5) : ((2 * rColumns.Width()) / 7))
	{
		Listview_InsertColumn(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	for (nProfile = 0, nProfiles = (m_pProfiles[0].Enum(szProfiles)) ? (INT)szProfiles.GetSize() : 0; nProfile < nProfiles; nProfile++)
	{
		if ((pProfileInfo = (CNotificationProfileInfo *)m_pProfiles[0].GetAt(nProfile)) != (CNotificationProfileInfo *)NULL)
		{
			SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfiles.GetAt(nProfile));
			continue;
		}
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES)->EnableWindow();
	if (SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)) >= 0)
	{
		SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)));
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow(FALSE);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORTPROFILE)->EnableWindow((GetNotificationService()->EnumNotifications(pProfiles) && pProfiles.GetSize() > 0) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
		ShowProfileInfo();
	}
	AdjustToPrivileges();
	return TRUE;
}

void CSettingsNotificationsPage::OnEditchangeProfile()
{
	CString  szName;

	for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES)->GetWindowText(szName); SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0; )
	{
		ShowProfileInfo();
		break;
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) < 0 && CheckRecipients()) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0 && szName != STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
}

void CSettingsNotificationsPage::OnSelchangeProfile()
{
	for (; SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCURSEL)) >= 0; )
	{
		ShowProfileInfo();
		break;
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow((Combobox_GetText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES), (INT)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCURSEL)) != STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
}

void CSettingsNotificationsPage::OnAddProfile()
{
	CString  szName;
	CNotificationProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES)->GetWindowText(szName); (pProfileInfo = new CNotificationProfileInfo); )
	{
		if (SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szName)) >= 0)
		{
			for (pProfileInfo->SetName(szName); m_pProfiles[0].Add(pProfileInfo) >= 0; )
			{
				SaveProfileInfo();
				break;
			}
			if (m_pProfiles[0].Find(szName) >= 0) break;
		}
		delete pProfileInfo;
		break;
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) < 0 && CheckRecipients()) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCURSEL) >= 0 && Combobox_GetText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES), (INT)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCURSEL)) != STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnRemoveProfile()
{
	CString  szName;
	CNotificationProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES)->GetWindowText(szName); (pProfileInfo = m_pProfiles[0].GetAt(m_pProfiles[0].Find(szName))); )
	{
		if (SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName)) > 0)
		{
			m_pProfiles[0].RemoveAt(m_pProfiles[0].Find(szName));
			delete pProfileInfo;
		}
		break;
	}
	for (; SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME))) >= 0; )
	{
		ShowProfileInfo();
		break;
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnRemoveAllProfiles()
{
	INT  nProfile;
	INT  nProfiles;
	CNotificationProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (nProfile = 0, nProfiles = (INT)m_pProfiles[0].GetSize(); nProfile < nProfiles; nProfile++)
	{
		if ((pProfileInfo = m_pProfiles[0].GetAt(nProfile)) && pProfileInfo->GetName() != STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME) && SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pProfileInfo->GetName())) > 0)
		{
			m_pProfiles[0].RemoveAt(nProfile);
			delete pProfileInfo;
			nProfiles--;
			nProfile--;
		}
	}
	for (; SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME))) >= 0; )
	{
		ShowProfileInfo();
		break;
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnAbortProfile()
{
	CNotificationProfiles  pProfiles;
	CSettingsNotificationsAbortDialog  cAbortDialog(this);

	for (; cAbortDialog.DoModal() == IDOK; )
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ABORTPROFILE)->EnableWindow((GetNotificationService()->EnumNotifications(pProfiles) && pProfiles.GetSize() > 0) ? TRUE : FALSE);
		break;
	}
	SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES)->SetFocus();
}

void CSettingsNotificationsPage::OnNone()
{
	CStringArray  szRecipients;
	CNotificationProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_NONE);
		pProfileInfo->SetBehaviorInfo(0, CTimeSpan(0), CTimeSpan(0));
		pProfileInfo->SetOptions(NOTIFICATIONINFO_OPTION_AUDIT_NOTHING);
		pProfileInfo->SetProlog(EMPTYSTRING);
		pProfileInfo->SetEpilog(EMPTYSTRING);
		pProfileInfo->SetRecipients(szRecipients);
	}
	CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, FALSE);
	CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, FALSE);
	CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, FALSE);
	SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_DETAILS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow((CheckRecipients() && !pProfileInfo) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CNotificationProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnEMail()
{
	CNotificationProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_EMAIL);
		pProfileInfo->SetBehaviorInfo(0, CTimeSpan(0), CTimeSpan(0));
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_NOTHING) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_EVERYTHING) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_FAILURES) ? TRUE : FALSE);
	}
	else if (!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES))
	{
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, TRUE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, FALSE);
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow((CheckRecipients() && !pProfileInfo) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CNotificationProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnFAX()
{
	CNotificationProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_FAX);
		pProfileInfo->SetBehaviorInfo(0, CTimeSpan(0), CTimeSpan(0));
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_NOTHING) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_EVERYTHING) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_FAILURES) ? TRUE : FALSE);
	}
	else if (!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES))
	{
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, TRUE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, FALSE);
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow((CheckRecipients() && !pProfileInfo) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CNotificationProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnPhoneCall()
{
	CNotificationProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_PHONECALL);
		pProfileInfo->SetBehaviorInfo(0, CTimeSpan(0), CTimeSpan(0));
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_NOTHING) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_EVERYTHING) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_FAILURES) ? TRUE : FALSE);
	}
	else if (!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES))
	{
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, TRUE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, FALSE);
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow((CheckRecipients() && !pProfileInfo) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CNotificationProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnPagerCall()
{
	CNotificationProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_PAGERCALL);
		pProfileInfo->SetBehaviorInfo(0, 0, NOTIFICATIONS_PAGER_DEFAULTDISCONNECTTIME);
		pProfileInfo->SetProlog(EMPTYSTRING);
		pProfileInfo->SetEpilog(EMPTYSTRING);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_NOTHING) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_EVERYTHING) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_FAILURES) ? TRUE : FALSE);
	}
	else if (!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES))
	{
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, TRUE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, FALSE);
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow((CheckRecipients() && !pProfileInfo) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CNotificationProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnFTPMessage()
{
	CNotificationProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_FTPMESSAGE);
		pProfileInfo->SetBehaviorInfo(0, CTimeSpan(0), CTimeSpan(0));
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_NOTHING) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_EVERYTHING) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_FAILURES) ? TRUE : FALSE);
	}
	else if (!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES))
	{
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, TRUE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, FALSE);
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow((CheckRecipients() && !pProfileInfo) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CNotificationProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnPrinterMessage()
{
	CNotificationProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		pProfileInfo->SetType(NOTIFICATIONINFO_TYPE_PRINTERMESSAGE);
		pProfileInfo->SetBehaviorInfo(0, CTimeSpan(0), CTimeSpan(0));
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_NOTHING) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_EVERYTHING) ? TRUE : FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, (pProfileInfo->GetOptions() == NOTIFICATIONINFO_OPTION_AUDIT_FAILURES) ? TRUE : FALSE);
	}
	else if (!IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING) && !IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES))
	{
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING, TRUE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING, FALSE);
		CheckDlgButton(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES, FALSE);
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_STATIC)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_NOTHING)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_EVERYTHING)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_AUDIT_FAILURES)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE));
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow((CheckRecipients() && !pProfileInfo) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CNotificationProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnAuditNothing()
{
	UINT  nOptions;
	CString  szProfileName;
	CNotificationProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		nOptions = NOTIFICATIONINFO_OPTION_AUDIT_NOTHING;
		pProfileInfo->SetOptions(nOptions);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnAuditEverything()
{
	UINT  nOptions;
	CString  szProfileName;
	CNotificationProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		nOptions = NOTIFICATIONINFO_OPTION_AUDIT_EVERYTHING;
		pProfileInfo->SetOptions(nOptions);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnAuditFailures()
{
	UINT  nOptions;
	CString  szProfileName;
	CNotificationProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		nOptions = NOTIFICATIONINFO_OPTION_AUDIT_FAILURES;
		pProfileInfo->SetOptions(nOptions);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnDetails()
{
	INT  nUser;
	INT  nUsers;
	CStringArray  szRecipients;
	CUserProfileInfo  *pUserInfo;
	CNotificationProfileInfo  *pProfileInfo;
	CSettingsNotificationsFAXDialog  cFAXDetailsDialog(this);
	CSettingsNotificationsEMailDialog  cEMailDetailsDialog(this);
	CSettingsNotificationsPhoneCallDialog  cPhoneCallDetailsDialog(this);
	CSettingsNotificationsPagerCallDialog  cPagerCallDetailsDialog(this);
	CSettingsNotificationsFTPMessageDialog  cFTPMessageDetailsDialog(this);
	CSettingsNotificationsPrinterMessageDialog  cPrinterMessageDetailsDialog(this);

	for (nUser = 0, nUsers = (INT)m_pUsers[1].GetSize(); nUser < nUsers; nUser++)
	{
		if ((pUserInfo = m_pUsers[1].GetAt(nUser)) != (CUserProfileInfo *)NULL)
		{
			szRecipients.Add(pUserInfo->GetFullName());
			continue;
		}
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_EMAIL))
	{
		if ((pProfileInfo = FindProfileInfo()) != (CNotificationProfileInfo *)NULL)
		{
			cEMailDetailsDialog.SetDetails(pProfileInfo);
			if (cEMailDetailsDialog.DoModal() != IDOK) return;
			cEMailDetailsDialog.GetDetails(pProfileInfo);
		}
		else
		{
			m_cProfileInfo[0].SetRecipients(szRecipients);
			cEMailDetailsDialog.SetDetails(&m_cProfileInfo[0]);
			if (cEMailDetailsDialog.DoModal() != IDOK) return;
			cEMailDetailsDialog.GetDetails(&m_cProfileInfo[0]);
		}
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_FAX))
	{
		if ((pProfileInfo = FindProfileInfo()) != (CNotificationProfileInfo *)NULL)
		{
			cFAXDetailsDialog.SetDetails(pProfileInfo);
			if (cFAXDetailsDialog.DoModal() != IDOK) return;
			cFAXDetailsDialog.GetDetails(pProfileInfo);
		}
		else
		{
			m_cProfileInfo[1].SetRecipients(szRecipients);
			cFAXDetailsDialog.SetDetails(&m_cProfileInfo[1]);
			if (cFAXDetailsDialog.DoModal() != IDOK) return;
			cFAXDetailsDialog.GetDetails(&m_cProfileInfo[1]);
		}
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PHONECALL))
	{
		if ((pProfileInfo = FindProfileInfo()) != (CNotificationProfileInfo *)NULL)
		{
			cPhoneCallDetailsDialog.SetDetails(pProfileInfo);
			if (cPhoneCallDetailsDialog.DoModal() != IDOK) return;
			cPhoneCallDetailsDialog.GetDetails(pProfileInfo);
		}
		else
		{
			m_cProfileInfo[2].SetRecipients(szRecipients);
			cPhoneCallDetailsDialog.SetDetails(&m_cProfileInfo[2]);
			if (cPhoneCallDetailsDialog.DoModal() != IDOK) return;
			cPhoneCallDetailsDialog.GetDetails(&m_cProfileInfo[2]);
		}
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PAGERCALL))
	{
		if ((pProfileInfo = FindProfileInfo()) != (CNotificationProfileInfo *)NULL)
		{
			cPagerCallDetailsDialog.SetDetails(pProfileInfo);
			if (cPagerCallDetailsDialog.DoModal() != IDOK) return;
			cPagerCallDetailsDialog.GetDetails(pProfileInfo);
		}
		else
		{
			m_cProfileInfo[3].SetRecipients(szRecipients);
			cPagerCallDetailsDialog.SetDetails(&m_cProfileInfo[3]);
			if (cPagerCallDetailsDialog.DoModal() != IDOK) return;
			cPagerCallDetailsDialog.GetDetails(&m_cProfileInfo[3]);
		}
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_FTPMESSAGE))
	{
		if ((pProfileInfo = FindProfileInfo()) != (CNotificationProfileInfo *)NULL)
		{
			cFTPMessageDetailsDialog.SetDetails(pProfileInfo);
			if (cFTPMessageDetailsDialog.DoModal() != IDOK) return;
			cFTPMessageDetailsDialog.GetDetails(pProfileInfo);
		}
		else
		{
			m_cProfileInfo[4].SetRecipients(szRecipients);
			cFTPMessageDetailsDialog.SetDetails(&m_cProfileInfo[4]);
			if (cFTPMessageDetailsDialog.DoModal() != IDOK) return;
			cFTPMessageDetailsDialog.GetDetails(&m_cProfileInfo[4]);
		}
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_ALERT_PRINTERMESSAGE))
	{
		if ((pProfileInfo = FindProfileInfo()) != (CNotificationProfileInfo *)NULL)
		{
			cPrinterMessageDetailsDialog.SetDetails(pProfileInfo);
			if (cPrinterMessageDetailsDialog.DoModal() != IDOK) return;
			cPrinterMessageDetailsDialog.GetDetails(pProfileInfo);
		}
		else
		{
			m_cProfileInfo[5].SetRecipients(szRecipients);
			cPrinterMessageDetailsDialog.SetDetails(&m_cProfileInfo[5]);
			if (cPrinterMessageDetailsDialog.DoModal() != IDOK) return;
			cPrinterMessageDetailsDialog.GetDetails(&m_cProfileInfo[5]);
		}
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow((!(pProfileInfo = FindProfileInfo()) && CheckRecipients()) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CNotificationProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnAddRecipient()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CStringArray  szUsers;
	CUserProfiles  pUsers;
	CUserProfileInfo  *pUserInfo;
	CNotificationProfileInfo  *pProfileInfo;
	CUserAddressesDialog  cUserAddressesDialog(this);

	for (nItem = 0, nItems = (cUserAddressesDialog.DoModal(pUsers) == IDOK) ? (INT)pUsers.GetSize() : 0; nItem < nItems; nItem++)
	{
		if ((pUserInfo = pUsers.GetAt(nItem)) != (CUserProfileInfo *)NULL  &&  m_pUsers[1].Find(pUserInfo->GetFullName()) < 0)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nIndex = m_pUsers[1].Add(pUserInfo); nIndex >= 0 && nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_RECIPIENTS_NAME); )
				{
					szItem = pUserInfo->GetFullName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_RECIPIENTS_PHONENUMBER); )
				{
					szItem = pUserInfo->GetOfficePhone();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_RECIPIENTS_FAXNUMBER); )
				{
					szItem = pUserInfo->GetOfficeFAX();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_SETTINGS_NOTIFICATIONSPAGE_RECIPIENTS_EMAILADDRESS); )
				{
					szItem = pUserInfo->GetOfficeEMail();
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST), nIndex, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST), nIndex, nColumn, szItem);
			}
			if (nIndex >= 0)
			{
				pUsers.RemoveAt(nItem);
				nItems--;
				nItem--;
			}
			Listview_SetCurText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST), nIndex);
		}
	}
	if ((pProfileInfo = FindProfileInfo()))
	{
		for (nItem = 0, nItems = (INT)m_pUsers[1].GetSize(); nItem < nItems; nItem++)
		{
			if ((pUserInfo = m_pUsers[1].GetAt(nItem)))
			{
				szUsers.Add(pUserInfo->GetFullName());
				continue;
			}
		}
		pProfileInfo->SetRecipients(szUsers);
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST, LVM_GETITEMCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST, LVM_GETITEMCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow((!(pProfileInfo = FindProfileInfo()) && CheckRecipients()) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CNotificationProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_ADD)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnRemoveRecipient()
{
	INT  nItem;
	INT  nItems;
	INT  nUser;
	INT  nUsers;
	INT  nIndex;
	UINT  nPort;
	CStringArray  szLogins;
	CStringArray  szUsers[2];
	CStringArray  szPasswords;
	CStringArray  szAddresses;
	CUserProfileInfo  *pUserInfo;
	CNotificationProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	if (Listview_DeleteText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST), (nIndex = Listview_GetCurText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST)))))
	{
		if ((pUserInfo = m_pUsers[1].GetAt(nIndex)))
		{
			m_pUsers[1].RemoveAt(nIndex);
			delete pUserInfo;
		}
		Listview_SetCurText(GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST), 0);
	}
	if ((pProfileInfo = FindProfileInfo()))
	{
		for (nItem = 0, nItems = (INT)m_pUsers[1].GetSize(); nItem < nItems; nItem++)
		{
			if ((pUserInfo = m_pUsers[1].GetAt(nItem)))
			{
				szUsers[0].Add(pUserInfo->GetFullName());
				continue;
			}
		}
		for (nUser = 0, nUsers = pProfileInfo->GetFTPInfo(szUsers[1], szLogins, szAddresses, szPasswords, nPort); nUser < nUsers; nUser++)
		{
			for (nItem = 0, nItems = (INT)szUsers[0].GetSize(); nItem < nItems; nItem++)
			{
				if (szUsers[0].GetAt(nItem) == szUsers[1].GetAt(nUser)) break;
				continue;
			}
			if (nItem == nItems)
			{
				szLogins.RemoveAt(nUser);
				szUsers[1].RemoveAt(nUser);
				szAddresses.RemoveAt(nUser);
				szPasswords.RemoveAt(nUser);
				nUsers--;
				nUser--;
			}
		}
		pProfileInfo->SetFTPInfo(szUsers[1], szLogins, szAddresses, szPasswords, nPort);
		pProfileInfo->SetRecipients(szUsers[0]);
	}
	for (nUser = 0, nUsers = m_cProfileInfo[4].GetFTPInfo(szUsers[1], szLogins, szAddresses, szPasswords, nPort); nUser < nUsers; nUser++)
	{
		for (nItem = 0, nItems = (INT)m_pUsers[1].GetSize(); nItem < nItems; nItem++)
		{
			if ((pUserInfo = m_pUsers[1].GetAt(nItem)) != (CUserProfileInfo *)NULL)
			{
				if (pUserInfo->GetFullName() == szUsers[1].GetAt(nUser)) break;
				continue;
			}
		}
		if (nItem == nItems)
		{
			szLogins.RemoveAt(nUser);
			szUsers[1].RemoveAt(nUser);
			szAddresses.RemoveAt(nUser);
			szPasswords.RemoveAt(nUser);
			nUsers--;
			nUser--;
		}
		m_cProfileInfo[4].SetFTPInfo(szUsers[1], szLogins, szAddresses, szPasswords, nPort);
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST, LVM_GETITEMCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST, LVM_GETITEMCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow((!(pProfileInfo = FindProfileInfo()) && CheckRecipients()) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CNotificationProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_ADD)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnRemoveAllRecipients()
{
	CStringArray  szLogins;
	CStringArray  szUsers[2];
	CStringArray  szPasswords;
	CStringArray  szAddresses;
	CNotificationProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (; SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST, LVM_DELETEALLITEMS); )
	{
		m_pUsers[1].RemoveAll();
		break;
	}
	for (m_cProfileInfo[4].SetFTPInfo(szUsers[1], szLogins, szAddresses, szPasswords, 0); (pProfileInfo = FindProfileInfo()); )
	{
		pProfileInfo->SetFTPInfo(szUsers[1], szLogins, szAddresses, szPasswords, 0);
		pProfileInfo->SetRecipients(szUsers[0]);
		break;
	}
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_ADDPROFILE)->EnableWindow((!(pProfileInfo = FindProfileInfo()) && CheckRecipients()) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEPROFILE)->EnableWindow((pProfileInfo != (CNotificationProfileInfo *)NULL  &&  pProfileInfo->GetName() != STRING(IDS_NOTIFICATIONPROFILE_DEFAULTNAME)) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_REMOVEALLPROFILES)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_NOTIFICATIONSPAGE_PROFILES, CB_GETCOUNT) > 1) ? CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) : FALSE);
	GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_RECIPIENTS_ADD)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnEditchangeProlog()
{
	CString  szText;
	CNotificationProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_PROLOG)->GetWindowText(szText);
		pProfileInfo->SetProlog(szText);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsNotificationsPage::OnEditchangeEpilog()
{
	CString  szText;
	CNotificationProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindProfileInfo()))
	{
		GetDlgItem(IDC_SETTINGS_NOTIFICATIONSPAGE_PROPERTIES_MESSAGE_EPILOG)->GetWindowText(szText);
		pProfileInfo->SetEpilog(szText);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CSettingsMiscellaneousPage property page

IMPLEMENT_DYNCREATE(CSettingsMiscellaneousPage, CLocalePropertyPage)

CSettingsMiscellaneousPage::CSettingsMiscellaneousPage() : CLocalePropertyPage(CSettingsMiscellaneousPage::IDD)
{
	//{{AFX_DATA_INIT(CSettingsMiscellaneousPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CSettingsMiscellaneousPage::WriteExportFile(LPCTSTR pszFileName, CONST CByteArray &nLoginSchedule, CONST CByteArray &nTelemetryService, CONST CByteArray &nTelecommandService, CONST CByteArray &nMemoryDumpsService, CONST CByteArray &nTPEPService, CONST CByteArray &nPFLPService, CONST CByteArray &nAutomationService, CONST CByteArray &nSystemAlerts, CONST CByteArray &nTelemetryEvents, CONST CByteArray &nTelemetryReports, CONST CByteArray &nTelemetryReportProfiles, CONST CByteArray &nPrintProfiles, CONST CByteArray &nAuditionProfiles, CONST CByteArray &nNotificationProfiles, CONST CByteArray &nDownloadProfiles)
{
	DWORD  cbData;
	CFileEx  cFile;
	CByteArray  nData;
	APPLICATIONDATA  sData;

	if (cFile.Open(pszFileName, CFile::modeCreate | CFile::modeReadWrite | CFile::shareExclusive))
	{
		nData.SetSize((sData.cbSize = sizeof(APPLICATIONDATA) + (sData.cbLoginSchedule = (INT)nLoginSchedule.GetSize()) + (sData.cbTelemetryService = (INT)nTelemetryService.GetSize()) + (sData.cbTelecommandService = (INT)nTelecommandService.GetSize()) + (sData.cbMemoryDumpsService = (INT)nMemoryDumpsService.GetSize()) + (sData.cbTPEPService = (INT)nTPEPService.GetSize()) + (sData.cbPFLPService = (INT)nPFLPService.GetSize()) + (sData.cbAutomationService = (INT)nAutomationService.GetSize()) + (sData.cbSystemAlerts = (INT)nSystemAlerts.GetSize()) + (sData.cbTelemetryEvents = (INT)nTelemetryEvents.GetSize()) + (sData.cbTelemetryReports = (INT)nTelemetryReports.GetSize()) + (sData.cbTelemetryReportProfiles = (INT)nTelemetryReportProfiles.GetSize()) + (sData.cbPrintProfiles = (INT)nPrintProfiles.GetSize()) + (sData.cbAuditionProfiles = (INT)nAuditionProfiles.GetSize()) + (sData.cbNotificationProfiles = (INT)nNotificationProfiles.GetSize()) + (sData.cbDownloadProfiles = (INT)nDownloadProfiles.GetSize())));
		CopyMemory(nData.GetData() + (cbData = sizeof(APPLICATIONDATA)), nLoginSchedule.GetData(), sData.cbLoginSchedule);
		CopyMemory(nData.GetData() + (cbData = cbData + sData.cbLoginSchedule), nTelemetryService.GetData(), sData.cbTelemetryService);
		CopyMemory(nData.GetData() + (cbData = cbData + sData.cbTelemetryService), nTelecommandService.GetData(), sData.cbTelecommandService);
		CopyMemory(nData.GetData() + (cbData = cbData + sData.cbTelecommandService), nMemoryDumpsService.GetData(), sData.cbMemoryDumpsService);
		CopyMemory(nData.GetData() + (cbData = cbData + sData.cbMemoryDumpsService), nTPEPService.GetData(), sData.cbTPEPService);
		CopyMemory(nData.GetData() + (cbData = cbData + sData.cbTPEPService), nPFLPService.GetData(), sData.cbPFLPService);
		CopyMemory(nData.GetData() + (cbData = cbData + sData.cbPFLPService), nAutomationService.GetData(), sData.cbAutomationService);
		CopyMemory(nData.GetData() + (cbData = cbData + sData.cbAutomationService), nSystemAlerts.GetData(), sData.cbSystemAlerts);
		CopyMemory(nData.GetData() + (cbData = cbData + sData.cbSystemAlerts), nTelemetryEvents.GetData(), sData.cbTelemetryEvents);
		CopyMemory(nData.GetData() + (cbData = cbData + sData.cbTelemetryEvents), nTelemetryReports.GetData(), sData.cbTelemetryReports);
		CopyMemory(nData.GetData() + (cbData = cbData + sData.cbTelemetryReports), nTelemetryReportProfiles.GetData(), sData.cbTelemetryReportProfiles);
		CopyMemory(nData.GetData() + (cbData = cbData + sData.cbTelemetryReportProfiles), nPrintProfiles.GetData(), sData.cbPrintProfiles);
		CopyMemory(nData.GetData() + (cbData = cbData + sData.cbPrintProfiles), nAuditionProfiles.GetData(), sData.cbAuditionProfiles);
		CopyMemory(nData.GetData() + (cbData = cbData + sData.cbAuditionProfiles), nNotificationProfiles.GetData(), sData.cbNotificationProfiles);
		CopyMemory(nData.GetData() + (cbData = cbData + sData.cbNotificationProfiles), nDownloadProfiles.GetData(), sData.cbDownloadProfiles);
		for (CopyMemory(nData.GetData(), &sData, sizeof(APPLICATIONDATA)); WriteFile(cFile.m_hFile, nData.GetData(), (DWORD)nData.GetSize(), &cbData, (LPOVERLAPPED)NULL); )
		{
			cFile.Close();
			return TRUE;
		}
		cFile.Close();
		cFile.Remove(pszFileName);
	}
	return FALSE;
}

BOOL CSettingsMiscellaneousPage::ReadImportFile(LPCTSTR pszFileName, CByteArray &nLoginSchedule, CByteArray &nTelemetryService, CByteArray &nTelecommandService, CByteArray &nMemoryDumpsService, CByteArray &nTPEPService, CByteArray &nPFLPService, CByteArray &nAutomationService, CByteArray &nSystemAlerts, CByteArray &nTelemetryEvents, CByteArray &nTelemetryReports, CByteArray &nTelemetryReportProfiles, CByteArray &nPrintProfiles, CByteArray &nAuditionProfiles, CByteArray &nNotificationProfiles, CByteArray &nDownloadProfiles) CONST
{
	DWORD  cbData;
	DWORD  dwData;
	CFileEx  cFile;
	CByteArray  nData;
	APPLICATIONDATA  sData;

	if (cFile.Open(pszFileName, CFile::modeRead | CFile::shareDenyWrite))
	{
		if (cFile.GetLength() >= (ULONGLONG) sizeof(APPLICATIONDATA))
		{
			for (nData.SetSize((INT_PTR)cFile.GetLength()); ReadFile(cFile.m_hFile, nData.GetData(), (DWORD)cFile.GetLength(), &dwData, (LPOVERLAPPED)NULL); )
			{
				for (CopyMemory(&sData, nData.GetData(), sizeof(APPLICATIONDATA)); sData.cbSize == nData.GetSize() && sData.cbSize == sizeof(APPLICATIONDATA) + sData.cbLoginSchedule + sData.cbTelemetryService + sData.cbTelecommandService + sData.cbMemoryDumpsService + sData.cbTPEPService + sData.cbPFLPService + sData.cbAutomationService + sData.cbSystemAlerts + sData.cbTelemetryEvents + sData.cbTelemetryReports + sData.cbTelemetryReportProfiles + sData.cbPrintProfiles + sData.cbAuditionProfiles + sData.cbNotificationProfiles + sData.cbDownloadProfiles && sData.cbLoginSchedule >= 0 && sData.cbTelemetryService >= 0 && sData.cbTelecommandService >= 0 && sData.cbMemoryDumpsService >= 0 && sData.cbTPEPService >= 0 && sData.cbPFLPService >= 0 && sData.cbAutomationService >= 0 && sData.cbSystemAlerts >= 0 && sData.cbTelemetryEvents >= 0 && sData.cbTelemetryReports >= 0 && sData.cbTelemetryReportProfiles >= 0 && sData.cbPrintProfiles >= 0 && sData.cbAuditionProfiles >= 0 && sData.cbNotificationProfiles >= 0 && sData.cbDownloadProfiles >= 0; )
				{
					nLoginSchedule.SetSize(sData.cbLoginSchedule);
					nTelemetryService.SetSize(sData.cbTelemetryService);
					nTelecommandService.SetSize(sData.cbTelecommandService);
					nMemoryDumpsService.SetSize(sData.cbMemoryDumpsService);
					nTPEPService.SetSize(sData.cbTPEPService);
					nPFLPService.SetSize(sData.cbPFLPService);
					nAutomationService.SetSize(sData.cbAutomationService);
					nSystemAlerts.SetSize(sData.cbSystemAlerts);
					nTelemetryEvents.SetSize(sData.cbTelemetryEvents);
					nTelemetryReports.SetSize(sData.cbTelemetryReports);
					nTelemetryReportProfiles.SetSize(sData.cbTelemetryReportProfiles);
					nPrintProfiles.SetSize(sData.cbPrintProfiles);
					nAuditionProfiles.SetSize(sData.cbAuditionProfiles);
					nNotificationProfiles.SetSize(sData.cbNotificationProfiles);
					nDownloadProfiles.SetSize(sData.cbDownloadProfiles);
					CopyMemory(nLoginSchedule.GetData(), nData.GetData() + (cbData = (DWORD) sizeof(APPLICATIONDATA)), sData.cbLoginSchedule);
					CopyMemory(nTelemetryService.GetData(), nData.GetData() + (cbData = cbData + sData.cbLoginSchedule), sData.cbTelemetryService);
					CopyMemory(nTelecommandService.GetData(), nData.GetData() + (cbData = cbData + sData.cbTelemetryService), sData.cbTelecommandService);
					CopyMemory(nMemoryDumpsService.GetData(), nData.GetData() + (cbData = cbData + sData.cbTelecommandService), sData.cbMemoryDumpsService);
					CopyMemory(nTPEPService.GetData(), nData.GetData() + (cbData = cbData + sData.cbMemoryDumpsService), sData.cbTPEPService);
					CopyMemory(nPFLPService.GetData(), nData.GetData() + (cbData = cbData + sData.cbTPEPService), sData.cbPFLPService);
					CopyMemory(nAutomationService.GetData(), nData.GetData() + (cbData = cbData + sData.cbPFLPService), sData.cbAutomationService);
					CopyMemory(nSystemAlerts.GetData(), nData.GetData() + (cbData = cbData + sData.cbAutomationService), sData.cbSystemAlerts);
					CopyMemory(nTelemetryEvents.GetData(), nData.GetData() + (cbData = cbData + sData.cbSystemAlerts), sData.cbTelemetryEvents);
					CopyMemory(nTelemetryReports.GetData(), nData.GetData() + (cbData = cbData + sData.cbTelemetryEvents), sData.cbTelemetryReports);
					CopyMemory(nTelemetryReportProfiles.GetData(), nData.GetData() + (cbData = cbData + sData.cbTelemetryReports), sData.cbTelemetryReportProfiles);
					CopyMemory(nPrintProfiles.GetData(), nData.GetData() + (cbData = cbData + sData.cbTelemetryReportProfiles), sData.cbPrintProfiles);
					CopyMemory(nAuditionProfiles.GetData(), nData.GetData() + (cbData = cbData + sData.cbPrintProfiles), sData.cbAuditionProfiles);
					CopyMemory(nNotificationProfiles.GetData(), nData.GetData() + (cbData = cbData + sData.cbAuditionProfiles), sData.cbNotificationProfiles);
					CopyMemory(nDownloadProfiles.GetData(), nData.GetData() + (cbData = cbData + sData.cbNotificationProfiles), sData.cbDownloadProfiles);
					cFile.Close();
					return TRUE;
				}
				break;
			}
		}
		cFile.Close();
	}
	return FALSE;
}

BOOL CSettingsMiscellaneousPage::CanUpdate() CONST
{
	return((IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELEMETRY) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELECOMMAND) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_MEMORYDUMPS) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TPEP) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_PFLP) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_AUTOMATION) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_ALERTS_SYSTEM) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_EVENTS_TELEMETRY) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_REPORTS_TELEMETRY) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_PRINTING) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_AUDITIONS) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_NOTIFICATIONS) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_DOWNLOADS) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SCHEDULES_LOGIN)) ? CheckAccountPrivilege(PRIVILEGE_MISCELLANEOUS_CHANGE) : FALSE);
}

BOOL CSettingsMiscellaneousPage::CanImport() CONST
{
	return((GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT_FILENAME)->GetWindowTextLength() > 0 && (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELEMETRY) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELECOMMAND) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_MEMORYDUMPS) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TPEP) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_PFLP) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_AUTOMATION) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_ALERTS_SYSTEM) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_EVENTS_TELEMETRY) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_REPORTS_TELEMETRY) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_PRINTING) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_AUDITIONS) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_NOTIFICATIONS) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_DOWNLOADS) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SCHEDULES_LOGIN))) ? CheckAccountPrivilege(PRIVILEGE_MISCELLANEOUS_CHANGE) : FALSE);
}

BOOL CSettingsMiscellaneousPage::CanExport() CONST
{
	return((GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT_FILENAME)->GetWindowTextLength() > 0 && (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELEMETRY) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELECOMMAND) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_MEMORYDUMPS) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TPEP) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_PFLP) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_AUTOMATION) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_ALERTS_SYSTEM) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_EVENTS_TELEMETRY) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_REPORTS_TELEMETRY) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_PRINTING) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_AUDITIONS) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_NOTIFICATIONS) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_DOWNLOADS) || IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SCHEDULES_LOGIN))) ? CheckAccountPrivilege(PRIVILEGE_MISCELLANEOUS_CHANGE) : FALSE);
}

BOOL CSettingsMiscellaneousPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS)->SendMessage(LB_GETCOUNT) > 0) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CSettingsMiscellaneousPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

VOID CSettingsMiscellaneousPage::Update()
{
	return;
}

CSettingsDialog *CSettingsMiscellaneousPage::GetParent() CONST
{
	return((CSettingsDialog *)CLocalePropertyPage::GetParent());
}

void CSettingsMiscellaneousPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CSettingsMiscellaneousPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CSettingsMiscellaneousPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CSettingsMiscellaneousPage)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELEMETRY, OnTelemetryService)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELECOMMAND, OnTelecommandService)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_MEMORYDUMPS, OnMemoryDumpsService)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TPEP, OnTPEPService)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_PFLP, OnPFLPService)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_AUTOMATION, OnAutomationService)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_ALERTS_SYSTEM, OnSystemAlerts)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_EVENTS_TELEMETRY, OnTelemetryEvents)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_REPORTS_TELEMETRY, OnTelemetryReports)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_PRINTING, OnPrintProfiles)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_AUDITIONS, OnAuditionProfiles)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_NOTIFICATIONS, OnNotificationProfiles)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_DOWNLOADS, OnDownloadProfiles)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_SCHEDULES_LOGIN, OnLoginSchedule)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT, OnImport)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT, OnExport)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT_BROWSE, OnImportBrowse)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT_BROWSE, OnExportBrowse)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT, OnDoImport)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT, OnDoExport)
	ON_BN_CLICKED(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE, OnDoUpdate)
	ON_EN_CHANGE(IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT_FILENAME, OnEditchangeImportFileName)
	ON_EN_CHANGE(IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT_FILENAME, OnEditchangeExportFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSettingsMiscellaneousPage message handlers

BOOL CSettingsMiscellaneousPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYSERVICE_CHANGE) || CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE) || CheckAccountPrivilege(PRIVILEGE_TPEP_SETUPCHANGE) || CheckAccountPrivilege(PRIVILEGE_PFLP_SETUPCHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELEMETRY)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYSERVICE_CHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELECOMMAND)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDSERVICE_CHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_MEMORYDUMPS)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TPEP)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TPEP_SETUPCHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_PFLP)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_PFLP_SETUPCHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_AUTOMATION)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_ALERTS)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_SYSTEMALERTS_CHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_ALERTS_SYSTEM)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_SYSTEMALERTS_CHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_EVENTS)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_EVENTS_TELEMETRY)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_REPORTS)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_REPORTS_TELEMETRY)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) || CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) || CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_PRINTING)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_AUDITIONS)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_NOTIFICATIONS)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_DOWNLOADS)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TOOLSDOWNLOADPROFILES_CHANGE));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_SCHEDULES)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_NETWORK_LOGIN));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_SCHEDULES_LOGIN)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_NETWORK_LOGIN));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYSERVICE_CHANGE) || CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE) || CheckAccountPrivilege(PRIVILEGE_TPEP_SETUPCHANGE) || CheckAccountPrivilege(PRIVILEGE_PFLP_SETUPCHANGE) || CheckAccountPrivilege(PRIVILEGE_SYSTEMALERTS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) || CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) || CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TOOLSDOWNLOADPROFILES_CHANGE) || CheckAccountPrivilege(PRIVILEGE_NETWORK_LOGIN));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYSERVICE_CHANGE) || CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE) || CheckAccountPrivilege(PRIVILEGE_TPEP_SETUPCHANGE) || CheckAccountPrivilege(PRIVILEGE_PFLP_SETUPCHANGE) || CheckAccountPrivilege(PRIVILEGE_SYSTEMALERTS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE) || CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE) || CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TOOLSDOWNLOADPROFILES_CHANGE) || CheckAccountPrivilege(PRIVILEGE_NETWORK_LOGIN));
	return TRUE;
}

void CSettingsMiscellaneousPage::OnTelemetryService()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
}

void CSettingsMiscellaneousPage::OnTelecommandService()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
}

void CSettingsMiscellaneousPage::OnMemoryDumpsService()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
}

void CSettingsMiscellaneousPage::OnTPEPService()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
}

void CSettingsMiscellaneousPage::OnPFLPService()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
}

void CSettingsMiscellaneousPage::OnAutomationService()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
}

void CSettingsMiscellaneousPage::OnSystemAlerts()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
}

void CSettingsMiscellaneousPage::OnTelemetryEvents()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
}

void CSettingsMiscellaneousPage::OnTelemetryReports()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
}

void CSettingsMiscellaneousPage::OnPrintProfiles()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
}

void CSettingsMiscellaneousPage::OnAuditionProfiles()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
}

void CSettingsMiscellaneousPage::OnNotificationProfiles()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
}

void CSettingsMiscellaneousPage::OnDownloadProfiles()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
}

void CSettingsMiscellaneousPage::OnLoginSchedule()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
}

void CSettingsMiscellaneousPage::OnImport()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT_BROWSE)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT_FILENAME)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT_FILENAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT_FILENAME)->SetFocus();
}

void CSettingsMiscellaneousPage::OnExport()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOUPDATE)->EnableWindow(CanUpdate());
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT_BROWSE)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT_FILENAME)->EnableWindow(IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT));
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT_FILENAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT_FILENAME)->SetFocus();
}

void CSettingsMiscellaneousPage::OnImportBrowse()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
		GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
	}
	SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT_FILENAME)->SetFocus();
}

void CSettingsMiscellaneousPage::OnExportBrowse()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
		GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
	}
	SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT_FILENAME)->SetFocus();
}

void CSettingsMiscellaneousPage::OnDoImport()
{
	BOOL  bFile;
	CString  szMessage;
	CString  szFileName;
	CByteArray  nFileData[15];
	CLoginOptions  pLoginOptions;
	CSystemAlerts  pSystemAlerts;
	CPrintProfiles  pPrintProfiles;
	CTelemetryEvents  pTelemetryEvents;
	CTelemetryReports  pTelemetryReports;
	CAuditionProfiles  pAuditionProfiles;
	CNotificationProfiles  pNotificationProfiles;
	CToolsDownloadProfiles  pToolsDownloadProfiles;
	CTelemetryHistoricalReports  pTelemetryHistoricalReports;
	CHourglassCursor  cCursor;

	SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_RESETCONTENT);
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_IMPORT_FILENAME)->GetWindowText(szFileName);
	for (bFile = ReadImportFile(szFileName, nFileData[0], nFileData[1], nFileData[2], nFileData[3], nFileData[4], nFileData[5], nFileData[6], nFileData[7], nFileData[8], nFileData[9], nFileData[10], nFileData[11], nFileData[12], nFileData[13], nFileData[14]); IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SCHEDULES_LOGIN); )
	{
		szMessage.Format((bFile  &&  pLoginOptions.Unmap(nFileData[0]) && SetLoginOptions(pLoginOptions)) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_LOGINSCHEDULE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
		break;
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELEMETRY))
	{
		szMessage.Format((bFile  &&  GetTMService()->SetServiceInfo(nFileData[1])) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELEMETRYSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELECOMMAND))
	{
		szMessage.Format((bFile  &&  GetTCService()->SetServiceInfo(nFileData[2])) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELECOMMANDSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_MEMORYDUMPS))
	{
		szMessage.Format((bFile  &&  GetMemoryDumpsService()->SetServiceInfo(nFileData[3])) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_MEMORYDUMPSSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TPEP))
	{
		szMessage.Format((bFile  &&  GetTPEPService()->SetServiceInfo(nFileData[4])) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TPEPSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_PFLP))
	{
		szMessage.Format((bFile  &&  GetPFLPService()->SetServiceInfo(nFileData[5])) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_PFLPSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_AUTOMATION))
	{
		szMessage.Format((bFile  &&  GetAutomationService()->SetServiceInfo(nFileData[6])) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_AUTOMATIONSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_ALERTS_SYSTEM))
	{
		szMessage.Format((bFile  &&  pSystemAlerts.Unmap(nFileData[7]) && SetSystemAlerts(pSystemAlerts)) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_SYSTEMALERTS));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_EVENTS_TELEMETRY))
	{
		szMessage.Format((bFile  &&  pTelemetryEvents.Unmap(nFileData[8]) && SetTelemetryEvents(pTelemetryEvents)) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELEMETRYEVENTS));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_REPORTS_TELEMETRY))
	{
		szMessage.Format((bFile  &&  pTelemetryReports.Unmap(nFileData[9]) && pTelemetryHistoricalReports.Unmap(nFileData[10]) && SetTelemetryReports(pTelemetryReports) && SetTelemetryHistoricalReports(pTelemetryHistoricalReports)) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELEMETRYREPORTS));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_PRINTING))
	{
		szMessage.Format((bFile  &&  pPrintProfiles.Unmap(nFileData[11]) && SetPrintProfiles(pPrintProfiles)) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_PRINTPROFILES));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_AUDITIONS))
	{
		szMessage.Format((bFile  &&  pAuditionProfiles.Unmap(nFileData[12]) && SetAuditionProfiles(pAuditionProfiles)) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_AUDITIONPROFILES));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_NOTIFICATIONS))
	{
		szMessage.Format((bFile  &&  pNotificationProfiles.Unmap(nFileData[13]) && SetNotificationProfiles(pNotificationProfiles)) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_NOTIFICATIONPROFILES));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_DOWNLOADS))
	{
		szMessage.Format((bFile  &&  pToolsDownloadProfiles.Unmap(nFileData[14]) && SetToolsDownloadProfiles(pToolsDownloadProfiles)) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_IMPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_DOWNLOADPROFILES));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsMiscellaneousPage::OnDoExport()
{
	BOOL  bResult;
	CString  szMessage;
	CString  szFileName;
	CByteArray  nFileData[15];
	CLoginOptions  pLoginOptions;
	CSystemAlerts  pSystemAlerts;
	CPrintProfiles  pPrintProfiles;
	CTelemetryEvents  pTelemetryEvents;
	CTelemetryReports  pTelemetryReports;
	CAuditionProfiles  pAuditionProfiles;
	CNotificationProfiles  pNotificationProfiles;
	CToolsDownloadProfiles  pToolsDownloadProfiles;
	CTelemetryHistoricalReports  pTelemetryHistoricalReports;
	CHourglassCursor  cCursor;

	SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_RESETCONTENT);
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_EXPORT_FILENAME)->GetWindowText(szFileName);
	for (ReadImportFile(szFileName, nFileData[0], nFileData[1], nFileData[2], nFileData[3], nFileData[4], nFileData[5], nFileData[6], nFileData[7], nFileData[8], nFileData[9], nFileData[10], nFileData[11], nFileData[12], nFileData[13], nFileData[14]); IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SCHEDULES_LOGIN) || CheckAccountPrivilege(PRIVILEGE_NETWORK_LOGIN); )
	{
		if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SCHEDULES_LOGIN) && (!GetLoginOptions(pLoginOptions) || !pLoginOptions.Map(nFileData[0])))
		{
			szMessage.Format(STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_LOGINSCHEDULE));
			SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
			nFileData[0].RemoveAll();
			break;
		}
		if (!IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SCHEDULES_LOGIN) && CheckAccountPrivilege(PRIVILEGE_NETWORK_LOGIN)) nFileData[0].RemoveAll();
		break;
	}
	for (; IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELEMETRY) || CheckAccountPrivilege(PRIVILEGE_TELEMETRYSERVICE_CHANGE); )
	{
		if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELEMETRY) && !GetTMService()->GetServiceInfo(nFileData[1]))
		{
			szMessage.Format(STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELEMETRYSERVICE));
			SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
			nFileData[1].RemoveAll();
			break;
		}
		if (!IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELEMETRY) && CheckAccountPrivilege(PRIVILEGE_TELEMETRYSERVICE_CHANGE)) nFileData[1].RemoveAll();
		break;
	}
	for (; IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELECOMMAND) || CheckAccountPrivilege(PRIVILEGE_TELECOMMANDSERVICE_CHANGE); )
	{
		if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELECOMMAND) && !GetTCService()->GetServiceInfo(nFileData[2]))
		{
			szMessage.Format(STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELECOMMANDSERVICE));
			SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
			nFileData[2].RemoveAll();
			break;
		}
		if (!IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELECOMMAND) && CheckAccountPrivilege(PRIVILEGE_TELECOMMANDSERVICE_CHANGE)) nFileData[2].RemoveAll();
		break;
	}
	for (; IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_MEMORYDUMPS) || CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE); )
	{
		if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_MEMORYDUMPS) && !GetMemoryDumpsService()->GetServiceInfo(nFileData[3]))
		{
			szMessage.Format(STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_MEMORYDUMPSSERVICE));
			SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
			nFileData[3].RemoveAll();
			break;
		}
		if (!IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_MEMORYDUMPS) && CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE)) nFileData[3].RemoveAll();
		break;
	}
	for (; IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TPEP) || CheckAccountPrivilege(PRIVILEGE_TPEP_SETUPCHANGE); )
	{
		if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TPEP) && !GetTPEPService()->GetServiceInfo(nFileData[4]))
		{
			szMessage.Format(STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TPEPSERVICE));
			SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
			nFileData[4].RemoveAll();
			break;
		}
		if (!IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TPEP) && CheckAccountPrivilege(PRIVILEGE_TPEP_SETUPCHANGE)) nFileData[4].RemoveAll();
		break;
	}
	for (; IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_PFLP) || CheckAccountPrivilege(PRIVILEGE_PFLP_SETUPCHANGE); )
	{
		if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_PFLP) && !GetPFLPService()->GetServiceInfo(nFileData[5]))
		{
			szMessage.Format(STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_PFLPSERVICE));
			SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
			nFileData[5].RemoveAll();
			break;
		}
		if (!IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_PFLP) && CheckAccountPrivilege(PRIVILEGE_PFLP_SETUPCHANGE)) nFileData[5].RemoveAll();
		break;
	}
	for (; IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_AUTOMATION) || CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE); )
	{
		if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_AUTOMATION) && !GetAutomationService()->GetServiceInfo(nFileData[6]))
		{
			szMessage.Format(STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_AUTOMATIONSERVICE));
			SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
			nFileData[6].RemoveAll();
			break;
		}
		if (!IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_AUTOMATION) && CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE)) nFileData[6].RemoveAll();
		break;
	}
	for (; IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_ALERTS_SYSTEM) || CheckAccountPrivilege(PRIVILEGE_SYSTEMALERTS_CHANGE); )
	{
		if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_ALERTS_SYSTEM) && (!GetSystemAlerts(pSystemAlerts) || !pSystemAlerts.Map(nFileData[7])))
		{
			szMessage.Format(STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_SYSTEMALERTS));
			SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
			nFileData[7].RemoveAll();
			break;
		}
		if (!IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_ALERTS_SYSTEM) && CheckAccountPrivilege(PRIVILEGE_SYSTEMALERTS_CHANGE)) nFileData[7].RemoveAll();
		break;
	}
	for (; IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_EVENTS_TELEMETRY) || CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE); )
	{
		if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_EVENTS_TELEMETRY) && (!GetTelemetryEvents(pTelemetryEvents) || !pTelemetryEvents.Map(nFileData[8])))
		{
			szMessage.Format(STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELEMETRYEVENTS));
			SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
			nFileData[8].RemoveAll();
			break;
		}
		if (!IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_EVENTS_TELEMETRY) && CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE)) nFileData[8].RemoveAll();
		break;
	}
	for (; IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_REPORTS_TELEMETRY) || CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE); )
	{
		if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_REPORTS_TELEMETRY) && (!GetTelemetryReports(pTelemetryReports) || !GetTelemetryHistoricalReports(pTelemetryHistoricalReports) || !pTelemetryReports.Map(nFileData[9]) || !pTelemetryHistoricalReports.Map(nFileData[10])))
		{
			szMessage.Format(STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELEMETRYREPORTS));
			SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
			nFileData[9].RemoveAll();
			nFileData[10].RemoveAll();
			break;
		}
		if (!IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_REPORTS_TELEMETRY) && CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE))
		{
			nFileData[9].RemoveAll();
			nFileData[10].RemoveAll();
		}
		break;
	}
	for (; IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_PRINTING) || CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE); )
	{
		if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_PRINTING) && (!GetPrintProfiles(pPrintProfiles) || !pPrintProfiles.Map(nFileData[11])))
		{
			szMessage.Format(STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_PRINTPROFILES));
			SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
			nFileData[11].RemoveAll();
			break;
		}
		if (!IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_PRINTING) && CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE)) nFileData[11].RemoveAll();
		break;
	}
	for (; IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_AUDITIONS) || CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE); )
	{
		if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_AUDITIONS) && (!GetAuditionProfiles(pAuditionProfiles) || !pAuditionProfiles.Map(nFileData[12])))
		{
			szMessage.Format(STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_AUDITIONPROFILES));
			SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
			nFileData[12].RemoveAll();
			break;
		}
		if (!IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_AUDITIONS) && CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE)) nFileData[12].RemoveAll();
		break;
	}
	for (; IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_NOTIFICATIONS) || CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE); )
	{
		if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_NOTIFICATIONS) && (!GetNotificationProfiles(pNotificationProfiles) || !pNotificationProfiles.Map(nFileData[13])))
		{
			szMessage.Format(STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_NOTIFICATIONPROFILES));
			SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
			nFileData[13].RemoveAll();
			break;
		}
		if (!IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_NOTIFICATIONS) && CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE)) nFileData[13].RemoveAll();
		break;
	}
	for (; IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_DOWNLOADS) || CheckAccountPrivilege(PRIVILEGE_TOOLSDOWNLOADPROFILES_CHANGE); )
	{
		if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_DOWNLOADS) && (!GetToolsDownloadProfiles(pToolsDownloadProfiles) || !pToolsDownloadProfiles.Map(nFileData[14])))
		{
			szMessage.Format(STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_DOWNLOADPROFILES));
			SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
			nFileData[14].RemoveAll();
			break;
		}
		if (!IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_DOWNLOADS) && CheckAccountPrivilege(PRIVILEGE_TOOLSDOWNLOADPROFILES_CHANGE)) nFileData[14].RemoveAll();
		break;
	}
	for (bResult = (nFileData[0].GetSize() > 0 || nFileData[1].GetSize() > 0 || nFileData[2].GetSize() > 0 || nFileData[3].GetSize() > 0 || nFileData[4].GetSize() > 0 || nFileData[5].GetSize() > 0 || nFileData[6].GetSize() > 0 || nFileData[7].GetSize() > 0 || nFileData[8].GetSize() > 0 || nFileData[9].GetSize() > 0 || nFileData[10].GetSize() > 0 || nFileData[11].GetSize() > 0 || nFileData[12].GetSize() > 0 || nFileData[13].GetSize() > 0 || nFileData[14].GetSize() > 0) ? WriteExportFile(szFileName, nFileData[0], nFileData[1], nFileData[2], nFileData[3], nFileData[4], nFileData[5], nFileData[6], nFileData[7], nFileData[8], nFileData[9], nFileData[10], nFileData[11], nFileData[12], nFileData[13], nFileData[14]) : FALSE; IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SCHEDULES_LOGIN) && nFileData[0].GetSize() > 0; )
	{
		szMessage.Format((bResult) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_LOGINSCHEDULE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
		break;
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELEMETRY) && nFileData[1].GetSize() > 0)
	{
		szMessage.Format((bResult) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELEMETRYSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELECOMMAND) && nFileData[2].GetSize() > 0)
	{
		szMessage.Format((bResult) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELECOMMANDSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_MEMORYDUMPS) && nFileData[3].GetSize() > 0)
	{
		szMessage.Format((bResult) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_MEMORYDUMPSSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TPEP) && nFileData[4].GetSize() > 0)
	{
		szMessage.Format((bResult) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TPEPSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_PFLP) && nFileData[5].GetSize() > 0)
	{
		szMessage.Format((bResult) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_PFLPSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_AUTOMATION) && nFileData[6].GetSize() > 0)
	{
		szMessage.Format((bResult) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_AUTOMATIONSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_ALERTS_SYSTEM) && nFileData[7].GetSize() > 0)
	{
		szMessage.Format((bResult) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_SYSTEMALERTS));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_EVENTS_TELEMETRY) && nFileData[8].GetSize() > 0)
	{
		szMessage.Format((bResult) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELEMETRYEVENTS));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_REPORTS_TELEMETRY) && nFileData[9].GetSize() > 0 && nFileData[10].GetSize() > 0)
	{
		szMessage.Format((bResult) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELEMETRYREPORTS));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_PRINTING) && nFileData[11].GetSize() > 0)
	{
		szMessage.Format((bResult) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_PRINTPROFILES));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_AUDITIONS) && nFileData[12].GetSize() > 0)
	{
		szMessage.Format((bResult) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_AUDITIONPROFILES));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_NOTIFICATIONS) && nFileData[13].GetSize() > 0)
	{
		szMessage.Format((bResult) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_NOTIFICATIONPROFILES));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_DOWNLOADS) && nFileData[14].GetSize() > 0)
	{
		szMessage.Format((bResult) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_EXPORT_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_DOWNLOADPROFILES));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsMiscellaneousPage::OnDoUpdate()
{
	CString  szMessage;
	CHourglassCursor  cCursor;

	for (SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_RESETCONTENT); IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SCHEDULES_LOGIN); )
	{
		szMessage.Format((UpdateLoginOptions()) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_LOGINSCHEDULE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
		break;
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELEMETRY))
	{
		szMessage.Format((GetTMService()->UpdateServiceInfo()) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELEMETRYSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TELECOMMAND))
	{
		szMessage.Format((GetTCService()->UpdateServiceInfo()) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELECOMMANDSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_MEMORYDUMPS))
	{
		szMessage.Format((GetMemoryDumpsService()->UpdateServiceInfo()) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_MEMORYDUMPSSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_TPEP))
	{
		szMessage.Format((GetTPEPService()->UpdateServiceInfo()) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TPEPSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_PFLP))
	{
		szMessage.Format((GetPFLPService()->UpdateServiceInfo()) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_PFLPSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_SERVICES_AUTOMATION))
	{
		szMessage.Format((GetAutomationService()->UpdateServiceInfo()) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_AUTOMATIONSERVICE));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_ALERTS_SYSTEM))
	{
		szMessage.Format((UpdateSystemAlerts()) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_SYSTEMALERTS));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_EVENTS_TELEMETRY))
	{
		szMessage.Format((UpdateTelemetryEvents()) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELEMETRYEVENTS));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_REPORTS_TELEMETRY))
	{
		szMessage.Format((UpdateTelemetryReports() && UpdateTelemetryHistoricalReports()) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_TELEMETRYREPORTS));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_PRINTING))
	{
		szMessage.Format((UpdatePrintProfiles()) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_PRINTPROFILES));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_AUDITIONS))
	{
		szMessage.Format((UpdateAuditionProfiles()) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_AUDITIONPROFILES));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_NOTIFICATIONS))
	{
		szMessage.Format((UpdateNotificationProfiles()) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_NOTIFICATIONPROFILES));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	if (IsDlgButtonChecked(IDC_SETTINGS_MISCELLANEOUSPAGE_PROFILES_DOWNLOADS))
	{
		szMessage.Format((UpdateToolsDownloadProfiles()) ? STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_SUCCESS) : STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGE_UPDATE_FAILURE), STRING(IDS_SETTINGS_MISCELLANEOUSPAGE_MESSAGEITEM_DOWNLOADPROFILES));
		SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szMessage));
	}
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS)->EnableWindow((SendDlgItemMessage(IDC_SETTINGS_MISCELLANEOUSPAGE_RESULTS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSettingsMiscellaneousPage::OnEditchangeImportFileName()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOIMPORT)->EnableWindow(CanImport());
}

void CSettingsMiscellaneousPage::OnEditchangeExportFileName()
{
	GetDlgItem(IDC_SETTINGS_MISCELLANEOUSPAGE_DOEXPORT)->EnableWindow(CanExport());
}


/////////////////////////////////////////////////////////////////////////////
// CSettingsTabCtrl

IMPLEMENT_DYNCREATE(CSettingsTabCtrl, CTabCtrl)

CSettingsDialog *CSettingsTabCtrl::GetParent() CONST
{
	return((CSettingsDialog *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CSettingsTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CSettingsTabCtrl)
	ON_WM_KEYDOWN()
	ON_WM_LBUTTONDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSettingsTabCtrl message handlers

void CSettingsTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	INT  nIndex;
	INT  nCount;
	CWnd  *pWnd;

	if ((nChar == VK_LEFT  &&  GetCurSel() > 0) || (nChar == VK_RIGHT  &&  GetCurSel() < GetItemCount() - 1))
	{
		for (nIndex = (nChar == VK_LEFT) ? (GetCurSel() - 1) : (GetCurSel() + 1), nCount = GetItemCount(); nIndex >= 0 && nIndex < nCount; )
		{
			if (!GetParent()->CheckPageAccessibility(nIndex))
			{
				if (nChar == VK_RIGHT  &&  nIndex < nCount - 1)
				{
					nIndex++;
					continue;
				}
				if (nChar == VK_LEFT  &&  nIndex > 0)
				{
					nIndex--;
					continue;
				}
				CAudioDevice::AlertBySound();
				return;
			}
			GetParent()->SetActivePage(nIndex);
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}

void CSettingsTabCtrl::OnLButtonDown(UINT nFlags, CPoint point)
{
	INT  nIndex;
	INT  nCount;
	CRect  rTab;

	for (nIndex = 0, nCount = GetItemCount(), SetFocus(); nIndex < nCount; nIndex++)
	{
		if (GetItemRect(nIndex, rTab) && rTab.PtInRect(point))
		{
			if (!GetParent()->CheckPageAccessibility(nIndex))
			{
				CAudioDevice::AlertBySound();
				return;
			}
			break;
		}
	}
	CTabCtrl::OnLButtonDown(nFlags, point);
}


/////////////////////////////////////////////////////////////////////////////
// CSettingsDialog

IMPLEMENT_DYNCREATE(CSettingsDialog, CLocalePropertySheetDialog)

CSettingsDialog::CSettingsDialog(CWnd *pParentWnd) : CLocalePropertySheetDialog(STRING(IDS_SETTINGSDIALOG_TITLE), pParentWnd)
{
	AddPage(&m_pageDisplayArea);
	AddPage(&m_pageEventLogs);
	AddPage(&m_pagePrinting);
	AddPage(&m_pageAudition);
	AddPage(&m_pageNotifications);
	AddPage(&m_pageMiscellaneous);
}

BOOL CSettingsDialog::CheckPageAccessibility(INT nIndex) CONST
{
	LPVOID  pPage;

	return((nIndex >= 0 && nIndex < m_pages.GetSize()) ? ((((pPage = m_pages.GetAt(nIndex)) == &m_pageDisplayArea && (CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_BROWSE) || CheckAccountPrivilege(PRIVILEGE_DISPLAYAREA_CHANGE))) || (pPage == &m_pageEventLogs && (CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTEBROWSE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGNAME_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGPOLICY_CHANGE) || CheckAccountPrivilege(PRIVILEGE_EVENTLOGSIZE_CHANGE))) || (pPage == &m_pagePrinting && (CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_BROWSE) || CheckAccountPrivilege(PRIVILEGE_PRINTPROFILES_CHANGE))) || (pPage == &m_pageAudition && (CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_BROWSE) || CheckAccountPrivilege(PRIVILEGE_AUDITIONPROFILES_CHANGE))) || (pPage == &m_pageNotifications && (CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_BROWSE) || CheckAccountPrivilege(PRIVILEGE_NOTIFICATIONPROFILES_CHANGE))) || (pPage == &m_pageMiscellaneous && (CheckAccountPrivilege(PRIVILEGE_MISCELLANEOUS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_MISCELLANEOUS_CHANGE)))) ? TRUE : FALSE) : FALSE);
}

BEGIN_MESSAGE_MAP(CSettingsDialog, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CSettingsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDHELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSettingsDialog message handlers

BOOL CSettingsDialog::OnInitDialog()
{
	INT  nIndex;
	INT  nCount;
	CHourglassCursor  cCursor;

	CLocalePropertySheetDialog::OnInitDialog();
	if (m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()))
	{
		for (nIndex = 0, nCount = GetPageCount(); nIndex < nCount; nIndex++)
		{
			if (CheckPageAccessibility(nIndex))
			{
				SetActivePage(nIndex);
				break;
			}
		}
		m_wndTabCtrl.SetFocus();
		return FALSE;
	}
	return TRUE;
}

void CSettingsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	m_pageDisplayArea.Update();
	m_pageEventLogs.Update();
	m_pagePrinting.Update();
	m_pageAudition.Update();
	m_pageNotifications.Update();
	m_pageMiscellaneous.Update();
	CLocalePropertySheetDialog::OnOK();
}

BOOL CSettingsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CSettingsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CAccountsDialog dialog

IMPLEMENT_DYNCREATE(CAccountsDialog, CLocaleDialog)

CAccountsDialog::CAccountsDialog(CWnd *pParentWnd) : CLocaleDialog(CAccountsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CAccountsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CAccountsDialog::EnumComputers()
{
	INT  nComputer;
	INT  nComputers;
	CString  szComputer;
	CStringArray  szComputers;
	CComputerToken  cComputerToken;

	for (szComputer = cComputerToken.GetComputerName(), szComputers.Add(szComputer); CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_REMOTEBROWSE) || CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_REMOTECHANGE); )
	{
		GetNetworkBrowseService()->EnumNetworkComputers(szComputers);
		break;
	}
	for (nComputer = 0, nComputers = (INT)szComputers.GetSize(), SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_RESETCONTENT); nComputer < nComputers; nComputer++)
	{
		if (CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_CHANGE))
		{
			SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
			continue;
		}
	}
	SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer), 0));
	GetDlgItem(IDC_ACCOUNTS_DETAILS)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CAccountsDialog::EnumSpacecrafts()
{
	INT  nAccount;
	INT  nAccounts;
	INT  nSpacecraft;
	INT  nSpacecrafts;
	INT  nNetworkDisk;
	INT  nNetworkDisks;
	CString  szComputer;
	CString  szSpacecraft;
	CTimeKey  tValidity[2];
	CStringArray  szSpacecrafts;
	CStringArray  szNetworkDisks;
	CUserAccounts  cUserAccounts;
	CAccountToken  *pAccountToken[2];
	CAccountTokens  pAccountTokens;
	CNetworkComputerInfo  cNetworkComputerInfo;

	GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowText(szComputer);
	for (nAccount = 0, nAccounts = (cUserAccounts.SetComputerName(szComputer)) ? cUserAccounts.EnumAccounts(pAccountTokens) : 0, m_pAccounts[0].RemoveAll(); nAccount < nAccounts; nAccount++)
	{
		if ((pAccountToken[0] = pAccountTokens.GetAt(nAccount)) != (CAccountToken *)NULL)
		{
			if ((pAccountToken[1] = m_pAccounts[1].GetAt(m_pAccounts[1].Find(pAccountToken[0]))))
			{
				if (!pAccountToken[1]->GetValidity(tValidity[0], tValidity[1]))
				{
					pAccountTokens.RemoveAt(nAccount);
					delete pAccountToken[0];
					nAccounts--;
					nAccount--;
					continue;
				}
			}
			for (; !pAccountToken[0]->GetComputerName().CompareNoCase(GetAccountComputerName()) && pAccountToken[0]->GetSpacecraftName() == GetAccountSpacecraftName() && pAccountToken[0]->GetUserName() == GetAccountUserName() && pAccountToken[0]->GetDatabase() == GetAccountDatabase(); )
			{
				GetAccount(pAccountToken[0]);
				break;
			}
			if (m_pAccounts[0].Add(pAccountToken[0]) >= 0)
			{
				pAccountTokens.RemoveAt(nAccount);
				nAccounts--;
				nAccount--;
				continue;
			}
		}
	}
	for (nNetworkDisk = 0, nNetworkDisks = (GetNetworkBrowseService()->IsComputerOnNetwork(szComputer) && cNetworkComputerInfo.SetComputerName(szComputer) && !cNetworkComputerInfo.IsHost()) ? cNetworkComputerInfo.EnumNetworkComputerDisks(szNetworkDisks) : 0, SendDlgItemMessage(IDC_ACCOUNTS_SPACECRAFTNAME, CB_RESETCONTENT); SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_GETCOUNT) > 0 && (nNetworkDisk < nNetworkDisks || !nNetworkDisk); nNetworkDisk++)
	{
		for (nSpacecraft = 0, nSpacecrafts = (CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_REMOTEBROWSE) || CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_REMOTECHANGE)) ? ((cNetworkComputerInfo.IsHost() || nNetworkDisk < nNetworkDisks) ? EnumAccounts((nNetworkDisk < nNetworkDisks) ? (LPCTSTR)szNetworkDisks.GetAt(nNetworkDisk) : (LPCTSTR)NULL, szSpacecrafts) : (INT)m_pAccounts[0].GetSize()) : 0; nSpacecraft < nSpacecrafts; nSpacecraft++)
		{
			if (SendDlgItemMessage(IDC_ACCOUNTS_SPACECRAFTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szSpacecraft = (cNetworkComputerInfo.IsHost() || nNetworkDisk < nNetworkDisks) ? szSpacecrafts.GetAt(nSpacecraft) : m_pAccounts[0].GetAt(nSpacecraft)->GetSpacecraftName())) == CB_ERR  &&  !szSpacecraft.IsEmpty())
			{
				SendDlgItemMessage(IDC_ACCOUNTS_SPACECRAFTNAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szSpacecraft);
				continue;
			}
		}
	}
	SendDlgItemMessage(IDC_ACCOUNTS_SPACECRAFTNAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_ACCOUNTS_SPACECRAFTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)GetAccountSpacecraftName()), 0));
	GetDlgItem(IDC_ACCOUNTS_SPACECRAFTNAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTS_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTS_SPACECRAFTNAME)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTS_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_ACCOUNTS_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CAccountsDialog::EnumUsers()
{
	INT  nUser;
	INT  nUsers;
	INT  nProfile;
	INT  nProfiles;
	INT  nDatabase;
	INT  nDatabases;
	CString  szUser;
	CString  szComputer[2];
	CString  szSpacecraft[2];
	CStringArray  szUsers;
	CAccountToken  *pAccountToken;
	CDatabaseProfiles  *pDatabaseProfiles;
	CDatabaseProfileInfo  *pDatabaseProfileInfo;

	GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowText(szComputer[0]);
	GetDlgItem(IDC_ACCOUNTS_SPACECRAFTNAME)->GetWindowText(szSpacecraft[0]);
	for (nUser = 0, nUsers = (SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_ACCOUNTS_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? (INT)m_pAccounts[0].GetSize() : 0, SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_RESETCONTENT); nUser < nUsers; nUser++)
	{
		if ((pAccountToken = m_pAccounts[0].GetAt(nUser)) && pAccountToken->GetOwner(szComputer[1], szSpacecraft[1], szUser))
		{
			if (!szComputer[0].CompareNoCase(szComputer[1]) && !szSpacecraft[0].CompareNoCase(szSpacecraft[1]))
			{
				SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szUser);
				continue;
			}
		}
	}
	for (nProfile = 0, nProfiles = (SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_ACCOUNTS_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? (INT)m_pDatabases[0].GetSize() : 0; nProfile < nProfiles; nProfile++)
	{
		for (nDatabase = 0, nDatabases = ((pDatabaseProfiles = (CDatabaseProfiles *)m_pDatabases[0].GetAt(nProfile))) ? (INT)pDatabaseProfiles->GetSize() : 0; nDatabase < nDatabases; nDatabase++)
		{
			if ((pDatabaseProfileInfo = pDatabaseProfiles->GetAt(nDatabase)) && !pDatabaseProfileInfo->GetServer().CompareNoCase(szComputer[0]) && !pDatabaseProfileInfo->GetSpacecraft().CompareNoCase(szSpacecraft[0]))
			{
				for (nUser = 0, nUsers = pDatabaseProfileInfo->GetUsers(szUsers); nUser < nUsers; nUser++)
				{
					if (SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szUsers.GetAt(nUser)) < 0)
					{
						SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szUsers.GetAt(nUser));
						continue;
					}
				}
			}
		}
	}
	SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)GetAccountUserName()), 0));
	GetDlgItem(IDC_ACCOUNTS_USERNAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTS_USERNAME)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CAccountsDialog::EnumGroups()
{
	INT  nGroup;
	INT  nGroups;
	CString  szUser;
	CString  szComputer;
	CStringArray  szGroups;
	CAccounts  cAccounts;

	GetDlgItem(IDC_ACCOUNTS_USERNAME)->GetWindowText(szUser);
	GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowText(szComputer);
	for (nGroup = 0, nGroups = (cAccounts.SetComputerName(szComputer)) ? cAccounts.EnumGroupMemberShips(szUser, szGroups) : 0; SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_GETCOUNT) > 0 && nGroup < nGroups; nGroup++)
	{
		if (SendDlgItemMessage(IDC_ACCOUNTS_GROUPMEMBER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szGroups.GetAt(nGroup)) < 0) break;
		if (SendDlgItemMessage(IDC_ACCOUNTS_GROUPMEMBER, CB_GETCOUNT) != szGroups.GetSize()) break;
	}
	if (SendDlgItemMessage(IDC_ACCOUNTS_GROUPMEMBER, CB_GETCOUNT) != nGroups)
	{
		for (nGroup = 0, SendDlgItemMessage(IDC_ACCOUNTS_GROUPMEMBER, CB_RESETCONTENT); SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_GETCOUNT) > 0 && nGroup < nGroups; nGroup++)
		{
			SendDlgItemMessage(IDC_ACCOUNTS_GROUPMEMBER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szGroups.GetAt(nGroup));
			continue;
		}
	}
	SendDlgItemMessage(IDC_ACCOUNTS_GROUPMEMBER, CB_SETCURSEL);
	GetDlgItem(IDC_ACCOUNTS_GROUPMEMBER_STATIC)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTS_GROUPMEMBER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTS_GROUPMEMBER)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTS_GROUPMEMBER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_ACCOUNTS_GROUPMEMBER, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
}

BOOL CAccountsDialog::EnumRights()
{
	CUIntArray  nPrivileges;
	CAccountToken  *pAccountToken;

	return((((pAccountToken = FindAccount(ACCOUNTS_TYPE_ANY)) && pAccountToken->GetPrivileges(nPrivileges) >= 0) || GetAccountPrivileges(nPrivileges)) ? EnumRights(nPrivileges) : FALSE);
}
BOOL CAccountsDialog::EnumRights(UINT nRights)
{
	CUIntArray  nPrivileges;
	CAccountToken  cAccountToken;

	return((cAccountToken.GetDefaultPrivileges(nRights, nPrivileges) >= 0) ? EnumRights(nPrivileges) : FALSE);
}
BOOL CAccountsDialog::EnumRights(CONST CUIntArray &nRights)
{
	INT  nPrivilege;
	INT  nPrivileges;
	CString  szPrivilege;
	CAccountToken  cAccountToken;

	for (nPrivilege = 0, nPrivileges = (INT)nRights.GetSize(), m_nPrivileges.Copy(nRights), SendDlgItemMessage(IDC_ACCOUNTS_RIGHTS, LB_RESETCONTENT); SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_GETCOUNT) > 0 && nPrivilege < nPrivileges; nPrivilege++)
	{
		if (cAccountToken.LookupPrivilege(m_nPrivileges.GetAt(nPrivilege), szPrivilege))
		{
			SendDlgItemMessage(IDC_ACCOUNTS_RIGHTS, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szPrivilege);
			continue;
		}
	}
	CheckDlgButton(IDC_ACCOUNTS_PROFILES_ADMINISTRATORS, CheckPrivilegeProfile(PRIVILEGE_PROFILE_ADMINISTRATORS, m_nPrivileges));
	CheckDlgButton(IDC_ACCOUNTS_PROFILES_OPERATORS, CheckPrivilegeProfile(PRIVILEGE_PROFILE_OPERATORS, m_nPrivileges));
	CheckDlgButton(IDC_ACCOUNTS_PROFILES_USERS, CheckPrivilegeProfile(PRIVILEGE_PROFILE_USERS, m_nPrivileges));
	CheckDlgButton(IDC_ACCOUNTS_PROFILES_GUESTS, CheckPrivilegeProfile(PRIVILEGE_PROFILE_GUESTS, m_nPrivileges));
	CheckDlgButton(IDC_ACCOUNTS_PROFILES_CUSTOM, !IsDlgButtonChecked(IDC_ACCOUNTS_PROFILES_ADMINISTRATORS) && !IsDlgButtonChecked(IDC_ACCOUNTS_PROFILES_OPERATORS) && !IsDlgButtonChecked(IDC_ACCOUNTS_PROFILES_USERS) && !IsDlgButtonChecked(IDC_ACCOUNTS_PROFILES_GUESTS));
	GetDlgItem(IDC_ACCOUNTS_PROFILES)->EnableWindow();
	GetDlgItem(IDC_ACCOUNTS_PROFILES_ADMINISTRATORS)->EnableWindow();
	GetDlgItem(IDC_ACCOUNTS_PROFILES_OPERATORS)->EnableWindow();
	GetDlgItem(IDC_ACCOUNTS_PROFILES_USERS)->EnableWindow();
	GetDlgItem(IDC_ACCOUNTS_PROFILES_GUESTS)->EnableWindow();
	GetDlgItem(IDC_ACCOUNTS_PROFILES_CUSTOM)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTS_PROFILES_CUSTOM));
	GetDlgItem(IDC_ACCOUNTS_RIGHTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTS_RIGHTS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTS_RIGHTS)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTS_RIGHTS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_ACCOUNTS_RIGHTS, LB_GETCOUNT) >= 0) ? TRUE : FALSE);
}

BOOL CAccountsDialog::EnumDatabases()
{
	CString  szComputer;
	CDatabaseProfiles  pDatabases;
	CDatabaseProfiles  *pDatabaseProfiles[2];
	CDatabases  cDatabases;

	if (!FindDatabases())
	{
		if ((pDatabaseProfiles[0] = new CDatabaseProfiles))
		{
			if ((pDatabaseProfiles[1] = new CDatabaseProfiles))
			{
				GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowText(szComputer);
				if (cDatabases.SetComputerName(szComputer) && cDatabases.GetDatabases(pDatabases, TRUE))
				{
					pDatabaseProfiles[0]->Copy(&pDatabases);
					pDatabaseProfiles[1]->Copy(&pDatabases);
					m_pDatabases[0].Add(pDatabaseProfiles[0]);
					m_pDatabases[1].Add(pDatabaseProfiles[1]);
					m_szDatabases.Add(szComputer);
					return TRUE;
				}
				delete pDatabaseProfiles[1];
			}
			delete pDatabaseProfiles[0];
		}
		return FALSE;
	}
	return TRUE;
}

INT CAccountsDialog::EnumAccounts(LPCTSTR pszPath, CStringArray &szAccounts)
{
	BOOL  bFound;
	LPTSTR  pszName;
	CString  szName;
	CString  szFileName;
	CString  szDirectory;
	CFileFindEx  cFileFind;
	CModuleToken  cModuleToken;
	CVersionInfo  cVersionInfo;

	for (szDirectory = (!AfxIsValidString(pszPath)) ? cModuleToken.GetModuleFileRoot() : pszPath; SearchPath(pszPath, (szFileName = cVersionInfo.QueryOriginalFileName()), (LPCTSTR)NULL, 0, (LPTSTR)NULL, &pszName); )
	{
		if (cFileFind.FindFile(szDirectory + STRING(IDS_FILENAME_DLL)))
		{
			for (; (bFound = cFileFind.FindNextFile()) >= 0; )
			{
				if (!cFileFind.IsDots() && !cFileFind.IsDirectory())
				{
					for (; TestAccount(cFileFind.GetFilePath(), szName); )
					{
						szAccounts.Add(szName);
						break;
					}
				}
				if (!bFound) break;
			}
			cFileFind.Close();
		}
		break;
	}
	if (!szAccounts.GetSize())
	{
		if (cFileFind.FindFile(szDirectory + STRING(IDS_FILENAME_ALL)))
		{
			for (; (bFound = cFileFind.FindNextFile()) >= 0; )
			{
				if (!cFileFind.IsDots() && cFileFind.IsDirectory())
				{
					if (EnumAccounts(cFileFind.GetFilePath(), szAccounts) > 0) break;
					continue;
				}
				if (!bFound) break;
			}
			cFileFind.Close();
		}
	}
	return((INT)szAccounts.GetSize());
}

BOOL CAccountsDialog::TestAccount(LPCTSTR pszAccount, CString &szName)
{
	CString  szFileDescription;
	CVersionInfo  cVersionInfo[2];

	if (cVersionInfo[0].SetModuleName(GetLibraryModuleName()) && cVersionInfo[1].SetModuleName(pszAccount) && cVersionInfo[0].QueryCompanyName() == cVersionInfo[1].QueryCompanyName() && cVersionInfo[0].QueryProductName() == cVersionInfo[1].QueryProductName() && cVersionInfo[0].QueryFileVersion() == cVersionInfo[1].QueryFileVersion() && cVersionInfo[0].QueryInternalName() != cVersionInfo[1].QueryInternalName())
	{
		for (szFileDescription.Format(STRING(IDS_DATABASE_DRIVER_APPENDIX), (LPCTSTR)cVersionInfo[1].QueryInternalName()); szFileDescription == cVersionInfo[1].QueryFileDescription(); )
		{
			szName = cVersionInfo[1].QueryInternalName();
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CAccountsDialog::SaveAccountInfo(BOOL bUpdate)
{
	INT  nUser;
	INT  nUsers;
	INT  nIndex;
	INT  nProfile;
	INT  nProfiles;
	INT  nDatabase;
	INT  nDatabases;
	CString  szUser;
	CString  szDatabase;
	CString  szPassword;
	CString  szComputer;
	CString  szSpacecraft;
	CTimeKey  tValidity[2];
	CUIntArray  nPrivileges;
	CStringArray  szUsers;
	CStringArray  szPasswords;
	CAccountToken  *pAccountToken[2];
	CDatabaseProfiles  *pDatabaseProfiles;
	CDatabaseProfileInfo  *pDatabaseProfileInfo;

	if (CheckAccountInfo())
	{
		if (!FindAccount(ACCOUNTS_TYPE_NEW))
		{
			if ((pAccountToken[0] = new CAccountToken))
			{
				if ((pAccountToken[1] = FindAccount(ACCOUNTS_TYPE_OLD)))
				{
					for (pAccountToken[0]->Copy(pAccountToken[1]); m_pAccounts[1].Add(pAccountToken[0]) < 0; )
					{
						delete pAccountToken[0];
						return FALSE;
					}
				}
				else
				{
					for (GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowText(szComputer), GetDlgItem(IDC_ACCOUNTS_SPACECRAFTNAME)->GetWindowText(szSpacecraft), GetDlgItem(IDC_ACCOUNTS_USERNAME)->GetWindowText(szUser), pAccountToken[0]->SetOwner(szComputer, szSpacecraft, szUser), pAccountToken[0]->SetDatabase((pAccountToken[0]->IsHost()) ? GetAccountDatabase() : EMPTYSTRING); m_pAccounts[1].Add(pAccountToken[0]) < 0; )
					{
						delete pAccountToken[0];
						return FALSE;
					}
					for (nDatabase = 0, nDatabases = (INT)m_pDatabases[0].GetSize(); nDatabase < nDatabases; nDatabase++)
					{
						if ((pDatabaseProfiles = (CDatabaseProfiles *)m_pDatabases[0].GetAt(nDatabase)))
						{
							for (nProfile = 0, nProfiles = (INT)pDatabaseProfiles->GetSize(); nProfile < nProfiles; nProfile++)
							{
								if ((pDatabaseProfileInfo = pDatabaseProfiles->GetAt(nProfile)))
								{
									if (pDatabaseProfileInfo->GetName() == pAccountToken[0]->GetDatabase() && !pDatabaseProfileInfo->GetServer().CompareNoCase(pAccountToken[0]->GetComputerName()) && !pDatabaseProfileInfo->GetSpacecraft().CompareNoCase(pAccountToken[0]->GetSpacecraftName()))
									{
										for (nUser = 0, nUsers = pDatabaseProfileInfo->GetUsers(szUsers, szPasswords, nPrivileges); nUser < nUsers; nUser++)
										{
											if (szUsers.GetAt(nUser) == szUser) break;
											continue;
										}
										if (nUser == nUsers)
										{
											nPrivileges.Add(0);
											szUsers.Add(pAccountToken[0]->GetUserName());
											szPasswords.Add(pAccountToken[0]->GetPassword());
											pDatabaseProfileInfo->SetUsers(szUsers, szPasswords, nPrivileges);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if ((pAccountToken[0] = FindAccount(ACCOUNTS_TYPE_NEW)))
		{
			if (CheckPrivileges(PRIVILEGE_ACCOUNTRIGHTS_CHANGE))
			{
				nPrivileges.Copy(m_nPrivileges);
				pAccountToken[0]->SetPrivileges(nPrivileges);
				pAccountToken[0]->SetUnique(IsDlgButtonChecked(IDC_ACCOUNTS_UNIQUE_USER));
			}
			if (CheckPrivileges(PRIVILEGE_ACCOUNTVALIDITY_CHANGE))
			{
				pAccountToken[0]->GetValidity(tValidity[0], tValidity[1]);
				pAccountToken[0]->SetValidity((IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_LIMITED)) ? tValidity[0] : 0, ((IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_UNLIMITED) || IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_LIMITED)) ? ((IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_LIMITED)) ? (SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY + Spinbox_GetPos(GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS)) + 1)) : 0) : 1));
			}
			if (CheckPrivileges(PRIVILEGE_ACCOUNTPASSWORD_CHANGE))
			{
				GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONTENTS)->GetWindowText(szPassword);
				pAccountToken[0]->SetPassword((IsDlgButtonChecked(IDC_ACCOUNTS_PASSWORD_NONE) || IsDlgButtonChecked(IDC_ACCOUNTS_PASSWORD_USE)) ? (LPCTSTR)szPassword : EMPTYSTRING);
			}
			if (!pAccountToken[0]->GetValidity(tValidity[0], tValidity[1]))
			{
				pAccountToken[0]->SetDefaultPrivileges(PRIVILEGE_PROFILE_DEFAULT);
				pAccountToken[0]->SetPassword(EMPTYSTRING);
			}
			if (bUpdate)
			{
				if ((pAccountToken[1] = ((pAccountToken[0] = m_pAccounts[1].GetAt((nIndex = m_pAccounts[1].Find(pAccountToken[0]))))) ? m_pAccounts[0].GetAt(m_pAccounts[0].Find(pAccountToken[0])) : (CAccountToken *)NULL) && pAccountToken[0]->Compare(pAccountToken[1]))
				{
					m_pAccounts[1].RemoveAt(nIndex);
					delete pAccountToken[0];
				}
			}
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CAccountsDialog::UpdateAccountInfo()
{
	return((FindAccount(ACCOUNTS_TYPE_ANY)) ? SaveAccountInfo(TRUE) : FALSE);
}

VOID CAccountsDialog::ShowAccountInfo()
{
	CString  szComputer;
	CString  szPassword;
	CString  szSpacecraft;
	CTimeKey  tValidity[2];
	CAccountToken  *pAccountToken;
	CDatabaseProfiles  *pDatabaseProfiles;

	if ((pAccountToken = FindAccount(ACCOUNTS_TYPE_ANY)))
	{
		if (pAccountToken->GetValidity(tValidity[0], tValidity[1]) && EnumRights() && EnumGroups())
		{
			CheckDlgButton(IDC_ACCOUNTS_UNIQUE_USER, pAccountToken->IsUnique());
			CheckRadioButton(IDC_ACCOUNTS_PASSWORD_NONE, IDC_ACCOUNTS_PASSWORD_USE, ((szPassword = pAccountToken->GetPassword()).IsEmpty()) ? IDC_ACCOUNTS_PASSWORD_NONE : IDC_ACCOUNTS_PASSWORD_USE);
			CheckRadioButton(IDC_ACCOUNTS_VALIDITY_UNLIMITED, IDC_ACCOUNTS_VALIDITY_LIMITED, (!tValidity[0].GetTime() && !tValidity[1].GetTime()) ? IDC_ACCOUNTS_VALIDITY_UNLIMITED : IDC_ACCOUNTS_VALIDITY_LIMITED);
			SetDlgItemText(IDC_ACCOUNTS_PASSWORD_CONTENTS, (szPassword != CString(CR)) ? (LPCTSTR)szPassword : EMPTYSTRING);
			SetDlgItemText(IDC_ACCOUNTS_PASSWORD_CONFIRMATION, (szPassword != CString(CR)) ? (LPCTSTR)szPassword : EMPTYSTRING);
			Spinbox_SetRange(GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS), ACCOUNTS_MINIMUMVALIDITY, ACCOUNTS_MAXIMUMVALIDITY);
			Spinbox_SetPos(GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS), (tValidity[0] < tValidity[1]) ? ((tValidity[1].GetTime() - CTime::GetCurrentTime().GetTime()) / SECONDSPERDAY) : ACCOUNTS_DEFAULTVALIDITY);
			GetDlgItem(IDC_ACCOUNTS_PRIVILEGES)->EnableWindow();
			GetDlgItem(IDC_ACCOUNTS_DATABASES)->EnableWindow(((pDatabaseProfiles = FindDatabases()) && pDatabaseProfiles->GetSize() > 0) ? CheckPrivileges(PRIVILEGE_ACCOUNTDATABASES_CHANGE) : FALSE);
			GetDlgItem(IDC_ACCOUNTS_RIGHTS_CHANGE)->EnableWindow(CheckPrivileges(PRIVILEGE_ACCOUNTRIGHTS_CHANGE));
			GetDlgItem(IDC_ACCOUNTS_UNIQUE_USER)->EnableWindow();
			GetDlgItem(IDC_ACCOUNTS_PASSWORD)->EnableWindow();
			GetDlgItem(IDC_ACCOUNTS_PASSWORD_NONE)->EnableWindow();
			GetDlgItem(IDC_ACCOUNTS_PASSWORD_USE)->EnableWindow();
			GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONTENTS)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTS_PASSWORD_USE));
			GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONFIRMATION_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTS_PASSWORD_USE));
			GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONFIRMATION)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTS_PASSWORD_USE));
			GetDlgItem(IDC_ACCOUNTS_VALIDITY)->EnableWindow();
			GetDlgItem(IDC_ACCOUNTS_VALIDITY_UNLIMITED)->EnableWindow();
			GetDlgItem(IDC_ACCOUNTS_VALIDITY_LIMITED)->EnableWindow();
			GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_LIMITED));
			GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_LIMITED));
			GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE_STATIC)->EnableWindow();
			GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE_NONE)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_UNLIMITED));
			GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_LIMITED));
			GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE)->SetWindowText((IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_LIMITED)) ? (LPCTSTR)CTimeKey(CTime::GetCurrentTime().GetTime() + Spinbox_GetPos(GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS))*SECONDSPERDAY).FormatGmt(IDS_TIMEKEY_DATEFORMAT) : EMPTYSTRING);
			GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE_NONE)->ShowWindow((IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_UNLIMITED)) ? SW_SHOWNORMAL : SW_HIDE);
			GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE)->ShowWindow((IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_LIMITED)) ? SW_SHOWNORMAL : SW_HIDE);
			GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow((!pAccountToken  &&  CheckAccountInfo()) ? CheckPrivileges() : FALSE);
			GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow((!pAccountToken->IsAdministrator()) ? CheckPrivileges() : FALSE);
			AdjustToPrivileges();
			return;
		}
	}
	for (GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowText(szComputer), GetDlgItem(IDC_ACCOUNTS_SPACECRAFTNAME)->GetWindowText(szSpacecraft), SetDlgItemText(IDC_ACCOUNTS_PASSWORD_CONTENTS, EMPTYSTRING), SetDlgItemText(IDC_ACCOUNTS_PASSWORD_CONFIRMATION, EMPTYSTRING); !FindAccount(ACCOUNTS_TYPE_ANY) && !szComputer.IsEmpty() && !szSpacecraft.IsEmpty() && SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_GETCOUNT) > 0 && EnumRights() && EnumGroups(); )
	{
		CheckRadioButton(IDC_ACCOUNTS_PASSWORD_NONE, IDC_ACCOUNTS_PASSWORD_USE, IDC_ACCOUNTS_PASSWORD_USE);
		CheckRadioButton(IDC_ACCOUNTS_VALIDITY_UNLIMITED, IDC_ACCOUNTS_VALIDITY_LIMITED, IDC_ACCOUNTS_VALIDITY_UNLIMITED);
		Spinbox_SetRange(GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS), ACCOUNTS_MINIMUMVALIDITY, ACCOUNTS_MAXIMUMVALIDITY);
		CheckDlgButton(IDC_ACCOUNTS_UNIQUE_USER, FALSE);
		GetDlgItem(IDC_ACCOUNTS_PRIVILEGES)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_DATABASES)->EnableWindow(((pDatabaseProfiles = FindDatabases()) && pDatabaseProfiles->GetSize() > 0) ? CheckPrivileges(PRIVILEGE_ACCOUNTDATABASES_CHANGE) : FALSE);
		GetDlgItem(IDC_ACCOUNTS_RIGHTS_CHANGE)->EnableWindow(CheckPrivileges(PRIVILEGE_ACCOUNTRIGHTS_CHANGE));
		GetDlgItem(IDC_ACCOUNTS_UNIQUE_USER)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_PASSWORD)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_NONE)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_USE)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONTENTS)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTS_PASSWORD_USE));
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONFIRMATION_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTS_PASSWORD_USE));
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONFIRMATION)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTS_PASSWORD_USE));
		GetDlgItem(IDC_ACCOUNTS_VALIDITY)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_UNLIMITED)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_LIMITED)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_LIMITED));
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_LIMITED));
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE_STATIC)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE_NONE)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_UNLIMITED));
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_LIMITED));
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE)->SetWindowText((IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_LIMITED)) ? (LPCTSTR)CTimeKey(CTime::GetCurrentTime().GetTime() + Spinbox_GetPos(GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS))*SECONDSPERDAY).FormatGmt(IDS_TIMEKEY_DATEFORMAT) : EMPTYSTRING);
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE_NONE)->ShowWindow((IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_UNLIMITED)) ? SW_SHOWNORMAL : SW_HIDE);
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE)->ShowWindow((IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_LIMITED)) ? SW_SHOWNORMAL : SW_HIDE);
		GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow((CheckAccountInfo()) ? CheckPrivileges() : FALSE);
		GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow(FALSE);
		AdjustToPrivileges();
		return;
	}
	SendDlgItemMessage(IDC_ACCOUNTS_GROUPMEMBER, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_ACCOUNTS_RIGHTS, LB_RESETCONTENT);
	CheckDlgButton(IDC_ACCOUNTS_PROFILES_ADMINISTRATORS, FALSE);
	CheckDlgButton(IDC_ACCOUNTS_PROFILES_OPERATORS, FALSE);
	CheckDlgButton(IDC_ACCOUNTS_PROFILES_USERS, FALSE);
	CheckDlgButton(IDC_ACCOUNTS_PROFILES_GUESTS, FALSE);
	CheckDlgButton(IDC_ACCOUNTS_PROFILES_CUSTOM, FALSE);
	CheckDlgButton(IDC_ACCOUNTS_UNIQUE_USER, FALSE);
	CheckDlgButton(IDC_ACCOUNTS_PASSWORD_NONE, FALSE);
	CheckDlgButton(IDC_ACCOUNTS_PASSWORD_USE, FALSE);
	CheckDlgButton(IDC_ACCOUNTS_VALIDITY_UNLIMITED, FALSE);
	CheckDlgButton(IDC_ACCOUNTS_VALIDITY_LIMITED, FALSE);
	GetDlgItem(IDC_ACCOUNTS_PRIVILEGES)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_GROUPMEMBER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_GROUPMEMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_PROFILES)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_PROFILES_ADMINISTRATORS)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_PROFILES_OPERATORS)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_PROFILES_USERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_PROFILES_GUESTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_PROFILES_CUSTOM)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_DATABASES)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_RIGHTS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_RIGHTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_RIGHTS_CHANGE)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_UNIQUE_USER)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_PASSWORD)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_PASSWORD_NONE)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_PASSWORD_USE)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONTENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONFIRMATION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONFIRMATION)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_VALIDITY)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_VALIDITY_UNLIMITED)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_VALIDITY_LIMITED)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE_NONE)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE_NONE)->ShowWindow(SW_SHOWNORMAL);
	GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow(FALSE);
	AdjustToPrivileges();
}

BOOL CAccountsDialog::CheckAccountInfo() CONST
{
	CString  szPassword[2];

	GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONTENTS)->GetWindowText(szPassword[0]);
	GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONFIRMATION)->GetWindowText(szPassword[1]);
	return((GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_ACCOUNTS_SPACECRAFTNAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_ACCOUNTS_USERNAME)->GetWindowTextLength() > 0 && ((IsDlgButtonChecked(IDC_ACCOUNTS_PASSWORD_NONE) && szPassword[0].IsEmpty() && szPassword[1].IsEmpty()) || (IsDlgButtonChecked(IDC_ACCOUNTS_PASSWORD_USE) && szPassword[0] == szPassword[1] && !szPassword[0].IsEmpty())) && (IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_UNLIMITED) || (IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_LIMITED) && Spinbox_GetPos(GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS)) >= ACCOUNTS_MINIMUMVALIDITY))) ? TRUE : FALSE);
}

BOOL CAccountsDialog::DeleteAccountInfo()
{
	INT  nUser;
	INT  nUsers;
	INT  nIndex;
	INT  nDatabase;
	INT  nDatabases;
	CString  szUser;
	CTimeKey  tValidity[2];
	CUIntArray  nPrivileges;
	CStringArray  szUserNames;
	CStringArray  szPasswords;
	CAccountToken  *pAccountToken[2];
	CDatabaseProfiles  *pDatabaseProfiles;
	CDatabaseProfileInfo  *pDatabaseProfileInfo;

	if ((pDatabaseProfiles = FindDatabases()))
	{
		for (nDatabase = 0, nDatabases = (INT)pDatabaseProfiles->GetSize(); nDatabase < nDatabases; nDatabase++)
		{
			if ((pDatabaseProfileInfo = pDatabaseProfiles->GetAt(nDatabase)) && pDatabaseProfileInfo->GetUsers(szUserNames, szPasswords, nPrivileges) >= 0)
			{
				for (nUser = 0, nUsers = (INT)szUserNames.GetSize(), GetDlgItem(IDC_ACCOUNTS_USERNAME)->GetWindowText(szUser); nUser < nUsers; nUser++)
				{
					if (szUserNames.GetAt(nUser) == szUser)
					{
						szUserNames.RemoveAt(nUser);
						szPasswords.RemoveAt(nUser);
						nPrivileges.RemoveAt(nUser);
						nUsers--;
						nUser--;
					}
				}
				pDatabaseProfileInfo->SetUsers(szUserNames, szPasswords, nPrivileges);
			}
		}
	}
	if ((pAccountToken[0] = FindAccount(ACCOUNTS_TYPE_NEW)))
	{
		if ((pAccountToken[1] = FindAccount(ACCOUNTS_TYPE_OLD)))
		{
			pAccountToken[0]->SetValidity(tValidity[0], tValidity[1]);
			return TRUE;
		}
		if ((nIndex = m_pAccounts[1].Find(pAccountToken[0])) >= 0)
		{
			m_pAccounts[1].RemoveAt(nIndex);
			delete pAccountToken[0];
			return TRUE;
		}
	}
	if ((pAccountToken[0] = FindAccount(ACCOUNTS_TYPE_OLD)))
	{
		if ((pAccountToken[1] = new CAccountToken))
		{
			pAccountToken[1]->Copy(pAccountToken[0]);
			pAccountToken[1]->SetValidity(tValidity[0], tValidity[1]);
			if (m_pAccounts[1].Add(pAccountToken[1]) >= 0) return TRUE;
			delete pAccountToken[1];
		}
	}
	return FALSE;
}

CAccountToken *CAccountsDialog::FindAccount(UINT nType) CONST
{
	INT  nAccount;
	INT  nAccounts;
	CString  szUser[2];
	CString  szComputer[2];
	CString  szSpacecraft[2];
	CTimeKey  tValidity[2];
	CAccountToken  *pAccountToken;

	GetDlgItem(IDC_ACCOUNTS_USERNAME)->GetWindowText(szUser[0]);
	GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowText(szComputer[0]);
	GetDlgItem(IDC_ACCOUNTS_SPACECRAFTNAME)->GetWindowText(szSpacecraft[0]);
	for (nAccount = 0, nAccounts = (nType == ACCOUNTS_TYPE_NEW || nType == ACCOUNTS_TYPE_ANY) ? (INT)m_pAccounts[1].GetSize() : 0, pAccountToken = (CAccountToken *)NULL; nAccount < nAccounts; nAccount++)
	{
		if ((pAccountToken = m_pAccounts[1].GetAt(nAccount)) && pAccountToken->GetValidity(tValidity[0], tValidity[1]) && pAccountToken->GetOwner(szComputer[1], szSpacecraft[1], szUser[1]) && !szComputer[0].CompareNoCase(szComputer[1]) && !szSpacecraft[0].CompareNoCase(szSpacecraft[1]) && !szUser[0].CompareNoCase(szUser[1])) break;
		continue;
	}
	if ((nType == ACCOUNTS_TYPE_OLD || nType == ACCOUNTS_TYPE_ANY) && nAccount == nAccounts)
	{
		for (nAccount = 0, nAccounts = (INT)m_pAccounts[0].GetSize(); nAccount < nAccounts; nAccount++)
		{
			if ((pAccountToken = m_pAccounts[0].GetAt(nAccount)) && pAccountToken->GetValidity(tValidity[0], tValidity[1]) && pAccountToken->GetOwner(szComputer[1], szSpacecraft[1], szUser[1]) && !szComputer[0].CompareNoCase(szComputer[1]) && !szSpacecraft[0].CompareNoCase(szSpacecraft[1]) && !szUser[0].CompareNoCase(szUser[1])) break;
			continue;
		}
	}
	return((nAccount < nAccounts) ? pAccountToken : (CAccountToken *)NULL);
}

CDatabaseProfiles *CAccountsDialog::FindDatabases(UINT nType) CONST
{
	INT  nDatabase;
	INT  nDatabases;
	CString  szComputerName;

	GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowText(szComputerName);
	for (nDatabase = 0, nDatabases = (INT)m_szDatabases.GetSize(); nDatabase < nDatabases; nDatabase++)
	{
		if (m_szDatabases.GetAt(nDatabase) == szComputerName) break;
		continue;
	}
	return((nDatabase < nDatabases) ? ((nType == ACCOUNTS_TYPE_NEW) ? (CDatabaseProfiles *)m_pDatabases[0].GetAt(nDatabase) : ((nType == ACCOUNTS_TYPE_OLD) ? (CDatabaseProfiles *)m_pDatabases[1].GetAt(nDatabase) : (CDatabaseProfiles *)NULL)) : (CDatabaseProfiles *)NULL);
}

BOOL CAccountsDialog::CheckPrivilegeProfile(UINT nProfile, CONST CUIntArray &nPrivileges) CONST
{
	INT  nRight[2];
	INT  nRights[2];
	CUIntArray  nProfilePrivileges;
	CAccountToken  cAccountToken;

	for (nRight[0] = 0, nRights[0] = (cAccountToken.GetDefaultPrivileges(nProfile, nProfilePrivileges) == nPrivileges.GetSize()) ? (INT)nProfilePrivileges.GetSize() : -1; nRight[0] < nRights[0]; nRight[0]++)
	{
		for (nRight[1] = 0, nRights[1] = (INT)nPrivileges.GetSize(); nRight[1] < nRights[1]; nRight[1]++)
		{
			if (nProfilePrivileges.GetAt(nRight[0]) == nPrivileges.GetAt(nRight[1])) break;
			continue;
		}
		if (nRight[1] == nRights[1]) break;
	}
	return((nRight[0] == nRights[0]) ? TRUE : FALSE);
}

BOOL CAccountsDialog::CheckPrivileges(UINT nPrivilege) CONST
{
	CString  szUser;
	CString  szComputer;
	CString  szSpacecraft;

	GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowText(szComputer);
	GetDlgItem(IDC_ACCOUNTS_SPACECRAFTNAME)->GetWindowText(szSpacecraft);
	GetDlgItem(IDC_ACCOUNTS_USERNAME)->GetWindowText(szUser);
	return(((!GetAccountComputerName().CompareNoCase(szComputer) && GetAccountSpacecraftName() == szSpacecraft  &&  GetAccountUserName() == szUser  &&  CheckAccountPrivilege(nPrivilege)) || (!GetAccountComputerName().CompareNoCase(szComputer) && CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_CHANGE)) || (GetAccountComputerName().CompareNoCase(szComputer) && CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_REMOTECHANGE))) ? TRUE : FALSE);
}

VOID CAccountsDialog::AdjustToPrivileges()
{
	AccessControl(IDC_ACCOUNTS_USERNAME, CheckPrivileges());
	AccessControl(IDC_ACCOUNTS_PROFILES_ADMINISTRATORS, CheckPrivileges(PRIVILEGE_ACCOUNTRIGHTS_CHANGE));
	AccessControl(IDC_ACCOUNTS_PROFILES_OPERATORS, CheckPrivileges(PRIVILEGE_ACCOUNTRIGHTS_CHANGE));
	AccessControl(IDC_ACCOUNTS_PROFILES_USERS, CheckPrivileges(PRIVILEGE_ACCOUNTRIGHTS_CHANGE));
	AccessControl(IDC_ACCOUNTS_PROFILES_GUESTS, CheckPrivileges(PRIVILEGE_ACCOUNTRIGHTS_CHANGE));
	AccessControl(IDC_ACCOUNTS_PROFILES_CUSTOM, CheckPrivileges(PRIVILEGE_ACCOUNTRIGHTS_CHANGE));
	AccessControl(IDC_ACCOUNTS_UNIQUE_USER, CheckPrivileges(PRIVILEGE_ACCOUNTRIGHTS_CHANGE));
	AccessControl(IDC_ACCOUNTS_PASSWORD_NONE, CheckPrivileges(PRIVILEGE_ACCOUNTPASSWORD_CHANGE));
	AccessControl(IDC_ACCOUNTS_PASSWORD_USE, CheckPrivileges(PRIVILEGE_ACCOUNTPASSWORD_CHANGE));
	AccessControl(IDC_ACCOUNTS_PASSWORD_CONTENTS, CheckPrivileges(PRIVILEGE_ACCOUNTPASSWORD_CHANGE));
	AccessControl(IDC_ACCOUNTS_PASSWORD_CONFIRMATION, CheckPrivileges(PRIVILEGE_ACCOUNTPASSWORD_CHANGE));
	AccessControl(IDC_ACCOUNTS_VALIDITY_UNLIMITED, CheckPrivileges(PRIVILEGE_ACCOUNTVALIDITY_CHANGE));
	AccessControl(IDC_ACCOUNTS_VALIDITY_LIMITED, CheckPrivileges(PRIVILEGE_ACCOUNTVALIDITY_CHANGE));
	AccessControl(IDC_ACCOUNTS_VALIDITY_DAYS, CheckPrivileges(PRIVILEGE_ACCOUNTVALIDITY_CHANGE));
}

BOOL CAccountsDialog::IsModified() CONST
{
	INT  nDatabase;
	INT  nDatabases;
	CDatabaseProfiles  *pDatabaseProfiles[2];

	for (nDatabase = 0, nDatabases = (m_pDatabases[0].GetSize() == m_pDatabases[1].GetSize()) ? (INT)m_pDatabases[0].GetSize() : -1; nDatabase < nDatabases; nDatabase++)
	{
		if ((pDatabaseProfiles[1] = ((pDatabaseProfiles[0] = (CDatabaseProfiles *)m_pDatabases[0].GetAt(nDatabase))) ? (CDatabaseProfiles *)m_pDatabases[1].GetAt(nDatabase) : (CDatabaseProfiles *)NULL))
		{
			if (!pDatabaseProfiles[0]->Compare(pDatabaseProfiles[1])) break;
			continue;
		}
		break;
	}
	return((m_pAccounts[1].GetSize() > 0 || nDatabase < nDatabases) ? TRUE : FALSE);
}

BOOL CAccountsDialog::Check(BOOL bModified) CONST
{
	CAccountToken  *pAccountToken;

	return(((pAccountToken = FindAccount(ACCOUNTS_TYPE_ANY)) && CheckAccountInfo() && m_pDatabases[0].GetSize() == m_pDatabases[1].GetSize()) ? (!bModified || IsModified()) : FALSE);
}

void CAccountsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAccountsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CAccountsDialog::PostNcDestroy()
{
	INT  nDatabase;
	INT  nDatabases;
	CDatabaseProfiles  *pDatabaseProfiles;

	for (nDatabase = 0, nDatabases = (INT)m_pDatabases[0].GetSize(), m_pAccounts[0].RemoveAll(), m_pAccounts[1].RemoveAll(); nDatabase < nDatabases; nDatabase++)
	{
		if ((pDatabaseProfiles = (CDatabaseProfiles *)m_pDatabases[0].GetAt(nDatabase))) delete pDatabaseProfiles;
		continue;
	}
	for (nDatabase = 0, nDatabases = (INT)m_pDatabases[1].GetSize(); nDatabase < nDatabases; nDatabase++)
	{
		if ((pDatabaseProfiles = (CDatabaseProfiles *)m_pDatabases[1].GetAt(nDatabase))) delete pDatabaseProfiles;
		continue;
	}
	m_szDatabases.RemoveAll();
	m_pDatabases[0].RemoveAll();
	m_pDatabases[1].RemoveAll();
	m_nPrivileges.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CAccountsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CAccountsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_ACCOUNTS_CONNECT, OnConnectComputer)
	ON_BN_CLICKED(IDC_ACCOUNTS_CREATE, OnCreateAccount)
	ON_BN_CLICKED(IDC_ACCOUNTS_DELETE, OnDeleteAccount)
	ON_BN_CLICKED(IDC_ACCOUNTS_PROFILES_ADMINISTRATORS, OnAdministratorsProfile)
	ON_BN_CLICKED(IDC_ACCOUNTS_PROFILES_OPERATORS, OnOperatorsProfile)
	ON_BN_CLICKED(IDC_ACCOUNTS_PROFILES_USERS, OnUsersProfile)
	ON_BN_CLICKED(IDC_ACCOUNTS_PROFILES_GUESTS, OnGuestsProfile)
	ON_BN_CLICKED(IDC_ACCOUNTS_DATABASES, OnAccountDatabases)
	ON_BN_CLICKED(IDC_ACCOUNTS_RIGHTS_CHANGE, OnAccountRights)
	ON_BN_CLICKED(IDC_ACCOUNTS_UNIQUE_USER, OnAccountUniqueUser)
	ON_BN_CLICKED(IDC_ACCOUNTS_PASSWORD_NONE, OnAccountPasswordNone)
	ON_BN_CLICKED(IDC_ACCOUNTS_PASSWORD_USE, OnAccountPasswordUse)
	ON_BN_CLICKED(IDC_ACCOUNTS_VALIDITY_UNLIMITED, OnAccountValidity)
	ON_BN_CLICKED(IDC_ACCOUNTS_VALIDITY_LIMITED, OnAccountValidity)
	ON_BN_CLICKED(IDC_ACCOUNTS_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_ACCOUNTS_COMPUTERNAME, OnEditchangeComputerName)
	ON_CBN_EDITCHANGE(IDC_ACCOUNTS_USERNAME, OnEditchangeUserName)
	ON_CBN_SELCHANGE(IDC_ACCOUNTS_COMPUTERNAME, OnSelchangeComputerName)
	ON_CBN_SELCHANGE(IDC_ACCOUNTS_SPACECRAFTNAME, OnSelchangeSpacecraftName)
	ON_CBN_SELCHANGE(IDC_ACCOUNTS_USERNAME, OnSelchangeUserName)
	ON_EN_CHANGE(IDC_ACCOUNTS_PASSWORD_CONTENTS, OnEditchangeAccountPassword)
	ON_EN_CHANGE(IDC_ACCOUNTS_PASSWORD_CONFIRMATION, OnEditchangeAccountPassword)
	ON_CONTROL(SBXN_CHANGE, IDC_ACCOUNTS_VALIDITY_DAYS, OnSpinchangeAccountDays)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CAccountsDialog message handlers

BOOL CAccountsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	EnumComputers();
	EnumSpacecrafts();
	EnumUsers();
	EnumDatabases();
	ShowAccountInfo();
	return TRUE;
}

void CAccountsDialog::OnSelchangeComputerName()
{
	CString  szComputer;
	CComputerToken  cComputerToken;

	for (szComputer = Combobox_GetText(GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME), (INT)SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_GETCURSEL)), SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_GETCURSEL)); TRUE; )
	{
		GetDlgItem(IDC_ACCOUNTS_CONNECT)->EnableWindow((cComputerToken.SetComputerName(szComputer) && !szComputer.IsEmpty() && !cComputerToken.IsHost() && SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) < 0) ? (CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_REMOTEBROWSE)) : FALSE);
		break;
	}
	EnumSpacecrafts();
	EnumUsers();
	EnumDatabases();
	ShowAccountInfo();
}

void CAccountsDialog::OnSelchangeSpacecraftName()
{
	for (EnumUsers(), ShowAccountInfo(); !CheckAccountInfo(); )
	{
		if (SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_GETCOUNT) > 0)
		{
			if (SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_GETCURSEL) < 0)
			{
				GetDlgItem(IDC_ACCOUNTS_USERNAME)->SetFocus();
				break;
			}
			if (IsDlgButtonChecked(IDC_ACCOUNTS_PASSWORD_USE) && !GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONTENTS)->GetWindowTextLength())
			{
				GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONTENTS)->SetFocus();
				break;
			}
			if (SendDlgItemMessage(IDC_ACCOUNTS_GROUPMEMBER, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_ACCOUNTS_GROUPMEMBER, CB_GETCURSEL) < 0)
			{
				GetDlgItem(IDC_ACCOUNTS_GROUPMEMBER)->SetFocus();
				break;
			}
		}
		break;
	}
}

void CAccountsDialog::OnSelchangeUserName()
{
	SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_GETCURSEL));
	ShowAccountInfo();
}

void CAccountsDialog::OnEditchangeComputerName()
{
	CString  szComputer;
	CComputerToken  cComputerToken;
	CDatabaseProfiles  *pDatabaseProfiles;

	for (GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowText(szComputer), GetDlgItem(IDC_ACCOUNTS_CONNECT)->EnableWindow((cComputerToken.SetComputerName(szComputer) && !szComputer.IsEmpty() && !cComputerToken.IsHost() && SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) < 0) ? (CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_REMOTEBROWSE)) : FALSE); SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) < 0; )
	{
		if (GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_ACCOUNTS_SPACECRAFTNAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_ACCOUNTS_USERNAME)->GetWindowTextLength() > 0)
		{
			GetDlgItem(IDC_ACCOUNTS_DATABASES)->EnableWindow(((pDatabaseProfiles = FindDatabases()) && pDatabaseProfiles->GetSize() > 0) ? CheckPrivileges(PRIVILEGE_ACCOUNTDATABASES_CHANGE) : FALSE);
			GetDlgItem(IDC_ACCOUNTS_RIGHTS_CHANGE)->EnableWindow(CheckPrivileges(PRIVILEGE_ACCOUNTRIGHTS_CHANGE));
		}
		else
		{
			GetDlgItem(IDC_ACCOUNTS_DATABASES)->EnableWindow(FALSE);
			GetDlgItem(IDC_ACCOUNTS_RIGHTS_CHANGE)->EnableWindow(FALSE);
		}
		GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow(FALSE);
		GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow(FALSE);
		GetDlgItem(IDOK)->EnableWindow(Check());
		return;
	}
	EnumSpacecrafts();
	EnumUsers();
	EnumDatabases();
	ShowAccountInfo();
}

void CAccountsDialog::OnEditchangeUserName()
{
	CString  szUser;
	CString  szComputer;
	CDatabaseProfiles  *pDatabaseProfiles;

	for (GetDlgItem(IDC_ACCOUNTS_USERNAME)->GetWindowText(szUser), GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowText(szComputer); SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szUser) < 0; )
	{
		if (GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_ACCOUNTS_SPACECRAFTNAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_ACCOUNTS_USERNAME)->GetWindowTextLength() > 0)
		{
			GetDlgItem(IDC_ACCOUNTS_DATABASES)->EnableWindow(((pDatabaseProfiles = FindDatabases()) && pDatabaseProfiles->GetSize() > 0) ? CheckPrivileges(PRIVILEGE_ACCOUNTDATABASES_CHANGE) : FALSE);
			GetDlgItem(IDC_ACCOUNTS_RIGHTS_CHANGE)->EnableWindow(CheckPrivileges(PRIVILEGE_ACCOUNTRIGHTS_CHANGE));
		}
		else
		{
			GetDlgItem(IDC_ACCOUNTS_DATABASES)->EnableWindow(FALSE);
			GetDlgItem(IDC_ACCOUNTS_RIGHTS_CHANGE)->EnableWindow(FALSE);
		}
		if (SendDlgItemMessage(IDC_ACCOUNTS_COMPUTERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) >= 0)
		{
			GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow(!FindAccount(ACCOUNTS_TYPE_ANY) && CheckAccountInfo() && CheckPrivileges());
			GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow(FindAccount(ACCOUNTS_TYPE_ANY) && !FindAccount(ACCOUNTS_TYPE_ANY)->IsAdministrator() && CheckPrivileges());
		}
		else
		{
			GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow(FALSE);
			GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow(FALSE);
		}
		GetDlgItem(IDOK)->EnableWindow(Check());
		return;
	}
	ShowAccountInfo();
}

void CAccountsDialog::OnConnectComputer()
{
	CHourglassCursor  cCursor;

	EnumSpacecrafts();
	EnumUsers();
	EnumDatabases();
	ShowAccountInfo();
}

void CAccountsDialog::OnCreateAccount()
{
	CString  szUser;
	CHourglassCursor  cCursor;

	for (SaveAccountInfo(), GetDlgItem(IDC_ACCOUNTS_USERNAME)->GetWindowText(szUser), SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szUser), SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szUser)); TRUE; )
	{
		ShowAccountInfo();
		break;
	}
	GetDlgItem(IDC_ACCOUNTS_USERNAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountsDialog::OnDeleteAccount()
{
	CString  szUser;
	CHourglassCursor  cCursor;

	for (DeleteAccountInfo(), GetDlgItem(IDC_ACCOUNTS_USERNAME)->GetWindowText(szUser), SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szUser)), SendDlgItemMessage(IDC_ACCOUNTS_USERNAME, CB_SETCURSEL); TRUE; )
	{
		ShowAccountInfo();
		break;
	}
	GetDlgItem(IDC_ACCOUNTS_USERNAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountsDialog::OnAdministratorsProfile()
{
	if (EnumRights(PRIVILEGE_PROFILE_ADMINISTRATORS)) UpdateAccountInfo();
	GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow(!FindAccount(ACCOUNTS_TYPE_ANY) && CheckAccountInfo() && CheckPrivileges());
	GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow(FindAccount(ACCOUNTS_TYPE_ANY) && !FindAccount(ACCOUNTS_TYPE_ANY)->IsAdministrator() && CheckPrivileges());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountsDialog::OnOperatorsProfile()
{
	if (EnumRights(PRIVILEGE_PROFILE_OPERATORS)) UpdateAccountInfo();
	GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow(!FindAccount(ACCOUNTS_TYPE_ANY) && CheckAccountInfo() && CheckPrivileges());
	GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow(FindAccount(ACCOUNTS_TYPE_ANY) && !FindAccount(ACCOUNTS_TYPE_ANY)->IsAdministrator() && CheckPrivileges());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountsDialog::OnUsersProfile()
{
	if (EnumRights(PRIVILEGE_PROFILE_USERS)) UpdateAccountInfo();
	GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow(!FindAccount(ACCOUNTS_TYPE_ANY) && CheckAccountInfo() && CheckPrivileges());
	GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow(FindAccount(ACCOUNTS_TYPE_ANY) && !FindAccount(ACCOUNTS_TYPE_ANY)->IsAdministrator() && CheckPrivileges());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountsDialog::OnGuestsProfile()
{
	if (EnumRights(PRIVILEGE_PROFILE_GUESTS)) UpdateAccountInfo();
	GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow(!FindAccount(ACCOUNTS_TYPE_ANY) && CheckAccountInfo() && CheckPrivileges());
	GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow(FindAccount(ACCOUNTS_TYPE_ANY) && !FindAccount(ACCOUNTS_TYPE_ANY)->IsAdministrator() && CheckPrivileges());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountsDialog::OnAccountDatabases()
{
	INT  nUser[2];
	INT  nUsers[2];
	INT  nDatabase;
	INT  nDatabases;
	CString  szUser;
	CString  szComputer;
	CString  szSpacecraft;
	CUIntArray  nPrivileges[2];
	CStringArray  szUserNames[2];
	CStringArray  szPasswords[2];
	CAccountToken  *pAccountToken[2];
	CDatabaseProfiles  *pDatabaseProfiles[2];
	CDatabaseProfileInfo  *pDatabaseProfileInfo[2];
	CAccountDatabaseDialog  cAccountDatabaseDialog(this);

	if ((pDatabaseProfiles[0] = FindDatabases()))
	{
		if ((pAccountToken[0] = new CAccountToken))
		{
			if (!(pAccountToken[1] = FindAccount(ACCOUNTS_TYPE_ANY)))
			{
				GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowText(szComputer);
				GetDlgItem(IDC_ACCOUNTS_SPACECRAFTNAME)->GetWindowText(szSpacecraft);
				GetDlgItem(IDC_ACCOUNTS_USERNAME)->GetWindowText(szUser);
				pAccountToken[0]->SetOwner(szComputer, szSpacecraft, szUser);
			}
			else
			{
				pAccountToken[1]->GetOwner(szComputer, szSpacecraft, szUser);
				pAccountToken[0]->Copy(pAccountToken[1]);
			}
			if (cAccountDatabaseDialog.DoModal(pAccountToken[0], pDatabaseProfiles[0]) == IDOK)
			{
				for (nDatabase = 0, nDatabases = (INT)pDatabaseProfiles[0]->GetSize(); nDatabase < nDatabases; nDatabase++)
				{
					if ((pDatabaseProfileInfo[0] = pDatabaseProfiles[0]->GetAt(nDatabase)) && pDatabaseProfileInfo[0]->GetUsers(szUserNames[0], szPasswords[0], nPrivileges[0]) >= 0)
					{
						if ((pDatabaseProfileInfo[1] = ((pDatabaseProfiles[1] = FindDatabases(ACCOUNTS_TYPE_OLD))) ? pDatabaseProfiles[1]->GetAt(pDatabaseProfiles[1]->Find(pDatabaseProfileInfo[0]->GetName())) : (CDatabaseProfileInfo *)NULL) && pDatabaseProfileInfo[1]->GetUsers(szUserNames[1], szPasswords[1], nPrivileges[1]) >= 0)
						{
							for (nUser[0] = 0, nUsers[0] = (INT)szUserNames[0].GetSize(); nUser[0] < nUsers[0]; nUser[0]++)
							{
								for (nUser[1] = 0, nUsers[1] = (INT)szUserNames[1].GetSize(); nUser[1] < nUsers[1]; nUser[1]++)
								{
									if (szUserNames[0].GetAt(nUser[0]) == szUserNames[1].GetAt(nUser[1])) break;
									continue;
								}
								if (nUser[1] < nUsers[1])
								{
									szPasswords[0].SetAt(nUser[0], szPasswords[1].GetAt(nUser[1]));
									nPrivileges[0].SetAt(nUser[0], nPrivileges[1].GetAt(nUser[1]));
									pDatabaseProfileInfo[0]->SetUsers(szUserNames[0], szPasswords[0], nPrivileges[0]);
								}
							}
						}
					}
				}
			}
			delete pAccountToken[0];
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountsDialog::OnAccountRights()
{
	CString  szUser;
	CString  szComputer;
	CString  szSpacecraft;
	CUIntArray  nPrivileges;
	CAccountToken  *pAccountToken[2];
	CPrivilegesDialog  cPrivilegesDialog(this);

	if ((pAccountToken[0] = new CAccountToken))
	{
		if ((pAccountToken[1] = FindAccount(ACCOUNTS_TYPE_ANY)))
		{
			pAccountToken[1]->GetOwner(szComputer, szSpacecraft, szUser);
			pAccountToken[0]->Copy(pAccountToken[1]);
		}
		else
		{
			for (GetDlgItem(IDC_ACCOUNTS_COMPUTERNAME)->GetWindowText(szComputer), GetDlgItem(IDC_ACCOUNTS_SPACECRAFTNAME)->GetWindowText(szSpacecraft), GetDlgItem(IDC_ACCOUNTS_USERNAME)->GetWindowText(szUser), pAccountToken[0]->SetOwner(szComputer, szSpacecraft, szUser), pAccountToken[0]->SetDefaultPrivileges((IsDlgButtonChecked(IDC_ACCOUNTS_PROFILES_ADMINISTRATORS)) ? PRIVILEGE_PROFILE_ADMINISTRATORS : ((IsDlgButtonChecked(IDC_ACCOUNTS_PROFILES_OPERATORS)) ? PRIVILEGE_PROFILE_OPERATORS : ((IsDlgButtonChecked(IDC_ACCOUNTS_PROFILES_USERS)) ? PRIVILEGE_PROFILE_USERS : PRIVILEGE_PROFILE_GUESTS))); IsDlgButtonChecked(IDC_ACCOUNTS_PROFILES_CUSTOM); )
			{
				pAccountToken[0]->SetPrivileges(m_nPrivileges);
				break;
			}
		}
		if (cPrivilegesDialog.DoModal(pAccountToken[0]) == IDOK)
		{
			pAccountToken[0]->GetPrivileges(nPrivileges);
			EnumRights(nPrivileges);
		}
		delete pAccountToken[0];
		UpdateAccountInfo();
	}
	GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow(!FindAccount(ACCOUNTS_TYPE_ANY) && CheckAccountInfo() && CheckPrivileges());
	GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow(FindAccount(ACCOUNTS_TYPE_ANY) && !FindAccount(ACCOUNTS_TYPE_ANY)->IsAdministrator() && CheckPrivileges());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountsDialog::OnAccountUniqueUser()
{
	UpdateAccountInfo();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountsDialog::OnAccountPasswordNone()
{
	if (!FindAccount(ACCOUNTS_TYPE_ANY) || !FindAccount(ACCOUNTS_TYPE_ANY)->IsAdministrator())
	{
		CheckDlgButton(IDC_ACCOUNTS_PASSWORD_NONE, TRUE);
		CheckDlgButton(IDC_ACCOUNTS_PASSWORD_USE, FALSE);
		SetDlgItemText(IDC_ACCOUNTS_PASSWORD_CONTENTS, EMPTYSTRING);
		SetDlgItemText(IDC_ACCOUNTS_PASSWORD_CONFIRMATION, EMPTYSTRING);
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONTENTS)->EnableWindow(FALSE);
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONFIRMATION_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONFIRMATION)->EnableWindow(FALSE);
	}
	else
	{
		CheckDlgButton(IDC_ACCOUNTS_PASSWORD_USE, TRUE);
		CheckDlgButton(IDC_ACCOUNTS_PASSWORD_NONE, FALSE);
		SendDlgItemMessage(IDC_ACCOUNTS_PASSWORD_CONTENTS, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONTENTS)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONFIRMATION_STATIC)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONFIRMATION)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONTENTS)->SetFocus();
	}
	UpdateAccountInfo();
	GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow(!FindAccount(ACCOUNTS_TYPE_ANY) && CheckAccountInfo() && CheckPrivileges());
	GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow(FindAccount(ACCOUNTS_TYPE_ANY) && !FindAccount(ACCOUNTS_TYPE_ANY)->IsAdministrator() && CheckPrivileges());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountsDialog::OnAccountPasswordUse()
{
	if (!IsDlgButtonChecked(IDC_ACCOUNTS_PASSWORD_USE))
	{
		CheckDlgButton(IDC_ACCOUNTS_PASSWORD_USE, TRUE);
		CheckDlgButton(IDC_ACCOUNTS_PASSWORD_NONE, FALSE);
		SendDlgItemMessage(IDC_ACCOUNTS_PASSWORD_CONTENTS, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONTENTS)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONFIRMATION_STATIC)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONFIRMATION)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_PASSWORD_CONTENTS)->SetFocus();
	}
	UpdateAccountInfo();
	GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow(!FindAccount(ACCOUNTS_TYPE_ANY) && CheckAccountInfo() && CheckPrivileges());
	GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow(FindAccount(ACCOUNTS_TYPE_ANY) && !FindAccount(ACCOUNTS_TYPE_ANY)->IsAdministrator() && CheckPrivileges());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountsDialog::OnAccountValidity()
{
	if (IsDlgButtonChecked(IDC_ACCOUNTS_VALIDITY_LIMITED))
	{
		Spinbox_SetPos(GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS), ACCOUNTS_DEFAULTVALIDITY);
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE)->SetWindowText(CTimeKey(CTime::GetCurrentTime().GetTime() + ACCOUNTS_DEFAULTVALIDITY*SECONDSPERDAY).FormatGmt(IDS_TIMEKEY_DATEFORMAT));
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE_NONE)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE)->ShowWindow(SW_SHOWNORMAL);
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE_NONE)->EnableWindow(FALSE);
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS_STATIC)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS)->SetFocus();
	}
	else
	{
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE_NONE)->ShowWindow(SW_SHOWNORMAL);
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE_NONE)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE)->EnableWindow(FALSE);
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS)->EnableWindow(FALSE);
	}
	UpdateAccountInfo();
	GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow(!FindAccount(ACCOUNTS_TYPE_ANY) && CheckAccountInfo() && CheckPrivileges());
	GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow(FindAccount(ACCOUNTS_TYPE_ANY) && !FindAccount(ACCOUNTS_TYPE_ANY)->IsAdministrator() && CheckPrivileges());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountsDialog::OnEditchangeAccountPassword()
{
	UpdateAccountInfo();
	GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow(!FindAccount(ACCOUNTS_TYPE_ANY) && CheckAccountInfo() && CheckPrivileges());
	GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow(FindAccount(ACCOUNTS_TYPE_ANY) && !FindAccount(ACCOUNTS_TYPE_ANY)->IsAdministrator() && CheckPrivileges());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountsDialog::OnSpinchangeAccountDays()
{
	UpdateAccountInfo();
	GetDlgItem(IDC_ACCOUNTS_VALIDITY_DATE)->SetWindowText(CTimeKey(CTime::GetCurrentTime().GetTime() + Spinbox_GetPos(GetDlgItem(IDC_ACCOUNTS_VALIDITY_DAYS))*SECONDSPERDAY).FormatGmt(IDS_TIMEKEY_DATEFORMAT));
	GetDlgItem(IDC_ACCOUNTS_CREATE)->EnableWindow(!FindAccount(ACCOUNTS_TYPE_ANY) && CheckAccountInfo() && CheckPrivileges());
	GetDlgItem(IDC_ACCOUNTS_DELETE)->EnableWindow(FindAccount(ACCOUNTS_TYPE_ANY) && !FindAccount(ACCOUNTS_TYPE_ANY)->IsAdministrator() && CheckPrivileges());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountsDialog::OnOK()
{
	INT  nAccount;
	INT  nAccounts;
	INT  nDatabase;
	INT  nDatabases;
	INT  nDatabaseCount;
	BOOL  bUniqueUser;
	CString  szPassword;
	CTimeKey  tValidity[2];
	CDatabases  cDatabases;
	CUIntArray  nPrivileges;
	CUserAccounts  cUserAccounts;
	CAccountToken  *pAccountToken;
	CDatabaseProfiles  *pDatabaseProfiles[2];
	CHourglassCursor  cCursor;

	for (nAccount = 0, nAccounts = (SaveAccountInfo()) ? (INT)m_pAccounts[1].GetSize() : -1; nAccount < nAccounts; nAccount++)
	{
		if ((pAccountToken = m_pAccounts[1].GetAt(nAccount)) != (CAccountToken *)NULL)
		{
			if (!pAccountToken->CheckPrivilege(PRIVILEGE_ONLINE_OPERATE))
			{
				if (!pAccountToken->CheckPrivilege(PRIVILEGE_OFFLINE_OPERATE))
				{
					pAccountToken->AddPrivilege(PRIVILEGE_OFFLINE_OPERATE);
					pAccountToken->SetMode(ACCOUNT_MODE_OFFLINE);
				}
			}
			if (CheckAccountOwner(pAccountToken))
			{
				for (pAccountToken->GetPrivileges(nPrivileges), pAccountToken->GetValidity(tValidity[0], tValidity[1]), bUniqueUser = pAccountToken->IsUnique(), szPassword = pAccountToken->GetPassword(), GetAccount(pAccountToken); pAccountToken->HasOwner(); )
				{
					pAccountToken->SetMode((GetAccountMode() == ACCOUNT_MODE_ONLINE  &&  !pAccountToken->CheckPrivilege(PRIVILEGE_ONLINE_OPERATE)) ? ACCOUNT_MODE_OFFLINE : GetAccountMode());
					pAccountToken->SetValidity(tValidity[0], tValidity[1]);
					pAccountToken->SetPrivileges(nPrivileges);
					pAccountToken->SetPassword(szPassword);
					pAccountToken->SetUnique(bUniqueUser);
					SetAccount(pAccountToken);
					break;
				}
			}
			if (cUserAccounts.WriteAccount(pAccountToken)) continue;
		}
		break;
	}
	for (nDatabase = 0, nDatabases = (m_szDatabases.GetSize() == m_pDatabases[0].GetSize() && m_szDatabases.GetSize() == m_pDatabases[1].GetSize()) ? (INT)m_pDatabases[0].GetSize() : -1, nDatabaseCount = 0; nDatabase < nDatabases; nDatabase++)
	{
		if ((pDatabaseProfiles[0] = (CDatabaseProfiles *)m_pDatabases[0].GetAt(nDatabase)))
		{
			if ((pDatabaseProfiles[1] = (CDatabaseProfiles *)m_pDatabases[1].GetAt(nDatabase)))
			{
				if (pDatabaseProfiles[0]->Compare(pDatabaseProfiles[1]))
				{
					nDatabaseCount++;
					continue;
				}
				if (cDatabases.SetComputerName(m_szDatabases.GetAt(nDatabase)) && cDatabases.SetDatabases(*pDatabaseProfiles[0]))
				{
					nDatabaseCount++;
					continue;
				}
			}
		}
	}
	ReportEvent((nAccount != nAccounts || nDatabaseCount != nDatabases) ? SYSTEM_WARNING_ACCOUNT_SAVE_FAILURE : SYSTEM_NOERROR);
	EndDialog(IDOK);
}

BOOL CAccountsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_ACCOUNTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CAccountsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_ACCOUNTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CAccountDatabaseDialog dialog

IMPLEMENT_DYNCREATE(CAccountDatabaseDialog, CLocaleDialog)

CAccountDatabaseDialog::CAccountDatabaseDialog(CWnd *pParentWnd) : CLocaleDialog(CAccountDatabaseDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CAccountDatabaseDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CAccountDatabaseDialog::DoModal(CAccountToken *pAccountToken, CDatabaseProfiles *pDatabases)
{
	INT  nResult;
	INT  nDatabase;
	INT  nDatabases;
	CStringArray  szUsers;
	CDatabaseProfileInfo  *pDatabaseProfileInfo;

	for (m_pDatabases[0].Copy(pDatabases), m_pDatabases[1].Copy(pDatabases), m_pDatabases[2].RemoveAll(), m_cAccountToken.Copy(pAccountToken); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		for (nDatabase = 0, nDatabases = (pDatabases->Copy(&m_pDatabases[0])) ? (INT)pDatabases->GetSize() : 0; nDatabase < nDatabases; nDatabase++)
		{
			if ((pDatabaseProfileInfo = pDatabases->GetAt(nDatabase)) && !pDatabaseProfileInfo->GetUsers(szUsers))
			{
				pDatabases->RemoveAt(nDatabase);
				delete pDatabaseProfileInfo;
				nDatabases--;
				nDatabase--;
			}
		}
		break;
	}
	return nResult;
}

BOOL CAccountDatabaseDialog::EnumServers()
{
	INT  nComputer;
	INT  nComputers;
	INT  nDatabase;
	INT  nDatabases;
	CStringArray  szComputers;
	CComputerToken  cComputerToken;
	CDatabaseProfiles  pDatabaseProfiles;
	CDatabaseProfileInfo  *pDatabaseProfileInfo;
	CDatabases  cDatabases;

	for (nComputer = 0, nComputers = GetNetworkBrowseService()->EnumNetworkComputers(szComputers); nComputer < nComputers; nComputer++)
	{
		for (cDatabases.SetComputerName(szComputers.GetAt(nComputer)); (!cDatabases.IsHost() && cDatabases.GetDatabases(pDatabaseProfiles) && pDatabaseProfiles.GetSize() > 0) || cDatabases.IsHost(); )
		{
			SendDlgItemMessage(IDC_ACCOUNTDATABASE_SERVER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
			break;
		}
	}
	for (nDatabase = 0, nDatabases = (INT)m_pDatabases[0].GetSize(); nDatabase < nDatabases; nDatabase++)
	{
		if ((pDatabaseProfileInfo = m_pDatabases[0].GetAt(nDatabase)) != (CDatabaseProfileInfo *)NULL)
		{
			if (SendDlgItemMessage(IDC_ACCOUNTDATABASE_SERVER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseProfileInfo->GetServer()) < 0)
			{
				SendDlgItemMessage(IDC_ACCOUNTDATABASE_SERVER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pDatabaseProfileInfo->GetServer());
				continue;
			}
		}
	}
	SendDlgItemMessage(IDC_ACCOUNTDATABASE_SERVER, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_ACCOUNTDATABASE_SERVER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cComputerToken.GetComputerName()), 0));
	GetDlgItem(IDC_ACCOUNTDATABASE_SERVER_STATIC)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_SERVER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTDATABASE_SERVER)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_SERVER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_ACCOUNTDATABASE_SERVER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CAccountDatabaseDialog::EnumDatabases()
{
	INT  nDatabase;
	INT  nDatabases;
	CString  szServer;
	CDatabases  cDatabases;
	CDatabaseProfileInfo  *pDatabaseProfileInfo;

	SendDlgItemMessage(IDC_ACCOUNTDATABASE_NAME, CB_RESETCONTENT);
	GetDlgItem(IDC_ACCOUNTDATABASE_SERVER)->GetWindowText(szServer);
	for (cDatabases.SetComputerName(szServer); cDatabases.GetDatabases(m_pDatabases[2]); )
	{
		for (nDatabase = 0, nDatabases = (INT)m_pDatabases[2].GetSize(); nDatabase < nDatabases; nDatabase++)
		{
			if ((pDatabaseProfileInfo = m_pDatabases[2].GetAt(nDatabase)) && !pDatabaseProfileInfo->GetServer().CompareNoCase(szServer) && pDatabaseProfileInfo->GetSpacecraft() == m_cAccountToken.GetSpacecraftName())
			{
				if (SendDlgItemMessage(IDC_ACCOUNTDATABASE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseProfileInfo->GetName()) == CB_ERR)
				{
					SendDlgItemMessage(IDC_ACCOUNTDATABASE_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pDatabaseProfileInfo->GetName());
					continue;
				}
			}
		}
		break;
	}
	SendDlgItemMessage(IDC_ACCOUNTDATABASE_NAME, CB_SETCURSEL);
	GetDlgItem(IDC_ACCOUNTDATABASE_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTDATABASE_NAME)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_ACCOUNTDATABASE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CAccountDatabaseDialog::EnumUserDatabases()
{
	INT  nUser;
	INT  nUsers;
	INT  nDatabase;
	INT  nDatabases;
	CString  szServer;
	CStringArray  szUsers;
	CDatabaseProfileInfo  *pDatabaseProfileInfo;

	SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_RESETCONTENT);
	GetDlgItem(IDC_ACCOUNTDATABASE_SERVER)->GetWindowText(szServer);
	for (nDatabase = 0, nDatabases = (INT)m_pDatabases[0].GetSize(); nDatabase < nDatabases; nDatabase++)
	{
		if ((pDatabaseProfileInfo = m_pDatabases[0].GetAt(nDatabase)) && !pDatabaseProfileInfo->GetServer().CompareNoCase(szServer) && pDatabaseProfileInfo->GetSpacecraft() == m_cAccountToken.GetSpacecraftName() && pDatabaseProfileInfo->GetUsers(szUsers) > 0)
		{
			for (nUser = 0, nUsers = (INT)szUsers.GetSize(); nUser < nUsers; nUser++)
			{
				if (szUsers.GetAt(nUser) == m_cAccountToken.GetUserName()) break;
				continue;
			}
			if (nUser < nUsers)
			{
				if (SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseProfileInfo->GetName()) == CB_ERR) SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pDatabaseProfileInfo->GetName());
				continue;
			}
		}
	}
	GetDlgItem(IDC_ACCOUNTDATABASE_ALLOWEDLIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTDATABASE_ALLOWEDLIST)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	return TRUE;
}

BOOL CAccountDatabaseDialog::EnumUser()
{
	GetDlgItem(IDC_ACCOUNTDATABASE_USER)->SetWindowText(m_cAccountToken.GetUserName());
	GetDlgItem(IDC_ACCOUNTDATABASE_DETAILS)->EnableWindow((GetDlgItem(IDC_ACCOUNTDATABASE_USER)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTDATABASE_USER_STATIC)->EnableWindow((GetDlgItem(IDC_ACCOUNTDATABASE_USER)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTDATABASE_USER)->EnableWindow((GetDlgItem(IDC_ACCOUNTDATABASE_USER)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	return((GetDlgItem(IDC_ACCOUNTDATABASE_USER)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

VOID CAccountDatabaseDialog::ShowDatabaseInfo()
{
	CString  szDatabase;

	GetDlgItem(IDC_ACCOUNTDATABASE_NAME)->GetWindowText(szDatabase);
	GetDlgItem(IDC_ACCOUNTDATABASE_ADD)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDatabase) == LB_ERR) ? CheckAccountPrivilege(PRIVILEGE_ACCOUNTRIGHTS_CHANGE) : FALSE);
	GetDlgItem(IDC_ACCOUNTDATABASE_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_ACCOUNTRIGHTS_CHANGE) : FALSE);
	GetDlgItem(IDC_ACCOUNTDATABASE_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_ACCOUNTRIGHTS_CHANGE) : FALSE);
}

BOOL CAccountDatabaseDialog::IsModified() CONST
{
	return((!m_pDatabases[0].Compare(&m_pDatabases[1])) ? TRUE : FALSE);
}

void CAccountDatabaseDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAccountDatabaseDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CAccountDatabaseDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CAccountDatabaseDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_ACCOUNTDATABASE_CONNECT, OnConnect)
	ON_BN_CLICKED(IDC_ACCOUNTDATABASE_ADD, OnAddDatabase)
	ON_BN_CLICKED(IDC_ACCOUNTDATABASE_REMOVE, OnRemoveDatabase)
	ON_BN_CLICKED(IDC_ACCOUNTDATABASE_REMOVEALL, OnRemoveAllDatabases)
	ON_BN_CLICKED(IDC_ACCOUNTDATABASE_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_ACCOUNTDATABASE_SERVER, OnSelchangeServer)
	ON_CBN_SELCHANGE(IDC_ACCOUNTDATABASE_NAME, OnSelchangeDatabase)
	ON_LBN_SELCHANGE(IDC_ACCOUNTDATABASE_ALLOWEDLIST, OnSelchangeUserDatabase)
	ON_CBN_EDITCHANGE(IDC_ACCOUNTDATABASE_SERVER, OnEditchangeServer)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CAccountDatabaseDialog message handlers

BOOL CAccountDatabaseDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	for (CLocaleDialog::OnInitDialog(); EnumServers() && EnumUser() && EnumDatabases() && EnumUserDatabases(); )
	{
		ShowDatabaseInfo();
		break;
	}
	return TRUE;
}

void CAccountDatabaseDialog::OnConnect()
{
	CHourglassCursor  cCursor;

	EnumDatabases();
	EnumUserDatabases();
	ShowDatabaseInfo();
}

void CAccountDatabaseDialog::OnAddDatabase()
{
	INT  nUser;
	INT  nUsers;
	INT  nDatabase;
	INT  nDatabases;
	CString  szServer;
	CString  szDatabase;
	CStringArray  szUsers;
	CStringArray  szPasswords;
	CUIntArray  nPrivileges;
	CDatabaseProfileInfo  *pDatabaseProfileInfo[2];
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_ACCOUNTDATABASE_NAME)->GetWindowText(szDatabase);
	GetDlgItem(IDC_ACCOUNTDATABASE_SERVER)->GetWindowText(szServer);
	if (SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szDatabase)) >= 0)
	{
		for (nDatabase = 0, nDatabases = (INT)m_pDatabases[0].GetSize(); nDatabase < nDatabases; nDatabase++)
		{
			if ((pDatabaseProfileInfo[0] = m_pDatabases[0].GetAt(nDatabase)) != (CDatabaseProfileInfo *)NULL)
			{
				if (!pDatabaseProfileInfo[0]->GetServer().CompareNoCase(szServer) && pDatabaseProfileInfo[0]->GetSpacecraft() == m_cAccountToken.GetSpacecraftName() && pDatabaseProfileInfo[0]->GetName() == szDatabase)
				{
					for (nUser = 0, nUsers = pDatabaseProfileInfo[0]->GetUsers(szUsers, szPasswords, nPrivileges); nUser < nUsers; nUser++)
					{
						if (szUsers.GetAt(nUser) == m_cAccountToken.GetUserName()) break;
						continue;
					}
					if (nUser == nUsers)
					{
						szUsers.Add(m_cAccountToken.GetUserName());
						szPasswords.Add(m_cAccountToken.GetPassword());
						nPrivileges.Add(DATABASE_PRIVILEGES_ALL);
						pDatabaseProfileInfo[0]->SetUsers(szUsers, szPasswords, nPrivileges);
					}
					break;
				}
			}
		}
		for (; (pDatabaseProfileInfo[0] = (nDatabase == nDatabases) ? new CDatabaseProfileInfo : (CDatabaseProfileInfo *)NULL); )
		{
			if ((pDatabaseProfileInfo[1] = m_pDatabases[2].GetAt(m_pDatabases[2].Find(szServer, szDatabase))) != (CDatabaseProfileInfo *)NULL)
			{
				for (pDatabaseProfileInfo[0]->Copy(pDatabaseProfileInfo[1]); pDatabaseProfileInfo[0]->GetUsers(szUsers, szPasswords, nPrivileges) >= 0; )
				{
					for (nUser = 0, nUsers = (INT)szUsers.GetSize(); nUser < nUsers; nUser++)
					{
						if (szUsers.GetAt(nUser) == m_cAccountToken.GetUserName()) break;
						continue;
					}
					if (nUser == nUsers)
					{
						szUsers.Add(m_cAccountToken.GetUserName());
						szPasswords.Add(m_cAccountToken.GetPassword());
						nPrivileges.Add(DATABASE_PRIVILEGES_ALL);
						pDatabaseProfileInfo[0]->SetUsers(szUsers, szPasswords, nPrivileges);
					}
					if (m_pDatabases[0].Add(pDatabaseProfileInfo[0]) < 0) delete pDatabaseProfileInfo[0];
					break;
				}
				break;
			}
			delete pDatabaseProfileInfo[0];
			break;
		}
		ShowDatabaseInfo();
	}
	GetDlgItem(IDC_ACCOUNTDATABASE_ALLOWEDLIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTDATABASE_ALLOWEDLIST)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTDATABASE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountDatabaseDialog::OnRemoveDatabase()
{
	INT  nUser;
	INT  nUsers;
	CString  szServer;
	CStringArray  szUsers;
	CStringArray  szPasswords;
	CUIntArray  nPrivileges;
	CDatabaseProfileInfo  *pDatabaseProfileInfo;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_ACCOUNTDATABASE_SERVER)->GetWindowText(szServer);
	if ((pDatabaseProfileInfo = m_pDatabases[0].GetAt(m_pDatabases[0].Find(szServer, Listbox_GetText(GetDlgItem(IDC_ACCOUNTDATABASE_ALLOWEDLIST), (INT)SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_GETCURSEL))))) && pDatabaseProfileInfo->GetUsers(szUsers, szPasswords, nPrivileges) > 0)
	{
		if (SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_GETCURSEL)) != LB_ERR)
		{
			for (nUser = 0, nUsers = (INT)szUsers.GetSize(); nUser < nUsers; nUser++)
			{
				if (szUsers.GetAt(nUser) == m_cAccountToken.GetUserName()) break;
				continue;
			}
			if (nUser < nUsers)
			{
				szUsers.RemoveAt(nUser);
				szPasswords.RemoveAt(nUser);
				nPrivileges.RemoveAt(nUser);
				pDatabaseProfileInfo->SetUsers(szUsers, szPasswords, nPrivileges);
			}
			SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_SETCURSEL, (WPARAM)-1);
			ShowDatabaseInfo();
		}
	}
	GetDlgItem(IDC_ACCOUNTDATABASE_ALLOWEDLIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTDATABASE_ALLOWEDLIST)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTDATABASE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountDatabaseDialog::OnRemoveAllDatabases()
{
	INT  nUser;
	INT  nUsers;
	INT  nDatabase;
	INT  nDatabases;
	CString  szServer;
	CStringArray  szUsers;
	CStringArray  szPasswords;
	CUIntArray  nPrivileges;
	CDatabaseProfileInfo  *pDatabaseProfileInfo;
	CHourglassCursor  cCursor;

	SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_RESETCONTENT);
	GetDlgItem(IDC_ACCOUNTDATABASE_SERVER)->GetWindowText(szServer);
	for (nDatabase = 0, nDatabases = (INT)m_pDatabases[0].GetSize(); nDatabase < nDatabases; nDatabase++)
	{
		if ((pDatabaseProfileInfo = m_pDatabases[0].GetAt(nDatabase)) && !pDatabaseProfileInfo->GetServer().CompareNoCase(szServer) && pDatabaseProfileInfo->GetUsers(szUsers, szPasswords, nPrivileges) > 0)
		{
			for (nUser = 0, nUsers = (INT)szUsers.GetSize(); nUser < nUsers; nUser++)
			{
				if (szUsers.GetAt(nUser) == m_cAccountToken.GetUserName()) break;
				continue;
			}
			if (nUser < nUsers)
			{
				szUsers.RemoveAt(nUser);
				szPasswords.RemoveAt(nUser);
				nPrivileges.RemoveAt(nUser);
				pDatabaseProfileInfo->SetUsers(szUsers, szPasswords, nPrivileges);
			}
		}
	}
	ShowDatabaseInfo();
	GetDlgItem(IDC_ACCOUNTDATABASE_ALLOWEDLIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTDATABASE_ALLOWEDLIST)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_ALLOWEDLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTDATABASE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountDatabaseDialog::OnSelchangeServer()
{
	if (SendDlgItemMessage(IDC_ACCOUNTDATABASE_SERVER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_ACCOUNTDATABASE_SERVER, CB_GETCURSEL)) >= 0)
	{
		EnumDatabases();
		EnumUserDatabases();
	}
	ShowDatabaseInfo();
}

void CAccountDatabaseDialog::OnEditchangeServer()
{
	CString  szServer;

	GetDlgItem(IDC_ACCOUNTDATABASE_SERVER)->GetWindowText(szServer);
	GetDlgItem(IDC_ACCOUNTDATABASE_CONNECT)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTDATABASE_SERVER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szServer) < 0) ? !szServer.IsEmpty() : FALSE);
}

void CAccountDatabaseDialog::OnSelchangeDatabase()
{
	ShowDatabaseInfo();
}

void CAccountDatabaseDialog::OnSelchangeUserDatabase()
{
	ShowDatabaseInfo();
}

void CAccountDatabaseDialog::OnOK()
{
	CHourglassCursor  cCursor;

	EndDialog(IDOK);
}

BOOL CAccountDatabaseDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_ACCOUNTDATABASESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CAccountDatabaseDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_ACCOUNTDATABASESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CAccountChangeDialog dialog

IMPLEMENT_DYNCREATE(CAccountChangeDialog, CLocaleDialog)

CAccountChangeDialog::CAccountChangeDialog(CWnd *pParentWnd) : CLocaleDialog(CAccountChangeDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CAccountChangeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CAccountChangeDialog::DoModal(CAccountToken *pAccountToken)
{
	m_pAccounts.Add(pAccountToken);
	return((INT)CLocaleDialog::DoModal());
}

BOOL CAccountChangeDialog::EnumComputers()
{
	GetDlgItem(IDC_ACCOUNTCHANGE_COMPUTERNAME)->SetWindowText(GetAccount()->GetComputerName());
	GetDlgItem(IDC_ACCOUNTCHANGE_DETAILS)->EnableWindow((GetDlgItem(IDC_ACCOUNTCHANGE_COMPUTERNAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_COMPUTERNAME_STATIC)->EnableWindow((GetDlgItem(IDC_ACCOUNTCHANGE_COMPUTERNAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_COMPUTERNAME)->EnableWindow((GetDlgItem(IDC_ACCOUNTCHANGE_COMPUTERNAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	return((GetDlgItem(IDC_ACCOUNTCHANGE_COMPUTERNAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

BOOL CAccountChangeDialog::EnumSpacecrafts()
{
	INT  nAccount;
	INT  nAccounts;
	CString  szAccount;
	CUserAccounts  cUserAccounts;
	CAccountToken  *pAccountToken;

	for (nAccount = 0, nAccounts = cUserAccounts.EnumAccounts(m_pAccounts) - 1; nAccount < nAccounts; nAccount++)
	{
		if ((pAccountToken = (CAccountToken *)m_pAccounts.GetAt(nAccount + 1)) != (CAccountToken *)NULL)
		{
			if (SendDlgItemMessage(IDC_ACCOUNTCHANGE_SPACECRAFTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szAccount = pAccountToken->GetSpacecraftName())) == CB_ERR)
			{
				SendDlgItemMessage(IDC_ACCOUNTCHANGE_SPACECRAFTNAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szAccount);
				continue;
			}
		}
	}
	for (nAccount = 0, nAccounts = (INT)(m_pAccounts.GetSize() - 1); nAccount < nAccounts; nAccount++)
	{
		if ((pAccountToken = m_pAccounts.GetAt(nAccount + 1)) && pAccountToken->HasSameOwner(m_pAccounts.GetAt(0)))
		{
			pAccountToken->SetMode(m_pAccounts.GetAt(0)->GetMode());
			continue;
		}
	}
	SendDlgItemMessage(IDC_ACCOUNTCHANGE_SPACECRAFTNAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_ACCOUNTCHANGE_SPACECRAFTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)GetAccount()->GetSpacecraftName()), 0));
	GetDlgItem(IDC_ACCOUNTCHANGE_SPACECRAFTNAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTCHANGE_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_SPACECRAFTNAME)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTCHANGE_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_ACCOUNTCHANGE_SPACECRAFTNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CAccountChangeDialog::EnumUsers()
{
	INT  nUser;
	INT  nUsers;
	CString  szUser;
	CString  szComputer;
	CString  szSpacecraft;
	CAccountToken  *pAccountToken;

	SendDlgItemMessage(IDC_ACCOUNTCHANGE_USERNAME, CB_RESETCONTENT);
	GetDlgItem(IDC_ACCOUNTCHANGE_COMPUTERNAME)->GetWindowText(szComputer);
	GetDlgItem(IDC_ACCOUNTCHANGE_SPACECRAFTNAME)->GetWindowText(szSpacecraft);
	for (nUser = 0, nUsers = (INT)m_pAccounts.GetSize(); nUser < nUsers - 1; nUser++)
	{
		if ((pAccountToken = m_pAccounts.GetAt(nUser + 1)) && !pAccountToken->GetComputerName().CompareNoCase(szComputer) && !pAccountToken->GetSpacecraftName().CompareNoCase(szSpacecraft))
		{
			if (pAccountToken->CheckPrivilege(PRIVILEGE_ONLINE_OPERATE) || pAccountToken->CheckPrivilege(PRIVILEGE_OFFLINE_OPERATE))
			{
				if (SendDlgItemMessage(IDC_ACCOUNTCHANGE_USERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szUser = pAccountToken->GetUserName())) == CB_ERR)
				{
					SendDlgItemMessage(IDC_ACCOUNTCHANGE_USERNAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szUser);
					continue;
				}
			}
		}
	}
	SendDlgItemMessage(IDC_ACCOUNTCHANGE_USERNAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_ACCOUNTCHANGE_USERNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)GetAccount()->GetUserName()), 0));
	GetDlgItem(IDC_ACCOUNTCHANGE_USERNAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTCHANGE_USERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_USERNAME)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTCHANGE_USERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_ACCOUNTCHANGE_USERNAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CAccountChangeDialog::EnumDatabases()
{
	INT  nUser;
	INT  nUsers;
	INT  nDatabase;
	INT  nDatabases;
	CString  szUser;
	CString  szDatabase;
	CString  szSpacecraft;
	CStringArray  szUsers;
	CAccountToken  *pAccountToken;
	CDatabaseProfileInfo  *pDatabaseProfileInfo;
	CDatabases  cDatabases;

	SendDlgItemMessage(IDC_ACCOUNTCHANGE_DATABASE, CB_RESETCONTENT);
	GetDlgItem(IDC_ACCOUNTCHANGE_USERNAME)->GetWindowText(szUser);
	GetDlgItem(IDC_ACCOUNTCHANGE_SPACECRAFTNAME)->GetWindowText(szSpacecraft);
	for (nDatabase = 0, nDatabases = ((pAccountToken = GetAccount(FindAccount()))) ? ((IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_ONLINE) || IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_OFFLINE) || (cDatabases.GetDatabases(m_pDatabases[0], FALSE) && cDatabases.GetDatabases(m_pDatabases[1], TRUE))) ? (((!IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_ONLINE) && !IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_OFFLINE) && pAccountToken->CheckPrivilege(PRIVILEGE_ONLINE_OPERATE) && m_pDatabases[0].GetSize() > 0) || IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_ONLINE)) ? (INT)m_pDatabases[0].GetSize() : (INT)m_pDatabases[1].GetSize()) : 0) : 0; nDatabase < nDatabases; nDatabase++)
	{
		if ((pDatabaseProfileInfo = ((!IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_ONLINE) && !IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_OFFLINE) && pAccountToken->CheckPrivilege(PRIVILEGE_ONLINE_OPERATE) && m_pDatabases[0].GetSize() > 0) || IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_ONLINE)) ? m_pDatabases[0].GetAt(nDatabase) : m_pDatabases[1].GetAt(nDatabase)) && pDatabaseProfileInfo->GetUsers(szUsers) > 0 && pDatabaseProfileInfo->GetSpacecraft() == szSpacecraft)
		{
			for (nUser = 0, nUsers = (INT)szUsers.GetSize(); nUser < nUsers; nUser++)
			{
				if (szUsers.GetAt(nUser) == szUser) break;
				continue;
			}
			if (nUser < nUsers)
			{
				if (SendDlgItemMessage(IDC_ACCOUNTCHANGE_DATABASE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szDatabase = pDatabaseProfileInfo->GetName())) == CB_ERR)
				{
					SendDlgItemMessage(IDC_ACCOUNTCHANGE_DATABASE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szDatabase);
					continue;
				}
			}
		}
	}
	SendDlgItemMessage(IDC_ACCOUNTCHANGE_DATABASE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_ACCOUNTCHANGE_DATABASE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)GetAccount()->GetDatabase()), 0));
	GetDlgItem(IDC_ACCOUNTCHANGE_DATABASE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTCHANGE_DATABASE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_DATABASE)->EnableWindow((SendDlgItemMessage(IDC_ACCOUNTCHANGE_DATABASE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return TRUE;
}

BOOL CAccountChangeDialog::EnumServers()
{
	INT  nPos;
	INT  nServer;
	INT  nServers;
	CString  szServer;
	CStringArray  szServers;
	CAccountToken  *pAccountToken;
	CServerAddressBook  cServerAddressBook;

	SendDlgItemMessage(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_LOGINACCOUNTSDIALOG_NOREMOTENETWORK));
	for (nServer = 0, nServers = ((pAccountToken = GetAccount(FindAccount())) && pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN)) ? ((cServerAddressBook.GetServerAddressBook(m_pServers)) ? cServerAddressBook.EnumServers(szServers) : 0) : 0; nServer < nServers; nServer++)
	{
		if (SendDlgItemMessage(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szServers.GetAt(nServer)) == CB_ERR)
		{
			SendDlgItemMessage(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szServers.GetAt(nServer));
			continue;
		}
	}
	for (szServer = GetAccount()->GetRASServer(); (nPos = szServer.Find(TAB)) >= 0; )
	{
		szServer = szServer.Left(nPos);
		break;
	}
	SendDlgItemMessage(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szServer), 0));
	return TRUE;
}

BOOL CAccountChangeDialog::EnumLogins()
{
	return((GetLoginOptions(m_pLoginOptions[0])) ? m_pLoginOptions[1].Copy(&m_pLoginOptions[0]) : FALSE);
}

BOOL CAccountChangeDialog::ShowAccountInfo()
{
	CString  szServer;
	CString  szDatabase;
	CString  szPassword;
	CTimeKey  tValidity[2];
	CAccountToken  *pAccountToken;
	CServerProfileInfo  *pServerInfo;

	if ((pAccountToken = GetAccount(FindAccount())) && pAccountToken->GetValidity(tValidity[0], tValidity[1]))
	{
		for (GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER)->GetWindowText(szServer), szServer = (szServer != STRING(IDS_LOGINACCOUNTSDIALOG_NOREMOTENETWORK)) ? szServer : EMPTYSTRING; szServer.IsEmpty(); )
		{
			SendDlgItemMessage(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_LOGINACCOUNTSDIALOG_NOREMOTENETWORK)));
			GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_USER)->SetWindowText(EMPTYSTRING);
			GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_PASSWORD)->SetWindowText(EMPTYSTRING);
			break;
		}
		for (CheckRadioButton(IDC_ACCOUNTCHANGE_MODE_ONLINE, IDC_ACCOUNTCHANGE_MODE_OFFLINE, (!IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_ONLINE) && !IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_OFFLINE)) ? ((pAccountToken->CheckPrivilege(PRIVILEGE_ONLINE_OPERATE) && m_pDatabases[0].GetSize() > 0) ? IDC_ACCOUNTCHANGE_MODE_ONLINE : ((pAccountToken->CheckPrivilege(PRIVILEGE_OFFLINE_OPERATE) && m_pDatabases[1].GetSize() > 0) ? IDC_ACCOUNTCHANGE_MODE_OFFLINE : -1)) : ((IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_ONLINE)) ? IDC_ACCOUNTCHANGE_MODE_ONLINE : IDC_ACCOUNTCHANGE_MODE_OFFLINE)), CheckDlgButton(IDC_ACCOUNTCHANGE_REMOTENETWORK_DIALUP, ((pServerInfo = m_pServers.GetAt(m_pServers.Find(szServer))) && (pServerInfo->GetMode() & SERVERPROFILE_ACCESS_PHONE)) ? pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN) : FALSE); !pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN); )
		{
			SendDlgItemMessage(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER, CB_SETCURSEL, (WPARAM)-1);
			GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER)->GetWindowText(szServer);
			GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_USER)->SetWindowText(EMPTYSTRING);
			GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_PASSWORD)->SetWindowText(EMPTYSTRING);
			CheckDlgButton(IDC_ACCOUNTCHANGE_REMOTENETWORK_DIALUP, FALSE);
			break;
		}
		for (GetDlgItem(IDC_ACCOUNTCHANGE_DATABASE)->GetWindowText(szDatabase), szPassword = pAccountToken->GetPassword(); !CheckAccountOwner(pAccountToken) || GetAccountDatabase() != szDatabase; )
		{
			szPassword.Empty();
			break;
		}
		GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD)->SetWindowText(szPassword);
		GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD_STATIC)->EnableWindow(!pAccountToken->GetPassword().IsEmpty());
		GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD)->EnableWindow(!pAccountToken->GetPassword().IsEmpty());
		GetDlgItem(IDC_ACCOUNTCHANGE_MODE)->EnableWindow(IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_ONLINE) || IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_OFFLINE));
		GetDlgItem(IDC_ACCOUNTCHANGE_MODE_ONLINE)->EnableWindow(((IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_ONLINE) || IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_OFFLINE)) && m_pDatabases[0].GetSize() > 0) ? pAccountToken->CheckPrivilege(PRIVILEGE_ONLINE_OPERATE) : FALSE);
		GetDlgItem(IDC_ACCOUNTCHANGE_MODE_OFFLINE)->EnableWindow(((IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_ONLINE) || IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_OFFLINE)) && m_pDatabases[1].GetSize() > 0) ? pAccountToken->CheckPrivilege(PRIVILEGE_OFFLINE_OPERATE) : FALSE);
		GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_EXPIRATION)->SetWindowText((tValidity[0] < tValidity[1]) ? (LPCTSTR)tValidity[1].FormatGmt(STRING(IDS_TIMEKEY_DATEFORMAT)) : EMPTYSTRING);
		GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_LIFETIME)->EnableWindow((tValidity[0].GetTime() >= 0 && tValidity[1].GetTime() >= 0) ? TRUE : FALSE);
		GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_UNLIMITED)->EnableWindow((!tValidity[0].GetTime() && !tValidity[1].GetTime()) ? TRUE : FALSE);
		GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_UNLIMITED)->ShowWindow((!tValidity[0].GetTime() && !tValidity[1].GetTime()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_LIMITED)->EnableWindow((tValidity[0] < tValidity[1]) ? TRUE : FALSE);
		GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_LIMITED)->ShowWindow((tValidity[0] < tValidity[1]) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_EXPIRATION)->EnableWindow((tValidity[0] < tValidity[1]) ? TRUE : FALSE);
		GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_EXPIRATION)->ShowWindow((tValidity[0] < tValidity[1]) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK)->EnableWindow(pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN));
		GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER_STATIC)->EnableWindow(pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN));
		GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER)->EnableWindow(pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN));
		GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_OPTIONS)->EnableWindow(pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN));
		GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_USER)->SetWindowText((GetAccount()->GetRASServer() == szServer + TAB  &&  !szServer.IsEmpty()) ? GetAccount()->GetRASUserName() : EMPTYSTRING);
		GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_USER_STATIC)->EnableWindow((!szServer.IsEmpty()) ? pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN) : FALSE);
		GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_USER)->EnableWindow((!szServer.IsEmpty()) ? pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN) : FALSE);
		GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_PASSWORD)->SetWindowText((GetAccount()->GetRASServer() == szServer + TAB  &&  !szServer.IsEmpty()) ? GetAccount()->GetRASPassword() : EMPTYSTRING);
		GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_PASSWORD_STATIC)->EnableWindow((!szServer.IsEmpty()) ? pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN) : FALSE);
		GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_PASSWORD)->EnableWindow((!szServer.IsEmpty()) ? pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN) : FALSE);
		GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_DIALUP)->EnableWindow((!szServer.IsEmpty()) ? pAccountToken->CheckPrivilege(PRIVILEGE_NETWORK_LOGIN) : FALSE);
		return(!pAccountToken->GetPassword().IsEmpty());
	}
	CheckDlgButton(IDC_ACCOUNTCHANGE_MODE_ONLINE, FALSE);
	CheckDlgButton(IDC_ACCOUNTCHANGE_MODE_OFFLINE, FALSE);
	CheckDlgButton(IDC_ACCOUNTCHANGE_REMOTENETWORK_DIALUP, FALSE);
	SendDlgItemMessage(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_EXPIRATION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_USER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_PASSWORD)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_MODE)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_MODE_ONLINE)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_MODE_OFFLINE)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_LIFETIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_UNLIMITED)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_UNLIMITED)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_LIMITED)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_LIMITED)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_EXPIRATION)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_VALIDITY_EXPIRATION)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_OPTIONS)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_USER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_USER)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_PASSWORD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_PASSWORD)->EnableWindow(FALSE);
	GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_DIALUP)->EnableWindow(FALSE);
	return FALSE;
}

INT CAccountChangeDialog::FindAccount() CONST
{
	CString  szUser;
	CString  szComputer;
	CString  szSpacecraft;

	GetDlgItem(IDC_ACCOUNTCHANGE_COMPUTERNAME)->GetWindowText(szComputer);
	GetDlgItem(IDC_ACCOUNTCHANGE_SPACECRAFTNAME)->GetWindowText(szSpacecraft);
	GetDlgItem(IDC_ACCOUNTCHANGE_USERNAME)->GetWindowText(szUser);
	return FindAccount(szComputer, szSpacecraft, szUser);
}
INT CAccountChangeDialog::FindAccount(LPCTSTR pszComputerName, LPCTSTR pszSpacecraftName, LPCTSTR pszUserName) CONST
{
	INT  nAccount;
	INT  nAccounts;
	CString  szUser;
	CString  szComputer;
	CString  szSpacecraft;

	for (nAccount = 0, nAccounts = (INT)(m_pAccounts.GetSize() - 1); nAccount < nAccounts; nAccount++)
	{
		if (m_pAccounts.GetAt(nAccount + 1)->GetOwner(szComputer, szSpacecraft, szUser) && !szComputer.CompareNoCase(pszComputerName) && !szSpacecraft.CompareNoCase(pszSpacecraftName) && !szUser.CompareNoCase(pszUserName)) break;
		continue;
	}
	return((nAccount < nAccounts) ? (nAccount + 1) : -1);
}

CAccountToken *CAccountChangeDialog::GetAccount(INT nIndex) CONST
{
	return((nIndex < m_pAccounts.GetSize()) ? m_pAccounts.GetAt(nIndex) : (CAccountToken *)NULL);
}

BOOL CAccountChangeDialog::IsModified() CONST
{
	CString  szServer;
	CString  szUser[2];
	CString  szDatabase;
	CString  szSpacecraft;

	for (GetDlgItem(IDC_ACCOUNTCHANGE_SPACECRAFTNAME)->GetWindowText(szSpacecraft), GetDlgItem(IDC_ACCOUNTCHANGE_DATABASE)->GetWindowText(szDatabase), GetDlgItem(IDC_ACCOUNTCHANGE_USERNAME)->GetWindowText(szUser[0]), GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_USER)->GetWindowText(szUser[1]), GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER)->GetWindowText(szServer); szServer == STRING(IDS_LOGINACCOUNTSDIALOG_NOREMOTENETWORK); )
	{
		szServer.Empty();
		break;
	}
	return((GetAccountSpacecraftName() != szSpacecraft || GetAccountDatabase() != szDatabase || GetAccountUserName() != szUser[0] || (IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_ONLINE) && GetAccountMode() != ACCOUNT_MODE_ONLINE) || (IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_OFFLINE) && GetAccountMode() != ACCOUNT_MODE_OFFLINE) || (GetAccountRASServer().IsEmpty() && !szServer.IsEmpty()) || (!GetAccountRASServer().IsEmpty() && GetAccountRASServer() != szServer + TAB) || GetAccountRASUserName() != szUser[1] || !m_pLoginOptions[0].Compare(&m_pLoginOptions[1])) ? TRUE : FALSE);
}

BOOL CAccountChangeDialog::Check(BOOL bModified) CONST
{
	CString  szUser;
	CString  szServer;
	CString  szPassword[2];
	CAccountToken  *pAccountToken;

	GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD)->GetWindowText(szPassword[0]);
	GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_USER)->GetWindowText(szUser);
	GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER)->GetWindowText(szServer);
	GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_PASSWORD)->GetWindowText(szPassword[1]);
	return(((((pAccountToken = m_pAccounts.GetAt(FindAccount())) && pAccountToken->GetPassword().IsEmpty()) || !szPassword[0].IsEmpty()) && (((szServer == STRING(IDS_LOGINACCOUNTSDIALOG_NOREMOTENETWORK) || szServer.IsEmpty()) && szUser.IsEmpty() && szPassword[1].IsEmpty()) || (szServer != STRING(IDS_LOGINACCOUNTSDIALOG_NOREMOTENETWORK) && !szServer.IsEmpty() && !szUser.IsEmpty()))) ? (!bModified || IsModified()) : FALSE);
}

void CAccountChangeDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAccountChangeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CAccountChangeDialog::PostNcDestroy()
{
	m_pServers.RemoveAll();
	m_pAccounts.RemoveAt(0);
	m_pAccounts.RemoveAll();
	m_pDatabases[0].RemoveAll();
	m_pDatabases[1].RemoveAll();
	m_pLoginOptions[0].RemoveAll();
	m_pLoginOptions[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CAccountChangeDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CAccountChangeDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_ACCOUNTCHANGE_MODE_ONLINE, OnOnlineMode)
	ON_BN_CLICKED(IDC_ACCOUNTCHANGE_MODE_OFFLINE, OnOfflineMode)
	ON_BN_CLICKED(IDC_ACCOUNTCHANGE_REMOTENETWORK_OPTIONS, OnOptions)
	ON_BN_CLICKED(IDC_ACCOUNTCHANGE_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_ACCOUNTCHANGE_SPACECRAFTNAME, OnSelchangeSpacecraftName)
	ON_CBN_SELCHANGE(IDC_ACCOUNTCHANGE_USERNAME, OnSelchangeUserName)
	ON_CBN_SELCHANGE(IDC_ACCOUNTCHANGE_DATABASE, OnSelchangeDatabase)
	ON_CBN_SELCHANGE(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER, OnSelchangeNetworkServer)
	ON_CBN_EDITCHANGE(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER, OnEditchangeNetworkServer)
	ON_EN_CHANGE(IDC_ACCOUNTCHANGE_PASSWORD, OnEditchangePassword)
	ON_EN_CHANGE(IDC_ACCOUNTCHANGE_REMOTENETWORK_USER, OnEditchangeNetworkUser)
	ON_EN_CHANGE(IDC_ACCOUNTCHANGE_REMOTENETWORK_PASSWORD, OnEditchangeNetworkPassword)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CAccountChangeDialog message handlers

BOOL CAccountChangeDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	AccessControl(IDC_ACCOUNTCHANGE_REMOTENETWORK_DIALUP, FALSE);
	if (EnumComputers() && EnumSpacecrafts() && EnumUsers())
	{
		EnumDatabases();
		EnumServers();
		EnumLogins();
		if (ShowAccountInfo())
		{
			GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD)->SetFocus();
			return FALSE;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
	return TRUE;
}

void CAccountChangeDialog::OnOnlineMode()
{
	for (EnumDatabases(); ShowAccountInfo(); )
	{
		SendDlgItemMessage(IDC_ACCOUNTCHANGE_PASSWORD, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountChangeDialog::OnOfflineMode()
{
	for (EnumDatabases(); ShowAccountInfo(); )
	{
		SendDlgItemMessage(IDC_ACCOUNTCHANGE_PASSWORD, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountChangeDialog::OnOptions()
{
	CLoginOptionsDialog  cLoginOptionsDialog;

	cLoginOptionsDialog.DoModal(m_pLoginOptions[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountChangeDialog::OnSelchangeSpacecraftName()
{
	for (EnumUsers(), EnumDatabases(); ShowAccountInfo(); )
	{
		SendDlgItemMessage(IDC_ACCOUNTCHANGE_PASSWORD, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountChangeDialog::OnSelchangeUserName()
{
	for (EnumDatabases(); ShowAccountInfo(); )
	{
		SendDlgItemMessage(IDC_ACCOUNTCHANGE_PASSWORD, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountChangeDialog::OnSelchangeDatabase()
{
	if (ShowAccountInfo())
	{
		SendDlgItemMessage(IDC_ACCOUNTCHANGE_PASSWORD, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountChangeDialog::OnSelchangeNetworkServer()
{
	for (SendDlgItemMessage(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER, CB_GETCURSEL)); ShowAccountInfo() >= 0; )
	{
		SendDlgItemMessage(IDC_ACCOUNTCHANGE_REMOTENETWORK_USER, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_USER)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountChangeDialog::OnEditchangePassword()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountChangeDialog::OnEditchangeNetworkServer()
{
	ShowAccountInfo();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountChangeDialog::OnEditchangeNetworkUser()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountChangeDialog::OnEditchangeNetworkPassword()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountChangeDialog::OnOK()
{
	INT  nAccount;
	INT  nAccounts;
	BOOL  bAccount;
	HANDLE  hMutex;
	CString  szUser;
	CString  szServer;
	CString  szMessage;
	CString  szDatabase;
	CString  szPassword[2];
	CAccountToken  *pAccountToken;
	CHourglassCursor  cCursor;

	if ((pAccountToken = GetAccount(FindAccount())))
	{
		for (GetDlgItem(IDC_ACCOUNTCHANGE_DATABASE)->GetWindowText(szDatabase), GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD)->GetWindowText(szPassword[0]), GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_USER)->GetWindowText(szUser), GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_SERVER)->GetWindowText(szServer), GetDlgItem(IDC_ACCOUNTCHANGE_REMOTENETWORK_PASSWORD)->GetWindowText(szPassword[1]), szServer = (szServer != STRING(IDS_LOGINACCOUNTSDIALOG_NOREMOTENETWORK)) ? szServer : EMPTYSTRING, szServer = (IsDlgButtonChecked(IDC_ACCOUNTCHANGE_REMOTENETWORK_DIALUP)) ? (szServer + TAB) : szServer, hMutex = (HANDLE)NULL; (bAccount = (!pAccountToken->IsUnique() || ((hMutex = CreateMutex((LPSECURITY_ATTRIBUTES)NULL, FALSE, STRING(IDS_MUTEXTYPE_GLOBALPREFIX) + pAccountToken->GetSpacecraftName() + TAB + pAccountToken->GetUserName())) && ((pAccountToken->GetSpacecraftName() == GetAccountSpacecraftName() && pAccountToken->GetUserName() == GetAccountUserName()) || GetLastError() != ERROR_ALREADY_EXISTS)))); )
		{
			if (pAccountToken->GetPassword() == szPassword[0])
			{
				for (SetLoginData(hMutex); !m_pLoginOptions[0].Compare(&m_pLoginOptions[1]); )
				{
					SetLoginOptions(m_pLoginOptions[0]);
					break;
				}
				pAccountToken->SetMode((IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_ONLINE) || IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_OFFLINE)) ? ((IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_ONLINE)) ? ACCOUNT_MODE_ONLINE : ACCOUNT_MODE_OFFLINE) : 0);
				pAccountToken->SetDatabase(szDatabase);
				pAccountToken->SetRASServer(szServer);
				pAccountToken->SetRASUserName(szUser);
				pAccountToken->SetRASPassword(szPassword[1]);
				GetAccount()->Copy(pAccountToken);
				EndDialog(IDOK);
				return;
			}
			for (nAccount = 0, nAccounts = (INT)(m_pAccounts.GetSize() - 1); nAccount < nAccounts; nAccount++)
			{
				if (m_pAccounts.GetAt(nAccount + 1)->IsAdministrator() && m_pAccounts.GetAt(nAccount + 1)->GetPassword() == szPassword[0]) break;
				continue;
			}
			if (nAccount < nAccounts)
			{
				for (SetLoginData(hMutex); !m_pLoginOptions[0].Compare(&m_pLoginOptions[1]); )
				{
					SetLoginOptions(m_pLoginOptions[0]);
					break;
				}
				pAccountToken->SetMode((IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_ONLINE) || IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_OFFLINE)) ? ((IsDlgButtonChecked(IDC_ACCOUNTCHANGE_MODE_ONLINE)) ? ACCOUNT_MODE_ONLINE : ACCOUNT_MODE_OFFLINE) : 0);
				pAccountToken->SetDatabase(szDatabase);
				pAccountToken->SetRASServer(szServer);
				pAccountToken->SetRASUserName(szUser);
				pAccountToken->SetRASPassword(szPassword[1]);
				GetAccount()->Copy(pAccountToken);
				EndDialog(IDOK);
				return;
			}
			if (hMutex != (HANDLE)NULL)
			{
				CloseHandle(hMutex);
				hMutex = (HANDLE)NULL;
			}
			break;
		}
		if (!bAccount)
		{
			for (szMessage.Format(STRING(IDS_APPLICATIONINFO_LAUNCHMESSAGE_DENIEDACCOUNT), (LPCTSTR)pAccountToken->GetUserNameW()); hMutex != (HANDLE)NULL; )
			{
				CloseHandle(hMutex);
				break;
			}
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_INFORMATIONAL, szMessage);
		}
	}
	GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_ACCOUNTCHANGE_PASSWORD)->SetFocus();
	CAudioDevice::AlertBySound();
}

BOOL CAccountChangeDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_ACCOUNTCHANGEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CAccountChangeDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_ACCOUNTCHANGEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CAccountDirectoryDialog dialog

IMPLEMENT_DYNCREATE(CAccountDirectoryDialog, CLocaleDialog)

CAccountDirectoryDialog::CAccountDirectoryDialog(CWnd *pParentWnd) : CLocaleDialog(CAccountDirectoryDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CAccountDirectoryDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CAccountDirectoryDialog::DoModal(CStringArray &szUsers)
{
	INT  nResult;

	for (m_szUsers.Copy(szUsers); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		szUsers.Copy(m_szUsers);
		break;
	}
	return nResult;
}

BOOL CAccountDirectoryDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_ACCOUNTDIRECTORY_USERS)->SendMessage(LB_GETSELCOUNT) > 0) ? TRUE : FALSE);
}

void CAccountDirectoryDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAccountDirectoryDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CAccountDirectoryDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CAccountDirectoryDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_ACCOUNTDIRECTORY_HELP, OnHelp)
	ON_LBN_SELCHANGE(IDC_ACCOUNTDIRECTORY_USERS, OnSelchangeUsers)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CAccountDirectoryDialog message handlers

BOOL CAccountDirectoryDialog::OnInitDialog()
{
	INT  nAccount;
	INT  nAccounts;
	CUserAccounts  cUserAccounts;
	CAccountTokens  pAccountTokens;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	for (nAccount = 0, nAccounts = cUserAccounts.EnumAccounts(pAccountTokens); nAccount < nAccounts; nAccount++)
	{
		if (!pAccountTokens.GetAt(nAccount)->GetSpacecraftName().CompareNoCase(GetAccountSpacecraftName()) && SendDlgItemMessage(IDC_ACCOUNTDIRECTORY_USERS, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pAccountTokens.GetAt(nAccount)->GetUserName()) < 0) break;
		continue;
	}
	if (nAccount == nAccounts)
	{
		GetDlgItem(IDC_ACCOUNTDIRECTORY_COMPUTERNAME)->SetWindowText(GetAccountComputerName());
		GetDlgItem(IDC_ACCOUNTDIRECTORY_SPACECRAFTNAME)->SetWindowText(GetAccountSpacecraftName());
		GetDlgItem(IDC_ACCOUNTDIRECTORY_DETAILS)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTDIRECTORY_COMPUTERNAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTDIRECTORY_COMPUTERNAME)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTDIRECTORY_SPACECRAFTNAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTDIRECTORY_SPACECRAFTNAME)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTDIRECTORY_USERS_STATIC)->EnableWindow();
		GetDlgItem(IDC_ACCOUNTDIRECTORY_USERS)->EnableWindow();
		return TRUE;
	}
	SendDlgItemMessage(IDC_ACCOUNTDIRECTORY_USERS, LB_RESETCONTENT);
	return TRUE;
}

void CAccountDirectoryDialog::OnSelchangeUsers()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAccountDirectoryDialog::OnOK()
{
	INT  nAccount;
	INT  nAccounts;
	CUIntArray  nAccountsID;
	CHourglassCursor  cCursor;

	for (nAccount = 0, nAccounts = (INT)SendDlgItemMessage(IDC_ACCOUNTDIRECTORY_USERS, LB_GETSELCOUNT), nAccountsID.SetSize(nAccounts); (nAccount || (nAccountsID.GetSize() == nAccounts && SendDlgItemMessage(IDC_ACCOUNTDIRECTORY_USERS, LB_GETSELITEMS, nAccounts, (LPARAM)nAccountsID.GetData()) > 0)) && nAccount < nAccounts; nAccount++)
	{
		m_szUsers.Add(Listbox_GetText(GetDlgItem(IDC_ACCOUNTDIRECTORY_USERS), nAccountsID.GetAt(nAccount)));
		continue;
	}
	EndDialog((nAccount == nAccounts) ? IDOK : IDCANCEL);
}

BOOL CAccountDirectoryDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_ACCOUNTDIRECTORYDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CAccountDirectoryDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_ACCOUNTDIRECTORYDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CFileBrowseDialog

IMPLEMENT_DYNCREATE(CFileBrowseDialog, CFileDialog)

CFileBrowseDialog::CFileBrowseDialog(CWnd *pParentWnd, LPCTSTR pszFileName, LPCTSTR pszDefaultExtension, LPCTSTR pszFilter, DWORD dwFlags) : CFileDialog(TRUE, pszDefaultExtension, pszFileName, dwFlags, pszFilter, pParentWnd)
{
	m_ofn.lpstrTitle = STRING(IDS_FILEBROWSEDIALOG_TITLE);
	GetCurrentDirectory(sizeof(m_szDirectory) / sizeof(TCHAR), m_szDirectory);
}
CFileBrowseDialog::CFileBrowseDialog(CWnd *pParentWnd, UINT nCtrlID, LPCTSTR pszDefaultExtension, LPCTSTR pszFilter, DWORD dwFlags) : CFileDialog(TRUE, pszDefaultExtension, (LPCTSTR)NULL, dwFlags, pszFilter, pParentWnd)
{
	CWnd  *pWnd;
	CString  szFileName;

	for (m_ofn.lpstrTitle = STRING(IDS_FILEBROWSEDIALOG_TITLE), GetCurrentDirectory(sizeof(m_szDirectory) / sizeof(TCHAR), m_szDirectory); (pWnd = (IsWindow(pParentWnd->GetSafeHwnd())) ? pParentWnd->GetDlgItem(nCtrlID) : (CWnd *)NULL); )
	{
		for (pWnd->GetWindowText(szFileName); !szFileName.IsEmpty(); )
		{
			_tcscpy_s(m_szFileName, sizeof(m_szFileName) / sizeof(TCHAR), szFileName);
			break;
		}
		break;
	}
}

void CFileBrowseDialog::PostNcDestroy()
{
	SetCurrentDirectory(m_szDirectory);
	CFileDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CFileBrowseDialog, CFileDialog)
	//{{AFX_MSG_MAP(CFileBrowseDialog)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CFileBrowseDialog message handlers


/////////////////////////////////////////////////////////////////////////////
// CPasswordDialog dialog

IMPLEMENT_DYNCREATE(CPasswordDialog, CLocaleDialog)

CPasswordDialog::CPasswordDialog(CWnd *pParentWnd) : CLocaleDialog(CPasswordDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CPasswordDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CPasswordDialog::DoModal(LPCTSTR pszFacility, LPCTSTR pszPassword)
{
	m_szFacility = pszFacility;
	m_szPassword = pszPassword;
	return((INT)CLocaleDialog::DoModal());
}

BOOL CPasswordDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_PASSWORD_CONTENTS)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

void CPasswordDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CPasswordDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CPasswordDialog::PostNcDestroy()
{
	m_szFacility.Empty();
	m_szPassword.Empty();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CPasswordDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CPasswordDialog)
	ON_EN_CHANGE(IDC_PASSWORD_CONTENTS, OnEditchangePassword)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CPasswordDialog message handlers

BOOL CPasswordDialog::OnInitDialog()
{
	CString  szFacility;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_PASSWORD_DETAILS)->GetWindowText(szFacility);
	GetDlgItem(IDC_PASSWORD_DETAILS)->SetWindowText((!m_szFacility.IsEmpty()) ? m_szFacility : szFacility);
	GetDlgItem(IDC_PASSWORD_DETAILS)->EnableWindow();
	GetDlgItem(IDC_PASSWORD_COMMENT)->EnableWindow();
	GetDlgItem(IDC_PASSWORD_TIP)->EnableWindow();
	GetDlgItem(IDC_PASSWORD_CONTENTS_STATIC)->EnableWindow();
	GetDlgItem(IDC_PASSWORD_CONTENTS)->EnableWindow();
	return TRUE;
}

void CPasswordDialog::OnEditchangePassword()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CPasswordDialog::OnOK()
{
	INT  nAccount;
	INT  nAccounts;
	CString  szPassword;
	CUserAccounts  cUserAccounts;
	CAccountTokens  pAccountTokens;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_PASSWORD_CONTENTS)->GetWindowText(szPassword);
	if (m_szPassword == szPassword || (m_szPassword == EOL  &&  szPassword == GetAccountPassword()))
	{
		EndDialog(IDOK);
		return;
	}
	for (nAccount = 0, nAccounts = cUserAccounts.EnumAccounts(pAccountTokens); nAccount < nAccounts; nAccount++)
	{
		if (!pAccountTokens.GetAt(nAccount)->IsAdministrator() || (pAccountTokens.GetAt(nAccount)->GetPassword() != szPassword)) continue;
		break;
	}
	if (nAccount == nAccounts)
	{
		ReportEvent(USER_ERROR_INVALID_PASSWORD);
		GetDlgItem(IDC_PASSWORD_CONTENTS)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_PASSWORD_CONTENTS)->SetFocus();
		return;
	}
	EndDialog(IDOK);
}


/////////////////////////////////////////////////////////////////////////////
// CPrivilegesDialog dialog

IMPLEMENT_DYNCREATE(CPrivilegesDialog, CLocaleDialog)

CPrivilegesDialog::CPrivilegesDialog(CWnd *pParentWnd) : CLocaleDialog(CPrivilegesDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CPrivilegesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

UINT CPrivilegesDialog::QueryRights() CONST
{
	INT  nIndex;
	INT  nRight;
	INT  nRights;
	CString  szRight;
	CUIntArray  nPrivileges;
	CStringArray  szPrivileges;
	CAccountToken  *pAccountToken;

	if ((pAccountToken = GetAccount(TRUE)))
	{
		if ((nIndex = (INT)GetDlgItem(IDC_PRIVILEGES_RIGHTS)->SendMessage(CB_GETCURSEL)) >= 0 && pAccountToken->GetAllPrivileges(nPrivileges) && pAccountToken->LookupAllPrivileges(szPrivileges))
		{
			for (nRight = 0, nRights = (INT)szPrivileges.GetSize(), szRight = Combobox_GetText(GetDlgItem(IDC_PRIVILEGES_RIGHTS), nIndex); nRight < nRights; nRight++)
			{
				if (szPrivileges.GetAt(nRight) == szRight) break;
				continue;
			}
			return((nRight < nRights) ? nPrivileges[nRight] : 0);
		}
	}
	return 0;
}

UINT CPrivilegesDialog::QueryGrantedRights() CONST
{
	INT  nIndex;
	INT  nRight;
	INT  nRights;
	CString  szRight;
	CUIntArray  nPrivileges;
	CStringArray  szPrivileges;
	CAccountToken  *pAccountToken;

	if ((pAccountToken = GetAccount(TRUE)))
	{
		if ((nIndex = (INT)GetDlgItem(IDC_PRIVILEGES_RIGHTSGRANTED)->SendMessage(LB_GETCURSEL)) >= 0 && pAccountToken->GetPrivileges(nPrivileges) && pAccountToken->LookupPrivileges(szPrivileges))
		{
			for (nRight = 0, nRights = (INT)szPrivileges.GetSize(), szRight = Listbox_GetText(GetDlgItem(IDC_PRIVILEGES_RIGHTSGRANTED), nIndex); nRight < nRights; nRight++)
			{
				if (szPrivileges.GetAt(nRight) == szRight) break;
				continue;
			}
			return((nRight < nRights) ? nPrivileges[nRight] : 0);
		}
	}
	return 0;
}

CAccountToken *CPrivilegesDialog::GetAccount(BOOL bBackup) CONST
{
	return(((!bBackup  &&  m_pAccounts.GetSize()) || (bBackup  &&  m_pAccounts.GetSize() > 1)) ? ((!bBackup) ? m_pAccounts.GetAt(0) : m_pAccounts.GetAt(1)) : (CAccountToken *)NULL);
}

INT CPrivilegesDialog::DoModal(CAccountToken *pAccountToken)
{
	m_pAccounts.Add(pAccountToken);
	return((INT)CLocaleDialog::DoModal());
}

BOOL CPrivilegesDialog::IsModified() CONST
{
	return((!GetAccount()->Compare(GetAccount(TRUE))) ? TRUE : FALSE);
}

void CPrivilegesDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CPrivilegesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CPrivilegesDialog::PostNcDestroy()
{
	m_pAccounts.RemoveAt(0);
	m_pAccounts.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CPrivilegesDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CPrivilegesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_PRIVILEGES_RIGHTSALLOW, OnRightsAllow)
	ON_BN_CLICKED(IDC_PRIVILEGES_RIGHTSDENY, OnRightsDeny)
	ON_BN_CLICKED(IDC_PRIVILEGES_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_PRIVILEGES_RIGHTS, OnSelchangeRights)
	ON_LBN_SELCHANGE(IDC_PRIVILEGES_RIGHTSGRANTED, OnSelchangeRightsGranted)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CPrivilegesDialog message handlers

BOOL CPrivilegesDialog::OnInitDialog()
{
	INT  nPrivilege;
	INT  nPrivileges;
	CString  szPrivilegesAccount;
	CStringArray  szPrivileges[2];
	CAccountToken  *pAccountToken[2];
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	if ((pAccountToken[0] = new CAccountToken))
	{
		if ((pAccountToken[1] = GetAccount()))
		{
			for (nPrivilege = 0, nPrivileges = pAccountToken[1]->LookupAllPrivileges(szPrivileges[0]), pAccountToken[0]->Copy(pAccountToken[1]), m_pAccounts.Add(pAccountToken[0]); nPrivilege < nPrivileges; nPrivilege++) SendDlgItemMessage(IDC_PRIVILEGES_RIGHTS, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szPrivileges[0].GetAt(nPrivilege));
			for (nPrivilege = 0, nPrivileges = pAccountToken[1]->LookupPrivileges(szPrivileges[1]), szPrivilegesAccount = pAccountToken[1]->GetUserName(); nPrivilege < nPrivileges; nPrivilege++) SendDlgItemMessage(IDC_PRIVILEGES_RIGHTSGRANTED, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szPrivileges[1].GetAt(nPrivilege));
			if (SendDlgItemMessage(IDC_PRIVILEGES_RIGHTS, CB_GETCOUNT) == (LONG)szPrivileges[0].GetSize() && SendDlgItemMessage(IDC_PRIVILEGES_RIGHTSGRANTED, LB_GETCOUNT) == (LONG)szPrivileges[1].GetSize())
			{
				SendDlgItemMessage(IDC_PRIVILEGES_RIGHTS, CB_SETCURSEL);
				GetDlgItem(IDC_PRIVILEGES_NAME)->SetWindowText(szPrivilegesAccount);
				GetDlgItem(IDC_PRIVILEGES_DETAILS)->EnableWindow();
				GetDlgItem(IDC_PRIVILEGES_NAME_STATIC)->EnableWindow();
				GetDlgItem(IDC_PRIVILEGES_NAME)->EnableWindow();
				GetDlgItem(IDC_PRIVILEGES_POLICY)->EnableWindow();
				GetDlgItem(IDC_PRIVILEGES_RIGHTS_STATIC)->EnableWindow();
				GetDlgItem(IDC_PRIVILEGES_RIGHTS)->EnableWindow();
				GetDlgItem(IDC_PRIVILEGES_RIGHTSGRANTED_STATIC)->EnableWindow();
				GetDlgItem(IDC_PRIVILEGES_RIGHTSGRANTED)->EnableWindow();
				GetDlgItem(IDC_PRIVILEGES_RIGHTSALLOW)->EnableWindow(((pAccountToken[0]->IsHost() && (CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_ACCOUNTRIGHTS_CHANGE))) || (!pAccountToken[0]->IsHost() && CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_REMOTECHANGE))) && !pAccountToken[0]->CheckPrivilege(QueryRights()));
				GetDlgItem(IDC_PRIVILEGES_RIGHTSDENY)->EnableWindow(((pAccountToken[0]->IsHost() && (CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_ACCOUNTRIGHTS_CHANGE))) || (!pAccountToken[0]->IsHost() && CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_REMOTECHANGE))) && pAccountToken[0]->CheckPrivilege(QueryGrantedRights()));
				return TRUE;
			}
			SendDlgItemMessage(IDC_PRIVILEGES_RIGHTS, CB_RESETCONTENT);
			SendDlgItemMessage(IDC_PRIVILEGES_RIGHTSGRANTED, LB_RESETCONTENT);
		}
		delete pAccountToken[0];
	}
	return TRUE;
}

void CPrivilegesDialog::OnSelchangeRights()
{
	CAccountToken  *pAccountToken;

	if ((pAccountToken = GetAccount(TRUE)))
	{
		GetDlgItem(IDC_PRIVILEGES_RIGHTSALLOW)->EnableWindow(((pAccountToken->IsHost() && (CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_ACCOUNTRIGHTS_CHANGE))) || (!pAccountToken->IsHost() && CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_REMOTECHANGE))) && !pAccountToken->CheckPrivilege(QueryRights()));
		return;
	}
}

void CPrivilegesDialog::OnSelchangeRightsGranted()
{
	CAccountToken  *pAccountToken;

	if ((pAccountToken = GetAccount(TRUE)))
	{
		GetDlgItem(IDC_PRIVILEGES_RIGHTSDENY)->EnableWindow(((pAccountToken->IsHost() && (CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_ACCOUNTRIGHTS_CHANGE))) || (!pAccountToken->IsHost() && CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_REMOTECHANGE))) && pAccountToken->CheckPrivilege(QueryGrantedRights()));
		return;
	}
}

void CPrivilegesDialog::OnRightsAllow()
{
	UINT  nPrivilege;
	CString  szPrivilege;
	CAccountToken  *pAccountToken;

	if ((pAccountToken = GetAccount(TRUE)))
	{
		pAccountToken->AddPrivilege((nPrivilege = QueryRights()));
		pAccountToken->LookupPrivilege(nPrivilege, szPrivilege);
		SendDlgItemMessage(IDC_PRIVILEGES_RIGHTSGRANTED, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szPrivilege);
		GetDlgItem(IDC_PRIVILEGES_RIGHTSGRANTED_STATIC)->EnableWindow();
		GetDlgItem(IDC_PRIVILEGES_RIGHTSGRANTED)->EnableWindow();
		GetDlgItem(IDC_PRIVILEGES_RIGHTSALLOW)->EnableWindow(FALSE);
		GetDlgItem(IDC_PRIVILEGES_RIGHTSDENY)->EnableWindow(((pAccountToken->IsHost() && (CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_ACCOUNTRIGHTS_CHANGE))) || (!pAccountToken->IsHost() && CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_REMOTECHANGE))) && pAccountToken->CheckPrivilege(QueryGrantedRights()));
		GetDlgItem(IDC_PRIVILEGES_RIGHTS)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CPrivilegesDialog::OnRightsDeny()
{
	CAccountToken  *pAccountToken;

	if ((pAccountToken = GetAccount(TRUE)))
	{
		pAccountToken->RemovePrivilege(QueryGrantedRights());
		SendDlgItemMessage(IDC_PRIVILEGES_RIGHTSGRANTED, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_PRIVILEGES_RIGHTSGRANTED, LB_GETCURSEL));
		GetDlgItem(IDC_PRIVILEGES_RIGHTSGRANTED_STATIC)->EnableWindow((SendDlgItemMessage(IDC_PRIVILEGES_RIGHTSGRANTED, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_PRIVILEGES_RIGHTSGRANTED)->EnableWindow((SendDlgItemMessage(IDC_PRIVILEGES_RIGHTSGRANTED, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_PRIVILEGES_RIGHTSALLOW)->EnableWindow(((pAccountToken->IsHost() && (CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_CHANGE) || CheckAccountPrivilege(PRIVILEGE_ACCOUNTRIGHTS_CHANGE))) || (!pAccountToken->IsHost() && CheckAccountPrivilege(PRIVILEGE_ACCOUNTS_REMOTECHANGE))) && !pAccountToken->CheckPrivilege(QueryRights()));
		GetDlgItem(IDC_PRIVILEGES_RIGHTSDENY)->EnableWindow(FALSE);
		GetDlgItem(IDC_PRIVILEGES_RIGHTS)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CPrivilegesDialog::OnOK()
{
	CUserAccounts  cUserAccounts;
	CAccountToken  *pAccountToken[2];
	CHourglassCursor  cCursor;

	if ((pAccountToken[0] = GetAccount()))
	{
		if ((pAccountToken[1] = GetAccount(TRUE)))
		{
			if (!pAccountToken[1]->CheckPrivilege(PRIVILEGE_ONLINE_OPERATE) && GetAccountMode() == ACCOUNT_MODE_ONLINE)
			{
				pAccountToken[0]->SetMode(ACCOUNT_MODE_OFFLINE);
				pAccountToken[1]->SetMode(ACCOUNT_MODE_OFFLINE);
			}
			if (GetParent() != (CWnd *)NULL || cUserAccounts.WriteAccount(pAccountToken[1]))
			{
				pAccountToken[0]->Copy(pAccountToken[1]);
				EndDialog(IDOK);
				return;
			}
			ReportEvent(SYSTEM_WARNING_ACCOUNT_SAVE_FAILURE);
		}
	}
	EndDialog(IDCANCEL);
}

BOOL CPrivilegesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_PRIVILEGESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CPrivilegesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_PRIVILEGESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CDefaultPrinter

IMPLEMENT_DYNCREATE(CDefaultPrinter, CPrintDialog)

CDefaultPrinter::CDefaultPrinter() : CPrintDialog(TRUE)
{
	return;
}

CDefaultPrinter::~CDefaultPrinter()
{
	Reset();
}

BOOL CDefaultPrinter::Initialize()
{
	Reset();
	return GetDefaults();
}

BOOL CDefaultPrinter::IsAvailable() CONST
{
	return !GetDeviceName().IsEmpty();
}

VOID CDefaultPrinter::Reset()
{
	if (m_pd.hDevNames)
	{
		GlobalFree(m_pd.hDevNames);
		m_pd.hDevNames = (HANDLE)NULL;
	}
	if (m_pd.hDevMode)
	{
		GlobalFree(m_pd.hDevMode);
		m_pd.hDevMode = (HANDLE)NULL;
	}
}

BEGIN_MESSAGE_MAP(CDefaultPrinter, CPrintDialog)
	//{{AFX_MSG_MAP(CDefaultPrinter)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CDefaultPrinter message handlers


/////////////////////////////////////////////////////////////////////////////
// CPrintPageSetupDialog

IMPLEMENT_DYNCREATE(CPrintPageSetupDialog, CPageSetupDialog)

CPrintPageSetupDialog::CPrintPageSetupDialog(CWnd *pParentWnd, DWORD dwFlags) : CPageSetupDialog(dwFlags, pParentWnd)
{
	return;
}

CPrintPageSetupDialog::~CPrintPageSetupDialog()
{
	Reset();
}

INT_PTR CPrintPageSetupDialog::DoModal()
{
	Reset();
	GetDefaultPrinterInfo(&m_psd);
	return CPageSetupDialog::DoModal();
}

VOID CPrintPageSetupDialog::Reset()
{
	if (m_psd.hDevNames)
	{
		GlobalFree(m_psd.hDevNames);
		m_psd.hDevNames = (HANDLE)NULL;
	}
	if (m_psd.hDevMode)
	{
		GlobalFree(m_psd.hDevMode);
		m_psd.hDevMode = (HANDLE)NULL;
	}
}

BEGIN_MESSAGE_MAP(CPrintPageSetupDialog, CPageSetupDialog)
	//{{AFX_MSG_MAP(CPrintPageSetupDialog)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CPrintPageSetupDialog message handlers

void CPrintPageSetupDialog::OnOK()
{
	CHourglassCursor  cCursor;

	SetDefaultPrinterInfo(&m_psd);
	CPageSetupDialog::OnOK();
}


/////////////////////////////////////////////////////////////////////////////
// CPrintPagePrepareDialog

IMPLEMENT_DYNCREATE(CPrintPagePrepareDialog, CPrintDialog)

CPrintPagePrepareDialog::CPrintPagePrepareDialog(CWnd *pParentWnd, DWORD dwFlags) : CPrintDialog(FALSE, dwFlags, pParentWnd)
{
	return;
}

CPrintPagePrepareDialog::~CPrintPagePrepareDialog()
{
	Reset();
}

INT_PTR CPrintPagePrepareDialog::DoModal()
{
	INT_PTR  nResult;
	PAGESETUPDLG  sPageSetup;

	for (Reset(), GetDefaultPrinterInfo(&sPageSetup), m_pd.Flags = (m_pd.Flags & ~(PD_PAGENUMS | PD_SELECTION)) | PD_ALLPAGES | PD_NOSELECTION | PD_USEDEVMODECOPIESANDCOLLATE | PD_HIDEPRINTTOFILE | PD_NOWARNING, m_pd.nFromPage = m_pd.nToPage = m_pd.nMinPage = 1, m_pd.nMaxPage = -m_pd.nMinPage, m_pd.hDevNames = sPageSetup.hDevNames, m_pd.hDevMode = sPageSetup.hDevMode; (nResult = CPrintDialog::DoModal()) == IDOK; )
	{
		sPageSetup.hDevNames = m_pd.hDevNames;
		sPageSetup.hDevMode = m_pd.hDevMode;
		SetDefaultPrinterInfo(&sPageSetup);
		break;
	}
	return nResult;
}

VOID CPrintPagePrepareDialog::Reset()
{
	if (m_pd.hDevNames)
	{
		GlobalFree(m_pd.hDevNames);
		m_pd.hDevNames = (HANDLE)NULL;
	}
	if (m_pd.hDevMode)
	{
		GlobalFree(m_pd.hDevMode);
		m_pd.hDevMode = (HANDLE)NULL;
	}
}

BEGIN_MESSAGE_MAP(CPrintPagePrepareDialog, CPrintDialog)
	//{{AFX_MSG_MAP(CPrintPagePrepareDialog)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CPrintPagePrepareDialog message handlers


/////////////////////////////////////////////////////////////////////////////
// CSystemAlertsDialog dialog

IMPLEMENT_DYNCREATE(CSystemAlertsDialog, CLocaleDialog)

CSystemAlertsDialog::CSystemAlertsDialog(CWnd *pParentWnd) : CLocaleDialog(CSystemAlertsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CSystemAlertsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CSystemAlertsDialog::Initialize()
{
	return((GetSystemAlerts(m_pAlerts[0])) ? m_pAlerts[1].Copy(&m_pAlerts[0]) : FALSE);
}

BOOL CSystemAlertsDialog::EnumAlerts()
{
	INT  nAlert;
	INT  nAlerts;
	CSystemAlertInfo  *pAlertInfo;

	for (nAlert = 0, nAlerts = (INT)m_pAlerts[0].GetSize(); nAlert < nAlerts; nAlert++)
	{
		if ((pAlertInfo = (CSystemAlertInfo *)m_pAlerts[0].GetAt(nAlert)) != (CSystemAlertInfo *)NULL)
		{
			SendDlgItemMessage(IDC_SYSTEMALERTS_EVENT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pAlertInfo->GetName());
			continue;
		}
	}
	SendDlgItemMessage(IDC_SYSTEMALERTS_EVENT, CB_SETCURSEL);
	return((SendDlgItemMessage(IDC_SYSTEMALERTS_EVENT, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CSystemAlertsDialog::EnumAuditions()
{
	INT  nProfile;
	INT  nProfiles;
	CStringArray  szProfiles;

	for (nProfile = 0, nProfiles = (EnumAuditionProfiles(szProfiles)) ? (INT)szProfiles.GetSize() : 0; nProfile < nProfiles; nProfile++)
	{
		SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_AUDITION, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfiles.GetAt(nProfile));
		continue;
	}
	SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_AUDITION, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)STRING(IDS_SYSTEMALERTSDIALOG_AUDITION_NONE));
	SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_AUDITION, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_AUDITION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_SYSTEMALERTSDIALOG_AUDITION_NONE)), 0));
	return((SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_AUDITION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CSystemAlertsDialog::EnumNotifications()
{
	INT  nProfile;
	INT  nProfiles;
	CStringArray  szProfiles;

	for (nProfile = 0, nProfiles = (EnumNotificationProfiles(szProfiles)) ? (INT)szProfiles.GetSize() : 0; nProfile < nProfiles; nProfile++)
	{
		SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfiles.GetAt(nProfile));
		continue;
	}
	SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)STRING(IDS_SYSTEMALERTSDIALOG_NOTIFICATION_NONE));
	SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_SYSTEMALERTSDIALOG_NOTIFICATION_NONE)), 0));
	return((SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CSystemAlertsDialog::ShowAlertInfo()
{
	INT  nIndex;
	INT  nNotification;
	INT  nNotifications;
	CString  szNotification;
	CStringArray  szNotifications;
	CSystemAlertInfo  *pAlertInfo;

	if ((pAlertInfo = FindAlertInfo()))
	{
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST)->GetWindowText(szNotification);
		GetDlgItem(IDC_SYSTEMALERTS_DESCRIPTION)->SetWindowText(pAlertInfo->GetDescription());
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_MESSAGE)->SetWindowText(pAlertInfo->GetMessage());
		SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_AUDITION, CB_SETCURSEL, ((nIndex = (INT)SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_AUDITION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pAlertInfo->GetAudition())) < 0) ? (WPARAM)max(SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_AUDITION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_SYSTEMALERTSDIALOG_AUDITION_NONE)), 0) : (WPARAM)nIndex);
		SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_SYSTEMALERTSDIALOG_NOTIFICATION_NONE)), 0));
		for (nNotification = 0, nNotifications = pAlertInfo->GetNotifications(szNotifications), SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_RESETCONTENT); nNotification < nNotifications; nNotification++)
		{
			SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotifications.GetAt(nNotification));
			continue;
		}
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS)->EnableWindow((SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATION_ADD)->EnableWindow((SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification) < 0 && szNotification != STRING(IDS_SYSTEMALERTSDIALOG_NOTIFICATION_NONE)) ? CheckAccountPrivilege(PRIVILEGE_SYSTEMALERTS_CHANGE) : FALSE);
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATION_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_SYSTEMALERTS_CHANGE) : FALSE);
		return;
	}
	SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_AUDITION, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_AUDITION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_SYSTEMALERTSDIALOG_AUDITION_NONE)), 0));
	SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_SYSTEMALERTSDIALOG_NOTIFICATION_NONE)), 0));
	SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_RESETCONTENT);
	GetDlgItem(IDC_SYSTEMALERTS_DESCRIPTION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_MESSAGE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATION_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATION_REMOVE)->EnableWindow(FALSE);
}

CSystemAlertInfo *CSystemAlertsDialog::FindAlertInfo() CONST
{
	CString  szAlert;

	GetDlgItem(IDC_SYSTEMALERTS_EVENT)->GetWindowText(szAlert);
	return m_pAlerts[0].GetAt(m_pAlerts[0].Find(szAlert));
}

VOID CSystemAlertsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_SYSTEMALERTS_BEHAVIOR_AUDITION, (bCheck = CheckAccountPrivilege(PRIVILEGE_SYSTEMALERTS_CHANGE)));
	AccessControl(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST, bCheck);
	AccessControl(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, bCheck);
	AccessControl(IDC_SYSTEMALERTS_BEHAVIOR_MESSAGE, bCheck);
}

BOOL CSystemAlertsDialog::IsModified() CONST
{
	return((!m_pAlerts[0].Compare(&m_pAlerts[1])) ? TRUE : FALSE);
}

BOOL CSystemAlertsDialog::Check(BOOL bModified) CONST
{
	INT  nAlert;
	INT  nAlerts;
	CSystemAlertInfo  *pAlertInfo;

	for (nAlert = 0, nAlerts = (INT)m_pAlerts[0].GetSize(); nAlert < nAlerts; nAlert++)
	{
		if ((pAlertInfo = m_pAlerts[0].GetAt(nAlert)))
		{
			if (pAlertInfo->GetName().IsEmpty()) break;
			if (pAlertInfo->GetMessage().IsEmpty()) break;
		}
	}
	return((nAlert == nAlerts) ? (!bModified || IsModified()) : FALSE);
}

void CSystemAlertsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CSystemAlertsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CSystemAlertsDialog::PostNcDestroy()
{
	m_pAlerts[0].RemoveAll();
	m_pAlerts[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CSystemAlertsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CSystemAlertsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATION_ADD, OnAddNotification)
	ON_BN_CLICKED(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATION_REMOVE, OnRemoveNotification)
	ON_BN_CLICKED(IDC_SYSTEMALERTS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_SYSTEMALERTS_EVENT, OnSelchangeEvent)
	ON_CBN_SELCHANGE(IDC_SYSTEMALERTS_BEHAVIOR_AUDITION, OnSelchangeAudition)
	ON_CBN_SELCHANGE(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST, OnSelchangeNotificationList)
	ON_LBN_SELCHANGE(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, OnSelchangeNotification)
	ON_EN_CHANGE(IDC_SYSTEMALERTS_BEHAVIOR_MESSAGE, OnEditchangeMessage)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSystemAlertsDialog message handlers

BOOL CSystemAlertsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	if (EnumAlerts() && EnumAuditions() && EnumNotifications())
	{
		GetDlgItem(IDC_SYSTEMALERTS_DETAILS)->EnableWindow();
		GetDlgItem(IDC_SYSTEMALERTS_EVENT_STATIC)->EnableWindow();
		GetDlgItem(IDC_SYSTEMALERTS_EVENT)->EnableWindow();
		GetDlgItem(IDC_SYSTEMALERTS_DESCRIPTION_STATIC)->EnableWindow();
		GetDlgItem(IDC_SYSTEMALERTS_DESCRIPTION)->EnableWindow();
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR)->EnableWindow();
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_AUDITION_STATIC)->EnableWindow();
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_AUDITION)->EnableWindow();
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_STATIC)->EnableWindow();
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST)->EnableWindow();
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_MESSAGE_STATIC)->EnableWindow();
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_MESSAGE)->EnableWindow();
		ShowAlertInfo();
	}
	AdjustToPrivileges();
	return TRUE;
}

void CSystemAlertsDialog::OnAddNotification()
{
	INT  nIndex;
	CString  szNotification;
	CStringArray  szNotifications;
	CSystemAlertInfo  *pAlertInfo;
	CHourglassCursor  cCursor;

	if ((pAlertInfo = FindAlertInfo()))
	{
		for (GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST)->GetWindowText(szNotification); (nIndex = (INT)SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification)) >= 0; )
		{
			SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_SETCURSEL, nIndex);
			pAlertInfo->GetNotifications(szNotifications);
			szNotifications.Add(szNotification);
			pAlertInfo->SetNotifications(szNotifications);
			break;
		}
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS)->EnableWindow((SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATION_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_SYSTEMALERTS_CHANGE) : FALSE);
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATION_ADD)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSystemAlertsDialog::OnRemoveNotification()
{
	INT  nNotification;
	INT  nNotifications;
	CString  szNotification;
	CStringArray  szNotifications;
	CSystemAlertInfo  *pAlertInfo;
	CHourglassCursor  cCursor;

	if ((pAlertInfo = FindAlertInfo()))
	{
		for (nNotification = 0, nNotifications = pAlertInfo->GetNotifications(szNotifications), szNotification = Listbox_GetText(GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS), (INT)SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_GETCURSEL)), SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_GETCURSEL)); nNotification < nNotifications; nNotification++)
		{
			if (szNotifications.GetAt(nNotification) == szNotification)
			{
				szNotifications.RemoveAt(nNotification);
				break;
			}
		}
		SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_SETCURSEL);
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST)->GetWindowText(szNotification);
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS)->EnableWindow((SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATION_ADD)->EnableWindow((SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification) < 0 && szNotification != STRING(IDS_SYSTEMALERTSDIALOG_NOTIFICATION_NONE)) ? CheckAccountPrivilege(PRIVILEGE_SYSTEMALERTS_CHANGE) : FALSE);
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATION_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_SYSTEMALERTS_CHANGE) : FALSE);
		pAlertInfo->SetNotifications(szNotifications);
	}
	GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSystemAlertsDialog::OnEditchangeMessage()
{
	CString  szMessage;
	CSystemAlertInfo  *pAlertInfo;

	if ((pAlertInfo = FindAlertInfo()))
	{
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_MESSAGE)->GetWindowText(szMessage);
		pAlertInfo->SetMessage(szMessage);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSystemAlertsDialog::OnSelchangeEvent()
{
	ShowAlertInfo();
}

void CSystemAlertsDialog::OnSelchangeAudition()
{
	CString  szAudition;
	CSystemAlertInfo  *pAlertInfo;

	if ((pAlertInfo = FindAlertInfo()))
	{
		GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_AUDITION)->GetWindowText(szAudition);
		pAlertInfo->SetAudition((szAudition != STRING(IDS_SYSTEMALERTSDIALOG_AUDITION_NONE)) ? (LPCTSTR)szAudition : EMPTYSTRING);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CSystemAlertsDialog::OnSelchangeNotification()
{
	GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATION_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_SYSTEMALERTS_CHANGE) : FALSE);
}

void CSystemAlertsDialog::OnSelchangeNotificationList()
{
	CString  szNotification;

	GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS_LIST)->GetWindowText(szNotification);
	GetDlgItem(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATION_ADD)->EnableWindow((SendDlgItemMessage(IDC_SYSTEMALERTS_BEHAVIOR_NOTIFICATIONS, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNotification) < 0 && szNotification != STRING(IDS_SYSTEMALERTSDIALOG_NOTIFICATION_NONE)) ? CheckAccountPrivilege(PRIVILEGE_SYSTEMALERTS_CHANGE) : FALSE);
}

void CSystemAlertsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	SetSystemAlerts(m_pAlerts[0]);
	EndDialog(IDOK);
}

BOOL CSystemAlertsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SYSTEMALERTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CSystemAlertsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SYSTEMALERTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CAutomationServiceDialog dialog

IMPLEMENT_DYNCREATE(CAutomationServiceDialog, CLocaleDialog)

CAutomationServiceDialog::CAutomationServiceDialog(CWnd *pParentWnd) : CLocaleDialog(CAutomationServiceDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CAutomationServiceDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CAutomationServiceDialog::Initialize()
{
	if (GetAutomationService()->GetPort(m_nPort[0]) && GetAutomationService()->GetBufferSize(m_nBufferSize[0]) && GetAutomationService()->GetTimeout(m_tTimeout[0]) && GetAutomationService()->GetClients(m_pClients[0]) >= 0)
	{
		m_bEnabled[1] = m_bEnabled[0] = GetAutomationService()->IsEnabled();
		m_pClients[1].Copy(&m_pClients[0]);
		m_tTimeout[1] = m_tTimeout[0];
		m_nBufferSize[1] = m_nBufferSize[0];
		m_nPort[1] = m_nPort[0];
		return TRUE;
	}
	return FALSE;
}

VOID CAutomationServiceDialog::EnumClients(INT nIndex)
{
	INT  nRight;
	INT  nRights;
	INT  nClient;
	INT  nClients;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CUIntArray  nPermissions;
	CAutomationClientInfo  *pClientInfo;

	for (nClient = 0, nClients = (INT)m_pClients[0].GetSize(); nClient < nClients; nClient++)
	{
		for (nColumn = 0, nColumns = ((pClientInfo = m_pClients[0].GetAt(nClient))) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
		{
			for (szItem.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_AUTOMATIONSERVICESETTINGSDIALOG_CLIENTS_USERNAME); )
			{
				szItem = pClientInfo->GetUserName();
				break;
			}
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_AUTOMATIONSERVICESETTINGSDIALOG_CLIENTS_PERMISSIONS))
			{
				for (nRight = 0, nRights = pClientInfo->GetPermissions(nPermissions), szItem = STRING(IDS_AUTOMATIONSERVICESETTINGSDIALOG_PERMISSION_NONE); nRight < nRights; nRight++)
				{
					szItem = (nRight > 0) ? (szItem + STRING(IDS_AUTOMATIONSERVICESETTINGSDIALOG_PERMISSION_SEPARATOR)) : EMPTYSTRING;
					szItem += STRING(MINAUTOMATIONSERVICEPERMISSION + nPermissions.GetAt(nRight));
				}
			}
			if (!nColumn  &&  nClient >= SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_LIST, LVM_GETITEMCOUNT))
			{
				Listview_InsertText(GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_LIST), (INT)SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_LIST, LVM_GETITEMCOUNT), szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_LIST), (INT)(SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_LIST, LVM_GETITEMCOUNT) - 1), nColumn, szItem);
		}
	}
	while (nClients < SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_LIST, LVM_GETITEMCOUNT))
	{
		if (!Listview_DeleteText(GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_LIST), nClients)) break;
		continue;
	}
	Listview_SetCurText(GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_LIST), nIndex);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_LIST)->EnableWindow((SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

VOID CAutomationServiceDialog::EnumPermissions()
{
	INT  nRight;
	INT  nRights;

	for (nRight = 0, nRights = MAXAUTOMATIONSERVICEPERMISSION - MINAUTOMATIONSERVICEPERMISSION; nRight <= nRights; nRight++)
	{
		SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_ALL, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(MINAUTOMATIONSERVICEPERMISSION + nRight));
		continue;
	}
	SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_ALL, CB_SETCURSEL);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_ALL)->EnableWindow((SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_ALL, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CAutomationServiceDialog::ShowServiceDetails()
{
	CheckDlgButton(IDC_AUTOMATIONSERVICE_DISABLED, !m_bEnabled[0]);
	Spinbox_SetPos(GetDlgItem(IDC_AUTOMATIONSERVICE_PORT), m_nPort[0]);
	Spinbox_SetPos(GetDlgItem(IDC_AUTOMATIONSERVICE_TIMEOUT), m_tTimeout[0].GetTotalSeconds());
	Spinbox_SetPos(GetDlgItem(IDC_AUTOMATIONSERVICE_BUFFER), m_nBufferSize[0] / 1024);
}

VOID CAutomationServiceDialog::ShowClientDetails()
{
	INT  nIndex;
	INT  nRight;
	INT  nRights;
	BOOL  bBanned;
	BOOL  bEncrypt;
	CString  szUserName;
	CString  szPassword;
	CUIntArray  nPermissions;
	CAutomationClientInfo  *pClientInfo;

	SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_RESETCONTENT);
	for (bEncrypt = bBanned = FALSE; (pClientInfo = m_pClients[0].GetAt((nIndex = Listview_GetCurText(GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_LIST))))); )
	{
		for (nRight = 0, nRights = pClientInfo->GetPermissions(nPermissions), szUserName = pClientInfo->GetUserName(), szPassword = pClientInfo->GetPassword(); nRight < nRights; nRight++)
		{
			SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(MINAUTOMATIONSERVICEPERMISSION + nPermissions.GetAt(nRight)));
			continue;
		}
		SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_SETCURSEL);
		bEncrypt = pClientInfo->UsesEncryption();
		bBanned = pClientInfo->IsBanned();
		break;
	}
	CheckDlgButton(IDC_AUTOMATIONSERVICE_CLIENT_BAN, bBanned);
	CheckDlgButton(IDC_AUTOMATIONSERVICE_CLIENT_ENCRYPT, bEncrypt);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_USERNAME)->SetWindowText(szUserName);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PASSWORD)->SetWindowText(szPassword);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PASSWORD_CONFIRMATION)->SetWindowText(szPassword);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED)->EnableWindow((SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_ADD)->ShowWindow((nIndex < 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_MODIFY)->ShowWindow((nIndex >= 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_MODIFY)->EnableWindow(FALSE);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_REMOVE)->EnableWindow((nIndex >= 0) ? CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE) : FALSE);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_REMOVEALL)->EnableWindow((nIndex >= 0) ? CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE) : FALSE);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSION_ALLOW)->EnableWindow((SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_ALL), (INT)SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_ALL, CB_GETCURSEL))) < 0) ? CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE) : FALSE);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSION_REVOKE)->EnableWindow((SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE) : FALSE);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSION_REVOKEALL)->EnableWindow((SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE) : FALSE);
}

VOID CAutomationServiceDialog::CheckClientDetails() CONST
{
	INT  nIndex;
	CString  szUserName;
	CString  szPassword[2];
	CUIntArray  nPermissions[2];
	CAutomationClientInfo  *pClientInfo[2];

	for (GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_USERNAME)->GetWindowText(szUserName), GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PASSWORD)->GetWindowText(szPassword[0]), GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PASSWORD_CONFIRMATION)->GetWindowText(szPassword[1]), GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_LIST)) >= 0) ? CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE) : FALSE), GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_REMOVEALL)->EnableWindow((GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_LIST)->SendMessage(LVM_GETITEMCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE) : FALSE), GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED_STATIC)->EnableWindow((GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED)->SendMessage(LB_GETCOUNT) > 0) ? TRUE : FALSE), GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED)->EnableWindow((GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED)->SendMessage(LB_GETCOUNT) > 0) ? TRUE : FALSE), GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSION_ALLOW)->EnableWindow((GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED)->SendMessage(LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_ALL), (INT)GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_ALL)->SendMessage(CB_GETCURSEL))) < 0) ? CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE) : FALSE), GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSION_REVOKE)->EnableWindow((GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED)->SendMessage(LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE) : FALSE), GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSION_REVOKEALL)->EnableWindow((GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED)->SendMessage(LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE) : FALSE); szUserName.IsEmpty() || szPassword[0].IsEmpty() || szPassword[0] != szPassword[1]; )
	{
		GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_ADD)->ShowWindow(((nIndex = m_pClients[0].Find(szUserName)) < 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_MODIFY)->ShowWindow((nIndex >= 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_MODIFY)->EnableWindow(FALSE);
		return;
	}
	if ((pClientInfo[0] = m_pClients[0].GetAt((nIndex = m_pClients[0].Find(szUserName)))))
	{
		for (GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_ADD)->ShowWindow(SW_HIDE), GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_MODIFY)->ShowWindow(SW_SHOW), GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_ADD)->EnableWindow(FALSE); (pClientInfo[1] = new CAutomationClientInfo); )
		{
			GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_MODIFY)->EnableWindow((GetClientDetails(pClientInfo[1]) && !pClientInfo[0]->Compare(pClientInfo[1])) ? CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE) : FALSE);
			delete pClientInfo[1];
			return;
		}
		GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_MODIFY)->EnableWindow(FALSE);
		return;
	}
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_ADD)->ShowWindow(SW_SHOW);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_MODIFY)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE));
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_MODIFY)->EnableWindow(FALSE);
}

BOOL CAutomationServiceDialog::GetClientDetails(CAutomationClientInfo *pClientInfo) CONST
{
	INT  nRight[2];
	INT  nRights[2];
	CString  szUserName;
	CString  szPassword;
	CUIntArray  nPermissions;

	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_USERNAME)->GetWindowText(szUserName);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PASSWORD)->GetWindowText(szPassword);
	for (nRight[0] = 0, nRights[0] = (INT)GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED)->SendMessage(LB_GETCOUNT); nRight[0] < nRights[0]; nRight[0]++)
	{
		for (nRight[1] = 0, nRights[1] = MAXAUTOMATIONSERVICEPERMISSION - MINAUTOMATIONSERVICEPERMISSION; nRight[1] <= nRights[1]; nRight[1]++)
		{
			if (Listbox_GetText(GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED), nRight[0]) == STRING(MINAUTOMATIONSERVICEPERMISSION + nRight[1]))
			{
				nPermissions.Add(nRight[1]);
				break;
			}
		}
	}
	pClientInfo->SetUserName(szUserName);
	pClientInfo->SetPassword(szPassword);
	pClientInfo->SetPermissions(nPermissions);
	pClientInfo->Encrypt(IsDlgButtonChecked(IDC_AUTOMATIONSERVICE_CLIENT_ENCRYPT));
	pClientInfo->Ban(IsDlgButtonChecked(IDC_AUTOMATIONSERVICE_CLIENT_BAN));
	return(!szUserName.IsEmpty() && !szPassword.IsEmpty());
}

VOID CAutomationServiceDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_AUTOMATIONSERVICE_PORT, (bCheck = CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE)));
	AccessControl(IDC_AUTOMATIONSERVICE_TIMEOUT, bCheck);
	AccessControl(IDC_AUTOMATIONSERVICE_BUFFER, bCheck);
	AccessControl(IDC_AUTOMATIONSERVICE_DISABLED, bCheck);
	AccessControl(IDC_AUTOMATIONSERVICE_CLIENT_USERNAME, bCheck);
	AccessControl(IDC_AUTOMATIONSERVICE_CLIENT_PASSWORD, bCheck);
	AccessControl(IDC_AUTOMATIONSERVICE_CLIENT_PASSWORD_CONFIRMATION, bCheck);
	AccessControl(IDC_AUTOMATIONSERVICE_CLIENT_ENCRYPT, bCheck);
	AccessControl(IDC_AUTOMATIONSERVICE_CLIENT_BAN, bCheck);
}

BOOL CAutomationServiceDialog::IsModified() CONST
{
	return((m_nPort[0] != m_nPort[1] || m_nBufferSize[0] != m_nBufferSize[1] || m_tTimeout[0] != m_tTimeout[1] || !m_pClients[0].Compare(&m_pClients[1]) || m_bEnabled[0] != m_bEnabled[1]) ? TRUE : FALSE);
}

BOOL CAutomationServiceDialog::Check(BOOL bModified) CONST
{
	return(!bModified || IsModified());
}

void CAutomationServiceDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAutomationServiceDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CAutomationServiceDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CAutomationServiceDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CAutomationServiceDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_AUTOMATIONSERVICE_CLIENT_ADD, OnAddClient)
	ON_BN_CLICKED(IDC_AUTOMATIONSERVICE_CLIENT_MODIFY, OnModifyClient)
	ON_BN_CLICKED(IDC_AUTOMATIONSERVICE_CLIENT_REMOVE, OnRemoveClient)
	ON_BN_CLICKED(IDC_AUTOMATIONSERVICE_CLIENT_REMOVEALL, OnRemoveAllClients)
	ON_BN_CLICKED(IDC_AUTOMATIONSERVICE_CLIENT_ENCRYPT, OnEncryption)
	ON_BN_CLICKED(IDC_AUTOMATIONSERVICE_CLIENT_BAN, OnBanClient)
	ON_BN_CLICKED(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSION_ALLOW, OnAllowPermission)
	ON_BN_CLICKED(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSION_REVOKE, OnRevokePermission)
	ON_BN_CLICKED(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSION_REVOKEALL, OnRevokeAllPermissions)
	ON_BN_CLICKED(IDC_AUTOMATIONSERVICE_DISABLED, OnDisabled)
	ON_BN_CLICKED(IDC_AUTOMATIONSERVICE_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_ALL, OnSelchangePermission)
	ON_LBN_SELCHANGE(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, OnSelchangeGrantedPermission)
	ON_EN_CHANGE(IDC_AUTOMATIONSERVICE_CLIENT_USERNAME, OnEditchangeUserName)
	ON_EN_CHANGE(IDC_AUTOMATIONSERVICE_CLIENT_PASSWORD, OnEditchangePassword)
	ON_EN_CHANGE(IDC_AUTOMATIONSERVICE_CLIENT_PASSWORD_CONFIRMATION, OnEditchangePasswordConfirmatation)
	ON_CONTROL(SBXN_CHANGE, IDC_AUTOMATIONSERVICE_PORT, OnSpinchangePort)
	ON_CONTROL(SBXN_CHANGE, IDC_AUTOMATIONSERVICE_TIMEOUT, OnSpinchangeTimeout)
	ON_CONTROL(SBXN_CHANGE, IDC_AUTOMATIONSERVICE_BUFFER, OnSpinchangeBufferSize)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CAutomationServiceDialog message handlers

BOOL CAutomationServiceDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_AUTOMATIONSERVICESETTINGSDIALOG_CLIENTS_USERNAME));
	m_szColumns.Add(STRING(IDS_AUTOMATIONSERVICESETTINGSDIALOG_CLIENTS_PERMISSIONS));
	Spinbox_SetRange(GetDlgItem(IDC_AUTOMATIONSERVICE_PORT), AUTOMATION_SERVICE_FIRSTPORT, AUTOMATION_SERVICE_LASTPORT);
	Spinbox_SetRange(GetDlgItem(IDC_AUTOMATIONSERVICE_TIMEOUT), AUTOMATION_SERVICE_MINIMUMTIMEOUT, AUTOMATION_SERVICE_MAXIMUMTIMEOUT);
	Spinbox_SetRange(GetDlgItem(IDC_AUTOMATIONSERVICE_BUFFER), AUTOMATION_SERVICE_MINIMUMBUFFERSIZE / 1024, AUTOMATION_SERVICE_MAXIMUMBUFFERSIZE / 1024);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_AUTOMATIONSERVICESETTINGSDIALOG_CLIENTS_USERNAME)) ? (rColumns.Width() / 3) : ((2 * rColumns.Width()) / 3));
		continue;
	}
	EnumClients();
	EnumPermissions();
	GetDlgItem(IDC_AUTOMATIONSERVICE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_PORT_STATIC)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_PORT)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_TIMEOUT_STATIC)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_TIMEOUT)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_TIMEOUT_SECONDS)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_BUFFER_STATIC)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_BUFFER)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_BUFFER_KB)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_DISABLED)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_USERNAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_USERNAME)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PASSWORD_STATIC)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PASSWORD)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PASSWORD_CONFIRMATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PASSWORD_CONFIRMATION)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_ENCRYPT)->EnableWindow();
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_BAN)->EnableWindow();
	ShowServiceDetails();
	ShowClientDetails();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CAutomationServiceDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	for (; pNotifyListView->hdr.idFrom == IDC_AUTOMATIONSERVICE_CLIENT_LIST; )
	{
		if ((pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) || pNotifyListView->hdr.code == NM_CLICK) ShowClientDetails();
		break;
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

void CAutomationServiceDialog::OnAddClient()
{
	INT  nIndex;
	CAutomationClientInfo  *pClientInfo;
	CHourglassCursor  cCursor;

	if ((pClientInfo = new CAutomationClientInfo))
	{
		for (GetClientDetails(pClientInfo); (nIndex = m_pClients[0].Add(pClientInfo)) >= 0; )
		{
			EnumClients(nIndex);
			break;
		}
		CheckDlgButton(IDC_AUTOMATIONSERVICE_CLIENT_BAN, FALSE);
		CheckDlgButton(IDC_AUTOMATIONSERVICE_CLIENT_ENCRYPT, FALSE);
		GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_USERNAME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PASSWORD)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PASSWORD_CONFIRMATION)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE));
		GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE));
		for (SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_USERNAME, EM_SETSEL, 0, -1); nIndex < 0; )
		{
			delete pClientInfo;
			break;
		}
		GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_USERNAME)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAutomationServiceDialog::OnModifyClient()
{
	INT  nIndex;
	CAutomationClientInfo  *pClientInfo;
	CHourglassCursor  cCursor;

	if ((pClientInfo = m_pClients[0].GetAt((nIndex = (INT)Listview_GetCurText(GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_LIST))))))
	{
		GetClientDetails(pClientInfo);
		EnumClients(nIndex);
	}
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_MODIFY)->EnableWindow(FALSE);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE));
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_AUTOMATIONSERVICE_CHANGE));
	SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_USERNAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_USERNAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAutomationServiceDialog::OnRemoveClient()
{
	INT  nIndex;
	CAutomationClientInfo  *pClientInfo;
	CHourglassCursor  cCursor;

	if ((pClientInfo = m_pClients[0].GetAt((nIndex = (INT)Listview_GetCurText(GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_LIST))))))
	{
		if (Listview_DeleteText(GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_LIST), nIndex))
		{
			m_pClients[0].RemoveAt(nIndex);
			delete pClientInfo;
		}
		Listview_SetCurText(GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_LIST), 0);
		ShowClientDetails();
	}
	SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_USERNAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_USERNAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAutomationServiceDialog::OnRemoveAllClients()
{
	CHourglassCursor  cCursor;

	for (SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_LIST, LVM_DELETEALLITEMS), m_pClients[0].RemoveAll(); !m_pClients[0].GetSize(); )
	{
		ShowClientDetails();
		break;
	}
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_USERNAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAutomationServiceDialog::OnEncryption()
{
	CheckClientDetails();
}

void CAutomationServiceDialog::OnBanClient()
{
	CheckClientDetails();
}

void CAutomationServiceDialog::OnAllowPermission()
{
	for (SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_ALL), (INT)SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_ALL, CB_GETCURSEL)))); SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_GETCOUNT) >= 0; )
	{
		CheckClientDetails();
		break;
	}
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED)->SetFocus();
}

void CAutomationServiceDialog::OnRevokePermission()
{
	for (SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_GETCURSEL)), SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_SETCURSEL); SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_GETCOUNT) >= 0; )
	{
		CheckClientDetails();
		break;
	}
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSION_ALLOW)->SetFocus();
}

void CAutomationServiceDialog::OnRevokeAllPermissions()
{
	for (SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_RESETCONTENT); !SendDlgItemMessage(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSIONS_GRANTED, LB_GETCOUNT); )
	{
		CheckClientDetails();
		break;
	}
	GetDlgItem(IDC_AUTOMATIONSERVICE_CLIENT_PERMISSION_ALLOW)->SetFocus();
}

void CAutomationServiceDialog::OnDisabled()
{
	m_bEnabled[0] = !IsDlgButtonChecked(IDC_AUTOMATIONSERVICE_DISABLED);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAutomationServiceDialog::OnSelchangePermission()
{
	CheckClientDetails();
}

void CAutomationServiceDialog::OnSelchangeGrantedPermission()
{
	CheckClientDetails();
}

void CAutomationServiceDialog::OnEditchangeUserName()
{
	CheckClientDetails();
}

void CAutomationServiceDialog::OnEditchangePassword()
{
	CheckClientDetails();
}

void CAutomationServiceDialog::OnEditchangePasswordConfirmatation()
{
	CheckClientDetails();
}

void CAutomationServiceDialog::OnSpinchangePort()
{
	m_nPort[0] = (INT)Spinbox_GetPos(GetDlgItem(IDC_AUTOMATIONSERVICE_PORT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAutomationServiceDialog::OnSpinchangeTimeout()
{
	m_tTimeout[0] = Spinbox_GetPos(GetDlgItem(IDC_AUTOMATIONSERVICE_TIMEOUT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAutomationServiceDialog::OnSpinchangeBufferSize()
{
	m_nBufferSize[0] = (INT)(1024 * Spinbox_GetPos(GetDlgItem(IDC_AUTOMATIONSERVICE_BUFFER)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CAutomationServiceDialog::OnOK()
{
	CHourglassCursor  cCursor;

	GetAutomationService()->SetPort(m_nPort[0]);
	GetAutomationService()->SetTimeout(m_tTimeout[0]);
	GetAutomationService()->SetBufferSize(m_nBufferSize[0]);
	GetAutomationService()->SetClients(m_pClients[0]);
	GetAutomationService()->Enable(m_bEnabled[0]);
	EndDialog(IDOK);
}

BOOL CAutomationServiceDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_AUTOMATIONSERVICEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CAutomationServiceDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_AUTOMATIONSERVICEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryServiceDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryServiceDialog, CLocaleDialog)

CTelemetryServiceDialog::CTelemetryServiceDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryServiceDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryServiceDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryServiceDialog::Initialize()
{
	GetTMService()->GetTMProviderDevices(m_pDevices[0]);
	return((m_pDevices[1].Copy(&m_pDevices[0])) ? TRUE : FALSE);
}

BOOL CTelemetryServiceDialog::EnumProducts()
{
	INT  nDevice;
	INT  nDevices;
	CTMProviderDevice  *pDevice;

	for (nDevice = 0, nDevices = (INT)m_pDevices[0].GetSize(); nDevice < nDevices; nDevice++)
	{
		if ((pDevice = m_pDevices[0].GetAt(nDevice)))
		{
			if (pDevice->Open())
			{
				if (pDevice->GetCapabilities() & IODEVICE_SERVICE_TM)
				{
					if (SendDlgItemMessage(IDC_TELEMETRYSERVICE_PRODUCT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDevice->GetDeviceBrand()) < 0)
					{
						SendDlgItemMessage(IDC_TELEMETRYSERVICE_PRODUCT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pDevice->GetDeviceBrand());
						pDevice->Close();
						continue;
					}
				}
				pDevice->Close();
			}
		}
	}
	GetDlgItem(IDC_TELEMETRYSERVICE_DETAILS)->EnableWindow();
	SendDlgItemMessage(IDC_TELEMETRYSERVICE_PRODUCT, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TELEMETRYSERVICE_PRODUCT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((!m_pDevices[0].GetActiveDeviceBrand().IsEmpty()) ? (LPCTSTR)m_pDevices[0].GetActiveDeviceBrand() : (LPCTSTR)m_pDevices[0].GetDefaultDeviceBrand())), 0));
	GetDlgItem(IDC_TELEMETRYSERVICE_PRODUCT_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYSERVICE_PRODUCT, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_PRODUCT)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYSERVICE_PRODUCT, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return TRUE;
}

BOOL CTelemetryServiceDialog::EnumProductDevices()
{
	INT  nDevice;
	INT  nDevices;
	CString  szProduct;
	CTMProviderDevice  *pDevice;

	SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYSERVICE_PRODUCT)->GetWindowText(szProduct);
	for (nDevice = 0, nDevices = (INT)m_pDevices[0].GetSize(); nDevice < nDevices; nDevice++)
	{
		if ((pDevice = m_pDevices[0].GetAt(nDevice)) && pDevice->GetDeviceBrand() == szProduct  &&  !pDevice->GetDeviceName().IsEmpty())
		{
			if (SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDevice->GetDeviceName()) < 0)
			{
				SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pDevice->GetDeviceName());
				continue;
			}
		}
	}
	if (SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((!m_pDevices[0].GetActiveDeviceName().IsEmpty()) ? (LPCTSTR)m_pDevices[0].GetActiveDeviceName() : (LPCTSTR)m_pDevices[0].GetDefaultDeviceName())), 0));
		GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE_CHANGE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYSERVICE_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TELEMETRYSERVICE_BROWSE));
		GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYSERVICE_CHANGE));
		GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYSERVICE_CHANGE));
		GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE)->EnableWindow();
		return TRUE;
	}
	GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE_CHANGE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYSERVICE_PRODUCT, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYSERVICE_CHANGE) : FALSE);
	return FALSE;
}

VOID CTelemetryServiceDialog::EnumBackupDevices()
{
	INT  nDevice;
	INT  nDevices;

	SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_RESETCONTENT);
	for (nDevice = 0, nDevices = (INT)SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_GETCOUNT); nDevice < nDevices; nDevice++)
	{
		if (SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Listbox_GetText(GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE), nDevice)) < 0 && nDevice != SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_GETCURSEL))
		{
			SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)Listbox_GetText(GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE), nDevice));
			continue;
		}
	}
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
}

VOID CTelemetryServiceDialog::ShowDeviceDetails()
{
	CTMProviderDevice  *pDevice;

	for (GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE)->EnableWindow(), GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_USE)->EnableWindow(), GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_ALWAYS)->EnableWindow(), GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY)->EnableWindow(), GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL)->EnableWindow(), GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC)->EnableWindow(), GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DISABLED)->EnableWindow(), GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP)->EnableWindow(), GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY)->EnableWindow(), GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY)->EnableWindow(), GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT)->EnableWindow(), GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_ANYDEVICE)->EnableWindow(), GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT)->EnableWindow(); (pDevice = FindDevice()); )
	{
		ShowDeviceDetails(pDevice);
		return;
	}
	SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_ALWAYS, TRUE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_DISABLED, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_AUDIT, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY, TRUE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_ANYDEVICE, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES, FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_AUDIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT_PERIOD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES)->EnableWindow(FALSE);
}
VOID CTelemetryServiceDialog::ShowDeviceDetails(CONST CTMProviderDevice *pDevice)
{
	UINT  nRetries;
	CString  szName;
	CTimeKey  tTime;
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTimeSpan  tTimeout;
	CTimeSpan  tTimeSpan;
	CTimeSpan  tInterval;
	CTimeSpan  tDailyStartTime;
	CTimeSpan  tDailyStopTime;

	m_pDevices[0].SetActiveDevice(pDevice);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_ALWAYS, (pDevice->GetScheduleOptions() & TELEMETRYPROVIDERDEVICE_SCHEDULE_ALWAYS) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY, (pDevice->GetScheduleOptions() & TELEMETRYPROVIDERDEVICE_SCHEDULE_DAILY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL, (pDevice->GetScheduleOptions() & TELEMETRYPROVIDERDEVICE_SCHEDULE_INTERVAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC, (pDevice->GetScheduleOptions() & TELEMETRYPROVIDERDEVICE_SCHEDULE_PERIODIC) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_DISABLED, (pDevice->GetScheduleOptions() & TELEMETRYPROVIDERDEVICE_SCHEDULE_DISABLED) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_AUDIT, (pDevice->GetScheduleOptions() & TELEMETRYPROVIDERDEVICE_SCHEDULE_AUDIT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY, (pDevice->GetBackupOptions() & TELEMETRYPROVIDERDEVICE_BACKUP_CONTINOUSLY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT, (pDevice->GetBackupOptions() & TELEMETRYPROVIDERDEVICE_BACKUP_RETRIES) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE, (pDevice->GetBackupOptions() & TELEMETRYPROVIDERDEVICE_BACKUP_USEDEVICE) ? ((SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pDevice->GetBackupDevice(szName)) ? (LPCTSTR)szName : EMPTYSTRING)) >= 0) ? TRUE : FALSE) : FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_ANYDEVICE, (pDevice->GetBackupOptions() & TELEMETRYPROVIDERDEVICE_BACKUP_USEANYDEVICE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY, (!IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT) && !IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE) && !IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_RETRY_ANYDEVICE)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT, (pDevice->GetBackupTimeout(tTimeout) && tTimeout > 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES, (pDevice->GetBackupOptions() & TELEMETRYPROVIDERDEVICE_BACKUP_AUDITFAILURES) ? TRUE : FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STARTTIME), (pDevice->GetScheduleDaily(tDailyStartTime, tDailyStopTime)) ? CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + tDailyStartTime.GetTotalSeconds()) : tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STOPTIME), (pDevice->GetScheduleDaily(tDailyStartTime, tDailyStopTime)) ? CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + tDailyStopTime.GetTotalSeconds()) : tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STARTTIME), (pDevice->GetScheduleInterval(tStartTime, tStopTime)) ? tStartTime : tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STOPTIME), (pDevice->GetScheduleInterval(tStartTime, tStopTime)) ? tStopTime : tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIME), (pDevice->GetSchedulePeriodic(tStartTime, tTimeSpan, tInterval)) ? tStartTime : tTime);
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN), TELEMETRYSERVICE_MINIMUMTIMESPAN, TELEMETRYSERVICE_MAXIMUMTIMESPAN);
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL), TELEMETRYSERVICE_MINIMUMINTERVAL, TELEMETRYSERVICE_MAXIMUMINTERVAL);
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_NUMBER), TELEMETRYSERVICE_MINIMUMRETRIES, TELEMETRYSERVICE_MAXIMUMRETRIES);
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT_PERIOD), TELEMETRYSERVICE_MINIMUMTIMEOUT, TELEMETRYSERVICE_MAXIMUMTIMEOUT);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN), (pDevice->GetSchedulePeriodic(tStartTime, tTimeSpan, tInterval)) ? tTimeSpan.GetTotalSeconds() : 0);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL), (pDevice->GetSchedulePeriodic(tStartTime, tTimeSpan, tInterval)) ? tInterval.GetTotalSeconds() : 0);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_NUMBER), (pDevice->GetBackupRetries(nRetries)) ? nRetries : 0);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT_PERIOD), (pDevice->GetBackupTimeout(tTimeout)) ? tTimeout.GetTotalSeconds() : 0);
	SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_SETCURSEL, (WPARAM)((IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE)) ? SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pDevice->GetBackupDevice(szName)) ? (LPCTSTR)szName : EMPTYSTRING)) : -1));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL_SECONDS)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_AUDIT)->EnableWindow(!IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_ALWAYS));
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT));
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT));
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE));
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT_PERIOD)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT));
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT));
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES)->EnableWindow(!IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY) || IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT));
}

CTMProviderDevice *CTelemetryServiceDialog::FindDevice() CONST
{
	return m_pDevices[0].GetAt(m_pDevices[0].Find(Combobox_GetText(GetDlgItem(IDC_TELEMETRYSERVICE_PRODUCT), (INT)GetDlgItem(IDC_TELEMETRYSERVICE_PRODUCT)->SendMessage(CB_GETCURSEL)), Listbox_GetText(GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE), (INT)GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE)->SendMessage(LB_GETCURSEL))));
}

VOID CTelemetryServiceDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYSERVICE_DEVICE_ADD, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYSERVICE_CHANGE)));
	AccessControl(IDC_TELEMETRYSERVICE_DEVICE_REMOVE, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_SCHEDULE_ALWAYS, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STARTTIME, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STOPTIME, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STARTTIME, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STOPTIME, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIME, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_SCHEDULE_DISABLED, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_SCHEDULE_AUDIT, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_NUMBER, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_BACKUP_RETRY_ANYDEVICE, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT_PERIOD, bCheck);
	AccessControl(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES, bCheck);
}

BOOL CTelemetryServiceDialog::IsModified() CONST
{
	return !m_pDevices[0].Compare(&m_pDevices[1], FALSE);
}

BOOL CTelemetryServiceDialog::Check(BOOL bModified) CONST
{
	CTMProviderDevice  cDevice;

	return((m_pDevices[0].GetActiveDevice(&cDevice)) ? (!bModified || IsModified()) : FALSE);
}

void CTelemetryServiceDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryServiceDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelemetryServiceDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryServiceDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_DEVICE_ADD, OnAddDevice)
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_DEVICE_CHANGE, OnChangeDevice)
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_DEVICE_REMOVE, OnRemoveDevice)
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_SCHEDULE_ALWAYS, OnScheduleAlways)
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY, OnScheduleDaily)
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL, OnScheduleInterval)
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC, OnSchedulePeriodic)
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_SCHEDULE_DISABLED, OnScheduleDisabled)
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_SCHEDULE_AUDIT, OnScheduleAudit)
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY, OnBackupContinously)
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT, OnBackupRetries)
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE, OnBackupUseDevice)
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_BACKUP_RETRY_ANYDEVICE, OnBackupUseAnyDevice)
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT, OnBackupTimeout)
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES, OnBackupAudit)
	ON_BN_CLICKED(IDC_TELEMETRYSERVICE_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TELEMETRYSERVICE_PRODUCT, OnSelchangeProduct)
	ON_CBN_SELCHANGE(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, OnSelchangeDeviceName)
	ON_LBN_SELCHANGE(IDC_TELEMETRYSERVICE_DEVICE, OnSelchangeDevice)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STARTTIME, OnSpinchangeDailyStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STOPTIME, OnSpinchangeDailyStopTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STARTTIME, OnSpinchangeStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STOPTIME, OnSpinchangeStopTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIME, OnSpinchangePeriodicTime)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN, OnSpinchangePeriodicTimeSpan)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL, OnSpinchangePeriodicInterval)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_NUMBER, OnSpinchangeBackupRetryCount)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT_PERIOD, OnSpinchangeBackupTimeout)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryServiceDialog message handlers

BOOL CTelemetryServiceDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	EnumProducts();
	EnumProductDevices();
	EnumBackupDevices();
	ShowDeviceDetails();
	AdjustToPrivileges();
	return TRUE;
}

void CTelemetryServiceDialog::OnAddDevice()
{
	INT  nIndex;
	INT  nCount;
	CString  szFileName;
	CString  szDevice[2];
	CTMProviderDevice  *pDevice[2];
	CHourglassCursor  cCursor;

	for (; (pDevice[0] = new CTMProviderDevice); )
	{
		for (nIndex = 0, nCount = (INT)m_pDevices[0].GetSize(), szDevice[0] = Combobox_GetText(GetDlgItem(IDC_TELEMETRYSERVICE_PRODUCT), (INT)SendDlgItemMessage(IDC_TELEMETRYSERVICE_PRODUCT, CB_GETCURSEL)); nIndex < nCount; nIndex++)
		{
			if ((pDevice[1] = m_pDevices[0].GetAt(nIndex)) && pDevice[1]->GetDeviceBrand() == szDevice[0])
			{
				if (!(szFileName = pDevice[1]->GetDeviceModule()).IsEmpty()) break;
				continue;
			}
		}
		for (nIndex = 0; nIndex < nCount; nIndex++)
		{
			szDevice[1].Format(STRING(IDS_TELEMETRYPROVIDERDEVICE_NAME_FORMAT), nIndex);
			if (m_pDevices[0].Find(szDevice[0], szDevice[1]) < 0) break;
		}
		for (pDevice[0]->SetDeviceBrand(szDevice[0]), pDevice[0]->SetDeviceName(szDevice[1]); IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_ALWAYS); )
		{
			pDevice[0]->SetScheduleOptions(TELEMETRYPROVIDERDEVICE_SCHEDULE_ALWAYS);
			break;
		}
		if (IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY))
		{
			pDevice[0]->SetScheduleOptions(TELEMETRYPROVIDERDEVICE_SCHEDULE_DAILY);
			pDevice[0]->SetScheduleDaily(Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STARTTIME)).GetTime() % SECONDSPERDAY, Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STOPTIME)).GetTime() % SECONDSPERDAY);
		}
		if (IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL))
		{
			pDevice[0]->SetScheduleOptions(TELEMETRYPROVIDERDEVICE_SCHEDULE_INTERVAL);
			pDevice[0]->SetScheduleInterval(Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STARTTIME)), Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STOPTIME)));
		}
		if (IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC))
		{
			pDevice[0]->SetScheduleOptions(TELEMETRYPROVIDERDEVICE_SCHEDULE_PERIODIC);
			pDevice[0]->SetSchedulePeriodic(Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIME)), Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN)), Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL)));
		}
		for (; IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_DISABLED); )
		{
			pDevice[0]->SetScheduleOptions(pDevice[0]->GetScheduleOptions() | TELEMETRYPROVIDERDEVICE_SCHEDULE_DISABLED);
			break;
		}
		for (; IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_AUDIT); )
		{
			pDevice[0]->SetScheduleOptions(pDevice[0]->GetScheduleOptions() | TELEMETRYPROVIDERDEVICE_SCHEDULE_AUDIT);
			break;
		}
		for (; IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY); )
		{
			pDevice[0]->SetBackupOptions(TELEMETRYPROVIDERDEVICE_BACKUP_CONTINOUSLY);
			break;
		}
		if (IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT))
		{
			pDevice[0]->SetBackupOptions(TELEMETRYPROVIDERDEVICE_BACKUP_RETRIES);
			pDevice[0]->SetBackupRetries((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_NUMBER)));
		}
		if (IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE))
		{
			pDevice[0]->SetBackupOptions(TELEMETRYPROVIDERDEVICE_BACKUP_USEDEVICE);
			pDevice[0]->SetBackupDevice(Combobox_GetText(GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME), (INT)SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_GETCURSEL)));
		}
		for (; IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_RETRY_ANYDEVICE); )
		{
			pDevice[0]->SetBackupOptions(TELEMETRYPROVIDERDEVICE_BACKUP_USEANYDEVICE);
			break;
		}
		for (pDevice[0]->SetBackupTimeout((IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT)) ? (UINT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT_PERIOD)) : 0); IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES); )
		{
			pDevice[0]->SetBackupOptions(pDevice[0]->GetBackupOptions() | TELEMETRYPROVIDERDEVICE_BACKUP_AUDITFAILURES);
			break;
		}
		for (; pDevice[0]->Open(szFileName, szDevice[0]); )
		{
			if (pDevice[0]->Initialize() && pDevice[0]->Configure(this, IODEVICE_TYPE_CLIENT) && m_pDevices[0].Add(pDevice[0]) >= 0)
			{
				if ((pDevice[1] = m_pDevices[0].GetAt((nIndex = m_pDevices[0].Find(pDevice[0]->GetDeviceBrand(), EMPTYSTRING)))))
				{
					m_pDevices[0].RemoveAt(nIndex);
					delete pDevice[1];
				}
				SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pDevice[0]->GetDeviceName()));
				m_pDevices[0].SetActiveDevice(pDevice[0]);
				pDevice[0]->Close();
				break;
			}
			pDevice[0]->Close();
			delete pDevice[0];
			break;
		}
		GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE_CHANGE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYSERVICE_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYSERVICE_CHANGE) : FALSE);
		EnumBackupDevices();
		break;
	}
	GetDlgItem(IDC_TELEMETRYSERVICE_PRODUCT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnChangeDevice()
{
	INT  nIndex;
	CString  szDevice;
	CTMProviderDevice  *pDevice;
	CHourglassCursor  cCursor;

	for (; (pDevice = FindDevice()) && pDevice->Open(); )
	{
		if (!CheckAccountPrivilege(PRIVILEGE_TELEMETRYSERVICE_CHANGE))
		{
			pDevice->Configure(this, IODEVICE_TYPE_CLIENT, TRUE);
			pDevice->Close();
			break;
		}
		if ((nIndex = m_pDevices[0].Find(pDevice->GetDeviceBrand(), pDevice->GetDeviceName())) >= 0)
		{
			for (szDevice = pDevice->GetDeviceName(), m_pDevices[0].RemoveAt(nIndex), pDevice->Configure(this, IODEVICE_TYPE_CLIENT), SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDevice)); (nIndex = m_pDevices[0].Add(pDevice)) >= 0; )
			{
				SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pDevice->GetDeviceName()));
				break;
			}
			for (EnumBackupDevices(), ShowDeviceDetails(); nIndex < 0; )
			{
				pDevice->Close();
				delete pDevice;
				break;
			}
			if (nIndex < 0) break;
		}
		pDevice->Close();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnRemoveDevice()
{
	INT  nIndex;
	CTMProviderDevice  *pDevice;
	CHourglassCursor  cCursor;

	for (; (pDevice = FindDevice()); )
	{
		if (SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDevice->GetDeviceName())) >= 0)
		{
			for (; (nIndex = m_pDevices[0].Find(pDevice->GetDeviceBrand(), pDevice->GetDeviceName())) >= 0; )
			{
				if (SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_GETCOUNT) > 0)
				{
					m_pDevices[0].RemoveAt(nIndex);
					delete pDevice;
					break;
				}
				pDevice->SetDeviceName(EMPTYSTRING);
				break;
			}
			if (SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_GETCOUNT) > 0)
			{
				SendDlgItemMessage(IDC_TELEMETRYSERVICE_DEVICE, LB_SETCURSEL);
				EnumBackupDevices();
				ShowDeviceDetails();
				break;
			}
			GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE_STATIC)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE_CHANGE)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELEMETRYSERVICE_DEVICE_REMOVE)->EnableWindow(FALSE);
			EnumBackupDevices();
			ShowDeviceDetails();
		}
		break;
	}
	GetDlgItem(IDC_TELEMETRYSERVICE_PRODUCT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnScheduleAlways()
{
	UINT  nOptions;
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		nOptions = pDevice->GetScheduleOptions();
		pDevice->SetScheduleOptions((nOptions & ~(TELEMETRYPROVIDERDEVICE_SCHEDULE_DAILY | TELEMETRYPROVIDERDEVICE_SCHEDULE_INTERVAL | TELEMETRYPROVIDERDEVICE_SCHEDULE_PERIODIC | TELEMETRYPROVIDERDEVICE_SCHEDULE_AUDIT)) | TELEMETRYPROVIDERDEVICE_SCHEDULE_ALWAYS);
	}
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_ALWAYS, TRUE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_AUDIT, FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_AUDIT)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnScheduleDaily()
{
	CTimeKey  tTime;
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetScheduleOptions((pDevice->GetScheduleOptions() & ~(TELEMETRYPROVIDERDEVICE_SCHEDULE_ALWAYS | TELEMETRYPROVIDERDEVICE_SCHEDULE_INTERVAL | TELEMETRYPROVIDERDEVICE_SCHEDULE_PERIODIC)) | TELEMETRYPROVIDERDEVICE_SCHEDULE_DAILY);
		pDevice->SetScheduleDaily(TELEMETRYSERVICE_DAILYSTARTTIME, TELEMETRYSERVICE_DAILYSTOPTIME);
	}
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_ALWAYS, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY, TRUE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC, FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STARTTIME), CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TELEMETRYSERVICE_DAILYSTARTTIME));
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STOPTIME), CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TELEMETRYSERVICE_DAILYSTOPTIME));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_AUDIT)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnScheduleInterval()
{
	CTimeKey  tTime;
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetScheduleOptions((pDevice->GetScheduleOptions() & ~(TELEMETRYPROVIDERDEVICE_SCHEDULE_ALWAYS | TELEMETRYPROVIDERDEVICE_SCHEDULE_DAILY | TELEMETRYPROVIDERDEVICE_SCHEDULE_PERIODIC)) | TELEMETRYPROVIDERDEVICE_SCHEDULE_INTERVAL);
		pDevice->SetScheduleInterval(tTime.GetTime(), tTime.GetTime() + TELEMETRYSERVICE_INTERVALTIME);
	}
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_ALWAYS, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL, TRUE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC, FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STARTTIME), tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STOPTIME), CTimeKey(tTime.GetTime() + TELEMETRYSERVICE_INTERVALTIME));
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_AUDIT)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnSchedulePeriodic()
{
	CTimeKey  tTime;
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetScheduleOptions((pDevice->GetScheduleOptions() & ~(TELEMETRYPROVIDERDEVICE_SCHEDULE_ALWAYS | TELEMETRYPROVIDERDEVICE_SCHEDULE_INTERVAL | TELEMETRYPROVIDERDEVICE_SCHEDULE_DAILY)) | TELEMETRYPROVIDERDEVICE_SCHEDULE_PERIODIC);
		pDevice->SetSchedulePeriodic(tTime, TELEMETRYSERVICE_DEFAULTTIMESPAN, TELEMETRYSERVICE_DEFAULTINTERVAL);
	}
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_ALWAYS, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIME), tTime);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN), TELEMETRYSERVICE_DEFAULTTIMESPAN);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL), TELEMETRYSERVICE_DEFAULTINTERVAL);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL_SECONDS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_AUDIT)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnScheduleDisabled()
{
	UINT  nOptions;
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		nOptions = pDevice->GetScheduleOptions();
		pDevice->SetScheduleOptions((IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_DISABLED)) ? (nOptions | TELEMETRYPROVIDERDEVICE_SCHEDULE_DISABLED) : (nOptions & ~TELEMETRYPROVIDERDEVICE_SCHEDULE_DISABLED));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnScheduleAudit()
{
	UINT  nOptions;
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		nOptions = pDevice->GetScheduleOptions();
		pDevice->SetScheduleOptions((IsDlgButtonChecked(IDC_TELEMETRYSERVICE_SCHEDULE_AUDIT)) ? (nOptions | TELEMETRYPROVIDERDEVICE_SCHEDULE_AUDIT) : (nOptions & ~TELEMETRYPROVIDERDEVICE_SCHEDULE_AUDIT));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnBackupContinously()
{
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetBackupOptions((pDevice->GetBackupOptions() & ~(TELEMETRYPROVIDERDEVICE_BACKUP_RETRIES | TELEMETRYPROVIDERDEVICE_BACKUP_USEDEVICE | TELEMETRYPROVIDERDEVICE_BACKUP_USEANYDEVICE | TELEMETRYPROVIDERDEVICE_BACKUP_AUDITFAILURES)) | TELEMETRYPROVIDERDEVICE_BACKUP_CONTINOUSLY);
		pDevice->SetBackupOptions((!IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT)) ? (pDevice->GetBackupOptions() & ~TELEMETRYPROVIDERDEVICE_BACKUP_AUDITFAILURES) : pDevice->GetBackupOptions());
	}
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY, TRUE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_ANYDEVICE, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES, (IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT)) ? IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES) : FALSE);
	SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnBackupRetries()
{
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetBackupOptions((pDevice->GetBackupOptions() & ~(TELEMETRYPROVIDERDEVICE_BACKUP_CONTINOUSLY | TELEMETRYPROVIDERDEVICE_BACKUP_USEDEVICE | TELEMETRYPROVIDERDEVICE_BACKUP_USEANYDEVICE)) | TELEMETRYPROVIDERDEVICE_BACKUP_RETRIES);
		pDevice->SetBackupRetries(TELEMETRYSERVICE_DEFAULTRETRIES);
	}
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT, TRUE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_ANYDEVICE, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_NUMBER), TELEMETRYSERVICE_DEFAULTRETRIES);
	SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_NUMBER)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnBackupUseDevice()
{
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetBackupOptions((pDevice->GetBackupOptions() & ~(TELEMETRYPROVIDERDEVICE_BACKUP_CONTINOUSLY | TELEMETRYPROVIDERDEVICE_BACKUP_RETRIES | TELEMETRYPROVIDERDEVICE_BACKUP_USEANYDEVICE)) | TELEMETRYPROVIDERDEVICE_BACKUP_USEDEVICE);
		pDevice->SetBackupDevice(Combobox_GetText(GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME), (INT)max(SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_GETCURSEL), 0)));
	}
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE, TRUE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_ANYDEVICE, FALSE);
	SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_GETCURSEL), 0));
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnBackupUseAnyDevice()
{
	UINT  nOptions;
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		nOptions = pDevice->GetBackupOptions();
		pDevice->SetBackupOptions((nOptions & ~(TELEMETRYPROVIDERDEVICE_BACKUP_CONTINOUSLY | TELEMETRYPROVIDERDEVICE_BACKUP_RETRIES | TELEMETRYPROVIDERDEVICE_BACKUP_USEDEVICE)) | TELEMETRYPROVIDERDEVICE_BACKUP_USEANYDEVICE);
	}
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE, FALSE);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_RETRY_ANYDEVICE, TRUE);
	SendDlgItemMessage(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnBackupTimeout()
{
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetBackupOptions((IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY) && !IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT)) ? (pDevice->GetBackupOptions() & ~TELEMETRYPROVIDERDEVICE_BACKUP_AUDITFAILURES) : pDevice->GetBackupOptions());
		pDevice->SetBackupTimeout((IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT)) ? TELEMETRYSERVICE_DEFAULTTIMEOUT : 0);
	}
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT_PERIOD), TELEMETRYSERVICE_DEFAULTTIMEOUT);
	CheckDlgButton(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES, (!IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY) || IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT)) ? IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES) : FALSE);
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT_PERIOD)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT));
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT));
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES)->EnableWindow(!IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_RETRY_CONTINOUSLY) || IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT));
	GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT_PERIOD)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnBackupAudit()
{
	UINT  nOptions;
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		nOptions = pDevice->GetBackupOptions();
		pDevice->SetBackupOptions((IsDlgButtonChecked(IDC_TELEMETRYSERVICE_BACKUP_AUDITFAILURES)) ? (nOptions | TELEMETRYPROVIDERDEVICE_BACKUP_AUDITFAILURES) : (nOptions & ~TELEMETRYPROVIDERDEVICE_BACKUP_AUDITFAILURES));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnSelchangeProduct()
{
	EnumProductDevices();
	EnumBackupDevices();
	ShowDeviceDetails();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnSelchangeDevice()
{
	EnumBackupDevices();
	ShowDeviceDetails();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnSelchangeDeviceName()
{
	CString  szDevice;
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_DEVICE_NAME)->GetWindowText(szDevice);
		pDevice->SetBackupOptions((pDevice->GetBackupOptions() & ~(TELEMETRYPROVIDERDEVICE_BACKUP_CONTINOUSLY | TELEMETRYPROVIDERDEVICE_BACKUP_RETRIES | TELEMETRYPROVIDERDEVICE_BACKUP_USEANYDEVICE)) | TELEMETRYPROVIDERDEVICE_BACKUP_USEDEVICE);
		pDevice->SetBackupDevice(szDevice);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnSpinchangeDailyStartTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTMProviderDevice  *pDevice;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STOPTIME)); (pDevice = FindDevice()); )
	{
		pDevice->SetScheduleDaily(tStartTime.GetTime() % SECONDSPERDAY, (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY && (tStartTime.GetTime() + 1) % SECONDSPERDAY) ? ((tStartTime.GetTime() + 1) % SECONDSPERDAY) : (max(tStartTime.GetTime(), tStopTime.GetTime()) % SECONDSPERDAY));
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STOPTIME), (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY && (tStartTime.GetTime() + 1) % SECONDSPERDAY) ? CTimeKey(tStartTime.GetTime() + 1) : max(tStartTime, tStopTime));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnSpinchangeDailyStopTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTMProviderDevice  *pDevice;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STOPTIME)); (pDevice = FindDevice()); )
	{
		pDevice->SetScheduleDaily((tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY  &&  tStopTime.GetTime() % SECONDSPERDAY) ? ((tStopTime.GetTime() - 1) % SECONDSPERDAY) : (min(tStartTime.GetTime(), tStopTime.GetTime()) % SECONDSPERDAY), tStopTime.GetTime() % SECONDSPERDAY);
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_DAILY_STARTTIME), (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY  &&  tStopTime.GetTime() % SECONDSPERDAY) ? CTimeKey(tStopTime.GetTime() - 1) : min(tStartTime, tStopTime));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnSpinchangeStartTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTMProviderDevice  *pDevice;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STOPTIME)); (pDevice = FindDevice()); )
	{
		pDevice->SetScheduleInterval(tStartTime, (tStartTime >= tStopTime) ? (tStartTime.GetTime() + 1) : tStopTime.GetTime());
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STOPTIME), (tStartTime >= tStopTime) ? CTimeKey(tStartTime.GetTime() + 1) : tStopTime);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnSpinchangeStopTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTMProviderDevice  *pDevice;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STOPTIME)); (pDevice = FindDevice()); )
	{
		pDevice->SetScheduleInterval((tStartTime >= tStopTime) ? (tStopTime.GetTime() - 1) : tStartTime.GetTime(), tStopTime);
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_INTERVAL_STARTTIME), (tStartTime >= tStopTime) ? CTimeKey(tStopTime.GetTime() - 1) : tStartTime);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnSpinchangePeriodicTime()
{
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetScheduleOptions((pDevice->GetScheduleOptions() & ~(TELEMETRYPROVIDERDEVICE_SCHEDULE_ALWAYS | TELEMETRYPROVIDERDEVICE_SCHEDULE_DAILY | TELEMETRYPROVIDERDEVICE_SCHEDULE_INTERVAL)) | TELEMETRYPROVIDERDEVICE_SCHEDULE_PERIODIC);
		pDevice->SetSchedulePeriodic(Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIME)), Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN)), Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL)));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnSpinchangePeriodicTimeSpan()
{
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetScheduleOptions((pDevice->GetScheduleOptions() & ~(TELEMETRYPROVIDERDEVICE_SCHEDULE_ALWAYS | TELEMETRYPROVIDERDEVICE_SCHEDULE_DAILY | TELEMETRYPROVIDERDEVICE_SCHEDULE_INTERVAL)) | TELEMETRYPROVIDERDEVICE_SCHEDULE_PERIODIC);
		pDevice->SetSchedulePeriodic(Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIME)), Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN)), Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL)));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnSpinchangePeriodicInterval()
{
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetScheduleOptions((pDevice->GetScheduleOptions() & ~(TELEMETRYPROVIDERDEVICE_SCHEDULE_ALWAYS | TELEMETRYPROVIDERDEVICE_SCHEDULE_DAILY | TELEMETRYPROVIDERDEVICE_SCHEDULE_INTERVAL)) | TELEMETRYPROVIDERDEVICE_SCHEDULE_PERIODIC);
		pDevice->SetSchedulePeriodic(Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIME)), Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_TIMESPAN)), Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYSERVICE_SCHEDULE_PERIODIC_INTERVAL)));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnSpinchangeBackupRetryCount()
{
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetBackupOptions((pDevice->GetBackupOptions() & ~(TELEMETRYPROVIDERDEVICE_BACKUP_CONTINOUSLY | TELEMETRYPROVIDERDEVICE_BACKUP_USEDEVICE | TELEMETRYPROVIDERDEVICE_BACKUP_USEANYDEVICE)) | TELEMETRYPROVIDERDEVICE_BACKUP_RETRIES);
		pDevice->SetBackupRetries((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_RETRY_COUNT_NUMBER)));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnSpinchangeBackupTimeout()
{
	CTMProviderDevice  *pDevice;

	if ((pDevice = FindDevice())) pDevice->SetBackupTimeout((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYSERVICE_BACKUP_TIMEOUT_PERIOD)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryServiceDialog::OnOK()
{
	CHourglassCursor  cCursor;

	GetTMService()->SetTMProviderDevices(m_pDevices[0]);
	EndDialog(IDOK);
}

BOOL CTelemetryServiceDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYSERVICEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryServiceDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYSERVICEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryEventsDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryEventsDialog, CLocaleDialog)

CTelemetryEventsDialog::CTelemetryEventsDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryEventsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryEventsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryEventsDialog::Initialize()
{
	return((GetTelemetryEvents(m_pEvents[0])) ? m_pEvents[1].Copy(&m_pEvents[0]) : FALSE);
}

BOOL CTelemetryEventsDialog::EnumEvents()
{
	INT  nEvent;
	INT  nEvents;
	CTelemetryEventInfo  *pEventInfo;

	for (nEvent = 0, nEvents = (INT)m_pEvents[0].GetSize(); nEvent < nEvents; nEvent++)
	{
		if ((pEventInfo = (CTelemetryEventInfo *)m_pEvents[0].GetAt(nEvent)) != (CTelemetryEventInfo *)NULL)
		{
			SendDlgItemMessage(IDC_TELEMETRYEVENTS_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pEventInfo->GetName());
			continue;
		}
	}
	SendDlgItemMessage(IDC_TELEMETRYEVENTS_NAME, CB_SETCURSEL);
	return TRUE;
}

BOOL CTelemetryEventsDialog::EnumResults()
{
	INT  nCode;
	INT  nCodes;

	for (nCode = 0, nCodes = MAXTELEMETRYEVENTSDIALOGRESULT - MINTELEMETRYEVENTSDIALOGRESULT + 1; nCode < nCodes; nCode++)
	{
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(MINTELEMETRYEVENTSDIALOGRESULT + nCode));
		continue;
	}
	return((SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTelemetryEventsDialog::EnumParameters()
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	for (nParameter = 0, nParameters = (INT)GetDatabase()->GetTMParameters()->GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
		{
			szParameter.Format(STRING(IDS_TELEMETRYEVENTSDIALOG_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
			SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_PARAMETER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szParameter);
		}
	}
	return((SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTelemetryEventsDialog::EnumAuditions()
{
	INT  nProfile;
	INT  nProfiles;
	CStringArray  szProfiles;

	for (nProfile = 0, nProfiles = (EnumAuditionProfiles(szProfiles)) ? (INT)szProfiles.GetSize() : 0; nProfile < nProfiles; nProfile++)
	{
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_AUDITION, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfiles.GetAt(nProfile));
		continue;
	}
	SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_AUDITION, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)STRING(IDS_TELEMETRYEVENTSDIALOG_AUDITION_NONE));
	return((SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_AUDITION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTelemetryEventsDialog::EnumNotifications()
{
	INT  nProfile;
	INT  nProfiles;
	CStringArray  szProfiles;

	for (nProfile = 0, nProfiles = (EnumNotificationProfiles(szProfiles)) ? (INT)szProfiles.GetSize() : 0; nProfile < nProfiles; nProfile++)
	{
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_NOTIFICATION, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfiles.GetAt(nProfile));
		continue;
	}
	SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_NOTIFICATION, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)STRING(IDS_TELEMETRYEVENTSDIALOG_NOTIFICATION_NONE));
	return((SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_NOTIFICATION, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTelemetryEventsDialog::EnumExpressions()
{
	INT  nExpression;
	INT  nExpressions;
	CTelemetryEventInfo  *pEventInfo;
	CTelemetryEventExpression  *pExpression;

	if ((pEventInfo = FindEventInfo()))
	{
		for (m_nStackPos[0] = m_nStackPos[1] = 0; SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCOUNT) > 0; )
		{
			SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_RESETCONTENT);
			break;
		}
		for (nExpression = 0, nExpressions = (INT)pEventInfo->GetSize(); nExpression < nExpressions; nExpression++)
		{
			if ((pExpression = (CTelemetryEventExpression *)pEventInfo->GetAt(nExpression)) != (CTelemetryEventExpression *)NULL)
			{
				SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)pExpression);
				continue;
			}
		}
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_SETCURSEL);
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CB_SETCURSEL, pEventInfo->GetResultCode() - 1);
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	}
}

VOID CTelemetryEventsDialog::ShowEventInfo()
{
	INT  nIndex;
	CTelemetryEventInfo  *pEventInfo;

	if ((pEventInfo = FindEventInfo()))
	{
		for (; FindEventInfo(FALSE) != (CTelemetryEventInfo *)NULL; )
		{
			m_pEventInfo->Copy(pEventInfo);
			break;
		}
		CheckDlgButton(IDC_TELEMETRYEVENTS_PROPERTIES_DATA_BAD, pEventInfo->IsBadDataModeEnabled());
		CheckDlgButton(IDC_TELEMETRYEVENTS_PROPERTIES_DATA_INVALID, pEventInfo->IsInvalidDataModeEnabled());
		CheckDlgButton(IDC_TELEMETRYEVENTS_PROPERTIES_DATA_DISABLED, pEventInfo->IsDisabledDataModeEnabled());
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_AUDITION, CB_SETCURSEL, ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_AUDITION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pEventInfo->GetAudition())) < 0) ? (WPARAM)max(SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_AUDITION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYEVENTSDIALOG_AUDITION_NONE)), 0) : nIndex);
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_NOTIFICATION, CB_SETCURSEL, ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_NOTIFICATION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pEventInfo->GetNotification())) < 0) ? (WPARAM)max(SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_NOTIFICATION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYEVENTSDIALOG_NOTIFICATION_NONE)), 0) : nIndex);
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_TEXT)->SetWindowText(pEventInfo->GetMessage());
	}
	EnumExpressions();
}

BOOL CTelemetryEventsDialog::CheckEventInfo() CONST
{
	CTelemetryEventInfo  *pEventInfo;

	return(((pEventInfo = (!FindEventInfo(FALSE)) ? FindEventInfo() : (CTelemetryEventInfo *)NULL)) ? CheckEventInfo(pEventInfo) : FALSE);
}
BOOL CTelemetryEventsDialog::CheckEventInfo(CONST CTelemetryEventInfo *pEventInfo) CONST
{
	return((!pEventInfo->GetName().IsEmpty() && pEventInfo->GetResultCode() != TELEMETRYEVENTINFO_RESULT_NONE  &&  !pEventInfo->GetMessage().IsEmpty() && CheckStackOperands(pEventInfo) == 1) ? TRUE : FALSE);
}

CTelemetryEventInfo *CTelemetryEventsDialog::FindEventInfo(BOOL bAny) CONST
{
	CString  szEvent;
	CTelemetryEventInfo  *pEventInfo;

	GetDlgItem(IDC_TELEMETRYEVENTS_NAME)->GetWindowText(szEvent);
	return(((pEventInfo = m_pEvents[0].GetAt(m_pEvents[0].Find(szEvent))) || (pEventInfo = (bAny) ? m_pEventInfo : (CTelemetryEventInfo *)NULL)) ? pEventInfo : (CTelemetryEventInfo *)NULL);
}

VOID CTelemetryEventsDialog::Key(INT nDigit)
{
	INT  nIndex;
	double  fNumber;
	double  fConstant[2];
	CHAR  szConstant[2][32];
	CStringTools  cStringTools;
	CTelemetryEventInfo  *pEventInfo;
	CTelemetryEventExpression  *pExpression;

	if ((pExpression = ((pEventInfo = FindEventInfo())) ? pEventInfo->GetAt(m_nStackPos[0] + m_nStackPos[1]) : (CTelemetryEventExpression *)NULL))
	{
#ifndef UNICODE
		strcpy_s(szConstant[0], sizeof(szConstant[0]) / sizeof(CHAR), STRING(IDS_TELEMETRYEVENTSDIALOG_CONSTANT_PI));
		strcpy_s(szConstant[1], sizeof(szConstant[1]) / sizeof(CHAR), STRING(IDS_TELEMETRYEVENTSDIALOG_CONSTANT_E));
#else
		WideCharToMultiByte(CP_ACP, 0, STRING(IDS_TELEMETRYEVENTSDIALOG_CONSTANT_PI), -1, szConstant[0], sizeof(szConstant[0]) / sizeof(szConstant[0][0]), (LPCSTR)NULL, (LPBOOL)NULL);
		WideCharToMultiByte(CP_ACP, 0, STRING(IDS_TELEMETRYEVENTSDIALOG_CONSTANT_E), -1, szConstant[1], sizeof(szConstant[1]) / sizeof(szConstant[1][0]), (LPCSTR)NULL, (LPBOOL)NULL);
#endif
		fConstant[0] = atof(szConstant[0]);
		fConstant[1] = atof(szConstant[1]);
		if ((pExpression->IsNumber() && pExpression->GetNumber() != fConstant[0] && pExpression->GetNumber() != fConstant[1]) || pExpression->IsEmpty())
		{
			if (TranslateNumber(pExpression, nDigit, fNumber))
			{
				pExpression->SetNumber(fNumber, FALSE);
				UpdateStackContents();
			}
			else
			{
				CAudioDevice::AlertBySound();
				return;
			}
		}
		else
		{
			if ((pEventInfo = FindEventInfo()))
			{
				if ((pExpression = new CTelemetryEventExpression))
				{
					for (pExpression->SetNumber((double)nDigit); SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_INSERTSTRING, m_nStackPos[0] + m_nStackPos[1], (LPARAM)pExpression) == LB_ERR; )
					{
						CAudioDevice::AlertBySound();
						delete pExpression;
						return;
					}
					SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_SETCURSEL, m_nStackPos[0]);
					pEventInfo->InsertAt(m_nStackPos[0] + m_nStackPos[1], pExpression, 1);
				}
				else
				{
					CAudioDevice::AlertBySound();
					return;
				}
			}
			else
			{
				CAudioDevice::AlertBySound();
				return;
			}
		}
	}
	else
	{
		if ((pEventInfo = FindEventInfo()))
		{
			if ((pExpression = new CTelemetryEventExpression))
			{
				for (pExpression->SetNumber((double)nDigit); SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_INSERTSTRING, m_nStackPos[0] + m_nStackPos[1], (LPARAM)pExpression) == LB_ERR; )
				{
					CAudioDevice::AlertBySound();
					delete pExpression;
					return;
				}
				SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_SETCURSEL, m_nStackPos[0]);
				pEventInfo->InsertAt(m_nStackPos[0] + m_nStackPos[1], pExpression, 1);
			}
			else
			{
				CAudioDevice::AlertBySound();
				return;
			}
		}
		else
		{
			CAudioDevice::AlertBySound();
			return;
		}
	}
	if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCOUNT) > 0)
	{
		if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CB_GETCURSEL) < 0)
		{
			for (SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CB_SETCURSEL, (nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYEVENTSDIALOG_RESULT_EQUALZERO)))); (pEventInfo = FindEventInfo()); )
			{
				pEventInfo->SetResultCode(nIndex + 1);
				break;
			}
		}
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT)->EnableWindow();
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_ADD)->EnableWindow((CheckEventInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}
VOID CTelemetryEventsDialog::Key(LPCTSTR pszKey)
{
	INT  nIndex;
	CHAR  szConstant[32];
	CTelemetryEventInfo  *pEventInfo;
	CTelemetryEventExpression  *pExpression;

	if (!lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_KEY_POINT)))
	{
		if ((pExpression = ((pEventInfo = FindEventInfo())) ? pEventInfo->GetAt(m_nStackPos[0] + m_nStackPos[1]) : (CTelemetryEventExpression *)NULL))
		{
			if (pExpression->IsNumber() && pExpression->GetNumberAsText().Find(pszKey) < 0)
			{
				pExpression->SetNumber(pExpression->GetNumber(), TRUE);
				UpdateStackContents();
			}
			else
			{
				CAudioDevice::AlertBySound();
				return;
			}
		}
		else
		{
			CAudioDevice::AlertBySound();
			return;
		}
	}
	if (!lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_DIV)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_MUL)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_SUB)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_ADD)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_CHG)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_AND)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_OR)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_NOT)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_XOR)))
	{
		if ((pExpression = ((pEventInfo = FindEventInfo())) ? pEventInfo->GetAt(m_nStackPos[0] + m_nStackPos[1]) : (CTelemetryEventExpression *)NULL) && pExpression->IsEmpty())
		{
			if (CheckStackContents(CString(pszKey)))
			{
				pExpression->SetOperator(pszKey);
				UpdateStackContents();
			}
			else
			{
				CAudioDevice::AlertBySound();
				return;
			}
		}
		else
		{
			if (CheckStackContents(pszKey))
			{
				if ((pEventInfo = FindEventInfo()))
				{
					if ((pExpression = new CTelemetryEventExpression))
					{
						for (pExpression->SetOperator(CString(pszKey)); SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_INSERTSTRING, m_nStackPos[0] + m_nStackPos[1], (LPARAM)pExpression) == LB_ERR; )
						{
							CAudioDevice::AlertBySound();
							delete pExpression;
							return;
						}
						SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_SETCURSEL, m_nStackPos[0]);
						pEventInfo->InsertAt(m_nStackPos[0] + m_nStackPos[1], pExpression, 1);
					}
					else
					{
						CAudioDevice::AlertBySound();
						return;
					}
				}
				else
				{
					CAudioDevice::AlertBySound();
					return;
				}
			}
			else
			{
				CAudioDevice::AlertBySound();
				return;
			}
		}
	}
	if (!lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_SIN)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_COS)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_TAN)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_ASIN)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_ACOS)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_ATAN)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_ABS)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_INT)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_SQRT)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_POW2)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_POWY)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_LN)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_LOG)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_EXP)))
	{
		if ((pExpression = ((pEventInfo = FindEventInfo())) ? pEventInfo->GetAt(m_nStackPos[0] + m_nStackPos[1]) : (CTelemetryEventExpression *)NULL) && pExpression->IsEmpty())
		{
			if (CheckStackContents(CString(pszKey)))
			{
				pExpression->SetFunction(pszKey);
				UpdateStackContents();
			}
			else
			{
				CAudioDevice::AlertBySound();
				return;
			}
		}
		else
		{
			if (CheckStackContents(pszKey))
			{
				if ((pEventInfo = FindEventInfo()))
				{
					if ((pExpression = new CTelemetryEventExpression))
					{
						for (pExpression->SetFunction(CString(pszKey)); SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_INSERTSTRING, m_nStackPos[0] + m_nStackPos[1], (LPARAM)pExpression) == LB_ERR; )
						{
							CAudioDevice::AlertBySound();
							delete pExpression;
							return;
						}
						SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_SETCURSEL, m_nStackPos[0]);
						pEventInfo->InsertAt(m_nStackPos[0] + m_nStackPos[1], pExpression, 1);
					}
					else
					{
						CAudioDevice::AlertBySound();
						return;
					}
				}
				else
				{
					CAudioDevice::AlertBySound();
					return;
				}
			}
			else
			{
				CAudioDevice::AlertBySound();
				return;
			}
		}
	}
	if (!lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_CONSTANT_PI)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_CONSTANT_E)))
	{
		if ((pExpression = ((pEventInfo = FindEventInfo())) ? pEventInfo->GetAt(m_nStackPos[0] + m_nStackPos[1]) : (CTelemetryEventExpression *)NULL) && pExpression->IsEmpty())
		{
#ifndef UNICODE
			strcpy_s(szConstant, sizeof(szConstant) / sizeof(CHAR), pszKey);
#else
			WideCharToMultiByte(CP_ACP, 0, pszKey, -1, szConstant, sizeof(szConstant) / sizeof(szConstant[0]), (LPCSTR)NULL, (LPBOOL)NULL);
#endif
			pExpression->SetNumber(atof(szConstant));
			UpdateStackContents();
		}
		else
		{
			if ((pEventInfo = FindEventInfo()))
			{
				if ((pExpression = new CTelemetryEventExpression))
				{
#ifndef UNICODE
					strcpy_s(szConstant, sizeof(szConstant) / sizeof(CHAR), pszKey);
#else
					WideCharToMultiByte(CP_ACP, 0, pszKey, -1, szConstant, sizeof(szConstant) / sizeof(szConstant[0]), (LPCSTR)NULL, (LPBOOL)NULL);
#endif
					pExpression->SetNumber(atof(szConstant));
					if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_INSERTSTRING, m_nStackPos[0] + m_nStackPos[1], (LPARAM)pExpression) == LB_ERR)
					{
						CAudioDevice::AlertBySound();
						delete pExpression;
						return;
					}
					SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_SETCURSEL, m_nStackPos[0]);
					pEventInfo->InsertAt(m_nStackPos[0] + m_nStackPos[1], pExpression, 1);
				}
				else
				{
					CAudioDevice::AlertBySound();
					return;
				}
			}
			else
			{
				CAudioDevice::AlertBySound();
				return;
			}
		}
	}
	if (!lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_KEY_ENTER)))
	{
		if ((pExpression = ((pEventInfo = FindEventInfo()) && pEventInfo->GetSize() > 0 && !pEventInfo->GetAt(m_nStackPos[0] + m_nStackPos[1])->IsEmpty()) ? new CTelemetryEventExpression : (CTelemetryEventExpression *)NULL))
		{
			if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_INSERTSTRING, m_nStackPos[0] + m_nStackPos[1], (LPARAM)pExpression) == LB_ERR)
			{
				CAudioDevice::AlertBySound();
				delete pExpression;
				return;
			}
			SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_SETCURSEL, m_nStackPos[0]);
			pEventInfo->InsertAt(m_nStackPos[0] + m_nStackPos[1], pExpression, 1);
		}
		else
		{
			CAudioDevice::AlertBySound();
			return;
		}
	}
	if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCOUNT) > 0)
	{
		if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CB_GETCURSEL) < 0)
		{
			for (SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CB_SETCURSEL, (nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYEVENTSDIALOG_RESULT_EQUALZERO)))); (pEventInfo = FindEventInfo()); )
			{
				pEventInfo->SetResultCode(nIndex + 1);
				break;
			}
		}
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT)->EnableWindow();
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_ADD)->EnableWindow((CheckEventInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

UINT CTelemetryEventsDialog::CheckStackOperands() CONST
{
	CTelemetryEventInfo  *pEventInfo;

	return(((pEventInfo = FindEventInfo())) ? CheckStackOperands(pEventInfo) : 0);
}
UINT CTelemetryEventsDialog::CheckStackOperands(CONST CTelemetryEventInfo *pEventInfo) CONST
{
	INT  nCount;
	INT  nExpression;
	INT  nExpressions;
	CTelemetryEventExpression  *pExpression;

	for (nExpression = nExpressions = (INT)pEventInfo->GetSize(), nCount = 0; nExpression > 0; nExpression--)
	{
		if ((pExpression = pEventInfo->GetAt(nExpression - 1)) != (CTelemetryEventExpression *)NULL)
		{
			if (pExpression->IsParameter() || pExpression->IsNumber())
			{
				nCount++;
				continue;
			}
			if (pExpression->IsFunction())
			{
				if (!lstrcmp(pExpression->GetFunction(), STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_POWY)))
				{
					nCount--;
					continue;
				}
			}
			if (pExpression->IsOperator())
			{
				if (!lstrcmp(pExpression->GetOperator(), STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_DIV)) || !lstrcmp(pExpression->GetOperator(), STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_MUL)) || !lstrcmp(pExpression->GetOperator(), STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_SUB)) || !lstrcmp(pExpression->GetOperator(), STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_ADD)) || !lstrcmp(pExpression->GetOperator(), STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_AND)) || !lstrcmp(pExpression->GetOperator(), STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_OR)) || !lstrcmp(pExpression->GetOperator(), STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_XOR)))
				{
					nCount--;
					continue;
				}
			}
		}
	}
	return nCount;
}

BOOL CTelemetryEventsDialog::CheckStackContents(LPCTSTR pszKey) CONST
{
	INT  nOperands;

	for (nOperands = CheckStackOperands(); !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_DIV)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_MUL)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_SUB)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_ADD)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_AND)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_OR)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_XOR)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_POWY)); ) return((nOperands > 1) ? TRUE : FALSE);
	if (!lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_SIN)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_COS)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_TAN)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_ASIN)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_ACOS)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_ATAN)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_ABS)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_INT)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_SQRT)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_POW2)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_LN)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_LOG)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_EXP)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_CHG)) || !lstrcmp(pszKey, STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_NOT))) return((nOperands > 0) ? TRUE : FALSE);
	return TRUE;
}

VOID CTelemetryEventsDialog::UpdateStackContents()
{
	GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK)->Invalidate(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK)->UpdateWindow();
}

BOOL CTelemetryEventsDialog::TranslateNumber(CTelemetryEventExpression *pExpression, INT nDigit, double &fNumber)
{
	double  fResult;
	LPTSTR  pszNumber;
	CString  szNumber;
	CStringTools  cStringTools;

	if (pExpression->IsEmpty())
	{
		fNumber = nDigit;
		return TRUE;
	}
	if (pExpression->IsNumber())
	{
		for (szNumber = pExpression->GetNumberAsText() + cStringTools.ConvertIntToString(nDigit), fResult = _tcstod(szNumber, &pszNumber); errno != ERANGE && !lstrlen(pszNumber); )
		{
			fNumber = fResult;
			return TRUE;
		}
	}
	return FALSE;
}

VOID CTelemetryEventsDialog::AdjustToPrivileges()
{
	AccessControl(IDC_TELEMETRYEVENTS_NAME, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_PARAMETER, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_SAMPLE, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_SAMPLE_CALIBRATED, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_SAMPLE_CODED, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_0, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_1, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_2, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_3, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_4, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_5, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_6, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_7, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_8, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_9, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_DIV, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_MUL, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_SUB, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ADD, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_SIGN, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_SIN, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_COS, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_TAN, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ASIN, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ACOS, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ATAN, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ABS, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_INT, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_SQRT, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_X2, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_XY, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_LN, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_LOG, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_EXP, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_PI, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_E, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_AND, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_OR, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_NOT, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_XOR, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_POINT, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ENTER, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_DATA_INVALID, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_DATA_DISABLED, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_DATA_BAD, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_AUDITION, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_NOTIFICATION, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	AccessControl(IDC_TELEMETRYEVENTS_PROPERTIES_TEXT, CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
}

BOOL CTelemetryEventsDialog::IsModified() CONST
{
	return((!m_pEvents[0].Compare(&m_pEvents[1])) ? TRUE : FALSE);
}

BOOL CTelemetryEventsDialog::Check(BOOL bModified) CONST
{
	INT  nEvent;
	INT  nEvents;
	CTelemetryEventInfo  *pEventInfo;

	for (nEvent = 0, nEvents = (INT)m_pEvents[0].GetSize(); nEvent < nEvents; nEvent++)
	{
		if ((pEventInfo = m_pEvents[0].GetAt(nEvent)) && !CheckEventInfo(pEventInfo)) break;
		continue;
	}
	return((nEvent == nEvents) ? (!bModified || IsModified()) : FALSE);
}

void CTelemetryEventsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryEventsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BOOL CTelemetryEventsDialog::PreTranslateMessage(MSG *pMsg)
{
	if (GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK)->GetSafeHwnd() == pMsg->hwnd  &&  pMsg->message == WM_KEYDOWN)
	{
		for (m_nStackPos[1] = (pMsg->wParam == VK_DOWN) ? ((SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCURSEL) == SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCOUNT) - 1) ? min(m_nStackPos[1] + 1, 1) : m_nStackPos[1]) : m_nStackPos[1], m_nStackPos[1] = (pMsg->wParam == VK_UP) ? ((!SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCURSEL)) ? max(m_nStackPos[1] - 1, 0) : m_nStackPos[1]) : m_nStackPos[1]; pMsg->wParam == VK_DOWN || pMsg->wParam == VK_UP; )
		{
			GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK)->RedrawWindow((LPCRECT)NULL, (CRgn *)NULL, (pMsg->wParam == VK_UP  &&  m_nStackPos[0] == SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCOUNT) - 1) ? (RDW_INVALIDATE | RDW_ERASE | RDW_UPDATENOW) : (RDW_INVALIDATE | RDW_NOERASE | RDW_UPDATENOW));
			break;
		}
	}
	return CLocaleDialog::PreTranslateMessage(pMsg);
}

void CTelemetryEventsDialog::PostNcDestroy()
{
	delete m_pEventInfo;
	m_pEvents[0].RemoveAll();
	m_pEvents[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryEventsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryEventsDialog)
	ON_WM_CREATE()
	ON_WM_DRAWITEM()
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_ADD, OnAddEvent)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_REMOVE, OnRemoveEvent)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_REMOVEALL, OnRemoveAllEvents)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_ADD, OnAddParameter)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_REMOVE, OnRemoveExpression)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_REMOVEALL, OnRemoveAllExpressions)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_0, OnKey0)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_1, OnKey1)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_2, OnKey2)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_3, OnKey3)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_4, OnKey4)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_5, OnKey5)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_6, OnKey6)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_7, OnKey7)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_8, OnKey8)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_9, OnKey9)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_DIV, OnKeyDiv)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_MUL, OnKeyMul)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_SUB, OnKeySub)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ADD, OnKeyAdd)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_SIGN, OnKeyChg)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_SIN, OnKeySin)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_COS, OnKeyCos)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_TAN, OnKeyTan)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ASIN, OnKeyASin)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ACOS, OnKeyACos)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ATAN, OnKeyATan)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ABS, OnKeyAbs)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_INT, OnKeyInt)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_SQRT, OnKeySqrt)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_X2, OnKeyPow2)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_XY, OnKeyPowY)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_LN, OnKeyLn)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_LOG, OnKeyLog)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_EXP, OnKeyExp)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_PI, OnKeyPI)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_E, OnKeyE)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_AND, OnKeyAND)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_OR, OnKeyOR)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_NOT, OnKeyNOT)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_XOR, OnKeyXOR)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_POINT, OnKeyPoint)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ENTER, OnKeyEnter)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_DATA_INVALID, OnInvalidData)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_DATA_BAD, OnBadData)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_PROPERTIES_DATA_DISABLED, OnDisabledData)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TELEMETRYEVENTS_NAME, OnEditchangeEvent)
	ON_CBN_SELCHANGE(IDC_TELEMETRYEVENTS_NAME, OnSelchangeEvent)
	ON_CBN_SELCHANGE(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, OnSelchangeResult)
	ON_CBN_SELCHANGE(IDC_TELEMETRYEVENTS_PROPERTIES_AUDITION, OnSelchangeAudition)
	ON_CBN_SELCHANGE(IDC_TELEMETRYEVENTS_PROPERTIES_NOTIFICATION, OnSelchangeNotification)
	ON_EN_CHANGE(IDC_TELEMETRYEVENTS_PROPERTIES_TEXT, OnEditchangeText)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryEventsDialog message handlers

int CTelemetryEventsDialog::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	for (; CLocaleDialog::OnCreate(lpCreateStruct) != -1; )
	{
		if ((m_pEventInfo = new CTelemetryEventInfo)) return 0;
		break;
	}
	return -1;
}

BOOL CTelemetryEventsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	if (EnumEvents() && EnumResults() && EnumParameters() && EnumAuditions() && EnumNotifications())
	{
		Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_SAMPLE), TELEMETRYEVENTSDIALOG_MINIMUMSAMPLE, TELEMETRYEVENTSDIALOG_MAXIMUMSAMPLE);
		Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_SAMPLE), TELEMETRYEVENTSDIALOG_DEFAULTSAMPLE);
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_PARAMETER, CB_SETCURSEL);
		CheckDlgButton(IDC_TELEMETRYEVENTS_PROPERTIES_SAMPLE_CALIBRATED, TRUE);
		CheckDlgButton(IDC_TELEMETRYEVENTS_PROPERTIES_SAMPLE_CODED, FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_NAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_NAME)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_ADD)->EnableWindow((CheckEventInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_NAME, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_NAME, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_PARAMETER_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_PARAMETER)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_SAMPLE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_SAMPLE)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_SAMPLE_CALIBRATED)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_SAMPLE_CODED)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_0)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_1)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_2)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_3)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_4)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_5)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_6)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_7)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_8)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_9)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_DIV)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_MUL)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_SUB)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ADD)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_SIGN)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_SIN)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_COS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_TAN)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ASIN)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ACOS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ATAN)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ABS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_INT)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_SQRT)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_X2)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_XY)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_LN)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_LOG)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_EXP)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_PI)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_E)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_AND)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_OR)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_NOT)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_XOR)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_POINT)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_KEY_ENTER)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_DATA)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_DATA_INVALID)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_DATA_BAD)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_DATA_DISABLED)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_AUDITION_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_AUDITION)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_NOTIFICATION_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_NOTIFICATION)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_TEXT_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_TEXT)->EnableWindow();
		ShowEventInfo();
	}
	AdjustToPrivileges();
	return TRUE;
}

void CTelemetryEventsDialog::OnDrawItem(int nCtlID, LPDRAWITEMSTRUCT lpDrawItemStruct)
{
	CDC  cDC;
	INT  nSample;
	INT  nOldMode;
	RECT  rSample;
	BOOL  bCoding;
	CPen  cCtrlPen;
	CPen  cSymbolPen;
	CPen  *pOldPen;
	CFont  *pOldFont;
	POINT  ptLine[2];
	POINT  ptSymbol[2][3];
	CBrush  cSymbolBrush;
	CBrush  *pOldBrush;
	COLORREF  nOldColor;
	CString  szExpression;
	CString  szParameter[3];
	CTelemetryEventExpression  *pExpression;

	if (nCtlID == IDC_TELEMETRYEVENTS_PROPERTIES_STACK)
	{
		if (cDC.Attach(lpDrawItemStruct->hDC))
		{
			if ((pOldFont = cDC.SelectObject(GetFont())))
			{
				nOldMode = cDC.SetBkMode(TRANSPARENT);
				nOldColor = cDC.SetTextColor(((lpDrawItemStruct->itemState & ODS_SELECTED) == 0) ? GetSysColor(COLOR_WINDOWTEXT) : GetSysColor(COLOR_HIGHLIGHTTEXT));
				if ((pExpression = (CTelemetryEventExpression *)SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETITEMDATA, lpDrawItemStruct->itemID)) != (CTelemetryEventExpression *)LB_ERR)
				{
					for (szParameter[1] = (pExpression->GetParameter(szParameter[0], nSample, bCoding)) ? (LPCTSTR)szParameter[0] : EMPTYSTRING, szParameter[1] = (nSample != 0) ? (szParameter[1] + STRING(IDS_TELEMETRYEVENTSDIALOG_PARAMETERSAMPLEFLAG)) : szParameter[1], szParameter[1] = (bCoding) ? (szParameter[1] + STRING(IDS_TELEMETRYEVENTSDIALOG_PARAMETERVALUEFLAG)) : szParameter[1], szParameter[2].Format(szParameter[1], nSample), szExpression = (!pExpression->IsFunction()) ? ((!pExpression->IsOperator()) ? ((!pExpression->IsParameter()) ? ((pExpression->IsNumber()) ? pExpression->GetNumberAsText() : szExpression) : szParameter[2]) : pExpression->GetOperator()) : pExpression->GetFunction(); TRUE; )
					{
						cDC.FillSolidRect(&lpDrawItemStruct->rcItem, ((lpDrawItemStruct->itemState & ODS_SELECTED) == 0) ? ((lpDrawItemStruct->itemID % 2 == 0) ? GetSysColor(COLOR_3DFACE) : GetSysColor(COLOR_WINDOW)) : GetSysColor(COLOR_HIGHLIGHT));
						cDC.DrawText(szExpression, &lpDrawItemStruct->rcItem, DT_SINGLELINE | DT_CENTER | DT_VCENTER);
						break;
					}
				}
				cDC.SetTextColor(nOldColor);
				cDC.SelectObject(pOldFont);
				cDC.SetBkMode(nOldMode);
			}
			if ((lpDrawItemStruct->itemAction & ODA_SELECT) && (lpDrawItemStruct->itemState & ODS_SELECTED))
			{
				if (m_nStackPos[0] != lpDrawItemStruct->itemID  &&  m_nStackPos[1] > 0)
				{
					for (; (m_nStackPos[0] = (INT)lpDrawItemStruct->itemID) >= 0; )
					{
						GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK)->RedrawWindow();
						break;
					}
				}
				if (m_nStackPos[0] != lpDrawItemStruct->itemID)
				{
					for (; (m_nStackPos[0] = (INT)lpDrawItemStruct->itemID) >= 0; )
					{
						GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK)->RedrawWindow((LPCRECT)NULL, (CRgn *)NULL, RDW_INVALIDATE | RDW_NOERASE | RDW_UPDATENOW);
						break;
					}
				}
			}
			if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETITEMRECT, min(SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCOUNT) - 1, m_nStackPos[0] + m_nStackPos[1]), (LPARAM)&rSample) >= 0)
			{
				for (ptLine[0].x = rSample.left, ptLine[0].y = rSample.top, ptLine[1].x = rSample.right, ptLine[1].y = rSample.top; m_nStackPos[0] + m_nStackPos[1] == SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCOUNT); )
				{
					ptLine[0].y = rSample.bottom;
					ptLine[1].y = rSample.bottom;
					break;
				}
				if (cCtrlPen.CreatePen(PS_SOLID, TELEMETRYEVENTSDIALOG_STACKPOSINDICATOR_WIDTH, VGA_COLOR_LTRED))
				{
					if ((pOldPen = cDC.SelectObject(&cCtrlPen)))
					{
						cDC.MoveTo(ptLine[0]);
						cDC.LineTo(ptLine[1]);
						cDC.SelectObject(pOldPen);
					}
					cCtrlPen.DeleteObject();
				}
				if (cSymbolPen.CreatePen(PS_SOLID, 1, VGA_COLOR_LTRED))
				{
					if (cSymbolBrush.CreateSolidBrush(VGA_COLOR_LTRED))
					{
						if ((pOldBrush = cDC.SelectObject(&cSymbolBrush)))
						{
							if ((pOldPen = cDC.SelectObject(&cSymbolPen)))
							{
								ptSymbol[0][0].x = ptLine[0].x;
								ptSymbol[0][1].x = ptLine[0].x + 3 * TELEMETRYEVENTSDIALOG_STACKPOSINDICATOR_WIDTH;
								ptSymbol[0][2].x = ptLine[0].x;
								ptSymbol[0][0].y = ptLine[0].y - (3 * TELEMETRYEVENTSDIALOG_STACKPOSINDICATOR_WIDTH) / 2;
								ptSymbol[0][1].y = ptLine[0].y;
								ptSymbol[0][2].y = ptLine[0].y + (3 * TELEMETRYEVENTSDIALOG_STACKPOSINDICATOR_WIDTH) / 2;
								ptSymbol[1][0].x = ptLine[1].x;
								ptSymbol[1][1].x = ptLine[1].x - 3 * TELEMETRYEVENTSDIALOG_STACKPOSINDICATOR_WIDTH;
								ptSymbol[1][2].x = ptLine[1].x;
								ptSymbol[1][0].y = ptLine[1].y - (3 * TELEMETRYEVENTSDIALOG_STACKPOSINDICATOR_WIDTH) / 2;
								ptSymbol[1][1].y = ptLine[1].y;
								ptSymbol[1][2].y = ptLine[1].y + (3 * TELEMETRYEVENTSDIALOG_STACKPOSINDICATOR_WIDTH) / 2;
								cDC.Polygon(ptSymbol[0], sizeof(ptSymbol[0]) / sizeof(ptSymbol[0][0]));
								cDC.Polygon(ptSymbol[1], sizeof(ptSymbol[1]) / sizeof(ptSymbol[1][0]));
								cDC.SelectObject(pOldPen);
							}
							cDC.SelectObject(pOldBrush);
						}
						cSymbolBrush.DeleteObject();
					}
					cSymbolPen.DeleteObject();
				}
			}
			cDC.Detach();
		}
		return;
	}
	CLocaleDialog::OnDrawItem(nCtlID, lpDrawItemStruct);
}

void CTelemetryEventsDialog::OnAddEvent()
{
	INT  nIndex;
	CString  szEvent;
	CTelemetryEventInfo  *pEventInfo;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELEMETRYEVENTS_NAME)->GetWindowText(szEvent);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szEvent)) >= 0)
	{
		if ((pEventInfo = new CTelemetryEventInfo))
		{
			pEventInfo->Copy(m_pEventInfo);
			m_pEvents[0].Add(pEventInfo);
		}
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_NAME, CB_SETCURSEL, nIndex);
		ShowEventInfo();
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	GetDlgItem(IDC_TELEMETRYEVENTS_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
	GetDlgItem(IDC_TELEMETRYEVENTS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsDialog::OnRemoveEvent()
{
	INT  nIndex;
	CString  szEvent;
	CTelemetryEventInfo  *pEventInfo;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELEMETRYEVENTS_NAME)->GetWindowText(szEvent);
	if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYEVENTS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEvent)) >= 0)
	{
		if ((pEventInfo = m_pEvents[0].GetAt((nIndex = m_pEvents[0].Find(szEvent)))))
		{
			if (m_pEvents[0].GetSize() == 1)
			{
				m_pEventInfo->SetName(EMPTYSTRING);
				m_pEventInfo->SetMessage(EMPTYSTRING);
				m_pEventInfo->SetAudition(EMPTYSTRING);
				m_pEventInfo->SetNotification(EMPTYSTRING);
				m_pEventInfo->SetDisabledDataMode(FALSE);
				m_pEventInfo->SetInvalidDataMode(FALSE);
				m_pEventInfo->SetBadDataMode(FALSE);
				m_pEventInfo->SetResultCode(0);
				m_pEventInfo->RemoveAll();
			}
			m_pEvents[0].RemoveAt(nIndex);
			delete pEventInfo;
		}
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_NAME, CB_SETCURSEL);
		ShowEventInfo();
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_NAME, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_NAME, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsDialog::OnRemoveAllEvents()
{
	CHourglassCursor  cCursor;

	if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_NAME, CB_RESETCONTENT))
	{
		m_pEventInfo->SetName(EMPTYSTRING);
		m_pEventInfo->SetMessage(EMPTYSTRING);
		m_pEventInfo->SetAudition(EMPTYSTRING);
		m_pEventInfo->SetNotification(EMPTYSTRING);
		m_pEventInfo->SetDisabledDataMode(FALSE);
		m_pEventInfo->SetInvalidDataMode(FALSE);
		m_pEventInfo->SetBadDataMode(FALSE);
		m_pEventInfo->SetResultCode(0);
		m_pEventInfo->RemoveAll();
		m_pEvents[0].RemoveAll();
		ShowEventInfo();
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsDialog::OnAddParameter()
{
	INT  nIndex;
	INT  nResultCode;
	CString  szParameter;
	CTelemetryEventInfo  *pEventInfo;
	CTelemetryEventExpression  *pExpression;
	CHourglassCursor  cCursor;

	if ((pEventInfo = FindEventInfo()))
	{
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_PARAMETER)->GetWindowText(szParameter);
		szParameter = szParameter.Left(max(szParameter.Find(CString(SPACE) + SPACE), 0));
		if ((pExpression = pEventInfo->GetAt(m_nStackPos[0] + m_nStackPos[1])) && pExpression->IsEmpty())
		{
			pExpression->SetParameter(szParameter, (INT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_SAMPLE)), IsDlgButtonChecked(IDC_TELEMETRYEVENTS_PROPERTIES_SAMPLE_CODED));
			UpdateStackContents();
		}
		else
		{
			if ((pExpression = new CTelemetryEventExpression))
			{
				pExpression->SetParameter(szParameter, (INT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_SAMPLE)), IsDlgButtonChecked(IDC_TELEMETRYEVENTS_PROPERTIES_SAMPLE_CODED));
				if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_INSERTSTRING, m_nStackPos[0] + m_nStackPos[1], (LPARAM)pExpression) >= 0)
				{
					SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CB_SETCURSEL, (nResultCode = ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CB_GETCURSEL)) < 0) ? (INT)(SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYEVENTSDIALOG_RESULT_EQUALZERO)) + 1) : (INT)(nIndex + 1)) - 1);
					SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_SETCURSEL, m_nStackPos[0]);
					GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_STATIC)->EnableWindow();
					GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK)->EnableWindow();
					GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
					GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
					GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT_STATIC)->EnableWindow();
					GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT)->EnableWindow();
					pEventInfo->InsertAt(m_nStackPos[0] + m_nStackPos[1], pExpression, 1);
					pEventInfo->SetResultCode(nResultCode);
				}
				else
				{
					CAudioDevice::AlertBySound();
					delete pExpression;
					return;
				}
			}
			else
			{
				CAudioDevice::AlertBySound();
				return;
			}
		}
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_ADD)->EnableWindow((CheckEventInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_PARAMETER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsDialog::OnRemoveExpression()
{
	INT  nIndex;
	CTelemetryEventInfo  *pEventInfo;
	CHourglassCursor  cCursor;

	if ((pEventInfo = FindEventInfo()))
	{
		if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_DELETESTRING, (WPARAM)(nIndex = m_nStackPos[0])) != LB_ERR)
		{
			SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_SETCURSEL, min(SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCOUNT) - 1, m_nStackPos[0]));
			delete pEventInfo->GetAt(nIndex);
			pEventInfo->RemoveAt(nIndex);
		}
		if (!SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_GETCOUNT))
		{
			SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CB_SETCURSEL, (WPARAM)-1);
			GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_STATIC)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_REMOVE)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_REMOVEALL)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT_STATIC)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT)->EnableWindow(FALSE);
		}
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_ADD)->EnableWindow((CheckEventInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_PARAMETER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsDialog::OnRemoveAllExpressions()
{
	CTelemetryEventInfo  *pEventInfo;
	CHourglassCursor  cCursor;

	if ((pEventInfo = FindEventInfo()))
	{
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_STACK, LB_RESETCONTENT);
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CB_SETCURSEL, (WPARAM)-1);
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_STACK_REMOVEALL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT)->EnableWindow(FALSE);
		m_nStackPos[0] = m_nStackPos[1] = 0;
		pEventInfo->RemoveAll();
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_ADD)->EnableWindow((CheckEventInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_PARAMETER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsDialog::OnKey0()
{
	Key(0);
}

void CTelemetryEventsDialog::OnKey1()
{
	Key(1);
}

void CTelemetryEventsDialog::OnKey2()
{
	Key(2);
}

void CTelemetryEventsDialog::OnKey3()
{
	Key(3);
}

void CTelemetryEventsDialog::OnKey4()
{
	Key(4);
}

void CTelemetryEventsDialog::OnKey5()
{
	Key(5);
}

void CTelemetryEventsDialog::OnKey6()
{
	Key(6);
}

void CTelemetryEventsDialog::OnKey7()
{
	Key(7);
}

void CTelemetryEventsDialog::OnKey8()
{
	Key(8);
}

void CTelemetryEventsDialog::OnKey9()
{
	Key(9);
}

void CTelemetryEventsDialog::OnKeyDiv()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_DIV));
}

void CTelemetryEventsDialog::OnKeyMul()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_MUL));
}

void CTelemetryEventsDialog::OnKeySub()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_SUB));
}

void CTelemetryEventsDialog::OnKeyAdd()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_ADD));
}

void CTelemetryEventsDialog::OnKeyChg()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_CHG));
}

void CTelemetryEventsDialog::OnKeySin()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_SIN));
}

void CTelemetryEventsDialog::OnKeyCos()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_COS));
}

void CTelemetryEventsDialog::OnKeyTan()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_TAN));
}

void CTelemetryEventsDialog::OnKeyASin()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_ASIN));
}

void CTelemetryEventsDialog::OnKeyACos()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_ACOS));
}

void CTelemetryEventsDialog::OnKeyATan()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_ATAN));
}

void CTelemetryEventsDialog::OnKeyAbs()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_ABS));
}

void CTelemetryEventsDialog::OnKeyInt()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_INT));
}

void CTelemetryEventsDialog::OnKeySqrt()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_SQRT));
}

void CTelemetryEventsDialog::OnKeyPow2()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_POW2));
}

void CTelemetryEventsDialog::OnKeyPowY()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_POWY));
}

void CTelemetryEventsDialog::OnKeyLn()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_LN));
}

void CTelemetryEventsDialog::OnKeyLog()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_LOG));
}

void CTelemetryEventsDialog::OnKeyExp()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_MATHFUNCTION_EXP));
}

void CTelemetryEventsDialog::OnKeyPI()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_CONSTANT_PI));
}

void CTelemetryEventsDialog::OnKeyE()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_CONSTANT_E));
}

void CTelemetryEventsDialog::OnKeyAND()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_AND));
}

void CTelemetryEventsDialog::OnKeyOR()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_OR));
}

void CTelemetryEventsDialog::OnKeyNOT()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_NOT));
}

void CTelemetryEventsDialog::OnKeyXOR()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_OPERATOR_XOR));
}

void CTelemetryEventsDialog::OnKeyPoint()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_KEY_POINT));
}

void CTelemetryEventsDialog::OnKeyEnter()
{
	Key(STRING(IDS_TELEMETRYEVENTSDIALOG_KEY_ENTER));
}

void CTelemetryEventsDialog::OnInvalidData()
{
	BOOL  bData;
	CTelemetryEventInfo  *pEventInfo;

	if ((pEventInfo = FindEventInfo()))
	{
		bData = IsDlgButtonChecked(IDC_TELEMETRYEVENTS_PROPERTIES_DATA_INVALID);
		pEventInfo->SetInvalidDataMode(bData);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsDialog::OnBadData()
{
	BOOL  bData;
	CTelemetryEventInfo  *pEventInfo;

	if ((pEventInfo = FindEventInfo()))
	{
		bData = IsDlgButtonChecked(IDC_TELEMETRYEVENTS_PROPERTIES_DATA_BAD);
		pEventInfo->SetBadDataMode(bData);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsDialog::OnDisabledData()
{
	BOOL  bData;
	CTelemetryEventInfo  *pEventInfo;

	if ((pEventInfo = FindEventInfo()))
	{
		bData = IsDlgButtonChecked(IDC_TELEMETRYEVENTS_PROPERTIES_DATA_DISABLED);
		pEventInfo->SetDisabledDataMode(bData);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsDialog::OnEditchangeEvent()
{
	CString  szEvent;
	CTelemetryEventInfo  *pEventInfo;

	if ((pEventInfo = FindEventInfo(FALSE)))
	{
		GetDlgItem(IDC_TELEMETRYEVENTS_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYEVENTS_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE));
		ShowEventInfo();
		return;
	}
	for (GetDlgItem(IDC_TELEMETRYEVENTS_NAME)->GetWindowText(szEvent); (pEventInfo = FindEventInfo()); )
	{
		pEventInfo->SetName(szEvent);
		break;
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_ADD)->EnableWindow((CheckEventInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_REMOVEALL)->EnableWindow(FALSE);
}

void CTelemetryEventsDialog::OnEditchangeText()
{
	CString  szMessage;
	CTelemetryEventInfo  *pEventInfo;

	if ((pEventInfo = FindEventInfo()))
	{
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_TEXT)->GetWindowText(szMessage);
		pEventInfo->SetMessage(szMessage);
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_ADD)->EnableWindow((CheckEventInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsDialog::OnSelchangeEvent()
{
	SendDlgItemMessage(IDC_TELEMETRYEVENTS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYEVENTS_NAME, CB_GETCURSEL));
	ShowEventInfo();
}

void CTelemetryEventsDialog::OnSelchangeResult()
{
	INT  nResultCode;
	CTelemetryEventInfo  *pEventInfo;

	if ((pEventInfo = FindEventInfo()))
	{
		nResultCode = (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_PROPERTIES_RESULT, CB_GETCURSEL) + 1;
		pEventInfo->SetResultCode(nResultCode);
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_ADD)->EnableWindow((CheckEventInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsDialog::OnSelchangeAudition()
{
	CString  szAudition;
	CTelemetryEventInfo  *pEventInfo;

	if ((pEventInfo = FindEventInfo()))
	{
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_AUDITION)->GetWindowText(szAudition);
		pEventInfo->SetAudition((szAudition != STRING(IDS_TELEMETRYEVENTSDIALOG_AUDITION_NONE)) ? (LPCTSTR)szAudition : EMPTYSTRING);
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_ADD)->EnableWindow((CheckEventInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsDialog::OnSelchangeNotification()
{
	CString  szNotification;
	CTelemetryEventInfo  *pEventInfo;

	if ((pEventInfo = FindEventInfo()))
	{
		GetDlgItem(IDC_TELEMETRYEVENTS_PROPERTIES_NOTIFICATION)->GetWindowText(szNotification);
		pEventInfo->SetNotification((szNotification != STRING(IDS_TELEMETRYEVENTSDIALOG_NOTIFICATION_NONE)) ? (LPCTSTR)szNotification : EMPTYSTRING);
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_ADD)->EnableWindow((CheckEventInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYEVENTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	SetTelemetryEvents(m_pEvents[0]);
	EndDialog(IDOK);
}

BOOL CTelemetryEventsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYEVENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryEventsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYEVENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryEventsImportDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryEventsImportDialog, CLocaleDialog)

CTelemetryEventsImportDialog::CTelemetryEventsImportDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryEventsImportDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryEventsImportDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryEventsImportDialog::Initialize()
{
	GetTelemetryEvents(m_pEvents[0]);
	return TRUE;
}

VOID CTelemetryEventsImportDialog::EnumEvents()
{
	INT  nEvent;
	INT  nEvents;
	DWORD  cbData;
	CFileEx  cFile;
	CString  szMessage;
	CString  szFileName;
	CByteArray  nFileData;
	CTelemetryEventInfo  *pEventInfo;

	SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY, CB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_FILENAME)->GetWindowText(szFileName);
	if (cFile.Open(szFileName, CFile::modeRead | CFile::shareExclusive))
	{
		nFileData.SetSize((cbData = (DWORD)cFile.GetLength()*sizeof(BYTE)));
		if (ReadFile(cFile.m_hFile, nFileData.GetData(), (DWORD)nFileData.GetSize(), &cbData, (LPOVERLAPPED)NULL))
		{
			for (nEvent = 0, nEvents = (m_pEvents[1].Unmap(nFileData)) ? (INT)m_pEvents[1].GetSize() : 0; nEvent < nEvents; nEvent++)
			{
				if ((pEventInfo = (CTelemetryEventInfo *)m_pEvents[1].GetAt(nEvent)) != (CTelemetryEventInfo *)NULL)
				{
					SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY, CB_INSERTSTRING, nEvent, (LPARAM)(LPCTSTR)pEventInfo->GetName());
					continue;
				}
			}
		}
		else
		{
			szMessage = STRING(IDS_TELEMETRYEVENTS_IMPORT_FILE_FAILURE);
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
		}
		cFile.Close();
	}
	else
	{
		szMessage = STRING(IDS_TELEMETRYEVENTS_IMPORT_FILE_FAILURE);
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
	}
	if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY, CB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY)->EnableWindow(FALSE);
}

BOOL CTelemetryEventsImportDialog::Check(BOOL bModified) CONST
{
	return((m_pEvents[2].GetSize() > 0) ? TRUE : FALSE);
}

void CTelemetryEventsImportDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryEventsImportDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryEventsImportDialog::PostNcDestroy()
{
	m_pEvents[0].RemoveAll();
	m_pEvents[1].RemoveAll();
	m_pEvents[2].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryEventsImportDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryEventsImportDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_IMPORT_BROWSE, OnBrowse)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_IMPORT_INSPECT, OnInspect)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_IMPORT_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_IMPORT_ADDALL, OnAddAll)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_IMPORT_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_IMPORT_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_IMPORT_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TELEMETRYEVENTS_IMPORT_FILENAME, OnEditchangeFileName)
	ON_CBN_SELCHANGE(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY, OnSelchangeSource)
	ON_LBN_SELCHANGE(IDC_TELEMETRYEVENTS_IMPORT_LIST, OnSelchangeDestination)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryEventsImportDialog message handlers

BOOL CTelemetryEventsImportDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_BROWSE)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ADDALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION_TEXT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_FILENAME)->SetFocus();
	return FALSE;
}

void CTelemetryEventsImportDialog::OnBrowse()
{
	CString  szFileName;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELEMETRYEVENTS_IMPORT_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_FILENAME)->SetWindowText((szFileName = cFileBrowseDialog.GetPathName()));
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_BROWSE)->ShowWindow((szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_INSPECT)->ShowWindow((!szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_BROWSE)->EnableWindow((szFileName.IsEmpty()) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_INSPECT)->EnableWindow((!szFileName.IsEmpty()) ? TRUE : FALSE);
	}
	SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_FILENAME)->SetFocus();
}

void CTelemetryEventsImportDialog::OnInspect()
{
	INT  nEvent;
	INT  nEvents;
	CString  szEvent;
	CHourglassCursor  cCursor;

	EnumEvents();
	for (nEvent = 0, nEvents = (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY, CB_GETCOUNT); nEvent < nEvents; nEvent++)
	{
		if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY), nEvent)) < 0) break;
		continue;
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY)->GetWindowText(szEvent);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEvent) < 0 && !szEvent.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ADDALL)->EnableWindow((nEvent < nEvents) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY)->SetFocus();
}

void CTelemetryEventsImportDialog::OnAdd()
{
	INT  nEvent;
	INT  nEvents;
	CString  szEvent;
	CTelemetryEventInfo  *pEventInfo[2];
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY)->GetWindowText(szEvent);
	if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szEvent) >= 0)
	{
		if ((pEventInfo[0] = m_pEvents[1].GetAt(m_pEvents[1].Find(szEvent))))
		{
			if ((pEventInfo[1] = new CTelemetryEventInfo))
			{
				pEventInfo[1]->Copy(pEventInfo[0]);
				if (m_pEvents[2].Add(pEventInfo[1]) < 0) delete pEventInfo[1];
			}
		}
		for (nEvent = 0, nEvents = (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_GETCOUNT); nEvent < nEvents; nEvent++)
		{
			if (m_pEvents[0].Find(Listbox_GetText(GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_LIST), nEvent)) >= 0) break;
			continue;
		}
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEvent));
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION)->ShowWindow((nEvent < nEvents) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION_TEXT)->ShowWindow((nEvent < nEvents) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION)->EnableWindow((nEvent < nEvents) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION_TEXT)->EnableWindow((nEvent < nEvents) ? TRUE : FALSE);
		for (nEvent = 0, nEvents = (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY, CB_GETCOUNT); nEvent < nEvents; nEvent++)
		{
			if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY), nEvent)) < 0) break;
			continue;
		}
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ADDALL)->EnableWindow((nEvent < nEvents) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_LIST)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_REMOVE)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_REMOVEALL)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsImportDialog::OnAddAll()
{
	INT  nEvent;
	INT  nEvents;
	CString  szEvent;
	CTelemetryEventInfo  *pEventInfo[2];
	CHourglassCursor  cCursor;

	for (nEvent = 0, nEvents = (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY, CB_GETCOUNT); nEvent < nEvents; nEvent++)
	{
		if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szEvent = Combobox_GetText(GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY), nEvent))) < 0)
		{
			SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szEvent);
			continue;
		}
	}
	for (nEvent = 0, nEvents = (INT)m_pEvents[1].GetSize(); nEvent < nEvents; nEvent++)
	{
		if ((pEventInfo[0] = m_pEvents[1].GetAt(nEvent)) && m_pEvents[2].Find(pEventInfo[0]->GetName()) < 0)
		{
			if ((pEventInfo[1] = new CTelemetryEventInfo))
			{
				pEventInfo[1]->Copy(pEventInfo[0]);
				if (m_pEvents[2].Add(pEventInfo[1]) < 0)
				{
					delete pEventInfo[1];
					continue;
				}
			}
		}
	}
	for (nEvent = 0, nEvents = (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_GETCOUNT); nEvent < nEvents; nEvent++)
	{
		if (m_pEvents[0].Find((szEvent = Listbox_GetText(GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_LIST), nEvent))) >= 0) break;
		continue;
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION)->ShowWindow((nEvent < nEvents) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION_TEXT)->ShowWindow((nEvent < nEvents) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION)->EnableWindow((nEvent < nEvents) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION_TEXT)->EnableWindow((nEvent < nEvents) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ADDALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsImportDialog::OnRemove()
{
	INT  nIndex;
	INT  nEvent;
	INT  nEvents;
	CString  szEvent;
	CHourglassCursor  cCursor;

	if ((nIndex = m_pEvents[2].Find(Listbox_GetText(GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_LIST), (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_GETCURSEL)))) >= 0)
	{
		delete m_pEvents[2].GetAt(nIndex);
		m_pEvents[2].RemoveAt(nIndex);
	}
	if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_GETCURSEL)) > 0)
	{
		for (nEvent = 0, nEvents = (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_GETCOUNT); nEvent < nEvents; nEvent++)
		{
			if (m_pEvents[0].Find((szEvent = Listbox_GetText(GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_LIST), nEvent))) >= 0) break;
			continue;
		}
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY)->GetWindowText(szEvent);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION)->ShowWindow((nEvent < nEvents) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION_TEXT)->ShowWindow((nEvent < nEvents) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION)->EnableWindow((nEvent < nEvents) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION_TEXT)->EnableWindow((nEvent < nEvents) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEvent) < 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	}
	else
	{
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION_TEXT)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION_TEXT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_LIST_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_REMOVEALL)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsImportDialog::OnRemoveAll()
{
	CHourglassCursor  cCursor;

	m_pEvents[2].RemoveAll();
	SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION_TEXT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ATTENTION_TEXT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsImportDialog::OnEditchangeFileName()
{
	CString  szFileName;

	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_FILENAME)->GetWindowText(szFileName);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_BROWSE)->ShowWindow((szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_INSPECT)->ShowWindow((!szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_BROWSE)->EnableWindow((szFileName.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_INSPECT)->EnableWindow((!szFileName.IsEmpty()) ? TRUE : FALSE);
}

void CTelemetryEventsImportDialog::OnSelchangeSource()
{
	CString  szEvent;

	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_DIRECTORY)->GetWindowText(szEvent);
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEvent) < 0) ? TRUE : FALSE);
}

void CTelemetryEventsImportDialog::OnSelchangeDestination()
{
	GetDlgItem(IDC_TELEMETRYEVENTS_IMPORT_REMOVE)->EnableWindow();
}

void CTelemetryEventsImportDialog::OnOK()
{
	INT  nIndex;
	INT  nEvent;
	INT  nEvents;
	CString  szEvent;
	CString  szMessage;
	CTelemetryEvents  pEvents;
	CTelemetryEventInfo  *pEventInfo[2];
	CHourglassCursor  cCursor;

	for (nEvent = 0, nEvents = (GetTelemetryEvents(pEvents)) ? (INT)m_pEvents[2].GetSize() : 0; nEvent < nEvents; nEvent++)
	{
		if ((pEventInfo[0] = m_pEvents[2].GetAt(nEvent)) != (CTelemetryEventInfo *)NULL)
		{
			if ((nIndex = pEvents.Find((szEvent = pEventInfo[0]->GetName()))) >= 0)
			{
				delete pEvents.GetAt(nIndex);
				pEvents.RemoveAt(nIndex);
			}
			if ((pEventInfo[1] = new CTelemetryEventInfo))
			{
				pEventInfo[1]->Copy(pEventInfo[0]);
				if (pEvents.Add(pEventInfo[1]) < 0)
				{
					szMessage.Format(STRING(IDS_TELEMETRYEVENTS_IMPORT_FAILURE), (LPCTSTR)szEvent);
					ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
					delete pEventInfo[1];
				}
			}
			else
			{
				szMessage.Format(STRING(IDS_TELEMETRYEVENTS_IMPORT_FAILURE), (LPCTSTR)szEvent);
				ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
			}
		}
		if (nEvent == nEvents - 1)
		{
			SetTelemetryEvents(pEvents);
			continue;
		}
	}
	CLocaleDialog::OnOK();
}

BOOL CTelemetryEventsImportDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYEVENTSIMPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryEventsImportDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYEVENTSIMPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryEventsExportDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryEventsExportDialog, CLocaleDialog)

CTelemetryEventsExportDialog::CTelemetryEventsExportDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryEventsExportDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryEventsExportDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryEventsExportDialog::Initialize()
{
	GetTelemetryEvents(m_pEvents[0]);
	return TRUE;
}

BOOL CTelemetryEventsExportDialog::EnumEvents()
{
	INT  nEvent;
	INT  nEvents;
	CTelemetryEventInfo  *pEventInfo;

	for (nEvent = 0, nEvents = (INT)m_pEvents[0].GetSize(); nEvent < nEvents; nEvent++)
	{
		if ((pEventInfo = m_pEvents[0].GetAt(nEvent)) != (CTelemetryEventInfo *)NULL)
		{
			SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pEventInfo->GetName());
			continue;
		}
	}
	if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY, CB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY)->EnableWindow();
		return TRUE;
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY)->EnableWindow(FALSE);
	return FALSE;
}

BOOL CTelemetryEventsExportDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_FILENAME)->GetWindowTextLength() > 0 && m_pEvents[1].GetSize() > 0) ? TRUE : FALSE);
}

void CTelemetryEventsExportDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryEventsExportDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryEventsExportDialog::PostNcDestroy()
{
	m_pEvents[0].RemoveAll();
	m_pEvents[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryEventsExportDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryEventsExportDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_EXPORT_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_EXPORT_ADDALL, OnAddAll)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_EXPORT_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_EXPORT_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_EXPORT_BROWSE, OnBrowse)
	ON_BN_CLICKED(IDC_TELEMETRYEVENTS_EXPORT_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TELEMETRYEVENTS_EXPORT_FILENAME, OnEditchangeFileName)
	ON_CBN_SELCHANGE(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY, OnSelchangeSource)
	ON_LBN_SELCHANGE(IDC_TELEMETRYEVENTS_EXPORT_LIST, OnSelchangeDestination)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryEventsExportDialog message handlers

BOOL CTelemetryEventsExportDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_ADD)->EnableWindow((EnumEvents() && SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_BROWSE)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY)->SetFocus();
	return FALSE;
}

void CTelemetryEventsExportDialog::OnAdd()
{
	INT  nEvent;
	INT  nEvents;
	CString  szEvent;
	CTelemetryEventInfo  *pEventInfo[2];
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY)->GetWindowText(szEvent);
	if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szEvent) >= 0)
	{
		if ((pEventInfo[0] = m_pEvents[0].GetAt(m_pEvents[0].Find(szEvent))))
		{
			if ((pEventInfo[1] = new CTelemetryEventInfo))
			{
				pEventInfo[1]->Copy(pEventInfo[0]);
				if (m_pEvents[1].Add(pEventInfo[1]) < 0) delete pEventInfo[1];
			}
		}
		for (nEvent = 0, nEvents = (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY, CB_GETCOUNT); nEvent < nEvents; nEvent++)
		{
			if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY), nEvent)) < 0) break;
			continue;
		}
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEvent));
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_ADDALL)->EnableWindow((nEvent < nEvents) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_LIST)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_REMOVE)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_REMOVEALL)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsExportDialog::OnAddAll()
{
	INT  nEvent;
	INT  nEvents;
	CString  szEvent;
	CTelemetryEventInfo  *pEventInfo[2];
	CHourglassCursor  cCursor;

	for (nEvent = 0, nEvents = (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY, CB_GETCOUNT); nEvent < nEvents; nEvent++)
	{
		if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szEvent = Combobox_GetText(GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY), nEvent))) < 0)
		{
			SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szEvent);
			continue;
		}
	}
	for (nEvent = 0, nEvents = (INT)m_pEvents[0].GetSize(); nEvent < nEvents; nEvent++)
	{
		if ((pEventInfo[0] = m_pEvents[0].GetAt(nEvent)) && m_pEvents[1].Find(pEventInfo[0]->GetName()) < 0)
		{
			if ((pEventInfo[1] = new CTelemetryEventInfo))
			{
				pEventInfo[1]->Copy(pEventInfo[0]);
				if (m_pEvents[1].Add(pEventInfo[1]) < 0)
				{
					delete pEventInfo[1];
					continue;
				}
			}
		}
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_ADDALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsExportDialog::OnRemove()
{
	INT  nIndex;
	CString  szEvent;
	CHourglassCursor  cCursor;

	if ((nIndex = m_pEvents[1].Find(Listbox_GetText(GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_LIST), (INT)SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_GETCURSEL)))) >= 0)
	{
		delete m_pEvents[1].GetAt(nIndex);
		m_pEvents[1].RemoveAt(nIndex);
	}
	if (SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_GETCURSEL)) > 0)
	{
		SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY)->GetWindowText(szEvent);
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEvent) < 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	}
	else
	{
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_LIST_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_REMOVEALL)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsExportDialog::OnRemoveAll()
{
	CHourglassCursor  cCursor;

	m_pEvents[1].RemoveAll();
	SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsExportDialog::OnBrowse()
{
	CString  szFileName;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELEMETRYEVENTS_EXPORT_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		szFileName = cFileBrowseDialog.GetPathName();
		GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_FILENAME)->SetWindowText(szFileName);
	}
	SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsExportDialog::OnEditchangeFileName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryEventsExportDialog::OnSelchangeSource()
{
	CString  szEvent;

	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_DIRECTORY)->GetWindowText(szEvent);
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYEVENTS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEvent) < 0) ? TRUE : FALSE);
}

void CTelemetryEventsExportDialog::OnSelchangeDestination()
{
	GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_REMOVE)->EnableWindow();
}

void CTelemetryEventsExportDialog::OnOK()
{
	DWORD  cbData;
	CFileEx  cFile;
	CString  szFileName;
	CByteArray  nFileData;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TELEMETRYEVENTS_EXPORT_FILENAME)->GetWindowText(szFileName); !szFileName.IsEmpty(); )
	{
		if (cFile.Open(szFileName, CFile::modeCreate | CFile::modeReadWrite | CFile::shareExclusive))
		{
			ReportEvent((!WriteFile(cFile.m_hFile, nFileData.GetData(), (m_pEvents[1].Map(nFileData)) ? (DWORD)nFileData.GetSize() : 0, &cbData, (LPOVERLAPPED)NULL) || !cbData) ? (EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR) : 0, STRING(IDS_TELEMETRYEVENTS_EXPORT_FILE_FAILURE));
			cFile.Close();
			break;
		}
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TELEMETRYEVENTS_EXPORT_FILE_FAILURE));
		break;
	}
	CLocaleDialog::OnOK();
}

BOOL CTelemetryEventsExportDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYEVENTSEXPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryEventsExportDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYEVENTSEXPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryReportsDialog, CLocaleDialog)

CTelemetryReportsDialog::CTelemetryReportsDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryReportsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryReportsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryReportsDialog::Initialize()
{
	if (GetTelemetryReports(m_pReports[0]) && GetSystemAlerts(m_pAlerts) && GetTelemetryEvents(m_pEvents))
	{
		GetDatabase()->EnumScripts(m_pScripts);
		return m_pReports[1].Copy(&m_pReports[0]);
	}
	return FALSE;
}

BOOL CTelemetryReportsDialog::EnumReports()
{
	INT  nReport;
	INT  nReports;
	CTelemetryReportInfo  *pReportInfo;

	for (nReport = 0, nReports = (INT)m_pReports[0].GetSize(); nReport < nReports; nReport++)
	{
		if ((pReportInfo = m_pReports[0].GetAt(nReport)) != (CTelemetryReportInfo *)NULL)
		{
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pReportInfo->GetName());
			continue;
		}
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_NAME, CB_SETCURSEL);
	return TRUE;
}

BOOL CTelemetryReportsDialog::EnumScripts()
{
	INT  nScript;
	INT  nScripts;
	CString  szScript;
	CAutomationScript  *pScript;

	for (nScript = 0, nScripts = (INT)m_pScripts.GetSize(); nScript < nScripts; nScript++)
	{
		if ((pScript = m_pScripts.GetAt(nScript)) != (CAutomationScript *)NULL)
		{
			szScript.Format(STRING(IDS_TELEMETRYREPORTSDIALOG_SCRIPTS_FORMAT), (LPCTSTR)pScript->GetTitle(), (LPCTSTR)pScript->GetName());
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szScript);
		}
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_INSERTSTRING, 0, (LPARAM)STRING(IDS_TELEMETRYREPORTSDIALOG_SCRIPT_NONE));
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_SETCURSEL);
	return TRUE;
}

BOOL CTelemetryReportsDialog::EnumSystemAlerts()
{
	INT  nAlert;
	INT  nAlerts;
	CSystemAlertInfo  *pAlertInfo;

	for (nAlert = 0, nAlerts = (INT)m_pAlerts.GetSize(); nAlert < nAlerts; nAlert++)
	{
		if ((pAlertInfo = m_pAlerts.GetAt(nAlert)) != (CSystemAlertInfo *)NULL)
		{
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pAlertInfo->TranslateName(pAlertInfo->GetName()));
			continue;
		}
	}
	return TRUE;
}

BOOL CTelemetryReportsDialog::EnumTelemetryEvents()
{
	INT  nEvent;
	INT  nEvents;
	CTelemetryEventInfo  *pEventInfo;

	for (nEvent = 0, nEvents = (INT)m_pEvents.GetSize(); nEvent < nEvents; nEvent++)
	{
		if ((pEventInfo = m_pEvents.GetAt(nEvent)) != (CTelemetryEventInfo *)NULL)
		{
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pEventInfo->GetName());
			continue;
		}
	}
	return TRUE;
}

VOID CTelemetryReportsDialog::ShowReportInfo()
{
	INT  nAlert;
	INT  nAlerts;
	INT  nEvent;
	INT  nEvents;
	INT  nRecipient;
	INT  nRecipients;
	CString  szAlert;
	CString  szEvent;
	CString  szScript;
	CString  szRecipient;
	CStringArray  szAlerts;
	CStringArray  szEvents;
	CStringArray  szRecipients;
	CAutomationScript  *pScript;
	CTelemetryReportInfo  *pReportInfo;
	CTelemetryReportFTPRecipients  pRecipients;

	if ((pReportInfo = FindReportInfo()))
	{
		for (; m_pReportInfo != pReportInfo; )
		{
			m_pReportInfo->Copy(pReportInfo);
			break;
		}
		CheckDlgButton(IDC_TELEMETRYREPORTS_DISABLED, (pReportInfo->GetOptions() & TELEMETRYREPORTINFO_OPTION_DISABLED) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_KEEPALLFILES, (pReportInfo->GetOptions() & TELEMETRTREPORTINFO_OPTION_KEEPALLFILES) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY, (pReportInfo->GetOptions() & TELEMETRYREPORTINFO_OPTION_MAILDAILY) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY, (pReportInfo->GetOptions() & TELEMETRYREPORTINFO_OPTION_MAILWEEKLY) ? TRUE : FALSE);
		for (szScript.Empty(); (pScript = m_pScripts.GetAt(m_pScripts.Find(pReportInfo->GetScript()))) != (CAutomationScript *)NULL; )
		{
			szScript.Format(STRING(IDS_TELEMETRYREPORTSDIALOG_SCRIPTS_FORMAT), (LPCTSTR)pScript->GetTitle(), (LPCTSTR)pScript->GetName());
			break;
		}
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szScript), 0));
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_TIME), (pReportInfo->GetMailTime() > 0) ? pReportInfo->GetMailTime() : CTime::GetCurrentTime().GetTime());
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY_TIME), (pReportInfo->GetMailTime() > 0) ? pReportInfo->GetMailTime() : CTime::GetCurrentTime().GetTime());
		Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_INTERVAL), pReportInfo->GetMailTimeInterval().GetTotalSeconds() / SECONDSPERDAY);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_RESETCONTENT);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_RESETCONTENT);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_RESETCONTENT);
		for (nEvent = 0, nEvents = pReportInfo->GetEvents(szEvents); nEvent < nEvents; nEvent++)
		{
			if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEvents.GetAt(nEvent)) >= 0)
			{
				SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szEvents.GetAt(nEvent));
				continue;
			}
			szEvents.RemoveAt(nEvent);
			nEvents--;
			nEvent--;
		}
		for (nAlert = 0, nAlerts = pReportInfo->GetAlerts(szAlerts); nAlert < nAlerts; nAlert++)
		{
			if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szAlerts.GetAt(nAlert)) >= 0)
			{
				SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szAlerts.GetAt(nAlert));
				continue;
			}
			szAlerts.RemoveAt(nAlert);
			nAlerts--;
			nAlert--;
		}
		for (nRecipient = 0, nRecipients = pReportInfo->GetMailRecipients(pRecipients); nRecipient < nRecipients; nRecipient++)
		{
			for (szRecipient.Format(STRING(IDS_TELEMETRYREPORTSDIALOG_MAILRECIPIENT_FORMAT), (LPCTSTR)pRecipients.GetAt(nRecipient)->GetLocation(), (LPCTSTR)pRecipients.GetAt(nRecipient)->GetUserName()), szRecipient = (pRecipients.GetAt(nRecipient)->GetUserName().IsEmpty()) ? pRecipients.GetAt(nRecipient)->GetLocation() : szRecipient; SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szRecipient) < 0; )
			{
				SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szRecipient);
				break;
			}
		}
		for (nRecipient = 0, nRecipients = pReportInfo->GetMailRecipients(szRecipients); nRecipient < nRecipients; nRecipient++)
		{
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szRecipients.GetAt(nRecipient));
			continue;
		}
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS, (szEvents.GetSize() > 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS, (szAlerts.GetSize() > 0) ? TRUE : FALSE);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST, CB_SETCURSEL, (szEvents.GetSize() > 0) ? 0 : -1);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST, CB_SETCURSEL, (szAlerts.GetSize() > 0) ? 0 : -1);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME)->SetWindowText((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCURSEL) > 0) ? pReportInfo->GetInputFileName() : EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_OUTPUTFILENAME)->SetWindowText((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCURSEL) >= 0) ? pReportInfo->GetOutputFileName() : EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS));
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szEvent = Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST), (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST, CB_GETCURSEL)))) < 0 && !szEvent.IsEmpty()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS));
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szAlert = Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST), (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST, CB_GETCURSEL)))) < 0 && !szAlert.IsEmpty()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCURSEL) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCURSEL) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME_BROWSE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCURSEL) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_FTP)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY));
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY));
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY));
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY));
	}
}

BOOL CTelemetryReportsDialog::CheckReportInfo() CONST
{
	CTelemetryReportInfo  *pReportInfo;

	return(((pReportInfo = (!FindReportInfo(FALSE)) ? FindReportInfo() : (CTelemetryReportInfo *)NULL)) ? CheckReportInfo(pReportInfo) : FALSE);
}
BOOL CTelemetryReportsDialog::CheckReportInfo(CONST CTelemetryReportInfo *pReportInfo) CONST
{
	return((!pReportInfo->GetName().IsEmpty() && !pReportInfo->GetOutputFileName().IsEmpty()) ? TRUE : FALSE);
}

CTelemetryReportInfo *CTelemetryReportsDialog::FindReportInfo(BOOL bAny) CONST
{
	CString  szReport;
	CTelemetryReportInfo  *pReportInfo;

	GetDlgItem(IDC_TELEMETRYREPORTS_NAME)->GetWindowText(szReport);
	return(((pReportInfo = m_pReports[0].GetAt(m_pReports[0].Find(szReport))) || (pReportInfo = (bAny) ? m_pReportInfo : (CTelemetryReportInfo *)NULL)) ? pReportInfo : (CTelemetryReportInfo *)NULL);
}

VOID CTelemetryReportsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYREPORTS_NAME, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE)));
	AccessControl(IDC_TELEMETRYREPORTS_DISABLED, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_PROPERTIES_KEEPALLFILES, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_PROPERTIES_OUTPUTFILENAME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_INTERVAL, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_TIME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY_TIME, bCheck);
}

BOOL CTelemetryReportsDialog::IsModified() CONST
{
	return((!m_pReports[0].Compare(&m_pReports[1])) ? TRUE : FALSE);
}

BOOL CTelemetryReportsDialog::Check(BOOL bModified) CONST
{
	INT  nReport;
	INT  nReports;
	CTelemetryReportInfo  *pReportInfo;

	for (nReport = 0, nReports = (INT)m_pReports[0].GetSize(); nReport < nReports; nReport++)
	{
		if ((pReportInfo = m_pReports[0].GetAt(nReport)) && !CheckReportInfo(pReportInfo)) break;
		continue;
	}
	return((nReport == nReports) ? (!bModified || IsModified()) : FALSE);
}

void CTelemetryReportsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryReportsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryReportsDialog::PostNcDestroy()
{
	delete m_pReportInfo;
	m_pAlerts.RemoveAll();
	m_pEvents.RemoveAll();
	m_pScripts.RemoveAll();
	m_pReports[0].RemoveAll();
	m_pReports[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryReportsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryReportsDialog)
	ON_WM_CREATE()
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_ADD, OnAddReport)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_REMOVE, OnRemoveReport)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_REMOVEALL, OnRemoveAllReports)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_ABORT, OnAbortReports)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_DISABLED, OnDisableReport)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS, OnTelemetryEvents)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ADD, OnAddTelemetryEvent)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_REMOVE, OnRemoveTelemetryEvent)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_REMOVEALL, OnRemoveAllTelemetryEvents)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS, OnSystemAlerts)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ADD, OnAddSystemAlert)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_REMOVE, OnRemoveSystemAlert)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_REMOVEALL, OnRemoveAllSystemAlerts)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_FILETRIGGERS, OnTriggerReportByFiles)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_SCHEDULE, OnScheduleReport)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_KEEPALLFILES, OnKeepAllFiles)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME_BROWSE, OnBrowseInputFileName)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_OUTPUTFILENAME_BROWSE, OnBrowseOutputFileName)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_FTP, OnAddFTPRecipient)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_ADD, OnAddMailRecipient)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_REMOVE, OnRemoveRecipient)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY, OnMailDaily)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY, OnMailWeekly)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TELEMETRYREPORTS_NAME, OnEditchangeReport)
	ON_CBN_SELCHANGE(IDC_TELEMETRYREPORTS_NAME, OnSelchangeReport)
	ON_CBN_SELCHANGE(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST, OnSelchangeTelemetryEvent)
	ON_CBN_SELCHANGE(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST, OnSelchangeSystemAlert)
	ON_CBN_SELCHANGE(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, OnSelchangeScript)
	ON_LBN_SELCHANGE(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, OnSelchangeActiveTelemetryEvent)
	ON_LBN_SELCHANGE(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, OnSelchangeActiveSystemAlert)
	ON_LBN_SELCHANGE(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, OnSelchangeMailRecipient)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_INTERVAL, OnSpinchangeDailyInterval)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_TIME, OnSpinchangeDailyTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY_TIME, OnSpinchangeWeeklyTime)
	ON_EN_CHANGE(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME, OnEditchangeInputFileName)
	ON_EN_CHANGE(IDC_TELEMETRYREPORTS_PROPERTIES_OUTPUTFILENAME, OnEditchangeOutputFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsDialog message handlers

int CTelemetryReportsDialog::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	for (; CLocaleDialog::OnCreate(lpCreateStruct) != -1; )
	{
		if ((m_pReportInfo = new CTelemetryReportInfo)) return 0;
		break;
	}
	return -1;
}

BOOL CTelemetryReportsDialog::OnInitDialog()
{
	CTelemetryReports  pReports;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	if (EnumReports() && EnumTelemetryEvents() && EnumSystemAlerts() && EnumScripts())
	{
		Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_INTERVAL), TELEMETRYREPORTSDIALOG_MINIMUMDAYS, TELEMETRYREPORTSDIALOG_MAXIMUMDAYS);
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY_TIME), CTimeKey(SECONDSPERHOUR*(CTime::GetCurrentTime().GetTime() / SECONDSPERHOUR)));
		GetDlgItem(IDC_TELEMETRYREPORTS_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_NAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_NAME)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow((CheckReportInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_NAME, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_NAME, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_ABORT)->EnableWindow((GetTelemetryReportsService()->EnumReports(pReports) > 0 && pReports.GetSize() > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_DISABLED)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TRACK_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_FILETRIGGERS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SCHEDULE)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_KEEPALLFILES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCURSEL) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCURSEL) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME_BROWSE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCURSEL) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_OUTPUTFILENAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_OUTPUTFILENAME)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_OUTPUTFILENAME_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		ShowReportInfo();
	}
	AdjustToPrivileges();
	return TRUE;
}

void CTelemetryReportsDialog::OnAddReport()
{
	INT  nIndex;
	CString  szReport;
	CTelemetryReportInfo  *pReportInfo;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELEMETRYREPORTS_NAME)->GetWindowText(szReport);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szReport)) >= 0)
	{
		if ((pReportInfo = new CTelemetryReportInfo))
		{
			pReportInfo->Copy(m_pReportInfo);
			m_pReports[0].Add(pReportInfo);
		}
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_NAME, CB_SETCURSEL, nIndex);
		ShowReportInfo();
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
	GetDlgItem(IDC_TELEMETRYREPORTS_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
	GetDlgItem(IDC_TELEMETRYREPORTS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnRemoveReport()
{
	INT  nIndex;
	CString  szReport;
	CStringArray  szAlerts;
	CStringArray  szEvents;
	CStringArray  szRecipients;
	CTelemetryReportInfo  *pReportInfo;
	CTelemetryReportFTPRecipients  pRecipients;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELEMETRYREPORTS_NAME)->GetWindowText(szReport);
	if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szReport)) >= 0)
	{
		if ((pReportInfo = m_pReports[0].GetAt((nIndex = m_pReports[0].Find(szReport)))))
		{
			if (m_pReports[0].GetSize() == 1)
			{
				m_pReportInfo->SetName(EMPTYSTRING);
				m_pReportInfo->SetEvents(szEvents);
				m_pReportInfo->SetAlerts(szAlerts);
				m_pReportInfo->SetScript(EMPTYSTRING);
				m_pReportInfo->SetInputFileName(EMPTYSTRING);
				m_pReportInfo->SetOutputFileName(EMPTYSTRING);
				m_pReportInfo->SetOptions(TELEMETRTREPORTINFO_OPTION_KEEPALLFILES | TELEMETRYREPORTINFO_OPTION_MAILWEEKLY);
				m_pReportInfo->SetMailTime(SECONDSPERHOUR*(CTime::GetCurrentTime().GetTime() / SECONDSPERHOUR));
				m_pReportInfo->SetMailTimeInterval(SECONDSPERWEEK);
				m_pReportInfo->SetMailRecipients(szRecipients);
				m_pReportInfo->SetMailRecipients(pRecipients);
			}
			m_pReports[0].RemoveAt(nIndex);
			delete pReportInfo;
		}
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_NAME, CB_SETCURSEL);
		ShowReportInfo();
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_NAME, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_NAME, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnRemoveAllReports()
{
	CStringArray  szAlerts;
	CStringArray  szEvents;
	CStringArray  szRecipients;
	CTelemetryReportFTPRecipients  pRecipients;
	CHourglassCursor  cCursor;

	if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_NAME, CB_RESETCONTENT))
	{
		m_pReportInfo->SetName(EMPTYSTRING);
		m_pReportInfo->SetEvents(szEvents);
		m_pReportInfo->SetAlerts(szAlerts);
		m_pReportInfo->SetScript(EMPTYSTRING);
		m_pReportInfo->SetInputFileName(EMPTYSTRING);
		m_pReportInfo->SetOutputFileName(EMPTYSTRING);
		m_pReportInfo->SetOptions(TELEMETRTREPORTINFO_OPTION_KEEPALLFILES | TELEMETRYREPORTINFO_OPTION_MAILWEEKLY);
		m_pReportInfo->SetMailTime(SECONDSPERHOUR*(CTime::GetCurrentTime().GetTime() / SECONDSPERHOUR));
		m_pReportInfo->SetMailTimeInterval(SECONDSPERWEEK);
		m_pReportInfo->SetMailRecipients(szRecipients);
		m_pReportInfo->SetMailRecipients(pRecipients);
		m_pReports[0].RemoveAll();
		ShowReportInfo();
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnAbortReports()
{
	CTelemetryReports  pReports;
	CTelemetryReportsAbortDialog  cAbortDialog(this);

	for (; cAbortDialog.DoModal() == IDOK; )
	{
		GetTelemetryReportsService()->Refresh(m_pReports[0]);
		break;
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_ABORT)->EnableWindow((GetTelemetryReportsService()->EnumReports(pReports) > 0 && pReports.GetSize() > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnDisableReport()
{
	UINT  nOptions;
	CTelemetryReportInfo  *pReportInfo;

	if ((pReportInfo = FindReportInfo()))
	{
		nOptions = pReportInfo->GetOptions() & ~TELEMETRYREPORTINFO_OPTION_DISABLED;
		pReportInfo->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_DISABLED)) ? (nOptions | TELEMETRYREPORTINFO_OPTION_DISABLED) : nOptions);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnTelemetryEvents()
{
	CStringArray  szEvents;
	CTelemetryReportInfo  *pReportInfo;

	if (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS))
	{
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS, TRUE);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST, CB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
	}
	else
	{
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS, FALSE);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST, CB_SETCURSEL, (WPARAM)-1);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_RESETCONTENT);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_REMOVEALL)->EnableWindow(FALSE);
	}
	if ((pReportInfo = (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS)) ? FindReportInfo() : (CTelemetryReportInfo *)NULL))
	{
		for (; pReportInfo->GetEvents(szEvents) > 0; )
		{
			szEvents.RemoveAll();
			break;
		}
		pReportInfo->SetEvents(szEvents);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnAddTelemetryEvent()
{
	INT  nIndex[2];
	CString  szEvent;
	CStringArray  szEvents;
	CTelemetryReportInfo  *pReportInfo;
	CHourglassCursor  cCursor;

	if ((nIndex[0] = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST, CB_GETCURSEL)) >= 0)
	{
		if ((nIndex[1] = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)(szEvent = Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST), nIndex[0])))) >= 0)
		{
			if ((pReportInfo = FindReportInfo()) && pReportInfo->GetEvents(szEvents) >= 0)
			{
				szEvents.InsertAt(nIndex[1], szEvent);
				pReportInfo->SetEvents(szEvents);
			}
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_SETCURSEL, nIndex[1]);
			GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ADD)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
			GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
			GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST)->SetFocus();
		}
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow((CheckReportInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnRemoveTelemetryEvent()
{
	INT  nIndex;
	CStringArray  szEvents;
	CTelemetryReportInfo  *pReportInfo;
	CHourglassCursor  cCursor;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_GETCURSEL)) >= 0)
	{
		if ((pReportInfo = FindReportInfo()) && pReportInfo->GetEvents(szEvents) > nIndex)
		{
			szEvents.RemoveAt(nIndex);
			pReportInfo->SetEvents(szEvents);
		}
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_DELETESTRING, nIndex);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST), (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST, CB_GETCURSEL))) < 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST)->SetFocus();
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow((CheckReportInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnRemoveAllTelemetryEvents()
{
	CStringArray  szEvents;
	CTelemetryReportInfo  *pReportInfo;
	CHourglassCursor  cCursor;

	for (; (pReportInfo = FindReportInfo()); )
	{
		pReportInfo->SetEvents(szEvents);
		break;
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow((CheckReportInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnSystemAlerts()
{
	CStringArray  szAlerts;
	CTelemetryReportInfo  *pReportInfo;

	if (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS))
	{
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS, TRUE);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST, CB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
	}
	else
	{
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS, FALSE);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST, CB_SETCURSEL, (WPARAM)-1);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_RESETCONTENT);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_REMOVEALL)->EnableWindow(FALSE);
	}
	if ((pReportInfo = (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS)) ? FindReportInfo() : (CTelemetryReportInfo *)NULL))
	{
		for (; pReportInfo->GetAlerts(szAlerts) > 0; )
		{
			szAlerts.RemoveAll();
			break;
		}
		pReportInfo->SetAlerts(szAlerts);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnAddSystemAlert()
{
	INT  nIndex[2];
	CString  szAlert;
	CStringArray  szAlerts;
	CTelemetryReportInfo  *pReportInfo;
	CHourglassCursor  cCursor;

	if ((nIndex[0] = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST, CB_GETCURSEL)) >= 0)
	{
		if ((nIndex[1] = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)(szAlert = Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST), nIndex[0])))) >= 0)
		{
			if ((pReportInfo = FindReportInfo()) && pReportInfo->GetAlerts(szAlerts) >= 0)
			{
				szAlerts.InsertAt(nIndex[1], szAlert);
				pReportInfo->SetAlerts(szAlerts);
			}
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_SETCURSEL, nIndex[1]);
			GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ADD)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
			GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
			GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST)->SetFocus();
		}
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow((CheckReportInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnRemoveSystemAlert()
{
	INT  nIndex;
	CStringArray  szAlerts;
	CTelemetryReportInfo  *pReportInfo;
	CHourglassCursor  cCursor;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_GETCURSEL)) >= 0)
	{
		if ((pReportInfo = FindReportInfo()) && pReportInfo->GetAlerts(szAlerts) > nIndex)
		{
			szAlerts.RemoveAt(nIndex);
			pReportInfo->SetAlerts(szAlerts);
		}
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_DELETESTRING, nIndex);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST), (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST, CB_GETCURSEL))) < 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST)->SetFocus();
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow((CheckReportInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnRemoveAllSystemAlerts()
{
	CStringArray  szAlerts;
	CTelemetryReportInfo  *pReportInfo;
	CHourglassCursor  cCursor;

	for (; (pReportInfo = FindReportInfo()); )
	{
		pReportInfo->SetAlerts(szAlerts);
		break;
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow((CheckReportInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnTriggerReportByFiles()
{
	CTelemetryReportInfo  *pReportInfo;
	CTelemetryReportsFileTriggersDialog  cFileTriggersDialog(this);

	for (; (pReportInfo = FindReportInfo()); )
	{
		cFileTriggersDialog.DoModal(pReportInfo);
		break;
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow((CheckReportInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnScheduleReport()
{
	CTelemetryReportInfo  *pReportInfo;
	CTelemetryReportsScheduleDialog  cScheduleDialog(this);

	for (; (pReportInfo = FindReportInfo()); )
	{
		cScheduleDialog.DoModal(pReportInfo);
		break;
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow((CheckReportInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnKeepAllFiles()
{
	UINT  nOptions;
	CTelemetryReportInfo  *pReportInfo;

	if ((pReportInfo = FindReportInfo()))
	{
		nOptions = pReportInfo->GetOptions();
		pReportInfo->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_PROPERTIES_KEEPALLFILES)) ? (nOptions | TELEMETRTREPORTINFO_OPTION_KEEPALLFILES) : (nOptions & ~TELEMETRTREPORTINFO_OPTION_KEEPALLFILES));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnBrowseInputFileName()
{
	CTelemetryReportInfo  *pReportInfo;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME, STRING(IDS_FILEBROWSEDIALOG_DELIMITEDFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DELIMITEDFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		if ((pReportInfo = FindReportInfo())) pReportInfo->SetInputFileName(cFileBrowseDialog.GetPathName());
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow((CheckReportInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnBrowseOutputFileName()
{
	INT  nIndex;
	UINT  nType;
	CAutomationScript  *pScript;
	CTelemetryReportInfo  *pReportInfo;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELEMETRYREPORTS_PROPERTIES_OUTPUTFILENAME, ((pScript = ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCURSEL)) > 0) ? m_pScripts.GetAt(nIndex - 1) : (CAutomationScript *)NULL)) ? (((nType = pScript->GetType()) == AUTOMATIONSCRIPT_TYPE_EXCEL) ? STRING(IDS_FILEBROWSEDIALOG_EXCELFILEEXTENSION) : ((nType == AUTOMATIONSCRIPT_TYPE_WORD) ? STRING(IDS_FILEBROWSEDIALOG_WORDFILEEXTENSION) : ((nType == AUTOMATIONSCRIPT_TYPE_ACCESS) ? STRING(IDS_FILEBROWSEDIALOG_ACCESSFILEEXTENSION) : ((nType == AUTOMATIONSCRIPT_TYPE_OUTLOOK) ? STRING(IDS_FILEBROWSEDIALOG_OUTLOOKFILEEXTENSION) : ((nType == AUTOMATIONSCRIPT_TYPE_POWERPOINT) ? STRING(IDS_FILEBROWSEDIALOG_POWERPOINTFILEEXTENSION) : STRING(IDS_FILEBROWSEDIALOG_TEXTFILEEXTENSION)))))) : STRING(IDS_FILEBROWSEDIALOG_TEXTFILEEXTENSION), ((pScript = ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCURSEL)) > 0) ? m_pScripts.GetAt(nIndex - 1) : (CAutomationScript *)NULL)) ? (((nType = pScript->GetType()) == AUTOMATIONSCRIPT_TYPE_EXCEL) ? STRING(IDS_FILEBROWSEDIALOG_EXCELFILEFILTER) : ((nType == AUTOMATIONSCRIPT_TYPE_WORD) ? STRING(IDS_FILEBROWSEDIALOG_WORDFILEFILTER) : ((nType == AUTOMATIONSCRIPT_TYPE_ACCESS) ? STRING(IDS_FILEBROWSEDIALOG_ACCESSFILEFILTER) : ((nType == AUTOMATIONSCRIPT_TYPE_OUTLOOK) ? STRING(IDS_FILEBROWSEDIALOG_OUTLOOKFILEFILTER) : ((nType == AUTOMATIONSCRIPT_TYPE_POWERPOINT) ? STRING(IDS_FILEBROWSEDIALOG_POWERPOINTFILEFILTER) : STRING(IDS_FILEBROWSEDIALOG_TEXTFILEFILTER)))))) : STRING(IDS_FILEBROWSEDIALOG_TEXTFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		if ((pReportInfo = FindReportInfo())) pReportInfo->SetOutputFileName(cFileBrowseDialog.GetPathName());
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_OUTPUTFILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_OUTPUTFILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow((CheckReportInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_OUTPUTFILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnAddFTPRecipient()
{
	BOOL  bRecipient;
	CString  szRecipient;
	CTelemetryReportInfo  *pReportInfo;
	CTelemetryReportFTPRecipients  pRecipients;
	CTelemetryReportFTPRecipientInfo  cRecipientInfo;
	CTelemetryReportFTPRecipientInfo  *pRecipientInfo;
	CTelemetryReportsFTPDialog  cFTPDialog(this);

	if (cFTPDialog.DoModal(&cRecipientInfo) == IDOK)
	{
		for (szRecipient.Format(STRING(IDS_TELEMETRYREPORTSDIALOG_MAILRECIPIENT_FORMAT), (LPCTSTR)cRecipientInfo.GetLocation(), (LPCTSTR)cRecipientInfo.GetUserName()), szRecipient = (cRecipientInfo.GetUserName().IsEmpty()) ? cRecipientInfo.GetLocation() : szRecipient, bRecipient = FALSE; SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szRecipient) < 0; )
		{
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szRecipient));
			bRecipient = TRUE;
			break;
		}
		for (; (pReportInfo = FindReportInfo()) && bRecipient; )
		{
			if ((pRecipientInfo = new CTelemetryReportFTPRecipientInfo(&cRecipientInfo)))
			{
				if (pReportInfo->GetMailRecipients(pRecipients) >= 0 && pRecipients.Add(pRecipientInfo) >= 0)
				{
					pReportInfo->SetMailRecipients(pRecipients);
					break;
				}
				delete pRecipientInfo;
			}
			break;
		}
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_FTP)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnAddMailRecipient()
{
	INT  nRecipient;
	INT  nRecipients;
	CStringArray  szRecipients[2];
	CUserProfiles  pRecipients[1];
	CUserProfileInfo  *pRecipientInfo;
	CTelemetryReportInfo  *pReportInfo;
	CUserAddressesDialog  cRecipientsDialog(this);

	if (cRecipientsDialog.DoModal(pRecipients[0]) == IDOK)
	{
		for (nRecipient = 0, nRecipients = (INT)pRecipients[0].GetSize(); nRecipient < nRecipients; nRecipient++)
		{
			if ((pRecipientInfo = (CUserProfileInfo *)pRecipients[0].GetAt(nRecipient)) != (CUserProfileInfo *)NULL)
			{
				if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pRecipientInfo->GetFullName()) < 0)
				{
					SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pRecipientInfo->GetFullName());
					szRecipients[0].Add(pRecipientInfo->GetFullName());
				}
			}
		}
		if ((pReportInfo = FindReportInfo()))
		{
			for (pReportInfo->GetMailRecipients(szRecipients[1]), szRecipients[1].Append(szRecipients[0]); TRUE; )
			{
				pReportInfo->SetMailRecipients(szRecipients[1]);
				break;
			}
		}
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_FTP)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnRemoveRecipient()
{
	INT  nIndex;
	INT  nRecipient;
	INT  nRecipients;
	CString  szRecipient[2];
	CStringArray  szRecipients;
	CTelemetryReportInfo  *pReportInfo;
	CTelemetryReportFTPRecipients  pRecipients;
	CHourglassCursor  cCursor;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_GETCURSEL)) >= 0)
	{
		for (szRecipient[0] = Listbox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST), nIndex); (pReportInfo = FindReportInfo()); )
		{
			for (nRecipient = 0, nRecipients = pReportInfo->GetMailRecipients(pRecipients); nRecipient < nRecipients; nRecipient = nRecipient + 1)
			{
				for (szRecipient[1].Format(STRING(IDS_TELEMETRYREPORTSDIALOG_MAILRECIPIENT_FORMAT), (LPCTSTR)pRecipients.GetAt(nRecipient)->GetLocation(), (LPCTSTR)pRecipients.GetAt(nRecipient)->GetUserName()), szRecipient[1] = (pRecipients.GetAt(nRecipient)->GetUserName().IsEmpty()) ? pRecipients.GetAt(nRecipient)->GetLocation() : szRecipient[1]; szRecipient[0] == szRecipient[1]; )
				{
					delete pRecipients.GetAt(nRecipient);
					pRecipients.RemoveAt(nRecipient);
					nRecipients--;
					nRecipient--;
					break;
				}
				if (szRecipient[0] == szRecipient[1])
				{
					pReportInfo->SetMailRecipients(pRecipients);
					break;
				}
			}
			if (nRecipient == nRecipients)
			{
				for (nRecipient = 0, nRecipients = pReportInfo->GetMailRecipients(szRecipients); nRecipient < nRecipients; nRecipient++)
				{
					if (szRecipients.GetAt(nRecipient) == szRecipient[0])
					{
						szRecipients.RemoveAt(nRecipient);
						break;
					}
				}
				pReportInfo->SetMailRecipients(szRecipients);
			}
			break;
		}
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_DELETESTRING, nIndex);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_SETCURSEL, (SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_GETCOUNT) > 0) ? 0 : -1);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_FTP)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnMailDaily()
{
	CTimeKey  tTime;
	CTelemetryReportInfo  *pReportInfo;

	if (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY))
	{
		for (Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_INTERVAL), TELEMETRYREPORTSDIALOG_DEFAULTDAYS), Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_TIME), CTimeKey(SECONDSPERHOUR*(tTime.GetTime() / SECONDSPERHOUR))); (pReportInfo = FindReportInfo()); )
		{
			pReportInfo->SetOptions((pReportInfo->GetOptions() & ~TELEMETRYREPORTINFO_OPTION_MAILWEEKLY) | TELEMETRYREPORTINFO_OPTION_MAILDAILY);
			pReportInfo->SetMailTimeInterval(SECONDSPERDAY*TELEMETRYREPORTSDIALOG_DEFAULTDAYS);
			pReportInfo->SetMailTime(SECONDSPERHOUR*(tTime.GetTime() / SECONDSPERHOUR));
			break;
		}
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY, TRUE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY, FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_TIME)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_INTERVAL)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY_TIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_INTERVAL)->SetFocus();
	}
	else
	{
		if ((pReportInfo = FindReportInfo()))
		{
			pReportInfo->SetOptions(pReportInfo->GetOptions() & ~(TELEMETRYREPORTINFO_OPTION_MAILWEEKLY | TELEMETRYREPORTINFO_OPTION_MAILDAILY));
			pReportInfo->SetMailTimeInterval(0);
			pReportInfo->SetMailTime(0);
		}
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY, FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY, FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_TIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_INTERVAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY_TIME)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnMailWeekly()
{
	CTimeKey  tTime;
	CTelemetryReportInfo  *pReportInfo;

	if (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY))
	{
		for (Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY_TIME), CTimeKey(SECONDSPERHOUR*(tTime.GetTime() / SECONDSPERHOUR))); (pReportInfo = FindReportInfo()); )
		{
			pReportInfo->SetOptions((pReportInfo->GetOptions() & ~TELEMETRYREPORTINFO_OPTION_MAILDAILY) | TELEMETRYREPORTINFO_OPTION_MAILWEEKLY);
			pReportInfo->SetMailTime(SECONDSPERHOUR*(tTime.GetTime() / SECONDSPERHOUR));
			pReportInfo->SetMailTimeInterval(SECONDSPERWEEK);
			break;
		}
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY, FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY, TRUE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_TIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_INTERVAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY_TIME)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY_TIME)->SetFocus();
	}
	else
	{
		if ((pReportInfo = FindReportInfo()))
		{
			pReportInfo->SetOptions(pReportInfo->GetOptions() & ~(TELEMETRYREPORTINFO_OPTION_MAILDAILY | TELEMETRYREPORTINFO_OPTION_MAILWEEKLY));
			pReportInfo->SetMailTimeInterval(0);
			pReportInfo->SetMailTime(0);
		}
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY, FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY, FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_TIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_INTERVAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY_TIME)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnEditchangeReport()
{
	CString  szReport;
	CTelemetryReportInfo  *pReportInfo;

	if ((pReportInfo = FindReportInfo(FALSE)))
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYREPORTS_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		ShowReportInfo();
		return;
	}
	for (GetDlgItem(IDC_TELEMETRYREPORTS_NAME)->GetWindowText(szReport); (pReportInfo = FindReportInfo()); )
	{
		pReportInfo->SetName(szReport);
		break;
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow((CheckReportInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_REMOVEALL)->EnableWindow(FALSE);
}

void CTelemetryReportsDialog::OnEditchangeInputFileName()
{
	CString  szFileName;
	CTelemetryReportInfo  *pReportInfo;

	if ((pReportInfo = FindReportInfo()))
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME)->GetWindowText(szFileName);
		pReportInfo->SetInputFileName(szFileName);
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow((CheckReportInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnEditchangeOutputFileName()
{
	CString  szFileName;
	CTelemetryReportInfo  *pReportInfo;

	if ((pReportInfo = FindReportInfo()))
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_OUTPUTFILENAME)->GetWindowText(szFileName);
		pReportInfo->SetOutputFileName(szFileName);
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_ADD)->EnableWindow((CheckReportInfo()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnSelchangeReport()
{
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_NAME, CB_GETCURSEL));
	ShowReportInfo();
}

void CTelemetryReportsDialog::OnSelchangeTelemetryEvent()
{
	INT  nIndex;

	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ADD)->EnableWindow(((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST, CB_GETCURSEL)) >= 0 && SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_LIST), nIndex)) < 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
}

void CTelemetryReportsDialog::OnSelchangeActiveTelemetryEvent()
{
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_TELEMETRYEVENTS_ACTIVELIST, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
}

void CTelemetryReportsDialog::OnSelchangeSystemAlert()
{
	INT  nIndex;

	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ADD)->EnableWindow(((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST, CB_GETCURSEL)) >= 0 && SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_LIST), nIndex)) < 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
}

void CTelemetryReportsDialog::OnSelchangeActiveSystemAlert()
{
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SYSTEMALERTS_ACTIVELIST, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
}

void CTelemetryReportsDialog::OnSelchangeScript()
{
	INT  nIndex;
	CString  szScript;
	CString  szFileName;
	CAutomationScript  *pScript;
	CTelemetryReportInfo  *pReportInfo;

	for (GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT)->GetWindowText(szScript), GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME)->GetWindowText(szFileName); szScript == STRING(IDS_TELEMETRYREPORTSDIALOG_SCRIPT_NONE); )
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME)->SetWindowText(EMPTYSTRING);
		szFileName.Empty();
		break;
	}
	if ((pReportInfo = FindReportInfo()))
	{
		for (szScript.Empty(); (pScript = ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCURSEL)) > 0) ? m_pScripts.GetAt(nIndex - 1) : (CAutomationScript *)NULL); )
		{
			szScript = pScript->GetName();
			break;
		}
		pReportInfo->SetScript(szScript);
		pReportInfo->SetInputFileName(szFileName);
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCURSEL) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCURSEL) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_INPUTFILENAME_BROWSE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_SCRIPT, CB_GETCURSEL) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnSelchangeMailRecipient()
{
	GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_PROPERTIES_MAILLIST, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
}

void CTelemetryReportsDialog::OnSpinchangeDailyInterval()
{
	CTelemetryReportInfo  *pReportInfo;

	if ((pReportInfo = FindReportInfo())) pReportInfo->SetMailTimeInterval(SECONDSPERDAY*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_INTERVAL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnSpinchangeDailyTime()
{
	CTelemetryReportInfo  *pReportInfo;

	if ((pReportInfo = FindReportInfo())) pReportInfo->SetMailTime(Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_DAILY_TIME)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnSpinchangeWeeklyTime()
{
	CTelemetryReportInfo  *pReportInfo;

	if ((pReportInfo = FindReportInfo())) pReportInfo->SetMailTime(Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_PROPERTIES_MAIL_WEEKLY_TIME)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	SetTelemetryReports(m_pReports[0]);
	EndDialog(IDOK);
}

BOOL CTelemetryReportsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryReportsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsImportDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryReportsImportDialog, CLocaleDialog)

CTelemetryReportsImportDialog::CTelemetryReportsImportDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryReportsImportDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryReportsImportDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryReportsImportDialog::Initialize()
{
	GetTelemetryReports(m_pReports[0]);
	GetTelemetryHistoricalReports(m_pHistoricalReports[0]);
	return TRUE;
}

VOID CTelemetryReportsImportDialog::EnumReports()
{
	INT  nReport;
	INT  nReports;
	DWORD  cbData;
	CFileEx  cFile;
	CString  szMessage;
	CString  szFileName;
	CByteArray  nFileData;
	CTelemetryReportInfo  *pReportInfo;
	CTelemetryHistoricalReportInfo  *pHistoricalReportInfo;

	SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, CB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_FILENAME)->GetWindowText(szFileName);
	if (cFile.Open(szFileName, CFile::modeRead | CFile::shareExclusive))
	{
		nFileData.SetSize((cbData = (DWORD)cFile.GetLength()*sizeof(BYTE)));
		if (ReadFile(cFile.m_hFile, nFileData.GetData(), (DWORD)nFileData.GetSize(), &cbData, (LPOVERLAPPED)NULL))
		{
			for (nReport = 0, nReports = (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL) && m_pReports[1].Unmap(nFileData)) ? (INT)m_pReports[1].GetSize() : 0; nReport < nReports; nReport++)
			{
				if ((pReportInfo = (CTelemetryReportInfo *)m_pReports[1].GetAt(nReport)) != (CTelemetryReportInfo *)NULL)
				{
					SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, CB_INSERTSTRING, nReport, (LPARAM)(LPCTSTR)pReportInfo->GetName());
					continue;
				}
			}
			for (nReport = 0, nReports = (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL) && m_pHistoricalReports[1].Unmap(nFileData)) ? (INT)m_pHistoricalReports[1].GetSize() : 0; nReport < nReports; nReport++)
			{
				if ((pHistoricalReportInfo = (CTelemetryHistoricalReportInfo *)m_pHistoricalReports[1].GetAt(nReport)) != (CTelemetryHistoricalReportInfo *)NULL)
				{
					SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, CB_INSERTSTRING, nReport, (LPARAM)(LPCTSTR)pHistoricalReportInfo->GetName());
					continue;
				}
			}
		}
		else
		{
			szMessage = STRING(IDS_TELEMETRYREPORTS_IMPORT_FILE_FAILURE);
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
		}
		cFile.Close();
	}
	else
	{
		szMessage = STRING(IDS_TELEMETRYREPORTS_IMPORT_FILE_FAILURE);
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
	}
	if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, CB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY)->EnableWindow(FALSE);
}

BOOL CTelemetryReportsImportDialog::Check(BOOL bModified) CONST
{
	return(((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL) && m_pReports[2].GetSize() > 0) || (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL) && m_pHistoricalReports[2].GetSize() > 0)) ? TRUE : FALSE);
}

void CTelemetryReportsImportDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryReportsImportDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryReportsImportDialog::PostNcDestroy()
{
	m_pReports[0].RemoveAll();
	m_pReports[1].RemoveAll();
	m_pReports[2].RemoveAll();
	m_pHistoricalReports[0].RemoveAll();
	m_pHistoricalReports[1].RemoveAll();
	m_pHistoricalReports[2].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryReportsImportDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryReportsImportDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_IMPORT_BROWSE, OnBrowse)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_IMPORT_INSPECT, OnInspect)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_IMPORT_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_IMPORT_ADDALL, OnAddAll)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_IMPORT_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_IMPORT_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL, OnHistorical)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_IMPORT_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TELEMETRYREPORTS_IMPORT_FILENAME, OnEditchangeFileName)
	ON_CBN_SELCHANGE(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, OnSelchangeSource)
	ON_LBN_SELCHANGE(IDC_TELEMETRYREPORTS_IMPORT_LIST, OnSelchangeDestination)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsImportDialog message handlers

BOOL CTelemetryReportsImportDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_BROWSE)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADDALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION_TEXT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_FILENAME)->SetFocus();
	return FALSE;
}

void CTelemetryReportsImportDialog::OnBrowse()
{
	CString  szFileName;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELEMETRYREPORTS_IMPORT_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_FILENAME)->SetWindowText((szFileName = cFileBrowseDialog.GetPathName()));
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_BROWSE)->ShowWindow((szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_INSPECT)->ShowWindow((!szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_BROWSE)->EnableWindow((szFileName.IsEmpty()) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_INSPECT)->EnableWindow((!szFileName.IsEmpty()) ? TRUE : FALSE);
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_FILENAME)->SetFocus();
}

void CTelemetryReportsImportDialog::OnInspect()
{
	INT  nReport;
	INT  nReports;
	CString  szReport;
	CHourglassCursor  cCursor;

	EnumReports();
	for (nReport = 0, nReports = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, CB_GETCOUNT); nReport < nReports; nReport++)
	{
		if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY), nReport)) < 0) break;
		continue;
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY)->GetWindowText(szReport);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szReport) < 0 && !szReport.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADDALL)->EnableWindow((nReport < nReports) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY)->SetFocus();
}

void CTelemetryReportsImportDialog::OnAdd()
{
	INT  nReport;
	INT  nReports;
	CString  szReport;
	CTelemetryReportInfo  *pReportInfo[2];
	CTelemetryHistoricalReportInfo  *pHistoricalReportInfo[2];
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY)->GetWindowText(szReport);
	if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szReport) >= 0)
	{
		if ((pReportInfo[0] = (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL)) ? m_pReports[1].GetAt(m_pReports[1].Find(szReport)) : (CTelemetryReportInfo *)NULL))
		{
			if ((pReportInfo[1] = new CTelemetryReportInfo))
			{
				pReportInfo[1]->Copy(pReportInfo[0]);
				if (m_pReports[2].Add(pReportInfo[1]) < 0) delete pReportInfo[1];
			}
		}
		if ((pHistoricalReportInfo[0] = (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL)) ? m_pHistoricalReports[1].GetAt(m_pHistoricalReports[1].Find(szReport)) : (CTelemetryHistoricalReportInfo *)NULL))
		{
			if ((pHistoricalReportInfo[1] = new CTelemetryHistoricalReportInfo))
			{
				pHistoricalReportInfo[1]->Copy(pHistoricalReportInfo[0]);
				if (m_pHistoricalReports[2].Add(pHistoricalReportInfo[1]) < 0) delete pHistoricalReportInfo[1];
			}
		}
		for (nReport = 0, nReports = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_GETCOUNT); nReport < nReports; nReport++)
		{
			if (m_pReports[0].Find(Listbox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST), nReport)) >= 0) break;
			continue;
		}
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szReport));
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION)->ShowWindow((nReport < nReports) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION_TEXT)->ShowWindow((nReport < nReports) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION)->EnableWindow((nReport < nReports) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION_TEXT)->EnableWindow((nReport < nReports) ? TRUE : FALSE);
		for (nReport = 0, nReports = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, CB_GETCOUNT); nReport < nReports; nReport++)
		{
			if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY), nReport)) < 0) break;
			continue;
		}
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADDALL)->EnableWindow((nReport < nReports) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_REMOVE)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_REMOVEALL)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsImportDialog::OnAddAll()
{
	INT  nReport;
	INT  nReports;
	CString  szReport;
	CHourglassCursor  cCursor;

	for (nReport = 0, nReports = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, CB_GETCOUNT); nReport < nReports; nReport++)
	{
		if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szReport = Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY), nReport))) < 0)
		{
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szReport);
			continue;
		}
	}
	for (; !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL); )
	{
		m_pReports[2].Copy(&m_pReports[1]);
		break;
	}
	for (; IsDlgButtonChecked(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL); )
	{
		m_pHistoricalReports[2].Copy(&m_pHistoricalReports[1]);
		break;
	}
	for (nReport = 0, nReports = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_GETCOUNT); nReport < nReports; nReport++)
	{
		if (m_pReports[0].Find((szReport = Listbox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST), nReport))) >= 0) break;
		continue;
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION)->ShowWindow((nReport < nReports) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION_TEXT)->ShowWindow((nReport < nReports) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION)->EnableWindow((nReport < nReports) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION_TEXT)->EnableWindow((nReport < nReports) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADDALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsImportDialog::OnRemove()
{
	INT  nIndex;
	INT  nReport;
	INT  nReports;
	CString  szReport;
	CHourglassCursor  cCursor;

	if ((nIndex = (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL)) ? m_pReports[2].Find(Listbox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST), (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_GETCURSEL))) : -1) >= 0)
	{
		delete m_pReports[2].GetAt(nIndex);
		m_pReports[2].RemoveAt(nIndex);
	}
	if ((nIndex = (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL)) ? m_pHistoricalReports[2].Find(Listbox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST), (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_GETCURSEL))) : -1) >= 0)
	{
		delete m_pHistoricalReports[2].GetAt(nIndex);
		m_pHistoricalReports[2].RemoveAt(nIndex);
	}
	if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_GETCURSEL)) > 0)
	{
		for (nReport = 0, nReports = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_GETCOUNT); nReport < nReports; nReport++)
		{
			if (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL) && m_pReports[0].Find((szReport = Listbox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST), nReport))) >= 0) break;
			if (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL) && m_pHistoricalReports[0].Find((szReport = Listbox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST), nReport))) >= 0) break;
		}
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY)->GetWindowText(szReport);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION)->ShowWindow((nReport < nReports) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION_TEXT)->ShowWindow((nReport < nReports) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION)->EnableWindow((nReport < nReports) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION_TEXT)->EnableWindow((nReport < nReports) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szReport) < 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	}
	else
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION_TEXT)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION_TEXT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_REMOVEALL)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsImportDialog::OnRemoveAll()
{
	CHourglassCursor  cCursor;

	m_pReports[2].RemoveAll();
	m_pHistoricalReports[2].RemoveAll();
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION_TEXT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION_TEXT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsImportDialog::OnHistorical()
{
	EnumReports();
	m_pReports[2].RemoveAll();
	m_pHistoricalReports[2].RemoveAll();
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION_TEXT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ATTENTION_TEXT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsImportDialog::OnEditchangeFileName()
{
	CString  szFileName;

	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_FILENAME)->GetWindowText(szFileName);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_BROWSE)->ShowWindow((szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_INSPECT)->ShowWindow((!szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_BROWSE)->EnableWindow((szFileName.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_INSPECT)->EnableWindow((!szFileName.IsEmpty()) ? TRUE : FALSE);
}

void CTelemetryReportsImportDialog::OnSelchangeSource()
{
	CString  szReport;

	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_DIRECTORY)->GetWindowText(szReport);
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szReport) < 0) ? TRUE : FALSE);
}

void CTelemetryReportsImportDialog::OnSelchangeDestination()
{
	GetDlgItem(IDC_TELEMETRYREPORTS_IMPORT_REMOVE)->EnableWindow();
}

void CTelemetryReportsImportDialog::OnOK()
{
	INT  nIndex;
	INT  nReport;
	INT  nReports;
	CString  szReport;
	CString  szMessage;
	CTelemetryReports  pReports;
	CTelemetryReportInfo  *pReportInfo[2];
	CTelemetryHistoricalReports  pHistoricalReports;
	CTelemetryHistoricalReportInfo  *pHistoricalReportInfo[2];
	CHourglassCursor  cCursor;

	for (nReport = 0, nReports = (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL) && GetTelemetryReports(pReports)) ? (INT)m_pReports[2].GetSize() : 0; nReport < nReports; nReport++)
	{
		if ((pReportInfo[0] = m_pReports[2].GetAt(nReport)) != (CTelemetryReportInfo *)NULL)
		{
			if ((nIndex = pReports.Find((szReport = pReportInfo[0]->GetName()))) >= 0)
			{
				delete pReports.GetAt(nIndex);
				pReports.RemoveAt(nIndex);
			}
			if ((pReportInfo[1] = new CTelemetryReportInfo))
			{
				pReportInfo[1]->Copy(pReportInfo[0]);
				if (pReports.Add(pReportInfo[1]) < 0)
				{
					szMessage.Format(STRING(IDS_TELEMETRYREPORTS_IMPORT_FAILURE), (LPCTSTR)szReport);
					ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
					delete pReportInfo[1];
				}
			}
			else
			{
				szMessage.Format(STRING(IDS_TELEMETRYREPORTS_IMPORT_FAILURE), (LPCTSTR)szReport);
				ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
			}
		}
		if (nReport == nReports - 1)
		{
			SetTelemetryReports(pReports);
			continue;
		}
	}
	for (nReport = 0, nReports = (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_IMPORT_HISTORICAL) && GetTelemetryHistoricalReports(pHistoricalReports)) ? (INT)m_pHistoricalReports[2].GetSize() : 0; nReport < nReports; nReport++)
	{
		if ((pHistoricalReportInfo[0] = m_pHistoricalReports[2].GetAt(nReport)) != (CTelemetryHistoricalReportInfo *)NULL)
		{
			if ((nIndex = pHistoricalReports.Find((szReport = pHistoricalReportInfo[0]->GetName()))) >= 0)
			{
				delete pHistoricalReports.GetAt(nIndex);
				pHistoricalReports.RemoveAt(nIndex);
			}
			if ((pHistoricalReportInfo[1] = new CTelemetryHistoricalReportInfo))
			{
				pHistoricalReportInfo[1]->Copy(pHistoricalReportInfo[0]);
				if (pHistoricalReports.Add(pHistoricalReportInfo[1]) < 0)
				{
					szMessage.Format(STRING(IDS_TELEMETRYREPORTS_IMPORT_FAILURE), (LPCTSTR)szReport);
					ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
					delete pHistoricalReportInfo[1];
				}
			}
			else
			{
				szMessage.Format(STRING(IDS_TELEMETRYREPORTS_IMPORT_FAILURE), (LPCTSTR)szReport);
				ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
			}
		}
		if (nReport == nReports - 1)
		{
			SetTelemetryHistoricalReports(pHistoricalReports);
			continue;
		}
	}
	CLocaleDialog::OnOK();
}

BOOL CTelemetryReportsImportDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSIMPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryReportsImportDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSIMPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsExportDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryReportsExportDialog, CLocaleDialog)

CTelemetryReportsExportDialog::CTelemetryReportsExportDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryReportsExportDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryReportsExportDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryReportsExportDialog::Initialize()
{
	GetTelemetryReports(m_pReports[0]);
	GetTelemetryHistoricalReports(m_pHistoricalReports[0]);
	return TRUE;
}

BOOL CTelemetryReportsExportDialog::EnumReports()
{
	INT  nReport;
	INT  nReports;
	CTelemetryReportInfo  *pReportInfo;
	CTelemetryHistoricalReportInfo  *pHistoricalReportInfo;

	SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_RESETCONTENT);
	for (nReport = 0, nReports = (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL)) ? (INT)m_pReports[0].GetSize() : 0; nReport < nReports; nReport++)
	{
		if ((pReportInfo = (CTelemetryReportInfo *)m_pReports[0].GetAt(nReport)) != (CTelemetryReportInfo *)NULL)
		{
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pReportInfo->GetName());
			continue;
		}
	}
	for (nReport = 0, nReports = (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL)) ? (INT)m_pHistoricalReports[0].GetSize() : 0; nReport < nReports; nReport++)
	{
		if ((pHistoricalReportInfo = (CTelemetryHistoricalReportInfo *)m_pHistoricalReports[0].GetAt(nReport)) != (CTelemetryHistoricalReportInfo *)NULL)
		{
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pHistoricalReportInfo->GetName());
			continue;
		}
	}
	if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL)->EnableWindow();
		return TRUE;
	}
	for (GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY_STATIC)->EnableWindow(FALSE), GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY)->EnableWindow(FALSE); m_pReports[0].GetSize() > 0 || m_pHistoricalReports[0].GetSize() > 0; )
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL)->EnableWindow();
		return TRUE;
	}
	CheckDlgButton(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL, FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL)->EnableWindow(FALSE);
	return FALSE;
}

BOOL CTelemetryReportsExportDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_FILENAME)->GetWindowTextLength() > 0 && ((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL) && m_pReports[1].GetSize() > 0) || (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL) && m_pHistoricalReports[1].GetSize() > 0))) ? TRUE : FALSE);
}

void CTelemetryReportsExportDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryReportsExportDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryReportsExportDialog::PostNcDestroy()
{
	m_pReports[0].RemoveAll();
	m_pReports[1].RemoveAll();
	m_pHistoricalReports[0].RemoveAll();
	m_pHistoricalReports[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryReportsExportDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryReportsExportDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_EXPORT_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_EXPORT_ADDALL, OnAddAll)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_EXPORT_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_EXPORT_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL, OnHistorical)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_EXPORT_BROWSE, OnBrowse)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_EXPORT_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TELEMETRYREPORTS_EXPORT_FILENAME, OnEditchangeFileName)
	ON_CBN_SELCHANGE(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, OnSelchangeSource)
	ON_LBN_SELCHANGE(IDC_TELEMETRYREPORTS_EXPORT_LIST, OnSelchangeDestination)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsExportDialog message handlers

BOOL CTelemetryReportsExportDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_ADD)->EnableWindow((EnumReports() && SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_BROWSE)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY)->SetFocus();
	return FALSE;
}

void CTelemetryReportsExportDialog::OnAdd()
{
	INT  nReport;
	INT  nReports;
	CString  szReport;
	CTelemetryReportInfo  *pReportInfo[2];
	CTelemetryHistoricalReportInfo  *pHistoricalReportInfo[2];
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY)->GetWindowText(szReport);
	if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szReport) >= 0)
	{
		if ((pReportInfo[0] = (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL)) ? m_pReports[0].GetAt(m_pReports[0].Find(szReport)) : (CTelemetryReportInfo *)NULL))
		{
			if ((pReportInfo[1] = new CTelemetryReportInfo))
			{
				pReportInfo[1]->Copy(pReportInfo[0]);
				if (m_pReports[1].Add(pReportInfo[1]) < 0) delete pReportInfo[1];
			}
		}
		if ((pHistoricalReportInfo[0] = (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL)) ? m_pHistoricalReports[0].GetAt(m_pHistoricalReports[0].Find(szReport)) : (CTelemetryHistoricalReportInfo *)NULL))
		{
			if ((pHistoricalReportInfo[1] = new CTelemetryHistoricalReportInfo))
			{
				pHistoricalReportInfo[1]->Copy(pHistoricalReportInfo[0]);
				if (m_pHistoricalReports[1].Add(pHistoricalReportInfo[1]) < 0) delete pHistoricalReportInfo[1];
			}
		}
		for (nReport = 0, nReports = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_GETCOUNT); nReport < nReports; nReport++)
		{
			if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY), nReport)) < 0) break;
			continue;
		}
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szReport));
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_ADDALL)->EnableWindow((nReport < nReports) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_LIST)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_REMOVE)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_REMOVEALL)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsExportDialog::OnAddAll()
{
	INT  nReport;
	INT  nReports;
	CString  szReport;
	CHourglassCursor  cCursor;

	for (nReport = 0, nReports = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_GETCOUNT); nReport < nReports; nReport++)
	{
		if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szReport = Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY), nReport))) < 0)
		{
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szReport);
			continue;
		}
	}
	for (; !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL); )
	{
		m_pReports[1].Copy(&m_pReports[0]);
		break;
	}
	for (; IsDlgButtonChecked(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL); )
	{
		m_pHistoricalReports[1].Copy(&m_pHistoricalReports[0]);
		break;
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_ADDALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsExportDialog::OnRemove()
{
	INT  nIndex;
	CString  szReport;
	CHourglassCursor  cCursor;

	if ((nIndex = (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL)) ? m_pReports[1].Find(Listbox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_LIST), (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_GETCURSEL))) : -1) >= 0)
	{
		delete m_pReports[1].GetAt(nIndex);
		m_pReports[1].RemoveAt(nIndex);
	}
	if ((nIndex = (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL)) ? m_pHistoricalReports[1].Find(Listbox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_LIST), (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_GETCURSEL))) : -1) >= 0)
	{
		delete m_pHistoricalReports[1].GetAt(nIndex);
		m_pHistoricalReports[1].RemoveAt(nIndex);
	}
	if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_GETCURSEL)) > 0)
	{
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY)->GetWindowText(szReport);
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szReport) < 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	}
	else
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_LIST_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_REMOVEALL)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsExportDialog::OnRemoveAll()
{
	CHourglassCursor  cCursor;

	m_pReports[1].RemoveAll();
	m_pHistoricalReports[1].RemoveAll();
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsExportDialog::OnHistorical()
{
	EnumReports();
	m_pReports[1].RemoveAll();
	m_pHistoricalReports[1].RemoveAll();
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsExportDialog::OnBrowse()
{
	CString  szFileName;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELEMETRYREPORTS_EXPORT_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		szFileName = cFileBrowseDialog.GetPathName();
		GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_FILENAME)->SetWindowText(szFileName);
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsExportDialog::OnEditchangeFileName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsExportDialog::OnSelchangeSource()
{
	CString  szReport;

	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_DIRECTORY)->GetWindowText(szReport);
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szReport) < 0) ? TRUE : FALSE);
}

void CTelemetryReportsExportDialog::OnSelchangeDestination()
{
	GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_REMOVE)->EnableWindow();
}

void CTelemetryReportsExportDialog::OnOK()
{
	DWORD  cbData;
	CFileEx  cFile;
	CString  szFileName;
	CByteArray  nFileData;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TELEMETRYREPORTS_EXPORT_FILENAME)->GetWindowText(szFileName); !szFileName.IsEmpty();)
	{
		if (cFile.Open(szFileName, CFile::modeCreate | CFile::modeReadWrite | CFile::shareExclusive))
		{
			ReportEvent((!WriteFile(cFile.m_hFile, nFileData.GetData(), ((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL) && m_pReports[1].Map(nFileData)) || (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_EXPORT_HISTORICAL) && m_pHistoricalReports[1].Map(nFileData))) ? (DWORD)nFileData.GetSize() : 0, &cbData, (LPOVERLAPPED)NULL) || !cbData) ? (EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR) : 0, STRING(IDS_TELEMETRYREPORTS_EXPORT_FILE_FAILURE));
			cFile.Close();
			break;
		}
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TELEMETRYREPORTS_EXPORT_FILE_FAILURE));
		break;
	}
	CLocaleDialog::OnOK();
}

BOOL CTelemetryReportsExportDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSEXPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryReportsExportDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSEXPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsHistoricalRangePage property page

IMPLEMENT_DYNCREATE(CTelemetryReportsHistoricalRangePage, CLocalePropertyPage)

CTelemetryReportsHistoricalRangePage::CTelemetryReportsHistoricalRangePage() : CLocalePropertyPage(CTelemetryReportsHistoricalRangePage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryReportsHistoricalRangePage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryReportsHistoricalRangePage::SetInfo(CONST CTelemetryHistoricalReportInfo *pHistoricalReportInfo, CONST CTelemetryHistoricalReportInfo *pBackupHistoricalReportInfo, BOOL bUpdate)
{
	for (m_cInfo[0].Copy(pHistoricalReportInfo); pBackupHistoricalReportInfo != (CONST CTelemetryHistoricalReportInfo *) NULL; )
	{
		m_cInfo[1].Copy(pBackupHistoricalReportInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()) && bUpdate)
	{
		ShowRangeInfo();
		return;
	}
}

VOID CTelemetryReportsHistoricalRangePage::GetInfo(CTelemetryHistoricalReportInfo *pHistoricalReportInfo) CONST
{
	pHistoricalReportInfo->Copy(&m_cInfo[0]);
}

CTelemetryReportsHistoricalPageFolder *CTelemetryReportsHistoricalRangePage::GetParent() CONST
{
	return((CTelemetryReportsHistoricalPageFolder *)CLocalePropertyPage::GetParent());
}

VOID CTelemetryReportsHistoricalRangePage::ShowRangeInfo()
{
	UINT  nMode;
	CTimeKey  tTimeKey;
	CTimeKey  tRange[2];
	CTimeKey  tExecution[2];
	CTimeSpan  tDailyRange[2];
	CTimeSpan  tIntervalRange[3];
	CTimeSpan  tIntervalExecution;

	nMode = m_cInfo[0].GetTimeRangeMode();
	tIntervalRange[0] = m_cInfo[0].GetPeriodicalInterval();
	tIntervalRange[1] = m_cInfo[0].GetTriggeredInterval();
	tIntervalRange[2] = m_cInfo[0].GetRangeInterval();
	m_cInfo[0].GetTimeRange(tRange[0], tRange[1]);
	m_cInfo[0].GetDailyTimeRange(tDailyRange[0], tDailyRange[1]);
	m_cInfo[0].GetPeriodicalExecutionTime(tExecution[0], tIntervalExecution, tExecution[1]);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STARTTIME), (nMode == TELEMETRYHISTORICALREPORTINFO_RANGE_NORMAL) ? tRange[0] : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STOPTIME), (nMode == TELEMETRYHISTORICALREPORTINFO_RANGE_NORMAL) ? tRange[1] : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STARTTIME), (nMode == TELEMETRYHISTORICALREPORTINFO_RANGE_DAILY) ? CTimeKey(((tTimeKey = CTime::GetCurrentTime().GetTime()).GetTime() / SECONDSPERDAY)*SECONDSPERDAY + tDailyRange[0].GetTotalSeconds()) : ((tTimeKey = CTime::GetCurrentTime().GetTime())));
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STOPTIME), CTimeKey((tTimeKey.GetTime() / SECONDSPERDAY)*SECONDSPERDAY + tDailyRange[1].GetTotalSeconds()));
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES), tIntervalRange[0].GetTotalSeconds() / SECONDSPERMINUTE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES), tIntervalRange[1].GetTotalSeconds() / SECONDSPERMINUTE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL_MINUTES), tIntervalRange[2].GetTotalSeconds() / SECONDSPERMINUTE);
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_SETCURSEL, (nMode == TELEMETRYHISTORICALREPORTINFO_RANGE_TRIGGEREDINTERVAL) ? (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_BEFOREEVENT)) : (WPARAM)-1);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD, (nMode == TELEMETRYHISTORICALREPORTINFO_RANGE_NORMAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD, (nMode == TELEMETRYHISTORICALREPORTINFO_RANGE_DAILY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL, (nMode == TELEMETRYHISTORICALREPORTINFO_RANGE_COMPLETEINTERVAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART, (nMode == TELEMETRYHISTORICALREPORTINFO_RANGE_PARTIALINTERVAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER, (nMode == TELEMETRYHISTORICALREPORTINFO_RANGE_TRIGGEREDINTERVAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL, (tIntervalRange[2].GetTotalSeconds() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_EXTRACT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_PREFIX_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_SUFFIX_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL_MINUTES)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL));
}

VOID CTelemetryReportsHistoricalRangePage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE)));
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STARTTIME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STOPTIME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STARTTIME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STOPTIME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL_MINUTES, bCheck);
}

BOOL CTelemetryReportsHistoricalRangePage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cInfo[0].Compare(&m_cInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTelemetryReportsHistoricalRangePage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CTelemetryReportsHistoricalRangePage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryReportsHistoricalRangePage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelemetryReportsHistoricalRangePage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryReportsHistoricalRangePage)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD, OnTimeRange)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD, OnDailyTimeRange)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL, OnPeriodicalRange)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART, OnPeriodicalPartialRange)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER, OnTriggeredRange)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL, OnRangeInterval)
	ON_CBN_SELCHANGE(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, OnSelchangeTriggerReference)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STARTTIME, OnSpinchangeStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STOPTIME, OnSpinchangeStopTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STARTTIME, OnSpinchangeDailyStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STOPTIME, OnSpinchangeDailyStopTime)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES, OnSpinchangePeriodicalInterval)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES, OnSpinchangeTriggeredInterval)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL_MINUTES, OnSpinchangeRangeInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsHistoricalRangePage message handlers

BOOL CTelemetryReportsHistoricalRangePage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES), TELEMETRYREPORTSRANGE_MINIMUMINTERVAL, TELEMETRYREPORTSRANGE_MAXIMUMINTERVAL);
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES), TELEMETRYREPORTSRANGE_MINIMUMINTERVAL, TELEMETRYREPORTSRANGE_MAXIMUMINTERVAL);
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL_MINUTES), TELEMETRYREPORTSRANGE_MINIMUMINTERVAL, TELEMETRYREPORTSRANGE_MAXIMUMINTERVAL);
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_BEFOREEVENT));
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_AFTEREVENT));
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTelemetryReportsHistoricalRangePage::OnSetActive()
{
	for (GetParent()->GetInfo(&m_cInfo[0]); GetParent()->IsWindowVisible(); )
	{
		ShowRangeInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CTelemetryReportsHistoricalRangePage::OnKillActive()
{
	GetParent()->SetInfo(&m_cInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CTelemetryReportsHistoricalRangePage::OnTimeRange()
{
	CTimeKey  tRange;

	m_cInfo[0].SetExecutionTime(0);
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTriggeredExecution(EMPTYSTRING);
	m_cInfo[0].SetTimeRangeMode((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD)) ? TELEMETRYHISTORICALREPORTINFO_RANGE_NORMAL : 0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD)) ? TELEMETRYHISTORICALREPORTINFO_EXECUTION_IMMEDIATELY : 0);
	m_cInfo[0].SetTimeRange((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD)) ? (tRange.GetTime() - SECONDSPERMINUTE*TELEMETRYREPORTSRANGE_DEFAULTINTERVAL) : 0, (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD)) ? tRange.GetTime() : 0);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STARTTIME), CTimeKey(tRange.GetTime() - SECONDSPERMINUTE*TELEMETRYREPORTSRANGE_DEFAULTINTERVAL));
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STOPTIME), tRange);
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD, !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD));
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER, FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_PREFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_SUFFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalRangePage::OnDailyTimeRange()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTriggeredExecution(EMPTYSTRING);
	m_cInfo[0].SetTimeRangeMode((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD)) ? TELEMETRYHISTORICALREPORTINFO_RANGE_DAILY : 0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD)) ? TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATDAILYTIME : 0);
	m_cInfo[0].SetDailyTimeRange((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD)) ? TELEMETRYREPORTSRANGE_DAILYSTARTTIME : 0, (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD)) ? TELEMETRYREPORTSRANGE_DAILYSTOPTIME : 0);
	m_cInfo[0].SetDailyExecutionTime((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD)) ? TELEMETRYREPORTSRANGE_DAILYSTOPTIME : 0);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STARTTIME), CTimeKey((CTime::GetCurrentTime().GetTime() / SECONDSPERDAY)*SECONDSPERDAY + TELEMETRYREPORTSRANGE_DAILYSTARTTIME));
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STOPTIME), CTimeKey((CTime::GetCurrentTime().GetTime() / SECONDSPERDAY)*SECONDSPERDAY + TELEMETRYREPORTSRANGE_DAILYSTOPTIME));
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD, !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD));
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER, FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_PREFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_SUFFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalRangePage::OnPeriodicalRange()
{
	CTimeKey  tRange;

	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTriggeredExecution(EMPTYSTRING);
	m_cInfo[0].SetTimeRangeMode((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL)) ? TELEMETRYHISTORICALREPORTINFO_RANGE_COMPLETEINTERVAL : 0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL)) ? TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATINTERVAL : 0);
	m_cInfo[0].SetPeriodicalExecutionTime((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL)) ? tRange.GetTime() : 0, (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL)) ? (10 * TELEMETRYREPORTSRANGE_DEFAULTINTERVAL) : 0, (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL)) ? (tRange.GetTime() + 6 * 10 * TELEMETRYREPORTSRANGE_DEFAULTINTERVAL) : 0);
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL, !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL));
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER, FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_PREFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_SUFFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalRangePage::OnPeriodicalPartialRange()
{
	CTimeKey  tRange;

	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTriggeredExecution(EMPTYSTRING);
	m_cInfo[0].SetTimeRangeMode((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART)) ? TELEMETRYHISTORICALREPORTINFO_RANGE_PARTIALINTERVAL : 0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART)) ? TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATINTERVAL : 0);
	m_cInfo[0].SetPeriodicalInterval((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART)) ? (10 * TELEMETRYREPORTSRANGE_DEFAULTINTERVAL) : 0);
	m_cInfo[0].SetPeriodicalExecutionTime((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART)) ? tRange.GetTime() : 0, (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART)) ? (10 * TELEMETRYREPORTSRANGE_DEFAULTINTERVAL) : 0, (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART)) ? (tRange.GetTime() + 6 * 10 * TELEMETRYREPORTSRANGE_DEFAULTINTERVAL) : 0);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES), (10 * TELEMETRYREPORTSRANGE_DEFAULTINTERVAL) / SECONDSPERMINUTE);
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART, !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART));
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER, FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_PREFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_SUFFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalRangePage::OnTriggeredRange()
{
	for (m_cInfo[0].SetExecutionCycle(0); !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER); )
	{
		m_cInfo[0].SetTimeRangeMode(TELEMETRYHISTORICALREPORTINFO_RANGE_TRIGGEREDINTERVAL);
		m_cInfo[0].SetExecutionMode(TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATEVENT);
		m_cInfo[0].SetTriggeredInterval(SECONDSPERMINUTE*TELEMETRYREPORTSRANGE_DEFAULTINTERVAL, TRUE);
		m_cInfo[0].SetTriggeredInterval(0, FALSE);
		break;
	}
	if (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER))
	{
		m_cInfo[0].SetTimeRangeMode(0);
		m_cInfo[0].SetExecutionMode(0);
		m_cInfo[0].SetTriggeredInterval(0, TRUE);
		m_cInfo[0].SetTriggeredInterval(0, FALSE);
	}
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES), TELEMETRYREPORTSRANGE_DEFAULTINTERVAL);
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_SETCURSEL, (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER)) ? (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_BEFOREEVENT)) : (WPARAM)-1);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_ALL, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER, !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_PREFIX_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_SUFFIX_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalRangePage::OnRangeInterval()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetRangeInterval((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL)) ? (SECONDSPERMINUTE*TELEMETRYREPORTSRANGE_DEFAULTINTERVAL) : 0);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL_MINUTES), TELEMETRYREPORTSRANGE_DEFAULTINTERVAL);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL_MINUTES)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL_MINUTES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalRangePage::OnSelchangeTriggerReference()
{
	CTimeSpan  tInterval;

	tInterval = m_cInfo[0].GetTriggeredInterval((Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE), (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_GETCURSEL)) == STRING(IDS_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_BEFOREEVENT)) ? TRUE : FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES), tInterval.GetTotalSeconds() / SECONDSPERMINUTE);
}

void CTelemetryReportsHistoricalRangePage::OnSpinchangeStartTime()
{
	UINT  nMode;
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STOPTIME)), Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STOPTIME), (tTime[1] = (tTime[0] > tTime[1]) ? tTime[0] : tTime[1])); ((nMode = m_cInfo[0].GetExecutionMode()) == TELEMETRYHISTORICALREPORTINFO_EXECUTION_IMMEDIATELY && tTime[1] > CTime::GetCurrentTime().GetTime()) || (nMode == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATTIME && tTime[1] > m_cInfo[0].GetExecutionTime().GetTime()); )
	{
		m_cInfo[0].SetExecutionMode(TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATTIME);
		m_cInfo[0].SetExecutionTime(tTime[1]);
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTimeRange(tTime[0], tTime[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalRangePage::OnSpinchangeStopTime()
{
	UINT  nMode;
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STOPTIME)), Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TIMEPERIOD_STARTTIME), (tTime[0] = (tTime[0] <= tTime[1]) ? tTime[0] : tTime[1])); ((nMode = m_cInfo[0].GetExecutionMode()) == TELEMETRYHISTORICALREPORTINFO_EXECUTION_IMMEDIATELY && tTime[1] > CTime::GetCurrentTime().GetTime()) || (nMode == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATTIME && tTime[1] > m_cInfo[0].GetExecutionTime().GetTime()); )
	{
		m_cInfo[0].SetExecutionMode(TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATTIME);
		m_cInfo[0].SetExecutionTime(tTime[1]);
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTimeRange(tTime[0], tTime[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalRangePage::OnSpinchangeDailyStartTime()
{
	UINT  nMode;
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STOPTIME)); (nMode = m_cInfo[0].GetExecutionMode()) == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATDAILYTIME && (((tTime[0] = tTime[0].GetTime() % SECONDSPERDAY) <= (tTime[1] = tTime[1].GetTime() % SECONDSPERDAY) && tTime[0] <= m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds() && tTime[1] > m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds()) || (tTime[0] > tTime[1] && (tTime[0] <= m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds() || tTime[1] > m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds()))); )
	{
		m_cInfo[0].SetExecutionMode(TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATDAILYTIME);
		m_cInfo[0].SetDailyExecutionTime(tTime[1].GetTime());
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetDailyTimeRange(tTime[0].GetTime() % SECONDSPERDAY, tTime[1].GetTime() % SECONDSPERDAY);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalRangePage::OnSpinchangeDailyStopTime()
{
	UINT  nMode;
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_DAILYPERIOD_STOPTIME)); (nMode = m_cInfo[0].GetExecutionMode()) == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATDAILYTIME && (((tTime[0] = tTime[0].GetTime() % SECONDSPERDAY) <= (tTime[1] = tTime[1].GetTime() % SECONDSPERDAY) && tTime[0] <= m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds() && tTime[1] > m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds()) || (tTime[0] > tTime[1] && (tTime[0] <= m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds() || tTime[1] > m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds()))); )
	{
		m_cInfo[0].SetExecutionMode(TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATDAILYTIME);
		m_cInfo[0].SetDailyExecutionTime(tTime[1].GetTime());
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetDailyTimeRange(tTime[0].GetTime() % SECONDSPERDAY, tTime[1].GetTime() % SECONDSPERDAY);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalRangePage::OnSpinchangePeriodicalInterval()
{
	UINT  nMode;
	CTimeKey  tTime[2];
	CTimeSpan  tInterval[2];

	for (m_cInfo[0].GetPeriodicalExecutionTime(tTime[0], tInterval[0], tTime[1]), tInterval[1] = SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_PERIOD_PART_MINUTES)); (nMode = m_cInfo[0].GetExecutionMode()) == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATINTERVAL && tTime[0] + tInterval[1] > tTime[1]; )
	{
		m_cInfo[0].SetExecutionMode(TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATINTERVAL);
		m_cInfo[0].SetPeriodicalExecutionTime(tTime[0], tInterval[1], tTime[0].GetTime() + tInterval[1].GetTotalSeconds());
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetPeriodicalInterval(tInterval[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalRangePage::OnSpinchangeTriggeredInterval()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTriggeredInterval(SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES)), (Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE), (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_GETCURSEL)) == STRING(IDS_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_TRIGGER_BEFOREEVENT)) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalRangePage::OnSpinchangeRangeInterval()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetRangeInterval(SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_RANGEPAGE_INTERVAL_MINUTES)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsHistoricalExecutionPage property page

IMPLEMENT_DYNCREATE(CTelemetryReportsHistoricalExecutionPage, CLocalePropertyPage)

CTelemetryReportsHistoricalExecutionPage::CTelemetryReportsHistoricalExecutionPage() : CLocalePropertyPage(CTelemetryReportsHistoricalExecutionPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryReportsHistoricalExecutionPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryReportsHistoricalExecutionPage::SetInfo(CONST CTelemetryHistoricalReportInfo *pHistoricalReportInfo, CONST CTelemetryHistoricalReportInfo *pBackupHistoricalReportInfo, BOOL bUpdate)
{
	for (m_cInfo[0].Copy(pHistoricalReportInfo); pBackupHistoricalReportInfo != (CONST CTelemetryHistoricalReportInfo *) NULL; )
	{
		m_cInfo[1].Copy(pBackupHistoricalReportInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()) && bUpdate)
	{
		ShowExecutionInfo();
		return;
	}
}

VOID CTelemetryReportsHistoricalExecutionPage::GetInfo(CTelemetryHistoricalReportInfo *pHistoricalReportInfo) CONST
{
	pHistoricalReportInfo->Copy(&m_cInfo[0]);
}

CTelemetryReportsHistoricalPageFolder *CTelemetryReportsHistoricalExecutionPage::GetParent() CONST
{
	return((CTelemetryReportsHistoricalPageFolder *)CLocalePropertyPage::GetParent());
}

BOOL CTelemetryReportsHistoricalExecutionPage::EnumEvents()
{
	INT  nEvent;
	INT  nEvents;
	CTelemetryEvents  pEvents;
	CTelemetryEventInfo  *pEventInfo;

	for (nEvent = 0, nEvents = (GetTelemetryEvents(pEvents)) ? (INT)pEvents.GetSize() : 0; nEvent < nEvents; nEvent++)
	{
		if ((pEventInfo = pEvents.GetAt(nEvent))) SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pEventInfo->GetName());
		continue;
	}
	return((SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTelemetryReportsHistoricalExecutionPage::ShowExecutionInfo()
{
	UINT  nMode[2];
	CString  szEvent;
	CTimeKey  tRange[2];
	CTimeKey  tExecution;
	CTimeKey  tExecutionStartTime;
	CTimeKey  tExecutionStopTime;
	CTimeSpan  tExecutionInterval;
	CTimeSpan  tDailyExecution;
	CTimeSpan  tRangeInterval;

	nMode[0] = m_cInfo[0].GetTimeRangeMode();
	nMode[1] = m_cInfo[0].GetExecutionMode();
	tExecution = m_cInfo[0].GetExecutionTime();
	szEvent = m_cInfo[0].GetTriggeredExecution();
	tDailyExecution = m_cInfo[0].GetDailyExecutionTime();
	tRangeInterval = m_cInfo[0].GetPeriodicalInterval();
	m_cInfo[0].GetTimeRange(tRange[0], tRange[1]);
	m_cInfo[0].GetPeriodicalExecutionTime(tExecutionStartTime, tExecutionInterval, tExecutionStopTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE_TIME), (nMode[1] == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATTIME) ? tExecution : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY_TIME), (nMode[1] == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATDAILYTIME) ? CTimeKey((CTime::GetCurrentTime().GetTime() / SECONDSPERDAY)*SECONDSPERDAY + tDailyExecution.GetTotalSeconds()) : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME), (nMode[1] == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATINTERVAL) ? tExecutionStartTime : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME), (nMode[1] == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATINTERVAL) ? tExecutionStopTime : CTime::GetCurrentTime().GetTime());
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL), (nMode[1] == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATINTERVAL) ? max(tRangeInterval.GetTotalSeconds() / SECONDSPERMINUTE, TELEMETRYREPORTSEXECUTION_MINIMUMINTERVAL) : TELEMETRYREPORTSEXECUTION_MINIMUMINTERVAL, TELEMETRYREPORTSEXECUTION_MAXIMUMINTERVAL);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL), tExecutionInterval.GetTotalSeconds() / SECONDSPERMINUTE);
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT_NAME, CB_SETCURSEL, (nMode[1] == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATEVENT) ? (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEvent) : (WPARAM)-1);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_IMMEDIATELY, (nMode[1] == TELEMETRYHISTORICALREPORTINFO_EXECUTION_IMMEDIATELY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE, (nMode[1] == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATTIME) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY, (nMode[1] == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATDAILYTIME) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY, (nMode[1] == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATINTERVAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT, (nMode[1] == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATEVENT  &&  SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_STATIC)->EnableWindow((nMode[0] != 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_IMMEDIATELY)->EnableWindow((nMode[0] == TELEMETRYHISTORICALREPORTINFO_RANGE_NORMAL  &&  tRange[1] <= CTime::GetCurrentTime()) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE)->EnableWindow((nMode[0] == TELEMETRYHISTORICALREPORTINFO_RANGE_NORMAL) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY)->EnableWindow((nMode[0] == TELEMETRYHISTORICALREPORTINFO_RANGE_DAILY) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY)->EnableWindow((nMode[0] == TELEMETRYHISTORICALREPORTINFO_RANGE_COMPLETEINTERVAL || nMode[0] == TELEMETRYHISTORICALREPORTINFO_RANGE_PARTIALINTERVAL) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT)->EnableWindow((nMode[0] == TELEMETRYHISTORICALREPORTINFO_RANGE_TRIGGEREDINTERVAL  &&  SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT));
}

VOID CTelemetryReportsHistoricalExecutionPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_IMMEDIATELY, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE)));
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE_TIME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY_TIME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT_NAME, bCheck);
}

BOOL CTelemetryReportsHistoricalExecutionPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cInfo[0].Compare(&m_cInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTelemetryReportsHistoricalExecutionPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CTelemetryReportsHistoricalExecutionPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryReportsHistoricalExecutionPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelemetryReportsHistoricalExecutionPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryReportsHistoricalExecutionPage)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_IMMEDIATELY, OnExecutionNow)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE, OnExecutionAtTime)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY, OnExecutionAtDailyTime)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY, OnExecutionAtPeriodicalTime)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT, OnExecutionAtEvent)
	ON_CBN_SELCHANGE(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT_NAME, OnSelchangeExecutionEvent)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE_TIME, OnSpinchangeExecutionTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY_TIME, OnSpinchangeExecutionDailyTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME, OnSpinchangeExecutionPeriodicalStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME, OnSpinchangeExecutionPeriodicalStopTime)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL, OnSpinchangeExecutionPeriodicalInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsHistoricalExecutionPage message handlers

BOOL CTelemetryReportsHistoricalExecutionPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	EnumEvents();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTelemetryReportsHistoricalExecutionPage::OnSetActive()
{
	for (GetParent()->GetInfo(&m_cInfo[0]); GetParent()->IsWindowVisible(); )
	{
		ShowExecutionInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CTelemetryReportsHistoricalExecutionPage::OnKillActive()
{
	GetParent()->SetInfo(&m_cInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CTelemetryReportsHistoricalExecutionPage::OnExecutionNow()
{
	m_cInfo[0].SetExecutionTime(0);
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_IMMEDIATELY)) ? TELEMETRYHISTORICALREPORTINFO_EXECUTION_IMMEDIATELY : 0);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_IMMEDIATELY, !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_IMMEDIATELY));
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE, FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalExecutionPage::OnExecutionAtTime()
{
	CTimeKey  tRange[2];
	CTimeKey  tExecution;

	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].GetTimeRange(tRange[0], tRange[1]);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE)) ? TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATTIME : 0);
	m_cInfo[0].SetExecutionTime((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE)) ? max(tExecution, tRange[1]) : 0);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE_TIME), max(tExecution, tRange[1]));
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE, !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE));
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_IMMEDIATELY, FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalExecutionPage::OnExecutionAtDailyTime()
{
	CTimeSpan  tDailyRange[2];

	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].GetDailyTimeRange(tDailyRange[0], tDailyRange[1]);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY)) ? TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATDAILYTIME : 0);
	m_cInfo[0].SetDailyExecutionTime((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY)) ? tDailyRange[1].GetTotalSeconds() : 0);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY_TIME), CTimeKey((CTime::GetCurrentTime().GetTime() / SECONDSPERDAY)*SECONDSPERDAY + tDailyRange[1].GetTotalSeconds()));
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY, !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalExecutionPage::OnExecutionAtPeriodicalTime()
{
	UINT  nMode;
	CTimeKey  tTime;
	CTimeSpan  tInterval;

	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY)) ? TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATINTERVAL : 0);
	m_cInfo[0].SetPeriodicalExecutionTime((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY)) ? tTime.GetTime() : 0, (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY)) ? tInterval.GetTotalSeconds() : 0, (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY)) ? (tTime.GetTime() + (tInterval = ((nMode = m_cInfo[0].GetTimeRangeMode()) == TELEMETRYHISTORICALREPORTINFO_RANGE_COMPLETEINTERVAL) ? (10 * TELEMETRYREPORTSEXECUTION_DEFAULTINTERVAL) : m_cInfo[0].GetPeriodicalInterval().GetTotalSeconds()).GetTotalSeconds()) : 0);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL), (tInterval = ((nMode = m_cInfo[0].GetTimeRangeMode()) == TELEMETRYHISTORICALREPORTINFO_RANGE_COMPLETEINTERVAL) ? (10 * TELEMETRYREPORTSEXECUTION_DEFAULTINTERVAL) : m_cInfo[0].GetPeriodicalInterval().GetTotalSeconds()).GetTotalSeconds() / SECONDSPERMINUTE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME), tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME), CTimeKey(tTime.GetTime() + tInterval.GetTotalSeconds()));
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY, !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalExecutionPage::OnExecutionAtEvent()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT)) ? TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATEVENT : 0);
	m_cInfo[0].SetTriggeredExecution((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT)) ? Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT_NAME), 0) : EMPTYSTRING);
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT_NAME, CB_SETCURSEL, (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT)) ? 0 : -1);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT, !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalExecutionPage::OnSelchangeExecutionEvent()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTriggeredExecution(Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT_NAME), (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_EVENT_NAME, CB_GETCURSEL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalExecutionPage::OnSpinchangeExecutionTime()
{
	CTimeKey  tTime;
	CTimeKey  tRange[2];

	for (m_cInfo[0].GetTimeRange(tRange[0], tRange[1]), tTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE_TIME)); (tTime = (tTime < tRange[1].GetTime()) ? tRange[1].GetTime() : tTime) != tTime; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE_TIME), tTime);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_ONCE_TIME)->SetFocus();
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetExecutionTime(tTime);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalExecutionPage::OnSpinchangeExecutionDailyTime()
{
	CTimeKey  tTime;
	CTimeSpan  tDailyRange[2];
	CTimeSpan  tDailyExecution[2];

	for (tDailyExecution[0] = m_cInfo[0].GetDailyExecutionTime(), m_cInfo[0].GetDailyTimeRange(tDailyRange[0], tDailyRange[1]), tTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY_TIME)); (tDailyExecution[1] = (tTime.GetTime() % SECONDSPERDAY >= tDailyExecution[0].GetTotalSeconds()) ? (((tDailyRange[0] <= tDailyRange[1] && tDailyRange[0].GetTotalSeconds() <= tTime.GetTime() % SECONDSPERDAY && tDailyRange[1].GetTotalSeconds() > tTime.GetTime() % SECONDSPERDAY) || (tDailyRange[0] > tDailyRange[1] && (tDailyRange[0].GetTotalSeconds() <= tTime.GetTime() % SECONDSPERDAY || tDailyRange[1].GetTotalSeconds() > tTime.GetTime() % SECONDSPERDAY))) ? tDailyRange[1] : CTimeSpan(tTime.GetTime() % SECONDSPERDAY)) : (((tDailyRange[0] <= tDailyRange[1] && tDailyRange[0].GetTotalSeconds() <= tTime.GetTime() % SECONDSPERDAY && tDailyRange[1].GetTotalSeconds() > tTime.GetTime() % SECONDSPERDAY) || (tDailyRange[0] > tDailyRange[1] && (tDailyRange[0].GetTotalSeconds() <= tTime.GetTime() % SECONDSPERDAY || tDailyRange[1].GetTotalSeconds() > tTime.GetTime() % SECONDSPERDAY))) ? ((!tDailyRange[0].GetTotalSeconds()) ? CTimeSpan(SECONDSPERDAY - 1) : CTimeSpan(tDailyRange[0].GetTotalSeconds() - 1)) : CTimeSpan(tTime.GetTime() % SECONDSPERDAY))) != tTime.GetTime() % SECONDSPERDAY; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY_TIME), CTimeKey(tDailyExecution[1].GetTotalSeconds() + (CTime::GetCurrentTime().GetTime() / SECONDSPERDAY)*SECONDSPERDAY));
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_DAILY_TIME)->SetFocus();
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetDailyExecutionTime(tDailyExecution[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalExecutionPage::OnSpinchangeExecutionPeriodicalStartTime()
{
	CTimeKey  tTime[2];
	CTimeSpan  tInterval;

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME)), tInterval = SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL)); tTime[0] != 0 && tTime[1] != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME), (tTime[1] = (tTime[0].GetTime() + tInterval.GetTotalSeconds() > tTime[1].GetTime()) ? (tTime[0].GetTime() + tInterval.GetTotalSeconds()) : tTime[1].GetTime()));
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetPeriodicalExecutionTime(tTime[0], tInterval, tTime[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalExecutionPage::OnSpinchangeExecutionPeriodicalStopTime()
{
	CTimeKey  tTime[2];
	CTimeSpan  tInterval;

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME)), tInterval = SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL)); tTime[0] != 0 && tTime[1] != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME), (tTime[0] = (tTime[1].GetTime() - tInterval.GetTotalSeconds() < tTime[0].GetTime()) ? (tTime[1].GetTime() - tInterval.GetTotalSeconds()) : tTime[0].GetTime()));
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetPeriodicalExecutionTime(tTime[0], tInterval, tTime[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalExecutionPage::OnSpinchangeExecutionPeriodicalInterval()
{
	CTimeKey  tTime[2];
	CTimeSpan  tInterval;

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME)), tInterval = max(SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL)), m_cInfo[0].GetPeriodicalInterval().GetTotalSeconds()); tTime[0] != 0 && tTime[1] != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME), (tTime[1] = (tTime[0].GetTime() + tInterval.GetTotalSeconds() > tTime[1].GetTime()) ? (tTime[0].GetTime() + tInterval.GetTotalSeconds()) : tTime[1].GetTime()));
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetPeriodicalExecutionTime(tTime[0], tInterval, tTime[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsHistoricalInputPage property page

IMPLEMENT_DYNCREATE(CTelemetryReportsHistoricalInputPage, CLocalePropertyPage)

CTelemetryReportsHistoricalInputPage::CTelemetryReportsHistoricalInputPage() : CLocalePropertyPage(CTelemetryReportsHistoricalInputPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryReportsHistoricalInputPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryReportsHistoricalInputPage::SetInfo(CONST CTelemetryHistoricalReportInfo *pHistoricalReportInfo, CONST CTelemetryHistoricalReportInfo *pBackupHistoricalReportInfo, BOOL bUpdate)
{
	for (m_cInfo[0].Copy(pHistoricalReportInfo); pBackupHistoricalReportInfo != (CONST CTelemetryHistoricalReportInfo *) NULL; )
	{
		m_cInfo[1].Copy(pBackupHistoricalReportInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()) && bUpdate)
	{
		ShowInputInfo();
		return;
	}
}

VOID CTelemetryReportsHistoricalInputPage::GetInfo(CTelemetryHistoricalReportInfo *pHistoricalReportInfo) CONST
{
	pHistoricalReportInfo->Copy(&m_cInfo[0]);
}

CTelemetryReportsHistoricalPageFolder *CTelemetryReportsHistoricalInputPage::GetParent() CONST
{
	return((CTelemetryReportsHistoricalPageFolder *)CLocalePropertyPage::GetParent());
}

VOID CTelemetryReportsHistoricalInputPage::ShowInputInfo()
{
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_KEEPFILES, (m_cInfo[0].GetOptions() & TELEMETRYREPORTINFO_OPTION_KEEPINPUTFILES) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP, !m_cInfo[0].GetInputFTPLocation().IsEmpty());
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT, (m_cInfo[0].GetInputFTPPort() != 0) ? TRUE : FALSE);
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT_NUMBER), TELEMETRYREPORTSINPUT_FIRSTPORT, TELEMETRYREPORTSINPUT_LASTPORT);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT_NUMBER), m_cInfo[0].GetInputFTPPort());
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FILES)->SetWindowText(m_cInfo[0].GetInputFiles());
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_DIRECTORY)->SetWindowText(m_cInfo[0].GetInputDirectory());
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_LOCATION)->SetWindowText(m_cInfo[0].GetInputFTPLocation());
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME)->SetWindowText(m_cInfo[0].GetInputFTPUserName());
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD)->SetWindowText(m_cInfo[0].GetInputFTPPassword());
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FILES_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FILES)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FILES_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_DIRECTORY_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_DIRECTORY)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_DIRECTORY_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_KEEPFILES)->EnableWindow(!m_cInfo[0].GetInputFiles().IsEmpty());
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP)->EnableWindow(!m_cInfo[0].GetInputFiles().IsEmpty());
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_LOCATION)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT));
}

BOOL CTelemetryReportsHistoricalInputPage::CheckFTPLocation() CONST
{
	DWORD  dwType;
	CString  szServer;
	CString  szLocation;
	CString  szDirectory;
	INTERNET_PORT  iPort;

	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_LOCATION)->GetWindowText(szLocation);
	return((AfxParseURL(szLocation, dwType, szServer, szDirectory, iPort) && dwType == AFX_INET_SERVICE_FTP) ? TRUE : FALSE);
}

VOID CTelemetryReportsHistoricalInputPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FILES, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE)));
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_DIRECTORY, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_KEEPFILES, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_LOCATION, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT_NUMBER, bCheck);
}

BOOL CTelemetryReportsHistoricalInputPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cInfo[0].Compare(&m_cInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTelemetryReportsHistoricalInputPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? ((GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FILES)->GetWindowTextLength() > 0 || !GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_DIRECTORY)->GetWindowTextLength()) && ((GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_LOCATION)->GetWindowTextLength() > 0 && CheckFTPLocation()) || (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP) && !GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME)->GetWindowTextLength() && !GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD)->GetWindowTextLength()))) : CLocalePropertyPage::Check()) : TRUE);
}

void CTelemetryReportsHistoricalInputPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryReportsHistoricalInputPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelemetryReportsHistoricalInputPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryReportsHistoricalInputPage)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FILES_BROWSE, OnBrowseFiles)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_DIRECTORY_BROWSE, OnBrowseDirectory)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_KEEPFILES, OnKeepFiles)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP, OnUseFTP)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT, OnUseFTPPort)
	ON_EN_CHANGE(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FILES, OnEditchangeFiles)
	ON_EN_CHANGE(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_DIRECTORY, OnEditchangeDirectory)
	ON_EN_CHANGE(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_LOCATION, OnEditchangeFTPLocation)
	ON_EN_CHANGE(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME, OnEditchangeFTPUserName)
	ON_EN_CHANGE(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD, OnEditchangeFTPPassword)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT_NUMBER, OnSpinchangeFTPPort)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsHistoricalInputPage message handlers

BOOL CTelemetryReportsHistoricalInputPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTelemetryReportsHistoricalInputPage::OnSetActive()
{
	for (GetParent()->GetInfo(&m_cInfo[0]); GetParent()->IsWindowVisible(); )
	{
		ShowInputInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CTelemetryReportsHistoricalInputPage::OnKillActive()
{
	GetParent()->SetInfo(&m_cInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CTelemetryReportsHistoricalInputPage::OnBrowseFiles()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FILES, STRING(IDS_FILEBROWSEDIALOG_DELIMITEDFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DELIMITEDFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		m_cInfo[0].SetInputFiles(cFileBrowseDialog.GetPathName());
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FILES)->SetWindowText(cFileBrowseDialog.GetPathName());
	}
	if (!GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FILES)->GetWindowTextLength())
	{
		m_cInfo[0].SetOptions(m_cInfo[0].GetOptions() & ~TELEMETRYREPORTINFO_OPTION_KEEPINPUTFILES);
		m_cInfo[0].SetInputFTPLocation(EMPTYSTRING);
		m_cInfo[0].SetInputFTPUserName(EMPTYSTRING);
		m_cInfo[0].SetInputFTPPassword(EMPTYSTRING);
		m_cInfo[0].SetInputFTPPort(0);
		CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_KEEPFILES, FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP, FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT, FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_LOCATION)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_KEEPFILES)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_LOCATION)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT_NUMBER)->EnableWindow(FALSE);
	}
	else
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_KEEPFILES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP)->EnableWindow();
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FILES, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalInputPage::OnBrowseDirectory()
{
	LPMALLOC  pIMalloc;
	LPITEMIDLIST  pItemIDList;
	TCHAR  szItemBuffer[MAX_PATH];
	TCHAR  szDisplayName[MAX_PATH];
	BROWSEINFO  sBrowseInfo = { 0 };

	if (SHGetMalloc(&pIMalloc) == NOERROR)
	{
		sBrowseInfo.hwndOwner = GetSafeHwnd();
		sBrowseInfo.pszDisplayName = szDisplayName;
		sBrowseInfo.lpszTitle = STRING(IDS_DIRECTORYBROWSEDIALOG_TITLE);
		if ((pItemIDList = SHBrowseForFolder(&sBrowseInfo)))
		{
			if (SHGetPathFromIDList(pItemIDList, szItemBuffer))
			{
				GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_DIRECTORY)->SetWindowText(szItemBuffer);
				m_cInfo[0].SetInputDirectory(szItemBuffer);
			}
			pIMalloc->Free(pItemIDList);
		}
		pIMalloc->Release();
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_DIRECTORY, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalInputPage::OnKeepFiles()
{
	m_cInfo[0].SetOptions((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_KEEPFILES)) ? (m_cInfo[0].GetOptions() | TELEMETRYREPORTINFO_OPTION_KEEPINPUTFILES) : (m_cInfo[0].GetOptions() & ~TELEMETRYREPORTINFO_OPTION_KEEPINPUTFILES));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalInputPage::OnUseFTP()
{
	if (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP))
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_LOCATION)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_LOCATION)->SetFocus();
	}
	else
	{
		m_cInfo[0].SetInputFTPPort(0);
		m_cInfo[0].SetInputFTPLocation(EMPTYSTRING);
		m_cInfo[0].SetInputFTPUserName(EMPTYSTRING);
		m_cInfo[0].SetInputFTPPassword(EMPTYSTRING);
		CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT, FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_LOCATION)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_LOCATION)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT_NUMBER)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalInputPage::OnUseFTPPort()
{
	if (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT))
	{
		m_cInfo[0].SetInputFTPPort(TELEMETRYREPORTSINPUT_DEFAULTPORT);
		Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT_NUMBER), TELEMETRYREPORTSINPUT_DEFAULTPORT);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT_NUMBER)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT_NUMBER)->SetFocus();
	}
	else
	{
		m_cInfo[0].SetInputFTPPort(0);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT_NUMBER)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalInputPage::OnEditchangeFiles()
{
	CString  szFiles;

	for (GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FILES)->GetWindowText(szFiles); szFiles.IsEmpty(); )
	{
		m_cInfo[0].SetOptions(m_cInfo[0].GetOptions() & ~TELEMETRYREPORTINFO_OPTION_KEEPINPUTFILES);
		m_cInfo[0].SetInputFTPLocation(EMPTYSTRING);
		m_cInfo[0].SetInputFTPUserName(EMPTYSTRING);
		m_cInfo[0].SetInputFTPPassword(EMPTYSTRING);
		m_cInfo[0].SetInputFTPPort(0);
		CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_KEEPFILES, FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP, FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT, FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_LOCATION)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_KEEPFILES)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_LOCATION)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT_NUMBER)->EnableWindow(FALSE);
		break;
	}
	if (!szFiles.IsEmpty())
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_KEEPFILES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP)->EnableWindow();
	}
	m_cInfo[0].SetInputFiles(szFiles);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalInputPage::OnEditchangeDirectory()
{
	CString  szDirectory;

	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_DIRECTORY)->GetWindowText(szDirectory);
	m_cInfo[0].SetInputDirectory(szDirectory);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalInputPage::OnEditchangeFTPLocation()
{
	CString  szLocation;

	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_LOCATION)->GetWindowText(szLocation);
	m_cInfo[0].SetInputFTPLocation(szLocation);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalInputPage::OnEditchangeFTPUserName()
{
	CString  szUserName;

	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_USERNAME)->GetWindowText(szUserName);
	m_cInfo[0].SetInputFTPUserName(szUserName);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalInputPage::OnEditchangeFTPPassword()
{
	CString  szPassword;

	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PASSWORD)->GetWindowText(szPassword);
	m_cInfo[0].SetInputFTPPassword(szPassword);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalInputPage::OnSpinchangeFTPPort()
{
	m_cInfo[0].SetInputFTPPort((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_INPUTPAGE_FTP_PORT_NUMBER)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsHistoricalOutputPage property page

IMPLEMENT_DYNCREATE(CTelemetryReportsHistoricalOutputPage, CLocalePropertyPage)

CTelemetryReportsHistoricalOutputPage::CTelemetryReportsHistoricalOutputPage() : CLocalePropertyPage(CTelemetryReportsHistoricalOutputPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryReportsHistoricalOutputPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryReportsHistoricalOutputPage::SetInfo(CONST CTelemetryHistoricalReportInfo *pHistoricalReportInfo, CONST CTelemetryHistoricalReportInfo *pBackupHistoricalReportInfo, BOOL bUpdate)
{
	for (m_cInfo[0].Copy(pHistoricalReportInfo); pBackupHistoricalReportInfo != (CONST CTelemetryHistoricalReportInfo *) NULL; )
	{
		m_cInfo[1].Copy(pBackupHistoricalReportInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()) && bUpdate)
	{
		ShowOutputInfo();
		return;
	}
}

VOID CTelemetryReportsHistoricalOutputPage::GetInfo(CTelemetryHistoricalReportInfo *pHistoricalReportInfo) CONST
{
	pHistoricalReportInfo->Copy(&m_cInfo[0]);
}

CTelemetryReportsHistoricalPageFolder *CTelemetryReportsHistoricalOutputPage::GetParent() CONST
{
	return((CTelemetryReportsHistoricalPageFolder *)CLocalePropertyPage::GetParent());
}

VOID CTelemetryReportsHistoricalOutputPage::ShowOutputInfo()
{
	INT  nRecipient;
	INT  nRecipients;
	CString  szRecipient;
	CStringArray  szRecipients;
	CTelemetryReportFTPRecipients  pRecipients;
	CTelemetryReportFTPRecipientInfo  *pRecipientInfo;

	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_RESETCONTENT);
	CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_KEEPFILE, (m_cInfo[0].GetOptions() & TELEMETRYREPORTINFO_OPTION_KEEPOUTPUTFILE) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_FILENAME)->SetWindowText(m_cInfo[0].GetOutputFile());
	for (nRecipient = 0, nRecipients = m_cInfo[0].GetMailRecipients(szRecipients); nRecipient < nRecipients; nRecipient++)
	{
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szRecipients.GetAt(nRecipient));
		continue;
	}
	for (nRecipient = 0, nRecipients = m_cInfo[0].GetMailRecipients(pRecipients); nRecipient < nRecipients; nRecipient++)
	{
		if ((pRecipientInfo = (CTelemetryReportFTPRecipientInfo *)pRecipients.GetAt(nRecipient)) != (CTelemetryReportFTPRecipientInfo *)NULL)
		{
			szRecipient.Format(STRING(IDS_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILRECIPIENT_FORMAT), (LPCTSTR)pRecipientInfo->GetLocation(), (LPCTSTR)pRecipientInfo->GetUserName());
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)((pRecipientInfo->GetUserName().IsEmpty()) ? (LPCTSTR)pRecipientInfo->GetLocation() : (LPCTSTR)szRecipient));
		}
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_FILENAME_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_KEEPFILE)->EnableWindow(!m_cInfo[0].GetOutputFile().IsEmpty());
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_FTP)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_REMOVE)->EnableWindow(FALSE);
}

VOID CTelemetryReportsHistoricalOutputPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_FILENAME, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE)));
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_KEEPFILE, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, bCheck);
}

BOOL CTelemetryReportsHistoricalOutputPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cInfo[0].Compare(&m_cInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTelemetryReportsHistoricalOutputPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CTelemetryReportsHistoricalOutputPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryReportsHistoricalOutputPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelemetryReportsHistoricalOutputPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryReportsHistoricalOutputPage)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_FILENAME_BROWSE, OnBrowseFile)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_KEEPFILE, OnKeepFile)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_FTP, OnAddFTPRecipient)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_ADD, OnAddMailRecipient)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_REMOVE, OnRemoveRecipient)
	ON_LBN_SELCHANGE(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, OnSelchangeMailRecipient)
	ON_EN_CHANGE(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsHistoricalOutputPage message handlers

BOOL CTelemetryReportsHistoricalOutputPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTelemetryReportsHistoricalOutputPage::OnSetActive()
{
	for (GetParent()->GetInfo(&m_cInfo[0]); GetParent()->IsWindowVisible(); )
	{
		ShowOutputInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CTelemetryReportsHistoricalOutputPage::OnKillActive()
{
	GetParent()->SetInfo(&m_cInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CTelemetryReportsHistoricalOutputPage::OnBrowseFile()
{
	CString  szFileName;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_FILENAME, STRING(IDS_FILEBROWSEDIALOG_EXCELFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_EXCELFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		m_cInfo[0].SetOutputFile(cFileBrowseDialog.GetPathName());
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	}
	for (GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_FILENAME)->GetWindowText(szFileName); szFileName.IsEmpty(); )
	{
		m_cInfo[0].SetOptions(m_cInfo[0].GetOptions() & ~TELEMETRYREPORTINFO_OPTION_KEEPOUTPUTFILE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_KEEPFILE, FALSE);
		break;
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_KEEPFILE)->EnableWindow(!szFileName.IsEmpty());
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalOutputPage::OnKeepFile()
{
	m_cInfo[0].SetOptions((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_KEEPFILE)) ? (m_cInfo[0].GetOptions() | TELEMETRYREPORTINFO_OPTION_KEEPOUTPUTFILE) : (m_cInfo[0].GetOptions() & ~TELEMETRYREPORTINFO_OPTION_KEEPOUTPUTFILE));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalOutputPage::OnAddFTPRecipient()
{
	BOOL  bRecipient;
	CString  szRecipient;
	CTelemetryReportFTPRecipients  pRecipients;
	CTelemetryReportFTPRecipientInfo  cRecipientInfo;
	CTelemetryReportFTPRecipientInfo  *pRecipientInfo;
	CTelemetryReportsFTPDialog  cFTPDialog(this);

	if (cFTPDialog.DoModal(&cRecipientInfo) == IDOK)
	{
		for (szRecipient.Format(STRING(IDS_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILRECIPIENT_FORMAT), (LPCTSTR)cRecipientInfo.GetLocation(), (LPCTSTR)cRecipientInfo.GetUserName()), szRecipient = (cRecipientInfo.GetUserName().IsEmpty()) ? cRecipientInfo.GetLocation() : szRecipient, bRecipient = FALSE; SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szRecipient) < 0; )
		{
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szRecipient));
			bRecipient = TRUE;
			break;
		}
		for (; bRecipient; )
		{
			if ((pRecipientInfo = new CTelemetryReportFTPRecipientInfo(&cRecipientInfo)))
			{
				if (m_cInfo[0].GetMailRecipients(pRecipients) >= 0 && pRecipients.Add(pRecipientInfo) >= 0)
				{
					m_cInfo[0].SetMailRecipients(pRecipients);
					break;
				}
				delete pRecipientInfo;
			}
			break;
		}
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_FTP)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_FTP)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalOutputPage::OnAddMailRecipient()
{
	INT  nRecipient;
	INT  nRecipients;
	CStringArray  szRecipients[2];
	CUserProfiles  pRecipients[1];
	CUserProfileInfo  *pRecipientInfo;
	CUserAddressesDialog  cRecipientsDialog(this);

	if (cRecipientsDialog.DoModal(pRecipients[0]) == IDOK)
	{
		for (nRecipient = 0, nRecipients = (INT)pRecipients[0].GetSize(); nRecipient < nRecipients; nRecipient++)
		{
			if ((pRecipientInfo = (CUserProfileInfo *)pRecipients[0].GetAt(nRecipient)) != (CUserProfileInfo *)NULL)
			{
				if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pRecipientInfo->GetFullName()) < 0)
				{
					SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pRecipientInfo->GetFullName());
					szRecipients[0].Add(pRecipientInfo->GetFullName());
				}
			}
		}
		for (m_cInfo[0].GetMailRecipients(szRecipients[1]), szRecipients[1].Append(szRecipients[0]); TRUE; )
		{
			m_cInfo[0].SetMailRecipients(szRecipients[1]);
			break;
		}
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_FTP)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_ADD)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalOutputPage::OnRemoveRecipient()
{
	INT  nIndex;
	INT  nRecipient;
	INT  nRecipients;
	CString  szRecipient[2];
	CStringArray  szRecipients;
	CTelemetryReportFTPRecipients  pRecipients;
	CHourglassCursor  cCursor;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_GETCURSEL)) >= 0)
	{
		for (nRecipient = 0, nRecipients = m_cInfo[0].GetMailRecipients(pRecipients), szRecipient[0] = Listbox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST), nIndex); nRecipient < nRecipients; nRecipient++)
		{
			for (szRecipient[1].Format(STRING(IDS_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILRECIPIENT_FORMAT), (LPCTSTR)pRecipients.GetAt(nRecipient)->GetLocation(), (LPCTSTR)pRecipients.GetAt(nRecipient)->GetUserName()), szRecipient[1] = (pRecipients.GetAt(nRecipient)->GetUserName().IsEmpty()) ? pRecipients.GetAt(nRecipient)->GetLocation() : szRecipient[1]; szRecipient[0] == szRecipient[1]; )
			{
				delete pRecipients.GetAt(nRecipient);
				pRecipients.RemoveAt(nRecipient);
				nRecipients--;
				nRecipient--;
				break;
			}
			if (szRecipient[0] == szRecipient[1])
			{
				m_cInfo[0].SetMailRecipients(pRecipients);
				break;
			}
		}
		if (nRecipient == nRecipients)
		{
			for (nRecipient = 0, nRecipients = m_cInfo[0].GetMailRecipients(szRecipients); nRecipient < nRecipients; nRecipient++)
			{
				if (szRecipients.GetAt(nRecipient) == szRecipient[0])
				{
					szRecipients.RemoveAt(nRecipient);
					break;
				}
			}
			m_cInfo[0].SetMailRecipients(szRecipients);
		}
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_DELETESTRING, nIndex);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_SETCURSEL, (SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_GETCOUNT) > 0) ? 0 : -1);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_FTP)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_ADD)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalOutputPage::OnEditchangeFileName()
{
	CString  szFileName;

	for (GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_FILENAME)->GetWindowText(szFileName); szFileName.IsEmpty(); )
	{
		m_cInfo[0].SetOptions(m_cInfo[0].GetOptions() & ~TELEMETRYREPORTINFO_OPTION_KEEPOUTPUTFILE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_KEEPFILE, FALSE);
		break;
	}
	m_cInfo[0].SetOutputFile(szFileName);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_KEEPFILE)->EnableWindow(!szFileName.IsEmpty());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalOutputPage::OnSelchangeMailRecipient()
{
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_OUTPUTPAGE_MAILLIST, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsHistoricalPageTabCtrl

IMPLEMENT_DYNCREATE(CTelemetryReportsHistoricalPageTabCtrl, CTabCtrl)

CTelemetryReportsHistoricalPageFolder *CTelemetryReportsHistoricalPageTabCtrl::GetParent() CONST
{
	return((CTelemetryReportsHistoricalPageFolder *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CTelemetryReportsHistoricalPageTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTelemetryReportsHistoricalPageTabCtrl)
	ON_WM_GETDLGCODE()
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsHistoricalPageTabCtrl message handlers

UINT CTelemetryReportsHistoricalPageTabCtrl::OnGetDlgCode()
{
	return CTabCtrl::OnGetDlgCode() | DLGC_WANTTAB;
}

void CTelemetryReportsHistoricalPageTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CWnd  *pWnd;

	if (nChar == VK_TAB)
	{
		if ((pWnd = GetParent()->GetParent()->GetNextDlgTabItem(GetParent(), (HIBYTE(GetKeyState(VK_SHIFT))) ? TRUE : FALSE)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsHistoricalPageFolder

IMPLEMENT_DYNAMIC(CTelemetryReportsHistoricalPageFolder, CLocalePropertySheetDialog)

CTelemetryReportsHistoricalPageFolder::CTelemetryReportsHistoricalPageFolder() : CLocalePropertySheetDialog()
{
	AddPage(&m_pageRange);
	AddPage(&m_pageExecution);
	AddPage(&m_pageInput);
	AddPage(&m_pageOutput);
}

BOOL CTelemetryReportsHistoricalPageFolder::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	INT  nIndex;

	if (CLocalePropertySheetDialog::Create(pParentWnd, WS_CHILD | WS_TABSTOP))
	{
		for (nIndex = GetPageCount() - 1, m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()); nIndex >= 0; nIndex--)
		{
			SetActivePage(nIndex);
			continue;
		}
		MoveWindow(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
		ShowWindow(SW_SHOWNORMAL);
		return TRUE;
	}
	return FALSE;
}

VOID CTelemetryReportsHistoricalPageFolder::SetInfo(CONST CTelemetryHistoricalReportInfo *pHistoricalReportInfo, BOOL bUpdate)
{
	CTelemetryHistoricalReportInfo  cInfo;

	cInfo.Copy(pHistoricalReportInfo);
	m_pageRange.SetInfo(&cInfo, (CTelemetryHistoricalReportInfo *)NULL, bUpdate);
	m_pageExecution.SetInfo(&cInfo, (CTelemetryHistoricalReportInfo *)NULL, bUpdate);
	m_pageInput.SetInfo(&cInfo, (CTelemetryHistoricalReportInfo *)NULL, bUpdate);
	m_pageOutput.SetInfo(&cInfo, (CTelemetryHistoricalReportInfo *)NULL, bUpdate);
}
VOID CTelemetryReportsHistoricalPageFolder::SetInfo(CONST CTelemetryHistoricalReportInfo *pHistoricalReportInfo, CONST CTelemetryHistoricalReportInfo *pBackupHistoricalReportInfo)
{
	m_pageRange.SetInfo(pHistoricalReportInfo, pBackupHistoricalReportInfo);
	m_pageExecution.SetInfo(pHistoricalReportInfo, pBackupHistoricalReportInfo);
	m_pageInput.SetInfo(pHistoricalReportInfo, pBackupHistoricalReportInfo);
	m_pageOutput.SetInfo(pHistoricalReportInfo, pBackupHistoricalReportInfo);
}

VOID CTelemetryReportsHistoricalPageFolder::GetInfo(CTelemetryHistoricalReportInfo *pHistoricalReportInfo) CONST
{
	CTelemetryHistoricalReportInfo  cInfo;

	if (GetActivePage()->GetSafeHwnd() == m_pageRange.GetSafeHwnd())
	{
		m_pageRange.GetInfo(&cInfo);
		pHistoricalReportInfo->Copy(&cInfo);
		return;
	}
	if (GetActivePage()->GetSafeHwnd() == m_pageExecution.GetSafeHwnd())
	{
		m_pageExecution.GetInfo(&cInfo);
		pHistoricalReportInfo->Copy(&cInfo);
		return;
	}
	if (GetActivePage()->GetSafeHwnd() == m_pageInput.GetSafeHwnd())
	{
		m_pageInput.GetInfo(&cInfo);
		pHistoricalReportInfo->Copy(&cInfo);
		return;
	}
	if (GetActivePage()->GetSafeHwnd() == m_pageOutput.GetSafeHwnd())
	{
		m_pageOutput.GetInfo(&cInfo);
		pHistoricalReportInfo->Copy(&cInfo);
		return;
	}
}

CTelemetryReportsHistoricalDialog *CTelemetryReportsHistoricalPageFolder::GetParent() CONST
{
	return((CTelemetryReportsHistoricalDialog *)CLocalePropertySheetDialog::GetParent());
}

VOID CTelemetryReportsHistoricalPageFolder::RepositionButtons()
{
	GetDlgItem(IDOK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDCANCEL)->ShowWindow(SW_HIDE);
	GetDlgItem(ID_APPLY_NOW)->ShowWindow(SW_HIDE);
	GetDlgItem(IDHELP)->ShowWindow(SW_HIDE);
}

BOOL CTelemetryReportsHistoricalPageFolder::Check(BOOL bModified) CONST
{
	return GetParent()->Check(bModified, CLocalePropertySheetDialog::Check(FALSE));
}
BOOL CTelemetryReportsHistoricalPageFolder::Check(BOOL bModified, BOOL bChecked) CONST
{
	return((bChecked) ? CLocalePropertySheetDialog::Check(bModified) : FALSE);
}

BEGIN_MESSAGE_MAP(CTelemetryReportsHistoricalPageFolder, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CTelemetryReportsHistoricalPageFolder)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsHistoricalPageFolder message handlers

void CTelemetryReportsHistoricalPageFolder::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(m_wndTabCtrl.GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CLocalePropertySheetDialog::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsHistoricalDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryReportsHistoricalDialog, CLocaleDialog)

CTelemetryReportsHistoricalDialog::CTelemetryReportsHistoricalDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryReportsHistoricalDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryReportsHistoricalDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryReportsHistoricalDialog::Initialize()
{
	CTelemetryHistoricalReports  pHistoricalReports;

	for (m_nLocked = 0; (m_pwndFolderCtrl = new CTelemetryReportsHistoricalPageFolder) && GetTelemetryReports(m_pReports) && GetTelemetryHistoricalReports(pHistoricalReports); ) return SetHistoricalReports(pHistoricalReports);
	return FALSE;
}

BOOL CTelemetryReportsHistoricalDialog::SetHistoricalReports(CONST CTelemetryHistoricalReports &pHistoricalReports)
{
	return m_pHistoricalReports[0].Copy(&pHistoricalReports) && m_pHistoricalReports[1].Copy(&pHistoricalReports) && m_pHistoricalReports[2].Copy(&pHistoricalReports);
}

BOOL CTelemetryReportsHistoricalDialog::GetHistoricalReports(CTelemetryHistoricalReports &pHistoricalReports) CONST
{
	return pHistoricalReports.Copy(&m_pHistoricalReports[0]);
}

BOOL CTelemetryReportsHistoricalDialog::EnumReports()
{
	INT  nReport;
	INT  nReports;
	CTelemetryReportInfo  *pReportInfo;

	for (nReport = 0, nReports = (INT)m_pReports.GetSize(); nReport < nReports; nReport++)
	{
		if ((pReportInfo = m_pReports.GetAt(nReport)) != (CTelemetryReportInfo *)NULL)
		{
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_REPORT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pReportInfo->GetName());
			continue;
		}
	}
	if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_REPORT, CB_GETCOUNT) > 0)
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_REPORT_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_REPORT)->EnableWindow();
		return TRUE;
	}
	return FALSE;
}

BOOL CTelemetryReportsHistoricalDialog::EnumHistoricalReports()
{
	INT  nReport;
	INT  nReports;
	CTelemetryHistoricalReportInfo  *pHistoricalReportInfo;

	for (nReport = 0, nReports = (INT)m_pHistoricalReports[0].GetSize(); nReport < nReports; nReport++)
	{
		if ((pHistoricalReportInfo = m_pHistoricalReports[0].GetAt(nReport)) != (CTelemetryHistoricalReportInfo *)NULL)
		{
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pHistoricalReportInfo->GetName());
			continue;
		}
	}
	if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME)->SetFocus();
		return TRUE;
	}
	return FALSE;
}

BOOL CTelemetryReportsHistoricalDialog::EnumReportSourceFiles()
{
	INT  nFile;
	INT  nFiles;
	CHistoryStoreFiles  pFiles;

	for (nFile = 0, nFiles = GetTMService()->GetTMHistoryFiles(HISTORYFILE_TYPE_RETRIEVE, pFiles); nFile < nFiles; nFile++)
	{
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pFiles.GetAt(nFile)->GetFileName());
		continue;
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
	return TRUE;
}

BOOL CTelemetryReportsHistoricalDialog::CheckHistoricalReports() CONST
{
	INT  nReport;
	INT  nReports;
	CTelemetryReports  pReports;
	CTelemetryHistoricalReports  pHistoricalReports;
	CTelemetryHistoricalReportInfo  *pHistoricalReportInfo;

	if (GetTelemetryReportsService()->EnumReports(pReports))
	{
		for (nReport = 0, nReports = (GetTelemetryHistoricalReports(pHistoricalReports)) ? (INT)pHistoricalReports.GetSize() : -1; nReport < nReports; nReport++)
		{
			if ((pHistoricalReportInfo = pHistoricalReports.GetAt(nReport)) && pHistoricalReportInfo->GetExecutionMode() == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATEVENT) break;
			continue;
		}
		return((pReports.GetSize() > 0 || nReport < nReports) ? TRUE : FALSE);
	}
	return FALSE;
}

VOID CTelemetryReportsHistoricalDialog::SetHistoricalReportInfo(BOOL bInitialize)
{
	CTelemetryHistoricalReportInfo  *pHistoricalReportInfo;

	for (Lock(); (pHistoricalReportInfo = FindHistoricalReportInfo()); )
	{
		UpdateHistoricalReportInfo(pHistoricalReportInfo, bInitialize);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_REPORT, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_REPORT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pHistoricalReportInfo->GetReport()));
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE)->SetWindowText(pHistoricalReportInfo->GetSource());
		break;
	}
	Unlock();
	Update(FALSE, m_pwndFolderCtrl->Check(FALSE));
}

VOID CTelemetryReportsHistoricalDialog::UpdateHistoricalReportInfo(CONST CTelemetryHistoricalReportInfo *pHistoricalReportInfo, BOOL bInitialize)
{
	INT  nReport;
	INT  nReports;
	CTelemetryHistoricalReportInfo *pReportInfo;

	for (; !pHistoricalReportInfo->GetName().IsEmpty() && bInitialize; )
	{
		if ((pReportInfo = m_pHistoricalReports[2].GetAt(m_pHistoricalReports[2].Find(pHistoricalReportInfo->GetName()))))
		{
			pReportInfo->Copy(pHistoricalReportInfo);
			break;
		}
		if ((pReportInfo = new CTelemetryHistoricalReportInfo))
		{
			for (pReportInfo->Copy(pHistoricalReportInfo); m_pHistoricalReports[2].Add(pReportInfo) < 0; )
			{
				delete pReportInfo;
				break;
			}
		}
		break;
	}
	for (nReport = 0, nReports = (INT)m_pHistoricalReports[2].GetSize(), m_pwndFolderCtrl->SetInfo(pHistoricalReportInfo, (!pHistoricalReportInfo->GetName().IsEmpty()) ? m_pHistoricalReports[2].GetAt(m_pHistoricalReports[2].Find(pHistoricalReportInfo->GetName())) : ((bInitialize) ? pHistoricalReportInfo : (CONST CTelemetryHistoricalReportInfo *) NULL)); nReport < nReports; nReport++)
	{
		if ((pReportInfo = m_pHistoricalReports[2].GetAt(nReport)) && m_pHistoricalReports[0].Find(pReportInfo->GetName()) < 0)
		{
			m_pHistoricalReports[2].RemoveAt(nReport);
			delete pReportInfo;
			nReports--;
			nReport--;
		}
	}
}

BOOL CTelemetryReportsHistoricalDialog::GetHistoricalReportInfo(CTelemetryHistoricalReportInfo *pHistoricalReportInfo) CONST
{
	CTelemetryHistoricalReportInfo  *pReportInfo[2];

	if ((pReportInfo[0] = new CTelemetryHistoricalReportInfo))
	{
		for (m_pwndFolderCtrl->GetInfo(pReportInfo[0]); (pReportInfo[1] = FindHistoricalReportInfo()) && pReportInfo[0]->GetName() == pReportInfo[1]->GetName(); )
		{
			pReportInfo[0]->SetName(pReportInfo[1]->GetName());
			pReportInfo[0]->SetReport(pReportInfo[1]->GetReport());
			pReportInfo[0]->SetSource(pReportInfo[1]->GetSource());
			pHistoricalReportInfo->Copy(pReportInfo[0]);
			delete pReportInfo[0];
			return TRUE;
		}
		for (; pHistoricalReportInfo != (CTelemetryHistoricalReportInfo *)NULL && !pReportInfo[1]; )
		{
			pHistoricalReportInfo->Copy(pReportInfo[0]);
			break;
		}
		delete pReportInfo[0];
	}
	return FALSE;
}

CTelemetryHistoricalReportInfo *CTelemetryReportsHistoricalDialog::FindHistoricalReportInfo() CONST
{
	CString  szName;

	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME)->GetWindowText(szName);
	return m_pHistoricalReports[0].GetAt(m_pHistoricalReports[0].Find(szName));
}

CRect CTelemetryReportsHistoricalDialog::CalcFolderSize() CONST
{
	CRect  rFolder;

	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_FOLDER)->GetWindowRect(rFolder);
	ScreenToClient(rFolder);
	return rFolder;
}

VOID CTelemetryReportsHistoricalDialog::AdjustToPrivileges()
{
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_REPORT, CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
	AccessControl(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE, CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
}

BOOL CTelemetryReportsHistoricalDialog::IsModified() CONST
{
	return((!m_pHistoricalReports[0].Compare(&m_pHistoricalReports[1]) && m_pHistoricalReports[0].Compare(&m_pHistoricalReports[2]) && !m_pwndFolderCtrl->IsModified()) ? TRUE : FALSE);
}

BOOL CTelemetryReportsHistoricalDialog::Check(BOOL bModified) CONST
{
	return((Check(bModified, m_pwndFolderCtrl->Check(FALSE, TRUE))) ? (!bModified || IsModified()) : FALSE);
}
BOOL CTelemetryReportsHistoricalDialog::Check(BOOL bModified, BOOL bChecked) CONST
{
	CString  szName;
	CString  szReport;
	CString  szSource;
	CTelemetryHistoricalReportInfo  cInfo[2];

	GetHistoricalReportInfo(&cInfo[0]);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_REPORT)->GetWindowText(szReport);
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE)->GetWindowText(szSource);
	Update(bModified, (bChecked = ((!szName.IsEmpty() && !szReport.IsEmpty() && !szSource.IsEmpty()) || (szName == STRING(IDS_TELEMETRYREPORTS_DEFAULT_NAME) && szReport.IsEmpty() && szSource.IsEmpty() && cInfo[0].Compare(&cInfo[1]))) && bChecked));
	return((bChecked) ? (!bModified || IsModified()) : FALSE);
}

VOID CTelemetryReportsHistoricalDialog::Update(BOOL bModified, BOOL bChecked) CONST
{
	CTelemetryHistoricalReportInfo  *pInfo[2];

	if (!IsLocked())
	{
		if ((pInfo[0] = new CTelemetryHistoricalReportInfo))
		{
			for (GetHistoricalReportInfo(pInfo[0]); bModified; )
			{
				if ((pInfo[1] = FindHistoricalReportInfo())) pInfo[1]->Copy(pInfo[0]);
				m_pwndFolderCtrl->SetInfo(pInfo[0], FALSE);
				break;
			}
			GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_SAVE)->EnableWindow((GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME)->GetWindowTextLength() > 0 && (!FindHistoricalReportInfo() || (m_pHistoricalReports[2].Find(pInfo[0]->GetName()) >= 0 && !pInfo[0]->Compare(m_pHistoricalReports[2].GetAt(m_pHistoricalReports[2].Find(pInfo[0]->GetName())))) || m_pwndFolderCtrl->IsModified()) && bChecked) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
			GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_SUBMIT)->EnableWindow((GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME)->GetWindowTextLength() > 0 && pInfo[0]->GetExecutionMode() != 0 && pInfo[0]->GetExecutionMode() != TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATEVENT  &&  bChecked) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
			GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_ABORT)->EnableWindow((CheckHistoricalReports()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
			GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_DELETE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
			GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_DELETEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
			delete pInfo[0];
		}
	}
}

VOID CTelemetryReportsHistoricalDialog::Lock()
{
	m_nLocked++;
}

BOOL CTelemetryReportsHistoricalDialog::IsLocked() CONST
{
	return(m_nLocked > 0);
}

VOID CTelemetryReportsHistoricalDialog::Unlock()
{
	m_nLocked--;
}

void CTelemetryReportsHistoricalDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryReportsHistoricalDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryReportsHistoricalDialog::PostNcDestroy()
{
	m_pReports.RemoveAll();
	m_pHistoricalReports[0].RemoveAll();
	m_pHistoricalReports[1].RemoveAll();
	m_pHistoricalReports[2].RemoveAll();
	delete m_pwndFolderCtrl;
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryReportsHistoricalDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryReportsHistoricalDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_SAVE, OnSave)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_DELETE, OnDelete)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_DELETEALL, OnDeleteAll)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_ABORT, OnAbort)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_SUBMIT, OnSubmit)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE_BROWSE, OnBrowseSource)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_HISTORICAL_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, OnEditchangeName)
	ON_CBN_EDITCHANGE(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE, OnEditchangeSource)
	ON_CBN_SELCHANGE(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, OnSelchangeName)
	ON_CBN_SELCHANGE(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_REPORT, OnSelchangeReport)
	ON_CBN_SELCHANGE(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE, OnSelchangeSource)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsHistoricalDialog message handlers

BOOL CTelemetryReportsHistoricalDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	for (CLocaleDialog::OnInitDialog(); m_pwndFolderCtrl->Create(this, CalcFolderSize()) && SetChildSheet(m_pwndFolderCtrl, GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_FOLDER - 1)); )
	{
		if (EnumHistoricalReports() && EnumReports() && EnumReportSourceFiles()) SetHistoricalReportInfo(TRUE);
		break;
	}
	AdjustToPrivileges();
	return TRUE;
}

void CTelemetryReportsHistoricalDialog::OnSave()
{
	CString  szName;
	CString  szReport;
	CString  szSource;
	CTelemetryHistoricalReportInfo  *pHistoricalReportInfo[2];
	CHourglassCursor  cCursor;

	if ((pHistoricalReportInfo[0] = FindHistoricalReportInfo()))
	{
		GetHistoricalReportInfo(pHistoricalReportInfo[0]);
		SetHistoricalReportInfo(TRUE);
	}
	for (GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME)->GetWindowText(szName); (pHistoricalReportInfo[1] = (!FindHistoricalReportInfo() && SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szName) >= 0) ? new CTelemetryHistoricalReportInfo : (CTelemetryHistoricalReportInfo *)NULL); )
	{
		for (GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_REPORT)->GetWindowText(szReport), GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE)->GetWindowText(szSource), GetHistoricalReportInfo(pHistoricalReportInfo[1]), pHistoricalReportInfo[1]->SetName(szName), pHistoricalReportInfo[1]->SetReport(szReport), pHistoricalReportInfo[1]->SetSource(szSource); m_pHistoricalReports[0].Add(pHistoricalReportInfo[1]) < 0; )
		{
			delete pHistoricalReportInfo[1];
			break;
		}
		SetHistoricalReportInfo(TRUE);
		break;
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalDialog::OnDelete()
{
	INT  nIndex;
	CString  szName;
	CTelemetryHistoricalReportInfo  *pHistoricalReportInfo;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME)->GetWindowText(szName); FindHistoricalReportInfo(); )
	{
		if (!szName.Compare(STRING(IDS_TELEMETRYREPORTS_DEFAULT_NAME)))
		{
			if ((pHistoricalReportInfo = new CTelemetryHistoricalReportInfo))
			{
				delete m_pHistoricalReports[0].GetAt((nIndex = m_pHistoricalReports[0].Find(szName)));
				m_pHistoricalReports[0].SetAt(nIndex, pHistoricalReportInfo);
				SetHistoricalReportInfo(TRUE);
			}
		}
		else
		{
			if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName)) >= 0)
			{
				for (SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_SETCURSEL); (nIndex = m_pHistoricalReports[0].Find(szName)) >= 0; )
				{
					delete m_pHistoricalReports[0].GetAt(nIndex);
					m_pHistoricalReports[0].RemoveAt(nIndex);
					SetHistoricalReportInfo();
					break;
				}
			}
		}
		break;
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalDialog::OnDeleteAll()
{
	INT  nReport;
	INT  nReports;
	CString  szName;
	CTelemetryHistoricalReportInfo  *pHistoricalReportInfo;
	CHourglassCursor  cCursor;

	for (nReports = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_GETCOUNT); nReports > 0; nReports--)
	{
		if ((szName = Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME), nReports - 1)) == STRING(IDS_TELEMETRYREPORTS_DEFAULT_NAME))
		{
			if ((pHistoricalReportInfo = new CTelemetryHistoricalReportInfo) != (CTelemetryHistoricalReportInfo *)NULL)
			{
				delete m_pHistoricalReports[0].GetAt((nReport = m_pHistoricalReports[0].Find(szName)));
				m_pHistoricalReports[0].SetAt(nReport, pHistoricalReportInfo);
			}
			continue;
		}
		if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName)) >= 0)
		{
			delete m_pHistoricalReports[0].GetAt((nReport = m_pHistoricalReports[0].Find(szName)));
			m_pHistoricalReports[0].RemoveAt(nReport);
		}
	}
	if (SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_SETCURSEL, max(SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYREPORTS_DEFAULT_NAME)), 0));
		SetHistoricalReportInfo(TRUE);
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalDialog::OnSubmit()
{
	CTelemetryHistoricalReportInfo  cHistoricalReportInfoInfo;
	CHourglassCursor  cCursor;

	GetHistoricalReportInfo(&cHistoricalReportInfoInfo);
	GetTelemetryReportsService()->Update(&cHistoricalReportInfoInfo);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalDialog::OnAbort()
{
	CTelemetryReportsAbortDialog  cAbortDialog(this);

	cAbortDialog.DoModal();
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_ABORT)->EnableWindow(CheckHistoricalReports());
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME)->SetFocus();
}

void CTelemetryReportsHistoricalDialog::OnBrowseSource()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE, STRING(IDS_FILEBROWSEDIALOG_TMHISTORYFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TMHISTORYFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE)->SetWindowText(cFileBrowseDialog.GetPathName());
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalDialog::OnEditchangeName()
{
	CString  szName;

	for (GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME)->GetWindowText(szName); SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0; )
	{
		SetHistoricalReportInfo();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalDialog::OnEditchangeSource()
{
	CString  szSource;
	CTelemetryHistoricalReportInfo  *pHistoricalReportInfo;

	if ((pHistoricalReportInfo = FindHistoricalReportInfo()))
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE)->GetWindowText(szSource);
		pHistoricalReportInfo->SetSource(szSource);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalDialog::OnSelchangeName()
{
	for (GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME)->SetWindowText(Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_NAME), (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_NAME, CB_GETCURSEL))); TRUE; )
	{
		SetHistoricalReportInfo();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalDialog::OnSelchangeReport()
{
	CTelemetryHistoricalReportInfo  *pHistoricalReportInfoInfo;

	for (; (pHistoricalReportInfoInfo = FindHistoricalReportInfo()); )
	{
		pHistoricalReportInfoInfo->SetReport(Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_REPORT), (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_REPORT, CB_GETCURSEL)));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalDialog::OnSelchangeSource()
{
	CTelemetryHistoricalReportInfo  *pHistoricalReportInfoInfo;

	for (SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE, CB_GETCURSEL)); (pHistoricalReportInfoInfo = FindHistoricalReportInfo()); )
	{
		pHistoricalReportInfoInfo->SetSource(Combobox_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE), (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_HISTORICAL_PROPERTIES_SOURCE, CB_GETCURSEL)));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsHistoricalDialog::OnOK()
{
	CHourglassCursor  cCursor;

	SetTelemetryHistoricalReports(m_pHistoricalReports[2]);
	EndDialog(IDOK);
}

BOOL CTelemetryReportsHistoricalDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSHISTORICALDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryReportsHistoricalDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSHISTORICALDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsFTPDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryReportsFTPDialog, CLocaleDialog)

CTelemetryReportsFTPDialog::CTelemetryReportsFTPDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryReportsFTPDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryReportsFTPDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTelemetryReportsFTPDialog::DoModal(CTelemetryReportFTPRecipientInfo *pRecipientInfo)
{
	INT  nResult;

	if ((nResult = (INT)CLocaleDialog::DoModal()) == IDOK)
	{
		pRecipientInfo->Copy(&m_cRecipientInfo);
		return IDOK;
	}
	return nResult;
}

BOOL CTelemetryReportsFTPDialog::CheckURL(LPCTSTR pszLocation) CONST
{
	DWORD  dwService;
	CString  szServer;
	CString  szDirectory;
	INTERNET_PORT  nPort;

	return((AfxParseURL(pszLocation, dwService, szServer, szDirectory, nPort) && dwService == AFX_INET_SERVICE_FTP) ? TRUE : FALSE);
}

BOOL CTelemetryReportsFTPDialog::Check(BOOL bModified) CONST
{
	CString  szLocation;

	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_LOCATION)->GetWindowText(szLocation);
	return((GetDlgItem(IDC_TELEMETRYREPORTS_FTP_LOCATION)->GetWindowTextLength() > 0 && (!GetDlgItem(IDC_TELEMETRYREPORTS_FTP_PASSWORD)->GetWindowTextLength() || GetDlgItem(IDC_TELEMETRYREPORTS_FTP_USERNAME)->GetWindowTextLength() > 0) && CheckURL(szLocation)) ? TRUE : FALSE);
}

void CTelemetryReportsFTPDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryReportsFTPDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelemetryReportsFTPDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryReportsFTPDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FTP_PORT, OnUsePort)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FTP_TRANSFERS, OnTransfers)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FTP_RETRY_NEVER, OnRetryNever)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FTP_RETRY_CONTINUOUSLY, OnRetryContinuously)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT, OnRetryLimited)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FTP_AUDITION_NOTHING, OnAuditNothing)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FTP_AUDITION_EVERYTHING, OnAuditEverything)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FTP_AUDITION_FAILURES, OnAuditFailures)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FTP_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TELEMETRYREPORTS_FTP_LOCATION, OnEditchangeLocation)
	ON_EN_CHANGE(IDC_TELEMETRYREPORTS_FTP_USERNAME, OnEditchangeUserName)
	ON_EN_CHANGE(IDC_TELEMETRYREPORTS_FTP_PASSWORD, OnEditchangePassword)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYREPORTS_FTP_PORT_NUMBER, OnSpinchangePort)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT_NUMBER, OnSpinchangeRetries)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL, OnSpinchangeRetryInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsFTPDialog message handlers

BOOL CTelemetryReportsFTPDialog::OnInitDialog()
{
	UINT  nPort;
	UINT  nCount;
	UINT  nAudition;
	CTimeSpan  tInterval;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYREPORTS_FTP_PORT_NUMBER), TELEMETRYREPORTSFTPTRANSFERS_FIRSTPORT, TELEMETRYREPORTSFTPTRANSFERS_LASTPORT);
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT_NUMBER), TELEMETRYREPORTSFTPTRANSFERS_MINIMUMRETRIES, TELEMETRYREPORTSFTPTRANSFERS_MAXIMUMRETRIES);
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL), TELEMETRYREPORTSFTPTRANSFERS_MINIMUMRETRYINTERVAL, TELEMETRYREPORTSFTPTRANSFERS_MAXIMUMRETRYINTERVAL);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_FTP_PORT_NUMBER), (nPort = m_cRecipientInfo.GetPort()));
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT_NUMBER), (m_cRecipientInfo.GetRetryInfo(nCount, tInterval)) ? nCount : 0);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL), tInterval.GetTotalMinutes());
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_PORT, (nPort >= TELEMETRYREPORTSFTPTRANSFERS_FIRSTPORT  &&  nPort <= TELEMETRYREPORTSFTPTRANSFERS_LASTPORT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_TRANSFERS, m_cRecipientInfo.IsEnabled());
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_RETRY_NEVER, (!nCount) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_RETRY_CONTINUOUSLY, (nCount == (UINT)-1) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT, (nCount != 0 && nCount != (UINT)-1) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_AUDITION_NOTHING, ((nAudition = m_cRecipientInfo.GetAudition()) == TELEMETRYREPORT_FTPRECIPIENT_AUDITION_NONE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_AUDITION_EVERYTHING, (nAudition == TELEMETRYREPORT_FTPRECIPIENT_AUDITION_ALL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_AUDITION_FAILURES, (nAudition == TELEMETRYREPORT_FTPRECIPIENT_AUDITION_FAILURES) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_LOCATION)->SetWindowText(m_cRecipientInfo.GetLocation());
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_USERNAME)->SetWindowText(m_cRecipientInfo.GetUserName());
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_PASSWORD)->SetWindowText(m_cRecipientInfo.GetPassword());
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELENETRYREPORTS_FTP_LOCATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_LOCATION)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_USERNAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_USERNAME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_PASSWORD_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_PASSWORD)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_PORT)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_PORT_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FTP_PORT));
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_TRANSFERS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_BEHAVIOR)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_BEHAVIOR_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_NEVER)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_CONTINUOUSLY)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT));
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT));
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FTP_RETRY_CONTINUOUSLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FTP_RETRY_CONTINUOUSLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FTP_RETRY_CONTINUOUSLY));
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_AUDITION)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_AUDITION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_AUDITION_NOTHING)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_AUDITION_EVERYTHING)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_AUDITION_FAILURES)->EnableWindow();
	return TRUE;
}

void CTelemetryReportsFTPDialog::OnUsePort()
{
	m_cRecipientInfo.SetPort((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FTP_PORT)) ? TELEMETRYREPORTSFTPTRANSFERS_DEFAULTPORT : 0);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_FTP_PORT_NUMBER), TELEMETRYREPORTSFTPTRANSFERS_DEFAULTPORT);
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_PORT_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FTP_PORT));
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_PORT_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFTPDialog::OnTransfers()
{
	m_cRecipientInfo.Enable(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FTP_TRANSFERS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFTPDialog::OnRetryNever()
{
	m_cRecipientInfo.SetRetryInfo(0, 0);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_RETRY_NEVER, TRUE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_RETRY_CONTINUOUSLY, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT, FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFTPDialog::OnRetryContinuously()
{
	m_cRecipientInfo.SetRetryInfo(-1, SECONDSPERMINUTE*TELEMETRYREPORTSFTPTRANSFERS_DEFAULTRETRYINTERVAL);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_RETRY_NEVER, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_RETRY_CONTINUOUSLY, TRUE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL), TELEMETRYREPORTSFTPTRANSFERS_DEFAULTRETRYINTERVAL);
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL_MINUTES_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFTPDialog::OnRetryLimited()
{
	m_cRecipientInfo.SetRetryInfo(TELEMETRYREPORTSFTPTRANSFERS_DEFAULTRETRIES, SECONDSPERMINUTE*TELEMETRYREPORTSFTPTRANSFERS_DEFAULTRETRYINTERVAL);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_RETRY_NEVER, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_RETRY_CONTINUOUSLY, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT_NUMBER), TELEMETRYREPORTSFTPTRANSFERS_DEFAULTRETRIES);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL), TELEMETRYREPORTSFTPTRANSFERS_DEFAULTRETRYINTERVAL);
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT_NUMBER)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL_MINUTES_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFTPDialog::OnAuditNothing()
{
	m_cRecipientInfo.SetAudition(TELEMETRYREPORT_FTPRECIPIENT_AUDITION_NONE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFTPDialog::OnAuditEverything()
{
	m_cRecipientInfo.SetAudition(TELEMETRYREPORT_FTPRECIPIENT_AUDITION_ALL);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFTPDialog::OnAuditFailures()
{
	m_cRecipientInfo.SetAudition(TELEMETRYREPORT_FTPRECIPIENT_AUDITION_FAILURES);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFTPDialog::OnEditchangeLocation()
{
	CString  szLocation;

	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_LOCATION)->GetWindowText(szLocation);
	m_cRecipientInfo.SetLocation(szLocation);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFTPDialog::OnEditchangeUserName()
{
	CString  szUserName;

	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_USERNAME)->GetWindowText(szUserName);
	m_cRecipientInfo.SetUserName(szUserName);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFTPDialog::OnEditchangePassword()
{
	CString  szPassword;

	GetDlgItem(IDC_TELEMETRYREPORTS_FTP_PASSWORD)->GetWindowText(szPassword);
	m_cRecipientInfo.SetPassword(szPassword);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFTPDialog::OnSpinchangePort()
{
	m_cRecipientInfo.SetPort((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_FTP_PORT_NUMBER)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFTPDialog::OnSpinchangeRetries()
{
	m_cRecipientInfo.SetRetryInfo((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT_NUMBER)), SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFTPDialog::OnSpinchangeRetryInterval()
{
	m_cRecipientInfo.SetRetryInfo((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT)) ? (UINT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_COUNT_NUMBER)) : -1, SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_FTP_RETRY_INTERVAL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFTPDialog::OnOK()
{
	CHourglassCursor  cCursor;

	EndDialog(IDOK);
}

BOOL CTelemetryReportsFTPDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSFTPDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryReportsFTPDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSFTPDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsFileTriggersDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryReportsFileTriggersDialog, CLocaleDialog)

CTelemetryReportsFileTriggersDialog::CTelemetryReportsFileTriggersDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryReportsFileTriggersDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryReportsFileTriggersDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTelemetryReportsFileTriggersDialog::DoModal(CTelemetryReportInfo *pReportInfo)
{
	INT  nResult;

	for (m_nIndex = -1; (nResult = (pReportInfo->GetFileTriggers(m_pTriggers[0]) >= 0 && pReportInfo->GetFileTriggers(m_pTriggers[1]) >= 0) ? (INT)CLocaleDialog::DoModal() : IDCANCEL) == IDOK; )
	{
		pReportInfo->SetFileTriggers(m_pTriggers[0]);
		break;
	}
	return nResult;
}

BOOL CTelemetryReportsFileTriggersDialog::EnumTriggerDirectories()
{
	INT  nDirectory;
	INT  nDirectories;
	CTelemetryReportFileTriggerInfo  *pTriggerInfo;

	for (nDirectory = 0, nDirectories = (INT)m_pTriggers[0].GetSize(); nDirectory < nDirectories; nDirectory++)
	{
		if ((pTriggerInfo = m_pTriggers[0].GetAt(nDirectory)) != (CTelemetryReportFileTriggerInfo *)NULL)
		{
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pTriggerInfo->GetDirectory());
			continue;
		}
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_SETCURSEL);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_ADDDIRECTORY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_REMOVEDIRECTORY)->EnableWindow(((m_nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_GETCURSEL)) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BROWSEDIRECTORIES)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
	return((nDirectory == nDirectories) ? TRUE : FALSE);
}

VOID CTelemetryReportsFileTriggersDialog::ShowTriggerInfo(INT nIndex)
{
	INT  nFile;
	INT  nFiles;
	CUIntArray  nFileAttributes;
	CStringArray  szFilteredFiles;
	CTelemetryReportFileTriggerInfo  *pTriggerInfo;

	if ((pTriggerInfo = FindTriggerInfo(nIndex)))
	{
		for (nFile = 0, nFiles = (pTriggerInfo->GetAttributes() & TELEMETRYREPORT_FILETRIGGER_TRACKFILTER_SELECTEDFILES) ? pTriggerInfo->GetFilteredFiles(szFilteredFiles, nFileAttributes) : 0, SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_RESETCONTENT); nFile < nFiles; nFile++)
		{
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szFilteredFiles.GetAt(nFile));
			continue;
		}
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_SETCURSEL);
		CheckDlgButton(IDC_TELEMETRYREPORTS_FILETRIGGERS_DISABLED, (pTriggerInfo->GetAttributes() & TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DISABLED) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ALLFILES, (pTriggerInfo->GetAttributes() & TELEMETRYREPORT_FILETRIGGER_TRACKFILTER_ALLFILES) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES, (pTriggerInfo->GetAttributes() & TELEMETRYREPORT_FILETRIGGER_TRACKFILTER_SELECTEDFILES) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES));
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES)->EnableWindow();
		ShowFileTriggerInfo(pTriggerInfo);
	}
	else
	{
		CheckDlgButton(IDC_TELEMETRYREPORTS_FILETRIGGERS_DISABLED, FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ALLFILES, TRUE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES, FALSE);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_RESETCONTENT);
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES)->EnableWindow(FALSE);
		ShowFileTriggerInfo();
	}
}

VOID CTelemetryReportsFileTriggersDialog::ShowFileTriggerInfo()
{
	CheckDlgButton(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES, TRUE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES, TRUE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES, FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ADDFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_REMOVEFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_BROWSEFILE)->EnableWindow((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES)) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
}
VOID CTelemetryReportsFileTriggersDialog::ShowFileTriggerInfo(CONST CTelemetryReportFileTriggerInfo *pTriggerInfo)
{
	INT  nIndex;
	CUIntArray  nFileAttributes;
	CStringArray  szFilteredFiles;

	for (pTriggerInfo->GetFilteredFiles(szFilteredFiles, nFileAttributes); (nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_GETCURSEL)) >= 0 && nIndex < szFilteredFiles.GetSize() && nIndex < nFileAttributes.GetSize(); )
	{
		CheckDlgButton(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES, (nFileAttributes.GetAt(nIndex) & TELEMETRYREPORT_FILETRIGGER_TRACKMODE_NEWFILES) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES, (nFileAttributes.GetAt(nIndex) & TELEMETRYREPORT_FILETRIGGER_TRACKMODE_UPDATEDFILES) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES, (nFileAttributes.GetAt(nIndex) & TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DELETEDFILES) ? TRUE : FALSE);
		break;
	}
	if (nIndex < 0 || nIndex >= szFilteredFiles.GetSize() || nIndex >= nFileAttributes.GetSize())
	{
		CheckDlgButton(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES, (pTriggerInfo->GetAttributes() & TELEMETRYREPORT_FILETRIGGER_TRACKMODE_NEWFILES) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES, (pTriggerInfo->GetAttributes() & TELEMETRYREPORT_FILETRIGGER_TRACKMODE_UPDATEDFILES) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES, (pTriggerInfo->GetAttributes() & TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DELETEDFILES) ? TRUE : FALSE);
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ADDFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_REMOVEFILE)->EnableWindow((nIndex >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_BROWSEFILE)->EnableWindow((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES)) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
}

CTelemetryReportFileTriggerInfo *CTelemetryReportsFileTriggersDialog::FindTriggerInfo(INT nIndex) CONST
{
	CString  szDirectory;

	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES)->GetWindowText(szDirectory);
	return m_pTriggers[0].GetAt((nIndex < 0) ? m_pTriggers[0].Find(szDirectory) : nIndex);
}

VOID CTelemetryReportsFileTriggersDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE)));
	AccessControl(IDC_TELEMETRYREPORTS_FILETRIGGERS_DISABLED, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ALLFILES, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, bCheck);
}

BOOL CTelemetryReportsFileTriggersDialog::IsModified() CONST
{
	return((!m_pTriggers[0].Compare(&m_pTriggers[1])) ? TRUE : FALSE);
}

BOOL CTelemetryReportsFileTriggersDialog::Check(BOOL bModified) CONST
{
	INT  nFile;
	INT  nFiles;
	INT  nDirectory;
	INT  nDirectories;
	CUIntArray  nFileAttributes;
	CStringArray  szFilteredFiles;
	CTelemetryReportFileTriggerInfo  *pTriggerInfo;

	for (nDirectory = 0, nDirectories = (INT)m_pTriggers[0].GetSize(); nDirectory < nDirectories; nDirectory++)
	{
		if ((pTriggerInfo = m_pTriggers[0].GetAt(nDirectory)) != (CTelemetryReportFileTriggerInfo *)NULL)
		{
			for (nFile = 0, nFiles = (pTriggerInfo->GetAttributes() & TELEMETRYREPORT_FILETRIGGER_TRACKFILTER_SELECTEDFILES) ? pTriggerInfo->GetFilteredFiles(szFilteredFiles, nFileAttributes) : 0; nFile < nFiles; nFile++)
			{
				if ((nFileAttributes.GetAt(nFile) & (TELEMETRYREPORT_FILETRIGGER_TRACKMODE_NEWFILES | TELEMETRYREPORT_FILETRIGGER_TRACKMODE_UPDATEDFILES | TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DELETEDFILES)) == 0) break;
				continue;
			}
			if (((pTriggerInfo->GetAttributes() & TELEMETRYREPORT_FILETRIGGER_TRACKFILTER_ALLFILES) && (pTriggerInfo->GetAttributes() & (TELEMETRYREPORT_FILETRIGGER_TRACKMODE_NEWFILES | TELEMETRYREPORT_FILETRIGGER_TRACKMODE_UPDATEDFILES | TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DELETEDFILES)) == 0) || nFile < nFiles) break;
		}
	}
	return((((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ALLFILES) && (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES))) || (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES) && GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST)->SendMessage(CB_GETCOUNT) > 0)) && nDirectory == nDirectories) ? (!bModified || IsModified()) : FALSE);
}

void CTelemetryReportsFileTriggersDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryReportsFileTriggersDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelemetryReportsFileTriggersDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryReportsFileTriggersDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FILETRIGGERS_BROWSEDIRECTORIES, OnBrowseDirectories)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FILETRIGGERS_ADDDIRECTORY, OnAddDirectory)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FILETRIGGERS_REMOVEDIRECTORY, OnRemoveDirectory)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FILETRIGGERS_DISABLED, OnDisabled)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES, OnTrackNewFiles)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES, OnTrackUpdatedFiles)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES, OnTrackDeletedFiles)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ALLFILES, OnFilterAllFiles)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES, OnFilterSelectedFiles)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_BROWSEFILE, OnBrowseFilteredFiles)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ADDFILE, OnAddFilteredFile)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_REMOVEFILE, OnRemoveFilteredFile)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_FILETRIGGERS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, OnSelchangeDirectory)
	ON_CBN_SELCHANGE(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, OnSelchangeFilteredFiles)
	ON_CBN_EDITCHANGE(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, OnEditchangeDirectory)
	ON_CBN_EDITCHANGE(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, OnEditchangeFilteredFiles)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsFileTriggersDialog message handlers

BOOL CTelemetryReportsFileTriggersDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	if (EnumTriggerDirectories())
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_DISABLED)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ALLFILES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES)->EnableWindow();
		ShowTriggerInfo();
	}
	AdjustToPrivileges();
	return TRUE;
}

void CTelemetryReportsFileTriggersDialog::OnBrowseDirectories()
{
	LPMALLOC  pIMalloc;
	CString  szDirectory;
	LPITEMIDLIST  pItemIDList;
	TCHAR  szItemBuffer[MAX_PATH];
	TCHAR  szDisplayName[MAX_PATH];
	BROWSEINFO  sBrowseInfo = { 0 };

	if (SHGetMalloc(&pIMalloc) == NOERROR)
	{
		sBrowseInfo.hwndOwner = GetSafeHwnd();
		sBrowseInfo.pszDisplayName = szDisplayName;
		sBrowseInfo.lpszTitle = STRING(IDS_TELEMETRYREPORTS_FILETRIGGERSDIALOG_DIRECTORYBROWSECOMMENT);
		if ((pItemIDList = SHBrowseForFolder(&sBrowseInfo)))
		{
			if (SHGetPathFromIDList(pItemIDList, szItemBuffer))
			{
				GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES)->SetWindowText(szItemBuffer);
				szDirectory = szItemBuffer;
			}
			pIMalloc->Free(pItemIDList);
		}
		pIMalloc->Release();
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_ADDDIRECTORY)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDirectory) < 0 && !szDirectory.IsEmpty() && (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES))) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_REMOVEDIRECTORY)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_GETCURSEL) >= 0 && szDirectory.IsEmpty()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFileTriggersDialog::OnAddDirectory()
{
	CString  szDirectory;
	CUIntArray  nFileAttributes;
	CStringArray  szFilteredFiles;
	CTelemetryReportFileTriggerInfo  *pTriggerInfo[2];
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES)->GetWindowText(szDirectory); (pTriggerInfo[1] = ((((pTriggerInfo[0] = FindTriggerInfo(m_nIndex)) && pTriggerInfo[0]->GetFilteredFiles(szFilteredFiles, nFileAttributes) >= 0) || !pTriggerInfo[0]) && SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szDirectory)) >= 0) ? new CTelemetryReportFileTriggerInfo : (CTelemetryReportFileTriggerInfo *)NULL); )
	{
		for (pTriggerInfo[1]->SetDirectory(szDirectory), pTriggerInfo[1]->SetAttributes(((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_DISABLED)) ? TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DISABLED : 0) | ((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES)) ? TELEMETRYREPORT_FILETRIGGER_TRACKMODE_NEWFILES : 0) | ((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES)) ? TELEMETRYREPORT_FILETRIGGER_TRACKMODE_UPDATEDFILES : 0) | ((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES)) ? TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DELETEDFILES : 0) | ((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ALLFILES)) ? TELEMETRYREPORT_FILETRIGGER_TRACKFILTER_ALLFILES : 0) | ((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES)) ? TELEMETRYREPORT_FILETRIGGER_TRACKFILTER_SELECTEDFILES : 0)); IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES); )
		{
			pTriggerInfo[1]->SetFilteredFiles(szFilteredFiles, nFileAttributes);
			break;
		}
		if (m_pTriggers[0].Add(pTriggerInfo[1]) >= 0)
		{
			ShowTriggerInfo();
			break;
		}
		delete pTriggerInfo[1];
		break;
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_ADDDIRECTORY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_REMOVEDIRECTORY)->EnableWindow(((m_nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_GETCURSEL)) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFileTriggersDialog::OnRemoveDirectory()
{
	INT  nIndex;
	CTelemetryReportFileTriggerInfo  *pTriggerInfo;
	CHourglassCursor  cCursor;

	if ((pTriggerInfo = (SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_DELETESTRING, (WPARAM)(nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_GETCURSEL))) >= 0) ? FindTriggerInfo(nIndex) : (CTelemetryReportFileTriggerInfo *)NULL))
	{
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_SETCURSEL);
		m_pTriggers[0].RemoveAt(nIndex);
		delete pTriggerInfo;
		ShowTriggerInfo();
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_ADDDIRECTORY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_REMOVEDIRECTORY)->EnableWindow(((m_nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_GETCURSEL)) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFileTriggersDialog::OnDisabled()
{
	UINT  nAttributes;
	CTelemetryReportFileTriggerInfo  *pTriggerInfo;

	if ((pTriggerInfo = FindTriggerInfo()))
	{
		nAttributes = (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_DISABLED)) ? (pTriggerInfo->GetAttributes() | TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DISABLED) : (pTriggerInfo->GetAttributes() & ~TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DISABLED);
		pTriggerInfo->SetAttributes(nAttributes);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFileTriggersDialog::OnTrackNewFiles()
{
	INT  nIndex;
	UINT  nAttributes;
	CString  szDirectory;
	CString  szFilteredFile;
	CUIntArray  nFileAttributes;
	CStringArray  szFilteredFiles;
	CTelemetryReportFileTriggerInfo  *pTriggerInfo;

	if ((pTriggerInfo = FindTriggerInfo()))
	{
		if (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ALLFILES))
		{
			nAttributes = (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES)) ? (pTriggerInfo->GetAttributes() | TELEMETRYREPORT_FILETRIGGER_TRACKMODE_NEWFILES) : (pTriggerInfo->GetAttributes() & ~TELEMETRYREPORT_FILETRIGGER_TRACKMODE_NEWFILES);
			pTriggerInfo->SetAttributes(nAttributes);
		}
		if ((nIndex = (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES)) ? (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_GETCURSEL) : -1) >= 0 && nIndex < pTriggerInfo->GetFilteredFiles(szFilteredFiles, nFileAttributes))
		{
			nFileAttributes.SetAt(nIndex, (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES)) ? (nFileAttributes.GetAt(nIndex) | TELEMETRYREPORT_FILETRIGGER_TRACKMODE_NEWFILES) : (nFileAttributes.GetAt(nIndex) & ~TELEMETRYREPORT_FILETRIGGER_TRACKMODE_NEWFILES));
			pTriggerInfo->SetFilteredFiles(szFilteredFiles, nFileAttributes);
		}
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES)->GetWindowText(szDirectory);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST)->GetWindowText(szFilteredFile);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_ADDDIRECTORY)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDirectory) < 0 && !szDirectory.IsEmpty() && (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES))) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ADDFILE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFilteredFile) < 0 && !szFilteredFile.IsEmpty() && (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES))) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFileTriggersDialog::OnTrackUpdatedFiles()
{
	INT  nIndex;
	UINT  nAttributes;
	CString  szDirectory;
	CString  szFilteredFile;
	CUIntArray  nFileAttributes;
	CStringArray  szFilteredFiles;
	CTelemetryReportFileTriggerInfo  *pTriggerInfo;

	if ((pTriggerInfo = FindTriggerInfo()))
	{
		if (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ALLFILES))
		{
			nAttributes = (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES)) ? (pTriggerInfo->GetAttributes() | TELEMETRYREPORT_FILETRIGGER_TRACKMODE_UPDATEDFILES) : (pTriggerInfo->GetAttributes() & ~TELEMETRYREPORT_FILETRIGGER_TRACKMODE_UPDATEDFILES);
			pTriggerInfo->SetAttributes(nAttributes);
		}
		if ((nIndex = (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES)) ? (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_GETCURSEL) : -1) >= 0 && nIndex < pTriggerInfo->GetFilteredFiles(szFilteredFiles, nFileAttributes))
		{
			nFileAttributes.SetAt(nIndex, (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES)) ? (nFileAttributes.GetAt(nIndex) | TELEMETRYREPORT_FILETRIGGER_TRACKMODE_UPDATEDFILES) : (nFileAttributes.GetAt(nIndex) & ~TELEMETRYREPORT_FILETRIGGER_TRACKMODE_UPDATEDFILES));
			pTriggerInfo->SetFilteredFiles(szFilteredFiles, nFileAttributes);
		}
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES)->GetWindowText(szDirectory);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST)->GetWindowText(szFilteredFile);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_ADDDIRECTORY)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDirectory) < 0 && !szDirectory.IsEmpty() && (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES))) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ADDFILE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFilteredFile) < 0 && !szFilteredFile.IsEmpty() && (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES))) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFileTriggersDialog::OnTrackDeletedFiles()
{
	INT  nIndex;
	UINT  nAttributes;
	CString  szDirectory;
	CString  szFilteredFile;
	CUIntArray  nFileAttributes;
	CStringArray  szFilteredFiles;
	CTelemetryReportFileTriggerInfo  *pTriggerInfo;

	if ((pTriggerInfo = FindTriggerInfo()))
	{
		if (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ALLFILES))
		{
			nAttributes = (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES)) ? (pTriggerInfo->GetAttributes() | TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DELETEDFILES) : (pTriggerInfo->GetAttributes() & ~TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DELETEDFILES);
			pTriggerInfo->SetAttributes(nAttributes);
		}
		if ((nIndex = (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILES)) ? (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_GETCURSEL) : -1) >= 0 && nIndex < pTriggerInfo->GetFilteredFiles(szFilteredFiles, nFileAttributes))
		{
			nFileAttributes.SetAt(nIndex, (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES)) ? (nFileAttributes.GetAt(nIndex) | TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DELETEDFILES) : (nFileAttributes.GetAt(nIndex) & ~TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DELETEDFILES));
			pTriggerInfo->SetFilteredFiles(szFilteredFiles, nFileAttributes);
		}
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES)->GetWindowText(szDirectory);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST)->GetWindowText(szFilteredFile);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_ADDDIRECTORY)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDirectory) < 0 && !szDirectory.IsEmpty() && (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES))) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ADDFILE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFilteredFile) < 0 && !szFilteredFile.IsEmpty() && (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES))) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFileTriggersDialog::OnFilterAllFiles()
{
	UINT  nAttributes;
	CUIntArray  nFileAttributes;
	CStringArray  szFilteredFiles;
	CTelemetryReportFileTriggerInfo  *pTriggerInfo;

	if ((pTriggerInfo = FindTriggerInfo()))
	{
		nAttributes = (pTriggerInfo->GetAttributes() & ~TELEMETRYREPORT_FILETRIGGER_TRACKFILTER_SELECTEDFILES) | TELEMETRYREPORT_FILETRIGGER_TRACKFILTER_ALLFILES;
		nAttributes |= (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES)) ? TELEMETRYREPORT_FILETRIGGER_TRACKMODE_NEWFILES : 0;
		nAttributes |= (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES)) ? TELEMETRYREPORT_FILETRIGGER_TRACKMODE_UPDATEDFILES : 0;
		nAttributes |= (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES)) ? TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DELETEDFILES : 0;
		pTriggerInfo->SetFilteredFiles(szFilteredFiles, nFileAttributes);
		pTriggerInfo->SetAttributes(nAttributes);
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_BROWSEFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ADDFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_REMOVEFILE)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFileTriggersDialog::OnFilterSelectedFiles()
{
	UINT  nAttributes;
	CUIntArray  nFileAttributes;
	CStringArray  szFilteredFiles;
	CTelemetryReportFileTriggerInfo  *pTriggerInfo;

	if ((pTriggerInfo = FindTriggerInfo()))
	{
		nAttributes = (pTriggerInfo->GetAttributes() & ~TELEMETRYREPORT_FILETRIGGER_TRACKFILTER_ALLFILES) | TELEMETRYREPORT_FILETRIGGER_TRACKFILTER_SELECTEDFILES;
		nAttributes &= ~(TELEMETRYREPORT_FILETRIGGER_TRACKMODE_NEWFILES | TELEMETRYREPORT_FILETRIGGER_TRACKMODE_UPDATEDFILES | TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DELETEDFILES);
		pTriggerInfo->SetFilteredFiles(szFilteredFiles, nFileAttributes);
		pTriggerInfo->SetAttributes(nAttributes);
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_BROWSEFILE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE));
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFileTriggersDialog::OnBrowseFilteredFiles()
{
	CString  szFileName;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, STRING(IDS_FILEBROWSEDIALOG_TEXTFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TEXTFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST)->SetWindowText((szFileName = cFileBrowseDialog.GetFileName()));
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ADDFILE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) < 0 && !szFileName.IsEmpty() && (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES))) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_REMOVEFILE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	}
	SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFileTriggersDialog::OnAddFilteredFile()
{
	INT  nIndex;
	CString  szFilteredFile;
	CUIntArray  nFileAttributes;
	CStringArray  szFilteredFiles;
	CTelemetryReportFileTriggerInfo  *pTriggerInfo;
	CHourglassCursor  cCursor;

	if ((pTriggerInfo = FindTriggerInfo()))
	{
		for (GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST)->GetWindowText(szFilteredFile), pTriggerInfo->GetFilteredFiles(szFilteredFiles, nFileAttributes); SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_SETCURSEL, (WPARAM)(nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szFilteredFile))) >= 0; )
		{
			nFileAttributes.InsertAt(nIndex, ((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES)) ? TELEMETRYREPORT_FILETRIGGER_TRACKMODE_NEWFILES : 0) | ((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES)) ? TELEMETRYREPORT_FILETRIGGER_TRACKMODE_UPDATEDFILES : 0) | ((IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES)) ? TELEMETRYREPORT_FILETRIGGER_TRACKMODE_DELETEDFILES : 0));
			szFilteredFiles.InsertAt(nIndex, szFilteredFile);
			pTriggerInfo->SetFilteredFiles(szFilteredFiles, nFileAttributes);
			break;
		}
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ADDFILE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFilteredFile) < 0 && !szFilteredFile.IsEmpty() && (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES))) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_REMOVEFILE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFileTriggersDialog::OnRemoveFilteredFile()
{
	INT  nIndex;
	CUIntArray  nFileAttributes;
	CStringArray  szFilteredFiles;
	CTelemetryReportFileTriggerInfo  *pTriggerInfo;
	CHourglassCursor  cCursor;

	if ((pTriggerInfo = FindTriggerInfo()))
	{
		for (pTriggerInfo->GetFilteredFiles(szFilteredFiles, nFileAttributes); SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_DELETESTRING, (WPARAM)(nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_GETCURSEL))) >= 0 && nIndex < szFilteredFiles.GetSize() && nIndex < nFileAttributes.GetSize(); )
		{
			SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_SETCURSEL);
			szFilteredFiles.RemoveAt(nIndex);
			nFileAttributes.RemoveAt(nIndex);
			pTriggerInfo->SetFilteredFiles(szFilteredFiles, nFileAttributes);
			ShowFileTriggerInfo(pTriggerInfo);
			break;
		}
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ADDFILE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_REMOVEFILE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
		GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsFileTriggersDialog::OnSelchangeDirectory()
{
	ShowTriggerInfo((INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_GETCURSEL));
}

void CTelemetryReportsFileTriggersDialog::OnSelchangeFilteredFiles()
{
	CTelemetryReportFileTriggerInfo  *pTriggerInfo;

	if ((pTriggerInfo = FindTriggerInfo()))
	{
		ShowFileTriggerInfo(pTriggerInfo);
		return;
	}
	ShowTriggerInfo();
}

void CTelemetryReportsFileTriggersDialog::OnEditchangeDirectory()
{
	INT  nIndex;
	CString  szDirectory;

	for (GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES)->GetWindowText(szDirectory); (nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDirectory)) >= 0; )
	{
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_DIRECTORIES, CB_SETCURSEL, (m_nIndex = nIndex));
		ShowTriggerInfo();
		break;
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_ADDDIRECTORY)->EnableWindow((nIndex < 0 && !szDirectory.IsEmpty() && (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES))) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_REMOVEDIRECTORY)->EnableWindow((nIndex >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
}

void CTelemetryReportsFileTriggersDialog::OnEditchangeFilteredFiles()
{
	INT  nIndex;
	CString  szFilteredFile;

	for (GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST)->GetWindowText(szFilteredFile); (nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFilteredFile)) >= 0; )
	{
		SendDlgItemMessage(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_SELECTEDFILESLIST, CB_SETCURSEL, nIndex);
		ShowFileTriggerInfo(FindTriggerInfo());
		break;
	}
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_ADDFILE)->EnableWindow((nIndex < 0 && !szFilteredFile.IsEmpty() && (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_NEWFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_UPDATEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_DELETEDFILES))) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_FILETRIGGERS_BEHAVIOR_TRACK_FILTER_REMOVEFILE)->EnableWindow((nIndex >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE) : FALSE);
}

BOOL CTelemetryReportsFileTriggersDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSFILETRIGGERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryReportsFileTriggersDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSFILETRIGGERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsScheduleDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryReportsScheduleDialog, CLocaleDialog)

CTelemetryReportsScheduleDialog::CTelemetryReportsScheduleDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryReportsScheduleDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryReportsScheduleDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTelemetryReportsScheduleDialog::DoModal(CTelemetryReportInfo *pReportInfo)
{
	INT  nResult;

	for (m_cReportInfo[0].Copy(pReportInfo), m_cReportInfo[1].Copy(pReportInfo); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		pReportInfo->Copy(&m_cReportInfo[0]);
		break;
	}
	return nResult;
}

VOID CTelemetryReportsScheduleDialog::ShowScheduleInfo()
{
	CTimeKey  tScheduleTime[2];
	CTimeSpan  tScheduleInterval;

	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE, (m_cReportInfo[0].GetScheduledPeriod(tScheduleTime[0], tScheduleTime[1], tScheduleInterval) && tScheduleTime[0] > 0 && tScheduleTime[1] == 0 && tScheduleInterval == 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY, (tScheduleTime[0] > 0 && tScheduleTime[1] == 0 && tScheduleInterval.GetTotalSeconds() == SECONDSPERDAY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL, (tScheduleTime[0] > 0 && tScheduleInterval > 0 && tScheduleInterval.GetTotalSeconds() != SECONDSPERDAY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP, (tScheduleTime[0] > 0 && tScheduleTime[1] > 0 && tScheduleInterval > 0 && tScheduleInterval.GetTotalSeconds() != SECONDSPERDAY) ? TRUE : FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE_TIME), (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE)) ? tScheduleTime[0] : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY_TIME), (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY)) ? CTimeKey((SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + tScheduleTime[0].GetTime() % SECONDSPERDAY)) : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STARTTIME), (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL)) ? tScheduleTime[0] : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME), (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP)) ? tScheduleTime[1] : CTime::GetCurrentTime().GetTime());
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME), tScheduleInterval.GetTotalMinutes());
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE));
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY));
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL));
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL));
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL));
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL));
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL));
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP));
}

VOID CTelemetryReportsScheduleDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYREPORTS_CHANGE)));
	AccessControl(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE_TIME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY_TIME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STARTTIME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP, bCheck);
	AccessControl(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME, bCheck);
}

BOOL CTelemetryReportsScheduleDialog::IsModified() CONST
{
	return((!m_cReportInfo[0].Compare(&m_cReportInfo[1])) ? TRUE : FALSE);
}

BOOL CTelemetryReportsScheduleDialog::Check(BOOL bModified) CONST
{
	CTimeKey  tScheduleTime;

	return(((!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE) || ((tScheduleTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE_TIME))) > CTime::GetCurrentTime().GetTime())) && (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL) || !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP) || ((tScheduleTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME))) > CTime::GetCurrentTime().GetTime()))) ? (!bModified || IsModified()) : FALSE);
}

void CTelemetryReportsScheduleDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryReportsScheduleDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelemetryReportsScheduleDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryReportsScheduleDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE, OnExecuteOnce)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY, OnExecuteDaily)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL, OnExecutePeriodically)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP, OnExecuteStop)
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_SCHEDULE_HELP, OnHelp)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE_TIME, OnSpinchangeTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY_TIME, OnSpinchangeDailyTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STARTTIME, OnSpinchangePeriodicalStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME, OnSpinchangePeriodicalStopTime)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME, OnSpinchangePeriodicalInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsScheduleDialog message handlers

BOOL CTelemetryReportsScheduleDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME), TELEMETRYREPORTSSCHEDULE_MINIMUMINTERVAL, TELEMETRYREPORTSSCHEDULE_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL)->EnableWindow();
	ShowScheduleInfo();
	AdjustToPrivileges();
	return TRUE;
}

void CTelemetryReportsScheduleDialog::OnExecuteOnce()
{
	CTimeKey  tScheduleTime[2];

	m_cReportInfo[0].SetScheduledPeriod((tScheduleTime[1] = (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE)) ? (tScheduleTime[0].GetTime() + SECONDSPERHOUR) : 0), 0, 0);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE_TIME), (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE)) ? tScheduleTime[1] : CTime::GetCurrentTime().GetTime());
	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE, !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE));
	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP, FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE));
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsScheduleDialog::OnExecuteDaily()
{
	CTimeKey  tScheduleTime[2];

	m_cReportInfo[0].SetScheduledPeriod((tScheduleTime[1] = (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY)) ? (SECONDSPERHOUR*(tScheduleTime[0].GetTime() / SECONDSPERHOUR + 1)) : 0), 0, (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY)) ? SECONDSPERDAY : 0);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY_TIME), (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY)) ? tScheduleTime[1] : CTime::GetCurrentTime().GetTime());
	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY, !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY));
	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP, FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY));
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsScheduleDialog::OnExecutePeriodically()
{
	CTimeKey  tScheduleTime[2];

	m_cReportInfo[0].SetScheduledPeriod((tScheduleTime[1] = (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL)) ? (tScheduleTime[0].GetTime() + SECONDSPERHOUR) : 0), 0, (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL)) ? SECONDSPERHOUR : 0);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STARTTIME), (!IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL)) ? tScheduleTime[1] : CTime::GetCurrentTime().GetTime());
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME), MINUTESPERHOUR);
	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY, FALSE);
	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL, !IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL));
	CheckDlgButton(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP, FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL));
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL));
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL));
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL));
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL));
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsScheduleDialog::OnExecuteStop()
{
	CTimeKey  tScheduleTime[2];

	tScheduleTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STARTTIME));
	m_cReportInfo[0].SetScheduledPeriod(tScheduleTime[0], (tScheduleTime[1] = (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP)) ? max(tScheduleTime[0].GetTime() + SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME)), tScheduleTime[0].GetTime() + ((CTime::GetCurrentTime().GetTime() - tScheduleTime[0].GetTime()) / (SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME))) + 1)*SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME))) : 0), SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME)));
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME), (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP)) ? tScheduleTime[1] : tScheduleTime[0]);
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP));
	GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsScheduleDialog::OnSpinchangeTime()
{
	m_cReportInfo[0].SetScheduledPeriod(Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_ONCE_TIME)), 0, 0);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsScheduleDialog::OnSpinchangeDailyTime()
{
	m_cReportInfo[0].SetScheduledPeriod(Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_DAILY_TIME)), 0, SECONDSPERDAY);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsScheduleDialog::OnSpinchangePeriodicalStartTime()
{
	CTimeKey  tScheduleTime[2];

	for (tScheduleTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STARTTIME)), tScheduleTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME)); tScheduleTime[1] < tScheduleTime[0] + SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME)); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME), ((tScheduleTime[1] = tScheduleTime[0].GetTime() + SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME)))));
		break;
	}
	m_cReportInfo[0].SetScheduledPeriod(tScheduleTime[0], (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP)) ? tScheduleTime[1] : 0, SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsScheduleDialog::OnSpinchangePeriodicalStopTime()
{
	CTimeKey  tScheduleTime[2];

	for (tScheduleTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STARTTIME)), tScheduleTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME)); tScheduleTime[1] < tScheduleTime[0] + SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME)); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME), ((tScheduleTime[1] = tScheduleTime[0].GetTime() + SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME)))));
		break;
	}
	m_cReportInfo[0].SetScheduledPeriod(tScheduleTime[0], tScheduleTime[1], SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryReportsScheduleDialog::OnSpinchangePeriodicalInterval()
{
	CTimeKey  tScheduleTime[2];

	for (tScheduleTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STARTTIME)), tScheduleTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME)); IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP) && tScheduleTime[1] < tScheduleTime[0] + SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME)); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOPTIME), ((tScheduleTime[1] = tScheduleTime[0].GetTime() + SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME)))));
		break;
	}
	m_cReportInfo[0].SetScheduledPeriod(tScheduleTime[0], (IsDlgButtonChecked(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_STOP)) ? tScheduleTime[1] : 0, SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYREPORTS_SCHEDULE_EXECUTION_PERIODICAL_INTERVAL_TIME)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

BOOL CTelemetryReportsScheduleDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSSCHEDULEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryReportsScheduleDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSSCHEDULEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsAbortDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryReportsAbortDialog, CLocaleDialog)

CTelemetryReportsAbortDialog::CTelemetryReportsAbortDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryReportsAbortDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryReportsAbortDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryReportsAbortDialog::Initialize()
{
	return((GetTelemetryReportsService()->EnumReports(m_pReports)) ? TRUE : FALSE);
}

BOOL CTelemetryReportsAbortDialog::EnumJobs()
{
	INT  nItem;
	INT  nItems;
	INT  nWidth;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CString  szColumn;
	CTimeKey  tScheduleTime[2];
	CTimeKey  tHistoricalTime[2];
	CTimeSpan  tScheduleInterval;
	CTimeSpan  tHistoricalInterval;
	CByteArray  nHistoricalData;
	CTelemetryEvents  pTriggers;
	CTelemetryReports  pReports;
	CTelemetryReportInfo  *pReportInfo;
	CTelemetryHistoricalReports  pHistoricalReports;
	CTelemetryHistoricalReportInfo  *pHistoricalReportInfo;

	for (nItem = 0, nItems = (INT)m_pReports.GetSize(); nItem < nItems; nItem++)
	{
		if ((pReportInfo = m_pReports.GetAt(nItem)) != (CTelemetryReportInfo *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_NAME); )
				{
					szItem = pReportInfo->GetName();
					break;
				}
				for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_TYPE); )
				{
					szItem = (pReportInfo->GetOptions() & TELEMETRYREPORTINFO_OPTION_HISTORICAL) ? STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TYPE_HISTORICAL) : STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TYPE_REALTIME);
					break;
				}
				for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_TRIGGER); )
				{
					if (pReportInfo->GetScheduledPeriod(tScheduleTime[0], tScheduleTime[1], tScheduleInterval))
					{
						if (tScheduleTime[0].GetTime() > 0 && tScheduleTime[1].GetTime() == 0 && tScheduleInterval.GetTotalSeconds() == 0)
						{
							szItem.Format(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TRIGGER_SCHEDULEDTIME), (LPCTSTR)tScheduleTime[0].FormatGmt());
							break;
						}
						if (tScheduleTime[0] > 0 && tScheduleTime[1] == 0 && tScheduleInterval.GetTotalSeconds() == SECONDSPERDAY)
						{
							szItem.Format(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TRIGGER_SCHEDULEDDAILY), (LPCTSTR)tScheduleTime[0].FormatGmt(STRING(IDS_TIMEKEY_TIMEFORMAT)));
							break;
						}
						if (tScheduleTime[0] > 0 && tScheduleTime[1] == 0)
						{
							szItem.Format(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TRIGGER_SCHEDULEDPERIODICALLY), (INT)tScheduleInterval.GetTotalMinutes(), (LPCTSTR)tScheduleTime[0].FormatGmt());
							break;
						}
						if (tScheduleTime[0] > 0 && tScheduleTime[1] > 0)
						{
							szItem.Format(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TRIGGER_SCHEDULEDLIMITEDPERIOD), (INT)tScheduleInterval.GetTotalMinutes(), (LPCTSTR)tScheduleTime[0].FormatGmt(), (LPCTSTR)tScheduleTime[1].FormatGmt());
							break;
						}
					}
					if ((pHistoricalReportInfo = (pReportInfo->GetLink(nHistoricalData)) ? new CTelemetryHistoricalReportInfo : (CTelemetryHistoricalReportInfo *)NULL) && pHistoricalReportInfo->Unmap(nHistoricalData))
					{
						if (pHistoricalReportInfo->GetExecutionMode() == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATTIME)
						{
							szItem.Format(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TRIGGER_SCHEDULEDTIME), (LPCTSTR)pHistoricalReportInfo->GetExecutionTime().FormatGmt());
							delete pHistoricalReportInfo;
							break;
						}
						if (pHistoricalReportInfo->GetExecutionMode() == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATDAILYTIME)
						{
							szItem.Format(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TRIGGER_SCHEDULEDDAILY), (LPCTSTR)CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + pHistoricalReportInfo->GetDailyExecutionTime().GetTotalSeconds() % SECONDSPERDAY).FormatGmt(STRING(IDS_TIMEKEY_TIMEFORMAT)));
							delete pHistoricalReportInfo;
							break;
						}
						if (pHistoricalReportInfo->GetExecutionMode() == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATINTERVAL)
						{
							if (pHistoricalReportInfo->GetPeriodicalExecutionTime(tScheduleTime[0], tScheduleInterval, tScheduleTime[1]) && tScheduleTime[0] > 0 && tScheduleInterval > 0)
							{
								for (szItem.Format(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TRIGGER_SCHEDULEDPERIODICALLY), (INT)tScheduleInterval.GetTotalMinutes(), (LPCTSTR)tScheduleTime[0].FormatGmt()); tScheduleTime[1] > 0; )
								{
									szItem.Format(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TRIGGER_SCHEDULEDLIMITEDPERIOD), (INT)tScheduleInterval.GetTotalMinutes(), (LPCTSTR)tScheduleTime[0].FormatGmt(), (LPCTSTR)tScheduleTime[1].FormatGmt());
									break;
								}
								delete pHistoricalReportInfo;
								break;
							}
						}
					}
					szItem = STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TRIGGER_NONE);
					delete pHistoricalReportInfo;
					break;
				}
				if (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_RANGE))
				{
					for (szItem = STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_RANGE_NONE); pReportInfo->GetHistoricalPeriod(tHistoricalTime[0], tHistoricalTime[1], tHistoricalInterval); )
					{
						szItem.Format(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_RANGE_FORMAT), (LPCTSTR)tHistoricalTime[0].FormatGmt(), (LPCTSTR)tHistoricalTime[1].FormatGmt());
						break;
					}
				}
				for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_STATUS); )
				{
					szItem = (pReportInfo->GetStatus() == TELEMETRYREPORTINFO_STATUS_EXECUTING) ? STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_STATUS_EXECUTING) : STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_STATUS_QUEUED);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_LIST), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_LIST), nItem, nColumn, szItem);
			}
		}
	}
	for (nItem = 0, nItems = (GetTelemetryHistoricalReports(pHistoricalReports) && GetTelemetryEvents(pTriggers)) ? (INT)pHistoricalReports.GetSize() : 0, nCount = 0; nItem < nItems; nItem++)
	{
		if ((pHistoricalReportInfo = pHistoricalReports.GetAt(nItem)) && pHistoricalReportInfo->GetExecutionMode() == TELEMETRYHISTORICALREPORTINFO_EXECUTION_ATEVENT)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
			{
				for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_NAME); )
				{
					szItem = pHistoricalReportInfo->GetName();
					break;
				}
				for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_REPORT); )
				{
					szItem = pHistoricalReportInfo->GetReport();
					break;
				}
				for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_TRIGGER); )
				{
					szItem.Format(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TRIGGER_EVENT), (LPCTSTR)pHistoricalReportInfo->GetTriggeredExecution());
					szItem = (pHistoricalReportInfo->GetTriggeredExecution().IsEmpty()) ? STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TRIGGER_NOEVENT) : szItem;
					break;
				}
				for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_STATUS); )
				{
					szItem = (pTriggers.Find(pHistoricalReportInfo->GetTriggeredExecution()) >= 0) ? STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_STATUS_ACTIVE) : STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_STATUS_INACTIVE);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_TRIGGEREDLIST), nCount, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_TRIGGEREDLIST), nCount, nColumn, szItem);
			}
			nCount++;
		}
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(); nColumn < nColumns; nColumn++)
	{
		for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_ABORT_LIST, LVM_GETITEMCOUNT), nWidth = (!Listview_GetColumn(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_LIST), nColumn, szColumn, nWidth)) ? CalcColumnWidth(m_szColumns[0].GetAt(nColumn)) : nWidth; nItem < nItems; nItem++)
		{
			nWidth = max(CalcColumnWidth(Listview_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_LIST), nItem, nColumn)), nWidth);
			continue;
		}
		Listview_SetColumn(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_LIST), nColumn, m_szColumns[0].GetAt(nColumn), nWidth);
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(); nColumn < nColumns; nColumn++)
	{
		for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_ABORT_TRIGGEREDLIST, LVM_GETITEMCOUNT), nWidth = (!Listview_GetColumn(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_TRIGGEREDLIST), nColumn, szColumn, nWidth)) ? CalcColumnWidth(m_szColumns[1].GetAt(nColumn)) : nWidth; nItem < nItems; nItem++)
		{
			nWidth = max(CalcColumnWidth(Listview_GetText(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_TRIGGEREDLIST), nItem, nColumn)), nWidth);
			continue;
		}
		Listview_SetColumn(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_TRIGGEREDLIST), nColumn, m_szColumns[1].GetAt(nColumn), nWidth);
	}
	Listview_SetCurText(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_LIST), 0);
	Listview_SetCurText(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_TRIGGEREDLIST), 0);
	return((nItem == nItems) ? TRUE : FALSE);
}

INT CTelemetryReportsAbortDialog::CalcColumnWidth(LPCTSTR pszColumn)
{
	CDC  *pDC;
	INT  nWidth;
	CFont  *pOldFont;

	if ((pDC = GetDC()))
	{
		if ((pOldFont = pDC->SelectObject(GetFont())))
		{
			nWidth = pDC->GetTextExtent(pszColumn).cx;
			nWidth += 6 * pDC->GetTextExtent(SPACE).cx;
			pDC->SelectObject(pOldFont);
			ReleaseDC(pDC);
			return nWidth;
		}
		ReleaseDC(pDC);
	}
	return 0;
}

BOOL CTelemetryReportsAbortDialog::Check(BOOL bModified) CONST
{
	CUIntArray  nItems;

	return((Listview_GetSelText(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_LIST), nItems) > 0) ? TRUE : FALSE);
}

void CTelemetryReportsAbortDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryReportsAbortDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryReportsAbortDialog::PostNcDestroy()
{
	m_pReports.RemoveAll();
	m_szColumns[0].RemoveAll();
	m_szColumns[1].RemoveAll();
	return CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryReportsAbortDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryReportsAbortDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYREPORTS_ABORT_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryReportsAbortDialog message handlers

BOOL CTelemetryReportsAbortDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns[2];
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_LIST)->GetClientRect(rColumns[0]);
	GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_TRIGGEREDLIST)->GetClientRect(rColumns[1]);
	m_szColumns[0].Add(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_NAME));
	m_szColumns[0].Add(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_TYPE));
	m_szColumns[0].Add(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_TRIGGER));
	m_szColumns[0].Add(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_RANGE));
	m_szColumns[0].Add(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_STATUS));
	m_szColumns[1].Add(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_NAME));
	m_szColumns[1].Add(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_REPORT));
	m_szColumns[1].Add(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_TRIGGER));
	m_szColumns[1].Add(STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_STATUS));
	for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(), SendDlgItemMessage(IDC_TELEMETRYREPORTS_ABORT_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_LIST), nColumn, m_szColumns[0].GetAt(nColumn), (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_NAME)) ? (rColumns[0].Width() / 5) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_TYPE)) ? (rColumns[0].Width() / 6) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_TRIGGER) || m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_RANGE)) ? (rColumns[0].Width() / 4) : (rColumns[0].Width() / 7))));
		continue;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(), SendDlgItemMessage(IDC_TELEMETRYREPORTS_ABORT_TRIGGEREDLIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_TRIGGEREDLIST), nColumn, m_szColumns[1].GetAt(nColumn), (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_NAME) || m_szColumns[1].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_REPORT)) ? (rColumns[1].Width() / 5) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TELEMETRYREPORTS_ABORTDIALOG_TITLEITEM_TRIGGER)) ? ((16 * rColumns[1].Width()) / 35) : (rColumns[1].Width() / 7)));
		continue;
	}
	if (EnumJobs())
	{
		GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_ABORT_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_ABORT_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_TRIGGEREDLIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_ABORT_TRIGGEREDLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_TRIGGEREDLIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYREPORTS_ABORT_TRIGGEREDLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDOK)->EnableWindow(Check());
	}
	return TRUE;
}

void CTelemetryReportsAbortDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TELEMETRYREPORTS_ABORT_LIST, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
	{
		if (!Listview_IsSelText(GetDlgItem(IDC_TELEMETRYREPORTS_ABORT_LIST), nItem))
		{
			delete m_pReports.GetAt(nItem);
			m_pReports.SetAt(nItem, NULL);
		}
	}
	for (nItem = 0, nItems = (INT)m_pReports.GetSize(); nItem < nItems; nItem++)
	{
		if (!m_pReports.GetAt(nItem))
		{
			m_pReports.RemoveAt(nItem);
			nItems--;
			nItem--;
		}
	}
	GetTelemetryReportsService()->AbortReports(m_pReports);
	EndDialog(IDOK);
}

BOOL CTelemetryReportsAbortDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSABORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryReportsAbortDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYREPORTSABORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesArchivalsPage property page

IMPLEMENT_DYNCREATE(CTelemetryArchivesArchivalsPage, CLocalePropertyPage)

CTelemetryArchivesArchivalsPage::CTelemetryArchivesArchivalsPage() : CLocalePropertyPage(CTelemetryArchivesArchivalsPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryArchivesArchivalsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryArchivesArchivalsPage::SetArchiveFiles(CONST CHistoryStoreFiles &pFiles, BOOL bInitialize)
{
	for (m_pFiles[0].Copy(&pFiles); bInitialize; )
	{
		m_pFiles[1].Copy(&pFiles);
		break;
	}
	if (IsWindow(GetSafeHwnd()))
	{
		SetArchiveFileInfo();
		return;
	}
}

BOOL CTelemetryArchivesArchivalsPage::GetArchiveFiles(CHistoryStoreFiles &pFiles) CONST
{
	return pFiles.Copy(&m_pFiles[0]);
}

VOID CTelemetryArchivesArchivalsPage::SetArchiveOptions(CONST CHistoryStoreOptions &pOptions, BOOL bInitialize)
{
	for (m_pOptions[0].Copy(&pOptions); bInitialize; )
	{
		m_pOptions[1].Copy(&pOptions);
		break;
	}
	if (IsWindow(GetSafeHwnd()))
	{
		SetArchiveFileInfo();
		return;
	}
}

BOOL CTelemetryArchivesArchivalsPage::GetArchiveOptions(CHistoryStoreOptions &pOptions) CONST
{
	return pOptions.Copy(&m_pOptions[0]);
}

BOOL CTelemetryArchivesArchivalsPage::EnumArchiveFilesToDelete(CStringArray &szFiles) CONST
{
	szFiles.Copy(m_szDeleteFiles);
	return((szFiles.GetSize() > 0) ? TRUE : FALSE);
}

CTelemetryArchivesDialog *CTelemetryArchivesArchivalsPage::GetParent() CONST
{
	return((CTelemetryArchivesDialog *)CLocalePropertyPage::GetParent());
}

BOOL CTelemetryArchivesArchivalsPage::EnumArchiveFiles()
{
	INT  nFile;
	INT  nFiles;

	for (nFile = 0, nFiles = (INT)m_pFiles[0].GetSize(); nFile < nFiles; nFile++)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_pFiles[0].GetAt(nFile)->GetFileName());
		continue;
	}
	if (nFile == nFiles)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_SETCURSEL);
		Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES_INTERVAL), TELEMETRYARCHIVESARCHIVALSPAGE_MINIMUMUPDATEINTERVAL, TELEMETRYARCHIVESARCHIVALSPAGE_MAXIMUMUPDATEINTERVAL);
		Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE), TELEMETRYARCHIVESARCHIVALSPAGE_MINIMUMSIZE, TELEMETRYARCHIVESARCHIVALSPAGE_MAXIMUMSIZE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_OPTIONS)->EnableWindow();
		return TRUE;
	}
	return FALSE;
}

VOID CTelemetryArchivesArchivalsPage::SetArchiveFileInfo()
{
	CHistoryStoreFile  *pFile;

	if (!FindArchiveFileInfo())
	{
		if ((pFile = new CHistoryStoreFile))
		{
			pFile->SetOptions(HISTORYSTORE_OPTION_NONCYCLIC | HISTORYSTORE_OPTION_UNLIMITEDSIZE | HISTORYSTORE_OPTION_FULLUPDATES | HISTORYSTORE_OPTION_USE | HISTORYSTORE_OPTION_AUDITFAILURES);
			pFile->SetUpdateInterval(TELEMETRYARCHIVESARCHIVALSPAGE_DEFAULTUPDATEINTERVAL);
		}
		SetArchiveFileInfo(pFile);
		delete pFile;
		return;
	}
	SetArchiveFileInfo(FindArchiveFileInfo());
}
VOID CTelemetryArchivesArchivalsPage::SetArchiveFileInfo(CONST CHistoryStoreFile *pFile)
{
	CString  szFileName;
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTimeSpan  tDailyStartTime;
	CTimeSpan  tDailyStopTime;

	if (pFile)
	{
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_DELETE, (FindFileToDelete(pFile->GetFileName()) >= 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ARCHIVING, ((pFile->GetOptions() & HISTORYSTORE_OPTION_USE) || (pFile->GetOptions() & HISTORYSTORE_OPTION_DAILYUSE) || (pFile->GetOptions() & HISTORYSTORE_OPTION_LIMITEDUSE)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ALWAYS, (pFile->GetOptions() & HISTORYSTORE_OPTION_USE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY, (pFile->GetOptions() & HISTORYSTORE_OPTION_DAILYUSE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED, (pFile->GetOptions() & HISTORYSTORE_OPTION_LIMITEDUSE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY, (pFile->GetOptions() & HISTORYSTORE_OPTION_SECONDARY) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_AUDITFAILURES, (pFile->GetOptions() & HISTORYSTORE_OPTION_AUDITFAILURES) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SHOWSTATUS, (pFile->GetOptions() & HISTORYSTORE_OPTION_SHOWSTATUS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_CYCLIC, (pFile->GetOptions() & HISTORYSTORE_OPTION_CYCLIC) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_NONCYCLIC, (pFile->GetOptions() & HISTORYSTORE_OPTION_NONCYCLIC) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES, (pFile->GetOptions() & HISTORYSTORE_OPTION_FULLUPDATES) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_UNLIMITED, (pFile->GetOptions() & HISTORYSTORE_OPTION_UNLIMITEDSIZE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED, (pFile->GetOptions() & HISTORYSTORE_OPTION_LIMITEDSIZE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_COMPRESSION, (pFile->GetOptions() & HISTORYSTORE_OPTION_COMPRESSION) ? TRUE : FALSE);
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STARTTIME), (pFile->GetDailyPeriod(tDailyStartTime, tDailyStopTime)) ? CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + tDailyStartTime.GetTotalSeconds()) : tStartTime);
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STOPTIME), (pFile->GetDailyPeriod(tDailyStartTime, tDailyStopTime)) ? CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + tDailyStopTime.GetTotalSeconds()) : tStopTime);
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STARTTIME), (pFile->GetPeriod(tStartTime, tStopTime)) ? tStartTime : tStartTime);
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STOPTIME), (pFile->GetPeriod(tStartTime, tStopTime)) ? tStopTime : tStopTime);
		Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES_INTERVAL), pFile->GetUpdateInterval());
		Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE), pFile->GetFileSize() / (1024 * 1024));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->SetWindowText((!pFile->GetFileName().IsEmpty()) ? GetFreeArchiveDiskSpace(pFile->GetFileName()) : pFile->GetFileName());
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME)->SetWindowText(pFile->GetSecondaryFileName());
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE_STATIC)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE_STATIC)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_DELETE)->EnableWindow((!pFile->GetFileName().IsEmpty()) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ARCHIVING)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ALWAYS)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ARCHIVING));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ARCHIVING));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ARCHIVING));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_AUDITFAILURES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SHOWSTATUS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_CYCLIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_NONCYCLIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_UNLIMITED)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_COMPRESSION)->EnableWindow();
		return;
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_DELETE, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ARCHIVING, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ALWAYS, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_AUDITFAILURES, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SHOWSTATUS, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_CYCLIC, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_NONCYCLIC, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_UNLIMITED, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_COMPRESSION, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_DELETE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ARCHIVING)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ALWAYS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_AUDITFAILURES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SHOWSTATUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_CYCLIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_NONCYCLIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_UNLIMITED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_COMPRESSION)->EnableWindow(FALSE);
}

BOOL CTelemetryArchivesArchivalsPage::GetArchiveFileInfo(CHistoryStoreFile *pFile) CONST
{
	UINT  nOptions;
	CString  szFileName[2];
	CTimeKey  tStartTime[2];
	CTimeKey  tStopTime[2];

	nOptions = (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ALWAYS)) ? HISTORYSTORE_OPTION_USE : 0;
	nOptions |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY)) ? HISTORYSTORE_OPTION_DAILYUSE : 0;
	nOptions |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED)) ? HISTORYSTORE_OPTION_LIMITEDUSE : 0;
	nOptions |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY)) ? HISTORYSTORE_OPTION_SECONDARY : 0;
	nOptions |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_AUDITFAILURES)) ? HISTORYSTORE_OPTION_AUDITFAILURES : 0;
	nOptions |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SHOWSTATUS)) ? HISTORYSTORE_OPTION_SHOWSTATUS : 0;
	nOptions |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_CYCLIC)) ? HISTORYSTORE_OPTION_CYCLIC : 0;
	nOptions |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_NONCYCLIC)) ? HISTORYSTORE_OPTION_NONCYCLIC : 0;
	nOptions |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES)) ? HISTORYSTORE_OPTION_FULLUPDATES : 0;
	nOptions |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_UNLIMITED)) ? HISTORYSTORE_OPTION_UNLIMITEDSIZE : 0;
	nOptions |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED)) ? HISTORYSTORE_OPTION_LIMITEDSIZE : 0;
	nOptions |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_COMPRESSION)) ? HISTORYSTORE_OPTION_COMPRESSION : 0;
	for (tStartTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STARTTIME)), tStopTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STOPTIME)), tStartTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STARTTIME)), tStopTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STOPTIME)), GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->GetWindowText(szFileName[0]), GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME)->GetWindowText(szFileName[1]); nOptions & HISTORYSTORE_OPTION_LIMITEDUSE; )
	{
		pFile->SetPeriod(tStartTime[1], tStopTime[1]);
		break;
	}
	if (nOptions & HISTORYSTORE_OPTION_DAILYUSE) pFile->SetDailyPeriod(tStartTime[0].GetTime() % SECONDSPERDAY, tStopTime[0].GetTime() % SECONDSPERDAY);
	if (nOptions & HISTORYSTORE_OPTION_LIMITEDSIZE) pFile->SetFileSize(1024 * 1024 * Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE)));
	if (nOptions & HISTORYSTORE_OPTION_FULLUPDATES) pFile->SetUpdateInterval((WORD)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES_INTERVAL)));
	pFile->SetSecondaryFileName(szFileName[1]);
	pFile->SetFileName(szFileName[0]);
	pFile->SetOptions(nOptions);
	return TRUE;
}

CHistoryStoreFile *CTelemetryArchivesArchivalsPage::FindArchiveFileInfo() CONST
{
	CString  szFileName;

	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->GetWindowText(szFileName);
	return m_pFiles[0].GetAt(m_pFiles[0].Find((szFileName.IsEmpty()) ? Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES), (INT)GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->SendMessage(CB_GETCURSEL)) : szFileName));
}

INT CTelemetryArchivesArchivalsPage::FindFileToDelete(LPCTSTR pszFileName) CONST
{
	INT  nFile;
	INT  nFiles;

	for (nFile = 0, nFiles = (INT)m_szDeleteFiles.GetSize(); nFile < nFiles; nFile++)
	{
		if (!m_szDeleteFiles.GetAt(nFile).CompareNoCase(pszFileName)) break;
		continue;
	}
	return((nFile < nFiles) ? nFile : -1);
}

CString CTelemetryArchivesArchivalsPage::GetFreeArchiveDiskSpace(LPCTSTR pszFileName) CONST
{
	INT  nPos;
	INT  cbDelimiter;
	CString  szDigit;
	CString  szDelimiter;
	CString  szDiskSpace;
	CString  szDirectory;
	CLogicalDrives  cDrives;
	ULARGE_INTEGER  nDiskSpace[3];
	CStringTools  cStringTools;
	DWORDLONG  dwFreeDiskSpace;

	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->GetWindowText(szDiskSpace);
	if (GetDiskFreeSpaceEx((szDirectory = cDrives.ExtractDrive(pszFileName)), &nDiskSpace[0], &nDiskSpace[1], &nDiskSpace[2]))
	{
		if ((cbDelimiter = GetLocaleInfo(MAKELCID(GetLanguageID(), SORT_DEFAULT), LOCALE_STHOUSAND, (LPTSTR)NULL, 0)))
		{
			if (GetLocaleInfo(MAKELCID(GetLanguageID(), SORT_DEFAULT), LOCALE_STHOUSAND, szDelimiter.GetBufferSetLength(cbDelimiter - 1), cbDelimiter))
			{
				for (nPos = 0, dwFreeDiskSpace = ((DWORDLONG)nDiskSpace[0].HighPart << 32) + nDiskSpace[0].LowPart, dwFreeDiskSpace = dwFreeDiskSpace / 1024, szDigit = cStringTools.ConvertIntToString(0), szDiskSpace.Empty(), szDelimiter.ReleaseBuffer(); !nPos || dwFreeDiskSpace > 0; nPos++, dwFreeDiskSpace = dwFreeDiskSpace / 10)
				{
					szDiskSpace = (nPos > 0 && nPos % 3 == 0) ? (CString((TCHAR)(dwFreeDiskSpace % 10 + __toascii(szDigit[0]))) + szDelimiter + szDiskSpace) : (CString((TCHAR)(dwFreeDiskSpace % 10 + __toascii(szDigit[0]))) + szDiskSpace);
					continue;
				}
				return szDiskSpace;
			}
			szDelimiter.ReleaseBuffer();
		}
	}
	return((szDirectory.IsEmpty()) ? (LPCTSTR)szDiskSpace : EMPTYSTRING);
}

VOID CTelemetryArchivesArchivalsPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE)));
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_DELETE, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ARCHIVING, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ALWAYS, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STARTTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STOPTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STARTTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STOPTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SHOWSTATUS, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_CYCLIC, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_NONCYCLIC, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES_INTERVAL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_UNLIMITED, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_COMPRESSION, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_AUDITFAILURES, bCheck);
}

BOOL CTelemetryArchivesArchivalsPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (!m_pFiles[0].Compare(&m_pFiles[1]) || !m_pOptions[0].Compare(&m_pOptions[1]) || m_szDeleteFiles.GetSize() > 0) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTelemetryArchivesArchivalsPage::Check(BOOL bAll) CONST
{
	INT  nFile;
	INT  nFiles;
	CString  szFileName[2];
	CHistoryStoreFile  *pFile;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->GetWindowText(szFileName[0]);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME)->GetWindowText(szFileName[1]);
		for (nFile = 0, nFiles = (((GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->GetWindowTextLength() > 0 && m_pFiles[0].Find(szFileName[0]) >= 0 && szFileName[0].CompareNoCase(szFileName[1])) || (!GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->GetWindowTextLength() && !m_pFiles[0].GetSize())) && (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ARCHIVING) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ALWAYS) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED)) && (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_CYCLIC) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_NONCYCLIC)) && (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_UNLIMITED) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED)) && (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY) || GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME)->GetWindowTextLength() > 0)) ? (INT)m_pFiles[0].GetSize() : -1; nFile < nFiles; nFile++)
		{
			if ((pFile = m_pFiles[0].GetAt(nFile)) && pFile->GetFileName().CompareNoCase(szFileName[0]) && !pFile->GetSecondaryFileName().CompareNoCase(szFileName[1]) && !szFileName[0].IsEmpty() && !szFileName[1].IsEmpty()) break;
			continue;
		}
		return((nFile == nFiles) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

void CTelemetryArchivesArchivalsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryArchivesArchivalsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryArchivesArchivalsPage::PostNcDestroy()
{
	m_pFiles[0].RemoveAll();
	m_pFiles[1].RemoveAll();
	m_szDeleteFiles.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesArchivalsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryArchivesArchivalsPage)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_BROWSE, OnBrowseFiles)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_OPTIONS, OnOptions)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_ADD, OnAddFile)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVE, OnRemoveFile)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVEALL, OnRemoveFiles)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_DELETE, OnDeleteFile)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ARCHIVING, OnPerformArchiving)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ALWAYS, OnArchiveAlways)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY, OnArchiveDaily)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED, OnArchiveLimited)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY, OnUseSecondary)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES, OnUseUpdates)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_COMPRESSION, OnUseCompression)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_AUDITFAILURES, OnAuditFailures)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SHOWSTATUS, OnShowStatus)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_CYCLIC, OnCyclicMode)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_NONCYCLIC, OnNonCyclicMode)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_UNLIMITED, OnUnlimitedSize)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED, OnLimitedSize)
	ON_CBN_EDITCHANGE(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, OnEditchangeFileName)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, OnSelchangeFile)
	ON_CBN_KILLFOCUS(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, OnUpdateStorageMediaFreeSpace)
	ON_EN_CHANGE(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME, OnEditchangeSecondaryFileName)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STARTTIME, OnSpinchangeDailyStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STOPTIME, OnSpinchangeDailyStopTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STARTTIME, OnSpinchangeStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STOPTIME, OnSpinchangeStopTime)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES_INTERVAL, OnSpinchangeUpdates)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE, OnSpinchangeSize)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesArchivalsPage message handlers

BOOL CTelemetryArchivesArchivalsPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	if (EnumArchiveFiles())
	{
		SetArchiveFileInfo();
		AdjustToPrivileges();
	}
	return TRUE;
}

BOOL CTelemetryArchivesArchivalsPage::OnSetActive()
{
	for (GetParent()->GetArchiveFiles(m_pFiles[0]); GetParent()->IsWindowVisible(); )
	{
		SetArchiveFileInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CTelemetryArchivesArchivalsPage::OnKillActive()
{
	GetParent()->SetArchiveFiles(m_pFiles[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CTelemetryArchivesArchivalsPage::OnBrowseFiles()
{
	CString  szFileName;
	CHistoryStoreFile  cFile;
	CFileBrowseDialog  cFileBrowseDialog(this, (GetTMService()->GetDefaultTMHistoryFile(HISTORYFILE_TYPE_ARCHIVE, cFile)) ? cFile.GetFileName() : (LPCTSTR)NULL, STRING(IDS_FILEBROWSEDIALOG_TMHISTORYFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TMHISTORYFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->SetWindowText((szFileName = cFileBrowseDialog.GetPathName()));
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->SetWindowText((!szFileName.IsEmpty()) ? GetFreeArchiveDiskSpace(szFileName) : szFileName);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE_STATIC)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE_STATIC)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) < 0 && !szFileName.IsEmpty()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE) : FALSE);
	}
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->SetFocus();
}

void CTelemetryArchivesArchivalsPage::OnOptions()
{
	CTelemetryArchivesArchivalsOptionsDialog  cTelemetryArchivalsOptionsDialog(this);

	cTelemetryArchivalsOptionsDialog.DoModal();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnAddFile()
{
	INT  nIndex;
	CHistoryStoreFile  *pFile;
	CHourglassCursor  cCursor;

	if ((pFile = new CHistoryStoreFile))
	{
		if ((nIndex = (GetArchiveFileInfo(pFile)) ? m_pFiles[0].Add(pFile) : -1) >= 0)
		{
			if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pFile->GetFileName()) >= 0)
			{
				SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pFile->GetFileName()));
				GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_ADD)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE));
				GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE));
				GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_DELETE)->EnableWindow();
				SetArchiveFileInfo();
			}
			else
			{
				m_pFiles[0].RemoveAt(nIndex);
				delete pFile;
			}
		}
		else  delete pFile;
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnRemoveFile()
{
	INT  nIndex;
	CString  szFileName;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->GetWindowText(szFileName); (nIndex = m_pFiles[0].Find(szFileName)) >= 0 && SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName)) >= 0; )
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_GETCURSEL) != CB_ERR) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE) : FALSE);
		delete m_pFiles[0].GetAt(nIndex);
		m_pFiles[0].RemoveAt(nIndex);
		SetArchiveFileInfo();
		break;
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnRemoveFiles()
{
	CHourglassCursor  cCursor;

	if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_RESETCONTENT) >= 0)
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE_STATIC)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVEALL)->EnableWindow(FALSE);
		m_pFiles[0].RemoveAll();
		SetArchiveFileInfo();
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnDeleteFile()
{
	INT  nIndex;
	CString  szFileName;

	for (GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->GetWindowText(szFileName); IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_DELETE); )
	{
		m_szDeleteFiles.SetAtGrow(((nIndex = FindFileToDelete(szFileName)) < 0) ? m_szDeleteFiles.GetSize() : nIndex, szFileName);
		break;
	}
	for (; !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_DELETE); )
	{
		if ((nIndex = FindFileToDelete(szFileName)) >= 0) m_szDeleteFiles.RemoveAt(nIndex);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnSelchangeFile()
{
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_GETCURSEL));
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE));
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE));
	SetArchiveFileInfo();
}

void CTelemetryArchivesArchivalsPage::OnPerformArchiving()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ARCHIVING)) ? ((nOptions & ~(HISTORYSTORE_OPTION_DAILYUSE | HISTORYSTORE_OPTION_LIMITEDUSE)) | HISTORYSTORE_OPTION_USE) : (nOptions & ~(HISTORYSTORE_OPTION_USE | HISTORYSTORE_OPTION_DAILYUSE | HISTORYSTORE_OPTION_LIMITEDUSE)));
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ALWAYS, IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ARCHIVING));
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ALWAYS)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ARCHIVING));
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ARCHIVING));
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ARCHIVING));
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnArchiveAlways()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((nOptions & ~(HISTORYSTORE_OPTION_DAILYUSE | HISTORYSTORE_OPTION_LIMITEDUSE)) | HISTORYSTORE_OPTION_USE);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ALWAYS, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnArchiveDaily()
{
	UINT  nOptions;
	CTimeKey  tTime;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((nOptions & ~(HISTORYSTORE_OPTION_USE | HISTORYSTORE_OPTION_LIMITEDUSE)) | HISTORYSTORE_OPTION_DAILYUSE);
		pFile->SetDailyPeriod(TELEMETRYARCHIVESARCHIVALSPAGE_DAILYSTARTTIME, TELEMETRYARCHIVESARCHIVALSPAGE_DAILYSTOPTIME);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ALWAYS, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED, FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STARTTIME), CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TELEMETRYARCHIVESARCHIVALSPAGE_DAILYSTARTTIME));
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STOPTIME), CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TELEMETRYARCHIVESARCHIVALSPAGE_DAILYSTOPTIME));
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnArchiveLimited()
{
	UINT  nOptions;
	CTimeKey  tTime;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((nOptions & ~(HISTORYSTORE_OPTION_USE | HISTORYSTORE_OPTION_DAILYUSE)) | HISTORYSTORE_OPTION_LIMITEDUSE);
		pFile->SetPeriod(tTime.GetTime(), tTime.GetTime() + TELEMETRYARCHIVESARCHIVALSPAGE_LIMITEDINTERVAL);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_ALWAYS, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STARTTIME), tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STOPTIME), CTimeKey(tTime.GetTime() + TELEMETRYARCHIVESARCHIVALSPAGE_LIMITEDINTERVAL));
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnUseSecondary()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY)) ? (nOptions | HISTORYSTORE_OPTION_SECONDARY) : (nOptions & ~HISTORYSTORE_OPTION_SECONDARY));
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnUseUpdates()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES)) ? (nOptions | HISTORYSTORE_OPTION_FULLUPDATES) : (nOptions & ~HISTORYSTORE_OPTION_FULLUPDATES));
		pFile->SetUpdateInterval((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES)) ? TELEMETRYARCHIVESARCHIVALSPAGE_DEFAULTUPDATEINTERVAL : 0);
	}
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES_INTERVAL), TELEMETRYARCHIVESARCHIVALSPAGE_DEFAULTUPDATEINTERVAL);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES));
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES));
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES_INTERVAL)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnUseCompression()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_COMPRESSION)) ? (nOptions | HISTORYSTORE_OPTION_COMPRESSION) : (nOptions & ~HISTORYSTORE_OPTION_COMPRESSION));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnAuditFailures()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_AUDITFAILURES)) ? (nOptions | HISTORYSTORE_OPTION_AUDITFAILURES) : (nOptions & ~HISTORYSTORE_OPTION_AUDITFAILURES));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnShowStatus()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SHOWSTATUS)) ? (nOptions | HISTORYSTORE_OPTION_SHOWSTATUS) : (nOptions & ~HISTORYSTORE_OPTION_SHOWSTATUS));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnCyclicMode()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((nOptions & ~HISTORYSTORE_OPTION_NONCYCLIC) | HISTORYSTORE_OPTION_CYCLIC);
		pFile->SetOptions((nOptions & HISTORYSTORE_OPTION_UNLIMITEDSIZE) ? (pFile->GetOptions() & ~(HISTORYSTORE_OPTION_BACKUP | HISTORYSTORE_OPTION_BACKUPBYDEFAULT | HISTORYSTORE_OPTION_BACKUPBYSIZE | HISTORYSTORE_OPTION_BACKUPDAILY | HISTORYSTORE_OPTION_BACKUPTIME | HISTORYSTORE_OPTION_BACKUPPROTECTEDDISK | HISTORYSTORE_OPTION_BACKUPEMPTYDISK | HISTORYSTORE_OPTION_BACKUPRETRIES | HISTORYSTORE_OPTION_BACKUPAUDITFAILURES)) : pFile->GetOptions());
		pFile->SetOptions((nOptions & HISTORYSTORE_OPTION_LIMITEDSIZE) ? (pFile->GetOptions() & ~HISTORYSTORE_OPTION_BACKUPBYSIZE) : pFile->GetOptions());
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_CYCLIC, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_NONCYCLIC, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnNonCyclicMode()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((nOptions & ~HISTORYSTORE_OPTION_CYCLIC) | HISTORYSTORE_OPTION_NONCYCLIC);
		pFile->SetOptions((nOptions & HISTORYSTORE_OPTION_UNLIMITEDSIZE) ? (pFile->GetOptions() & ~HISTORYSTORE_OPTION_BACKUPBYDEFAULT) : pFile->GetOptions());
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_CYCLIC, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_NONCYCLIC, TRUE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnUnlimitedSize()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((nOptions & ~HISTORYSTORE_OPTION_LIMITEDSIZE) | HISTORYSTORE_OPTION_UNLIMITEDSIZE);
		pFile->SetOptions((nOptions & HISTORYSTORE_OPTION_CYCLIC) ? (pFile->GetOptions() & ~(HISTORYSTORE_OPTION_BACKUP | HISTORYSTORE_OPTION_BACKUPBYDEFAULT | HISTORYSTORE_OPTION_BACKUPBYSIZE | HISTORYSTORE_OPTION_BACKUPDAILY | HISTORYSTORE_OPTION_BACKUPTIME | HISTORYSTORE_OPTION_BACKUPPROTECTEDDISK | HISTORYSTORE_OPTION_BACKUPEMPTYDISK | HISTORYSTORE_OPTION_BACKUPRETRIES | HISTORYSTORE_OPTION_BACKUPAUDITFAILURES)) : pFile->GetOptions());
		pFile->SetOptions((nOptions & HISTORYSTORE_OPTION_NONCYCLIC) ? (pFile->GetOptions() & ~HISTORYSTORE_OPTION_BACKUPBYDEFAULT) : pFile->GetOptions());
		pFile->SetFileSize(0);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_UNLIMITED, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnLimitedSize()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((nOptions & ~HISTORYSTORE_OPTION_UNLIMITEDSIZE) | HISTORYSTORE_OPTION_LIMITEDSIZE);
		pFile->SetOptions((nOptions & HISTORYSTORE_OPTION_CYCLIC) ? (pFile->GetOptions() & ~HISTORYSTORE_OPTION_BACKUPBYSIZE) : pFile->GetOptions());
		pFile->SetFileSize(1024 * 1024 * TELEMETRYARCHIVESARCHIVALSPAGE_DEFAULTSIZE);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_UNLIMITED, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE), TELEMETRYARCHIVESARCHIVALSPAGE_DEFAULTSIZE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnEditchangeFileName()
{
	CString  szFileName;

	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->GetWindowText(szFileName);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) < 0 && !szFileName.IsEmpty()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_DELETE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) >= 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES_DELETE, (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) >= 0) ? ((FindFileToDelete(szFileName) >= 0) ? TRUE : FALSE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnEditchangeSecondaryFileName()
{
	CString  szFileName;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_SECONDARY_FILENAME)->GetWindowText(szFileName);
		pFile->SetSecondaryFileName(szFileName);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnSpinchangeDailyStartTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CHistoryStoreFile  *pFile;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STOPTIME)); (pFile = FindArchiveFileInfo()); )
	{
		pFile->SetDailyPeriod(tStartTime.GetTime() % SECONDSPERDAY, (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY && (tStartTime.GetTime() + 1) % SECONDSPERDAY) ? ((tStartTime.GetTime() + 1) % SECONDSPERDAY) : (max(tStartTime.GetTime(), tStopTime.GetTime()) % SECONDSPERDAY));
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STOPTIME), (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY && (tStartTime.GetTime() + 1) % SECONDSPERDAY) ? CTimeKey(tStartTime.GetTime() + 1) : max(tStartTime, tStopTime));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnSpinchangeDailyStopTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CHistoryStoreFile  *pFile;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STOPTIME)); (pFile = FindArchiveFileInfo()); )
	{
		pFile->SetDailyPeriod((tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY  &&  tStopTime.GetTime() % SECONDSPERDAY) ? ((tStopTime.GetTime() - 1) % SECONDSPERDAY) : (min(tStartTime.GetTime(), tStopTime.GetTime()) % SECONDSPERDAY), tStopTime.GetTime() % SECONDSPERDAY);
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_DAILY_STARTTIME), (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY  &&  tStopTime.GetTime() % SECONDSPERDAY) ? CTimeKey(tStopTime.GetTime() - 1) : min(tStartTime, tStopTime));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnSpinchangeStartTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CHistoryStoreFile  *pFile;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STOPTIME)); (pFile = FindArchiveFileInfo()); )
	{
		pFile->SetPeriod(tStartTime, (tStartTime >= tStopTime) ? (tStartTime.GetTime() + 1) : tStopTime.GetTime());
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STOPTIME), (tStartTime >= tStopTime) ? (tStartTime.GetTime() + 1) : tStopTime);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnSpinchangeStopTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CHistoryStoreFile  *pFile;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STOPTIME)); (pFile = FindArchiveFileInfo()); )
	{
		pFile->SetPeriod((tStartTime >= tStopTime) ? (tStopTime.GetTime() - 1) : tStartTime, tStopTime);
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_BEHAVIOR_LIMITED_STARTTIME), (tStartTime >= tStopTime) ? (tStopTime.GetTime() - 1) : tStartTime);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnSpinchangeUpdates()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo())) pFile->SetUpdateInterval((WORD)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_POLICY_UPDATES_INTERVAL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnSpinchangeSize()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo())) pFile->SetFileSize(1024 * 1024 * Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_PROPERTIES_SIZE_LIMITED_SIZE)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsPage::OnUpdateStorageMediaFreeSpace()
{
	CString  szFileName;

	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FILES)->GetWindowText(szFileName);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->SetWindowText((!szFileName.IsEmpty()) ? GetFreeArchiveDiskSpace(szFileName) : szFileName);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE_STATIC)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE_STATIC)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesArchivalsOptionsDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryArchivesArchivalsOptionsDialog, CLocaleDialog)

CTelemetryArchivesArchivalsOptionsDialog::CTelemetryArchivesArchivalsOptionsDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryArchivesArchivalsOptionsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryArchivesArchivalsOptionsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryArchivesArchivalsOptionsDialog::Initialize()
{
	return((GetParent()->GetArchiveOptions(m_pOptions[0])) ? m_pOptions[1].Copy(&m_pOptions[0]) : FALSE);
}

BOOL CTelemetryArchivesArchivalsOptionsDialog::EnumPackets()
{
	INT  nPacket;
	INT  nPackets;
	CString  szPacket;
	CDatabaseTMPacket  *pDatabaseTMPacket;

	for (nPacket = 0, nPackets = (INT)GetDatabase()->GetTMPackets()->GetSize(); nPacket < nPackets; nPacket++)
	{
		if ((pDatabaseTMPacket = GetDatabase()->GetTMPackets()->GetAt(nPacket)) != (CDatabaseTMPacket *)NULL)
		{
			szPacket.Format(STRING(IDS_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONSDIALOG_PACKETS_FORMAT), (LPCTSTR)pDatabaseTMPacket->GetDescription(), (LPCTSTR)pDatabaseTMPacket->GetTag());
			SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szPacket);
		}
	}
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET, CB_INSERTSTRING, 0, (LPARAM)STRING(IDS_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONSDIALOG_ALLPACKETS)));
	return((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
}

BOOL CTelemetryArchivesArchivalsOptionsDialog::EnumParameters()
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	for (nParameter = 0, nParameters = (INT)GetDatabase()->GetTMParameters()->GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
		{
			szParameter.Format(STRING(IDS_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONSDIALOG_PARAMETERS_FORMAT), (LPCTSTR)pDatabaseTMParameter->GetDescription(), (LPCTSTR)pDatabaseTMParameter->GetTag());
			SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameter);
		}
	}
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER, CB_INSERTSTRING, 0, (LPARAM)STRING(IDS_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONSDIALOG_ALLPARAMETERS)));
	return((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
}

VOID CTelemetryArchivesArchivalsOptionsDialog::ShowOptionsInfo()
{
	CHistoryStoreOptionInfo  *pOptionInfo;

	if ((pOptionInfo = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPACKET)))
	{
		Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_DAYS), pOptionInfo->GetRetention().GetTotalSeconds() / SECONDSPERDAY);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION, pOptionInfo->GetRetention().GetTotalSeconds() >= 0);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_NORETENTION, pOptionInfo->GetRetention().GetTotalSeconds() < 0);
	}
	else
	{
		if ((pOptionInfo = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPACKET, TRUE)))
		{
			Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_DAYS), pOptionInfo->GetRetention().GetTotalSeconds() / SECONDSPERDAY);
			CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION, pOptionInfo->GetRetention().GetTotalSeconds() >= 0);
			CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_NORETENTION, pOptionInfo->GetRetention().GetTotalSeconds() < 0);
		}
		else
		{
			CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION, FALSE);
			CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_NORETENTION, TRUE);
		}
	}
	if ((pOptionInfo = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPARAMETER)))
	{
		Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_DAYS), pOptionInfo->GetRetention().GetTotalSeconds() / SECONDSPERDAY);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION, pOptionInfo->GetRetention().GetTotalSeconds() >= 0);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_NORETENTION, pOptionInfo->GetRetention().GetTotalSeconds() < 0);
	}
	else
	{
		if ((pOptionInfo = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPARAMETER, TRUE)))
		{
			Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_DAYS), pOptionInfo->GetRetention().GetTotalSeconds() / SECONDSPERDAY);
			CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION, pOptionInfo->GetRetention().GetTotalSeconds() >= 0);
			CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_NORETENTION, pOptionInfo->GetRetention().GetTotalSeconds() < 0);
		}
		else
		{
			CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION, FALSE);
			CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_NORETENTION, TRUE);
		}
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_DAYS)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION));
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION));
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_DAYS)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION));
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION));
}

BOOL CTelemetryArchivesArchivalsOptionsDialog::AddOptionInfo(CHistoryStoreOptionInfo *pOptionInfo)
{
	return((m_pOptions[0].Add(pOptionInfo) >= 0) ? TRUE : FALSE);
}

BOOL CTelemetryArchivesArchivalsOptionsDialog::RemoveOptionInfo(CHistoryStoreOptionInfo *pOptionInfo)
{
	INT  nIndex;

	if ((nIndex = m_pOptions[0].Find(pOptionInfo->GetType(), pOptionInfo->GetTag())) >= 0)
	{
		m_pOptions[0].RemoveAt(nIndex);
		delete pOptionInfo;
		return TRUE;
	}
	return FALSE;
}

CHistoryStoreOptionInfo *CTelemetryArchivesArchivalsOptionsDialog::FindOptionInfo(UINT nType, BOOL bAll) CONST
{
	CString  szPacket;
	CString  szParameter;

	if (nType == HISTORYSTOREOPTION_TYPE_TMPACKET)
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET)->GetWindowText(szPacket);
		return m_pOptions[0].GetAt(m_pOptions[0].Find(nType, (!bAll) ? ExtractTag(nType, szPacket) : EMPTYSTRING));
	}
	if (nType == HISTORYSTOREOPTION_TYPE_TMPARAMETER)
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER)->GetWindowText(szParameter);
		return m_pOptions[0].GetAt(m_pOptions[0].Find(nType, (!bAll) ? ExtractTag(nType, szParameter) : EMPTYSTRING));
	}
	return((CHistoryStoreOptionInfo *)NULL);
}

CString CTelemetryArchivesArchivalsOptionsDialog::ExtractTag(UINT nType, LPCTSTR pszDetails) CONST
{
	INT  nPos;
	CString  szTag;
	CString  szFormat;
	CString  szDetails;

	if (nType == HISTORYSTOREOPTION_TYPE_TMPACKET)
	{
		if (szDetails != STRING(IDS_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONSDIALOG_ALLPACKETS))
		{
			for (szFormat.Format(STRING(IDS_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONSDIALOG_PACKETS_FORMAT), EMPTYSTRING, EMPTYSTRING), szDetails = pszDetails, szFormat = szFormat.Left(szFormat.GetLength() - 1), nPos = szDetails.GetLength() - szFormat.GetLength(); nPos >= 0; nPos--)
			{
				if (!_tcsncmp(&pszDetails[nPos], szFormat, szFormat.GetLength())) break;
				continue;
			}
			return((nPos >= 0) ? szDetails.Mid(nPos + szFormat.GetLength(), szDetails.GetLength() - szFormat.GetLength() - nPos - 1) : EMPTYSTRING);
		}
		return EMPTYSTRING;
	}
	if (nType == HISTORYSTOREOPTION_TYPE_TMPARAMETER)
	{
		if (szDetails != STRING(IDS_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONSDIALOG_ALLPARAMETERS))
		{
			for (szFormat.Format(STRING(IDS_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONSDIALOG_PARAMETERS_FORMAT), EMPTYSTRING, EMPTYSTRING), szDetails = pszDetails, szFormat = szFormat.Left(szFormat.GetLength() - 1), nPos = szDetails.GetLength() - szFormat.GetLength(); nPos >= 0; nPos--)
			{
				if (!_tcsncmp(&pszDetails[nPos], szFormat, szFormat.GetLength())) break;
				continue;
			}
			return((nPos >= 0) ? szDetails.Mid(nPos + szFormat.GetLength(), szDetails.GetLength() - szFormat.GetLength() - nPos - 1) : EMPTYSTRING);
		}
	}
	return EMPTYSTRING;
}

CTelemetryArchivesArchivalsPage *CTelemetryArchivesArchivalsOptionsDialog::GetParent() CONST
{
	return((CTelemetryArchivesArchivalsPage *)CLocaleDialog::GetParent());
}

VOID CTelemetryArchivesArchivalsOptionsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE)));
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_DAYS, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_NORETENTION, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_DAYS, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_NORETENTION, bCheck);
}

BOOL CTelemetryArchivesArchivalsOptionsDialog::IsModified() CONST
{
	return !m_pOptions[0].Compare(&m_pOptions[1]);
}

BOOL CTelemetryArchivesArchivalsOptionsDialog::Check(BOOL bModified) CONST
{
	return(!bModified || IsModified());
}

void CTelemetryArchivesArchivalsOptionsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryArchivesArchivalsOptionsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryArchivesArchivalsOptionsDialog::PostNcDestroy()
{
	m_pOptions[0].RemoveAll();
	m_pOptions[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesArchivalsOptionsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryArchivesArchivalsOptionsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION, OnPacketRetention)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_NORETENTION, OnPacketNoRetention)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION, OnParameterRetention)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_NORETENTION, OnParameterNoRetention)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET, OnSelchangePacket)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER, OnSelchangeParameter)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_DAYS, OnSpinchangePacketRetention)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_DAYS, OnSpinchangeParameterRetention)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesArchivalsOptionsDialog message handlers

BOOL CTelemetryArchivesArchivalsOptionsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	if (EnumPackets() && EnumParameters())
	{
		Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_DAYS), TELEMETRYARCHIVESARCHIVALSOPTIONS_MINIMUMRETENTION, TELEMETRYARCHIVESARCHIVALSOPTIONS_MAXIMUMRETENTION);
		Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_DAYS), TELEMETRYARCHIVESARCHIVALSOPTIONS_MINIMUMRETENTION, TELEMETRYARCHIVESARCHIVALSOPTIONS_MAXIMUMRETENTION);
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_NORETENTION)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_NORETENTION)->EnableWindow();
		ShowOptionsInfo();
	}
	AdjustToPrivileges();
	return TRUE;
}

void CTelemetryArchivesArchivalsOptionsDialog::OnPacketRetention()
{
	INT  nOption;
	INT  nOptions;
	CString  szPacket;
	CHistoryStoreOptionInfo  *pOptionInfo[2];

	for (; (pOptionInfo[0] = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPACKET)); )
	{
		if ((pOptionInfo[1] = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPACKET, TRUE)))
		{
			if (pOptionInfo[0]->GetTag().Compare(pOptionInfo[1]->GetTag()) != 0)
			{
				if (pOptionInfo[1]->GetRetention().GetTotalSeconds() != TELEMETRYARCHIVESARCHIVALSOPTIONS_DEFAULTRETENTION*SECONDSPERDAY)
				{
					pOptionInfo[0]->SetRetention(TELEMETRYARCHIVESARCHIVALSOPTIONS_DEFAULTRETENTION*SECONDSPERDAY);
					break;
				}
				RemoveOptionInfo(pOptionInfo[0]);
				break;
			}
			for (nOption = 0, nOptions = (INT)m_pOptions[0].GetSize(); nOption < nOptions; nOption++)
			{
				if ((pOptionInfo[1] = m_pOptions[0].GetAt(nOption)) && pOptionInfo[1]->GetType() == HISTORYSTOREOPTION_TYPE_TMPACKET)
				{
					m_pOptions[0].RemoveAt(nOption);
					delete pOptionInfo[1];
					nOptions--;
					nOption--;
				}
			}
			pOptionInfo[0] = (CHistoryStoreOptionInfo *)NULL;
			break;
		}
		pOptionInfo[0]->SetRetention(TELEMETRYARCHIVESARCHIVALSOPTIONS_DEFAULTRETENTION*SECONDSPERDAY);
		break;
	}
	if ((pOptionInfo[0] = (!pOptionInfo[0]) ? new CHistoryStoreOptionInfo : (CHistoryStoreOptionInfo *)NULL))
	{
		for (GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET)->GetWindowText(szPacket); !szPacket.Compare(STRING(IDS_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONSDIALOG_ALLPACKETS)); )
		{
			for (nOption = 0, nOptions = (INT)m_pOptions[0].GetSize(); nOption < nOptions; nOption++)
			{
				if ((pOptionInfo[1] = m_pOptions[0].GetAt(nOption)) != (CHistoryStoreOptionInfo *)NULL)
				{
					if (pOptionInfo[1]->GetType() == HISTORYSTOREOPTION_TYPE_TMPACKET)
					{
						m_pOptions[0].RemoveAt(nOption);
						delete pOptionInfo[1];
						nOptions--;
						nOption--;
					}
				}
			}
			break;
		}
		for (pOptionInfo[0]->SetType(HISTORYSTOREOPTION_TYPE_TMPACKET), pOptionInfo[0]->SetTag(ExtractTag(HISTORYSTOREOPTION_TYPE_TMPACKET, szPacket)), pOptionInfo[0]->SetRetention(TELEMETRYARCHIVESARCHIVALSOPTIONS_DEFAULTRETENTION*SECONDSPERDAY); !AddOptionInfo(pOptionInfo[0]); )
		{
			delete pOptionInfo[0];
			break;
		}
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_NORETENTION, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_DAYS), TELEMETRYARCHIVESARCHIVALSOPTIONS_DEFAULTRETENTION);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_DAYS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_DAYS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsOptionsDialog::OnPacketNoRetention()
{
	INT  nOption;
	INT  nOptions;
	CString  szPacket;
	CHistoryStoreOptionInfo  *pOptionInfo[2];

	for (; (pOptionInfo[0] = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPACKET)); )
	{
		if ((pOptionInfo[1] = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPACKET, TRUE)))
		{
			if (pOptionInfo[0]->GetTag().Compare(pOptionInfo[1]->GetTag()) != 0)
			{
				if (pOptionInfo[1]->GetRetention().GetTotalSeconds() >= 0)
				{
					pOptionInfo[0]->SetRetention(-1);
					break;
				}
				RemoveOptionInfo(pOptionInfo[0]);
				break;
			}
			for (nOption = 0, nOptions = (INT)m_pOptions[0].GetSize(); nOption < nOptions; nOption++)
			{
				if ((pOptionInfo[1] = m_pOptions[0].GetAt(nOption)) && pOptionInfo[1]->GetType() == HISTORYSTOREOPTION_TYPE_TMPACKET)
				{
					m_pOptions[0].RemoveAt(nOption);
					delete pOptionInfo[1];
					nOptions--;
					nOption--;
				}
			}
			break;
		}
		RemoveOptionInfo(pOptionInfo[0]);
		break;
	}
	if ((pOptionInfo[0] = (!pOptionInfo[0]) ? new CHistoryStoreOptionInfo : (CHistoryStoreOptionInfo *)NULL))
	{
		for (GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET)->GetWindowText(szPacket); !szPacket.Compare(STRING(IDS_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONSDIALOG_ALLPACKETS)); )
		{
			for (nOption = 0, nOptions = (INT)m_pOptions[0].GetSize(); nOption < nOptions; nOption++)
			{
				if ((pOptionInfo[1] = m_pOptions[0].GetAt(nOption)) != (CHistoryStoreOptionInfo *)NULL)
				{
					if (pOptionInfo[1]->GetType() == HISTORYSTOREOPTION_TYPE_TMPACKET)
					{
						m_pOptions[0].RemoveAt(nOption);
						delete pOptionInfo[1];
						nOptions--;
						nOption--;
					}
				}
			}
			break;
		}
		for (pOptionInfo[0]->SetType(HISTORYSTOREOPTION_TYPE_TMPACKET), pOptionInfo[0]->SetTag(ExtractTag(HISTORYSTOREOPTION_TYPE_TMPACKET, szPacket)), pOptionInfo[0]->SetRetention(-1); !pOptionInfo[0]->GetTag().GetLength() || !AddOptionInfo(pOptionInfo[0]); )
		{
			delete pOptionInfo[0];
			break;
		}
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_NORETENTION, TRUE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_DAYS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsOptionsDialog::OnParameterRetention()
{
	INT  nOption;
	INT  nOptions;
	CString  szParameter;
	CHistoryStoreOptionInfo  *pOptionInfo[2];

	for (; (pOptionInfo[0] = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPARAMETER)); )
	{
		if ((pOptionInfo[1] = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPARAMETER, TRUE)))
		{
			if (pOptionInfo[0]->GetTag().Compare(pOptionInfo[1]->GetTag()) != 0)
			{
				if (pOptionInfo[1]->GetRetention().GetTotalSeconds() != TELEMETRYARCHIVESARCHIVALSOPTIONS_DEFAULTRETENTION*SECONDSPERDAY)
				{
					pOptionInfo[0]->SetRetention(TELEMETRYARCHIVESARCHIVALSOPTIONS_DEFAULTRETENTION*SECONDSPERDAY);
					break;
				}
				RemoveOptionInfo(pOptionInfo[0]);
				break;
			}
			for (nOption = 0, nOptions = (INT)m_pOptions[0].GetSize(); nOption < nOptions; nOption++)
			{
				if ((pOptionInfo[1] = m_pOptions[0].GetAt(nOption)) && pOptionInfo[1]->GetType() == HISTORYSTOREOPTION_TYPE_TMPARAMETER)
				{
					m_pOptions[0].RemoveAt(nOption);
					delete pOptionInfo[1];
					nOptions--;
					nOption--;
				}
			}
			pOptionInfo[0] = (CHistoryStoreOptionInfo *)NULL;
			break;
		}
		pOptionInfo[0]->SetRetention(TELEMETRYARCHIVESARCHIVALSOPTIONS_DEFAULTRETENTION*SECONDSPERDAY);
		break;
	}
	if ((pOptionInfo[0] = (!pOptionInfo[0]) ? new CHistoryStoreOptionInfo : (CHistoryStoreOptionInfo *)NULL))
	{
		for (GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER)->GetWindowText(szParameter); !szParameter.Compare(STRING(IDS_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONSDIALOG_ALLPARAMETERS)); )
		{
			for (nOption = 0, nOptions = (INT)m_pOptions[0].GetSize(); nOption < nOptions; nOption++)
			{
				if ((pOptionInfo[1] = m_pOptions[0].GetAt(nOption)) != (CHistoryStoreOptionInfo *)NULL)
				{
					if (pOptionInfo[1]->GetType() == HISTORYSTOREOPTION_TYPE_TMPARAMETER)
					{
						m_pOptions[0].RemoveAt(nOption);
						delete pOptionInfo[1];
						nOptions--;
						nOption--;
					}
				}
			}
			break;
		}
		for (pOptionInfo[0]->SetType(HISTORYSTOREOPTION_TYPE_TMPARAMETER), pOptionInfo[0]->SetTag(ExtractTag(HISTORYSTOREOPTION_TYPE_TMPARAMETER, szParameter)), pOptionInfo[0]->SetRetention(TELEMETRYARCHIVESARCHIVALSOPTIONS_DEFAULTRETENTION*SECONDSPERDAY); !AddOptionInfo(pOptionInfo[0]); )
		{
			delete pOptionInfo[0];
			break;
		}
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_NORETENTION, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_DAYS), TELEMETRYARCHIVESARCHIVALSOPTIONS_DEFAULTRETENTION);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_DAYS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_DAYS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsOptionsDialog::OnParameterNoRetention()
{
	INT  nOption;
	INT  nOptions;
	CString  szParameter;
	CHistoryStoreOptionInfo  *pOptionInfo[2];

	for (; (pOptionInfo[0] = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPARAMETER)); )
	{
		if ((pOptionInfo[1] = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPARAMETER, TRUE)))
		{
			if (pOptionInfo[0]->GetTag().Compare(pOptionInfo[1]->GetTag()) != 0)
			{
				if (pOptionInfo[1]->GetRetention().GetTotalSeconds() >= 0)
				{
					pOptionInfo[0]->SetRetention(-1);
					break;
				}
				RemoveOptionInfo(pOptionInfo[0]);
				break;
			}
			for (nOption = 0, nOptions = (INT)m_pOptions[0].GetSize(); nOption < nOptions; nOption++)
			{
				if ((pOptionInfo[1] = m_pOptions[0].GetAt(nOption)) && pOptionInfo[1]->GetType() == HISTORYSTOREOPTION_TYPE_TMPARAMETER)
				{
					m_pOptions[0].RemoveAt(nOption);
					delete pOptionInfo[1];
					nOptions--;
					nOption--;
				}
			}
			break;
		}
		RemoveOptionInfo(pOptionInfo[0]);
		break;
	}
	if ((pOptionInfo[0] = (!pOptionInfo[0]) ? new CHistoryStoreOptionInfo : (CHistoryStoreOptionInfo *)NULL))
	{
		for (GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER)->GetWindowText(szParameter); !szParameter.Compare(STRING(IDS_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONSDIALOG_ALLPARAMETERS)); )
		{
			for (nOption = 0, nOptions = (INT)m_pOptions[0].GetSize(); nOption < nOptions; nOption++)
			{
				if ((pOptionInfo[1] = m_pOptions[0].GetAt(nOption)) != (CHistoryStoreOptionInfo *)NULL)
				{
					if (pOptionInfo[1]->GetType() == HISTORYSTOREOPTION_TYPE_TMPARAMETER)
					{
						m_pOptions[0].RemoveAt(nOption);
						delete pOptionInfo[1];
						nOptions--;
						nOption--;
					}
				}
			}
			break;
		}
		for (pOptionInfo[0]->SetType(HISTORYSTOREOPTION_TYPE_TMPARAMETER), pOptionInfo[0]->SetTag(ExtractTag(HISTORYSTOREOPTION_TYPE_TMPARAMETER, szParameter)), pOptionInfo[0]->SetRetention(-1); !pOptionInfo[0]->GetTag().GetLength() || !AddOptionInfo(pOptionInfo[0]); )
		{
			delete pOptionInfo[0];
			break;
		}
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_NORETENTION, TRUE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_DAYS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsOptionsDialog::OnSelchangePacket()
{
	ShowOptionsInfo();
}

void CTelemetryArchivesArchivalsOptionsDialog::OnSelchangeParameter()
{
	ShowOptionsInfo();
}

void CTelemetryArchivesArchivalsOptionsDialog::OnSpinchangePacketRetention()
{
	INT  nOption;
	INT  nOptions;
	CString  szPacket;
	CHistoryStoreOptionInfo  *pOptionInfo[2];

	for (; (pOptionInfo[0] = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPACKET)); )
	{
		if ((pOptionInfo[1] = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPACKET, TRUE)))
		{
			if (pOptionInfo[0]->GetTag().Compare(pOptionInfo[1]->GetTag()) != 0)
			{
				if (pOptionInfo[1]->GetRetention().GetTotalSeconds() != Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_DAYS))*SECONDSPERDAY)
				{
					pOptionInfo[0]->SetRetention(Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_DAYS))*SECONDSPERDAY);
					break;
				}
				RemoveOptionInfo(pOptionInfo[0]);
				break;
			}
			for (nOption = 0, nOptions = (INT)m_pOptions[0].GetSize(); nOption < nOptions; nOption++)
			{
				if ((pOptionInfo[1] = m_pOptions[0].GetAt(nOption)) && pOptionInfo[1]->GetType() == HISTORYSTOREOPTION_TYPE_TMPACKET)
				{
					m_pOptions[0].RemoveAt(nOption);
					delete pOptionInfo[1];
					nOptions--;
					nOption--;
				}
			}
			pOptionInfo[0] = (CHistoryStoreOptionInfo *)NULL;
			break;
		}
		pOptionInfo[0]->SetRetention(Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_DAYS))*SECONDSPERDAY);
		break;
	}
	if ((pOptionInfo[0] = (!pOptionInfo[0]) ? new CHistoryStoreOptionInfo : (CHistoryStoreOptionInfo *)NULL))
	{
		for (GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET)->GetWindowText(szPacket); !szPacket.Compare(STRING(IDS_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONSDIALOG_ALLPACKETS)); )
		{
			for (nOption = 0, nOptions = (INT)m_pOptions[0].GetSize(); nOption < nOptions; nOption++)
			{
				if ((pOptionInfo[1] = m_pOptions[0].GetAt(nOption)) != (CHistoryStoreOptionInfo *)NULL)
				{
					if (pOptionInfo[1]->GetType() == HISTORYSTOREOPTION_TYPE_TMPACKET)
					{
						m_pOptions[0].RemoveAt(nOption);
						delete pOptionInfo[1];
						nOptions--;
						nOption--;
					}
				}
			}
			break;
		}
		for (pOptionInfo[0]->SetType(HISTORYSTOREOPTION_TYPE_TMPACKET), pOptionInfo[0]->SetTag(ExtractTag(HISTORYSTOREOPTION_TYPE_TMPACKET, szPacket)), pOptionInfo[0]->SetRetention(Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPACKET_RETENTION_DAYS))*SECONDSPERDAY); !AddOptionInfo(pOptionInfo[0]); )
		{
			delete pOptionInfo[0];
			break;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsOptionsDialog::OnSpinchangeParameterRetention()
{
	INT  nOption;
	INT  nOptions;
	CString  szParameter;
	CHistoryStoreOptionInfo  *pOptionInfo[2];

	for (; (pOptionInfo[0] = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPARAMETER)); )
	{
		if ((pOptionInfo[1] = FindOptionInfo(HISTORYSTOREOPTION_TYPE_TMPARAMETER, TRUE)))
		{
			if (pOptionInfo[0]->GetTag().Compare(pOptionInfo[1]->GetTag()) != 0)
			{
				if (pOptionInfo[1]->GetRetention().GetTotalSeconds() != Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_DAYS))*SECONDSPERDAY)
				{
					pOptionInfo[0]->SetRetention(Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_DAYS))*SECONDSPERDAY);
					break;
				}
				RemoveOptionInfo(pOptionInfo[0]);
				break;
			}
			for (nOption = 0, nOptions = (INT)m_pOptions[0].GetSize(); nOption < nOptions; nOption++)
			{
				if ((pOptionInfo[1] = m_pOptions[0].GetAt(nOption)) && pOptionInfo[1]->GetType() == HISTORYSTOREOPTION_TYPE_TMPARAMETER)
				{
					m_pOptions[0].RemoveAt(nOption);
					delete pOptionInfo[1];
					nOptions--;
					nOption--;
				}
			}
			pOptionInfo[0] = (CHistoryStoreOptionInfo *)NULL;
			break;
		}
		pOptionInfo[0]->SetRetention(Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_DAYS))*SECONDSPERDAY);
		break;
	}
	if ((pOptionInfo[0] = (!pOptionInfo[0]) ? new CHistoryStoreOptionInfo : (CHistoryStoreOptionInfo *)NULL))
	{
		for (GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER)->GetWindowText(szParameter); !szParameter.Compare(STRING(IDS_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONSDIALOG_ALLPARAMETERS)); )
		{
			for (nOption = 0, nOptions = (INT)m_pOptions[0].GetSize(); nOption < nOptions; nOption++)
			{
				if ((pOptionInfo[1] = m_pOptions[0].GetAt(nOption)) != (CHistoryStoreOptionInfo *)NULL)
				{
					if (pOptionInfo[1]->GetType() == HISTORYSTOREOPTION_TYPE_TMPARAMETER)
					{
						m_pOptions[0].RemoveAt(nOption);
						delete pOptionInfo[1];
						nOptions--;
						nOption--;
					}
				}
			}
			break;
		}
		for (pOptionInfo[0]->SetType(HISTORYSTOREOPTION_TYPE_TMPARAMETER), pOptionInfo[0]->SetTag(ExtractTag(HISTORYSTOREOPTION_TYPE_TMPARAMETER, szParameter)), pOptionInfo[0]->SetRetention(Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_ARCHIVALSPAGE_OPTIONS_TMPARAMETER_RETENTION_DAYS))*SECONDSPERDAY); !AddOptionInfo(pOptionInfo[0]); )
		{
			delete pOptionInfo[0];
			break;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesArchivalsOptionsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	GetParent()->SetArchiveOptions(m_pOptions[0]);
	EndDialog(IDOK);
}

BOOL CTelemetryArchivesArchivalsOptionsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYARCHIVESARCHIVALSOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryArchivesArchivalsOptionsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYARCHIVESARCHIVALSOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesRetrievalsPage property page

IMPLEMENT_DYNCREATE(CTelemetryArchivesRetrievalsPage, CLocalePropertyPage)

CTelemetryArchivesRetrievalsPage::CTelemetryArchivesRetrievalsPage() : CLocalePropertyPage(CTelemetryArchivesRetrievalsPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryArchivesRetrievalsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryArchivesRetrievalsPage::SetRetrieveFiles(CONST CHistoryStoreFiles &pFiles, BOOL bInitialize)
{
	for (m_pFiles[0].Copy(&pFiles); bInitialize; )
	{
		m_pFiles[1].Copy(&pFiles);
		break;
	}
	if (IsWindow(GetSafeHwnd()))
	{
		SetRetrieveFileInfo();
		return;
	}
}

BOOL CTelemetryArchivesRetrievalsPage::GetRetrieveFiles(CHistoryStoreFiles &pFiles) CONST
{
	return pFiles.Copy(&m_pFiles[0]);
}

VOID CTelemetryArchivesRetrievalsPage::SetDefaultRetrieveFile(CONST CHistoryStoreFile &cFile, BOOL bInitialize)
{
	for (m_szDefaultFile[0] = cFile.GetFileName(); bInitialize; )
	{
		m_szDefaultFile[1] = cFile.GetFileName();
		break;
	}
	if (IsWindow(GetSafeHwnd()))
	{
		SetRetrieveFileInfo();
		return;
	}
}

VOID CTelemetryArchivesRetrievalsPage::GetDefaultRetrieveFile(CHistoryStoreFile &cFile) CONST
{
	cFile.SetFileName(m_szDefaultFile[0]);
}

VOID CTelemetryArchivesRetrievalsPage::SetBrowseOptions(CONST CUIntArray &nOptions, CONST CStringArray &szDirectories, BOOL bInitialize)
{
	if (nOptions.GetSize() == szDirectories.GetSize())
	{
		for (m_szBrowseDirectories[0].Copy(szDirectories), m_nBrowseOptions[0].Copy(nOptions); bInitialize; )
		{
			m_szBrowseDirectories[1].Copy(szDirectories);
			m_nBrowseOptions[1].Copy(nOptions);
			break;
		}
		if (IsWindow(GetSafeHwnd()))
		{
			SetRetrieveFileInfo();
			return;
		}
	}
}

BOOL CTelemetryArchivesRetrievalsPage::GetBrowseOptions(CUIntArray &nOptions, CStringArray &szDirectories) CONST
{
	nOptions.Copy(m_nBrowseOptions[0]);
	szDirectories.Copy(m_szBrowseDirectories[0]);
	return((nOptions.GetSize() == szDirectories.GetSize()) ? TRUE : FALSE);
}

CTelemetryArchivesDialog *CTelemetryArchivesRetrievalsPage::GetParent() CONST
{
	return((CTelemetryArchivesDialog *)CLocalePropertyPage::GetParent());
}

BOOL CTelemetryArchivesRetrievalsPage::EnumRetrieveFiles()
{
	INT  nFile;
	INT  nFiles;
	CHistoryStoreFile  cFile;

	for (nFile = 0, nFiles = (INT)m_pFiles[0].GetSize(); nFile < nFiles; nFile++)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_pFiles[0].GetAt(nFile)->GetFileName());
		continue;
	}
	if (nFile == nFiles)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((GetTMService()->GetDefaultTMHistoryFile(HISTORYFILE_TYPE_RETRIEVE, cFile)) ? (LPCTSTR)cFile.GetFileName() : EMPTYSTRING)), 0));
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_INSPECT)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE));
		return TRUE;
	}
	return FALSE;
}

VOID CTelemetryArchivesRetrievalsPage::SetRetrieveFileInfo()
{
	CHistoryStoreFile  *pFile;

	if (!FindRetrieveFileInfo())
	{
		if ((pFile = new CHistoryStoreFile)) GetRetrieveFileInfo(pFile);
		SetRetrieveFileInfo(pFile);
		delete pFile;
		return;
	}
	SetRetrieveFileInfo(FindRetrieveFileInfo());
}
VOID CTelemetryArchivesRetrievalsPage::SetRetrieveFileInfo(CONST CHistoryStoreFile *pFile)
{
	if (pFile != (CONST CHistoryStoreFile *) NULL)
	{
		CheckDlgButton(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_DEFAULT, (!pFile->GetFileName().IsEmpty() && !m_szDefaultFile[0].CompareNoCase(pFile->GetFileName())) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE, CheckBrowseOption(HISTORYSTORE_OPTION_ANYFILES));
		CheckDlgButton(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES, CheckBrowseOption(HISTORYSTORE_OPTION_TIMETAGGEDFILES));
		CheckDlgButton(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES, CheckBrowseOption(HISTORYSTORE_OPTION_ENUMERATEDFILES));
		SetDlgItemText(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE_DIRECTORY, (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE)) ? (LPCTSTR)GetBrowseDirectory(HISTORYSTORE_OPTION_ANYFILES) : EMPTYSTRING);
		SetDlgItemText(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES_DIRECTORY, (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES)) ? (LPCTSTR)GetBrowseDirectory(HISTORYSTORE_OPTION_TIMETAGGEDFILES) : EMPTYSTRING);
		SetDlgItemText(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES_DIRECTORY, (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES)) ? (LPCTSTR)GetBrowseDirectory(HISTORYSTORE_OPTION_ENUMERATEDFILES) : EMPTYSTRING);
		SetDlgItemText(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE, (!pFile->GetFileName().IsEmpty()) ? GetFreeRetrieveDiskSpace(pFile->GetFileName()) : EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE_STATIC)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE_STATIC)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_DEFAULT)->EnableWindow((!pFile->GetFileName().IsEmpty()) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_INSPECT)->EnableWindow((!pFile->GetFileName().IsEmpty()) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_LIST)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_DIRECTORY)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES));
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE_DIRECTORY)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE));
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES_DIRECTORY)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES));
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES_DIRECTORY)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES));
		ShowDataSourceInfo(pFile->GetFileName());
		return;
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_DEFAULT, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES, FALSE);
	SetDlgItemText(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE_DIRECTORY, EMPTYSTRING);
	SetDlgItemText(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES_DIRECTORY, EMPTYSTRING);
	SetDlgItemText(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES_DIRECTORY, EMPTYSTRING);
	SetDlgItemText(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE, EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_DEFAULT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_INSPECT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_DIRECTORY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE_DIRECTORY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES_DIRECTORY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES_DIRECTORY)->EnableWindow(FALSE);
	ShowDataSourceInfo();
}

BOOL CTelemetryArchivesRetrievalsPage::GetRetrieveFileInfo(CHistoryStoreFile *pFile) CONST
{
	CString  szFileName;

	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->GetWindowText(szFileName);
	pFile->SetFileName(szFileName);
	return TRUE;
}

CHistoryStoreFile *CTelemetryArchivesRetrievalsPage::FindRetrieveFileInfo() CONST
{
	CString  szFileName;

	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->GetWindowText(szFileName);
	return m_pFiles[0].GetAt(m_pFiles[0].Find((szFileName.IsEmpty()) ? Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES), (INT)GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->SendMessage(CB_GETCURSEL)) : szFileName));
}

VOID CTelemetryArchivesRetrievalsPage::ShowDataSourceInfo(LPCTSTR pszFileName)
{
	CString  szProduct;
	CString  szCompany;
	CString  szTrademark;
	CString  szSpacecraft;
	CString  szStartTime;
	CString  szStopTime;
	CString  szCreationTime;
	CString  szDataSourceType;
	CString  szDataSourceSize;

	if (CheckRetrieveFile(pszFileName, szProduct, szCompany, szTrademark, szSpacecraft, szDataSourceType, szStartTime, szStopTime, szCreationTime, szDataSourceSize))
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_PRODUCT)->SetWindowText(szProduct);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_COMPANY)->SetWindowText(szCompany);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_SPACECRAFT)->SetWindowText(szSpacecraft);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TYPE)->SetWindowText(szDataSourceType);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STARTTIME)->SetWindowText(szStartTime);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STOPTIME)->SetWindowText(szStopTime);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_CREATIONTIME)->SetWindowText(szCreationTime);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_SIZE)->SetWindowText(szDataSourceSize);
	}
	else
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_PRODUCT)->SetWindowText((szProduct = EMPTYSTRING));
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_COMPANY)->SetWindowText((szCompany = EMPTYSTRING));
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_SPACECRAFT)->SetWindowText((szSpacecraft = EMPTYSTRING));
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TYPE)->SetWindowText((szDataSourceType = EMPTYSTRING));
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STARTTIME)->SetWindowText((szStartTime = EMPTYSTRING));
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STOPTIME)->SetWindowText((szStopTime = EMPTYSTRING));
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_CREATIONTIME)->SetWindowText((szCreationTime = EMPTYSTRING));
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_SIZE)->SetWindowText((szDataSourceSize = EMPTYSTRING));
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_COMMENTS)->EnableWindow(szProduct.IsEmpty());
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_COMMENTS)->ShowWindow((szProduct.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_PRODUCT_STATIC)->ShowWindow((!szProduct.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_PRODUCT_STATIC)->EnableWindow(!szProduct.IsEmpty());
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_PRODUCT)->ShowWindow((!szProduct.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_PRODUCT)->EnableWindow(!szProduct.IsEmpty());
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_COMPANY_STATIC)->ShowWindow((!szCompany.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_COMPANY_STATIC)->EnableWindow(!szCompany.IsEmpty());
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_COMPANY)->ShowWindow((!szCompany.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_COMPANY)->EnableWindow(!szCompany.IsEmpty());
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_SPACECRAFT_STATIC)->ShowWindow((!szSpacecraft.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_SPACECRAFT_STATIC)->EnableWindow(!szSpacecraft.IsEmpty());
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_SPACECRAFT)->ShowWindow((!szSpacecraft.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_SPACECRAFT)->EnableWindow(!szSpacecraft.IsEmpty());
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TYPE_STATIC)->ShowWindow((!szDataSourceType.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TYPE_STATIC)->EnableWindow(!szDataSourceType.IsEmpty());
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TYPE)->ShowWindow((!szDataSourceType.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TYPE)->EnableWindow(!szDataSourceType.IsEmpty());
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STATIC)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STATIC)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STARTTIME)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STARTTIME)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_TO)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_TO)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STOPTIME)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STOPTIME)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_CREATIONTIME_STATIC)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_CREATIONTIME)->GetWindowTextLength() > 0) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_CREATIONTIME_STATIC)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_CREATIONTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_CREATIONTIME)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_CREATIONTIME)->GetWindowTextLength() > 0) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_CREATIONTIME)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_CREATIONTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_SIZE_STATIC)->ShowWindow((!szDataSourceSize.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_SIZE_STATIC)->EnableWindow(!szDataSourceSize.IsEmpty());
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_SIZE)->ShowWindow((!szDataSourceSize.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEINFO_SIZE)->EnableWindow(!szDataSourceSize.IsEmpty());
}

BOOL CTelemetryArchivesRetrievalsPage::CheckRetrieveFile(LPCTSTR pszFileName, CString &szProduct, CString &szCompany, CString &szTrademark, CString &szSpacecraft, CString &szDataSourceType, CString &szStartTime, CString &szStopTime, CString &szCreationTime, CString &szDataSourceSize) CONST
{
	CTimeKey  tTime;
	DWORDLONG  dwSize;
	CByteArray  nData;
	CFileFindEx  cFileFind;
	CHistoryFile  cHistoryFile;

	if (AfxIsValidString(pszFileName) && cFileFind.FindFile(pszFileName))
	{
		if (cHistoryFile.Open(pszFileName, (LPCTSTR)NULL, HISTORYSTORE_TYPE_TM, CFile::modeRead, TRUE) == HISTORYFILE_SUCCESS)
		{
			for (cHistoryFile.GetCopyrightProduct(szProduct), cHistoryFile.GetCopyrightCompany(szCompany), cHistoryFile.GetCopyrightTrademark(szTrademark), cHistoryFile.GetSpacecraft(szSpacecraft), cHistoryFile.GetType(szDataSourceType), szStartTime = (cHistoryFile.CLogFile::SeekToFirst() && cHistoryFile.CLogFile::Read(tTime, nData)) ? (LPCTSTR)tTime.FormatGmt(STRING(IDS_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEDATATIMEFORMAT)) : EMPTYSTRING, szStopTime = (cHistoryFile.CLogFile::SeekToLast() && cHistoryFile.CLogFile::Read(tTime, nData)) ? (LPCTSTR)tTime.FormatGmt(STRING(IDS_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEDATATIMEFORMAT)) : EMPTYSTRING, szCreationTime = (cHistoryFile.GetCopyrightCreationTime(tTime)) ? (LPCTSTR)tTime.FormatGmt(STRING(IDS_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEDATAFILETIMEFORMAT)) : EMPTYSTRING, szDataSourceSize.Format(STRING(IDS_TELEMETRYARCHIVES_RETRIEVALSPAGE_SOURCEDATASIZEFORMAT), ((dwSize = cHistoryFile.CLogFile::GetSize()) + 512) / 1024), szDataSourceSize = FormatDataSourceSize(szDataSourceSize); !szProduct.IsEmpty() && !szCompany.IsEmpty() && !szTrademark.IsEmpty(); )
			{
				cHistoryFile.Close();
				cFileFind.Close();
				return TRUE;
			}
			cHistoryFile.Close();
		}
		cFileFind.Close();
	}
	return FALSE;
}

CString CTelemetryArchivesRetrievalsPage::GetFreeRetrieveDiskSpace(LPCTSTR pszFileName) CONST
{
	INT  nPos;
	INT  cbDelimiter;
	CString  szDigit;
	CString  szDelimiter;
	CString  szDiskSpace;
	CString  szDirectory;
	CLogicalDrives  cDrives;
	ULARGE_INTEGER  nDiskSpace[3];
	CStringTools  cStringTools;
	DWORDLONG  dwFreeDiskSpace;

	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->GetWindowText(szDiskSpace);
	if (GetDiskFreeSpaceEx((szDirectory = cDrives.ExtractDrive(pszFileName)), &nDiskSpace[0], &nDiskSpace[1], &nDiskSpace[2]))
	{
		if ((cbDelimiter = GetLocaleInfo(MAKELCID(GetLanguageID(), SORT_DEFAULT), LOCALE_STHOUSAND, (LPTSTR)NULL, 0)))
		{
			if (GetLocaleInfo(MAKELCID(GetLanguageID(), SORT_DEFAULT), LOCALE_STHOUSAND, szDelimiter.GetBufferSetLength(cbDelimiter - 1), cbDelimiter))
			{
				for (nPos = 0, dwFreeDiskSpace = ((DWORDLONG)nDiskSpace[0].HighPart << 32) + nDiskSpace[0].LowPart, dwFreeDiskSpace = dwFreeDiskSpace / 1024, szDigit = cStringTools.ConvertIntToString(0), szDiskSpace.Empty(), szDelimiter.ReleaseBuffer(); !nPos || dwFreeDiskSpace > 0; nPos++, dwFreeDiskSpace = dwFreeDiskSpace / 10)
				{
					szDiskSpace = (nPos > 0 && nPos % 3 == 0) ? (CString((TCHAR)(dwFreeDiskSpace % 10 + __toascii(szDigit[0]))) + szDelimiter + szDiskSpace) : (CString((TCHAR)(dwFreeDiskSpace % 10 + __toascii(szDigit[0]))) + szDiskSpace);
					continue;
				}
				return szDiskSpace;
			}
			szDelimiter.ReleaseBuffer();
		}
	}
	return((szDirectory.IsEmpty()) ? (LPCTSTR)szDiskSpace : EMPTYSTRING);
}

CString CTelemetryArchivesRetrievalsPage::FormatDataSourceSize(LPCTSTR pszDataSourceSize) CONST
{
	INT  cbSep;
	CString  szSep;
	CString  szSize;
	CString  szNumber;

	for (szNumber = pszDataSourceSize; (cbSep = GetLocaleInfo(MAKELCID(GetLanguageID(), SORT_DEFAULT), LOCALE_STHOUSAND, (LPTSTR)NULL, 0)); )
	{
		if (GetLocaleInfo(MAKELCID(GetLanguageID(), SORT_DEFAULT), LOCALE_STHOUSAND, szSep.GetBufferSetLength(cbSep - 1), cbSep))
		{
			for (szNumber = szNumber.Left(lstrlen(szNumber)), szSize.Empty(), szSep.ReleaseBuffer(); szNumber.GetLength() > 0 && !_istdigit(szNumber[szNumber.GetLength() - 1]); )
			{
				szSize = szNumber.Right(1) + szSize, szNumber = szNumber.Left(szNumber.GetLength() - 1);
				continue;
			}
			for (; szNumber.GetLength() > 0; szNumber = szNumber.Left(max(szNumber.GetLength() - 3, 0)))
			{
				szSize = (_istdigit(szSize[0])) ? (szNumber.Right(min(szNumber.GetLength(), 3)) + szSep + szSize) : (szNumber.Right(min(szNumber.GetLength(), 3)) + szSize);
				continue;
			}
			return szSize;
		}
		szSep.ReleaseBuffer();
	}
	return szNumber;
}

VOID CTelemetryArchivesRetrievalsPage::AddBrowseOption(UINT nOption, LPCTSTR pszDirectory)
{
	INT  nBrowseOption;

	if ((nBrowseOption = FindBrowseOption(nOption)) < 0)
	{
		m_nBrowseOptions[0].Add(nOption);
		m_szBrowseDirectories[0].Add(pszDirectory);
		return;
	}
	m_szBrowseDirectories[0].SetAt(nBrowseOption, pszDirectory);
}

VOID CTelemetryArchivesRetrievalsPage::RemoveBrowseOption(UINT nOption)
{
	INT  nBrowseOption;

	if ((nBrowseOption = FindBrowseOption(nOption)) >= 0)
	{
		m_nBrowseOptions[0].RemoveAt(nBrowseOption);
		m_szBrowseDirectories[0].RemoveAt(nBrowseOption);
	}
}

BOOL CTelemetryArchivesRetrievalsPage::CheckBrowseOption(UINT nOption) CONST
{
	return((FindBrowseOption(nOption) >= 0) ? TRUE : FALSE);
}

INT CTelemetryArchivesRetrievalsPage::FindBrowseOption(UINT nOption) CONST
{
	INT  nBrowseOption;
	INT  nBrowseOptions;

	for (nBrowseOption = 0, nBrowseOptions = (INT)m_nBrowseOptions[0].GetSize(); nBrowseOption < nBrowseOptions; nBrowseOption++)
	{
		if (m_nBrowseOptions[0].GetAt(nBrowseOption) == nOption) break;
		continue;
	}
	return((nBrowseOption < nBrowseOptions) ? nBrowseOption : -1);
}

CString CTelemetryArchivesRetrievalsPage::GetBrowseDirectory(UINT nOption) CONST
{
	INT  nBrowseOption;

	return(((nBrowseOption = FindBrowseOption(nOption)) >= 0) ? (LPCTSTR)m_szBrowseDirectories[0].GetAt(nBrowseOption) : EMPTYSTRING);
}

VOID CTelemetryArchivesRetrievalsPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE)));
	AccessControl(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_DEFAULT, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE_DIRECTORY, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES_DIRECTORY, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES_DIRECTORY, bCheck);
}

BOOL CTelemetryArchivesRetrievalsPage::IsModified(BOOL bAll) CONST
{
	INT  nOption[2];
	INT  nOptions[2];

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nOption[0] = 0, nOptions[0] = (m_pFiles[0].Compare(&m_pFiles[1]) && !m_szDefaultFile[0].CompareNoCase(m_szDefaultFile[1]) && m_nBrowseOptions[0].GetSize() == m_nBrowseOptions[1].GetSize()) ? (INT)m_nBrowseOptions[0].GetSize() : -1; nOption[0] < nOptions[0]; nOption[0]++)
		{
			for (nOption[1] = 0, nOptions[1] = (INT)m_nBrowseOptions[1].GetSize(); nOption[1] < nOptions[1]; nOption[1]++)
			{
				if (m_nBrowseOptions[0].GetAt(nOption[0]) == m_nBrowseOptions[1].GetAt(nOption[1])) break;
				continue;
			}
			if (nOption[1] < nOptions[1])
			{
				if (m_szBrowseDirectories[0].GetAt(nOption[0]) != m_szBrowseDirectories[1].GetAt(nOption[1])) break;
				continue;
			}
			break;
		}
		return((nOption[0] != nOptions[0]) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::IsModified() : FALSE);
}

BOOL CTelemetryArchivesRetrievalsPage::Check(BOOL bAll) CONST
{
	CString  szFileName;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->GetWindowText(szFileName);
		return((((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->GetWindowTextLength() > 0 && m_pFiles[0].Find(szFileName) >= 0) || (!GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->GetWindowTextLength() && !m_pFiles[0].GetSize())) && (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE) || GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE_DIRECTORY)->GetWindowTextLength() > 0) && (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES) || GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES_DIRECTORY)->GetWindowTextLength() > 0) && (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES) || GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES_DIRECTORY)->GetWindowTextLength() > 0)) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

void CTelemetryArchivesRetrievalsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryArchivesRetrievalsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryArchivesRetrievalsPage::PostNcDestroy()
{
	m_pFiles[0].RemoveAll();
	m_pFiles[1].RemoveAll();
	m_nBrowseOptions[0].RemoveAll();
	m_nBrowseOptions[1].RemoveAll();
	m_szBrowseDirectories[0].RemoveAll();
	m_szBrowseDirectories[1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesRetrievalsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryArchivesRetrievalsPage)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_BROWSE, OnBrowseFiles)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_INSPECT, OnInspectFile)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_ADD, OnAddFile)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVE, OnRemoveFile)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVEALL, OnRemoveFiles)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_DEFAULT, OnDefaultFile)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE, OnBrowseAnyFiles)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES, OnBrowseTimeTaggedFiles)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES, OnBrowseEnumeratedFiles)
	ON_CBN_EDITCHANGE(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, OnEditchangeFileName)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, OnSelchangeFile)
	ON_CBN_KILLFOCUS(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, OnUpdateStorageMediaFreeSpace)
	ON_EN_CHANGE(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE_DIRECTORY, OnEditchangeAnyFileDirectory)
	ON_EN_CHANGE(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES_DIRECTORY, OnEditchangeTimeTaggedFileDirectory)
	ON_EN_CHANGE(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES_DIRECTORY, OnEditchangeEnumeratedFileDirectory)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesRetrievalsPage message handlers

BOOL CTelemetryArchivesRetrievalsPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	if (EnumRetrieveFiles())
	{
		SetRetrieveFileInfo();
		AdjustToPrivileges();
	}
	return TRUE;
}

BOOL CTelemetryArchivesRetrievalsPage::OnSetActive()
{
	for (GetParent()->GetRetrieveFiles(m_pFiles[0]); GetParent()->IsWindowVisible(); )
	{
		SetRetrieveFileInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CTelemetryArchivesRetrievalsPage::OnKillActive()
{
	GetParent()->SetRetrieveFiles(m_pFiles[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CTelemetryArchivesRetrievalsPage::OnBrowseFiles()
{
	CString  szFileName;
	CHistoryStoreFile  cFile;
	CFileBrowseDialog  cFileBrowseDialog(this, (GetTMService()->GetDefaultTMHistoryFile(HISTORYFILE_TYPE_RETRIEVE, cFile)) ? cFile.GetFileName() : (LPCTSTR)NULL, STRING(IDS_FILEBROWSEDIALOG_TMHISTORYFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TMHISTORYFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->SetWindowText((szFileName = cFileBrowseDialog.GetPathName()));
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->SetWindowText((!szFileName.IsEmpty()) ? GetFreeRetrieveDiskSpace(szFileName) : EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE_STATIC)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE_STATIC)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) < 0 && !szFileName.IsEmpty()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_INSPECT)->EnableWindow((!szFileName.IsEmpty()) ? TRUE : FALSE);
		ShowDataSourceInfo(szFileName);
	}
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->SetFocus();
}

void CTelemetryArchivesRetrievalsPage::OnInspectFile()
{
	CString  szFileName;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->GetWindowText(szFileName);
	ShowDataSourceInfo((szFileName.IsEmpty()) ? Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES), (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_GETCURSEL)) : szFileName);
}

void CTelemetryArchivesRetrievalsPage::OnAddFile()
{
	INT  nIndex;
	CHistoryStoreFile  *pFile;
	CHourglassCursor  cCursor;

	if ((pFile = new CHistoryStoreFile))
	{
		if ((nIndex = (GetRetrieveFileInfo(pFile)) ? m_pFiles[0].Add(pFile) : -1) >= 0)
		{
			if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pFile->GetFileName()) >= 0)
			{
				SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pFile->GetFileName()));
				GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_ADD)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE));
				GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE));
				SetRetrieveFileInfo();
			}
			else
			{
				m_pFiles[0].RemoveAt(nIndex);
				delete pFile;
			}
		}
		else  delete pFile;
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesRetrievalsPage::OnRemoveFile()
{
	INT  nIndex;
	CString  szFileName;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->GetWindowText(szFileName); (nIndex = m_pFiles[0].Find(szFileName)) >= 0 && SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName)) >= 0; )
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_GETCURSEL) != CB_ERR) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE) : FALSE);
		m_szDefaultFile[0] = (m_szDefaultFile[0] != szFileName) ? (LPCTSTR)m_szDefaultFile[0] : EMPTYSTRING;
		delete m_pFiles[0].GetAt(nIndex);
		m_pFiles[0].RemoveAt(nIndex);
		SetRetrieveFileInfo();
		break;
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesRetrievalsPage::OnRemoveFiles()
{
	CHourglassCursor  cCursor;

	if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_RESETCONTENT) >= 0)
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE_STATIC)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVEALL)->EnableWindow(FALSE);
		m_szDefaultFile[0].Empty();
		m_pFiles[0].RemoveAll();
		SetRetrieveFileInfo();
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesRetrievalsPage::OnDefaultFile()
{
	CHistoryStoreFile  *pFile;

	m_szDefaultFile[0] = ((pFile = (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_DEFAULT)) ? FindRetrieveFileInfo() : (CHistoryStoreFile *)NULL)) ? pFile->GetFileName() : EMPTYSTRING;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesRetrievalsPage::OnSelchangeFile()
{
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_GETCURSEL));
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE));
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE));
	SetRetrieveFileInfo();
}

void CTelemetryArchivesRetrievalsPage::OnBrowseAnyFiles()
{
	if (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE))
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_DIRECTORY)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE_DIRECTORY)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE_DIRECTORY)->SetFocus();
	}
	else
	{
		RemoveBrowseOption(HISTORYSTORE_OPTION_ANYFILES);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_DIRECTORY)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES));
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE_DIRECTORY)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE_DIRECTORY)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesRetrievalsPage::OnBrowseTimeTaggedFiles()
{
	if (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES))
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_DIRECTORY)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES_DIRECTORY)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES_DIRECTORY)->SetFocus();
	}
	else
	{
		RemoveBrowseOption(HISTORYSTORE_OPTION_TIMETAGGEDFILES);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_DIRECTORY)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES));
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES_DIRECTORY)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES_DIRECTORY)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesRetrievalsPage::OnBrowseEnumeratedFiles()
{
	if (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES))
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_DIRECTORY)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES_DIRECTORY)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES_DIRECTORY)->SetFocus();
	}
	else
	{
		RemoveBrowseOption(HISTORYSTORE_OPTION_ENUMERATEDFILES);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_DIRECTORY)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES));
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES_DIRECTORY)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES_DIRECTORY)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesRetrievalsPage::OnEditchangeFileName()
{
	CString  szFileName;

	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->GetWindowText(szFileName);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_INSPECT)->EnableWindow((!szFileName.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) < 0 && !szFileName.IsEmpty()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesRetrievalsPage::OnEditchangeAnyFileDirectory()
{
	CString  szDirectory;

	if (GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE_DIRECTORY)->GetWindowTextLength() > 0)
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ANYFILE_DIRECTORY)->GetWindowText(szDirectory);
		AddBrowseOption(HISTORYSTORE_OPTION_ANYFILES, szDirectory);
	}
	else  RemoveBrowseOption(HISTORYSTORE_OPTION_ANYFILES);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesRetrievalsPage::OnEditchangeTimeTaggedFileDirectory()
{
	CString  szDirectory;

	if (GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES_DIRECTORY)->GetWindowTextLength() > 0)
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_TIMETAGGEDFILES_DIRECTORY)->GetWindowText(szDirectory);
		AddBrowseOption(HISTORYSTORE_OPTION_TIMETAGGEDFILES, szDirectory);
	}
	else  RemoveBrowseOption(HISTORYSTORE_OPTION_TIMETAGGEDFILES);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesRetrievalsPage::OnEditchangeEnumeratedFileDirectory()
{
	CString  szDirectory;

	if (GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES_DIRECTORY)->GetWindowTextLength() > 0)
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_AUTOBROWSE_ENUMERATEDFILES_DIRECTORY)->GetWindowText(szDirectory);
		AddBrowseOption(HISTORYSTORE_OPTION_ENUMERATEDFILES, szDirectory);
	}
	else  RemoveBrowseOption(HISTORYSTORE_OPTION_ENUMERATEDFILES);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesRetrievalsPage::OnUpdateStorageMediaFreeSpace()
{
	CString  szFileName;

	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FILES)->GetWindowText(szFileName);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->SetWindowText((!szFileName.IsEmpty()) ? GetFreeRetrieveDiskSpace(szFileName) : EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE_STATIC)->ShowWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE_STATIC)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_RETRIEVALSPAGE_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesBackupsPage property page

IMPLEMENT_DYNCREATE(CTelemetryArchivesBackupsPage, CLocalePropertyPage)

CTelemetryArchivesBackupsPage::CTelemetryArchivesBackupsPage() : CLocalePropertyPage(CTelemetryArchivesBackupsPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryArchivesBackupsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryArchivesBackupsPage::SetArchiveFiles(CONST CHistoryStoreFiles &pFiles, BOOL bInitialize)
{
	for (m_pFiles[0].Copy(&pFiles); bInitialize; )
	{
		m_pFiles[1].Copy(&pFiles);
		break;
	}
	if (IsWindow(GetSafeHwnd()))
	{
		ShowArchiveFileInfo();
		return;
	}
}

BOOL CTelemetryArchivesBackupsPage::GetArchiveFiles(CHistoryStoreFiles &pFiles) CONST
{
	return pFiles.Copy(&m_pFiles[0]);
}

CTelemetryArchivesDialog *CTelemetryArchivesBackupsPage::GetParent() CONST
{
	return((CTelemetryArchivesDialog *)CLocalePropertyPage::GetParent());
}

BOOL CTelemetryArchivesBackupsPage::EnumArchiveFiles()
{
	INT  nFile;
	INT  nFiles;

	for (nFile = 0, nFiles = (INT)m_pFiles[0].GetSize(), SendDlgItemMessage(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_FILES, LB_RESETCONTENT); nFile < nFiles; nFile++)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_FILES, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_pFiles[0].GetAt(nFile)->GetFileName());
		continue;
	}
	if (nFile == nFiles)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_FILES, LB_SETCURSEL);
		Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE_MB), TELEMETRYARCHIVESBACKUPSPAGE_MINIMUMSIZE, TELEMETRYARCHIVESBACKUPSPAGE_MAXIMUMSIZE);
		Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME_PERIOD), TELEMETRYARCHIVESBACKUPSPAGE_MINIMUMPERIOD, TELEMETRYARCHIVESBACKUPSPAGE_MAXIMUMPERIOD);
		Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_COUNT), TELEMETRYARCHIVESBACKUPSPAGE_MINIMUMRETRIES, TELEMETRYARCHIVESBACKUPSPAGE_MAXIMUMRETRIES);
		Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_INTERVAL), TELEMETRYARCHIVESBACKUPSPAGE_MINIMUMRETRYINTERVAL, TELEMETRYARCHIVESBACKUPSPAGE_MAXIMUMRETRYINTERVAL);
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_FILES_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_FILES)->EnableWindow();
		return TRUE;
	}
	return FALSE;
}

VOID CTelemetryArchivesBackupsPage::ShowArchiveFileInfo()
{
	ShowArchiveFileInfo(FindArchiveFileInfo());
}
VOID CTelemetryArchivesBackupsPage::ShowArchiveFileInfo(CONST CHistoryStoreFile *pFile)
{
	UINT  nRetries;
	CTimeKey  tTime[2];
	CTimeSpan  tStartTime;
	CTimeSpan  tStopTime;
	CTimeSpan  tInterval;

	if (pFile)
	{
		CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_SIMPLE, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPSIMPLE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_TIMETAGGED, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPTIMETAGGED) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_ENUMERATED, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPENUMERATED) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_AUTO, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPBYDEFAULT) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPBYSIZE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUP) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPDAILY) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPTIME) ? ((pFile->GetBackupTime(tTime[1]) && tTime[0] < tTime[1]) ? TRUE : FALSE) : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_PROTECTION, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPPROTECTEDDISK) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DISK, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPEMPTYDISK) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPRETRIES) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_AUDITFAILURES, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPAUDITFAILURES) ? TRUE : FALSE);
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STARTTIME), (pFile->GetBackupDailyPeriod(tStartTime, tStopTime)) ? CTimeKey(SECONDSPERDAY*(tTime[0].GetTime() / SECONDSPERDAY) + tStartTime.GetTotalSeconds()) : tTime[0]);
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STOPTIME), (pFile->GetBackupDailyPeriod(tStartTime, tStopTime)) ? CTimeKey(SECONDSPERDAY*(tTime[0].GetTime() / SECONDSPERDAY) + tStopTime.GetTotalSeconds()) : tTime[0]);
		Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME_PERIOD), (pFile->GetBackupTime(tTime[1]) && tTime[0] < tTime[1]) ? ((tTime[1].GetTime() - tTime[0].GetTime()) / SECONDSPERMINUTE) : 0);
		Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE_MB), pFile->GetBackupSize() / (1024 * 1024));
		Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_COUNT), (pFile->GetBackupRetryInfo(nRetries, tInterval)) ? nRetries : 0);
		Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_INTERVAL), (pFile->GetBackupRetryInfo(nRetries, tInterval)) ? (tInterval.GetTotalSeconds() / SECONDSPERMINUTE) : 0);
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_DIRECTORY)->SetWindowText(pFile->GetBackupDirectory());
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_SIMPLE)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_TIMETAGGED)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_ENUMERATED)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_DIRECTORY_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_DIRECTORY)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER)->EnableWindow(((pFile->GetOptions() & HISTORYSTORE_OPTION_NONCYCLIC) || (pFile->GetOptions() & HISTORYSTORE_OPTION_LIMITEDSIZE)) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_AUTO)->EnableWindow((pFile->GetOptions() & HISTORYSTORE_OPTION_LIMITEDSIZE) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE)->EnableWindow((pFile->GetOptions() & HISTORYSTORE_OPTION_NONCYCLIC) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE_MB)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE_MB_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR)->EnableWindow(((pFile->GetOptions() & HISTORYSTORE_OPTION_NONCYCLIC) || (pFile->GetOptions() & HISTORYSTORE_OPTION_LIMITEDSIZE)) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS)->EnableWindow(((pFile->GetOptions() & HISTORYSTORE_OPTION_NONCYCLIC) || (pFile->GetOptions() & HISTORYSTORE_OPTION_LIMITEDSIZE)) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTIONS)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME_PERIOD)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_PROTECTION)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DISK)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES)->EnableWindow(((pFile->GetOptions() & HISTORYSTORE_OPTION_NONCYCLIC) || (pFile->GetOptions() & HISTORYSTORE_OPTION_LIMITEDSIZE)) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES));
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_AUDITFAILURES)->EnableWindow(((pFile->GetOptions() & HISTORYSTORE_OPTION_NONCYCLIC) || (pFile->GetOptions() & HISTORYSTORE_OPTION_LIMITEDSIZE)) ? TRUE : FALSE);
		return;
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_SIMPLE, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_TIMETAGGED, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_ENUMERATED, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_AUTO, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_PROTECTION, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DISK, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_AUDITFAILURES, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_DIRECTORY)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_SIMPLE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_TIMETAGGED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_ENUMERATED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_DIRECTORY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_DIRECTORY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_AUTO)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE_MB)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE_MB_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTIONS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME_PERIOD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_PROTECTION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DISK)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_AUDITFAILURES)->EnableWindow(FALSE);
}

CHistoryStoreFile *CTelemetryArchivesBackupsPage::FindArchiveFileInfo() CONST
{
	return m_pFiles[0].GetAt(m_pFiles[0].Find(Listbox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_FILES), (INT)GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_FILES)->SendMessage(LB_GETCURSEL))));
}

VOID CTelemetryArchivesBackupsPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_SIMPLE, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESBACKUPS_CHANGE)));
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_TIMETAGGED, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_ENUMERATED, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_DIRECTORY, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_AUTO, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE_MB, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STARTTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STOPTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME_PERIOD, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_PROTECTION, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DISK, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_COUNT, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_INTERVAL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_AUDITFAILURES, bCheck);
}

BOOL CTelemetryArchivesBackupsPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_pFiles[0].Compare(&m_pFiles[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTelemetryArchivesBackupsPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? ((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS) && ((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_SIMPLE) && !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_TIMETAGGED) && !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_ENUMERATED) && !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_AUTO) && !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE) && !GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_DIRECTORY)->GetWindowTextLength()) || ((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_SIMPLE) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_TIMETAGGED) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_ENUMERATED)) && (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_AUTO) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE)) && GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_DIRECTORY)->GetWindowTextLength() > 0)) && !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES) && !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_AUDITFAILURES)) || (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS) && (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_SIMPLE) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_TIMETAGGED) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_ENUMERATED)) && (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_AUTO) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE)) && GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_DIRECTORY)->GetWindowTextLength() > 0)) : CLocalePropertyPage::Check()) : TRUE);
}

void CTelemetryArchivesBackupsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryArchivesBackupsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryArchivesBackupsPage::PostNcDestroy()
{
	m_pFiles[0].RemoveAll();
	m_pFiles[1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesBackupsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryArchivesBackupsPage)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_SIMPLE, OnTypeSimple)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_TIMETAGGED, OnTypeTimeTagged)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_ENUMERATED, OnTypeEnumerated)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS, OnBackups)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_AUTO, OnBackupByDefault)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE, OnBackupBySize)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY, OnBackupDaily)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME, OnBackupTime)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_PROTECTION, OnBackupProtectedDisk)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DISK, OnBackupEmptyDisk)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES, OnBackupFailures)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_AUDITFAILURES, OnBackupAuditFailures)
	ON_EN_CHANGE(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_DIRECTORY, OnEditchangeDirectory)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE_MB, OnSpinchangeBackupBySize)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME_PERIOD, OnSpinchangeBackupTime)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_COUNT, OnSpinchangeBackupRetries)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_INTERVAL, OnSpinchangeBackupInterval)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STARTTIME, OnSpinchangeBackupDailyStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STOPTIME, OnSpinchangeBackupDailyStopTime)
	ON_LBN_SELCHANGE(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_FILES, OnSelchangeFile)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesBackupsPage message handlers

BOOL CTelemetryArchivesBackupsPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	if (EnumArchiveFiles())
	{
		ShowArchiveFileInfo();
		AdjustToPrivileges();
	}
	return TRUE;
}

BOOL CTelemetryArchivesBackupsPage::OnSetActive()
{
	for (GetParent()->GetArchiveFiles(m_pFiles[0]); EnumArchiveFiles(); )
	{
		ShowArchiveFileInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CTelemetryArchivesBackupsPage::OnKillActive()
{
	GetParent()->SetArchiveFiles(m_pFiles[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CTelemetryArchivesBackupsPage::OnSelchangeFile()
{
	ShowArchiveFileInfo();
}

void CTelemetryArchivesBackupsPage::OnTypeSimple()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_SIMPLE)) ? (nOptions & ~(HISTORYSTORE_OPTION_BACKUPSIMPLE | HISTORYSTORE_OPTION_BACKUPTIMETAGGED | HISTORYSTORE_OPTION_BACKUPENUMERATED)) : ((nOptions & ~(HISTORYSTORE_OPTION_BACKUPTIMETAGGED | HISTORYSTORE_OPTION_BACKUPENUMERATED)) | HISTORYSTORE_OPTION_BACKUPSIMPLE));
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_SIMPLE, !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_SIMPLE));
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_TIMETAGGED, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_ENUMERATED, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnTypeTimeTagged()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_TIMETAGGED)) ? (nOptions & ~(HISTORYSTORE_OPTION_BACKUPSIMPLE | HISTORYSTORE_OPTION_BACKUPTIMETAGGED | HISTORYSTORE_OPTION_BACKUPENUMERATED)) : ((nOptions & ~(HISTORYSTORE_OPTION_BACKUPSIMPLE | HISTORYSTORE_OPTION_BACKUPENUMERATED)) | HISTORYSTORE_OPTION_BACKUPTIMETAGGED));
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_SIMPLE, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_TIMETAGGED, !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_TIMETAGGED));
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_ENUMERATED, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnTypeEnumerated()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_ENUMERATED)) ? (nOptions & ~(HISTORYSTORE_OPTION_BACKUPSIMPLE | HISTORYSTORE_OPTION_BACKUPTIMETAGGED | HISTORYSTORE_OPTION_BACKUPENUMERATED)) : ((nOptions & ~(HISTORYSTORE_OPTION_BACKUPSIMPLE | HISTORYSTORE_OPTION_BACKUPTIMETAGGED)) | HISTORYSTORE_OPTION_BACKUPENUMERATED));
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_SIMPLE, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_TIMETAGGED, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_ENUMERATED, !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TYPE_ENUMERATED));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnEditchangeDirectory()
{
	CString  szDirectory;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_DIRECTORY)->GetWindowText(szDirectory);
		pFile->SetBackupDirectory(szDirectory);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnBackups()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS)) ? ((nOptions & ~(HISTORYSTORE_OPTION_BACKUPDAILY | HISTORYSTORE_OPTION_BACKUPTIME | HISTORYSTORE_OPTION_BACKUPPROTECTEDDISK | HISTORYSTORE_OPTION_BACKUPEMPTYDISK | HISTORYSTORE_OPTION_BACKUPRETRIES | HISTORYSTORE_OPTION_BACKUPAUDITFAILURES)) | HISTORYSTORE_OPTION_BACKUP) : (nOptions & ~(HISTORYSTORE_OPTION_BACKUP | HISTORYSTORE_OPTION_BACKUPDAILY | HISTORYSTORE_OPTION_BACKUPTIME | HISTORYSTORE_OPTION_BACKUPPROTECTEDDISK | HISTORYSTORE_OPTION_BACKUPEMPTYDISK | HISTORYSTORE_OPTION_BACKUPRETRIES | HISTORYSTORE_OPTION_BACKUPAUDITFAILURES)));
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_PROTECTION, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DISK, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES, (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS)) ? IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES) : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_AUDITFAILURES, (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS)) ? IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_AUDITFAILURES) : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTIONS)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME_PERIOD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_PROTECTION)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DISK)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_BACKUPS));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnBackupByDefault()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_AUTO)) ? (nOptions | HISTORYSTORE_OPTION_BACKUPBYDEFAULT) : (nOptions & ~HISTORYSTORE_OPTION_BACKUPBYDEFAULT));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnBackupBySize()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE)) ? (nOptions | HISTORYSTORE_OPTION_BACKUPBYSIZE) : (nOptions & ~HISTORYSTORE_OPTION_BACKUPBYSIZE));
		pFile->SetBackupSize((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE)) ? (1024 * 1024 * (DWORDLONG)TELEMETRYARCHIVESBACKUPSPAGE_DEFAULTSIZE) : 0);
	}
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE_MB), TELEMETRYARCHIVESBACKUPSPAGE_DEFAULTSIZE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE_MB)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE_MB_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE_MB)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnBackupDaily()
{
	UINT  nOptions;
	CTimeKey  tTime;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY)) ? (nOptions | HISTORYSTORE_OPTION_BACKUPDAILY) : (nOptions & ~HISTORYSTORE_OPTION_BACKUPDAILY));
		pFile->SetBackupDailyPeriod((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY)) ? TELEMETRYARCHIVESBACKUPSPAGE_DAILYSTARTTIME : 0, (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY)) ? TELEMETRYARCHIVESBACKUPSPAGE_DAILYSTOPTIME : 0);
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STARTTIME), CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TELEMETRYARCHIVESBACKUPSPAGE_DAILYSTARTTIME));
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STOPTIME), CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TELEMETRYARCHIVESBACKUPSPAGE_DAILYSTOPTIME));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnBackupTime()
{
	UINT  nOptions;
	CTimeKey  tTime;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME)) ? (nOptions | HISTORYSTORE_OPTION_BACKUPTIME) : (nOptions & ~HISTORYSTORE_OPTION_BACKUPTIME));
		pFile->SetBackupTime((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME)) ? (SECONDSPERMINUTE*(tTime.GetTime() / SECONDSPERMINUTE) + SECONDSPERMINUTE*TELEMETRYARCHIVESBACKUPSPAGE_DEFAULTPERIOD) : 0);
	}
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME_PERIOD), TELEMETRYARCHIVESBACKUPSPAGE_DEFAULTPERIOD);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME_PERIOD)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME_PERIOD)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnBackupProtectedDisk()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_PROTECTION)) ? (nOptions | HISTORYSTORE_OPTION_BACKUPPROTECTEDDISK) : (nOptions & ~HISTORYSTORE_OPTION_BACKUPPROTECTEDDISK));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnBackupEmptyDisk()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DISK)) ? (nOptions | HISTORYSTORE_OPTION_BACKUPEMPTYDISK) : (nOptions & ~HISTORYSTORE_OPTION_BACKUPEMPTYDISK));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnBackupFailures()
{
	UINT  nOptions;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo()))
	{
		nOptions = pFile->GetOptions();
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES)) ? ((nOptions & ~HISTORYSTORE_OPTION_BACKUPAUDITFAILURES) | HISTORYSTORE_OPTION_BACKUPRETRIES) : (nOptions & ~(HISTORYSTORE_OPTION_BACKUPRETRIES | HISTORYSTORE_OPTION_BACKUPAUDITFAILURES)));
		pFile->SetBackupRetryInfo(TELEMETRYARCHIVESBACKUPSPAGE_DEFAULTRETRIES, SECONDSPERMINUTE*TELEMETRYARCHIVESBACKUPSPAGE_DEFAULTRETRYINTERVAL);
	}
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_COUNT), TELEMETRYARCHIVESBACKUPSPAGE_DEFAULTRETRIES);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_INTERVAL), TELEMETRYARCHIVESBACKUPSPAGE_DEFAULTRETRYINTERVAL);
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES));
	GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_COUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnBackupAuditFailures()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo())) pFile->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_AUDITFAILURES)) ? (pFile->GetOptions() | HISTORYSTORE_OPTION_BACKUPAUDITFAILURES) : (pFile->GetOptions() & ~HISTORYSTORE_OPTION_BACKUPAUDITFAILURES));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnSpinchangeBackupBySize()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo())) pFile->SetBackupSize(1024 * 1024 * Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_CHARACTERISTICS_TRIGGER_SIZE_MB)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnSpinchangeBackupDailyStartTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CHistoryStoreFile  *pFile;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STOPTIME)); (pFile = FindArchiveFileInfo()); )
	{
		pFile->SetBackupDailyPeriod(tStartTime.GetTime() % SECONDSPERDAY, (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY && (tStartTime.GetTime() + 1) % SECONDSPERDAY) ? ((tStartTime.GetTime() + 1) % SECONDSPERDAY) : (max(tStartTime.GetTime(), tStopTime.GetTime()) % SECONDSPERDAY));
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STOPTIME), (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY && (tStartTime.GetTime() + 1) % SECONDSPERDAY) ? CTimeKey(tStartTime.GetTime() + 1) : max(tStartTime, tStopTime));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnSpinchangeBackupDailyStopTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CHistoryStoreFile  *pFile;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STOPTIME)); (pFile = FindArchiveFileInfo()); )
	{
		pFile->SetBackupDailyPeriod((tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY  &&  tStopTime.GetTime() % SECONDSPERDAY) ? ((tStopTime.GetTime() - 1) % SECONDSPERDAY) : (min(tStartTime.GetTime(), tStopTime.GetTime()) % SECONDSPERDAY), tStopTime.GetTime() % SECONDSPERDAY);
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_DAILY_STARTTIME), (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY  &&  tStopTime.GetTime() % SECONDSPERDAY) ? CTimeKey(tStopTime.GetTime() - 1) : min(tStartTime, tStopTime));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnSpinchangeBackupTime()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo())) pFile->SetBackupTime(CTime::GetCurrentTime().GetTime() + SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_RESTRICTION_TIME_PERIOD)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnSpinchangeBackupRetries()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo())) pFile->SetBackupRetryInfo((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_COUNT)), SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_INTERVAL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesBackupsPage::OnSpinchangeBackupInterval()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchiveFileInfo())) pFile->SetBackupRetryInfo((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_COUNT)), SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_BACKUPSPAGE_BEHAVIOR_FAILURES_RETRY_INTERVAL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsContentsPage property page

IMPLEMENT_DYNCREATE(CTelemetryArchivesExtractionsContentsPage, CLocalePropertyPage)

CTelemetryArchivesExtractionsContentsPage::CTelemetryArchivesExtractionsContentsPage() : CLocalePropertyPage(CTelemetryArchivesExtractionsContentsPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryArchivesExtractionsContentsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryArchivesExtractionsContentsPage::SetInfo(CONST CArchivesExtractionProfileInfo *pProfileInfo, CONST CArchivesExtractionProfileInfo *pBackupProfileInfo, BOOL bUpdate)
{
	for (m_cInfo[0].Copy(pProfileInfo); pBackupProfileInfo != (CONST CArchivesExtractionProfileInfo *) NULL; )
	{
		m_cInfo[1].Copy(pBackupProfileInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()) && bUpdate)
	{
		EnumParameterMembers();
		ShowParameterInfo();
	}
}

VOID CTelemetryArchivesExtractionsContentsPage::GetInfo(CArchivesExtractionProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cInfo[0]);
}

CTelemetryArchivesExtractionsPageFolder *CTelemetryArchivesExtractionsContentsPage::GetParent() CONST
{
	return((CTelemetryArchivesExtractionsPageFolder *)CLocalePropertyPage::GetParent());
}

VOID CTelemetryArchivesExtractionsContentsPage::EnumParameters()
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	for (nParameter = 0, nParameters = (INT)GetDatabase()->GetTMParameters()->GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
		{
			szParameter.Format(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONS_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
			SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_PARAMETER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szParameter);
		}
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_DETAILS)->EnableWindow();
	if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_PARAMETER, CB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_PARAMETER, CB_SETCURSEL);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, TRUE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_CHANGES, FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_PARAMETER_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_PARAMETER)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_CHANGES)->EnableWindow();
	}
	else
	{
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_CHANGES, FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_PARAMETER_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_PARAMETER)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_CHANGES)->EnableWindow(FALSE);
	}
}

VOID CTelemetryArchivesExtractionsContentsPage::EnumParameterMembers()
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CStringArray  szParameters;
	CUIntArray  nParameterFormats;
	CUIntArray  nParameterTriggers;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_RESETCONTENT);
	for (nParameter = 0, nParameters = m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(szParameters.GetAt(nParameter)))))
		{
			szParameter.Format(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONS_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
			SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameter);
		}
	}
	if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS)->EnableWindow(FALSE);
}

VOID CTelemetryArchivesExtractionsContentsPage::ShowParameterInfo()
{
	INT  nIndex;
	CUIntArray  nParameterFormats;
	CUIntArray  nParameterTriggers;
	CStringArray  szParameters;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCURSEL)) >= 0 && nIndex < m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers))
	{
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, (nParameterFormats.GetAt(nIndex) & ARCHIVESEXTRACTIONINFO_FORMAT_DEFAULT) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, (nParameterFormats.GetAt(nIndex) & ARCHIVESEXTRACTIONINFO_FORMAT_CODED) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW, (nParameterFormats.GetAt(nIndex) & (ARCHIVESEXTRACTIONINFO_FORMAT_DECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_BINARY | ARCHIVESEXTRACTIONINFO_FORMAT_OCTAL | ARCHIVESEXTRACTIONINFO_FORMAT_HEXADECIMAL)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, (nParameterFormats.GetAt(nIndex) & ARCHIVESEXTRACTIONINFO_FORMAT_DECIMAL) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, (nParameterFormats.GetAt(nIndex) & ARCHIVESEXTRACTIONINFO_FORMAT_BINARY) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, (nParameterFormats.GetAt(nIndex) & ARCHIVESEXTRACTIONINFO_FORMAT_OCTAL) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, (nParameterFormats.GetAt(nIndex) & ARCHIVESEXTRACTIONINFO_FORMAT_HEXADECIMAL) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE, (nParameterFormats.GetAt(nIndex) & ARCHIVESEXTRACTIONINFO_FORMAT_INVERSE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, (nParameterFormats.GetAt(nIndex) & ARCHIVESEXTRACTIONINFO_FORMAT_STATUS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_CHANGES, (nParameterTriggers.GetAt(nIndex) & ARCHIVESEXTRACTIONINFO_TRIGGER_CHANGES) ? TRUE : FALSE);
	}
	else
	{
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, TRUE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_CHANGES, FALSE);
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_CHANGES)->EnableWindow();
}

VOID CTelemetryArchivesExtractionsContentsPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_PARAMETER, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE)));
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_CHANGES, bCheck);
}

BOOL CTelemetryArchivesExtractionsContentsPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cInfo[0].Compare(&m_cInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTelemetryArchivesExtractionsContentsPage::Check(BOOL bAll) CONST
{
	if (IsWindow(GetSafeHwnd()))
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_ADD)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_PARAMETER)->SendMessage(CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_REMOVE)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS)->SendMessage(LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_REMOVEALL)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS)->SendMessage(LB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE) : FALSE);
		return((!bAll) ? TRUE : CLocalePropertyPage::Check());
	}
	return TRUE;
}

void CTelemetryArchivesExtractionsContentsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryArchivesExtractionsContentsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesExtractionsContentsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryArchivesExtractionsContentsPage)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, OnCodingDefault)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, OnCodingCoded)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW, OnCodingRaw)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, OnCodingDecimal)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, OnCodingBinary)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, OnCodingOctal)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, OnCodingHexadecimal)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE, OnCodingInverse)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, OnCodingStatus)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_CHANGES, OnTriggerChanges)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_ADD, OnAddParameter)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_REMOVE, OnRemoveParameter)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_REMOVEALL, OnRemoveAllParameters)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_PARAMETER, OnSelchangeParameter)
	ON_LBN_SELCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, OnSelchangeMember)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsContentsPage message handlers

BOOL CTelemetryArchivesExtractionsContentsPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	EnumParameters();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTelemetryArchivesExtractionsContentsPage::OnSetActive()
{
	for (GetParent()->GetInfo(&m_cInfo[0]); GetParent()->IsWindowVisible(); )
	{
		EnumParameterMembers();
		ShowParameterInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CTelemetryArchivesExtractionsContentsPage::OnKillActive()
{
	GetParent()->SetInfo(&m_cInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CTelemetryArchivesExtractionsContentsPage::OnCodingDefault()
{
	INT  nIndex;
	CStringArray  szParameters;
	CUIntArray  nParameterFormats;
	CUIntArray  nParameterTriggers;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCURSEL)) >= 0 && m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers) > nIndex)
	{
		nParameterFormats.SetAt(nIndex, (nParameterFormats.GetAt(nIndex) & ~(ARCHIVESEXTRACTIONINFO_FORMAT_CODED | ARCHIVESEXTRACTIONINFO_FORMAT_DECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_BINARY | ARCHIVESEXTRACTIONINFO_FORMAT_OCTAL | ARCHIVESEXTRACTIONINFO_FORMAT_HEXADECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_INVERSE | ARCHIVESEXTRACTIONINFO_FORMAT_STATUS)) | ARCHIVESEXTRACTIONINFO_FORMAT_DEFAULT);
		m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsContentsPage::OnCodingCoded()
{
	INT  nIndex;
	CStringArray  szParameters;
	CUIntArray  nParameterFormats;
	CUIntArray  nParameterTriggers;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCURSEL)) >= 0 && m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers) > nIndex)
	{
		nParameterFormats.SetAt(nIndex, (nParameterFormats.GetAt(nIndex) & ~(ARCHIVESEXTRACTIONINFO_FORMAT_DEFAULT | ARCHIVESEXTRACTIONINFO_FORMAT_DECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_BINARY | ARCHIVESEXTRACTIONINFO_FORMAT_OCTAL | ARCHIVESEXTRACTIONINFO_FORMAT_HEXADECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_INVERSE | ARCHIVESEXTRACTIONINFO_FORMAT_STATUS)) | ARCHIVESEXTRACTIONINFO_FORMAT_CODED);
		m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsContentsPage::OnCodingRaw()
{
	INT  nIndex;
	CStringArray  szParameters;
	CUIntArray  nParameterFormats;
	CUIntArray  nParameterTriggers;

	if (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW))
	{
		if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCURSEL)) >= 0 && m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers) > nIndex)
		{
			nParameterFormats.SetAt(nIndex, (nParameterFormats.GetAt(nIndex) & ~(ARCHIVESEXTRACTIONINFO_FORMAT_DEFAULT | ARCHIVESEXTRACTIONINFO_FORMAT_CODED | ARCHIVESEXTRACTIONINFO_FORMAT_BINARY | ARCHIVESEXTRACTIONINFO_FORMAT_OCTAL | ARCHIVESEXTRACTIONINFO_FORMAT_HEXADECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_INVERSE | ARCHIVESEXTRACTIONINFO_FORMAT_STATUS)) | ARCHIVESEXTRACTIONINFO_FORMAT_DECIMAL);
			m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
		}
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, TRUE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE)->EnableWindow();
	}
	else
	{
		if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCURSEL)) >= 0 && m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers) > nIndex)
		{
			nParameterFormats.SetAt(nIndex, (nParameterFormats.GetAt(nIndex) & ~(ARCHIVESEXTRACTIONINFO_FORMAT_CODED | ARCHIVESEXTRACTIONINFO_FORMAT_DECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_BINARY | ARCHIVESEXTRACTIONINFO_FORMAT_OCTAL | ARCHIVESEXTRACTIONINFO_FORMAT_HEXADECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_INVERSE | ARCHIVESEXTRACTIONINFO_FORMAT_STATUS)) | ARCHIVESEXTRACTIONINFO_FORMAT_DEFAULT);
			m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
		}
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, TRUE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsContentsPage::OnCodingDecimal()
{
	INT  nIndex;
	CStringArray  szParameters;
	CUIntArray  nParameterFormats;
	CUIntArray  nParameterTriggers;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCURSEL)) >= 0 && m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers) > nIndex)
	{
		nParameterFormats.SetAt(nIndex, (nParameterFormats.GetAt(nIndex) & ~(ARCHIVESEXTRACTIONINFO_FORMAT_DEFAULT | ARCHIVESEXTRACTIONINFO_FORMAT_CODED | ARCHIVESEXTRACTIONINFO_FORMAT_BINARY | ARCHIVESEXTRACTIONINFO_FORMAT_OCTAL | ARCHIVESEXTRACTIONINFO_FORMAT_HEXADECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_STATUS)) | ARCHIVESEXTRACTIONINFO_FORMAT_DECIMAL);
		m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsContentsPage::OnCodingBinary()
{
	INT  nIndex;
	CStringArray  szParameters;
	CUIntArray  nParameterFormats;
	CUIntArray  nParameterTriggers;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCURSEL)) >= 0 && m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers) > nIndex)
	{
		nParameterFormats.SetAt(nIndex, (nParameterFormats.GetAt(nIndex) & ~(ARCHIVESEXTRACTIONINFO_FORMAT_DEFAULT | ARCHIVESEXTRACTIONINFO_FORMAT_CODED | ARCHIVESEXTRACTIONINFO_FORMAT_DECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_OCTAL | ARCHIVESEXTRACTIONINFO_FORMAT_HEXADECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_STATUS)) | ARCHIVESEXTRACTIONINFO_FORMAT_BINARY);
		m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsContentsPage::OnCodingOctal()
{
	INT  nIndex;
	CStringArray  szParameters;
	CUIntArray  nParameterFormats;
	CUIntArray  nParameterTriggers;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCURSEL)) >= 0 && m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers) > nIndex)
	{
		nParameterFormats.SetAt(nIndex, (nParameterFormats.GetAt(nIndex) & ~(ARCHIVESEXTRACTIONINFO_FORMAT_DEFAULT | ARCHIVESEXTRACTIONINFO_FORMAT_CODED | ARCHIVESEXTRACTIONINFO_FORMAT_DECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_BINARY | ARCHIVESEXTRACTIONINFO_FORMAT_HEXADECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_STATUS)) | ARCHIVESEXTRACTIONINFO_FORMAT_OCTAL);
		m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsContentsPage::OnCodingHexadecimal()
{
	INT  nIndex;
	CStringArray  szParameters;
	CUIntArray  nParameterFormats;
	CUIntArray  nParameterTriggers;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCURSEL)) >= 0 && m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers) > nIndex)
	{
		nParameterFormats.SetAt(nIndex, (nParameterFormats.GetAt(nIndex) & ~(ARCHIVESEXTRACTIONINFO_FORMAT_DEFAULT | ARCHIVESEXTRACTIONINFO_FORMAT_CODED | ARCHIVESEXTRACTIONINFO_FORMAT_DECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_BINARY | ARCHIVESEXTRACTIONINFO_FORMAT_OCTAL | ARCHIVESEXTRACTIONINFO_FORMAT_STATUS)) | ARCHIVESEXTRACTIONINFO_FORMAT_HEXADECIMAL);
		m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsContentsPage::OnCodingInverse()
{
	INT  nIndex;
	CStringArray  szParameters;
	CUIntArray  nParameterFormats;
	CUIntArray  nParameterTriggers;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCURSEL)) >= 0 && m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers) > nIndex)
	{
		nParameterFormats.SetAt(nIndex, (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE)) ? (nParameterFormats.GetAt(nIndex) | ARCHIVESEXTRACTIONINFO_FORMAT_INVERSE) : (nParameterFormats.GetAt(nIndex) & ~ARCHIVESEXTRACTIONINFO_FORMAT_INVERSE));
		m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsContentsPage::OnCodingStatus()
{
	INT  nIndex;
	CStringArray  szParameters;
	CUIntArray  nParameterFormats;
	CUIntArray  nParameterTriggers;

	if (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS))
	{
		if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCURSEL)) >= 0 && m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers) > nIndex)
		{
			nParameterFormats.SetAt(nIndex, (nParameterFormats.GetAt(nIndex) & ~(ARCHIVESEXTRACTIONINFO_FORMAT_DEFAULT | ARCHIVESEXTRACTIONINFO_FORMAT_CODED | ARCHIVESEXTRACTIONINFO_FORMAT_DECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_BINARY | ARCHIVESEXTRACTIONINFO_FORMAT_OCTAL | ARCHIVESEXTRACTIONINFO_FORMAT_HEXADECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_INVERSE)) | ARCHIVESEXTRACTIONINFO_FORMAT_STATUS);
			m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
		}
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, TRUE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE)->EnableWindow(FALSE);
	}
	else
	{
		if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCURSEL)) >= 0 && m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers) > nIndex)
		{
			nParameterFormats.SetAt(nIndex, (nParameterFormats.GetAt(nIndex) & ~(ARCHIVESEXTRACTIONINFO_FORMAT_CODED | ARCHIVESEXTRACTIONINFO_FORMAT_DECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_BINARY | ARCHIVESEXTRACTIONINFO_FORMAT_OCTAL | ARCHIVESEXTRACTIONINFO_FORMAT_HEXADECIMAL | ARCHIVESEXTRACTIONINFO_FORMAT_INVERSE | ARCHIVESEXTRACTIONINFO_FORMAT_STATUS)) | ARCHIVESEXTRACTIONINFO_FORMAT_DEFAULT);
			m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
		}
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT, TRUE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE, FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_STATUS, FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsContentsPage::OnTriggerChanges()
{
	INT  nIndex;
	CStringArray  szParameters;
	CUIntArray  nParameterFormats;
	CUIntArray  nParameterTriggers;

	if (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_CHANGES))
	{
		if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCURSEL)) >= 0 && m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers) > nIndex)
		{
			nParameterTriggers.SetAt(nIndex, (nParameterTriggers.GetAt(nIndex) & ~ARCHIVESEXTRACTIONINFO_TRIGGER_UPDATES) | ARCHIVESEXTRACTIONINFO_TRIGGER_CHANGES);
			m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
		}
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_CHANGES, TRUE);
	}
	else
	{
		if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCURSEL)) >= 0 && m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers) > nIndex)
		{
			nParameterTriggers.SetAt(nIndex, (nParameterTriggers.GetAt(nIndex) & ~ARCHIVESEXTRACTIONINFO_TRIGGER_CHANGES) | ARCHIVESEXTRACTIONINFO_TRIGGER_UPDATES);
			m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
		}
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_CHANGES, FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsContentsPage::OnAddParameter()
{
	UINT  nFormat;
	UINT  nTrigger;
	CString  szParameter;
	CStringArray  szParameters;
	CUIntArray  nParameterFormats;
	CUIntArray  nParameterTriggers;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_PARAMETER)->GetWindowText(szParameter);
	nFormat = (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_DEFAULT)) ? ARCHIVESEXTRACTIONINFO_FORMAT_DEFAULT : 0;
	nFormat |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_CODED)) ? ARCHIVESEXTRACTIONINFO_FORMAT_CODED : 0;
	nFormat |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_DECIMAL)) ? ARCHIVESEXTRACTIONINFO_FORMAT_DECIMAL : 0;
	nFormat |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_BINARY)) ? ARCHIVESEXTRACTIONINFO_FORMAT_BINARY : 0;
	nFormat |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_OCTAL)) ? ARCHIVESEXTRACTIONINFO_FORMAT_OCTAL : 0;
	nFormat |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_HEXADECIMAL)) ? ARCHIVESEXTRACTIONINFO_FORMAT_HEXADECIMAL : 0;
	nFormat |= (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_CODING_RAW_INVERSE)) ? ARCHIVESEXTRACTIONINFO_FORMAT_INVERSE : 0;
	nTrigger = (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_TRIGGER_CHANGES)) ? ARCHIVESEXTRACTIONINFO_TRIGGER_CHANGES : ARCHIVESEXTRACTIONINFO_TRIGGER_UPDATES;
	if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameter)) >= 0)
	{
		szParameter = szParameter.Left(szParameter.Find(SPACE));
		m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers);
		szParameters.Add(szParameter);
		nParameterFormats.Add(nFormat);
		nParameterTriggers.Add(nTrigger);
		m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_PARAMETER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsContentsPage::OnRemoveParameter()
{
	INT  nIndex;
	CStringArray  szParameters;
	CUIntArray  nParameterFormats;
	CUIntArray  nParameterTriggers;
	CHourglassCursor  cCursor;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCURSEL)) >= 0 && SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_DELETESTRING, nIndex) >= 0)
	{
		for (m_cInfo[0].GetParameters(szParameters, nParameterFormats, nParameterTriggers); szParameters.GetSize() > 0; )
		{
			szParameters.RemoveAt(nIndex);
			nParameterFormats.RemoveAt(nIndex);
			nParameterTriggers.RemoveAt(nIndex);
			break;
		}
		m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_SETCURSEL);
		ShowParameterInfo();
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_PARAMETER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsContentsPage::OnRemoveAllParameters()
{
	CStringArray  szParameters;
	CUIntArray  nParameterFormats;
	CUIntArray  nParameterTriggers;
	CHourglassCursor  cCursor;

	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_RESETCONTENT);
	if (!SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCOUNT))
	{
		m_cInfo[0].SetParameters(szParameters, nParameterFormats, nParameterTriggers);
		ShowParameterInfo();
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_MEMBERS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_CONTENTSPAGE_PARAMETER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsContentsPage::OnSelchangeParameter()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsContentsPage::OnSelchangeMember()
{
	ShowParameterInfo();
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsRangePage property page

IMPLEMENT_DYNCREATE(CTelemetryArchivesExtractionsRangePage, CLocalePropertyPage)

CTelemetryArchivesExtractionsRangePage::CTelemetryArchivesExtractionsRangePage() : CLocalePropertyPage(CTelemetryArchivesExtractionsRangePage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryArchivesExtractionsRangePage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryArchivesExtractionsRangePage::SetInfo(CONST CArchivesExtractionProfileInfo *pProfileInfo, CONST CArchivesExtractionProfileInfo *pBackupProfileInfo, BOOL bUpdate)
{
	for (m_cInfo[0].Copy(pProfileInfo); pBackupProfileInfo != (CONST CArchivesExtractionProfileInfo *) NULL; )
	{
		m_cInfo[1].Copy(pBackupProfileInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()) && bUpdate)
	{
		ShowRangeInfo();
		return;
	}
}

VOID CTelemetryArchivesExtractionsRangePage::GetInfo(CArchivesExtractionProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cInfo[0]);
}

CTelemetryArchivesExtractionsPageFolder *CTelemetryArchivesExtractionsRangePage::GetParent() CONST
{
	return((CTelemetryArchivesExtractionsPageFolder *)CLocalePropertyPage::GetParent());
}

VOID CTelemetryArchivesExtractionsRangePage::ShowRangeInfo()
{
	UINT  nMode;
	CTimeKey  tTimeKey;
	CTimeKey  tRange[2];
	CTimeKey  tExecution[2];
	CTimeSpan  tDailyRange[2];
	CTimeSpan  tIntervalRange[3];
	CTimeSpan  tIntervalExecution;

	nMode = m_cInfo[0].GetTimeRangeMode();
	tIntervalRange[0] = m_cInfo[0].GetPeriodicalInterval();
	tIntervalRange[1] = m_cInfo[0].GetTriggeredInterval();
	tIntervalRange[2] = m_cInfo[0].GetRangeInterval();
	m_cInfo[0].GetTimeRange(tRange[0], tRange[1]);
	m_cInfo[0].GetDailyTimeRange(tDailyRange[0], tDailyRange[1]);
	m_cInfo[0].GetPeriodicalExecutionTime(tExecution[0], tIntervalExecution, tExecution[1]);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STARTTIME), (nMode == ARCHIVESEXTRACTIONINFO_RANGE_NORMAL) ? tRange[0] : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STOPTIME), (nMode == ARCHIVESEXTRACTIONINFO_RANGE_NORMAL) ? tRange[1] : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STARTTIME), (nMode == ARCHIVESEXTRACTIONINFO_RANGE_DAILY) ? (((tTimeKey = CTime::GetCurrentTime().GetTime()).GetTime() / SECONDSPERDAY)*SECONDSPERDAY + tDailyRange[0].GetTotalSeconds()) : ((tTimeKey = CTime::GetCurrentTime().GetTime())));
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STOPTIME), CTimeKey((tTimeKey.GetTime() / SECONDSPERDAY)*SECONDSPERDAY + tDailyRange[1].GetTotalSeconds()));
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES), tIntervalRange[0].GetTotalSeconds() / SECONDSPERMINUTE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES), tIntervalRange[1].GetTotalSeconds() / SECONDSPERMINUTE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL_MINUTES), tIntervalRange[2].GetTotalSeconds() / SECONDSPERMINUTE);
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_SETCURSEL, (nMode == ARCHIVESEXTRACTIONINFO_RANGE_TRIGGEREDINTERVAL) ? (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYARCHIVES_RANGEPAGE_TRIGGER_BEFOREEVENT)) : (WPARAM)-1);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD, (nMode == ARCHIVESEXTRACTIONINFO_RANGE_NORMAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD, (nMode == ARCHIVESEXTRACTIONINFO_RANGE_DAILY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL, (nMode == ARCHIVESEXTRACTIONINFO_RANGE_COMPLETEINTERVAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART, (nMode == ARCHIVESEXTRACTIONINFO_RANGE_PARTIALINTERVAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER, (nMode == ARCHIVESEXTRACTIONINFO_RANGE_TRIGGEREDINTERVAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL, (tIntervalRange[2].GetTotalSeconds() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_EXTRACT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_PREFIX_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_SUFFIX_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL_MINUTES)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL));
}

VOID CTelemetryArchivesExtractionsRangePage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE)));
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STARTTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STOPTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STARTTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STOPTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL_MINUTES, bCheck);
}

BOOL CTelemetryArchivesExtractionsRangePage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cInfo[0].Compare(&m_cInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTelemetryArchivesExtractionsRangePage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CTelemetryArchivesExtractionsRangePage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryArchivesExtractionsRangePage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesExtractionsRangePage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryArchivesExtractionsRangePage)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD, OnTimeRange)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD, OnDailyTimeRange)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL, OnPeriodicalRange)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART, OnPeriodicalPartialRange)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER, OnTriggeredRange)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL, OnRangeInterval)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, OnSelchangeTriggerReference)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STARTTIME, OnSpinchangeStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STOPTIME, OnSpinchangeStopTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STARTTIME, OnSpinchangeDailyStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STOPTIME, OnSpinchangeDailyStopTime)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES, OnSpinchangePeriodicalInterval)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES, OnSpinchangeTriggeredInterval)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL_MINUTES, OnSpinchangeRangeInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsRangePage message handlers

BOOL CTelemetryArchivesExtractionsRangePage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES), TELEMETRYARCHIVESEXTRACTIONSRANGE_MINIMUMINTERVAL, TELEMETRYARCHIVESEXTRACTIONSRANGE_MAXIMUMINTERVAL);
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES), TELEMETRYARCHIVESEXTRACTIONSRANGE_MINIMUMINTERVAL, TELEMETRYARCHIVESEXTRACTIONSRANGE_MAXIMUMINTERVAL);
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL_MINUTES), TELEMETRYARCHIVESEXTRACTIONSRANGE_MINIMUMINTERVAL, TELEMETRYARCHIVESEXTRACTIONSRANGE_MAXIMUMINTERVAL);
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYARCHIVES_RANGEPAGE_TRIGGER_BEFOREEVENT));
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYARCHIVES_RANGEPAGE_TRIGGER_AFTEREVENT));
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTelemetryArchivesExtractionsRangePage::OnSetActive()
{
	for (GetParent()->GetInfo(&m_cInfo[0]); GetParent()->IsWindowVisible(); )
	{
		ShowRangeInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CTelemetryArchivesExtractionsRangePage::OnKillActive()
{
	GetParent()->SetInfo(&m_cInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CTelemetryArchivesExtractionsRangePage::OnTimeRange()
{
	CTimeKey  tRange;

	m_cInfo[0].SetExecutionTime(0);
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTriggeredExecution(EMPTYSTRING);
	m_cInfo[0].SetTimeRangeMode((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD)) ? ARCHIVESEXTRACTIONINFO_RANGE_NORMAL : 0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD)) ? ARCHIVESEXTRACTIONINFO_EXECUTION_IMMEDIATELY : 0);
	m_cInfo[0].SetTimeRange((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD)) ? (tRange.GetTime() - SECONDSPERMINUTE*TELEMETRYARCHIVESEXTRACTIONSRANGE_DEFAULTINTERVAL) : 0, (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD)) ? tRange.GetTime() : 0);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STARTTIME), CTimeKey(tRange.GetTime() - SECONDSPERMINUTE*TELEMETRYARCHIVESEXTRACTIONSRANGE_DEFAULTINTERVAL));
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STOPTIME), tRange);
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD, !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD));
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_PREFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_SUFFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsRangePage::OnDailyTimeRange()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTriggeredExecution(EMPTYSTRING);
	m_cInfo[0].SetTimeRangeMode((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD)) ? ARCHIVESEXTRACTIONINFO_RANGE_DAILY : 0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD)) ? ARCHIVESEXTRACTIONINFO_EXECUTION_ATDAILYTIME : 0);
	m_cInfo[0].SetDailyTimeRange((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD)) ? TELEMETRYARCHIVESEXTRACTIONSRANGE_DAILYSTARTTIME : 0, (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD)) ? TELEMETRYARCHIVESEXTRACTIONSRANGE_DAILYSTOPTIME : 0);
	m_cInfo[0].SetDailyExecutionTime((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD)) ? TELEMETRYARCHIVESEXTRACTIONSRANGE_DAILYSTOPTIME : 0);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STARTTIME), CTimeKey((CTime::GetCurrentTime().GetTime() / SECONDSPERDAY)*SECONDSPERDAY + TELEMETRYARCHIVESEXTRACTIONSRANGE_DAILYSTARTTIME));
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STOPTIME), CTimeKey((CTime::GetCurrentTime().GetTime() / SECONDSPERDAY)*SECONDSPERDAY + TELEMETRYARCHIVESEXTRACTIONSRANGE_DAILYSTOPTIME));
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD, !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD));
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_PREFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_SUFFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsRangePage::OnPeriodicalRange()
{
	CTimeKey  tRange;

	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTriggeredExecution(EMPTYSTRING);
	m_cInfo[0].SetTimeRangeMode((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL)) ? ARCHIVESEXTRACTIONINFO_RANGE_COMPLETEINTERVAL : 0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL)) ? ARCHIVESEXTRACTIONINFO_EXECUTION_ATINTERVAL : 0);
	m_cInfo[0].SetPeriodicalExecutionTime((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL)) ? tRange.GetTime() : 0, (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL)) ? (10 * TELEMETRYARCHIVESEXTRACTIONSRANGE_DEFAULTINTERVAL) : 0, (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL)) ? (tRange.GetTime() + 6 * 10 * TELEMETRYARCHIVESEXTRACTIONSRANGE_DEFAULTINTERVAL) : 0);
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL, !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL));
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_PREFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_SUFFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsRangePage::OnPeriodicalPartialRange()
{
	CTimeKey  tRange;

	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTriggeredExecution(EMPTYSTRING);
	m_cInfo[0].SetTimeRangeMode((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART)) ? ARCHIVESEXTRACTIONINFO_RANGE_PARTIALINTERVAL : 0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART)) ? ARCHIVESEXTRACTIONINFO_EXECUTION_ATINTERVAL : 0);
	m_cInfo[0].SetPeriodicalInterval((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART)) ? (10 * TELEMETRYARCHIVESEXTRACTIONSRANGE_DEFAULTINTERVAL) : 0);
	m_cInfo[0].SetPeriodicalExecutionTime((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART)) ? tRange.GetTime() : 0, (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART)) ? (10 * TELEMETRYARCHIVESEXTRACTIONSRANGE_DEFAULTINTERVAL) : 0, (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART)) ? (tRange.GetTime() + 6 * 10 * TELEMETRYARCHIVESEXTRACTIONSRANGE_DEFAULTINTERVAL) : 0);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES), (10 * TELEMETRYARCHIVESEXTRACTIONSRANGE_DEFAULTINTERVAL) / SECONDSPERMINUTE);
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART, !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART));
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_PREFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_SUFFIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsRangePage::OnTriggeredRange()
{
	for (m_cInfo[0].SetExecutionCycle(0); !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER); )
	{
		m_cInfo[0].SetTimeRangeMode(ARCHIVESEXTRACTIONINFO_RANGE_TRIGGEREDINTERVAL);
		m_cInfo[0].SetExecutionMode(ARCHIVESEXTRACTIONINFO_EXECUTION_ATEVENT);
		m_cInfo[0].SetTriggeredInterval(SECONDSPERMINUTE*TELEMETRYARCHIVESEXTRACTIONSRANGE_DEFAULTINTERVAL, TRUE);
		m_cInfo[0].SetTriggeredInterval(0, FALSE);
		break;
	}
	if (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER))
	{
		m_cInfo[0].SetTimeRangeMode(0);
		m_cInfo[0].SetExecutionMode(0);
		m_cInfo[0].SetTriggeredInterval(0, TRUE);
		m_cInfo[0].SetTriggeredInterval(0, FALSE);
	}
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES), TELEMETRYARCHIVESEXTRACTIONSRANGE_DEFAULTINTERVAL);
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_SETCURSEL, (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER)) ? (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYARCHIVES_RANGEPAGE_TRIGGER_BEFOREEVENT)) : (WPARAM)-1);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_ALL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER, !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_PREFIX_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_SUFFIX_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsRangePage::OnRangeInterval()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetRangeInterval((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL)) ? (SECONDSPERMINUTE*TELEMETRYARCHIVESEXTRACTIONSRANGE_DEFAULTINTERVAL) : 0);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL_MINUTES), TELEMETRYARCHIVESEXTRACTIONSRANGE_DEFAULTINTERVAL);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL_MINUTES)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL_MINUTES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsRangePage::OnSelchangeTriggerReference()
{
	CTimeSpan  tInterval;

	tInterval = m_cInfo[0].GetTriggeredInterval((Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE), (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_GETCURSEL)) == STRING(IDS_TELEMETRYARCHIVES_RANGEPAGE_TRIGGER_BEFOREEVENT)) ? TRUE : FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES), tInterval.GetTotalSeconds() / SECONDSPERMINUTE);
}

void CTelemetryArchivesExtractionsRangePage::OnSpinchangeStartTime()
{
	UINT  nMode;
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STOPTIME)), Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STOPTIME), (tTime[1] = (tTime[0] > tTime[1]) ? tTime[0] : tTime[1])); ((nMode = m_cInfo[0].GetExecutionMode()) == ARCHIVESEXTRACTIONINFO_EXECUTION_IMMEDIATELY && tTime[1] > CTime::GetCurrentTime().GetTime()) || ((nMode == ARCHIVESEXTRACTIONINFO_EXECUTION_ATTIME || nMode == ARCHIVESEXTRACTIONINFO_EXECUTION_BYSCRIPT) && tTime[1] > m_cInfo[0].GetExecutionTime().GetTime()); )
	{
		m_cInfo[0].SetExecutionMode(ARCHIVESEXTRACTIONINFO_EXECUTION_ATTIME);
		m_cInfo[0].SetExecutionTime(tTime[1]);
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTimeRange(tTime[0], tTime[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsRangePage::OnSpinchangeStopTime()
{
	UINT  nMode;
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STOPTIME)), Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TIMEPERIOD_STARTTIME), (tTime[0] = (tTime[0] <= tTime[1]) ? tTime[0] : tTime[1])); ((nMode = m_cInfo[0].GetExecutionMode()) == ARCHIVESEXTRACTIONINFO_EXECUTION_IMMEDIATELY && tTime[1] > CTime::GetCurrentTime().GetTime()) || ((nMode == ARCHIVESEXTRACTIONINFO_EXECUTION_ATTIME || nMode == ARCHIVESEXTRACTIONINFO_EXECUTION_BYSCRIPT) && tTime[1] > m_cInfo[0].GetExecutionTime().GetTime()); )
	{
		m_cInfo[0].SetExecutionMode(ARCHIVESEXTRACTIONINFO_EXECUTION_ATTIME);
		m_cInfo[0].SetExecutionTime(tTime[1]);
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTimeRange(tTime[0], tTime[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsRangePage::OnSpinchangeDailyStartTime()
{
	UINT  nMode;
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STOPTIME)); (nMode = m_cInfo[0].GetExecutionMode()) == ARCHIVESEXTRACTIONINFO_EXECUTION_ATDAILYTIME && (((tTime[0] = tTime[0].GetTime() % SECONDSPERDAY) <= (tTime[1] = tTime[1].GetTime() % SECONDSPERDAY) && tTime[0] <= m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds() && tTime[1] > m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds()) || (tTime[0] > tTime[1] && (tTime[0] <= m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds() || tTime[1] > m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds()))); )
	{
		m_cInfo[0].SetExecutionMode(ARCHIVESEXTRACTIONINFO_EXECUTION_ATDAILYTIME);
		m_cInfo[0].SetDailyExecutionTime(tTime[1].GetTime() % SECONDSPERDAY);
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetDailyTimeRange(tTime[0].GetTime() % SECONDSPERDAY, tTime[1].GetTime() % SECONDSPERDAY);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsRangePage::OnSpinchangeDailyStopTime()
{
	UINT  nMode;
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_DAILYPERIOD_STOPTIME)); (nMode = m_cInfo[0].GetExecutionMode()) == ARCHIVESEXTRACTIONINFO_EXECUTION_ATDAILYTIME && (((tTime[0] = tTime[0].GetTime() % SECONDSPERDAY) <= (tTime[1] = tTime[1].GetTime() % SECONDSPERDAY) && tTime[0] <= m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds() && tTime[1] > m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds()) || (tTime[0] > tTime[1] && (tTime[0] <= m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds() || tTime[1] > m_cInfo[0].GetDailyExecutionTime().GetTotalSeconds()))); )
	{
		m_cInfo[0].SetExecutionMode(ARCHIVESEXTRACTIONINFO_EXECUTION_ATDAILYTIME);
		m_cInfo[0].SetDailyExecutionTime(tTime[1].GetTime() % SECONDSPERDAY);
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetDailyTimeRange(tTime[0].GetTime() % SECONDSPERDAY, tTime[1].GetTime() % SECONDSPERDAY);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsRangePage::OnSpinchangePeriodicalInterval()
{
	UINT  nMode;
	CTimeKey  tTime[2];
	CTimeSpan  tInterval[2];

	for (m_cInfo[0].GetPeriodicalExecutionTime(tTime[0], tInterval[0], tTime[1]), tInterval[1] = SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_PERIOD_PART_MINUTES)); (nMode = m_cInfo[0].GetExecutionMode()) == ARCHIVESEXTRACTIONINFO_EXECUTION_ATINTERVAL && tTime[0] + tInterval[1] > tTime[1]; )
	{
		m_cInfo[0].SetExecutionMode(ARCHIVESEXTRACTIONINFO_EXECUTION_ATINTERVAL);
		m_cInfo[0].SetPeriodicalExecutionTime(tTime[0], tInterval[1], tTime[0].GetTime() + tInterval[1].GetTotalSeconds());
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetPeriodicalInterval(tInterval[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsRangePage::OnSpinchangeTriggeredInterval()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTriggeredInterval(SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES)), (Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE), (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_TRIGGER_MINUTES_REFERENCE, CB_GETCURSEL)) == STRING(IDS_TELEMETRYARCHIVES_RANGEPAGE_TRIGGER_BEFOREEVENT)) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsRangePage::OnSpinchangeRangeInterval()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetRangeInterval(SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_RANGEPAGE_INTERVAL_MINUTES)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsExecutionPage property page

IMPLEMENT_DYNCREATE(CTelemetryArchivesExtractionsExecutionPage, CLocalePropertyPage)

CTelemetryArchivesExtractionsExecutionPage::CTelemetryArchivesExtractionsExecutionPage() : CLocalePropertyPage(CTelemetryArchivesExtractionsExecutionPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryArchivesExtractionsExecutionPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryArchivesExtractionsExecutionPage::SetInfo(CONST CArchivesExtractionProfileInfo *pProfileInfo, CONST CArchivesExtractionProfileInfo *pBackupProfileInfo, BOOL bUpdate)
{
	for (m_cInfo[0].Copy(pProfileInfo); pBackupProfileInfo != (CONST CArchivesExtractionProfileInfo *) NULL; )
	{
		m_cInfo[1].Copy(pBackupProfileInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()) && bUpdate)
	{
		ShowExecutionInfo();
		return;
	}
}

VOID CTelemetryArchivesExtractionsExecutionPage::GetInfo(CArchivesExtractionProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cInfo[0]);
}

CTelemetryArchivesExtractionsPageFolder *CTelemetryArchivesExtractionsExecutionPage::GetParent() CONST
{
	return((CTelemetryArchivesExtractionsPageFolder *)CLocalePropertyPage::GetParent());
}

BOOL CTelemetryArchivesExtractionsExecutionPage::EnumEvents()
{
	INT  nEvent;
	INT  nEvents;
	CTelemetryEvents  pEvents;
	CTelemetryEventInfo  *pEventInfo;

	for (nEvent = 0, nEvents = (GetTelemetryEvents(pEvents)) ? (INT)pEvents.GetSize() : 0; nEvent < nEvents; nEvent++)
	{
		if ((pEventInfo = pEvents.GetAt(nEvent))) SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pEventInfo->GetName());
		continue;
	}
	return((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTelemetryArchivesExtractionsExecutionPage::ShowExecutionInfo()
{
	UINT  nMode[2];
	CString  szEvent;
	CTimeKey  tRange[2];
	CTimeKey  tExecution;
	CTimeKey  tExecutionStartTime;
	CTimeKey  tExecutionStopTime;
	CTimeSpan  tExecutionInterval;
	CTimeSpan  tDailyExecution;
	CTimeSpan  tRangeInterval;

	nMode[0] = m_cInfo[0].GetTimeRangeMode();
	nMode[1] = m_cInfo[0].GetExecutionMode();
	tExecution = m_cInfo[0].GetExecutionTime();
	szEvent = m_cInfo[0].GetTriggeredExecution();
	tDailyExecution = m_cInfo[0].GetDailyExecutionTime();
	tRangeInterval = m_cInfo[0].GetPeriodicalInterval();
	m_cInfo[0].GetTimeRange(tRange[0], tRange[1]);
	m_cInfo[0].GetPeriodicalExecutionTime(tExecutionStartTime, tExecutionInterval, tExecutionStopTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE_TIME), (nMode[1] == ARCHIVESEXTRACTIONINFO_EXECUTION_ATTIME || nMode[1] == ARCHIVESEXTRACTIONINFO_EXECUTION_BYSCRIPT) ? tExecution : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY_TIME), (nMode[1] == ARCHIVESEXTRACTIONINFO_EXECUTION_ATDAILYTIME) ? CTimeKey((CTime::GetCurrentTime().GetTime() / SECONDSPERDAY)*SECONDSPERDAY + tDailyExecution.GetTotalSeconds()) : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME), (nMode[1] == ARCHIVESEXTRACTIONINFO_EXECUTION_ATINTERVAL) ? tExecutionStartTime : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME), (nMode[1] == ARCHIVESEXTRACTIONINFO_EXECUTION_ATINTERVAL) ? tExecutionStopTime : CTime::GetCurrentTime().GetTime());
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL), (nMode[1] == ARCHIVESEXTRACTIONINFO_EXECUTION_ATINTERVAL) ? max(tRangeInterval.GetTotalSeconds() / SECONDSPERMINUTE, TELEMETRYARCHIVESEXTRACTIONSEXECUTION_MINIMUMINTERVAL) : TELEMETRYARCHIVESEXTRACTIONSEXECUTION_MINIMUMINTERVAL, TELEMETRYARCHIVESEXTRACTIONSEXECUTION_MAXIMUMINTERVAL);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL), tExecutionInterval.GetTotalSeconds() / SECONDSPERMINUTE);
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT_NAME, CB_SETCURSEL, (nMode[1] == ARCHIVESEXTRACTIONINFO_EXECUTION_ATEVENT) ? (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEvent) : (WPARAM)-1);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_IMMEDIATELY, (nMode[1] == ARCHIVESEXTRACTIONINFO_EXECUTION_IMMEDIATELY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE, (nMode[1] == ARCHIVESEXTRACTIONINFO_EXECUTION_ATTIME || nMode[1] == ARCHIVESEXTRACTIONINFO_EXECUTION_BYSCRIPT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY, (nMode[1] == ARCHIVESEXTRACTIONINFO_EXECUTION_ATDAILYTIME) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY, (nMode[1] == ARCHIVESEXTRACTIONINFO_EXECUTION_ATINTERVAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT, (nMode[1] == ARCHIVESEXTRACTIONINFO_EXECUTION_ATEVENT  &&  SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_STATIC)->EnableWindow((nMode[0] != 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_IMMEDIATELY)->EnableWindow((nMode[0] == ARCHIVESEXTRACTIONINFO_RANGE_NORMAL  &&  tRange[1] <= CTime::GetCurrentTime()) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE)->EnableWindow((nMode[0] == ARCHIVESEXTRACTIONINFO_RANGE_NORMAL) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY)->EnableWindow((nMode[0] == ARCHIVESEXTRACTIONINFO_RANGE_DAILY) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY)->EnableWindow((nMode[0] == ARCHIVESEXTRACTIONINFO_RANGE_COMPLETEINTERVAL || nMode[0] == ARCHIVESEXTRACTIONINFO_RANGE_PARTIALINTERVAL) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT)->EnableWindow((nMode[0] == ARCHIVESEXTRACTIONINFO_RANGE_TRIGGEREDINTERVAL  &&  SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT));
}

VOID CTelemetryArchivesExtractionsExecutionPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_IMMEDIATELY, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE)));
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE_TIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY_TIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT_NAME, bCheck);
}

BOOL CTelemetryArchivesExtractionsExecutionPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cInfo[0].Compare(&m_cInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTelemetryArchivesExtractionsExecutionPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CTelemetryArchivesExtractionsExecutionPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryArchivesExtractionsExecutionPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesExtractionsExecutionPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryArchivesExtractionsExecutionPage)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_IMMEDIATELY, OnExecutionNow)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE, OnExecutionAtTime)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY, OnExecutionAtDailyTime)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY, OnExecutionAtPeriodicalTime)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT, OnExecutionAtEvent)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT_NAME, OnSelchangeExecutionEvent)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE_TIME, OnSpinchangeExecutionTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY_TIME, OnSpinchangeExecutionDailyTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME, OnSpinchangeExecutionPeriodicalStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME, OnSpinchangeExecutionPeriodicalStopTime)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL, OnSpinchangeExecutionPeriodicalInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsExecutionPage message handlers

BOOL CTelemetryArchivesExtractionsExecutionPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	AdjustToPrivileges();
	EnumEvents();
	return TRUE;
}

BOOL CTelemetryArchivesExtractionsExecutionPage::OnSetActive()
{
	for (GetParent()->GetInfo(&m_cInfo[0]); GetParent()->IsWindowVisible(); )
	{
		ShowExecutionInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CTelemetryArchivesExtractionsExecutionPage::OnKillActive()
{
	GetParent()->SetInfo(&m_cInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CTelemetryArchivesExtractionsExecutionPage::OnExecutionNow()
{
	m_cInfo[0].SetExecutionTime(0);
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_IMMEDIATELY)) ? ARCHIVESEXTRACTIONINFO_EXECUTION_IMMEDIATELY : 0);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_IMMEDIATELY, !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_IMMEDIATELY));
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExecutionPage::OnExecutionAtTime()
{
	CTimeKey  tRange[2];
	CTimeKey  tExecution;

	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].GetTimeRange(tRange[0], tRange[1]);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE)) ? ARCHIVESEXTRACTIONINFO_EXECUTION_ATTIME : 0);
	m_cInfo[0].SetExecutionTime((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE)) ? max(tExecution.GetTime(), tRange[1].GetTime()) : 0);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE_TIME), max(tExecution, tRange[1]));
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE, !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE));
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_IMMEDIATELY, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExecutionPage::OnExecutionAtDailyTime()
{
	CTimeSpan  tDailyRange[2];

	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].GetDailyTimeRange(tDailyRange[0], tDailyRange[1]);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY)) ? ARCHIVESEXTRACTIONINFO_EXECUTION_ATDAILYTIME : 0);
	m_cInfo[0].SetDailyExecutionTime((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY)) ? tDailyRange[1].GetTotalSeconds() : 0);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY_TIME), CTimeKey((CTime::GetCurrentTime().GetTime() / SECONDSPERDAY)*SECONDSPERDAY + tDailyRange[1].GetTotalSeconds()));
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY, !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExecutionPage::OnExecutionAtPeriodicalTime()
{
	UINT  nMode;
	CTimeKey  tTime;
	CTimeSpan  tInterval;

	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY)) ? ARCHIVESEXTRACTIONINFO_EXECUTION_ATINTERVAL : 0);
	m_cInfo[0].SetPeriodicalExecutionTime((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY)) ? tTime.GetTime() : 0, (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY)) ? tInterval.GetTotalSeconds() : 0, (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY)) ? (tTime.GetTime() + (tInterval = ((nMode = m_cInfo[0].GetTimeRangeMode()) == ARCHIVESEXTRACTIONINFO_RANGE_COMPLETEINTERVAL) ? (10 * TELEMETRYARCHIVESEXTRACTIONSEXECUTION_DEFAULTINTERVAL) : m_cInfo[0].GetPeriodicalInterval().GetTotalSeconds()).GetTotalSeconds()) : 0);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL), (tInterval = ((nMode = m_cInfo[0].GetTimeRangeMode()) == ARCHIVESEXTRACTIONINFO_RANGE_COMPLETEINTERVAL) ? (10 * TELEMETRYARCHIVESEXTRACTIONSEXECUTION_DEFAULTINTERVAL) : m_cInfo[0].GetPeriodicalInterval().GetTotalSeconds()).GetTotalSeconds() / SECONDSPERMINUTE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME), tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME), CTimeKey(tTime.GetTime() + tInterval.GetTotalSeconds()));
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY, !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExecutionPage::OnExecutionAtEvent()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT)) ? ARCHIVESEXTRACTIONINFO_EXECUTION_ATEVENT : 0);
	m_cInfo[0].SetTriggeredExecution((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT)) ? Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT_NAME), 0) : EMPTYSTRING);
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT_NAME, CB_SETCURSEL, (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT)) ? 0 : -1);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT, !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExecutionPage::OnSelchangeExecutionEvent()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTriggeredExecution(Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT_NAME), (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_EVENT_NAME, CB_GETCURSEL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExecutionPage::OnSpinchangeExecutionTime()
{
	CTimeKey  tTime;
	CTimeKey  tRange[2];

	for (m_cInfo[0].GetTimeRange(tRange[0], tRange[1]), tTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE_TIME)); (tTime = (tTime < tRange[1].GetTime()) ? tRange[1].GetTime() : tTime) != tTime; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE_TIME), tTime);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_ONCE_TIME)->SetFocus();
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetExecutionTime(tTime);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExecutionPage::OnSpinchangeExecutionDailyTime()
{
	CTimeKey  tTime;
	CTimeSpan  tDailyRange[2];
	CTimeSpan  tDailyExecution[2];

	for (tDailyExecution[0] = m_cInfo[0].GetDailyExecutionTime(), m_cInfo[0].GetDailyTimeRange(tDailyRange[0], tDailyRange[1]), tTime = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY_TIME)); (tDailyExecution[1] = (tTime.GetTime() % SECONDSPERDAY >= tDailyExecution[0].GetTotalSeconds()) ? (((tDailyRange[0] <= tDailyRange[1] && tDailyRange[0].GetTotalSeconds() <= tTime.GetTime() % SECONDSPERDAY && tDailyRange[1].GetTotalSeconds() > tTime.GetTime() % SECONDSPERDAY) || (tDailyRange[0] > tDailyRange[1] && (tDailyRange[0].GetTotalSeconds() <= tTime.GetTime() % SECONDSPERDAY || tDailyRange[1].GetTotalSeconds() > tTime.GetTime() % SECONDSPERDAY))) ? tDailyRange[1] : CTimeSpan(tTime.GetTime() % SECONDSPERDAY)) : (((tDailyRange[0] <= tDailyRange[1] && tDailyRange[0].GetTotalSeconds() <= tTime.GetTime() % SECONDSPERDAY && tDailyRange[1].GetTotalSeconds() > tTime.GetTime() % SECONDSPERDAY) || (tDailyRange[0] > tDailyRange[1] && (tDailyRange[0].GetTotalSeconds() <= tTime.GetTime() % SECONDSPERDAY || tDailyRange[1].GetTotalSeconds() > tTime.GetTime() % SECONDSPERDAY))) ? ((!tDailyRange[0].GetTotalSeconds()) ? CTimeSpan(SECONDSPERDAY - 1) : CTimeSpan(tDailyRange[0].GetTotalSeconds() - 1)) : CTimeSpan(tTime.GetTime() % SECONDSPERDAY))) != tTime.GetTime() % SECONDSPERDAY; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY_TIME), CTimeKey(tDailyExecution[1].GetTotalSeconds() + (CTime::GetCurrentTime().GetTime() / SECONDSPERDAY)*SECONDSPERDAY));
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_DAILY_TIME)->SetFocus();
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetDailyExecutionTime(tDailyExecution[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExecutionPage::OnSpinchangeExecutionPeriodicalStartTime()
{
	CTimeKey  tTime[2];
	CTimeSpan  tInterval;

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME)), tInterval = SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL)); tTime[0] != 0 || tTime[1] != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME), ((tTime[1] = (tTime[0].GetTime() + tInterval.GetTotalSeconds() > tTime[1].GetTime()) ? (tTime[0].GetTime() + tInterval.GetTotalSeconds()) : tTime[1])));
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetPeriodicalExecutionTime(tTime[0], tInterval, tTime[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExecutionPage::OnSpinchangeExecutionPeriodicalStopTime()
{
	CTimeKey  tTime[2];
	CTimeSpan  tInterval;

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME)), tInterval = SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL)); tTime[0] != 0 || tTime[1] != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME), ((tTime[0] = (tTime[1].GetTime() - tInterval.GetTotalSeconds() < tTime[0].GetTime()) ? (tTime[1].GetTime() - tInterval.GetTotalSeconds()) : tTime[0])));
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetPeriodicalExecutionTime(tTime[0], tInterval, tTime[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExecutionPage::OnSpinchangeExecutionPeriodicalInterval()
{
	CTimeKey  tTime[2];
	CTimeSpan  tInterval;

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME)), tInterval = max(SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_INTERVAL)), m_cInfo[0].GetPeriodicalInterval().GetTotalSeconds()); tTime[0] != 0 || tTime[1] != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXECUTIONPAGE_RUN_PERIODICALLY_STOPTIME), ((tTime[1] = (tTime[0].GetTime() + tInterval.GetTotalSeconds() > tTime[1].GetTime()) ? (tTime[0].GetTime() + tInterval.GetTotalSeconds()) : tTime[1])));
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetPeriodicalExecutionTime(tTime[0], tInterval, tTime[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsFTPTransfersPage property page

IMPLEMENT_DYNCREATE(CTelemetryArchivesExtractionsFTPTransfersPage, CLocalePropertyPage)

CTelemetryArchivesExtractionsFTPTransfersPage::CTelemetryArchivesExtractionsFTPTransfersPage() : CLocalePropertyPage(CTelemetryArchivesExtractionsFTPTransfersPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryArchivesExtractionsFTPTransfersPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryArchivesExtractionsFTPTransfersPage::SetInfo(CONST CArchivesExtractionProfileInfo *pProfileInfo, CONST CArchivesExtractionProfileInfo *pBackupProfileInfo, BOOL bUpdate)
{
	for (m_cInfo[0].Copy(pProfileInfo); pBackupProfileInfo != (CONST CArchivesExtractionProfileInfo *) NULL; )
	{
		m_cInfo[1].Copy(pBackupProfileInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()) && bUpdate)
	{
		ShowFTPTransfersInfo();
		return;
	}
}

VOID CTelemetryArchivesExtractionsFTPTransfersPage::GetInfo(CArchivesExtractionProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cInfo[0]);
}

CTelemetryArchivesExtractionsPageFolder *CTelemetryArchivesExtractionsFTPTransfersPage::GetParent() CONST
{
	return((CTelemetryArchivesExtractionsPageFolder *)CLocalePropertyPage::GetParent());
}

VOID CTelemetryArchivesExtractionsFTPTransfersPage::ShowFTPTransfersInfo()
{
	UINT  nPort;
	UINT  nRetry;
	UINT  nAudit;
	BOOL  bEnabled;
	CString  szLocation;
	CString  szUserName;
	CString  szPassword;
	CTimeSpan  tRetryInterval;

	nPort = m_cInfo[0].GetFTPPort();
	nAudit = m_cInfo[0].GetFTPAudition();
	bEnabled = m_cInfo[0].GetFTPOption();
	szLocation = m_cInfo[0].GetFTPLocation();
	szUserName = m_cInfo[0].GetFTPUserName();
	szPassword = m_cInfo[0].GetFTPPassword();
	m_cInfo[0].GetFTPRetryInfo(nRetry, tRetryInterval);
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT_NUMBER), TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_FIRSTPORT, TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_LASTPORT);
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_NUMBER), TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_MINIMUMRETRIES, TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_MAXIMUMRETRIES);
	Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL), TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_MINIMUMRETRYINTERVAL, TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_MAXIMUMRETRYINTERVAL);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT_NUMBER), nPort);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_NUMBER), nRetry);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL), tRetryInterval.GetTotalMinutes());
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT, (nPort >= TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_FIRSTPORT  &&  nPort <= TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_LASTPORT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_FTPTRANSFERS, bEnabled);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_NEVER, (!nRetry) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_CONTINUOUSLY, (nRetry == (UINT)-1) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT, (nRetry != 0 && nRetry != (UINT)-1) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_AUDITION_NOTHING, (nAudit == ARCHIVESEXTRACTIONINFO_AUDITION_NONE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_AUDITION_EVERYTHING, (nAudit == ARCHIVESEXTRACTIONINFO_AUDITION_ALL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_AUDITION_FAILURES, (nAudit == ARCHIVESEXTRACTIONINFO_AUDITION_FAILURES) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_LOCATION)->SetWindowText(szLocation);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_USERNAME)->SetWindowText(szUserName);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PASSWORD)->SetWindowText(szPassword);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_LOCATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_LOCATION)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_USERNAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_USERNAME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PASSWORD_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PASSWORD)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_FTPTRANSFERS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_BEHAVIOR)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_BEHAVIOR_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_NEVER)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_CONTINUOUSLY)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_CONTINUOUSLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_CONTINUOUSLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT) || IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_CONTINUOUSLY));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_AUDITION)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_AUDITION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_AUDITION_NOTHING)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_AUDITION_EVERYTHING)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_AUDITION_FAILURES)->EnableWindow();
}

BOOL CTelemetryArchivesExtractionsFTPTransfersPage::CheckURL(LPCTSTR pszLocation) CONST
{
	INT  nPos[2];
	UINT  nPort[1];
	DWORD  dwService;
	CString  szLocation;
	CString  szFTPSite[3];
	INTERNET_PORT  iPort;

	for (szLocation = pszLocation, nPort[0] = 0; !szLocation.IsEmpty(); )
	{
		for (nPos[0] = szLocation.Find(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONS_FTPUSERS_SEPARATOR_SEMICOLON)), nPos[1] = szLocation.Find(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONS_FTPUSERS_SEPARATOR_COMMA)); (nPos[0] < nPos[1] || nPos[1] < 0) && nPos[0] >= 0; )
		{
			szFTPSite[0] = szLocation.Left(nPos[0]);
			szLocation = szLocation.Mid(nPos[0]);
			szLocation = szLocation.Mid(lstrlen(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONS_FTPUSERS_SEPARATOR_SEMICOLON)));
			break;
		}
		if ((nPos[0] >= nPos[1] || nPos[0] < 0) && nPos[1] >= 0)
		{
			szFTPSite[0] = szLocation.Left(nPos[1]);
			szLocation = szLocation.Mid(nPos[1]);
			szLocation = szLocation.Mid(lstrlen(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONS_FTPUSERS_SEPARATOR_COMMA)));
		}
		if (nPos[0] < 0 && nPos[1] < 0)
		{
			szFTPSite[0] = szLocation;
			szLocation.Empty();
		}
		if (AfxParseURL(szFTPSite[0], dwService, szFTPSite[1], szFTPSite[2], iPort))
		{
			if (dwService == AFX_INET_SERVICE_FTP && (iPort == INTERNET_DEFAULT_FTP_PORT || !nPort[0] || nPort[0] == (UINT)iPort))
			{
				nPort[0] = (iPort != INTERNET_DEFAULT_FTP_PORT) ? iPort : nPort[0];
				continue;
			}
		}
		szLocation = pszLocation;
		break;
	}
	return szLocation.IsEmpty();
}

VOID CTelemetryArchivesExtractionsFTPTransfersPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_LOCATION, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE)));
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_USERNAME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PASSWORD, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT_NUMBER, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_FTPTRANSFERS, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_NEVER, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_CONTINUOUSLY, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_NUMBER, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_AUDITION_NOTHING, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_AUDITION_EVERYTHING, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_AUDITION_FAILURES, bCheck);
}

BOOL CTelemetryArchivesExtractionsFTPTransfersPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cInfo[0].Compare(&m_cInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTelemetryArchivesExtractionsFTPTransfersPage::Check(BOOL bAll) CONST
{
	CString  szLocation;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_LOCATION)->GetWindowText(szLocation);
		return(((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_FTPTRANSFERS) && !GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_LOCATION)->GetWindowTextLength() && !GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_USERNAME)->GetWindowTextLength() && !GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PASSWORD)->GetWindowTextLength() && !IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT)) || (GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_LOCATION)->GetWindowTextLength() > 0 && (!GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PASSWORD)->GetWindowTextLength() || GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_USERNAME)->GetWindowTextLength() > 0) && CheckURL(szLocation))) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

void CTelemetryArchivesExtractionsFTPTransfersPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryArchivesExtractionsFTPTransfersPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesExtractionsFTPTransfersPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryArchivesExtractionsFTPTransfersPage)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_FTPTRANSFERS, OnEnable)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT, OnUsePort)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_NEVER, OnRetryNever)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_CONTINUOUSLY, OnRetryContinuously)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT, OnRetryLimited)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_AUDITION_NOTHING, OnAuditNothing)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_AUDITION_EVERYTHING, OnAuditEverything)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_AUDITION_FAILURES, OnAuditFailures)
	ON_EN_CHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_LOCATION, OnEditchangeLocation)
	ON_EN_CHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_USERNAME, OnEditchangeUserName)
	ON_EN_CHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PASSWORD, OnEditchangePassword)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT_NUMBER, OnSpinchangePort)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_NUMBER, OnSpinchangeRetries)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL, OnSpinchangeRetryInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsFTPTransfersPage message handlers

BOOL CTelemetryArchivesExtractionsFTPTransfersPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTelemetryArchivesExtractionsFTPTransfersPage::OnSetActive()
{
	for (GetParent()->GetInfo(&m_cInfo[0]); GetParent()->IsWindowVisible(); )
	{
		ShowFTPTransfersInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CTelemetryArchivesExtractionsFTPTransfersPage::OnKillActive()
{
	GetParent()->SetInfo(&m_cInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CTelemetryArchivesExtractionsFTPTransfersPage::OnEnable()
{
	m_cInfo[0].SetFTPOption(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_FTPTRANSFERS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsFTPTransfersPage::OnUsePort()
{
	m_cInfo[0].SetFTPPort((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT)) ? TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_DEFAULTPORT : 0);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT_NUMBER), TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_DEFAULTPORT);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsFTPTransfersPage::OnRetryNever()
{
	m_cInfo[0].SetFTPRetryInfo(0, 0);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_NEVER, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_CONTINUOUSLY, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsFTPTransfersPage::OnRetryContinuously()
{
	m_cInfo[0].SetFTPRetryInfo(-1, SECONDSPERMINUTE*TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_DEFAULTRETRYINTERVAL);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_NEVER, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_CONTINUOUSLY, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL), TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_DEFAULTRETRYINTERVAL);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL_MINUTES_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsFTPTransfersPage::OnRetryLimited()
{
	m_cInfo[0].SetFTPRetryInfo(TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_DEFAULTRETRIES, SECONDSPERMINUTE*TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_DEFAULTRETRYINTERVAL);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_NEVER, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_CONTINUOUSLY, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_NUMBER), TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_DEFAULTRETRIES);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL), TELEMETRYARCHIVESEXTRACTIONSFTPTRANSFERS_DEFAULTRETRYINTERVAL);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_NUMBER)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL_MINUTES_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsFTPTransfersPage::OnAuditNothing()
{
	m_cInfo[0].SetFTPAudition(ARCHIVESEXTRACTIONINFO_AUDITION_NONE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsFTPTransfersPage::OnAuditEverything()
{
	m_cInfo[0].SetFTPAudition(ARCHIVESEXTRACTIONINFO_AUDITION_ALL);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsFTPTransfersPage::OnAuditFailures()
{
	m_cInfo[0].SetFTPAudition(ARCHIVESEXTRACTIONINFO_AUDITION_FAILURES);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsFTPTransfersPage::OnEditchangeLocation()
{
	CString  szLocation;

	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_LOCATION)->GetWindowText(szLocation);
	m_cInfo[0].SetFTPLocation(szLocation);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsFTPTransfersPage::OnEditchangeUserName()
{
	CString  szUserName;

	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_USERNAME)->GetWindowText(szUserName);
	m_cInfo[0].SetFTPUserName(szUserName);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsFTPTransfersPage::OnEditchangePassword()
{
	CString  szPassword;

	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PASSWORD)->GetWindowText(szPassword);
	m_cInfo[0].SetFTPPassword(szPassword);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsFTPTransfersPage::OnSpinchangePort()
{
	m_cInfo[0].SetFTPPort((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_PORT_NUMBER)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsFTPTransfersPage::OnSpinchangeRetries()
{
	m_cInfo[0].SetFTPRetryInfo((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_NUMBER)), SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsFTPTransfersPage::OnSpinchangeRetryInterval()
{
	m_cInfo[0].SetFTPRetryInfo((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT)) ? (UINT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_COUNT_NUMBER)) : -1, SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_FTPTRANSFERSPAGE_RETRY_INTERVAL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsAutomationPage property page

IMPLEMENT_DYNCREATE(CTelemetryArchivesExtractionsAutomationPage, CLocalePropertyPage)

CTelemetryArchivesExtractionsAutomationPage::CTelemetryArchivesExtractionsAutomationPage() : CLocalePropertyPage(CTelemetryArchivesExtractionsAutomationPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryArchivesExtractionsAutomationPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryArchivesExtractionsAutomationPage::Initialize()
{
	GetDatabase()->EnumScripts(m_pScripts);
	return TRUE;
}

VOID CTelemetryArchivesExtractionsAutomationPage::SetInfo(CONST CArchivesExtractionProfileInfo *pProfileInfo, CONST CArchivesExtractionProfileInfo *pBackupProfileInfo, BOOL bUpdate)
{
	for (m_cInfo[0].Copy(pProfileInfo); pBackupProfileInfo != (CONST CArchivesExtractionProfileInfo *) NULL; )
	{
		m_cInfo[1].Copy(pBackupProfileInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()) && bUpdate)
	{
		ShowAutomationScriptInfo();
		return;
	}
}

VOID CTelemetryArchivesExtractionsAutomationPage::GetInfo(CArchivesExtractionProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cInfo[0]);
}

CTelemetryArchivesExtractionsPageFolder *CTelemetryArchivesExtractionsAutomationPage::GetParent() CONST
{
	return((CTelemetryArchivesExtractionsPageFolder *)CLocalePropertyPage::GetParent());
}

BOOL CTelemetryArchivesExtractionsAutomationPage::EnumAutomationScripts()
{
	INT  nScript;
	INT  nScripts;
	CString  szScript;

	for (nScript = 0, nScripts = (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYARCHIVES_AUTOMATIONPAGE_SCRIPTNAMEDEFAULT)) >= 0) ? (INT)m_pScripts.GetSize() : 0; nScript < nScripts; nScript++)
	{
		szScript.Format(STRING(IDS_TELEMETRYARCHIVES_AUTOMATIONPAGE_SCRIPTNAMEFORMAT), (LPCTSTR)m_pScripts.GetAt(nScript)->GetTitle(), (LPCTSTR)m_pScripts.GetAt(nScript)->GetName());
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szScript);
	}
	return((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTelemetryArchivesExtractionsAutomationPage::ShowAutomationScriptInfo()
{
	CAutomationScript  *pScript;

	if ((pScript = m_pScripts.GetAt(m_pScripts.Find(m_cInfo[0].GetAutomationScriptName()))))
	{
		ShowAutomationScriptInfo(pScript);
		return;
	}
	if ((pScript = new CAutomationScript))
	{
		ShowAutomationScriptInfo(pScript);
		delete pScript;
	}
}
VOID CTelemetryArchivesExtractionsAutomationPage::ShowAutomationScriptInfo(CONST CAutomationScript *pScript)
{
	INT  nIndex;
	CString  szScript;

	szScript.Format(STRING(IDS_TELEMETRYARCHIVES_AUTOMATIONPAGE_SCRIPTNAMEFORMAT), (LPCTSTR)pScript->GetTitle(), (LPCTSTR)pScript->GetName());
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_NAME, CB_SETCURSEL, (WPARAM)(nIndex = (INT)max(SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szScript), 0)));
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_OPTIONS_FTPTRANSFER, ((m_cInfo[0].GetAutomationScriptOptions() & ARCHIVESEXTRACTIONINFO_AUTOMATIONOPTION_FTPTRANSFER) && nIndex > 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_OPTIONS_DISABLED, ((m_cInfo[0].GetAutomationScriptOptions() & ARCHIVESEXTRACTIONINFO_AUTOMATIONOPTION_DISABLED) && nIndex > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_TYPE)->SetWindowText((pScript->GetType() == AUTOMATIONSCRIPT_TYPE_EXCEL) ? STRING(IDS_SCRIPTTYPE_EXCEL) : ((pScript->GetType() == AUTOMATIONSCRIPT_TYPE_WORD) ? STRING(IDS_SCRIPTTYPE_WORD) : ((pScript->GetType() == AUTOMATIONSCRIPT_TYPE_ACCESS) ? STRING(IDS_SCRIPTTYPE_ACCESS) : ((pScript->GetType() == AUTOMATIONSCRIPT_TYPE_OUTLOOK) ? STRING(IDS_SCRIPTTYPE_OUTLOOK) : ((pScript->GetType() == AUTOMATIONSCRIPT_TYPE_POWERPOINT) ? STRING(IDS_SCRIPTTYPE_POWERPOINT) : STRING(IDS_SCRIPTTYPE_OTHER))))));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_CODE)->SetWindowText((nIndex > 0) ? (LPCTSTR)pScript->GetSourceCode() : EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_CODE_STATIC)->EnableWindow((nIndex > 0) ? !pScript->GetSourceCode().IsEmpty() : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_CODE)->EnableWindow((nIndex > 0) ? !pScript->GetSourceCode().IsEmpty() : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_TYPE_STATIC)->ShowWindow((nIndex > 0) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_TYPE)->ShowWindow((nIndex > 0) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_TYPE_STATIC)->EnableWindow((nIndex > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_TYPE)->EnableWindow((nIndex > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_OPTIONS_STATIC)->EnableWindow((nIndex > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_OPTIONS_FTPTRANSFER)->EnableWindow((nIndex > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_OPTIONS_DISABLED)->EnableWindow((nIndex > 0) ? TRUE : FALSE);
}

VOID CTelemetryArchivesExtractionsAutomationPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_OPTIONS_FTPTRANSFER, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE)));
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_OPTIONS_DISABLED, bCheck);
}

BOOL CTelemetryArchivesExtractionsAutomationPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cInfo[0].Compare(&m_cInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTelemetryArchivesExtractionsAutomationPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CTelemetryArchivesExtractionsAutomationPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryArchivesExtractionsAutomationPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryArchivesExtractionsAutomationPage::PostNcDestroy()
{
	m_pScripts.RemoveAll();
	m_cCodeFont.DeleteObject();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesExtractionsAutomationPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryArchivesExtractionsAutomationPage)
	ON_WM_CREATE()
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_OPTIONS_FTPTRANSFER, OnFTPTransferScript)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_OPTIONS_DISABLED, OnDisabledScript)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_NAME, OnSelchangeScript)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsAutomationPage message handlers

int CTelemetryArchivesExtractionsAutomationPage::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	CFontTools  cFontTools(&m_cCodeFont);

	return CLocalePropertyPage::OnCreate(lpCreateStruct);
}

BOOL CTelemetryArchivesExtractionsAutomationPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	for (CLocalePropertyPage::OnInitDialog(); EnumAutomationScripts(); )
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_NAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_NAME)->EnableWindow();
		ShowAutomationScriptInfo();
		break;
	}
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTelemetryArchivesExtractionsAutomationPage::OnSetActive()
{
	for (GetParent()->GetInfo(&m_cInfo[0]); GetParent()->IsWindowVisible(); )
	{
		ShowAutomationScriptInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CTelemetryArchivesExtractionsAutomationPage::OnKillActive()
{
	GetParent()->SetInfo(&m_cInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CTelemetryArchivesExtractionsAutomationPage::OnFTPTransferScript()
{
	m_cInfo[0].SetAutomationScriptOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_OPTIONS_FTPTRANSFER)) ? (m_cInfo[0].GetAutomationScriptOptions() | ARCHIVESEXTRACTIONINFO_AUTOMATIONOPTION_FTPTRANSFER) : (m_cInfo[0].GetAutomationScriptOptions() & ~ARCHIVESEXTRACTIONINFO_AUTOMATIONOPTION_FTPTRANSFER));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsAutomationPage::OnDisabledScript()
{
	m_cInfo[0].SetAutomationScriptOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_OPTIONS_DISABLED)) ? (m_cInfo[0].GetAutomationScriptOptions() | ARCHIVESEXTRACTIONINFO_AUTOMATIONOPTION_DISABLED) : (m_cInfo[0].GetAutomationScriptOptions() & ~ARCHIVESEXTRACTIONINFO_AUTOMATIONOPTION_DISABLED));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsAutomationPage::OnSelchangeScript()
{
	INT  nIndex;

	for (m_cInfo[0].SetAutomationScriptName(((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_AUTOMATIONPAGE_NAME, CB_GETCURSEL)) > 0) ? (LPCTSTR)m_pScripts.GetAt(nIndex - 1)->GetName() : EMPTYSTRING); TRUE; )
	{
		ShowAutomationScriptInfo();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsPageTabCtrl

IMPLEMENT_DYNCREATE(CTelemetryArchivesExtractionsPageTabCtrl, CTabCtrl)

CTelemetryArchivesExtractionsPageFolder *CTelemetryArchivesExtractionsPageTabCtrl::GetParent() CONST
{
	return((CTelemetryArchivesExtractionsPageFolder *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesExtractionsPageTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTelemetryArchivesExtractionsPageTabCtrl)
	ON_WM_GETDLGCODE()
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsPageTabCtrl message handlers

UINT CTelemetryArchivesExtractionsPageTabCtrl::OnGetDlgCode()
{
	return CTabCtrl::OnGetDlgCode() | DLGC_WANTTAB;
}

void CTelemetryArchivesExtractionsPageTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CWnd  *pWnd;

	if (nChar == VK_TAB)
	{
		if ((pWnd = GetParent()->GetParent()->GetNextDlgTabItem(GetParent(), (HIBYTE(GetKeyState(VK_SHIFT))) ? TRUE : FALSE)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsPageFolder

IMPLEMENT_DYNAMIC(CTelemetryArchivesExtractionsPageFolder, CLocalePropertySheetDialog)

CTelemetryArchivesExtractionsPageFolder::CTelemetryArchivesExtractionsPageFolder() : CLocalePropertySheetDialog()
{
	AddPage(&m_pageContents);
	AddPage(&m_pageRange);
	AddPage(&m_pageExecution);
	AddPage(&m_pageFTPTransfers);
	AddPage(&m_pageAutomation);
}

BOOL CTelemetryArchivesExtractionsPageFolder::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	INT  nIndex;

	if (CLocalePropertySheetDialog::Create(pParentWnd, WS_CHILD | WS_TABSTOP))
	{
		for (nIndex = GetPageCount() - 1, m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()); nIndex >= 0; nIndex--)
		{
			SetActivePage(nIndex);
			continue;
		}
		MoveWindow(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
		ShowWindow(SW_SHOWNORMAL);
		return TRUE;
	}
	return FALSE;
}

VOID CTelemetryArchivesExtractionsPageFolder::SetInfo(CONST CArchivesExtractionProfileInfo *pProfileInfo, BOOL bUpdate)
{
	CArchivesExtractionProfileInfo  cInfo;

	cInfo.Copy(pProfileInfo);
	m_pageContents.SetInfo(&cInfo, (CArchivesExtractionProfileInfo *)NULL, bUpdate);
	m_pageRange.SetInfo(&cInfo, (CArchivesExtractionProfileInfo *)NULL, bUpdate);
	m_pageExecution.SetInfo(&cInfo, (CArchivesExtractionProfileInfo *)NULL, bUpdate);
	m_pageFTPTransfers.SetInfo(&cInfo, (CArchivesExtractionProfileInfo *)NULL, bUpdate);
	m_pageAutomation.SetInfo(&cInfo, (CArchivesExtractionProfileInfo *)NULL, bUpdate);
}
VOID CTelemetryArchivesExtractionsPageFolder::SetInfo(CONST CArchivesExtractionProfileInfo *pProfileInfo, CONST CArchivesExtractionProfileInfo *pBackupProfileInfo)
{
	m_pageContents.SetInfo(pProfileInfo, pBackupProfileInfo);
	m_pageRange.SetInfo(pProfileInfo, pBackupProfileInfo);
	m_pageExecution.SetInfo(pProfileInfo, pBackupProfileInfo);
	m_pageFTPTransfers.SetInfo(pProfileInfo, pBackupProfileInfo);
	m_pageAutomation.SetInfo(pProfileInfo, pBackupProfileInfo);
}

VOID CTelemetryArchivesExtractionsPageFolder::GetInfo(CArchivesExtractionProfileInfo *pProfileInfo) CONST
{
	CArchivesExtractionProfileInfo  cInfo;

	if (GetActivePage()->GetSafeHwnd() == m_pageContents.GetSafeHwnd())
	{
		m_pageContents.GetInfo(&cInfo);
		pProfileInfo->Copy(&cInfo);
		return;
	}
	if (GetActivePage()->GetSafeHwnd() == m_pageRange.GetSafeHwnd())
	{
		m_pageRange.GetInfo(&cInfo);
		pProfileInfo->Copy(&cInfo);
		return;
	}
	if (GetActivePage()->GetSafeHwnd() == m_pageExecution.GetSafeHwnd())
	{
		m_pageExecution.GetInfo(&cInfo);
		pProfileInfo->Copy(&cInfo);
		return;
	}
	if (GetActivePage()->GetSafeHwnd() == m_pageFTPTransfers.GetSafeHwnd())
	{
		m_pageFTPTransfers.GetInfo(&cInfo);
		pProfileInfo->Copy(&cInfo);
		return;
	}
	if (GetActivePage()->GetSafeHwnd() == m_pageAutomation.GetSafeHwnd())
	{
		m_pageAutomation.GetInfo(&cInfo);
		pProfileInfo->Copy(&cInfo);
		return;
	}
}

CTelemetryArchivesExtractionsPage *CTelemetryArchivesExtractionsPageFolder::GetParent() CONST
{
	return((CTelemetryArchivesExtractionsPage *)CLocalePropertySheetDialog::GetParent());
}

VOID CTelemetryArchivesExtractionsPageFolder::RepositionButtons()
{
	GetDlgItem(IDOK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDCANCEL)->ShowWindow(SW_HIDE);
	GetDlgItem(ID_APPLY_NOW)->ShowWindow(SW_HIDE);
	GetDlgItem(IDHELP)->ShowWindow(SW_HIDE);
}

BOOL CTelemetryArchivesExtractionsPageFolder::Check(BOOL bModified) CONST
{
	return GetParent()->Check(bModified, CLocalePropertySheetDialog::Check(FALSE));
}
BOOL CTelemetryArchivesExtractionsPageFolder::Check(BOOL bModified, BOOL bChecked) CONST
{
	return((bChecked) ? CLocalePropertySheetDialog::Check(bModified) : FALSE);
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesExtractionsPageFolder, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CTelemetryArchivesExtractionsPageFolder)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsPageFolder message handlers

void CTelemetryArchivesExtractionsPageFolder::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(m_wndTabCtrl.GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CLocalePropertySheetDialog::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsPage property page

IMPLEMENT_DYNCREATE(CTelemetryArchivesExtractionsPage, CLocalePropertyPage)

CTelemetryArchivesExtractionsPage::CTelemetryArchivesExtractionsPage() : CLocalePropertyPage(CTelemetryArchivesExtractionsPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryArchivesExtractionsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryArchivesExtractionsPage::Initialize()
{
	if ((m_pwndFolderCtrl = new CTelemetryArchivesExtractionsPageFolder))
	{
		m_pProfiles[2].Copy(&m_pProfiles[0]);
		m_nLocked = 0;
		return TRUE;
	}
	return FALSE;
}

VOID CTelemetryArchivesExtractionsPage::SetExtractionProfiles(CONST CArchivesExtractionProfiles &pProfiles, BOOL bInitialize)
{
	for (m_pProfiles[0].Copy(&pProfiles); bInitialize; )
	{
		m_pProfiles[1].Copy(&pProfiles);
		break;
	}
	if (IsWindow(GetSafeHwnd()))
	{
		SetExtractionProfileInfo(bInitialize);
		return;
	}
}

BOOL CTelemetryArchivesExtractionsPage::GetExtractionProfiles(CArchivesExtractionProfiles &pProfiles) CONST
{
	return pProfiles.Copy(&m_pProfiles[0]);
}

VOID CTelemetryArchivesExtractionsPage::SetRetrieveFiles(CONST CHistoryStoreFiles &pFiles)
{
	m_pFiles.Copy(&pFiles);
}

BOOL CTelemetryArchivesExtractionsPage::GetRetrieveFiles(CHistoryStoreFiles &pFiles) CONST
{
	return pFiles.Copy(&m_pFiles);
}

CTelemetryArchivesDialog *CTelemetryArchivesExtractionsPage::GetParent() CONST
{
	return((CTelemetryArchivesDialog *)CLocalePropertyPage::GetParent());
}

BOOL CTelemetryArchivesExtractionsPage::EnumExtractionProfiles()
{
	INT  nProfile;
	INT  nProfiles;
	CStringArray  szProfiles;

	for (nProfile = 0, nProfiles = m_pProfiles[0].Enum(szProfiles); nProfile < nProfiles; nProfile++)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfiles.GetAt(nProfile));
		continue;
	}
	if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_GETCOUNT) == nProfiles)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE)->EnableWindow();
		return TRUE;
	}
	return FALSE;
}

BOOL CTelemetryArchivesExtractionsPage::CheckExtractionProfiles() CONST
{
	INT  nProfile;
	INT  nProfiles;
	CArchivesExtractionProfiles  pProfiles[2];
	CArchivesExtractionProfileInfo  *pProfileInfo;

	if (GetTMService()->EnumTMHistoryFileExtractions(pProfiles[0]))
	{
		for (nProfile = 0, nProfiles = (GetTMService()->GetTMHistoryFileExtractionProfiles(pProfiles[1])) ? (INT)pProfiles[1].GetSize() : -1; nProfile < nProfiles; nProfile++)
		{
			if ((pProfileInfo = pProfiles[1].GetAt(nProfile)) && pProfileInfo->GetExecutionMode() == ARCHIVESEXTRACTIONINFO_EXECUTION_ATEVENT) break;
			continue;
		}
		return((pProfiles[0].GetSize() > 0 || nProfile < nProfiles) ? TRUE : FALSE);
	}
	return FALSE;
}

VOID CTelemetryArchivesExtractionsPage::SetExtractionProfileInfo(BOOL bInitialize)
{
	UINT  nCharset;
	UINT  nTimeFormat;
	BOOL  bTitleOption;
	CString  szDelimiters[3];
	CArchivesExtractionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindExtractionProfileInfo()))
	{
		for (Lock(), UpdateExtractionProfileInfo(pProfileInfo, bInitialize), nCharset = pProfileInfo->GetCharset(), m_szSourceFile = pProfileInfo->GetSource(), m_szDestinationDirectory = pProfileInfo->GetDirectory(), bTitleOption = pProfileInfo->GetTitleOption(), nTimeFormat = pProfileInfo->GetTimeFormat(), szDelimiters[0] = pProfileInfo->GetColumnDelimiter(), szDelimiters[1] = pProfileInfo->GetRowDelimiter(), szDelimiters[2] = pProfileInfo->GetTextDelimiter(); SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szSourceFile) < 0 && !m_szSourceFile.IsEmpty(); )
		{
			SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_INSERTSTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONS_SOURCESEPARATOR)), (LPARAM)(LPCTSTR)m_szSourceFile);
			break;
		}
		if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szDestinationDirectory) != SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_GETCOUNT) - 1)
		{
			for (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONS_SOURCESEPARATOR)) + 1); !m_szDestinationDirectory.IsEmpty(); )
			{
				SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szDestinationDirectory);
				break;
			}
		}
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szSourceFile));
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_COLUMN, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_COLUMN, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)ConvertDelimiterToSymbol(szDelimiters[0])));
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_ROW, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_ROW, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)ConvertDelimiterToSymbol(szDelimiters[1])));
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_TEXT, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_TEXT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)ConvertDelimiterToSymbol(szDelimiters[2])));
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TIME, CB_SETCURSEL, nTimeFormat);
		CheckRadioButton(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_CHARSET_ASCII, IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_CHARSET_UNICODE, (nCharset == ARCHIVESEXTRACTIONINFO_CHARSET_ASCII) ? IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_CHARSET_ASCII : IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_CHARSET_UNICODE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TITLEOPTION, bTitleOption);
		Unlock();
	}
	else
	{
		for (Lock(), m_szSourceFile.Empty(), m_szDestinationDirectory.Empty(); (pProfileInfo = new CArchivesExtractionProfileInfo); )
		{
			UpdateExtractionProfileInfo(pProfileInfo, bInitialize);
			delete pProfileInfo;
			break;
		}
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_SETCURSEL, (WPARAM)-1);
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_COLUMN, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_COLUMN, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)ConvertDelimiterToSymbol(STRING(IDS_PROFILE_EXTRACTIONS_DELIMITER_COL_COMMA))));
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_ROW, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_ROW, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)ConvertDelimiterToSymbol(STRING(IDS_PROFILE_EXTRACTIONS_DELIMITER_ROW_CREOL))));
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_TEXT, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_TEXT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)ConvertDelimiterToSymbol(STRING(IDS_PROFILE_EXTRACTIONS_DELIMITER_TEXT_DOUBLEQUOTE))));
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TIME, CB_SETCURSEL, ARCHIVESEXTRACTIONINFO_TIMEFORMAT_MILLISECONDS);
		CheckRadioButton(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_CHARSET_ASCII, IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_CHARSET_UNICODE, IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_CHARSET_ASCII);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TITLEOPTION, TRUE);
		Unlock();
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE_STATIC)->ShowWindow(SW_SHOW);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_DESTINATION_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_DESTINATION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_COLUMN_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_COLUMN)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_ROW_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_ROW)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_TEXT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_TEXT)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TIME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_CHARSET_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_CHARSET_ASCII)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_CHARSET_UNICODE)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TITLEOPTION)->EnableWindow();
	Update(FALSE, m_pwndFolderCtrl->Check(FALSE));
}

VOID CTelemetryArchivesExtractionsPage::UpdateExtractionProfileInfo(CONST CArchivesExtractionProfileInfo *pProfileInfo, BOOL bInitialize)
{
	INT  nProfile;
	INT  nProfiles;
	CArchivesExtractionProfileInfo  *pExtractionProfileInfo;

	for (; !pProfileInfo->GetName().IsEmpty() && bInitialize; )
	{
		if ((pExtractionProfileInfo = m_pProfiles[2].GetAt(m_pProfiles[2].Find(pProfileInfo->GetName()))))
		{
			pExtractionProfileInfo->Copy(pProfileInfo);
			break;
		}
		if ((pExtractionProfileInfo = new CArchivesExtractionProfileInfo))
		{
			for (pExtractionProfileInfo->Copy(pProfileInfo); m_pProfiles[2].Add(pExtractionProfileInfo) < 0; )
			{
				delete pExtractionProfileInfo;
				break;
			}
		}
		break;
	}
	for (nProfile = 0, nProfiles = (INT)m_pProfiles[2].GetSize(), m_pwndFolderCtrl->SetInfo(pProfileInfo, (!pProfileInfo->GetName().IsEmpty()) ? m_pProfiles[2].GetAt(m_pProfiles[2].Find(pProfileInfo->GetName())) : ((bInitialize) ? pProfileInfo : (CONST CArchivesExtractionProfileInfo *) NULL)); nProfile < nProfiles; nProfile++)
	{
		if ((pExtractionProfileInfo = m_pProfiles[2].GetAt(nProfile)) && m_pProfiles[0].Find(pExtractionProfileInfo->GetName()) < 0)
		{
			m_pProfiles[2].RemoveAt(nProfile);
			delete pExtractionProfileInfo;
			nProfiles--;
			nProfile--;
		}
	}
}

BOOL CTelemetryArchivesExtractionsPage::GetExtractionProfileInfo(CArchivesExtractionProfileInfo *pProfileInfo) CONST
{
	CArchivesExtractionProfileInfo  *pExtractionProfileInfo[2];

	if ((pExtractionProfileInfo[0] = new CArchivesExtractionProfileInfo))
	{
		for (m_pwndFolderCtrl->GetInfo(pExtractionProfileInfo[0]); (pExtractionProfileInfo[1] = FindExtractionProfileInfo()) && pExtractionProfileInfo[0]->GetName() == pExtractionProfileInfo[1]->GetName(); )
		{
			pExtractionProfileInfo[0]->SetName(pExtractionProfileInfo[1]->GetName());
			pExtractionProfileInfo[0]->SetSource(pExtractionProfileInfo[1]->GetSource());
			pExtractionProfileInfo[0]->SetDirectory(pExtractionProfileInfo[1]->GetDirectory());
			pExtractionProfileInfo[0]->SetColumnDelimiter(pExtractionProfileInfo[1]->GetColumnDelimiter());
			pExtractionProfileInfo[0]->SetRowDelimiter(pExtractionProfileInfo[1]->GetRowDelimiter());
			pExtractionProfileInfo[0]->SetTextDelimiter(pExtractionProfileInfo[1]->GetTextDelimiter());
			pExtractionProfileInfo[0]->SetCharset(pExtractionProfileInfo[1]->GetCharset());
			pExtractionProfileInfo[0]->SetTimeFormat(pExtractionProfileInfo[1]->GetTimeFormat());
			pExtractionProfileInfo[0]->SetTitleOption(pExtractionProfileInfo[1]->GetTitleOption());
			pProfileInfo->Copy(pExtractionProfileInfo[0]);
			delete pExtractionProfileInfo[0];
			return TRUE;
		}
		for (; pProfileInfo != (CArchivesExtractionProfileInfo *)NULL && !pExtractionProfileInfo[1]; )
		{
			pProfileInfo->Copy(pExtractionProfileInfo[0]);
			break;
		}
		delete pExtractionProfileInfo[0];
	}
	return FALSE;
}

CArchivesExtractionProfileInfo *CTelemetryArchivesExtractionsPage::FindExtractionProfileInfo() CONST
{
	CString  szProfile;

	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE)->GetWindowText(szProfile);
	return m_pProfiles[0].GetAt(m_pProfiles[0].Find(szProfile));
}

BOOL CTelemetryArchivesExtractionsPage::EnumExtractionSources()
{
	INT  nFile;
	INT  nFiles;
	CString  szFileName;
	CHistoryStoreFile  *pFile;
	CArchivesExtractionProfileInfo  *pProfileInfo;

	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_RESETCONTENT);
	for (nFile = 0, nFiles = (INT)m_pFiles.GetSize(); nFile < nFiles; nFile++)
	{
		if ((pFile = m_pFiles.GetAt(nFile)) != (CHistoryStoreFile *)NULL)
		{
			SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pFile->GetFileName());
			continue;
		}
	}
	if ((pProfileInfo = FindExtractionProfileInfo()))
	{
		if ((szFileName = pProfileInfo->GetSource()).GetLength() > 0)
		{
			SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) == CB_ERR) ? CB_ADDSTRING : CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName));
			SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONS_SOURCESEPARATOR));
			return TRUE;
		}
	}
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_SETCURSEL, (WPARAM)((m_pFiles.GetSize() > 0) ? SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_pFiles.GetAt(0)->GetFileName()) : 0));
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONS_SOURCESEPARATOR));
	return TRUE;
}

BOOL CTelemetryArchivesExtractionsPage::EnumExtractionDelimiters()
{
	INT  nDelimiter[3];
	INT  nDelimiters[3];

	for (nDelimiter[0] = 0, nDelimiters[0] = MAXPROFILEEXTRACTIONSCOLDELIMITER - MINPROFILEEXTRACTIONSCOLDELIMITER + 1; nDelimiter[0] < nDelimiters[0]; nDelimiter[0]++)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_COLUMN, CB_INSERTSTRING, nDelimiter[0], (LPARAM)STRING(MINPROFILEEXTRACTIONSCOLDELIMITER + nDelimiter[0]));
		continue;
	}
	for (nDelimiter[1] = 0, nDelimiters[1] = MAXPROFILEEXTRACTIONSROWDELIMITER - MINPROFILEEXTRACTIONSROWDELIMITER + 1; nDelimiter[1] < nDelimiters[1]; nDelimiter[1]++)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_ROW, CB_INSERTSTRING, nDelimiter[1], (LPARAM)STRING(MINPROFILEEXTRACTIONSROWDELIMITER + nDelimiter[1]));
		continue;
	}
	for (nDelimiter[2] = 0, nDelimiters[2] = MAXPROFILEEXTRACTIONSTEXTDELIMITER - MINPROFILEEXTRACTIONSTEXTDELIMITER + 1; nDelimiter[2] < nDelimiters[2]; nDelimiter[2]++)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_TEXT, CB_INSERTSTRING, nDelimiter[2], (LPARAM)STRING(MINPROFILEEXTRACTIONSTEXTDELIMITER + nDelimiter[2]));
		continue;
	}
	return((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_COLUMN, CB_GETCOUNT) == nDelimiters[0] && SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_ROW, CB_GETCOUNT) == nDelimiters[1] && SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_TEXT, CB_GETCOUNT) == nDelimiters[2]) ? TRUE : FALSE);
}

BOOL CTelemetryArchivesExtractionsPage::EnumExtractionTimeFormats()
{
	INT  nFormat;
	INT  nFormats;
	CTimeTag  tTimeTag;
	CTimeKey  tTimeKey(0);

	for (nFormat = 0, nFormats = MAXPROFILEEXTRACTIONSTIMEFORMAT - MINPROFILEEXTRACTIONSTIMEFORMAT + 1; nFormat < nFormats; nFormat++)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TIME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)((MINPROFILEEXTRACTIONSTIMEFORMAT + nFormat == IDS_PROFILE_EXTRACTIONS_TIMEFORMAT_MILLISECONDS || MINPROFILEEXTRACTIONSTIMEFORMAT + nFormat == IDS_PROFILE_EXTRACTIONS_TIMEFORMAT_SECONDS) ? (LPCTSTR)tTimeKey.Format(STRING(MINPROFILEEXTRACTIONSTIMEFORMAT + nFormat)) : (LPCTSTR)tTimeTag.FormatGmt(STRING(MINPROFILEEXTRACTIONSTIMEFORMAT + nFormat))));
		continue;
	}
	return((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TIME, CB_GETCOUNT) == nFormats) ? TRUE : FALSE);
}

CString CTelemetryArchivesExtractionsPage::ConvertSymbolToDelimiter(LPCTSTR pszSymbol) CONST
{
	if (!lstrcmp(pszSymbol, STRING(IDS_PROFILE_EXTRACTIONS_DELIMITER_COL_TAB))) return TAB;
	if (!lstrcmp(pszSymbol, STRING(IDS_PROFILE_EXTRACTIONS_DELIMITER_ROW_CR))) return CR;
	if (!lstrcmp(pszSymbol, STRING(IDS_PROFILE_EXTRACTIONS_DELIMITER_ROW_EOL))) return EOL;
	if (!lstrcmp(pszSymbol, STRING(IDS_PROFILE_EXTRACTIONS_DELIMITER_ROW_CREOL))) return(CString(CR) + CString(EOL));
	return pszSymbol;
}

CString CTelemetryArchivesExtractionsPage::ConvertDelimiterToSymbol(LPCTSTR pszDelimiter) CONST
{
	if (!lstrcmp(pszDelimiter, CString(TAB))) return STRING(IDS_PROFILE_EXTRACTIONS_DELIMITER_COL_TAB);
	if (!lstrcmp(pszDelimiter, CString(CR))) return STRING(IDS_PROFILE_EXTRACTIONS_DELIMITER_ROW_CR);
	if (!lstrcmp(pszDelimiter, CString(EOL))) return STRING(IDS_PROFILE_EXTRACTIONS_DELIMITER_ROW_EOL);
	if (!lstrcmp(pszDelimiter, CString(CR) + CString(EOL))) return STRING(IDS_PROFILE_EXTRACTIONS_DELIMITER_ROW_CREOL);
	return pszDelimiter;
}

CRect CTelemetryArchivesExtractionsPage::CalcFolderSize() CONST
{
	CRect  rFolder;

	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FOLDER)->GetWindowRect(rFolder);
	ScreenToClient(rFolder);
	return rFolder;
}

VOID CTelemetryArchivesExtractionsPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE)));
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_COLUMN, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_ROW, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_TEXT, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_CHARSET_ASCII, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_CHARSET_UNICODE, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TITLEOPTION, bCheck);
}

BOOL CTelemetryArchivesExtractionsPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (!m_pProfiles[0].Compare(&m_pProfiles[1]) && m_pProfiles[0].Compare(&m_pProfiles[2]) && !m_pwndFolderCtrl->IsModified()) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTelemetryArchivesExtractionsPage::Check(BOOL bAll) CONST
{
	CArchivesExtractionProfileInfo  *pProfileInfo[2];

	if (IsWindow(GetSafeHwnd()) && bAll)
	{
		if ((pProfileInfo[0] = new CArchivesExtractionProfileInfo))
		{
			for (GetExtractionProfileInfo(pProfileInfo[0]); (pProfileInfo[1] = FindExtractionProfileInfo()); )
			{
				pProfileInfo[1]->Copy(pProfileInfo[0]);
				break;
			}
			m_pwndFolderCtrl->SetInfo(pProfileInfo[0], FALSE);
			delete pProfileInfo[0];
		}
		return CLocalePropertyPage::Check();
	}
	return((!bAll) ? Check(FALSE, m_pwndFolderCtrl->Check(FALSE, TRUE)) : TRUE);
}
BOOL CTelemetryArchivesExtractionsPage::Check(BOOL bModified, BOOL bChecked) CONST
{
	CString  szProfile;
	CArchivesExtractionProfileInfo  cProfileInfo[2];

	GetExtractionProfileInfo(&cProfileInfo[0]);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE)->GetWindowText(szProfile);
	Update(bModified, (bChecked = !szProfile.IsEmpty() && ((!m_szSourceFile.IsEmpty() && !m_szDestinationDirectory.IsEmpty()) || cProfileInfo[0].Compare(&cProfileInfo[1])) && bChecked));
	return((bChecked) ? (!bModified || IsModified()) : FALSE);
}

VOID CTelemetryArchivesExtractionsPage::Update(BOOL bModified, BOOL bChecked) CONST
{
	CArchivesExtractionProfileInfo  *pProfileInfo[2];

	if (!IsLocked())
	{
		if ((pProfileInfo[0] = new CArchivesExtractionProfileInfo))
		{
			for (GetExtractionProfileInfo(pProfileInfo[0]); bModified; )
			{
				if ((pProfileInfo[1] = FindExtractionProfileInfo())) pProfileInfo[1]->Copy(pProfileInfo[0]);
				m_pwndFolderCtrl->SetInfo(pProfileInfo[0], FALSE);
				break;
			}
			GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SAVE)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE)->GetWindowTextLength() > 0 && !m_szSourceFile.IsEmpty() && !m_szDestinationDirectory.IsEmpty() && (!FindExtractionProfileInfo() || (m_pProfiles[2].Find(pProfileInfo[0]->GetName()) >= 0 && !pProfileInfo[0]->Compare(m_pProfiles[2].GetAt(m_pProfiles[2].Find(pProfileInfo[0]->GetName())))) || m_pwndFolderCtrl->IsModified()) && bChecked) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE) : FALSE);
			GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SUBMIT)->EnableWindow((GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE)->GetWindowTextLength() > 0 && !m_szSourceFile.IsEmpty() && !m_szDestinationDirectory.IsEmpty() && pProfileInfo[0]->GetExecutionMode() != 0 && pProfileInfo[0]->GetExecutionMode() != ARCHIVESEXTRACTIONINFO_EXECUTION_ATEVENT  &&  bChecked) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE) : FALSE);
			GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT)->EnableWindow((CheckExtractionProfiles()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE) : FALSE);
			GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_DELETE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE));
			GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_DELETEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE));
			GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE));
			delete pProfileInfo[0];
		}
	}
}

VOID CTelemetryArchivesExtractionsPage::Lock()
{
	m_nLocked++;
}

BOOL CTelemetryArchivesExtractionsPage::IsLocked() CONST
{
	return(m_nLocked > 0);
}

VOID CTelemetryArchivesExtractionsPage::Unlock()
{
	m_nLocked--;
}

void CTelemetryArchivesExtractionsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryArchivesExtractionsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryArchivesExtractionsPage::PostNcDestroy()
{
	m_pFiles.RemoveAll();
	m_pProfiles[0].RemoveAll();
	m_pProfiles[1].RemoveAll();
	m_pProfiles[2].RemoveAll();
	delete m_pwndFolderCtrl;
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesExtractionsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryArchivesExtractionsPage)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SAVE, OnSave)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_DELETE, OnDelete)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_DELETEALL, OnDeleteAll)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT, OnAbort)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SUBMIT, OnSubmit)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_BROWSE, OnBrowse)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_CHARSET_ASCII, OnCharsetASCII)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_CHARSET_UNICODE, OnCharsetUnicode)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TITLEOPTION, OnTitleOption)
	ON_CBN_EDITCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, OnEditchangeProfile)
	ON_CBN_EDITCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, OnEditchangeSource)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, OnSelchangeProfile)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, OnSelchangeSource)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_COLUMN, OnSelchangeColumnDelimiter)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_ROW, OnSelchangeRowDelimiter)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_TEXT, OnSelchangeTextDelimiter)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TIME, OnSelchangeTimeFormat)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsPage message handlers

BOOL CTelemetryArchivesExtractionsPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	for (CLocalePropertyPage::OnInitDialog(); m_pwndFolderCtrl->Create(this, CalcFolderSize()) && SetChildSheet(m_pwndFolderCtrl, GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FOLDER - 1)); )
	{
		if (EnumExtractionProfiles() && EnumExtractionSources() && EnumExtractionDelimiters() && EnumExtractionTimeFormats()) SetExtractionProfileInfo(TRUE);
		break;
	}
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTelemetryArchivesExtractionsPage::OnSetActive()
{
	for (GetParent()->GetRetrieveFiles(m_pFiles); EnumExtractionSources(); )
	{
		SetExtractionProfileInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

void CTelemetryArchivesExtractionsPage::OnSave()
{
	CString  szProfile;
	CString  szDelimiters[3];
	CArchivesExtractionProfileInfo  *pProfileInfo[2];
	CHourglassCursor  cCursor;

	if ((pProfileInfo[0] = FindExtractionProfileInfo()))
	{
		GetExtractionProfileInfo(pProfileInfo[0]);
		SetExtractionProfileInfo(TRUE);
	}
	for (GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE)->GetWindowText(szProfile); (pProfileInfo[1] = (!FindExtractionProfileInfo() && SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfile) >= 0) ? new CArchivesExtractionProfileInfo : (CArchivesExtractionProfileInfo *)NULL); )
	{
		for (GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_COLUMN)->GetWindowText(szDelimiters[0]), GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_ROW)->GetWindowText(szDelimiters[1]), GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_TEXT)->GetWindowText(szDelimiters[2]), GetExtractionProfileInfo(pProfileInfo[1]), pProfileInfo[1]->SetName(szProfile), pProfileInfo[1]->SetSource(m_szSourceFile), pProfileInfo[1]->SetDirectory(m_szDestinationDirectory), pProfileInfo[1]->SetCharset((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_CHARSET_ASCII)) ? ARCHIVESEXTRACTIONINFO_CHARSET_ASCII : ARCHIVESEXTRACTIONINFO_CHARSET_UNICODE), pProfileInfo[1]->SetColumnDelimiter(ConvertSymbolToDelimiter(szDelimiters[0])), pProfileInfo[1]->SetRowDelimiter(ConvertSymbolToDelimiter(szDelimiters[1])), pProfileInfo[1]->SetTextDelimiter(ConvertSymbolToDelimiter(szDelimiters[2])), pProfileInfo[1]->SetTimeFormat((UINT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TIME, CB_GETCURSEL)), pProfileInfo[1]->SetTitleOption(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TITLEOPTION)); m_pProfiles[0].Add(pProfileInfo[1]) < 0; )
		{
			delete pProfileInfo[1];
			break;
		}
		SetExtractionProfileInfo(TRUE);
		break;
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsPage::OnDelete()
{
	INT  nIndex;
	CString  szProfile;
	CArchivesExtractionProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE)->GetWindowText(szProfile); FindExtractionProfileInfo(); )
	{
		if (!szProfile.Compare(STRING(IDS_PROFILE_DEFAULTEXTRACTIONNAME)))
		{
			if ((pProfileInfo = new CArchivesExtractionProfileInfo))
			{
				delete m_pProfiles[0].GetAt((nIndex = m_pProfiles[0].Find(szProfile)));
				m_pProfiles[0].SetAt(nIndex, pProfileInfo);
				SetExtractionProfileInfo(TRUE);
			}
		}
		else
		{
			if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szProfile)) >= 0)
			{
				for (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_SETCURSEL); (nIndex = m_pProfiles[0].Find(szProfile)); )
				{
					delete m_pProfiles[0].GetAt(nIndex);
					m_pProfiles[0].RemoveAt(nIndex);
					SetExtractionProfileInfo();
					break;
				}
			}
		}
		break;
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsPage::OnDeleteAll()
{
	INT  nProfile;
	INT  nProfiles;
	CString  szProfile;
	CArchivesExtractionProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (nProfiles = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_GETCOUNT); nProfiles > 0; nProfiles--)
	{
		if ((szProfile = Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE), nProfiles - 1)) == STRING(IDS_PROFILE_DEFAULTEXTRACTIONNAME))
		{
			if ((pProfileInfo = new CArchivesExtractionProfileInfo) != (CArchivesExtractionProfileInfo *)NULL)
			{
				delete m_pProfiles[0].GetAt((nProfile = m_pProfiles[0].Find(szProfile)));
				m_pProfiles[0].SetAt(nProfile, pProfileInfo);
			}
			continue;
		}
		if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szProfile)) >= 0)
		{
			delete m_pProfiles[0].GetAt((nProfile = m_pProfiles[0].Find(szProfile)));
			m_pProfiles[0].RemoveAt(nProfile);
		}
	}
	if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_SETCURSEL, max(SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_PROFILE_DEFAULTEXTRACTIONNAME)), 0));
		SetExtractionProfileInfo(TRUE);
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsPage::OnSubmit()
{
	CArchivesExtractionProfileInfo  cProfileInfo;
	CHourglassCursor  cCursor;

	GetExtractionProfileInfo(&cProfileInfo);
	GetTMService()->ExecuteTMHistoryFileExtraction(&cProfileInfo);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsPage::OnAbort()
{
	CTelemetryArchivesExtractionsAbortDialog  cTelemetryArchivesAbortDialog(this);

	cTelemetryArchivesAbortDialog.DoModal();
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT)->EnableWindow(CheckExtractionProfiles());
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE)->SetFocus();
}

void CTelemetryArchivesExtractionsPage::OnBrowse()
{
	LPMALLOC  pIMalloc;
	BROWSEINFO  sBrowseInfo;
	LPITEMIDLIST  pItemIDList;
	CHistoryStoreFile  cFile;
	TCHAR  szItemBuffer[MAX_PATH];
	TCHAR  szDisplayName[MAX_PATH];
	CArchivesExtractionProfileInfo  *pProfileInfo;
	CFileBrowseDialog  cFileBrowseDialog(this, (GetTMService()->GetDefaultTMHistoryFile(HISTORYFILE_TYPE_ARCHIVE, cFile)) ? cFile.GetFileName() : (LPCTSTR)NULL, STRING(IDS_FILEBROWSEDIALOG_TMHISTORYFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TMHISTORYFILEFILTER));

	if (GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_DESTINATION_STATIC)->IsWindowVisible())
	{
		for (ZeroMemory(&sBrowseInfo, sizeof(sBrowseInfo)), sBrowseInfo.hwndOwner = GetSafeHwnd(), sBrowseInfo.pszDisplayName = szDisplayName, sBrowseInfo.lpszTitle = STRING(IDS_DIRECTORYBROWSEDIALOG_TITLE); SHGetMalloc(&pIMalloc) == NOERROR; )
		{
			if ((pItemIDList = SHBrowseForFolder(&sBrowseInfo)))
			{
				if (SHGetPathFromIDList(pItemIDList, szItemBuffer))
				{
					for (; (pProfileInfo = FindExtractionProfileInfo()); )
					{
						pProfileInfo->SetDirectory(szItemBuffer);
						break;
					}
					GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE)->SetWindowText((m_szDestinationDirectory = szItemBuffer));
				}
				pIMalloc->Free(pItemIDList);
			}
			pIMalloc->Release();
			break;
		}
	}
	else
	{
		if (cFileBrowseDialog.DoModal() == IDOK)
		{
			for (; (pProfileInfo = FindExtractionProfileInfo()); )
			{
				pProfileInfo->SetSource(cFileBrowseDialog.GetPathName());
				break;
			}
			GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE)->SetWindowText((m_szSourceFile = cFileBrowseDialog.GetPathName()));
		}
	}
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsPage::OnCharsetASCII()
{
	CArchivesExtractionProfileInfo  *pProfileInfo;

	for (; (pProfileInfo = FindExtractionProfileInfo()); )
	{
		pProfileInfo->SetCharset(ARCHIVESEXTRACTIONINFO_CHARSET_ASCII);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsPage::OnCharsetUnicode()
{
	CArchivesExtractionProfileInfo  *pProfileInfo;

	for (; (pProfileInfo = FindExtractionProfileInfo()); )
	{
		pProfileInfo->SetCharset(ARCHIVESEXTRACTIONINFO_CHARSET_UNICODE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsPage::OnTitleOption()
{
	CArchivesExtractionProfileInfo  *pProfileInfo;

	for (; (pProfileInfo = FindExtractionProfileInfo()); )
	{
		pProfileInfo->SetTitleOption(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TITLEOPTION));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsPage::OnEditchangeProfile()
{
	CString  szProfile;

	for (GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE)->GetWindowText(szProfile); SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szProfile) >= 0; )
	{
		SetExtractionProfileInfo();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsPage::OnEditchangeSource()
{
	CArchivesExtractionProfileInfo  *pProfileInfo;

	if (GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE_STATIC)->IsWindowVisible())
	{
		for (GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE)->GetWindowText(m_szSourceFile); (pProfileInfo = FindExtractionProfileInfo()); )
		{
			pProfileInfo->SetSource(m_szSourceFile);
			break;
		}
	}
	else
	{
		for (GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE)->GetWindowText(m_szDestinationDirectory); (pProfileInfo = FindExtractionProfileInfo()); )
		{
			pProfileInfo->SetDirectory(m_szDestinationDirectory);
			break;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsPage::OnSelchangeProfile()
{
	for (GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE)->SetWindowText(Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE), (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_PROFILE, CB_GETCURSEL))); TRUE; )
	{
		SetExtractionProfileInfo();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsPage::OnSelchangeSource()
{
	CArchivesExtractionProfileInfo  *pProfileInfo;

	if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_GETCURSEL) < SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONS_SOURCESEPARATOR)))
	{
		for (m_szSourceFile = Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE), (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_GETCURSEL)); (pProfileInfo = FindExtractionProfileInfo()); )
		{
			pProfileInfo->SetSource(m_szSourceFile);
			break;
		}
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE_STATIC)->EnableWindow(TRUE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE_STATIC)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_DESTINATION_STATIC)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_DESTINATION_STATIC)->EnableWindow(FALSE);
	}
	else
	{
		if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_GETCURSEL) == SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONS_SOURCESEPARATOR)))
		{
			for (m_szDestinationDirectory.Empty(); SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONS_SOURCESEPARATOR)) < SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_GETCOUNT) - 1; )
			{
				SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_GETCOUNT) - 1);
				break;
			}
			for (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_SETCURSEL, (WPARAM)-1); (pProfileInfo = FindExtractionProfileInfo()); )
			{
				pProfileInfo->SetDirectory(m_szDestinationDirectory);
				break;
			}
		}
		else
		{
			for (m_szDestinationDirectory = Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE), (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE, CB_GETCURSEL)); (pProfileInfo = FindExtractionProfileInfo()); )
			{
				pProfileInfo->SetDirectory(m_szDestinationDirectory);
				break;
			}
		}
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_DESTINATION_STATIC)->EnableWindow(TRUE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_DESTINATION_STATIC)->ShowWindow(SW_SHOW);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE_STATIC)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE_STATIC)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_SOURCE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsPage::OnSelchangeColumnDelimiter()
{
	CArchivesExtractionProfileInfo  *pProfileInfo;

	for (; (pProfileInfo = FindExtractionProfileInfo()); )
	{
		pProfileInfo->SetColumnDelimiter(ConvertSymbolToDelimiter(Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_COLUMN), (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_COLUMN, CB_GETCURSEL))));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsPage::OnSelchangeRowDelimiter()
{
	CArchivesExtractionProfileInfo  *pProfileInfo;

	for (; (pProfileInfo = FindExtractionProfileInfo()); )
	{
		pProfileInfo->SetRowDelimiter(ConvertSymbolToDelimiter(Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_ROW), (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_ROW, CB_GETCURSEL))));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsPage::OnSelchangeTextDelimiter()
{
	CArchivesExtractionProfileInfo  *pProfileInfo;

	for (; (pProfileInfo = FindExtractionProfileInfo()); )
	{
		pProfileInfo->SetTextDelimiter(ConvertSymbolToDelimiter(Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_TEXT), (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_DELIMITERS_TEXT, CB_GETCURSEL))));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsPage::OnSelchangeTimeFormat()
{
	CArchivesExtractionProfileInfo  *pProfileInfo;

	for (; (pProfileInfo = FindExtractionProfileInfo()); )
	{
		pProfileInfo->SetTimeFormat((UINT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_FORMAT_TIME, CB_GETCURSEL));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsAbortDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryArchivesExtractionsAbortDialog, CLocaleDialog)

CTelemetryArchivesExtractionsAbortDialog::CTelemetryArchivesExtractionsAbortDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryArchivesExtractionsAbortDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryArchivesExtractionsAbortDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryArchivesExtractionsAbortDialog::Initialize()
{
	GetTMService()->EnumTMHistoryFileExtractions(m_pProfiles[0]);
	GetTMService()->GetTMHistoryFileExtractionProfiles(m_pProfiles[1]);
	return TRUE;
}

BOOL CTelemetryArchivesExtractionsAbortDialog::EnumExtractionJobs()
{
	INT  nItem;
	INT  nItems;
	INT  nWidth;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	CString  szItem;
	CString  szColumn;
	CTimeKey  tStopTime;
	CTimeKey  tStartTime;
	CTimeSpan  tInterval;
	CUIntArray  nFormats;
	CUIntArray  nTriggers;
	CStringArray  szParameters;
	CTelemetryEvents  pTriggers;
	CArchivesExtractionProfileInfo  *pProfileInfo;

	for (nItem = 0, nItems = (INT)m_pProfiles[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pProfileInfo = m_pProfiles[0].GetAt(nItem)) != (CArchivesExtractionProfileInfo *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(); nColumn < nColumns; nColumn++)
			{
				for (szItem.Empty(); m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_NAME); )
				{
					szItem = pProfileInfo->GetName();
					break;
				}
				if (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_TRIGGER))
				{
					for (; pProfileInfo->GetExecutionMode() == ARCHIVESEXTRACTIONINFO_EXECUTION_IMMEDIATELY; )
					{
						szItem = STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TRIGGER_IMMEDIATELY);
						break;
					}
					for (; pProfileInfo->GetExecutionMode() == ARCHIVESEXTRACTIONINFO_EXECUTION_ATTIME || pProfileInfo->GetExecutionMode() == ARCHIVESEXTRACTIONINFO_EXECUTION_BYSCRIPT; )
					{
						szItem.Format(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TRIGGER_SCHEDULEDTIME), (LPCTSTR)pProfileInfo->GetExecutionTime().FormatGmt());
						break;
					}
					for (; pProfileInfo->GetExecutionMode() == ARCHIVESEXTRACTIONINFO_EXECUTION_ATDAILYTIME; )
					{
						szItem.Format(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TRIGGER_SCHEDULEDDAILY), (LPCTSTR)CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + pProfileInfo->GetDailyExecutionTime().GetTotalSeconds() % SECONDSPERDAY).FormatGmt(IDS_TIMEKEY_TIMEFORMAT));
						break;
					}
					for (; pProfileInfo->GetExecutionMode() == ARCHIVESEXTRACTIONINFO_EXECUTION_ATINTERVAL && pProfileInfo->GetPeriodicalExecutionTime(tStartTime, tInterval, tStopTime); )
					{
						szItem.Format(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TRIGGER_SCHEDULEDPERIODICALLY), (LPCTSTR)tStartTime.FormatGmt());
						break;
					}
					for (; pProfileInfo->GetExecutionMode() == ARCHIVESEXTRACTIONINFO_EXECUTION_ATEVENT; )
					{
						szItem.Format(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TRIGGER_EVENT), (LPCTSTR)pProfileInfo->GetTriggeredExecution());
						break;
					}
				}
				if (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_PARAMETERS))
				{
					for (nParameter = 0, nParameters = pProfileInfo->GetParameters(szParameters, nFormats, nTriggers), szItem.Empty(); nParameter < nParameters; nParameter++)
					{
						szItem = (nParameter > 0) ? (szItem + STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_PARAMETER_SEPARATOR) + szParameters.GetAt(nParameter)) : szParameters.GetAt(nParameter);
						continue;
					}
				}
				for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_STATUS); )
				{
					szItem = (pProfileInfo->GetExecutionStatus() == ARCHIVESEXTRACTIONINFO_EXECUTIONSTATUS_RUNNING) ? STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_STATUS_EXECUTING) : STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_STATUS_QUEUED);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST), nItem, nColumn, szItem);
			}
		}
	}
	for (nItem = 0, nItems = (INT)m_pProfiles[1].GetSize(), GetTelemetryEvents(pTriggers), nCount = 0; nItem < nItems; nItem++)
	{
		if ((pProfileInfo = m_pProfiles[1].GetAt(nItem)) != (CArchivesExtractionProfileInfo *)NULL)
		{
			if (pProfileInfo->GetExecutionMode() == ARCHIVESEXTRACTIONINFO_EXECUTION_ATEVENT)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(); nColumn < nColumns; nColumn++)
				{
					for (szItem.Empty(); m_szColumns[1].GetAt(nColumn) == STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_NAME); )
					{
						szItem = pProfileInfo->GetName();
						break;
					}
					if (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_TRIGGER))
					{
						szItem.Format(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TRIGGER_EVENT), (LPCTSTR)pProfileInfo->GetTriggeredExecution());
						szItem = (pProfileInfo->GetTriggeredExecution().IsEmpty()) ? STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TRIGGER_NOEVENT) : szItem;
					}
					if (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_PARAMETERS))
					{
						for (nParameter = 0, nParameters = pProfileInfo->GetParameters(szParameters, nFormats, nTriggers), szItem.Empty(); nParameter < nParameters; nParameter++)
						{
							szItem = (nParameter > 0) ? (szItem + STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_PARAMETER_SEPARATOR) + szParameters.GetAt(nParameter)) : szParameters.GetAt(nParameter);
							continue;
						}
					}
					for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_STATUS); )
					{
						szItem = (pTriggers.Find(pProfileInfo->GetTriggeredExecution()) >= 0) ? STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_STATUS_ACTIVE) : STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_STATUS_INACTIVE);
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_TRIGGEREDLIST), nCount, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_TRIGGEREDLIST), nCount, nColumn, szItem);
				}
				nCount++;
			}
		}
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(); nColumn < nColumns; nColumn++)
	{
		for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST, LVM_GETITEMCOUNT), nWidth = (!Listview_GetColumn(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST), nColumn, szColumn, nWidth)) ? CalcColumnWidth(m_szColumns[0].GetAt(nColumn)) : nWidth; nItem < nItems; nItem++)
		{
			nWidth = max(CalcColumnWidth(Listview_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST), nItem, nColumn)), nWidth);
			continue;
		}
		Listview_SetColumn(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST), nColumn, m_szColumns[0].GetAt(nColumn), nWidth);
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(); nColumn < nColumns; nColumn++)
	{
		for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_TRIGGEREDLIST, LVM_GETITEMCOUNT), nWidth = (!Listview_GetColumn(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_TRIGGEREDLIST), nColumn, szColumn, nWidth)) ? CalcColumnWidth(m_szColumns[1].GetAt(nColumn)) : nWidth; nItem < nItems; nItem++)
		{
			nWidth = max(CalcColumnWidth(Listview_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_TRIGGEREDLIST), nItem, nColumn)), nWidth);
			continue;
		}
		Listview_SetColumn(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_TRIGGEREDLIST), nColumn, m_szColumns[1].GetAt(nColumn), nWidth);
	}
	Listview_SetCurText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST), 0);
	Listview_SetCurText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_TRIGGEREDLIST), 0);
	return((nItem == nItems) ? TRUE : FALSE);
}

INT CTelemetryArchivesExtractionsAbortDialog::CalcColumnWidth(LPCTSTR pszColumn)
{
	CDC  *pDC;
	INT  nWidth;
	CFont  *pOldFont;

	if ((pDC = GetDC()))
	{
		if ((pOldFont = pDC->SelectObject(GetFont())))
		{
			nWidth = pDC->GetTextExtent(pszColumn).cx;
			nWidth += 6 * pDC->GetTextExtent(SPACE).cx;
			pDC->SelectObject(pOldFont);
			ReleaseDC(pDC);
			return nWidth;
		}
		ReleaseDC(pDC);
	}
	return 0;
}

BOOL CTelemetryArchivesExtractionsAbortDialog::Check(BOOL bModified) CONST
{
	CUIntArray  nItems;

	return((Listview_GetSelText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST), nItems) > 0) ? TRUE : FALSE);
}

void CTelemetryArchivesExtractionsAbortDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryArchivesExtractionsAbortDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryArchivesExtractionsAbortDialog::PostNcDestroy()
{
	m_pProfiles[0].RemoveAll();
	m_pProfiles[1].RemoveAll();
	m_szColumns[0].RemoveAll();
	m_szColumns[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesExtractionsAbortDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryArchivesExtractionsAbortDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsAbortDialog message handlers

BOOL CTelemetryArchivesExtractionsAbortDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns[2];
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST)->GetClientRect(rColumns[0]);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_TRIGGEREDLIST)->GetClientRect(rColumns[1]);
	m_szColumns[0].Add(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_NAME));
	m_szColumns[0].Add(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_TRIGGER));
	m_szColumns[0].Add(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_PARAMETERS));
	m_szColumns[0].Add(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_STATUS));
	m_szColumns[1].Add(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_NAME));
	m_szColumns[1].Add(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_TRIGGER));
	m_szColumns[1].Add(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_PARAMETERS));
	m_szColumns[1].Add(STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_STATUS));
	for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(), SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST), nColumn, m_szColumns[0].GetAt(nColumn), (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_NAME)) ? (rColumns[0].Width() / 5) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_TRIGGER)) ? (rColumns[0].Width() / 4) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_PARAMETERS)) ? ((57 * rColumns[0].Width()) / 140) : (rColumns[0].Width() / 7))));
		continue;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(), SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_TRIGGEREDLIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_TRIGGEREDLIST), nColumn, m_szColumns[1].GetAt(nColumn), (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_NAME)) ? (rColumns[1].Width() / 5) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_TRIGGER)) ? (rColumns[1].Width() / 4) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORTDIALOG_TITLEITEM_PARAMETERS)) ? ((57 * rColumns[0].Width()) / 140) : (rColumns[1].Width() / 7))));
		continue;
	}
	if (EnumExtractionJobs())
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_TRIGGEREDLIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_TRIGGEREDLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_TRIGGEREDLIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_TRIGGEREDLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
	return TRUE;
}

void CTelemetryArchivesExtractionsAbortDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
	{
		if (!Listview_IsSelText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONSPAGE_ABORT_LIST), nItem))
		{
			delete m_pProfiles[0].GetAt(nItem);
			m_pProfiles[0].SetAt(nItem, NULL);
		}
	}
	for (nItem = 0, nItems = (INT)m_pProfiles[0].GetSize(); nItem < nItems; nItem++)
	{
		if (!m_pProfiles[0].GetAt(nItem))
		{
			m_pProfiles[0].RemoveAt(nItem);
			nItems--;
			nItem--;
		}
	}
	GetTMService()->AbortTMHistoryFileExtractions(m_pProfiles[0]);
	EndDialog(IDOK);
}

BOOL CTelemetryArchivesExtractionsAbortDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYARCHIVESEXTRACTIONSABORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryArchivesExtractionsAbortDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYARCHIVESEXTRACTIONSABORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsImportDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryArchivesExtractionsImportDialog, CLocaleDialog)

CTelemetryArchivesExtractionsImportDialog::CTelemetryArchivesExtractionsImportDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryArchivesExtractionsImportDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryArchivesExtractionsImportDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryArchivesExtractionsImportDialog::Initialize()
{
	GetTMService()->GetTMHistoryFileExtractionProfiles(m_pProfiles[0]);
	return TRUE;
}

VOID CTelemetryArchivesExtractionsImportDialog::EnumProfiles()
{
	INT  nProfile;
	INT  nProfiles;
	DWORD  cbData;
	CFileEx  cFile;
	CString  szMessage;
	CString  szFileName;
	CByteArray  nFileData;

	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY, CB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_FILENAME)->GetWindowText(szFileName);
	if (cFile.Open(szFileName, CFile::modeRead | CFile::shareExclusive))
	{
		nFileData.SetSize((cbData = (DWORD)cFile.GetLength()*sizeof(BYTE)));
		if (ReadFile(cFile.m_hFile, nFileData.GetData(), (DWORD)nFileData.GetSize(), &cbData, (LPOVERLAPPED)NULL))
		{
			for (nProfile = 0, nProfiles = (m_pProfiles[1].Unmap(nFileData)) ? (INT)m_pProfiles[1].GetSize() : 0; nProfile < nProfiles; nProfile++)
			{
				SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY, CB_INSERTSTRING, nProfile, (LPARAM)(LPCTSTR)m_pProfiles[1].GetAt(nProfile)->GetName());
				continue;
			}
		}
		else
		{
			szMessage = STRING(IDS_TELEMETRYARCHIVEPROFILESIMPORTDIALOG_FILE_FAILURE);
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
		}
		cFile.Close();
	}
	else
	{
		szMessage = STRING(IDS_TELEMETRYARCHIVEPROFILESIMPORTDIALOG_FILE_FAILURE);
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
	}
	if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY, CB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY)->EnableWindow(FALSE);
}

BOOL CTelemetryArchivesExtractionsImportDialog::Check(BOOL bModified) CONST
{
	return((m_pProfiles[2].GetSize() > 0) ? TRUE : FALSE);
}

void CTelemetryArchivesExtractionsImportDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryArchivesExtractionsImportDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryArchivesExtractionsImportDialog::PostNcDestroy()
{
	m_pProfiles[0].RemoveAll();
	m_pProfiles[1].RemoveAll();
	m_pProfiles[2].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesExtractionsImportDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryArchivesExtractionsImportDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_BROWSE, OnBrowse)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_INSPECT, OnInspect)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADDALL, OnAddAll)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_FILENAME, OnEditchangeFileName)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY, OnSelchangeSource)
	ON_LBN_SELCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, OnSelchangeDestination)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsImportDialog message handlers

BOOL CTelemetryArchivesExtractionsImportDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_BROWSE)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADDALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION_TEXT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_FILENAME)->SetFocus();
	return FALSE;
}

void CTelemetryArchivesExtractionsImportDialog::OnBrowse()
{
	CString  szFileName;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_FILENAME)->SetWindowText((szFileName = cFileBrowseDialog.GetPathName()));
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_BROWSE)->ShowWindow((szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_INSPECT)->ShowWindow((!szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_BROWSE)->EnableWindow((szFileName.IsEmpty()) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_INSPECT)->EnableWindow((!szFileName.IsEmpty()) ? TRUE : FALSE);
	}
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_FILENAME)->SetFocus();
}

void CTelemetryArchivesExtractionsImportDialog::OnInspect()
{
	INT  nProfile;
	INT  nProfiles;
	CString  szProfile;
	CHourglassCursor  cCursor;

	EnumProfiles();
	for (nProfile = 0, nProfiles = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY, CB_GETCOUNT); nProfile < nProfiles; nProfile++)
	{
		if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY), nProfile)) < 0) break;
		continue;
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY)->GetWindowText(szProfile);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szProfile) < 0 && !szProfile.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADDALL)->EnableWindow((nProfile < nProfiles) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY)->SetFocus();
}

void CTelemetryArchivesExtractionsImportDialog::OnAdd()
{
	INT  nProfile;
	INT  nProfiles;
	CString  szProfile;
	CArchivesExtractionProfileInfo  *pProfile[2];
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY)->GetWindowText(szProfile);
	if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfile) >= 0)
	{
		if ((pProfile[0] = m_pProfiles[1].GetAt(m_pProfiles[1].Find(szProfile))))
		{
			if ((pProfile[1] = new CArchivesExtractionProfileInfo))
			{
				pProfile[1]->Copy(pProfile[0]);
				if (m_pProfiles[2].Add(pProfile[1]) < 0) delete pProfile[1];
			}
		}
		for (nProfile = 0, nProfiles = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_GETCOUNT); nProfile < nProfiles; nProfile++)
		{
			if (m_pProfiles[0].Find(Listbox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST), nProfile)) >= 0) break;
			continue;
		}
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szProfile));
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION)->ShowWindow((nProfile < nProfiles) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION_TEXT)->ShowWindow((nProfile < nProfiles) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION)->EnableWindow((nProfile < nProfiles) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION_TEXT)->EnableWindow((nProfile < nProfiles) ? TRUE : FALSE);
		for (nProfile = 0, nProfiles = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY, CB_GETCOUNT); nProfile < nProfiles; nProfile++)
		{
			if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY), nProfile)) < 0) break;
			continue;
		}
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADDALL)->EnableWindow((nProfile < nProfiles) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_REMOVE)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_REMOVEALL)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsImportDialog::OnAddAll()
{
	INT  nProfile;
	INT  nProfiles;
	CString  szProfile;
	CArchivesExtractionProfileInfo  *pProfile[2];
	CHourglassCursor  cCursor;

	for (nProfile = 0, nProfiles = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY, CB_GETCOUNT); nProfile < nProfiles; nProfile++)
	{
		if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szProfile = Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY), nProfile))) < 0)
		{
			SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfile);
			continue;
		}
	}
	for (nProfile = 0, nProfiles = (INT)m_pProfiles[1].GetSize(); nProfile < nProfiles; nProfile++)
	{
		if ((pProfile[0] = m_pProfiles[1].GetAt(nProfile)) && m_pProfiles[2].Find(pProfile[0]->GetName()) < 0)
		{
			if ((pProfile[1] = new CArchivesExtractionProfileInfo))
			{
				pProfile[1]->Copy(pProfile[0]);
				if (m_pProfiles[2].Add(pProfile[1]) < 0)
				{
					delete pProfile[1];
					continue;
				}
			}
		}
	}
	for (nProfile = 0, nProfiles = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_GETCOUNT); nProfile < nProfiles; nProfile++)
	{
		if (m_pProfiles[0].Find((szProfile = Listbox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST), nProfile))) >= 0) break;
		continue;
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION)->ShowWindow((nProfile < nProfiles) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION_TEXT)->ShowWindow((nProfile < nProfiles) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION)->EnableWindow((nProfile < nProfiles) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION_TEXT)->EnableWindow((nProfile < nProfiles) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADDALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsImportDialog::OnRemove()
{
	INT  nIndex;
	INT  nProfile;
	INT  nProfiles;
	CString  szProfile;
	CHourglassCursor  cCursor;

	if ((nIndex = m_pProfiles[2].Find(Listbox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST), (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_GETCURSEL)))) >= 0)
	{
		delete m_pProfiles[2].GetAt(nIndex);
		m_pProfiles[2].RemoveAt(nIndex);
	}
	if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_GETCURSEL)) > 0)
	{
		for (nProfile = 0, nProfiles = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_GETCOUNT); nProfile < nProfiles; nProfile++)
		{
			if (m_pProfiles[0].Find((szProfile = Listbox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST), nProfile))) >= 0) break;
			continue;
		}
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY)->GetWindowText(szProfile);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION)->ShowWindow((nProfile < nProfiles) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION_TEXT)->ShowWindow((nProfile < nProfiles) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION)->EnableWindow((nProfile < nProfiles) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION_TEXT)->EnableWindow((nProfile < nProfiles) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szProfile) < 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	}
	else
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION_TEXT)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION_TEXT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_REMOVEALL)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsImportDialog::OnRemoveAll()
{
	CHourglassCursor  cCursor;

	m_pProfiles[2].RemoveAll();
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION_TEXT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ATTENTION_TEXT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsImportDialog::OnEditchangeFileName()
{
	CString  szFileName;

	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_FILENAME)->GetWindowText(szFileName);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_BROWSE)->ShowWindow((szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_INSPECT)->ShowWindow((!szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_BROWSE)->EnableWindow((szFileName.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_INSPECT)->EnableWindow((!szFileName.IsEmpty()) ? TRUE : FALSE);
}

void CTelemetryArchivesExtractionsImportDialog::OnSelchangeSource()
{
	CString  szProfile;

	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_DIRECTORY)->GetWindowText(szProfile);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szProfile) < 0) ? TRUE : FALSE);
}

void CTelemetryArchivesExtractionsImportDialog::OnSelchangeDestination()
{
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_IMPORT_REMOVE)->EnableWindow();
}

void CTelemetryArchivesExtractionsImportDialog::OnOK()
{
	INT  nProfile;
	INT  nProfiles;
	CString  szMessage;
	CArchivesExtractionProfiles  pProfiles;
	CArchivesExtractionProfileInfo  *pProfile[2];
	CHourglassCursor  cCursor;

	for (nProfile = 0, nProfiles = (GetTMService()->GetTMHistoryFileExtractionProfiles(pProfiles)) ? (INT)m_pProfiles[2].GetSize() : -1; nProfile < nProfiles; nProfile++)
	{
		if ((pProfile[0] = m_pProfiles[2].GetAt(nProfile)) != (CArchivesExtractionProfileInfo *)NULL)
		{
			if ((pProfile[1] = pProfiles.GetAt(pProfiles.Find(pProfile[0]->GetName()))))
			{
				pProfile[1]->Copy(pProfile[0]);
				continue;
			}
			if (pProfiles.Add(pProfile[0]) >= 0)
			{
				m_pProfiles[2].RemoveAt(nProfile);
				nProfiles--;
				nProfile--;
				continue;
			}
			szMessage.Format(STRING(IDS_TELEMETRYARCHIVEPROFILESIMPORTDIALOG_FAILURE), (LPCTSTR)pProfile[0]->GetName());
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
		}
	}
	for (; szMessage.IsEmpty(); )
	{
		GetTMService()->SetTMHistoryFileExtractionProfiles(pProfiles);
		break;
	}
	CLocaleDialog::OnOK();
}

BOOL CTelemetryArchivesExtractionsImportDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYARCHIVESEXTRACTIONSIMPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryArchivesExtractionsImportDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYARCHIVESEXTRACTIONSIMPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsExportDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryArchivesExtractionsExportDialog, CLocaleDialog)

CTelemetryArchivesExtractionsExportDialog::CTelemetryArchivesExtractionsExportDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryArchivesExtractionsExportDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryArchivesExtractionsExportDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryArchivesExtractionsExportDialog::Initialize()
{
	GetTMService()->GetTMHistoryFileExtractionProfiles(m_pProfiles[0]);
	return TRUE;
}

BOOL CTelemetryArchivesExtractionsExportDialog::EnumProfiles()
{
	INT  nProfile;
	INT  nProfiles;

	for (nProfile = 0, nProfiles = (INT)m_pProfiles[0].GetSize(); nProfile < nProfiles; nProfile++)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_pProfiles[0].GetAt(nProfile)->GetName());
		continue;
	}
	if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY, CB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY)->EnableWindow();
		return TRUE;
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY)->EnableWindow(FALSE);
	return FALSE;
}

BOOL CTelemetryArchivesExtractionsExportDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_FILENAME)->GetWindowTextLength() > 0 && m_pProfiles[1].GetSize() > 0) ? TRUE : FALSE);
}

void CTelemetryArchivesExtractionsExportDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryArchivesExtractionsExportDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryArchivesExtractionsExportDialog::PostNcDestroy()
{
	m_pProfiles[0].RemoveAll();
	m_pProfiles[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesExtractionsExportDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryArchivesExtractionsExportDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_ADDALL, OnAddAll)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_BROWSE, OnBrowse)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_FILENAME, OnEditchangeFileName)
	ON_CBN_SELCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY, OnSelchangeSource)
	ON_LBN_SELCHANGE(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, OnSelchangeDestination)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesExtractionsExportDialog message handlers

BOOL CTelemetryArchivesExtractionsExportDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_ADD)->EnableWindow((EnumProfiles() && SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_BROWSE)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY)->SetFocus();
	return FALSE;
}

void CTelemetryArchivesExtractionsExportDialog::OnAdd()
{
	INT  nProfile;
	INT  nProfiles;
	CString  szProfile;
	CArchivesExtractionProfileInfo  *pProfile[2];
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY)->GetWindowText(szProfile);
	if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfile) >= 0)
	{
		if ((pProfile[0] = m_pProfiles[0].GetAt(m_pProfiles[0].Find(szProfile))))
		{
			if ((pProfile[1] = new CArchivesExtractionProfileInfo))
			{
				pProfile[1]->Copy(pProfile[0]);
				if (m_pProfiles[1].Add(pProfile[1]) < 0) delete pProfile[1];
			}
		}
		for (nProfile = 0, nProfiles = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY, CB_GETCOUNT); nProfile < nProfiles; nProfile++)
		{
			if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY), nProfile)) < 0) break;
			continue;
		}
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szProfile));
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_ADDALL)->EnableWindow((nProfile < nProfiles) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_REMOVE)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_REMOVEALL)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExportDialog::OnAddAll()
{
	INT  nProfile;
	INT  nProfiles;
	CString  szProfile;
	CArchivesExtractionProfileInfo  *pProfile[2];
	CHourglassCursor  cCursor;

	for (nProfile = 0, nProfiles = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY, CB_GETCOUNT); nProfile < nProfiles; nProfile++)
	{
		if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szProfile = Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY), nProfile))) < 0)
		{
			SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfile);
			continue;
		}
	}
	for (nProfile = 0, nProfiles = (INT)m_pProfiles[0].GetSize(); nProfile < nProfiles; nProfile++)
	{
		if ((pProfile[0] = m_pProfiles[0].GetAt(nProfile)) && m_pProfiles[1].Find(pProfile[0]->GetName()) < 0)
		{
			if ((pProfile[1] = new CArchivesExtractionProfileInfo))
			{
				pProfile[1]->Copy(pProfile[0]);
				if (m_pProfiles[1].Add(pProfile[1]) < 0)
				{
					delete pProfile[1];
					continue;
				}
			}
		}
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_ADDALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExportDialog::OnRemove()
{
	INT  nIndex;
	CString  szProfile;
	CHourglassCursor  cCursor;

	if ((nIndex = m_pProfiles[1].Find(Listbox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST), (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_GETCURSEL)))) >= 0)
	{
		delete m_pProfiles[1].GetAt(nIndex);
		m_pProfiles[1].RemoveAt(nIndex);
	}
	if (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_GETCURSEL)) > 0)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY)->GetWindowText(szProfile);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szProfile) < 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	}
	else
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_REMOVEALL)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExportDialog::OnRemoveAll()
{
	CHourglassCursor  cCursor;

	m_pProfiles[1].RemoveAll();
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExportDialog::OnBrowse()
{
	CString  szFileName;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		szFileName = cFileBrowseDialog.GetPathName();
		GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_FILENAME)->SetWindowText(szFileName);
	}
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExportDialog::OnEditchangeFileName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesExtractionsExportDialog::OnSelchangeSource()
{
	CString  szProfile;

	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_DIRECTORY)->GetWindowText(szProfile);
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szProfile) < 0) ? TRUE : FALSE);
}

void CTelemetryArchivesExtractionsExportDialog::OnSelchangeDestination()
{
	GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_REMOVE)->EnableWindow();
}

void CTelemetryArchivesExtractionsExportDialog::OnOK()
{
	DWORD  cbData;
	CFileEx  cFile;
	CString  szFileName;
	CByteArray  nFileData;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TELEMETRYARCHIVES_EXTRACTIONS_EXPORT_FILENAME)->GetWindowText(szFileName); !szFileName.IsEmpty(); )
	{
		if (cFile.Open(szFileName, CFile::modeCreate | CFile::modeReadWrite | CFile::shareExclusive))
		{
			ReportEvent((!WriteFile(cFile.m_hFile, nFileData.GetData(), (m_pProfiles[1].Map(nFileData)) ? (DWORD)nFileData.GetSize() : 0, &cbData, (LPOVERLAPPED)NULL) || !cbData) ? (EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR) : 0, STRING(IDS_TELEMETRYARCHIVEPROFILESEXPORTDIALOG_FILE_FAILURE));
			cFile.Close();
			break;
		}
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TELEMETRYARCHIVEPROFILESEXPORTDIALOG_FILE_FAILURE));
		break;
	}
	CLocaleDialog::OnOK();
}

BOOL CTelemetryArchivesExtractionsExportDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYARCHIVESEXTRACTIONSEXPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryArchivesExtractionsExportDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYARCHIVESEXTRACTIONSEXPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesToolsPage property page

IMPLEMENT_DYNCREATE(CTelemetryArchivesToolsPage, CLocalePropertyPage)

CTelemetryArchivesToolsPage::CTelemetryArchivesToolsPage() : CLocalePropertyPage(CTelemetryArchivesToolsPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryArchivesToolsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryArchivesToolsPage::SetExtractionProfiles(CONST CHistoryFileExtractionProfiles &pProfiles, BOOL bInitialize)
{
	INT  nProfile;
	INT  nProfiles;
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	for (m_pProfiles[0].Copy(&pProfiles); bInitialize; )
	{
		for (nProfile = 0, nProfiles = (INT)m_pProfiles[0].GetSize(), m_bExecuting = FALSE; nProfile < nProfiles; nProfile++)
		{
			if ((pProfileInfo = m_pProfiles[0].GetAt(nProfile)) != (CHistoryFileExtractionProfileInfo *)NULL)
			{
				if (pProfileInfo->GetOptions() == HISTORYFILEEXTRACTION_OPTION_NONE)
				{
					pProfileInfo->SetOptions(HISTORYFILEEXTRACTION_OPTION_STANDARD | HISTORYFILEEXTRACTION_OPTION_STARTFILE | HISTORYFILEEXTRACTION_OPTION_STOPDISK | HISTORYFILEEXTRACTION_OPTION_EXECUTEANYTIME);
					pProfileInfo->SetGapInterval(TELEMETRYARCHIVESTOOLSPAGE_DEFAULTGAPINTERVAL);
					pProfileInfo->SetUpdateInterval(TELEMETRYARCHIVESTOOLSPAGE_DEFAULTUPDATEINTERVAL);
					continue;
				}
				m_bExecuting = TRUE;
			}
		}
		m_pProfiles[1].Copy(&m_pProfiles[0]);
		break;
	}
}

BOOL CTelemetryArchivesToolsPage::GetExtractionProfiles(CHistoryFileExtractionProfiles &pProfiles) CONST
{
	return pProfiles.Copy(&m_pProfiles[0]);
}

CTelemetryArchivesDialog *CTelemetryArchivesToolsPage::GetParent() CONST
{
	return((CTelemetryArchivesDialog *)CLocalePropertyPage::GetParent());
}

VOID CTelemetryArchivesToolsPage::ShowExtractionProfileInfo()
{
	CString  szSource;
	CTimeSpan  tInterval[2];
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindExtractionProfileInfo()))
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROMTIME), (pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STARTTIME) ? pProfileInfo->GetStartTime() : CTime::GetCurrentTime().GetTime());
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_ATTIME), (pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STOPTIME) ? pProfileInfo->GetStopTime() : CTime::GetCurrentTime().GetTime());
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STARTTIME), (pProfileInfo->GetDeniedExecutionTime(tInterval[0], tInterval[1])) ? CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + tInterval[0].GetTotalSeconds() % SECONDSPERDAY) : CTime::GetCurrentTime().GetTime());
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STOPTIME), (pProfileInfo->GetDeniedExecutionTime(tInterval[0], tInterval[1])) ? CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + tInterval[1].GetTotalSeconds() % SECONDSPERDAY) : CTime::GetCurrentTime().GetTime());
		Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_GAPS), TELEMETRYARCHIVESTOOLSPAGE_MINIMUMGAPINTERVAL, TELEMETRYARCHIVESTOOLSPAGE_MAXIMUMGAPINTERVAL);
		Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_INTERVAL), TELEMETRYARCHIVESTOOLSPAGE_MINIMUMUPDATEINTERVAL, TELEMETRYARCHIVESTOOLSPAGE_MAXIMUMUPDATEINTERVAL);
		Spinbox_SetRange(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTERSIZE), TELEMETRYARCHIVESTOOLSPAGE_MINIMUMSIZE, TELEMETRYARCHIVESTOOLSPAGE_MAXIMUMSIZE);
		Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_GAPS), pProfileInfo->GetGapInterval().GetTotalSeconds());
		Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_INTERVAL), pProfileInfo->GetUpdateInterval());
		Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTERSIZE), (pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STOPSIZE) ? (pProfileInfo->GetStopSize() / (1024 * 1024)) : TELEMETRYARCHIVESTOOLSPAGE_DEFAULTSIZE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_FORMAT_STANDARD, (pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STANDARD) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_FORMAT_RAW, (pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_RAW) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES, pProfileInfo->GetUpdateInterval() > 0);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROM, (pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STARTTIME) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AT, (pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STOPTIME) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTER, (pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STOPSIZE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FILEBEGIN, (pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STARTFILE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_DISKFULL, (pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STOPDISK) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE, (pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_EXECUTEOUTSIDETIME) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME)->SetWindowText(pProfileInfo->GetFileName());
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME_BROWSE)->EnableWindow((!IsExtractionExecuting()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES)->GetWindowText(szSource);
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_BROWSE)->EnableWindow((!IsExtractionExecuting()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szSource) < 0 && !szSource.IsEmpty() && !IsExtractionExecuting()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_SETCURSEL) >= 0 && !IsExtractionExecuting()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_FORMAT_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_FORMAT_STANDARD)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_FORMAT_RAW)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_GAPS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_GAPS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_GAPS_SECONDS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES));
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_UNITS_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES));
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_FORMAT_OPTIONS)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_FORMAT_RAW));
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROM)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROMTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROM));
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FILEBEGIN)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AT)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_ATTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AT));
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTER)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTERSIZE)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTER));
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTER_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTER));
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_DISKFULL)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE));
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE));
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE));
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_ABORT)->EnableWindow((IsExtractionExecuting()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
		EnumExtractionSources(pProfileInfo);
		EnumExtractionFilters(pProfileInfo);
	}
	AdjustToPrivileges();
}

VOID CTelemetryArchivesToolsPage::EnumExtractionSources(CONST CHistoryFileExtractionProfileInfo *pProfileInfo)
{
	INT  nSource;
	INT  nSources;
	CStringArray  szSources;

	for (nSource = 0, nSources = pProfileInfo->GetSources(szSources), SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_RESETCONTENT); nSource < nSources; nSource++)
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSources.GetAt(nSource));
		continue;
	}
}

VOID CTelemetryArchivesToolsPage::EnumExtractionFilters(CONST CHistoryFileExtractionProfileInfo *pProfileInfo)
{
	INT  nPacket;
	INT  nPackets;
	INT  nFilter;
	INT  nFilters;
	CString  szFilter;
	CStringArray  szFilters;
	CDatabaseTMPacket  *pDatabaseTMPacket;

	for (nPacket = 0, nPackets = (!pProfileInfo->GetFilters(szFilters)) ? (INT)GetDatabase()->GetTMPackets()->GetSize() : 0; nPacket < nPackets; nPacket++)
	{
		if ((pDatabaseTMPacket = GetDatabase()->GetTMPackets()->GetAt(nPacket)))
		{
			szFilters.Add(pDatabaseTMPacket->GetTag());
			continue;
		}
	}
	for (nFilter = 0, nFilters = (INT)szFilters.GetSize(), SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_RESETCONTENT); nFilter < nFilters; nFilter++)
	{
		if ((pDatabaseTMPacket = GetDatabase()->GetTMPackets()->GetAt(GetDatabase()->GetTMPackets()->Find(szFilters.GetAt(nFilter)))) != (CDatabaseTMPacket *)NULL)
		{
			szFilter.Format(STRING(IDS_TELEMETRYARCHIVES_TOOLSPAGE_FILTERITEMFORMAT), (LPCTSTR)pDatabaseTMPacket->GetTag(), (LPCTSTR)pDatabaseTMPacket->GetDescription());
			SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szFilter);
		}
	}
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_SETCURSEL);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_GETCOUNT) < GetDatabase()->GetTMPackets()->GetSize() && !IsExtractionExecuting()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_GETCURSEL) >= 0 && !IsExtractionExecuting()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
}

CHistoryFileExtractionProfileInfo *CTelemetryArchivesToolsPage::FindExtractionProfileInfo() CONST
{
	return m_pProfiles[0].GetAt((INT)(m_pProfiles[0].GetSize() - 1));
}

BOOL CTelemetryArchivesToolsPage::IsExtractionExecuting() CONST
{
	return m_bExecuting;
}

VOID CTelemetryArchivesToolsPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME, (bCheck = (!IsExtractionExecuting()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE));
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_FORMAT_STANDARD, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_FORMAT_RAW, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_GAPS, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_INTERVAL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROM, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROMTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AT, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_ATTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FILEBEGIN, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AT, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_ATTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTER, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTERSIZE, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_DISKFULL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STARTTIME, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STOPTIME, bCheck);
}

BOOL CTelemetryArchivesToolsPage::IsModified(BOOL bAll) CONST
{
	INT  nProfile;
	INT  nProfiles;
	CStringArray   szSources[2];
	CHistoryFileExtractionProfileInfo  *pProfileInfo[2];

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nProfile = 0, nProfiles = (INT)m_pProfiles[0].GetSize(); nProfile < nProfiles; nProfile++)
		{
			if ((pProfileInfo[1] = ((pProfileInfo[0] = m_pProfiles[0].GetAt(nProfile))) ? m_pProfiles[1].GetAt(nProfile) : (CHistoryFileExtractionProfileInfo *)NULL) && (!pProfileInfo[0]->GetFileName().IsEmpty() || !pProfileInfo[1]->GetFileName().IsEmpty() || pProfileInfo[0]->GetSources(szSources[0]) > 0 || pProfileInfo[1]->GetSources(szSources[1]) > 0) && !pProfileInfo[0]->Compare(pProfileInfo[1])) break;
			continue;
		}
		return((nProfile < nProfiles) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::IsModified() : FALSE);
}

BOOL CTelemetryArchivesToolsPage::Check(BOOL bAll) CONST
{
	INT  nSource;
	INT  nSources;
	CString  szFileName;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nSource = 0, nSources = (INT)GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES)->SendMessage(CB_GETCOUNT), GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME)->GetWindowText(szFileName); nSource < nSources; nSource++)
		{
			if (!szFileName.CompareNoCase(Combobox_GetText(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES), nSource))) break;
			continue;
		}
		return((((!GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME)->GetWindowTextLength() && !GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES)->SendMessage(CB_GETCOUNT)) || (GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES)->SendMessage(CB_GETCOUNT) > 0)) && nSource == nSources) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

void CTelemetryArchivesToolsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryArchivesToolsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryArchivesToolsPage::PostNcDestroy()
{
	m_pProfiles[0].RemoveAll();
	m_pProfiles[1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesToolsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryArchivesToolsPage)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME_BROWSE, OnFilenameBrowse)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_BROWSE, OnSourceBrowse)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_ADD, OnAddSource)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_REMOVE, OnRemoveSource)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_FORMAT_STANDARD, OnFormatStandard)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_FORMAT_RAW, OnFormatRaw)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_FORMAT_OPTIONS, OnFormatOptions)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES, OnUpdateInterval)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROM, OnRestrictionStartTime)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AT, OnRestrictionStopTime)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FILEBEGIN, OnRestrictionStartFile)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTER, OnRestrictionStopSize)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_DISKFULL, OnRestrictionStopDisk)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_REMOVE, OnFilteringRemoveItem)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_ADDALL, OnFilteringAllItems)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE, OnExecutionTimeRange)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_ABORT, OnAbort)
	ON_CBN_EDITCHANGE(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, OnEditchangeSource)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_GAPS, OnSpinchangeGapsInterval)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_INTERVAL, OnSpinchangeUpdateInterval)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROMTIME, OnSpinchangeRestrictionStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_ATTIME, OnSpinchangeRestrictionStopTime)
	ON_CONTROL(SBXN_CHANGE, IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTERSIZE, OnSpinchangeRestrictionStopSize)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STARTTIME, OnSpinchangeExecutionStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STOPTIME, OnSpinchangeExecutionStopTime)
	ON_EN_CHANGE(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesToolsPage message handlers

BOOL CTelemetryArchivesToolsPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME)->EnableWindow();
	ShowExtractionProfileInfo();
	return TRUE;
}

void CTelemetryArchivesToolsPage::OnFilenameBrowse()
{
	CString  szFileName;
	CHistoryStoreFile  cFile;
	CHistoryFileExtractionProfileInfo  *pProfileInfo;
	CFileBrowseDialog  cFileBrowseDialog(this, (GetTMService()->GetDefaultTMHistoryFile(HISTORYFILE_TYPE_ARCHIVE, cFile)) ? cFile.GetFileName() : (LPCTSTR)NULL, STRING(IDS_FILEBROWSEDIALOG_TMHISTORYFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TMHISTORYFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		if ((pProfileInfo = FindExtractionProfileInfo()))
		{
			szFileName = cFileBrowseDialog.GetPathName();
			pProfileInfo->SetFileName(szFileName);
		}
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	}
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnSourceBrowse()
{
	CString  szFileName;
	CHistoryStoreFile  cFile;
	CFileBrowseDialog  cFileBrowseDialog(this, (GetTMService()->GetDefaultTMHistoryFile(HISTORYFILE_TYPE_ARCHIVE, cFile)) ? cFile.GetFileName() : (LPCTSTR)NULL, STRING(IDS_FILEBROWSEDIALOG_TMHISTORYFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TMHISTORYFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME)->GetWindowText(szFileName);
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES)->SetWindowText(cFileBrowseDialog.GetPathName());
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFileBrowseDialog.GetPathName()) < 0 && !cFileBrowseDialog.GetPathName().IsEmpty() && szFileName.CompareNoCase(cFileBrowseDialog.GetPathName())) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
	}
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnAddSource()
{
	INT  nIndex;
	CString  szSource;
	CStringArray  szSources;
	CHistoryFileExtractionProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES)->GetWindowText(szSource);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSource))) >= 0)
	{
		if ((pProfileInfo = FindExtractionProfileInfo()))
		{
			pProfileInfo->GetSources(szSources);
			szSources.InsertAt(nIndex, szSource);
			pProfileInfo->SetSources(szSources);
		}
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE));
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnRemoveSource()
{
	INT  nIndex;
	CString  szSource;
	CStringArray  szSources;
	CHistoryFileExtractionProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_GETCURSEL)) >= 0)
	{
		if ((pProfileInfo = FindExtractionProfileInfo()) != (CHistoryFileExtractionProfileInfo *)NULL)
		{
			for (pProfileInfo->GetSources(szSources); nIndex < szSources.GetSize(); )
			{
				szSources.RemoveAt(nIndex);
				break;
			}
			pProfileInfo->SetSources(szSources);
		}
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_DELETESTRING, nIndex);
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_SETCURSEL);
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnFormatStandard()
{
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindExtractionProfileInfo()))
	{
		pProfileInfo->SetOptions((pProfileInfo->GetOptions() & ~HISTORYFILEEXTRACTION_OPTION_RAW) | HISTORYFILEEXTRACTION_OPTION_STANDARD);
		pProfileInfo->SetFormatting(HISTORYFILEEXTRACTION_FORMAT_NONE);
		pProfileInfo->SetUpdateInterval(TELEMETRYARCHIVESTOOLSPAGE_DEFAULTUPDATEINTERVAL);
		pProfileInfo->SetGapInterval(TELEMETRYARCHIVESTOOLSPAGE_DEFAULTGAPINTERVAL);
		pProfileInfo->SetFileExtension(EMPTYSTRING);
		pProfileInfo->SetFilePrefix(EMPTYSTRING);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_GAPS), TELEMETRYARCHIVESTOOLSPAGE_DEFAULTGAPINTERVAL);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_INTERVAL), TELEMETRYARCHIVESTOOLSPAGE_DEFAULTUPDATEINTERVAL);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_FORMAT_OPTIONS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_GAPS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_GAPS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_GAPS_SECONDS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_UNITS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_INTERVAL)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnFormatRaw()
{
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindExtractionProfileInfo()))
	{
		pProfileInfo->SetOptions((pProfileInfo->GetOptions() & ~HISTORYFILEEXTRACTION_OPTION_STANDARD) | HISTORYFILEEXTRACTION_OPTION_RAW);
		pProfileInfo->SetFormatting(HISTORYFILEEXTRACTION_FORMAT_ASCII | HISTORYFILEEXTRACTION_FORMAT_RADIX16 | HISTORYFILEEXTRACTION_FORMAT_BLOCK16BITS | HISTORYFILEEXTRACTION_FORMAT_CREOLSEPARATOR);
		pProfileInfo->SetFileExtension(EMPTYSTRING);
		pProfileInfo->SetFilePrefix(EMPTYSTRING);
		pProfileInfo->SetUpdateInterval(0);
		pProfileInfo->SetGapInterval(0);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_FORMAT_OPTIONS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_GAPS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_GAPS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_GAPS_SECONDS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_UNITS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnFormatOptions()
{
	CHistoryFileExtractionProfileInfo  *pProfileInfo;
	CTelemetryArchivesToolsOptionsDialog  cFormatOptionsDialog;

	if ((pProfileInfo = FindExtractionProfileInfo())) cFormatOptionsDialog.DoModal(pProfileInfo);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnUpdateInterval()
{
	UINT  nInterval;
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindExtractionProfileInfo()))
	{
		nInterval = (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES)) ? TELEMETRYARCHIVESTOOLSPAGE_DEFAULTUPDATEINTERVAL : 0;
		pProfileInfo->SetUpdateInterval(nInterval);
	}
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_INTERVAL), TELEMETRYARCHIVESTOOLSPAGE_DEFAULTUPDATEINTERVAL);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_UNITS_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_INTERVAL)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnRestrictionStartTime()
{
	CTimeKey  tTime[2];
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindExtractionProfileInfo()))
	{
		tTime[0] = (pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STOPTIME) ? (pProfileInfo->GetStopTime().GetTime() - TELEMETRYARCHIVESTOOLSPAGE_INTERVALTIME) : (tTime[0].GetTime() - TELEMETRYARCHIVESTOOLSPAGE_INTERVALTIME);
		tTime[1] = (pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STOPTIME) ? pProfileInfo->GetStopTime().GetTime() : tTime[0].GetTime();
		pProfileInfo->SetOptions((pProfileInfo->GetOptions() | HISTORYFILEEXTRACTION_OPTION_STARTTIME) & ~HISTORYFILEEXTRACTION_OPTION_STARTFILE);
		pProfileInfo->SetStartTime((pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STARTTIME) ? tTime[0].GetTime() : 0);
		pProfileInfo->SetStopTime((pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STOPTIME) ? tTime[1].GetTime() : 0);
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROMTIME), tTime[0]);
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_ATTIME), tTime[1]);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROM, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FILEBEGIN, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROMTIME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROMTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnRestrictionStopTime()
{
	CTimeKey  tTime[2];
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindExtractionProfileInfo()))
	{
		tTime[0] = (pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STARTTIME) ? pProfileInfo->GetStartTime().GetTime() : (tTime[0].GetTime() - TELEMETRYARCHIVESTOOLSPAGE_INTERVALTIME);
		tTime[1] = (pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STARTTIME) ? (pProfileInfo->GetStartTime().GetTime() + TELEMETRYARCHIVESTOOLSPAGE_INTERVALTIME) : tTime[1].GetTime();
		pProfileInfo->SetOptions((pProfileInfo->GetOptions() | HISTORYFILEEXTRACTION_OPTION_STOPTIME) & ~(HISTORYFILEEXTRACTION_OPTION_STOPSIZE | HISTORYFILEEXTRACTION_OPTION_STOPDISK));
		pProfileInfo->SetStartTime((pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STARTTIME) ? tTime[0].GetTime() : 0);
		pProfileInfo->SetStopTime((pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STOPTIME) ? tTime[1].GetTime() : 0);
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROMTIME), tTime[0]);
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_ATTIME), tTime[1]);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AT, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTER, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_DISKFULL, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_ATTIME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTERSIZE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_ATTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnRestrictionStartFile()
{
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindExtractionProfileInfo()))
	{
		pProfileInfo->SetOptions((pProfileInfo->GetOptions() | HISTORYFILEEXTRACTION_OPTION_STARTFILE) & ~HISTORYFILEEXTRACTION_OPTION_STARTTIME);
		pProfileInfo->SetStartTime((pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STARTFILE) ? CTimeKey(0) : 0);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROM, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FILEBEGIN, TRUE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROMTIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnRestrictionStopSize()
{
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindExtractionProfileInfo()))
	{
		pProfileInfo->SetOptions((pProfileInfo->GetOptions() | HISTORYFILEEXTRACTION_OPTION_STOPSIZE) & ~(HISTORYFILEEXTRACTION_OPTION_STOPTIME | HISTORYFILEEXTRACTION_OPTION_STOPDISK));
		pProfileInfo->SetStopSize((pProfileInfo->GetOptions() | HISTORYFILEEXTRACTION_OPTION_STOPSIZE) ? (1024 * 1024 * TELEMETRYARCHIVESTOOLSPAGE_DEFAULTSIZE) : 0);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AT, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTER, TRUE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_DISKFULL, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTERSIZE), TELEMETRYARCHIVESTOOLSPAGE_DEFAULTSIZE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_ATTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTERSIZE)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTER_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTERSIZE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnRestrictionStopDisk()
{
	UINT  nOptions;
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindExtractionProfileInfo()))
	{
		nOptions = (pProfileInfo->GetOptions() | HISTORYFILEEXTRACTION_OPTION_STOPDISK) & ~(HISTORYFILEEXTRACTION_OPTION_STOPTIME | HISTORYFILEEXTRACTION_OPTION_STOPSIZE);
		pProfileInfo->SetOptions(nOptions);
	}
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AT, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTER, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_DISKFULL, TRUE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_ATTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTERSIZE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnFilteringRemoveItem()
{
	INT  nIndex;
	INT  nFilter;
	INT  nFilters;
	CStringArray  szFilters;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CHistoryFileExtractionProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_GETCURSEL); (pProfileInfo = FindExtractionProfileInfo()); )
	{
		if (nIndex < pProfileInfo->GetFilters(szFilters) && nIndex >= 0)
		{
			szFilters.RemoveAt(nIndex);
			pProfileInfo->SetFilters(szFilters);
			break;
		}
		for (nFilter = 0, nFilters = (INT)GetDatabase()->GetTMPackets()->GetSize(), szFilters.RemoveAll(); nFilter < nFilters; nFilter++)
		{
			if ((pDatabaseTMPacket = (nIndex != nFilter) ? GetDatabase()->GetTMPackets()->GetAt(nFilter) : (CDatabaseTMPacket *)NULL))
			{
				szFilters.Add(pDatabaseTMPacket->GetTag());
				continue;
			}
		}
		pProfileInfo->SetFilters(szFilters);
		break;
	}
	for (SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_DELETESTRING, nIndex); SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_GETCURSEL) < 0; )
	{
		SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_SETCURSEL);
		break;
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_GETCOUNT) < GetDatabase()->GetTMPackets()->GetSize()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
	GetDlgItem((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST, CB_GETCOUNT) > 0) ? IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_LIST : IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_FILTERING_ADDALL)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnFilteringAllItems()
{
	CStringArray  szFilters;
	CHistoryFileExtractionProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	if ((pProfileInfo = FindExtractionProfileInfo()))
	{
		pProfileInfo->SetFilters(szFilters);
		EnumExtractionFilters(pProfileInfo);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnExecutionTimeRange()
{
	CTimeKey  tTime;
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindExtractionProfileInfo()))
	{
		pProfileInfo->SetOptions((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE)) ? ((pProfileInfo->GetOptions() & ~HISTORYFILEEXTRACTION_OPTION_EXECUTEANYTIME) | HISTORYFILEEXTRACTION_OPTION_EXECUTEOUTSIDETIME) : ((pProfileInfo->GetOptions() & ~HISTORYFILEEXTRACTION_OPTION_EXECUTEOUTSIDETIME) | HISTORYFILEEXTRACTION_OPTION_EXECUTEANYTIME));
		pProfileInfo->SetDeniedExecutionTime((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE)) ? (SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TELEMETRYARCHIVESTOOLSPAGE_DAILYSTARTTIME) : 0, (IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE)) ? (SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TELEMETRYARCHIVESTOOLSPAGE_DAILYSTOPTIME) : 0);
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STARTTIME), CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TELEMETRYARCHIVESTOOLSPAGE_DAILYSTARTTIME));
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STOPTIME), CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TELEMETRYARCHIVESTOOLSPAGE_DAILYSTOPTIME));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnAbort()
{
	CHistoryFileExtractionProfiles  pProfiles;
	CHourglassCursor  cCursor;

	if (GetTMService()->AbortTMHistoryFileExtractions(m_pProfiles[1]))
	{
		GetTMService()->EnumTMHistoryFileExtractions(pProfiles);
		SetExtractionProfiles(pProfiles, TRUE);
		ShowExtractionProfileInfo();
	}
	SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_ABORT)->EnableWindow((IsExtractionExecuting()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnEditchangeFileName()
{
	CString  szSource;
	CString  szFileName;
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	for (GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME)->GetWindowText(szFileName); (pProfileInfo = FindExtractionProfileInfo()); )
	{
		pProfileInfo->SetFileName(szFileName);
		break;
	}
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES)->GetWindowText(szSource);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_ADD)->EnableWindow((!szSource.IsEmpty() && szFileName.CompareNoCase(szSource) && SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szSource) < 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnEditchangeSource()
{
	CString  szSource;
	CString  szFileName;

	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_FILENAME)->GetWindowText(szFileName);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES)->GetWindowText(szSource);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_ADD)->EnableWindow((!szSource.IsEmpty() && szFileName.CompareNoCase(szSource) && SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szSource) < 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYARCHIVES_TOOLSPAGE_SOURCES, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnSpinchangeGapsInterval()
{
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindExtractionProfileInfo())) pProfileInfo->SetGapInterval(Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_GAPS)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnSpinchangeUpdateInterval()
{
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindExtractionProfileInfo())) pProfileInfo->SetUpdateInterval((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_UPDATES_INTERVAL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnSpinchangeRestrictionStartTime()
{
	CTimeKey  tTime[2];
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROMTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_ATTIME)); (pProfileInfo = FindExtractionProfileInfo()); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_ATTIME), ((tTime[1] = (tTime[0] >= tTime[1]) ? (tTime[0].GetTime() + 1) : tTime[1])));
		pProfileInfo->SetStartTime((pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STARTTIME) ? tTime[0] : 0);
		pProfileInfo->SetStopTime((pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STOPTIME) ? tTime[1] : 0);
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_ATTIME), ((tTime[1] = (tTime[0] >= tTime[1]) ? (tTime[0].GetTime() + 1) : tTime[1])));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnSpinchangeRestrictionStopTime()
{
	CTimeKey  tTime[2];
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROMTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_ATTIME)); (pProfileInfo = FindExtractionProfileInfo()); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROMTIME), ((tTime[0] = (tTime[0] >= tTime[1]) ? max(tTime[1].GetTime() - 1, 0) : tTime[0])));
		pProfileInfo->SetStartTime((pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STARTTIME) ? tTime[0] : 0);
		pProfileInfo->SetStopTime((pProfileInfo->GetOptions() & HISTORYFILEEXTRACTION_OPTION_STOPTIME) ? tTime[1] : 0);
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_START_FROMTIME), ((tTime[0] = (tTime[0] >= tTime[1]) ? max(tTime[1].GetTime() - 1, 0) : tTime[0])));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnSpinchangeRestrictionStopSize()
{
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindExtractionProfileInfo())) pProfileInfo->SetStopSize(1024 * 1024 * Spinbox_GetPos(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_RESTRICTIONS_STOP_AFTERSIZE)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnSpinchangeExecutionStartTime()
{
	CTimeKey  tTime[2];
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STOPTIME)); (pProfileInfo = FindExtractionProfileInfo()); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STOPTIME), ((tTime[1] = (tTime[0].GetTime() % SECONDSPERDAY >= tTime[1].GetTime() % SECONDSPERDAY  &&  tTime[0].GetTime() % SECONDSPERDAY < SECONDSPERDAY - 1) ? (tTime[0].GetTime() + 1) : tTime[1])));
		pProfileInfo->SetDeniedExecutionTime(tTime[0].GetTime() % SECONDSPERDAY, tTime[1].GetTime() % SECONDSPERDAY);
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STOPTIME), ((tTime[1] = (tTime[0].GetTime() % SECONDSPERDAY >= tTime[1].GetTime() % SECONDSPERDAY  &&  tTime[0].GetTime() % SECONDSPERDAY < SECONDSPERDAY - 1) ? (tTime[0].GetTime() + 1) : tTime[1])));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsPage::OnSpinchangeExecutionStopTime()
{
	CTimeKey  tTime[2];
	CHistoryFileExtractionProfileInfo  *pProfileInfo;

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STOPTIME)); (pProfileInfo = FindExtractionProfileInfo()); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STARTTIME), ((tTime[0] = (tTime[0].GetTime() % SECONDSPERDAY >= tTime[1].GetTime() % SECONDSPERDAY  &&  tTime[1].GetTime() % SECONDSPERDAY > 0) ? max(tTime[1].GetTime() - 1, 0) : tTime[0])));
		pProfileInfo->SetDeniedExecutionTime(tTime[0].GetTime() % SECONDSPERDAY, tTime[1].GetTime() % SECONDSPERDAY);
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLSPAGE_PROPERTIES_EXECUTION_RANGE_STARTTIME), ((tTime[0] = (tTime[0].GetTime() % SECONDSPERDAY >= tTime[1].GetTime() % SECONDSPERDAY  &&  tTime[1].GetTime() % SECONDSPERDAY > 0) ? max(tTime[1].GetTime() - 1, 0) : tTime[0])));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesToolsOptionsDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryArchivesToolsOptionsDialog, CLocaleDialog)

CTelemetryArchivesToolsOptionsDialog::CTelemetryArchivesToolsOptionsDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryArchivesToolsOptionsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryArchivesToolsOptionsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTelemetryArchivesToolsOptionsDialog::DoModal(CHistoryFileExtractionProfileInfo *pProfileInfo)
{
	INT  nResult;

	for (m_cProfileInfo[0].Copy(pProfileInfo), m_cProfileInfo[1].Copy(pProfileInfo); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		pProfileInfo->Copy(&m_cProfileInfo[0]);
		break;
	}
	return nResult;
}

VOID CTelemetryArchivesToolsOptionsDialog::ShowFormatOptions()
{
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_ASCII) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_BINARY, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_BINARY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_HEXADECIMAL, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_RADIX16) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_DECIMAL, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_RADIX10) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_OCTAL, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_RADIX8) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_BINARY, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_RADIX2) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_8BITS, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_BLOCK8BITS) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_16BITS, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_BLOCK16BITS) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_32BITS, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_BLOCK32BITS) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_64BITS, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_BLOCK64BITS) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_CHARSET_UNICODE, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_UNICODECHARSET) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_NONE, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_NOSEPARATOR) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_CR, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_CRSEPARATOR) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_EOL, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_EOLSEPARATOR) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_CREOL, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_CREOLSEPARATOR) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USESEPARATEFILES, (m_cProfileInfo[0].GetFormatting() & HISTORYFILEEXTRACTION_FORMAT_USESEPARATEFILES) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEPREFIX, (!m_cProfileInfo[0].GetFilePrefix().IsEmpty()) ? IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USESEPARATEFILES) : FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEEXTENSION, (!m_cProfileInfo[0].GetFileExtension().IsEmpty()) ? IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USESEPARATEFILES) : FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_HEXADECIMAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_DECIMAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_OCTAL)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_BINARY)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_8BITS)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_16BITS)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_32BITS)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_64BITS)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_CHARSET_UNICODE)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEPREFIX)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEEXTENSION));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEPREFIX)->SetWindowText(m_cProfileInfo[0].GetFilePrefix());
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEPREFIX)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEPREFIX));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEEXTENSION)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEEXTENSION));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEEXTENSION)->SetWindowText(m_cProfileInfo[0].GetFileExtension());
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEEXTENSION)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEEXTENSION));
}

VOID CTelemetryArchivesToolsOptionsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE)));
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_BINARY, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_HEXADECIMAL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_DECIMAL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_OCTAL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_BINARY, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_8BITS, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_16BITS, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_32BITS, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_64BITS, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_CHARSET_UNICODE, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_NONE, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_CR, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_EOL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_CREOL, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USESEPARATEFILES, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEPREFIX, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEPREFIX, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEEXTENSION, bCheck);
	AccessControl(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEEXTENSION, bCheck);
}

BOOL CTelemetryArchivesToolsOptionsDialog::IsModified() CONST
{
	return !m_cProfileInfo[0].Compare(&m_cProfileInfo[1]);
}

BOOL CTelemetryArchivesToolsOptionsDialog::Check(BOOL bModified) CONST
{
	return(((!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEPREFIX) || GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEPREFIX)->GetWindowTextLength() > 0) && (!IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEEXTENSION) || GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEEXTENSION)->GetWindowTextLength() > 0)) ? (!bModified || IsModified()) : FALSE);
}

void CTelemetryArchivesToolsOptionsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryArchivesToolsOptionsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesToolsOptionsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryArchivesToolsOptionsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII, OnEncodingASCII)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_BINARY, OnEncodingBinary)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_HEXADECIMAL, OnRadixHexadecimal)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_DECIMAL, OnRadixDecimal)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_OCTAL, OnRadixOctal)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_BINARY, OnRadixBinary)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_8BITS, On8BitsBlock)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_16BITS, On16BitsBlock)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_32BITS, On32BitsBlock)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_64BITS, On64BitsBlock)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_CHARSET_UNICODE, OnUnicode)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_NONE, OnNoSeparator)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_CR, OnCRSeparator)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_EOL, OnEOLSeparator)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_CREOL, OnCREOLSeparator)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USESEPARATEFILES, OnUseSeparateFiles)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEPREFIX, OnUseFilePrefix)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEEXTENSION, OnUseFileExtension)
	ON_BN_CLICKED(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEPREFIX, OnEditchangeFilePrefix)
	ON_EN_CHANGE(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEEXTENSION, OnEditchangeFileExtension)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesToolsOptionsDialog message handlers

BOOL CTelemetryArchivesToolsOptionsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_ASCII)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_ENCODING_BINARY)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_NONE)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_CR)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_EOL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_CREOL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USESEPARATEFILES)->EnableWindow();
	ShowFormatOptions();
	AdjustToPrivileges();
	return FALSE;
}

void CTelemetryArchivesToolsOptionsDialog::OnEncodingASCII()
{
	m_cProfileInfo[0].SetFormatting((m_cProfileInfo[0].GetFormatting() & ~(HISTORYFILEEXTRACTION_FORMAT_BINARY | HISTORYFILEEXTRACTION_FORMAT_NOSEPARATOR | HISTORYFILEEXTRACTION_FORMAT_CRSEPARATOR | HISTORYFILEEXTRACTION_FORMAT_EOLSEPARATOR)) | (HISTORYFILEEXTRACTION_FORMAT_ASCII | HISTORYFILEEXTRACTION_FORMAT_RADIX16 | HISTORYFILEEXTRACTION_FORMAT_BLOCK16BITS | HISTORYFILEEXTRACTION_FORMAT_CREOLSEPARATOR));
	CheckRadioButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_HEXADECIMAL, IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_BINARY, IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_HEXADECIMAL);
	CheckRadioButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_8BITS, IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_64BITS, IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_16BITS);
	CheckRadioButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_NONE, IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_CREOL, IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_CREOL);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_CHARSET_UNICODE, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_HEXADECIMAL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_DECIMAL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_OCTAL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_BINARY)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_8BITS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_16BITS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_32BITS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_64BITS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_CHARSET_UNICODE)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnEncodingBinary()
{
	m_cProfileInfo[0].SetFormatting((m_cProfileInfo[0].GetFormatting() & ~(HISTORYFILEEXTRACTION_FORMAT_ASCII | HISTORYFILEEXTRACTION_FORMAT_RADIX2 | HISTORYFILEEXTRACTION_FORMAT_RADIX8 | HISTORYFILEEXTRACTION_FORMAT_RADIX10 | HISTORYFILEEXTRACTION_FORMAT_RADIX16 | HISTORYFILEEXTRACTION_FORMAT_BLOCK8BITS | HISTORYFILEEXTRACTION_FORMAT_BLOCK16BITS | HISTORYFILEEXTRACTION_FORMAT_BLOCK32BITS | HISTORYFILEEXTRACTION_FORMAT_BLOCK64BITS | HISTORYFILEEXTRACTION_FORMAT_UNICODECHARSET | HISTORYFILEEXTRACTION_FORMAT_CRSEPARATOR | HISTORYFILEEXTRACTION_FORMAT_EOLSEPARATOR | HISTORYFILEEXTRACTION_FORMAT_CREOLSEPARATOR)) | HISTORYFILEEXTRACTION_FORMAT_BINARY | HISTORYFILEEXTRACTION_FORMAT_NOSEPARATOR);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_HEXADECIMAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_DECIMAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_OCTAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_BINARY, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_8BITS, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_16BITS, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_32BITS, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_64BITS, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_CHARSET_UNICODE, FALSE);
	CheckRadioButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_NONE, IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_CREOL, IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_SEPARATOR_NONE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_HEXADECIMAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_DECIMAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_OCTAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_RADIX_BINARY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_8BITS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_16BITS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_32BITS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_BLOCKS_64BITS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_CHARSET_UNICODE)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnRadixHexadecimal()
{
	m_cProfileInfo[0].SetFormatting((m_cProfileInfo[0].GetFormatting() & ~(HISTORYFILEEXTRACTION_FORMAT_RADIX2 | HISTORYFILEEXTRACTION_FORMAT_RADIX8 | HISTORYFILEEXTRACTION_FORMAT_RADIX10)) | HISTORYFILEEXTRACTION_FORMAT_RADIX16);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnRadixDecimal()
{
	m_cProfileInfo[0].SetFormatting((m_cProfileInfo[0].GetFormatting() & ~(HISTORYFILEEXTRACTION_FORMAT_RADIX2 | HISTORYFILEEXTRACTION_FORMAT_RADIX8 | HISTORYFILEEXTRACTION_FORMAT_RADIX16)) | HISTORYFILEEXTRACTION_FORMAT_RADIX10);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnRadixOctal()
{
	m_cProfileInfo[0].SetFormatting((m_cProfileInfo[0].GetFormatting() & ~(HISTORYFILEEXTRACTION_FORMAT_RADIX2 | HISTORYFILEEXTRACTION_FORMAT_RADIX10 | HISTORYFILEEXTRACTION_FORMAT_RADIX16)) | HISTORYFILEEXTRACTION_FORMAT_RADIX8);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnRadixBinary()
{
	m_cProfileInfo[0].SetFormatting((m_cProfileInfo[0].GetFormatting() & ~(HISTORYFILEEXTRACTION_FORMAT_RADIX8 | HISTORYFILEEXTRACTION_FORMAT_RADIX10 | HISTORYFILEEXTRACTION_FORMAT_RADIX16)) | HISTORYFILEEXTRACTION_FORMAT_RADIX2);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::On8BitsBlock()
{
	m_cProfileInfo[0].SetFormatting((m_cProfileInfo[0].GetFormatting() & ~(HISTORYFILEEXTRACTION_FORMAT_BLOCK16BITS | HISTORYFILEEXTRACTION_FORMAT_BLOCK32BITS | HISTORYFILEEXTRACTION_FORMAT_BLOCK64BITS)) | HISTORYFILEEXTRACTION_FORMAT_BLOCK8BITS);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::On16BitsBlock()
{
	m_cProfileInfo[0].SetFormatting((m_cProfileInfo[0].GetFormatting() & ~(HISTORYFILEEXTRACTION_FORMAT_BLOCK8BITS | HISTORYFILEEXTRACTION_FORMAT_BLOCK32BITS | HISTORYFILEEXTRACTION_FORMAT_BLOCK64BITS)) | HISTORYFILEEXTRACTION_FORMAT_BLOCK16BITS);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::On32BitsBlock()
{
	m_cProfileInfo[0].SetFormatting((m_cProfileInfo[0].GetFormatting() & ~(HISTORYFILEEXTRACTION_FORMAT_BLOCK8BITS | HISTORYFILEEXTRACTION_FORMAT_BLOCK16BITS | HISTORYFILEEXTRACTION_FORMAT_BLOCK64BITS)) | HISTORYFILEEXTRACTION_FORMAT_BLOCK32BITS);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::On64BitsBlock()
{
	m_cProfileInfo[0].SetFormatting((m_cProfileInfo[0].GetFormatting() & ~(HISTORYFILEEXTRACTION_FORMAT_BLOCK8BITS | HISTORYFILEEXTRACTION_FORMAT_BLOCK16BITS | HISTORYFILEEXTRACTION_FORMAT_BLOCK32BITS)) | HISTORYFILEEXTRACTION_FORMAT_BLOCK64BITS);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnUnicode()
{
	m_cProfileInfo[0].SetFormatting((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FORMAT_CHARSET_UNICODE)) ? (m_cProfileInfo[0].GetFormatting() | HISTORYFILEEXTRACTION_FORMAT_UNICODECHARSET) : (m_cProfileInfo[0].GetFormatting() & ~HISTORYFILEEXTRACTION_FORMAT_UNICODECHARSET));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnNoSeparator()
{
	m_cProfileInfo[0].SetFormatting((m_cProfileInfo[0].GetFormatting() & ~(HISTORYFILEEXTRACTION_FORMAT_CRSEPARATOR | HISTORYFILEEXTRACTION_FORMAT_EOLSEPARATOR | HISTORYFILEEXTRACTION_FORMAT_CREOLSEPARATOR)) | HISTORYFILEEXTRACTION_FORMAT_NOSEPARATOR);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnCRSeparator()
{
	m_cProfileInfo[0].SetFormatting((m_cProfileInfo[0].GetFormatting() & ~(HISTORYFILEEXTRACTION_FORMAT_NOSEPARATOR | HISTORYFILEEXTRACTION_FORMAT_EOLSEPARATOR | HISTORYFILEEXTRACTION_FORMAT_CREOLSEPARATOR)) | HISTORYFILEEXTRACTION_FORMAT_CRSEPARATOR);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnEOLSeparator()
{
	m_cProfileInfo[0].SetFormatting((m_cProfileInfo[0].GetFormatting() & ~(HISTORYFILEEXTRACTION_FORMAT_NOSEPARATOR | HISTORYFILEEXTRACTION_FORMAT_CRSEPARATOR | HISTORYFILEEXTRACTION_FORMAT_CREOLSEPARATOR)) | HISTORYFILEEXTRACTION_FORMAT_EOLSEPARATOR);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnCREOLSeparator()
{
	m_cProfileInfo[0].SetFormatting((m_cProfileInfo[0].GetFormatting() & ~(HISTORYFILEEXTRACTION_FORMAT_NOSEPARATOR | HISTORYFILEEXTRACTION_FORMAT_CRSEPARATOR | HISTORYFILEEXTRACTION_FORMAT_EOLSEPARATOR)) | HISTORYFILEEXTRACTION_FORMAT_CREOLSEPARATOR);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnUseSeparateFiles()
{
	m_cProfileInfo[0].SetFilePrefix(EMPTYSTRING);
	m_cProfileInfo[0].SetFileExtension(EMPTYSTRING);
	m_cProfileInfo[0].SetFormatting((IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USESEPARATEFILES)) ? (m_cProfileInfo[0].GetFormatting() | HISTORYFILEEXTRACTION_FORMAT_USESEPARATEFILES) : (m_cProfileInfo[0].GetFormatting() & ~HISTORYFILEEXTRACTION_FORMAT_USESEPARATEFILES));
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEPREFIX, FALSE);
	CheckDlgButton(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEEXTENSION, FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEPREFIX)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEEXTENSION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEPREFIX)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USESEPARATEFILES));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEEXTENSION)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USESEPARATEFILES));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEPREFIX)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEEXTENSION)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnUseFilePrefix()
{
	m_cProfileInfo[0].SetFilePrefix(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEPREFIX)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEPREFIX)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEPREFIX));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEPREFIX)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnUseFileExtension()
{
	m_cProfileInfo[0].SetFileExtension(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEEXTENSION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEEXTENSION)->EnableWindow(IsDlgButtonChecked(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_USEFILEEXTENSION));
	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEEXTENSION)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnEditchangeFilePrefix()
{
	CString  szFilePrefix;

	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEPREFIX)->GetWindowText(szFilePrefix);
	m_cProfileInfo[0].SetFilePrefix(szFilePrefix);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnEditchangeFileExtension()
{
	CString  szFileExtension;

	GetDlgItem(IDC_TELEMETRYARCHIVES_TOOLS_OPTIONS_FILEEXTENSION)->GetWindowText(szFileExtension);
	m_cProfileInfo[0].SetFileExtension(szFileExtension);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryArchivesToolsOptionsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnOK();
}

BOOL CTelemetryArchivesToolsOptionsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYARCHIVESTOOLSOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryArchivesToolsOptionsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYARCHIVESTOOLSOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesTabCtrl

IMPLEMENT_DYNCREATE(CTelemetryArchivesTabCtrl, CTabCtrl)

CTelemetryArchivesDialog *CTelemetryArchivesTabCtrl::GetParent() CONST
{
	return((CTelemetryArchivesDialog *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTelemetryArchivesTabCtrl)
	ON_WM_KEYDOWN()
	ON_WM_LBUTTONDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesTabCtrl message handlers

void CTelemetryArchivesTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	INT  nIndex;
	INT  nCount;
	CWnd  *pWnd;

	if ((nChar == VK_LEFT  &&  GetCurSel() > 0) || (nChar == VK_RIGHT  &&  GetCurSel() < GetItemCount() - 1))
	{
		for (nIndex = (nChar == VK_LEFT) ? (GetCurSel() - 1) : (GetCurSel() + 1), nCount = GetItemCount(); nIndex >= 0 && nIndex < nCount; )
		{
			if (!GetParent()->CheckPageAccessibility(nIndex))
			{
				if (nChar == VK_RIGHT  &&  nIndex < nCount - 1)
				{
					nIndex++;
					continue;
				}
				if (nChar == VK_LEFT  &&  nIndex > 0)
				{
					nIndex--;
					continue;
				}
				CAudioDevice::AlertBySound();
				return;
			}
			GetParent()->SetActivePage(nIndex);
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}

void CTelemetryArchivesTabCtrl::OnLButtonDown(UINT nFlags, CPoint point)
{
	INT  nIndex;
	INT  nCount;
	CRect  rTab;

	for (nIndex = 0, nCount = GetItemCount(), SetFocus(); nIndex < nCount; nIndex++)
	{
		if (GetItemRect(nIndex, rTab) && rTab.PtInRect(point))
		{
			if (!GetParent()->CheckPageAccessibility(nIndex))
			{
				CAudioDevice::AlertBySound();
				return;
			}
			break;
		}
	}
	CTabCtrl::OnLButtonDown(nFlags, point);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesDialog

IMPLEMENT_DYNCREATE(CTelemetryArchivesDialog, CLocalePropertySheetDialog)

CTelemetryArchivesDialog::CTelemetryArchivesDialog(CWnd *pParentWnd) : CLocalePropertySheetDialog(STRING(IDS_TELEMETRYARCHIVESDIALOG_TITLE), pParentWnd)
{
	AddPage(&m_pageArchivals);
	AddPage(&m_pageRetrievals);
	AddPage(&m_pageBackups);
	AddPage(&m_pageExtractions);
	AddPage(&m_pageTools);
}

BOOL CTelemetryArchivesDialog::Initialize()
{
	CUIntArray  nOptions;
	CStringArray  szDirectories;
	CHistoryStoreFile  cDefaultFile;
	CHistoryStoreFiles  pFiles[2];
	CHistoryStoreOptions  pOptions;
	CArchivesExtractionProfiles  pArchivesProfiles;
	CHistoryFileExtractionProfiles  pHistoryFileProfiles;

	if (GetTMService()->GetTMHistoryFiles(HISTORYFILE_TYPE_ARCHIVE, pFiles[0]) >= 0)
	{
		m_pageArchivals.SetArchiveFiles(pFiles[0], TRUE);
		m_pageBackups.SetArchiveFiles(pFiles[0], TRUE);
	}
	if (GetTMService()->GetTMHistoryFiles(HISTORYFILE_TYPE_RETRIEVE, pFiles[1]) >= 0)
	{
		m_pageRetrievals.SetRetrieveFiles(pFiles[1], TRUE);
		m_pageExtractions.SetRetrieveFiles(pFiles[1]);
	}
	if (GetTMService()->GetDefaultTMHistoryFile(HISTORYFILE_TYPE_RETRIEVE, cDefaultFile)) m_pageRetrievals.SetDefaultRetrieveFile(cDefaultFile, TRUE);
	if (GetTMService()->GetTMHistoryFileExtractionProfiles(pArchivesProfiles)) m_pageExtractions.SetExtractionProfiles(pArchivesProfiles, TRUE);
	if (GetTMService()->GetTMHistoryFileExtractionProfiles(pHistoryFileProfiles)) m_pageTools.SetExtractionProfiles(pHistoryFileProfiles, TRUE);
	if (GetTMService()->GetTMHistoryFilesBrowseOptions(nOptions, szDirectories)) m_pageRetrievals.SetBrowseOptions(nOptions, szDirectories, TRUE);
	if (GetTMService()->GetTMHistoryFilesOptions(pOptions)) m_pageArchivals.SetArchiveOptions(pOptions, TRUE);
	return TRUE;
}

VOID CTelemetryArchivesDialog::SetArchiveFiles(CONST CHistoryStoreFiles &pFiles)
{
	CHistoryStoreFiles  pArchiveFiles;

	pArchiveFiles.Copy(&pFiles);
	m_pageArchivals.SetArchiveFiles(pArchiveFiles);
	m_pageBackups.SetArchiveFiles(pArchiveFiles);
}

VOID CTelemetryArchivesDialog::GetArchiveFiles(CHistoryStoreFiles &pFiles) CONST
{
	CHistoryStoreFiles  pArchiveFiles;

	if (GetActivePage()->GetSafeHwnd() != m_pageBackups.GetSafeHwnd())
	{
		m_pageArchivals.GetArchiveFiles(pArchiveFiles);
		pFiles.Copy(&pArchiveFiles);
		return;
	}
	m_pageBackups.GetArchiveFiles(pArchiveFiles);
	pFiles.Copy(&pArchiveFiles);
}

VOID CTelemetryArchivesDialog::SetArchiveOptions(CONST CHistoryStoreOptions &pOptions)
{
	CHistoryStoreOptions  pArchiveOptions;

	pArchiveOptions.Copy(&pOptions);
	m_pageArchivals.SetArchiveOptions(pArchiveOptions);
}

VOID CTelemetryArchivesDialog::GetArchiveOptions(CHistoryStoreOptions &pOptions) CONST
{
	CHistoryStoreOptions  pArchiveOptions;

	m_pageArchivals.GetArchiveOptions(pArchiveOptions);
	pOptions.Copy(&pArchiveOptions);
}

VOID CTelemetryArchivesDialog::EnumArchiveFilesToDelete(CStringArray &szFiles) CONST
{
	m_pageArchivals.EnumArchiveFilesToDelete(szFiles);
}

VOID CTelemetryArchivesDialog::SetRetrieveFiles(CONST CHistoryStoreFiles &pFiles)
{
	CHistoryStoreFiles  pRetrieveFiles;

	pRetrieveFiles.Copy(&pFiles);
	m_pageRetrievals.SetRetrieveFiles(pRetrieveFiles);
	m_pageExtractions.SetRetrieveFiles(pRetrieveFiles);
}

VOID CTelemetryArchivesDialog::GetRetrieveFiles(CHistoryStoreFiles &pFiles) CONST
{
	CHistoryStoreFiles  pRetrieveFiles;

	m_pageRetrievals.GetRetrieveFiles(pRetrieveFiles);
	pFiles.Copy(&pRetrieveFiles);
}

VOID CTelemetryArchivesDialog::SetDefaultRetrieveFile(CONST CHistoryStoreFile &cFile)
{
	m_pageRetrievals.SetDefaultRetrieveFile(cFile);
}

VOID CTelemetryArchivesDialog::GetDefaultRetrieveFile(CHistoryStoreFile &cFile) CONST
{
	m_pageRetrievals.GetDefaultRetrieveFile(cFile);
}

VOID CTelemetryArchivesDialog::SetBrowseOptions(CONST CUIntArray &nOptions, CONST CStringArray &szDirectories)
{
	m_pageRetrievals.SetBrowseOptions(nOptions, szDirectories);
}

VOID CTelemetryArchivesDialog::GetBrowseOptions(CUIntArray &nOptions, CStringArray &szDirectories) CONST
{
	m_pageRetrievals.GetBrowseOptions(nOptions, szDirectories);
}

VOID CTelemetryArchivesDialog::SetHistoryFileExtractionProfiles(CONST CArchivesExtractionProfiles &pProfiles)
{
	m_pageExtractions.SetExtractionProfiles(pProfiles);
}
VOID CTelemetryArchivesDialog::SetHistoryFileExtractionProfiles(CONST CHistoryFileExtractionProfiles &pProfiles)
{
	m_pageTools.SetExtractionProfiles(pProfiles);
}

VOID CTelemetryArchivesDialog::GetHistoryFileExtractionProfiles(CArchivesExtractionProfiles &pProfiles) CONST
{
	m_pageExtractions.GetExtractionProfiles(pProfiles);
}
VOID CTelemetryArchivesDialog::GetHistoryFileExtractionProfiles(CHistoryFileExtractionProfiles &pProfiles) CONST
{
	m_pageTools.GetExtractionProfiles(pProfiles);
}

BOOL CTelemetryArchivesDialog::CheckPageAccessibility(INT nIndex) CONST
{
	LPVOID  pPage;
	CHistoryStoreFiles  pFiles;

	GetArchiveFiles(pFiles);
	return((nIndex >= 0 && nIndex < m_pages.GetSize()) ? ((((pPage = GetPage(nIndex)) == &m_pageArchivals && (CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESARCHIVALS_CHANGE))) || (pPage == &m_pageRetrievals && (CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESRETRIEVALS_CHANGE))) || (pPage == &m_pageBackups  &&  pFiles.GetSize() > 0 && (CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESBACKUPS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESBACKUPS_CHANGE))) || (pPage == &m_pageExtractions && (CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESEXTRACTIONS_CHANGE))) || (pPage == &m_pageTools && (CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_TELEMETRYARCHIVESTOOLS_CHANGE)))) ? TRUE : FALSE) : FALSE);
}

BEGIN_MESSAGE_MAP(CTelemetryArchivesDialog, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CTelemetryArchivesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDHELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryArchivesDialog message handlers

BOOL CTelemetryArchivesDialog::OnInitDialog()
{
	INT  nIndex;
	INT  nCount;
	CHourglassCursor  cCursor;

	CLocalePropertySheetDialog::OnInitDialog();
	if (m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()))
	{
		for (nIndex = 0, nCount = GetPageCount(); nIndex < nCount; nIndex++)
		{
			if (CheckPageAccessibility(nIndex))
			{
				SetActivePage(nIndex);
				break;
			}
		}
		m_wndTabCtrl.SetFocus();
		return FALSE;
	}
	return TRUE;
}

void CTelemetryArchivesDialog::OnOK()
{
	INT  nFile;
	INT  nFiles;
	CString  szMessage;
	CUIntArray  nOptions;
	CFileFindEx  cFileFind;
	CStringArray  szFiles;
	CStringArray  szDirectories;
	CHistoryStoreFile  *pFile[2];
	CHistoryStoreFile  cDefaultFile;
	CHistoryStoreFile  cHistoryFile;
	CHistoryStoreFiles  pFiles[3];
	CHistoryStoreOptions  pOptions;
	CArchivesExtractionProfiles  pArchivesProfiles;
	CHistoryFileExtractionProfiles  pHistoryFileProfiles;
	CHourglassCursor  cCursor;

	for (GetArchiveFiles(pFiles[0]), GetRetrieveFiles(pFiles[1]), GetDefaultRetrieveFile(cDefaultFile), EnumArchiveFilesToDelete(szFiles); (pFile[0] = pFiles[1].GetAt(pFiles[1].Find(cDefaultFile.GetFileName()))); )
	{
		cDefaultFile.Copy(pFile[0]);
		break;
	}
	for (nFile = 0, nFiles = (GetTMService()->GetTMHistoryFiles(HISTORYFILE_TYPE_ARCHIVE, pFiles[2]) >= 0) ? (INT)pFiles[0].GetSize() : 0; nFile < nFiles; nFile++)
	{
		if ((pFile[0] = ((pFile[1] = pFiles[0].GetAt(nFile))) ? pFiles[2].GetAt(pFiles[2].Find(pFile[1]->GetFileName())) : (CHistoryStoreFile *)NULL))
		{
			if (pFile[0]->GetOptions() & HISTORYSTORE_OPTION_SECONDARY)
			{
				if (cFileFind.FindFile(pFile[0]->GetSecondaryFileName()))
				{
					if (!(pFile[1]->GetOptions() & HISTORYSTORE_OPTION_SECONDARY))
					{
						szMessage.Format(STRING(IDS_TELEMETRYARCHIVES_SECONDARY_DELETE), (LPCTSTR)pFile[0]->GetFileName());
						ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_INFORMATIONAL, szMessage, FALSE);
						CFileEx::Remove(pFile[0]->GetSecondaryFileName());
					}
					cFileFind.Close();
				}
			}
		}
	}
	for (nFile = 0, nFiles = (INT)szFiles.GetSize(), GetHistoryFileExtractionProfiles(pArchivesProfiles), GetHistoryFileExtractionProfiles(pHistoryFileProfiles), GetArchiveOptions(pOptions), GetBrowseOptions(nOptions, szDirectories); nFile < nFiles; nFile++)
	{
		cHistoryFile.Remove(szFiles.GetAt(nFile));
		continue;
	}
	GetTMService()->SetTMHistoryFiles(HISTORYFILE_TYPE_ARCHIVE, pFiles[0]);
	GetTMService()->SetTMHistoryFiles(HISTORYFILE_TYPE_RETRIEVE, pFiles[1]);
	GetTMService()->SetDefaultTMHistoryFile(HISTORYFILE_TYPE_RETRIEVE, cDefaultFile);
	GetTMService()->SetTMHistoryFileExtractionProfiles(pArchivesProfiles);
	GetTMService()->SetTMHistoryFileExtractionProfiles(pHistoryFileProfiles);
	GetTMService()->SetTMHistoryFilesBrowseOptions(nOptions, szDirectories);
	GetTMService()->SetTMHistoryFilesOptions(pOptions);
	CLocalePropertySheetDialog::OnOK();
}

BOOL CTelemetryArchivesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYARCHIVESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryArchivesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYARCHIVESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryParameterSet

CTelemetryParameterSet::CTelemetryParameterSet() : CTMParameters()
{
	return;
}

CTelemetryParameterSet::~CTelemetryParameterSet()
{
	RemoveAll();
}

VOID CTelemetryParameterSet::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CTelemetryParameterSet::GetName() CONST
{
	return m_szName;
}

BOOL CTelemetryParameterSet::Copy(CONST CTelemetryParameterSet *pTMParameterSet)
{
	m_szName = pTMParameterSet->m_szName;
	return CTMParameters::Copy(pTMParameterSet);
}

BOOL CTelemetryParameterSet::Compare(CONST CTelemetryParameterSet *pTMParameterSet) CONST
{
	return((pTMParameterSet->m_szName == m_szName) ? CTMParameters::Compare(pTMParameterSet) : FALSE);
}

BOOL CTelemetryParameterSet::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;
	CByteArray  nParametersData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbParameters = (CTMParameters::Map(nParametersData, (TIMETAG)-1, TRUE)) ? (INT)nParametersData.GetSize() : -1;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + max(sData.cbParameters, 0))); nInfo.GetSize() == sData.cbSize && sData.cbParameters >= 0; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), nParametersData.GetData(), sData.cbParameters);
		return TRUE;
	}
	return FALSE;
}

BOOL CTelemetryParameterSet::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;
	CByteArray  nParametersData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbParameters && sData.cbName > 0 && sData.cbParameters >= 0; )
	{
		for (nParametersData.SetSize(sData.cbParameters), CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(nParametersData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbName), sData.cbParameters); CTMParameters::Unmap(nParametersData, (TIMETAG)-1, TRUE); ) return TRUE;
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryParameterSets

CTelemetryParameterSets::CTelemetryParameterSets() : CPtrArray()
{
	return;
}

CTelemetryParameterSets::~CTelemetryParameterSets()
{
	RemoveAll();
}

INT CTelemetryParameterSets::Add(CTelemetryParameterSet *pTMParameterSet)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pTMParameterSet->GetName(), TRUE)) >= 0) InsertAt(nIndex, pTMParameterSet, 1);
	return nIndex;
}

INT CTelemetryParameterSets::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CTelemetryParameterSet *CTelemetryParameterSets::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTelemetryParameterSet *)CPtrArray::GetAt(nIndex) : (CTelemetryParameterSet *)NULL);
}

CTelemetryParameterSet *CTelemetryParameterSets::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTelemetryParameterSet *)CPtrArray::GetAt(nIndex) : (CTelemetryParameterSet *)NULL);
}

VOID CTelemetryParameterSets::RemoveAll()
{
	INT  nSet;
	INT  nSets;

	for (nSet = 0, nSets = (INT)GetSize(); nSet < nSets; nSet++)
	{
		delete GetAt(nSet);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTelemetryParameterSets::Copy(CONST CTelemetryParameterSets *pTMParameterSets)
{
	INT  nSet;
	INT  nSets;
	CTelemetryParameterSet  *pTMParameterSet;

	for (nSet = 0, nSets = (INT)pTMParameterSets->GetSize(), RemoveAll(); nSet < nSets; nSet++)
	{
		if ((pTMParameterSet = new CTelemetryParameterSet))
		{
			pTMParameterSet->Copy(pTMParameterSets->GetAt(nSet));
			InsertAt(nSet, pTMParameterSet, 1);
			continue;
		}
		break;
	}
	return((nSet == nSets) ? TRUE : FALSE);
}

BOOL CTelemetryParameterSets::Compare(CONST CTelemetryParameterSets *pTMParameterSets) CONST
{
	INT  nSet;
	INT  nSets;

	for (nSet = 0, nSets = (pTMParameterSets->GetSize() == GetSize()) ? (INT)GetSize() : -1; nSet < nSets; nSet++)
	{
		if (!pTMParameterSets->GetAt(nSet)->Compare(GetAt(nSet))) break;
		continue;
	}
	return((nSet == nSets) ? TRUE : FALSE);
}

BOOL CTelemetryParameterSets::Map(CByteArray &nInfo) CONST
{
	INT  nSet;
	INT  nSets;
	CByteArray  nParameterSetsData;
	CTelemetryParameterSet  *pTMParameterSet;

	for (nSet = 0, nSets = (INT)GetSize(), nInfo.RemoveAll(); nSet < nSets; nSet++)
	{
		if ((pTMParameterSet = GetAt(nSet)) && pTMParameterSet->Map(nParameterSetsData) && nInfo.Append(nParameterSetsData) >= 0) continue;
		break;
	}
	return((nSet == nSets) ? TRUE : FALSE);
}

BOOL CTelemetryParameterSets::Unmap(CONST CByteArray &nInfo)
{
	INT  cbSet;
	INT  cbSets;
	CByteArray  nParameterSetsData;
	CTelemetryParameterSet  *pTMParameterSet;

	for (cbSets = 0, RemoveAll(); cbSets < nInfo.GetSize(); cbSets += cbSet)
	{
		for (CopyMemory(&cbSet, nInfo.GetData() + cbSets, sizeof(cbSet)), nParameterSetsData.SetSize(max(min(cbSet, nInfo.GetSize() - cbSets), 0)); nParameterSetsData.GetSize() >= 0; )
		{
			CopyMemory(nParameterSetsData.GetData(), nInfo.GetData() + cbSets, nParameterSetsData.GetSize());
			break;
		}
		if ((pTMParameterSet = new CTelemetryParameterSet))
		{
			if (pTMParameterSet->Unmap(nParameterSetsData))
			{
				InsertAt(GetSize(), pTMParameterSet, 1);
				continue;
			}
			delete pTMParameterSet;
		}
		break;
	}
	return((cbSets == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CTelemetryParameterSets::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CTelemetryParameterSet  *pTMParameterSet;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pTMParameterSet = GetAt(nIndex[0]))) ? ((nIndex[1] = (pTMParameterSet->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pTMParameterSet = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pTMParameterSet->GetName() == pszName) || (bInsert && (((pTMParameterSet = GetAt(max(nIndex[0] - 1, 0))) && pTMParameterSet->GetName() != pszName && (pTMParameterSet = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pTMParameterSet->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersCharacteristicsPage property page

IMPLEMENT_DYNCREATE(CTelemetryParametersCharacteristicsPage, CLocalePropertyPage)

CTelemetryParametersCharacteristicsPage::CTelemetryParametersCharacteristicsPage() : CLocalePropertyPage(CTelemetryParametersCharacteristicsPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryParametersCharacteristicsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryParametersCharacteristicsPage::ShowParameterInfo()
{
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_RAW, FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_NUMERICAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_STATUS, FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_NORMAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_DERIVED, FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_CONSTANT, FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_BITPATTERN, FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_SIGNEDINTEGER, FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_UNSIGNEDINTEGER, FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_COMPLEMENTCOMPLEX, FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_FLOATINGPOINT, FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_BINARY, FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_OCTAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_DECIMAL, FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_HEXADECIMAL, FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_SUBTTYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_UNITS)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_SUBTTYPE_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_SUBTTYPE)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH_BITS)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH_BIT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_UNITS_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_UNITS)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_RAW)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_NUMERICAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_STATUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_SUBTTYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_SUBTTYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH_BITS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_NORMAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_DERIVED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_CONSTANT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_BITPATTERN)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_SIGNEDINTEGER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_UNSIGNEDINTEGER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_COMPLEMENTCOMPLEX)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_FLOATINGPOINT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_BINARY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_OCTAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_DECIMAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_HEXADECIMAL)->EnableWindow(FALSE);
}
VOID CTelemetryParametersCharacteristicsPage::ShowParameterInfo(CONST CDatabaseTMParameter *pDatabaseTMParameter)
{
	CString  szSubType;
	ULONGLONG  nAttributes;
	CStringTools  cStringTools;

	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_RAW, (((nAttributes = pDatabaseTMParameter->GetAttributes()) & TMPARAMETER_CALIBRATION_NONE) || (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) == 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_NUMERICAL, (nAttributes & TMPARAMETER_CALIBRATION_NUMERICAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_STATUS, (nAttributes & TMPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_NORMAL, (nAttributes & TMPARAMETER_NATURE_RAW) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_DERIVED, (nAttributes & (TMPARAMETER_NATURE_DERIVED | TMPARAMETER_NATURE_DERIVED_OL | TMPARAMETER_NATURE_DERIVED_SPEL | TMPARAMETER_NATURE_DERIVED_HARDCODED | TMPARAMETER_NATURE_DERIVED_SAVED)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_CONSTANT, (nAttributes & TMPARAMETER_NATURE_CONSTANT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_BITPATTERN, (nAttributes & TMPARAMETER_CODING_BITPATTERN) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_SIGNEDINTEGER, (nAttributes & TMPARAMETER_CODING_SIGNEDINTEGER) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_UNSIGNEDINTEGER, (nAttributes & TMPARAMETER_CODING_UNSIGNEDINTEGER) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_COMPLEMENTCOMPLEX, (nAttributes & TMPARAMETER_CODING_COMPLEMENTCOMPLEX) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_FLOATINGPOINT, (nAttributes & TMPARAMETER_CODING_FLOATINGPOINT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_BINARY, (((nAttributes & (TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) == 0 && (nAttributes & TMPARAMETER_CODING_BITPATTERN)) || (nAttributes & TMPARAMETER_RADIX_BINARY)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_OCTAL, (nAttributes & TMPARAMETER_RADIX_OCTAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_DECIMAL, (((nAttributes & (TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) == 0 && (nAttributes & TMPARAMETER_CODING_BITPATTERN) == 0) || (nAttributes & TMPARAMETER_RADIX_DECIMAL)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_HEXADECIMAL, (nAttributes & TMPARAMETER_RADIX_HEXADECIMAL) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_SUBTTYPE)->SetWindowText((szSubType = GetDatabase()->TranslateTMParameterType(nAttributes, FALSE)));
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH)->SetWindowText(cStringTools.ConvertIntToString(pDatabaseTMParameter->GetWidth()));
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_UNITS)->SetWindowText(pDatabaseTMParameter->GetUnit());
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_SUBTTYPE_STATIC)->ShowWindow((!szSubType.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_SUBTTYPE)->ShowWindow((!szSubType.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH_STATIC)->ShowWindow(SW_SHOW);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH)->ShowWindow(SW_SHOW);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH_BITS)->ShowWindow((pDatabaseTMParameter->GetWidth() > 1) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH_BIT)->ShowWindow((pDatabaseTMParameter->GetWidth() == 1) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_UNITS_STATIC)->ShowWindow((!pDatabaseTMParameter->GetUnit().IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_UNITS)->ShowWindow((!pDatabaseTMParameter->GetUnit().IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_RAW)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_NUMERICAL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_STATUS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_SUBTTYPE_STATIC)->EnableWindow((!szSubType.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_SUBTTYPE)->EnableWindow((!szSubType.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH_BITS)->EnableWindow((pDatabaseTMParameter->GetWidth() > 1) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_WIDTH_BIT)->EnableWindow((pDatabaseTMParameter->GetWidth() == 1) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_UNITS_STATIC)->EnableWindow(!pDatabaseTMParameter->GetUnit().IsEmpty());
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_UNITS)->EnableWindow(!pDatabaseTMParameter->GetUnit().IsEmpty());
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_NORMAL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_DERIVED)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_CONSTANT)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_BITPATTERN)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_SIGNEDINTEGER)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_UNSIGNEDINTEGER)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_COMPLEMENTCOMPLEX)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_FLOATINGPOINT)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_BINARY)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_OCTAL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_DECIMAL)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_HEXADECIMAL)->EnableWindow();
}

BOOL CTelemetryParametersCharacteristicsPage::HasParameterInfo() CONST
{
	return TRUE;
}

CTelemetryParametersFolder *CTelemetryParametersCharacteristicsPage::GetParent() CONST
{
	return((CTelemetryParametersFolder *)CLocalePropertyPage::GetParent());
}

void CTelemetryParametersCharacteristicsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryParametersCharacteristicsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelemetryParametersCharacteristicsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryParametersCharacteristicsPage)
	// NOTE: the ClassWizard will add message map macros here
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersCharacteristicsPage message handlers

BOOL CTelemetryParametersCharacteristicsPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	AccessControl(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_RAW, FALSE);
	AccessControl(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_NUMERICAL, FALSE);
	AccessControl(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_TYPE_STATUS, FALSE);
	AccessControl(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_NORMAL, FALSE);
	AccessControl(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_DERIVED, FALSE);
	AccessControl(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_NATURE_CONSTANT, FALSE);
	AccessControl(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_BITPATTERN, FALSE);
	AccessControl(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_SIGNEDINTEGER, FALSE);
	AccessControl(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_UNSIGNEDINTEGER, FALSE);
	AccessControl(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_COMPLEMENTCOMPLEX, FALSE);
	AccessControl(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_CODING_FLOATINGPOINT, FALSE);
	AccessControl(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_BINARY, FALSE);
	AccessControl(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_OCTAL, FALSE);
	AccessControl(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_DECIMAL, FALSE);
	AccessControl(IDC_TELEMETRYPARAMETERS_CHARACTERISTICSPAGE_RADIX_HEXADECIMAL, FALSE);
	return TRUE;
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersCalibrationPage property page

IMPLEMENT_DYNCREATE(CTelemetryParametersCalibrationPage, CLocalePropertyPage)

CTelemetryParametersCalibrationPage::CTelemetryParametersCalibrationPage() : CLocalePropertyPage(CTelemetryParametersCalibrationPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryParametersCalibrationPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryParametersCalibrationPage::ShowParameterInfo()
{
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_INTERPRETATION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_STATUS)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_INTERPRETATION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_INTERPRETATION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_STATUS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_STATUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow(FALSE);
}
VOID CTelemetryParametersCalibrationPage::ShowParameterInfo(CONST CDatabaseTMParameter *pDatabaseTMParameter, CONST CTMParameter *pTMParameter)
{
	INT  nIndex;
	INT  nTable;
	INT  nTables;
	UINT  nStatus;
	CString  szName;
	CString  szTable;
	ULONGLONG  nValue;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;

	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE, CB_RESETCONTENT);
	for (nTable = 0, nTables = pDatabaseTMParameter->GetCalTableRefs(m_nCalTableRefs, m_nCalValidityRefs), szTable = (pTMParameter->GetRawValue(0, nValue, nStatus, szTable)) ? szTable : EMPTYSTRING, nIndex = -1; nTable < nTables; nTable++)
	{
		if ((m_nCalTableType = (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS))) == TMPARAMETER_CALIBRATION_NUMERICAL)
		{
			if ((pDatabaseTMNumCalTable = GetDatabase()->GetTMNumCalTables()->GetAt(m_nCalTableRefs.GetAt(nTable))) != (CDatabaseTMNumCalTable *)NULL)
			{
				for (szName.Format(STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTMNumCalTable->GetDescription(), (LPCTSTR)pDatabaseTMNumCalTable->GetName()); pDatabaseTMNumCalTable->GetDescription().IsEmpty(); )
				{
					szName = pDatabaseTMNumCalTable->GetName();
					break;
				}
				for (SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName); pDatabaseTMNumCalTable->GetName() == szTable; )
				{
					nIndex = nTable;
					break;
				}
				continue;
			}
		}
		if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS)
		{
			if ((pDatabaseTMTxtCalTable = GetDatabase()->GetTMTxtCalTables()->GetAt(m_nCalTableRefs.GetAt(nTable))))
			{
				for (szName.Format(STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTMTxtCalTable->GetDescription(), (LPCTSTR)pDatabaseTMTxtCalTable->GetName()); pDatabaseTMTxtCalTable->GetDescription().IsEmpty(); )
				{
					szName = pDatabaseTMTxtCalTable->GetName();
					break;
				}
				for (SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName); pDatabaseTMTxtCalTable->GetName() == szTable; )
				{
					nIndex = nTable;
					break;
				}
				continue;
			}
		}
	}
	m_nCalTableID = (INT)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE, CB_SETCURSEL, max(nIndex, 0));
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_INTERPRETATION)->SetWindowText((GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE)->GetWindowTextLength() > 0) ? ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_INTERPRETATION_FULL) ? STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_INTERPRETATION_FULL) : STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_INTERPRETATION_EXTRAPOLATE)) : EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_INTERPRETATION_STATIC)->EnableWindow((GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_INTERPRETATION)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_INTERPRETATION)->EnableWindow((GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_INTERPRETATION)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	ShowCalibrationInfo();
}

VOID CTelemetryParametersCalibrationPage::ShowCalibrationInfo()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	double  fPtX;
	double  fPtY;
	CString  szPtX;
	CString  szPtY;
	CString  szItem;
	CString  szText;
	CStringTools  cStringTools;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMNumCalPoint  *pDatabaseTMNumCalPoint;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;

	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE, CB_GETCURSEL)) >= 0 && nIndex < m_nCalTableRefs.GetSize())
	{
		if ((pDatabaseTMNumCalTable = (m_nCalTableType == TMPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTMNumCalTables()->GetAt(m_nCalTableRefs.GetAt(nIndex)) : (CDatabaseTMNumCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTMNumCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTMNumCalPoint = pDatabaseTMNumCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							szItem = cStringTools.ConvertFloatToTruncatedString(pDatabaseTMNumCalPoint->GetX());
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = cStringTools.ConvertFloatToString(pDatabaseTMNumCalPoint->GetY());
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			Listview_SetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS), 0);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTMNumCalTable->GetName());
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TYPE_NUMERICAL));
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_STATUS)->SetWindowText((nIndex == m_nCalTableID) ? STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_STATUS_ACTIVE) : STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_STATUS_INACTIVE));
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_STATUS_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_STATUS)->EnableWindow();
			return;
		}
		if ((pDatabaseTMTxtCalTable = (m_nCalTableType == TMPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTMTxtCalTables()->GetAt(m_nCalTableRefs.GetAt(nIndex)) : (CDatabaseTMTxtCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTMTxtCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							if (pDatabaseTMTxtCalPoint->GetRange(fPtX, fPtY, szText) || pDatabaseTMTxtCalPoint->GetPoint(fPtX, szText))
							{
								for (szPtX = szItem = cStringTools.ConvertFloatToTruncatedString(fPtX, -1), szPtY = cStringTools.ConvertFloatToTruncatedString(fPtY, -1); fPtX != fPtY; )
								{
									szItem.Format(STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINT_RANGE), (LPCTSTR)szPtX, (LPCTSTR)szPtY);
									break;
								}
								break;
							}
							szItem.Empty();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = (pDatabaseTMTxtCalPoint->GetPoint(fPtX, szText) || pDatabaseTMTxtCalPoint->GetRange(fPtX, fPtY, szText)) ? (LPCTSTR)szText : EMPTYSTRING;
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			Listview_SetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS), 0);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTMTxtCalTable->GetName());
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TYPE_STATUS));
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_STATUS)->SetWindowText((nIndex == m_nCalTableID) ? STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_STATUS_ACTIVE) : STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_STATUS_INACTIVE));
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_STATUS_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_STATUS)->EnableWindow();
			return;
		}
	}
	ShowParameterInfo();
}

BOOL CTelemetryParametersCalibrationPage::HasParameterInfo() CONST
{
	return((GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

CTelemetryParametersFolder *CTelemetryParametersCalibrationPage::GetParent() CONST
{
	return((CTelemetryParametersFolder *)CLocalePropertyPage::GetParent());
}

void CTelemetryParametersCalibrationPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryParametersCalibrationPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryParametersCalibrationPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_nCalTableRefs.RemoveAll();
	m_nCalValidityRefs.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryParametersCalibrationPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryParametersCalibrationPage)
	ON_CBN_SELCHANGE(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TABLE, OnSelchangeTable)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersCalibrationPage message handlers

BOOL CTelemetryParametersCalibrationPage::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y));
	GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), rColumns.DeflateRect(0, 0, GetSystemMetrics(SM_CXVSCROLL), 0), nWidth = rColumns.Width() / 7; nColumn < nColumns; nWidth = (++nColumn == 1) ? (5 * (rColumns.Width()) / 14) : (rColumns.Width() / 2))
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELEMETRYPARAMETERS_CALIBRATIONPAGE_POINTS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	return TRUE;
}

void CTelemetryParametersCalibrationPage::OnSelchangeTable()
{
	ShowCalibrationInfo();
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersLimitsPage property page

IMPLEMENT_DYNCREATE(CTelemetryParametersLimitsPage, CLocalePropertyPage)

CTelemetryParametersLimitsPage::CTelemetryParametersLimitsPage() : CLocalePropertyPage(CTelemetryParametersLimitsPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryParametersLimitsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryParametersLimitsPage::ShowParameterInfo()
{
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TABLE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_ID)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_STATUS)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TABLE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TABLE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_ID_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_ID)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_STATUS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_STATUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS)->EnableWindow(FALSE);
}
VOID CTelemetryParametersLimitsPage::ShowParameterInfo(CONST CDatabaseTMParameter *pDatabaseTMParameter, CONST CTMParameter *pTMParameter)
{
	INT  nTable;
	INT  nTables;
	WORD  wTable;
	WORD  wLimit;
	CString  szUnit;
	CTimeTag  tUnit;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;

	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TABLE, CB_RESETCONTENT);
	for (nTable = 0, nTables = pDatabaseTMParameter->GetOolTableRefs(m_nOolTableRefs, m_nOolValidityRefs); nTable < nTables; nTable++)
	{
		if ((m_nOolTableType = (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS))) != TMPARAMETER_CALIBRATION_STATUS)
		{
			if ((pDatabaseTMNumOolTable = GetDatabase()->GetTMNumOolTables()->GetAt(m_nOolTableRefs.GetAt(nTable))))
			{
				SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TABLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTMNumOolTable->GetName());
				continue;
			}
		}
		if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS)
		{
			if ((pDatabaseTMTxtOolTable = GetDatabase()->GetTMTxtOolTables()->GetAt(m_nOolTableRefs.GetAt(nTable))))
			{
				SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TABLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTMTxtOolTable->GetName());
				continue;
			}
		}
	}
	if (pTMParameter->GetOolInfo(szUnit, tUnit, wTable, wLimit) && SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TABLE, CB_SETCURSEL, wTable) == wTable)
	{
		m_nOolTableID = wTable;
		m_wOolLimitID = wLimit;
	}
	else
	{
		SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TABLE, CB_SETCURSEL);
		m_nOolTableID = 0;
		m_wOolLimitID = -1;
	}
	GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TABLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TABLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TABLE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TABLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	ShowLimitsInfo();
}

VOID CTelemetryParametersLimitsPage::ShowLimitsInfo()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	UINT  nOolType;
	double  fLimitRange[2];
	CString  szItem;
	CString  szTable;
	CString  szLimitDelta;
	CString  szLimitRange[2];
	CStringTools  cStringTools;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMNumOolLimit  *pDatabaseTMNumOolLimit;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;
	CDatabaseTMTxtOolLimit  *pDatabaseTMTxtOolLimit;

	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS, LVM_DELETEALLITEMS);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TABLE, CB_GETCURSEL)) >= 0 && nIndex < m_nOolTableRefs.GetSize())
	{
		if ((pDatabaseTMNumOolTable = (m_nOolTableType == TMPARAMETER_CALIBRATION_NONE || m_nOolTableType == TMPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTMNumOolTables()->GetAt(m_nOolTableRefs.GetAt(nIndex)) : (CDatabaseTMNumOolTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTMNumOolTable->GetSize(), szTable = cStringTools.ConvertUIntToPaddedString(m_nOolTableRefs.GetAt(nIndex), (INT)ceil(log10((double)GetDatabase()->GetTMNumOolTables()->GetSize()))), nCount = 0; nItem < nItems; nItem++)
			{
				if ((pDatabaseTMNumOolLimit = pDatabaseTMNumOolTable->GetAt(nItem)) && pDatabaseTMNumOolLimit->GetType() != TMOOLLIMIT_TYPE_STATUSCONSISTENCY  &&  pDatabaseTMNumOolLimit->GetType() != TMOOLLIMIT_TYPE_EVENT)
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (szItem.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_TITLEITEM_NUMBER); )
						{
							szItem = (nItem == m_wOolLimitID) ? (cStringTools.ConvertIntToString(nCount + 1) + STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_LIMIT_FLAG)) : cStringTools.ConvertIntToString(nCount + 1);
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_TITLEITEM_LIMIT))
						{
							for (; pDatabaseTMNumOolLimit->GetRange(nOolType, fLimitRange[0], fLimitRange[1]); )
							{
								if (!(pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_FLOATINGPOINT) && (pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW))
								{
									if (pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_SIGNEDINTEGER)
									{
										szLimitRange[0] = cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[0]);
										szLimitRange[1] = cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[1]);
									}
									else
									{
										szLimitRange[0] = cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[0]);
										szLimitRange[1] = cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[1]);
									}
								}
								else
								{
									szLimitRange[0] = cStringTools.ConvertFloatToString(fLimitRange[0]);
									szLimitRange[1] = cStringTools.ConvertFloatToString(fLimitRange[1]);
								}
								szItem.Format(STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_LIMIT_RANGE), (LPCTSTR)szLimitRange[0], (LPCTSTR)szLimitRange[1]);
								break;
							}
							for (; pDatabaseTMNumOolLimit->GetType() == TMOOLLIMIT_TYPE_DELTA; )
							{
								if (pDatabaseTMNumOolLimit->GetDelta(fLimitRange[0], TRUE) && pDatabaseTMNumOolLimit->GetDelta(fLimitRange[1], FALSE))
								{
									szLimitDelta.Format(STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_DELTA_MINMAX_FORMAT), (pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) ? ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_UNSIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[0]) : ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_SIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[0]) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[0]))) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[0]), (pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) ? ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_UNSIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[1]) : ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_SIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[1]) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[1]))) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[1]));
									szItem = szLimitDelta;
									break;
								}
								if (pDatabaseTMNumOolLimit->GetDelta(fLimitRange[0], TRUE))
								{
									szLimitDelta.Format(STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_DELTA_MIN_FORMAT), (pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) ? ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_UNSIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[0]) : ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_SIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[0]) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[0]))) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[0]));
									szItem = szLimitDelta;
									break;
								}
								if (pDatabaseTMNumOolLimit->GetDelta(fLimitRange[1], FALSE))
								{
									szLimitDelta.Format(STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_DELTA_MAX_FORMAT), (pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) ? ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_UNSIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[1]) : ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_SIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[1]) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[1]))) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[1]));
									szItem = szLimitDelta;
								}
								break;
							}
							if (!szItem.IsEmpty())
							{
								szItem += (nOolType == TMOOLLIMIT_TYPE_HARD) ? STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_LIMIT_HARD) : EMPTYSTRING;
								szItem += (nOolType == TMOOLLIMIT_TYPE_SOFT) ? STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_LIMIT_SOFT) : EMPTYSTRING;
								szItem += (nOolType == TMOOLLIMIT_TYPE_DELTA) ? STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_LIMIT_DELTA) : EMPTYSTRING;
							}
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS), nCount, szItem);
							nCount++;
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS), nCount - 1, nColumn, szItem);
					}
				}
			}
			Listview_SetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS), 0);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_ID)->SetWindowText(szTable);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TYPE)->SetWindowText(STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_TYPE_NUMERICAL));
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_STATUS)->SetWindowText((nIndex == m_nOolTableID) ? STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_STATUS_ACTIVE) : STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_STATUS_INACTIVE));
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_ID)->EnableWindow((GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TYPE)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_STATUS_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_STATUS)->EnableWindow();
			return;
		}
		if ((pDatabaseTMTxtOolTable = (m_nOolTableType == TMPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTMTxtOolTables()->GetAt(m_nOolTableRefs.GetAt(nIndex)) : (CDatabaseTMTxtOolTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTMTxtOolTable->GetSize(), szTable = cStringTools.ConvertUIntToPaddedString(m_nOolTableRefs.GetAt(nIndex), (INT)ceil(log10((double)GetDatabase()->GetTMTxtOolTables()->GetSize()))); nItem < nItems; nItem++)
			{
				if ((pDatabaseTMTxtOolLimit = pDatabaseTMTxtOolTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (szItem.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_TITLEITEM_NUMBER); )
						{
							szItem = (nItem == m_wOolLimitID) ? (cStringTools.ConvertIntToString(nItem + 1) + STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_LIMIT_FLAG)) : cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_TITLEITEM_LIMIT))
						{
							if (pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW)
							{
								if (pDatabaseTMTxtOolLimit->GetLimit(fLimitRange[0]))
								{
									szLimitRange[0] = (pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CODING_FLOATINGPOINT) ? cStringTools.ConvertFloatToString(fLimitRange[0]) : EMPTYSTRING;
									szLimitRange[0] = (pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CODING_SIGNEDINTEGER) ? cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[0]) : szLimitRange[0];
									szLimitRange[0] = (szLimitRange[0].IsEmpty()) ? cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[0]) : szLimitRange[0];
									szItem = szLimitRange[0];
								}
								else
								{
									if (pDatabaseTMTxtOolLimit->GetRange(fLimitRange[0], fLimitRange[1]))
									{
										if (!(pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CODING_FLOATINGPOINT))
										{
											if (pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CODING_SIGNEDINTEGER)
											{
												szLimitRange[0] = cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[0]);
												szLimitRange[1] = cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[1]);
											}
											else
											{
												szLimitRange[0] = cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[0]);
												szLimitRange[1] = cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[1]);
											}
										}
										else
										{
											szLimitRange[0] = cStringTools.ConvertFloatToString(fLimitRange[0]);
											szLimitRange[1] = cStringTools.ConvertFloatToString(fLimitRange[1]);
										}
										szItem.Format(STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_LIMIT_RANGE), (LPCTSTR)szLimitRange[0], (LPCTSTR)szLimitRange[1]);
									}
								}
							}
							for (; pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_CALIBRATED; )
							{
								if (pDatabaseTMTxtOolLimit->GetLimit(szLimitRange[0]) || (pDatabaseTMTxtOolLimit->GetRange(szLimitRange[0], szLimitRange[1]) && szLimitRange[0] == szLimitRange[1]))
								{
									szItem = szLimitRange[0];
									break;
								}
								szItem.Format(STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_LIMIT_RANGE), (LPCTSTR)szLimitRange[0], (LPCTSTR)szLimitRange[1]);
								break;
							}
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			Listview_SetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS), 0);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_ID)->SetWindowText(szTable);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TYPE)->SetWindowText(STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_TYPE_STATUS));
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_STATUS)->SetWindowText((nIndex == m_nOolTableID) ? STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_STATUS_ACTIVE) : STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_STATUS_INACTIVE));
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_ID)->EnableWindow((GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TYPE)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_STATUS_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_STATUS)->EnableWindow();
			return;
		}
	}
	ShowParameterInfo();
}

BOOL CTelemetryParametersLimitsPage::HasParameterInfo() CONST
{
	return((GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TABLE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

CTelemetryParametersFolder *CTelemetryParametersLimitsPage::GetParent() CONST
{
	return((CTelemetryParametersFolder *)CLocalePropertyPage::GetParent());
}

void CTelemetryParametersLimitsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryParametersLimitsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryParametersLimitsPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_nOolTableRefs.RemoveAll();
	m_nOolValidityRefs.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryParametersLimitsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryParametersLimitsPage)
	ON_CBN_SELCHANGE(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_TABLE, OnSelchangeTable)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersLimitsPage message handlers

BOOL CTelemetryParametersLimitsPage::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_TITLEITEM_NUMBER));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERS_LIMITSPAGE_TITLEITEM_LIMIT));
	GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), rColumns.DeflateRect(0, 0, GetSystemMetrics(SM_CXVSCROLL), 0), nWidth = rColumns.Width() / 7; nColumn < nColumns; nWidth = (++nColumn < nColumns) ? ((6 * rColumns.Width()) / 7) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELEMETRYPARAMETERS_LIMITSPAGE_POINTS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	return TRUE;
}

void CTelemetryParametersLimitsPage::OnSelchangeTable()
{
	ShowLimitsInfo();
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersDerivationPage property page

IMPLEMENT_DYNCREATE(CTelemetryParametersDerivationPage, CLocalePropertyPage)

CTelemetryParametersDerivationPage::CTelemetryParametersDerivationPage() : CLocalePropertyPage(CTelemetryParametersDerivationPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryParametersDerivationPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryParametersDerivationPage::ShowParameterInfo()
{
	GetDlgItem(IDC_TELEMETRYPARAMETERS_DERIVATIONPAGE_CODE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_DERIVATIONPAGE_CODE)->EnableWindow(FALSE);
}
VOID CTelemetryParametersDerivationPage::ShowParameterInfo(CONST CDatabaseTMParameter *pDatabaseTMParameter)
{
	CString  szCode;

	GetDlgItem(IDC_TELEMETRYPARAMETERS_DERIVATIONPAGE_CODE)->SetWindowText((szCode = LoadParameterDerivationCode(pDatabaseTMParameter)));
	GetDlgItem(IDC_TELEMETRYPARAMETERS_DERIVATIONPAGE_CODE)->EnableWindow(!szCode.IsEmpty());
}

BOOL CTelemetryParametersDerivationPage::HasParameterInfo() CONST
{
	return((GetDlgItem(IDC_TELEMETRYPARAMETERS_DERIVATIONPAGE_CODE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

CString CTelemetryParametersDerivationPage::LoadParameterDerivationCode(CONST CDatabaseTMParameter *pDatabaseTMParameter) CONST
{
	CString  szCode;

	return((pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_NATURE_DERIVED_HARDCODED | TMPARAMETER_NATURE_DERIVED_SPEL)) ? ((GetDatabase()->LoadTMParameterDerivationCodeFromFile(pDatabaseTMParameter, szCode)) ? szCode : EMPTYSTRING) : pDatabaseTMParameter->GetDerivationExpression());
}

CTelemetryParametersFolder *CTelemetryParametersDerivationPage::GetParent() CONST
{
	return((CTelemetryParametersFolder *)CLocalePropertyPage::GetParent());
}

void CTelemetryParametersDerivationPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryParametersDerivationPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryParametersDerivationPage::PostNcDestroy()
{
	m_cCodeFont.DeleteObject();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryParametersDerivationPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryParametersDerivationPage)
	ON_WM_CREATE()
	ON_EN_SETFOCUS(IDC_TELEMETRYPARAMETERS_DERIVATIONPAGE_CODE, OnFocus)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersDerivationPage message handlers

int CTelemetryParametersDerivationPage::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	CFontTools  cFontTools(&m_cCodeFont);

	return CLocalePropertyPage::OnCreate(lpCreateStruct);
}

BOOL CTelemetryParametersDerivationPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_DERIVATIONPAGE_CODE)->SetFont(&m_cCodeFont);
	return TRUE;
}

void CTelemetryParametersDerivationPage::OnFocus()
{
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_DERIVATIONPAGE_CODE, EM_SETSEL);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersAllocationsPage property page

IMPLEMENT_DYNCREATE(CTelemetryParametersAllocationsPage, CLocalePropertyPage)

CTelemetryParametersAllocationsPage::CTelemetryParametersAllocationsPage() : CLocalePropertyPage(CTelemetryParametersAllocationsPage::IDD)
{
	//{{AFX_DATA_INIT(CTelemetryParametersAllocationsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelemetryParametersAllocationsPage::ShowParameterInfo()
{
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_LOCATIONS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_TYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_COMMENT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_TYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_TYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_COMMENT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_LOCATIONS)->EnableWindow(FALSE);
}
VOID CTelemetryParametersAllocationsPage::ShowParameterInfo(CONST CDatabaseTMParameter *pDatabaseTMParameter)
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTMPacketParameter  *pDatabaseTMPacketParameter;

	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_LOCATIONS, LVM_DELETEALLITEMS);
	for (nItem = 0, nItems = (INT)GetDatabase()->GetTMPackets()->GetSize(), nCount = 0; nItem <= nItems; nItem++)
	{
		if ((pDatabaseTMPacket = (nItem < nItems) ? GetDatabase()->GetTMPackets()->GetAt(nItem) : GetDatabase()->GetTMPacketSubTags()))
		{
			if ((pDatabaseTMPacketParameter = pDatabaseTMPacket->GetAt(pDatabaseTMPacket->Find(pDatabaseTMParameter->GetTag()))))
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_TITLEITEM_LOCATION); )
					{
						szItem.Format(STRING(IDS_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_LOCATIONFORMAT), (LPCTSTR)pDatabaseTMPacket->GetDescription(), (LPCTSTR)pDatabaseTMPacket->GetTag());
						szItem = (nItem < nItems) ? szItem : STRING(IDS_TMUNIT_SUBCHANNEL);
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_TITLEITEM_POSITION); )
					{
						szItem.Format(STRING(IDS_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_POSITIONFORMAT), pDatabaseTMPacketParameter->GetBytePos(), pDatabaseTMPacketParameter->GetBitPos(), pDatabaseTMPacketParameter->GetWidth());
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_LOCATIONS), nCount, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_LOCATIONS), nCount, nColumn, szItem);
				}
				nCount++;
			}
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_LOCATIONS), 0);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_TYPE)->SetWindowText((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_RAW) ? STRING(IDS_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_TYPE_STREAMPARAMETER) : STRING(IDS_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_TYPE_ARTIFICIALPARAMETER));
	GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_COMMENT)->ShowWindow(((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_RAW) != TMPARAMETER_NATURE_RAW) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_COMMENT)->EnableWindow(((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_RAW) != TMPARAMETER_NATURE_RAW) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_LOCATIONS)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_LOCATIONS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_TYPE)->EnableWindow();
}

BOOL CTelemetryParametersAllocationsPage::HasParameterInfo() CONST
{
	return TRUE;
}

CTelemetryParametersFolder *CTelemetryParametersAllocationsPage::GetParent() CONST
{
	return((CTelemetryParametersFolder *)CLocalePropertyPage::GetParent());
}

void CTelemetryParametersAllocationsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryParametersAllocationsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryParametersAllocationsPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryParametersAllocationsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelemetryParametersAllocationsPage)
	// NOTE: the ClassWizard will add message map macros here
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersAllocationsPage message handlers

BOOL CTelemetryParametersAllocationsPage::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_TITLEITEM_LOCATION));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_TITLEITEM_POSITION));
	GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_LOCATIONS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_LOCATIONS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), rColumns.DeflateRect(0, 0, GetSystemMetrics(SM_CXVSCROLL), 0), nWidth = (3 * rColumns.Width()) / 4; nColumn < nColumns; nWidth = (++nColumn < nColumns) ? (rColumns.Width() - nWidth) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELEMETRYPARAMETERS_ALLOCATIONSPAGE_LOCATIONS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	return TRUE;
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersFolderTabCtrl

IMPLEMENT_DYNCREATE(CTelemetryParametersFolderTabCtrl, CTabCtrl)

CTelemetryParametersFolder *CTelemetryParametersFolderTabCtrl::GetParent() CONST
{
	return((CTelemetryParametersFolder *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CTelemetryParametersFolderTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTelemetryParametersFolderTabCtrl)
	ON_WM_GETDLGCODE()
	ON_WM_KEYDOWN()
	ON_WM_LBUTTONDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersFolderTabCtrl message handlers

UINT CTelemetryParametersFolderTabCtrl::OnGetDlgCode()
{
	return CTabCtrl::OnGetDlgCode() | DLGC_WANTTAB;
}

void CTelemetryParametersFolderTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	INT  nIndex;
	INT  nCount;
	CWnd  *pWnd;

	if ((nChar == VK_LEFT  &&  GetCurSel() > 0) || (nChar == VK_RIGHT  &&  GetCurSel() < GetItemCount() - 1))
	{
		for (nIndex = (nChar == VK_LEFT) ? (GetCurSel() - 1) : (GetCurSel() + 1), nCount = GetItemCount(); nIndex >= 0 && nIndex < nCount; )
		{
			if (!GetParent()->CheckPageAccessibility(nIndex))
			{
				if (nChar == VK_RIGHT  &&  nIndex < nCount - 1)
				{
					nIndex++;
					continue;
				}
				if (nChar == VK_LEFT  &&  nIndex > 0)
				{
					nIndex--;
					continue;
				}
				CAudioDevice::AlertBySound();
				return;
			}
			GetParent()->SetActivePage(nIndex);
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	if (nChar == VK_TAB)
	{
		if ((pWnd = GetParent()->GetParent()->GetNextDlgTabItem(GetParent(), (HIBYTE(GetKeyState(VK_SHIFT))) ? TRUE : FALSE)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}

void CTelemetryParametersFolderTabCtrl::OnLButtonDown(UINT nFlags, CPoint point)
{
	INT  nIndex;
	INT  nCount;
	CRect  rTab;

	for (nIndex = 0, nCount = GetItemCount(), SetFocus(); nIndex < nCount; nIndex++)
	{
		if (GetItemRect(nIndex, rTab) && rTab.PtInRect(point))
		{
			if (!GetParent()->CheckPageAccessibility(nIndex))
			{
				CAudioDevice::AlertBySound();
				return;
			}
			break;
		}
	}
	CTabCtrl::OnLButtonDown(nFlags, point);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersFolder

IMPLEMENT_DYNCREATE(CTelemetryParametersFolder, CLocalePropertySheetDialog)

CTelemetryParametersFolder::CTelemetryParametersFolder() : CLocalePropertySheetDialog()
{
	AddPage(&m_pageCharacteristics);
	AddPage(&m_pageCalibration);
	AddPage(&m_pageLimits);
	AddPage(&m_pageDerivation);
	AddPage(&m_pageAllocations);
}

BOOL CTelemetryParametersFolder::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	INT  nIndex;

	if (CLocalePropertySheetDialog::Create(pParentWnd, WS_CHILD | WS_TABSTOP | WS_DISABLED))
	{
		for (nIndex = GetPageCount() - 1, m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()); nIndex >= 0; nIndex--)
		{
			SetActivePage(nIndex);
			continue;
		}
		MoveWindow(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
		ShowWindow(SW_SHOWNORMAL);
		EnableWindow();
		return TRUE;
	}
	return FALSE;
}

VOID CTelemetryParametersFolder::ShowParameterInfo()
{
	m_pageCharacteristics.ShowParameterInfo();
	m_pageCalibration.ShowParameterInfo();
	m_pageLimits.ShowParameterInfo();
	m_pageDerivation.ShowParameterInfo();
	m_pageAllocations.ShowParameterInfo();
}
VOID CTelemetryParametersFolder::ShowParameterInfo(CONST CDatabaseTMParameter *pDatabaseTMParameter)
{
	CTMParameter  *pTMParameter;
	CTMParameters  pTMParameters;

	if ((pTMParameter = new CTMParameter))
	{
		pTMParameter->SetTag(pDatabaseTMParameter->GetTag());
		pTMParameter->SetAttributes(pDatabaseTMParameter->GetAttributes());
		if (pTMParameters.Add(pTMParameter) >= 0)
		{
			if (InitializeTMData(pTMParameters, FALSE))
			{
				m_pageCharacteristics.ShowParameterInfo(pDatabaseTMParameter);
				m_pageCalibration.ShowParameterInfo(pDatabaseTMParameter, pTMParameter);
				m_pageLimits.ShowParameterInfo(pDatabaseTMParameter, pTMParameter);
				m_pageDerivation.ShowParameterInfo(pDatabaseTMParameter);
				m_pageAllocations.ShowParameterInfo(pDatabaseTMParameter);
				return;
			}
		}
		else  delete pTMParameter;
	}
	m_pageCharacteristics.ShowParameterInfo(pDatabaseTMParameter);
	m_pageCalibration.ShowParameterInfo();
	m_pageLimits.ShowParameterInfo();
	m_pageDerivation.ShowParameterInfo(pDatabaseTMParameter);
	m_pageAllocations.ShowParameterInfo(pDatabaseTMParameter);

}

BOOL CTelemetryParametersFolder::CheckPageAccessibility(INT nIndex) CONST
{
	LPVOID  pPage;

	return((nIndex >= 0 && nIndex < m_pages.GetSize()) ? ((((pPage = m_pages.GetAt(nIndex)) == &m_pageCharacteristics  &&  m_pageCharacteristics.HasParameterInfo()) || (pPage == &m_pageCalibration  &&  m_pageCalibration.HasParameterInfo()) || (pPage == &m_pageLimits  &&  m_pageLimits.HasParameterInfo()) || (pPage == &m_pageDerivation  &&  m_pageDerivation.HasParameterInfo()) || (pPage == &m_pageAllocations  &&  m_pageAllocations.HasParameterInfo())) ? TRUE : FALSE) : FALSE);
}

CTelemetryParametersDialog *CTelemetryParametersFolder::GetParent() CONST
{
	return((CTelemetryParametersDialog *)CLocalePropertySheetDialog::GetParent());
}

BEGIN_MESSAGE_MAP(CTelemetryParametersFolder, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CTelemetryParametersFolder)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersFolder message handlers

void CTelemetryParametersFolder::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(m_wndTabCtrl.GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CLocalePropertySheetDialog::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryParametersDialog, CLocaleDialog)

CTelemetryParametersDialog::CTelemetryParametersDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryParametersDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryParametersDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelemetryParametersDialog::EnumParameters()
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	for (nParameter = 0, nParameters = (INT)GetDatabase()->GetTMParameters()->GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
		{
			szParameter.Format(STRING(IDS_TELEMETRYPARAMETERSDIALOG_NAMEFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
			SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameter);
		}
	}
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_NAME, CB_SETCURSEL);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_RESETALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_NAME, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
	return TRUE;
}

BOOL CTelemetryParametersDialog::EnumParameterSets()
{
	INT  nSet;
	INT  nSets;
	INT  nParameter;
	INT  nParameters;
	CByteArray  nSetsInfo;
	CTMParameter  *pTMParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CTelemetryParameterSet  *pTMParameterSet;
	CProfile  cProfile;

	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_RESETCONTENT);
	for (nSet = 0, nSets = (cProfile.GetTelemetryParameterSetsInfo(nSetsInfo) && m_pTMParameterSets[0].Unmap(nSetsInfo) && m_pTMParameterSets[1].Copy(&m_pTMParameterSets[0])) ? (INT)m_pTMParameterSets[0].GetSize() : -1; nSet < nSets; nSet++)
	{
		if ((pTMParameterSet = m_pTMParameterSets[0].GetAt(nSet))) SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pTMParameterSet->GetName());
		continue;
	}
	for (nSet = 0; nSet < nSets; nSet++)
	{
		if ((pTMParameterSet = m_pTMParameterSets[0].GetAt(nSet)))
		{
			for (nParameter = 0, nParameters = (INT)pTMParameterSet->GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pDatabaseTMParameter = ((pTMParameter = pTMParameterSet->GetAt(nParameter))) ? GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pTMParameter->GetTag())) : (CDatabaseTMParameter *)NULL))
				{
					pTMParameter->SetAttributes(pDatabaseTMParameter->GetAttributes());
					continue;
				}
			}
		}
	}
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_NAME_STATIC)->EnableWindow((!SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_GETCOUNT)) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : TRUE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_NAME)->EnableWindow((!SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_GETCOUNT)) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : TRUE);
	return((nSet == nSets) ? TRUE : FALSE);
}

BOOL CTelemetryParametersDialog::EnumParameterValues()
{
	INT  nIndex;
	INT  nValue;
	INT  nValues;
	double  fX[2];
	CString  szValue[2];
	CString  szInterpretation;
	CStringTools  cStringTools;
	CTMParameter  *pTMParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;

	for (SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, CB_RESETCONTENT); (nIndex = (INT)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION, CB_GETCURSEL)) >= 0; )
	{
		szInterpretation = Combobox_GetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION), nIndex);
		SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION, CB_RESETCONTENT);
		break;
	}
	if ((pDatabaseTMParameter = ((pTMParameter = m_cTMParameterSet.GetAt(Listview_GetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS))))) ? GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pTMParameter->GetTag())) : (CDatabaseTMParameter *)NULL))
	{
		if ((pDatabaseTMTxtCalTable = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTMTxtCalTables()->GetAt(FindTMParameterCalTable(pDatabaseTMParameter)) : (CDatabaseTMTxtCalTable *)NULL))
		{
			for (nValue = 0, nValues = (INT)pDatabaseTMTxtCalTable->GetSize(); nValue < nValues; nValue++)
			{
				if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt(nValue)))
				{
					if (pDatabaseTMTxtCalPoint->GetPoint(fX[0], szValue[0]))
					{
						szValue[1].Format(STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEPOINT_FORMAT), (LPCTSTR)szValue[0], (pTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT) ? (LPCTSTR)cStringTools.ConvertFloatToString(fX[0]) : (LPCTSTR)cStringTools.ConvertLongIntToString((LONGLONG)fX[0]));
						SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[1]);
						continue;
					}
					if (pDatabaseTMTxtCalPoint->GetRange(fX[0], fX[1], szValue[0]))
					{
						szValue[1].Format(STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUERANGE_FORMAT), (LPCTSTR)szValue[0], (pTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT) ? (LPCTSTR)cStringTools.ConvertFloatToString(fX[0]) : (LPCTSTR)cStringTools.ConvertLongIntToString((LONGLONG)fX[0]), (pTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT) ? (LPCTSTR)cStringTools.ConvertFloatToString(fX[1]) : (LPCTSTR)cStringTools.ConvertLongIntToString((LONGLONG)fX[1]));
						SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[1]);
						continue;
					}
				}
			}
			SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pTMParameter->GetValueAsText(GetDatabase(), 0, szValue[0])) ? (LPCTSTR)szValue[0] : EMPTYSTRING)));
		}
		for (SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEINTERPRETATION_RAW)), SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEINTERPRETATION_CODED)); pTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS); )
		{
			SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEINTERPRETATION_CALIBRATED));
			break;
		}
		SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION, CB_SETCURSEL, (szInterpretation.IsEmpty()) ? (WPARAM)max(max(SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEINTERPRETATION_CALIBRATED)), SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEINTERPRETATION_CODED))), 0) : (WPARAM)max(max(SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szInterpretation), SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEINTERPRETATION_CODED))), 0));
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE)->SetWindowText((pTMParameter->GetValueAsText(GetDatabase(), 0, ((szInterpretation = Combobox_GetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION), (INT)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION, CB_GETCURSEL))) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEINTERPRETATION_CODED)) ? ((pTMParameter->GetAttributes() & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) | TMPARAMETER_NATURE_CONSTANT | TMPARAMETER_CALIBRATION_NONE) : ((szInterpretation == STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEINTERPRETATION_RAW)) ? ((pTMParameter->GetAttributes()  & ~(TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL | TMPARAMETER_CALIBRATION_NONE) : pTMParameter->GetAttributes()), szValue[0])) ? szValue[0] : EMPTYSTRING);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_COMMENT)->ShowWindow((!pTMParameter->GetValueCount()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_COMMENT)->EnableWindow((!pTMParameter->GetValueCount()) ? TRUE : FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION)->EnableWindow();
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
		return TRUE;
	}
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_COMMENT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_COMMENT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
	return FALSE;
}

VOID CTelemetryParametersDialog::ShowParameterSetMembers()
{
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	UINT  nStatus;
	CString  szItem;
	CString  szTable;
	ULONGLONG  nValue;
	CStringTools  cStringTools;
	CTMParameter  *pTMParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	for (nParameter = 0, nParameters = (INT)m_cTMParameterSet.GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter = ((pTMParameter = m_cTMParameterSet.GetAt(nParameter))) ? GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pTMParameter->GetTag())) : (CDatabaseTMParameter *)NULL))
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_TAG); )
				{
					szItem = pTMParameter->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_DESCRIPTION); )
				{
					szItem = pDatabaseTMParameter->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_TYPE))
				{
					szItem = ((pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NONE) || (pTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) == 0) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERTYPE_RAW) : EMPTYSTRING;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERTYPE_NUMERICAL) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERTYPE_STATUS) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_NATURE))
				{
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_NATURE_RAW) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERNATURE_NORMAL) : EMPTYSTRING;
					szItem = (pTMParameter->GetAttributes() & (TMPARAMETER_NATURE_DERIVED | TMPARAMETER_NATURE_DERIVED_OL | TMPARAMETER_NATURE_DERIVED_SPEL | TMPARAMETER_NATURE_DERIVED_HARDCODED | TMPARAMETER_NATURE_DERIVED_SAVED)) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERNATURE_DERIVED) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_NATURE_CONSTANT) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERNATURE_CONSTANT) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pDatabaseTMParameter->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_CODING))
				{
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CODING_COMPLEMENTCOMPLEX) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUECODING_COMPLEMENTCOMPLEX) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUECODING_FLOATINGPOINT) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_RADIX))
				{
					szItem = (((pTMParameter->GetAttributes() & (TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) == 0 && (pTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN)) || (pTMParameter->GetAttributes() & TMPARAMETER_RADIX_BINARY)) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_RADIX_OCTAL) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUERADIX_OCTAL) : szItem;
					szItem = (((pTMParameter->GetAttributes() & (TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) == 0 && (pTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) == 0) || (pTMParameter->GetAttributes() & TMPARAMETER_RADIX_DECIMAL)) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUERADIX_DECIMAL) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_CALTABLE); )
				{
					szItem = (pTMParameter->GetRawValue(0, nValue, nStatus, szTable) && !szTable.IsEmpty()) ? szTable : STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUECALIBRATION_NONE);
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_VALUE); )
				{
					szItem = (pTMParameter->GetValueAsText(GetDatabase(), 0, szItem)) ? szItem : EMPTYSTRING;
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_OOLTABLE))
				{
					for (szItem = CheckTMParameterOolTable(pTMParameter); szItem.IsEmpty(); )
					{
						szItem = STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERLIMITTABLE_NONE);
						break;
					}
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_LIMITCHECK); )
				{
					if ((nStatus = CheckTMParameterOolStatus(pTMParameter)) & TMPARAMETER_STATUS_NOLIMIT)
					{
						szItem = STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERLIMITCHECK_NOLIMIT);
						break;
					}
					if (nStatus & TMPARAMETER_STATUS_SOFTLIMIT)
					{
						szItem = STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERLIMITCHECK_SOFTLIMIT);
						break;
					}
					if (nStatus & TMPARAMETER_STATUS_HARDLIMIT)
					{
						szItem = STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERLIMITCHECK_HARDLIMIT);
						break;
					}
					if (nStatus & TMPARAMETER_STATUS_DELTALIMIT)
					{
						szItem = STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERLIMITCHECK_DELTALIMIT);
						break;
					}
					if (nStatus & TMPARAMETER_STATUS_CONSISTENCYLIMIT)
					{
						szItem = STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERLIMITCHECK_CONSISTENCYLIMIT);
						break;
					}
					szItem = (nStatus != (UINT)-1) ? ((pTMParameter->GetValueCount() > 0) ? STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERLIMITCHECK_NONE) : EMPTYSTRING) : STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERLIMITCHECK_FAILURE);
					break;
				}
				if (nParameter >= SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT) && !nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS), nParameter, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS), nParameter, nColumn, szItem);
			}
		}
	}
	while (nParameters < SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT))
	{
		Listview_DeleteText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS), nParameters);
		continue;
	}
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTelemetryParametersDialog::ShowParameterInfo()
{
	CDatabaseTMParameter  *pDatabaseTMParameter;

	if ((pDatabaseTMParameter = FindParameter()))
	{
		m_cDatabaseTMParameter.Copy(pDatabaseTMParameter);
		m_wndFolderCtrl.ShowParameterInfo(&m_cDatabaseTMParameter);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(((m_cDatabaseTMParameter.GetAttributes() & TMPARAMETER_NATURE_RAW) != TMPARAMETER_NATURE_RAW  &&  m_cTMParameterSet.Find(m_cDatabaseTMParameter.GetTag()) < 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
		return;
	}
	if ((pDatabaseTMParameter = new CDatabaseTMParameter))
	{
		m_cDatabaseTMParameter.Copy(pDatabaseTMParameter);
		delete pDatabaseTMParameter;
	}
	m_wndFolderCtrl.ShowParameterInfo();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(FALSE);
}

CDatabaseTMParameter *CTelemetryParametersDialog::FindParameter() CONST
{
	INT  nPos;
	CString  szFormat;
	CString  szParameter;

	for (GetDlgItem(IDC_TELEMETRYPARAMETERS_NAME)->GetWindowText(szParameter), szFormat.Format(STRING(IDS_TELEMETRYPARAMETERSDIALOG_NAMEFORMAT), EMPTYSTRING, EMPTYSTRING); (nPos = szParameter.Find(szFormat)) >= 0; ) return GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(szParameter.Left(nPos)));
	return((CDatabaseTMParameter *)NULL);
}

UINT CTelemetryParametersDialog::CheckTMParameterOolStatus(CONST CTMParameter *pTMParameter) CONST
{
	UINT  nStatus;
	CString  szTable;
	ULONGLONG  nValue;

	return((pTMParameter->GetRawValue(0, nValue, nStatus, szTable)) ? CheckTMParameterOolStatus(pTMParameter, szTable, nValue) : ((!pTMParameter->GetValueCount()) ? TMPARAMETER_STATUS_NONE : (UINT)-1));
}
UINT CTelemetryParametersDialog::CheckTMParameterOolStatus(CONST CTMParameter *pTMParameter, LPCTSTR pszTable, ULONGLONG nValue) CONST
{
	UINT  nOolLimit;
	UINT  nOolStatus;
	CTMEnvironment  cTMEnvironment;
	CTMProcessEngine  cTMProcessEngine;

	for (nOolStatus = TMPARAMETER_STATUS_NONE; cTMProcessEngine.Open(GetDatabase(), GetAccountSpacecraftName(), &cTMEnvironment); )
	{
		if (cTMProcessEngine.CheckTMParameterOolStatus(GetDatabase(), &cTMEnvironment, pTMParameter, (pTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) ? ((pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTMNumCalTables()->Find(pszTable) : GetDatabase()->GetTMTxtCalTables()->Find(pszTable)) : -1, (pTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CALIBRATION_NUMERICAL)) ? GetDatabase()->GetTMNumOolTables()->Find(CheckTMParameterOolTable(pTMParameter)) : GetDatabase()->GetTMTxtOolTables()->Find(CheckTMParameterOolTable(pTMParameter)), nValue, nOolLimit, nOolStatus))
		{
			cTMProcessEngine.Close();
			return nOolStatus;
		}
		cTMProcessEngine.Close();
		break;
	}
	return nOolStatus;
}

UINT CTelemetryParametersDialog::CheckTMParameterValidity(CONST CTMParameter *pTMParameter) CONST
{
	UINT  nStatus;
	ULONGLONG  nValue;
	CTMParameter  *pValidityParameter;
	CTMParameters  pValidityParameters;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMParameter  *pDatabaseValidityParameter;

	if ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pTMParameter->GetTag()))))
	{
		if ((pValidityParameter = ((pDatabaseValidityParameter = GetDatabase()->GetTMParameters()->GetAt(pDatabaseTMParameter->GetValidityParameterRef()))) ? new CTMParameter : (CTMParameter *)NULL))
		{
			for (pValidityParameter->SetTag(pDatabaseValidityParameter->GetTag()), pValidityParameter->SetAttributes(pDatabaseValidityParameter->GetAttributes()); pValidityParameters.Add(pValidityParameter) >= 0; )
			{
				if ((pValidityParameter = (InitializeTMData(pValidityParameters)) ? pValidityParameters.GetAt((INT)pValidityParameters.GetUpperBound()) : (CTMParameter *)NULL) && pValidityParameter->GetRawValue(0, nValue, nStatus) && nValue == pDatabaseTMParameter->GetValidityValue()) return TMPARAMETER_STATUS_VALID;
				return TMPARAMETER_STATUS_INVALID;
			}
			delete pValidityParameter;
			return TMPARAMETER_STATUS_INVALID;
		}
		return((pDatabaseTMParameter->GetValidityParameterRef() < 0) ? TMPARAMETER_STATUS_VALID : TMPARAMETER_STATUS_INVALID);
	}
	return TMPARAMETER_STATUS_INVALID;
}

CString CTelemetryParametersDialog::CheckTMParameterCalTable(CONST CTMParameter *pTMParameter) CONST
{
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;

	if ((pDatabaseTMParameter = (pTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) ? GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pTMParameter->GetTag())) : (CDatabaseTMParameter *)NULL))
	{
		if ((pDatabaseTMNumCalTable = (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTMNumCalTables()->GetAt(FindTMParameterCalTable(pDatabaseTMParameter)) : (CDatabaseTMNumCalTable *)NULL)) return pDatabaseTMNumCalTable->GetName();
		if ((pDatabaseTMTxtCalTable = (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTMTxtCalTables()->GetAt(FindTMParameterCalTable(pDatabaseTMParameter)) : (CDatabaseTMTxtCalTable *)NULL)) return pDatabaseTMTxtCalTable->GetName();
	}
	return EMPTYSTRING;
}

CString CTelemetryParametersDialog::CheckTMParameterOolTable(CONST CTMParameter *pTMParameter) CONST
{
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;

	if ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pTMParameter->GetTag()))))
	{
		if ((pDatabaseTMNumOolTable = ((pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NONE) || (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)) ? GetDatabase()->GetTMNumOolTables()->GetAt(FindTMParameterOolTable(pDatabaseTMParameter)) : (CDatabaseTMNumOolTable *)NULL)) return pDatabaseTMNumOolTable->GetName();
		if ((pDatabaseTMTxtOolTable = (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTMTxtOolTables()->GetAt(FindTMParameterOolTable(pDatabaseTMParameter)) : (CDatabaseTMTxtOolTable *)NULL)) return pDatabaseTMTxtOolTable->GetName();
	}
	return EMPTYSTRING;
}

INT CTelemetryParametersDialog::FindTMParameterCalTable(CONST CDatabaseTMParameter *pDatabaseTMParameter) CONST
{
	INT  nTable;
	INT  nTables;
	UINT  nStatus;
	ULONGLONG  nValue;
	CUIntArray  nCalTableRefs[2];
	CStringArray  szCalTables[2];
	CTMParameter  *pValidityParameter;
	CTMParameters  pValidityParameters;
	CLongUIntArray  nCalTableValues;
	CDatabaseTMParameter  *pDatabaseValidityParameter;

	for (nTable = 0, nTables = (pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1], nCalTableValues) == pDatabaseTMParameter->GetCalTableRefs(nCalTableRefs[0], nCalTableRefs[1])) ? (INT)szCalTables[0].GetSize() : 0; nTable < nTables; nTable++)
	{
		if ((pDatabaseValidityParameter = GetDatabase()->GetTMParameters()->GetAt(nCalTableRefs[1].GetAt(nTable))))
		{
			if ((pValidityParameter = new CTMParameter) != (CTMParameter *)NULL)
			{
				pValidityParameter->SetTag(pDatabaseValidityParameter->GetTag());
				pValidityParameter->SetAttributes(pDatabaseValidityParameter->GetAttributes());
				if (pValidityParameters.Add(pValidityParameter) >= 0) continue;
				delete pValidityParameter;
			}
		}
		break;
	}
	if (pValidityParameters.GetSize() > 0)
	{
		if (InitializeTMData(pValidityParameters))
		{
			for (nTable = 0, nTables = (INT)pValidityParameters.GetSize(); nTable < nTables; nTable++)
			{
				if ((pValidityParameter = pValidityParameters.GetAt(nTable)) && pValidityParameter->GetRawValue(0, nValue, nStatus) && nValue == nCalTableValues.GetAt(nTable)) break;
				continue;
			}
			return((nTable < nTables) ? nCalTableRefs[0].GetAt(nTable) : -1);
		}
	}
	return((nCalTableRefs[0].GetSize() > 0) ? nCalTableRefs[0].GetAt(0) : -1);
}

INT CTelemetryParametersDialog::FindTMParameterOolTable(CONST CDatabaseTMParameter *pDatabaseTMParameter) CONST
{
	INT  nTable;
	INT  nTables;
	UINT  nStatus;
	ULONGLONG  nValue;
	CUIntArray  nOolTableRefs[2];
	CStringArray  szOolTables[2];
	CTMParameter  *pValidityParameter;
	CTMParameters  pValidityParameters;
	CLongUIntArray  nOolTableValues;
	CDatabaseTMParameter  *pDatabaseValidityParameter;

	for (nTable = 0, nTables = (pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1], nOolTableValues) == pDatabaseTMParameter->GetOolTableRefs(nOolTableRefs[0], nOolTableRefs[1])) ? (INT)szOolTables[0].GetSize() : 0; nTable < nTables; nTable++)
	{
		if ((pDatabaseValidityParameter = GetDatabase()->GetTMParameters()->GetAt(nOolTableRefs[1].GetAt(nTable))))
		{
			if ((pValidityParameter = new CTMParameter) != (CTMParameter *)NULL)
			{
				pValidityParameter->SetTag(pDatabaseValidityParameter->GetTag());
				pValidityParameter->SetAttributes(pDatabaseValidityParameter->GetAttributes());
				if (pValidityParameters.Add(pValidityParameter) >= 0) continue;
				delete pValidityParameter;
			}
		}
		break;
	}
	if (pValidityParameters.GetSize() > 0)
	{
		if (InitializeTMData(pValidityParameters))
		{
			for (nTable = 0, nTables = (INT)pValidityParameters.GetSize(); nTable < nTables; nTable++)
			{
				if ((pValidityParameter = pValidityParameters.GetAt(nTable)) && pValidityParameter->GetRawValue(0, nValue, nStatus) && nValue == nOolTableValues.GetAt(nTable)) break;
				continue;
			}
			return((nTable < nTables) ? nOolTableRefs[0].GetAt(nTable) : -1);
		}
	}
	return((nOolTableRefs[0].GetSize() > 0) ? nOolTableRefs[0].GetAt(0) : -1);
}

CRect CTelemetryParametersDialog::CalcFolderSize() CONST
{
	CRect  rFolder;

	GetDlgItem(IDC_TELEMETRYPARAMETERS_FOLDER)->GetWindowRect(rFolder);
	ScreenToClient(rFolder);
	return rFolder;
}

VOID CTelemetryParametersDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE)), TRUE, FALSE);
	AccessControl(IDC_TELEMETRYPARAMETERS_SETS_NAME, bCheck);
}

BOOL CTelemetryParametersDialog::IsModified() CONST
{
	return((!m_pTMParameterSets[0].Compare(&m_pTMParameterSets[1]) || m_cTMParameterSet.GetSize() > 0) ? TRUE : FALSE);
}

void CTelemetryParametersDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryParametersDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryParametersDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_cTMParameterSet.RemoveAll();
	m_pTMParameterSets[0].RemoveAll();
	m_pTMParameterSets[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryParametersDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryParametersDialog)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_ADD, OnAddSetMember)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVE, OnRemoveSetMember)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVEALL, OnRemoveAllSetMembers)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_SET, OnSetMemberValueInitialization)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_SETS_SAVE, OnSaveSet)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_SETS_DELETE, OnDeleteSet)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_SETS_IMPORT, OnImportSets)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_SETS_EXPORT, OnExportSets)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_RESETALL, OnResetAllParameters)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TELEMETRYPARAMETERS_NAME, OnSelchangeParameter)
	ON_CBN_SELCHANGE(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, OnSelchangeSetMemberValue)
	ON_CBN_SELCHANGE(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION, OnSelchangeSetMemberValueInterpretation)
	ON_CBN_SELCHANGE(IDC_TELEMETRYPARAMETERS_SETS_NAME, OnSelchangeSetName)
	ON_CBN_EDITCHANGE(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, OnEditchangeSetMemberValue)
	ON_CBN_EDITCHANGE(IDC_TELEMETRYPARAMETERS_SETS_NAME, OnEditchangeSetName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersDialog message handlers

BOOL CTelemetryParametersDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_NATURE));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_CALTABLE));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_OOLTABLE));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_LIMITCHECK));
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_NATURE)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_SETSTITLEITEM_BITLENGTH)) ? (rColumns.Width() / 9) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	for (EnumParameterSets(); m_wndFolderCtrl.Create(this, CalcFolderSize()) && SetChildSheet(&m_wndFolderCtrl, GetDlgItem(IDC_TELEMETRYPARAMETERS_FOLDER - 1)); )
	{
		if (EnumParameters()) ShowParameterInfo();
		break;
	}
	GetDlgItem(IDC_TELEMETRYPARAMETERS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_NAME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_DELETE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_IMPORT)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE));
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_EXPORT)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTelemetryParametersDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TELEMETRYPARAMETERS_SETS_MEMBERS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) EnumParameterValues();
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

void CTelemetryParametersDialog::OnAddSetMember()
{
	INT  nIndex[2];
	CTMParameter  *pTMParameter;
	CTMParameters  pTMParameters;
	CHourglassCursor  cCursor;

	if ((pTMParameter = new CTMParameter))
	{
		for (pTMParameter->SetTag(m_cDatabaseTMParameter.GetTag()), pTMParameter->SetAttributes(m_cDatabaseTMParameter.GetAttributes()); (nIndex[0] = pTMParameters.Add(pTMParameter)) >= 0; )
		{
			if (GetTMService()->InitializeTMData(pTMParameters))
			{
				if ((nIndex[1] = m_cTMParameterSet.Add(pTMParameter)) >= 0)
				{
					pTMParameters.CPtrArray::RemoveAll();
					ShowParameterSetMembers();
				}
			}
			Listview_SetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS), max(nIndex[1], 0));
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE));
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE));
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_NAME_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_NAME)->EnableWindow();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_SAVE)->EnableWindow((GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_NAME)->GetWindowTextLength() > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE)->SetFocus();
			break;
		}
		if (nIndex[0] < 0) delete pTMParameter;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersDialog::OnRemoveSetMember()
{
	INT  nIndex;
	CTMParameter  *pTMParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CHourglassCursor  cCursor;

	if ((pTMParameter = m_cTMParameterSet.GetAt((nIndex = Listview_GetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS))))))
	{
		if (Listview_DeleteText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS), nIndex))
		{
			if (SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT) > 0)
			{
				Listview_SetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS), 0);
				GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(((pDatabaseTMParameter = FindParameter()) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_RAW) != TMPARAMETER_NATURE_RAW && (m_cTMParameterSet.Find(pDatabaseTMParameter->GetTag()) < 0 || pDatabaseTMParameter->GetTag() == pTMParameter->GetTag())) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
				GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE));
				GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE));
				GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_SAVE)->EnableWindow((GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_NAME)->GetWindowTextLength() > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
			}
			else
			{
				SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, CB_RESETCONTENT);
				GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_COMMENT)->ShowWindow(SW_HIDE);
				GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_COMMENT)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(((pDatabaseTMParameter = FindParameter()) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_RAW) != TMPARAMETER_NATURE_RAW) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
				GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVE)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVEALL)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_STATIC)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELEMETRYPARAMETERS_NAME)->SetFocus();
			}
			m_cTMParameterSet.RemoveAt(nIndex);
			delete pTMParameter;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersDialog::OnRemoveAllSetMembers()
{
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CHourglassCursor  cCursor;

	m_cTMParameterSet.RemoveAll();
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS, LVM_DELETEALLITEMS);
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, CB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_COMMENT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_COMMENT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(((pDatabaseTMParameter = FindParameter()) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_RAW) != TMPARAMETER_NATURE_RAW) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersDialog::OnSetMemberValueInitialization()
{
	INT  nPos;
	CTMUnit  cTMUnit;
	CString  szTable;
	CString  szValue;
	CString  szInter;
	CTimeTag  tUpdate;
	ULONGLONG  nValue;
	ULONGLONG  nAttributes;
	CTMParameter  *pTMParameter[2];
	CTMEnvironment  cTMEnvironment;
	CTMProcessEngine  cTMProcessEngine;

	if (cTMProcessEngine.Open(GetDatabase(), GetAccountSpacecraftName(), &cTMEnvironment))
	{
		if ((pTMParameter[1] = ((pTMParameter[0] = new CTMParameter)) ? m_cTMParameterSet.GetAt(Listview_GetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS))) : (CTMParameter *)NULL))
		{
			for (cTMUnit.SetTag(STRING(IDS_TMUNIT_INTERACTIVE)), cTMUnit.SetTimeTag(tUpdate.GetTime()), GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE)->GetWindowText(szValue), GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION)->GetWindowText(szInter), szValue = ((nPos = (SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue) >= 0) ? szValue.ReverseFind(SPACE[0]) : -1) >= 0) ? szValue.Left(nPos) : szValue, nAttributes = pTMParameter[1]->GetAttributes(), pTMParameter[0]->Copy(pTMParameter[1]), pTMParameter[1]->Reset(); szInter == STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEINTERPRETATION_RAW); )
			{
				nAttributes = (nAttributes & ~(TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL | TMPARAMETER_CALIBRATION_NONE;
				break;
			}
			for (; szInter == STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEINTERPRETATION_CODED); )
			{
				nAttributes = (nAttributes & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) | TMPARAMETER_NATURE_CONSTANT | TMPARAMETER_CALIBRATION_NONE;
				break;
			}
			for (pTMParameter[0]->SetAttributes(nAttributes), szTable = CheckTMParameterCalTable(pTMParameter[1]); cTMProcessEngine.ConvertTMParameterValue(GetDatabase(), pTMParameter[0], (pTMParameter[0]->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTMNumCalTables()->Find(szTable) : ((pTMParameter[0]->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTMTxtCalTables()->Find(szTable) : -1), szValue, nValue); )
			{
				pTMParameter[1]->SetRawValue(&cTMUnit, 0, nValue, CheckTMParameterOolStatus(pTMParameter[1], szTable, nValue) | CheckTMParameterValidity(pTMParameter[1]) | TMPARAMETER_STATUS_GOOD, szTable);
				break;
			}
			ShowParameterSetMembers();
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_SAVE)->EnableWindow((GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_NAME)->GetWindowTextLength() > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS)->SetFocus();
		}
		delete pTMParameter[0];
		cTMProcessEngine.Close();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersDialog::OnSaveSet()
{
	INT  nIndex;
	CString  szName;
	CTelemetryParameterSet  *pTMParameterSet;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_NAME)->GetWindowText(szName);
	if ((pTMParameterSet = (SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0 || SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szName) >= 0) ? new CTelemetryParameterSet : (CTelemetryParameterSet *)NULL))
	{
		for (pTMParameterSet->Copy(&m_cTMParameterSet), pTMParameterSet->SetName(szName); (nIndex = m_pTMParameterSets[0].Find(pTMParameterSet->GetName())) >= 0; )
		{
			m_pTMParameterSets[0].GetAt(nIndex)->Copy(pTMParameterSet);
			delete pTMParameterSet;
			break;
		}
		for (; nIndex < 0; )
		{
			if (m_pTMParameterSets[0].Add(pTMParameterSet) < 0)
			{
				SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName));
				SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_SETCURSEL, (WPARAM)-1);
				delete pTMParameterSet;
				break;
			}
			nIndex = 0;
			break;
		}
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_DELETE)->EnableWindow((nIndex >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_EXPORT)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_NAME)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersDialog::OnDeleteSet()
{
	INT  nIndex;
	CString  szName;
	CTelemetryParameterSet  *pTMParameterSet;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_NAME)->GetWindowText(szName);
	if ((pTMParameterSet = (SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName)) >= 0) ? m_pTMParameterSets[0].GetAt((nIndex = m_pTMParameterSets[0].Find(szName))) : (CTelemetryParameterSet *)NULL))
	{
		SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_SETCURSEL, (WPARAM)-1);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_DELETE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_EXPORT)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_NAME)->SetFocus();
		m_pTMParameterSets[0].RemoveAt(nIndex);
		delete pTMParameterSet;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersDialog::OnImportSets()
{
	INT  nSet;
	INT  nSets;
	BOOL  bSets;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CTelemetryParameterSet  *pTMParameterSet;
	CTelemetryParametersImportSetsDialog  cTMParameterImportSetsDialog;

	if (cTMParameterImportSetsDialog.DoModal(m_pTMParameterSets[0]) == IDOK)
	{
		for (nSet = 0, nSets = (INT)m_pTMParameterSets[0].GetSize(), bSets = FALSE; nSet < nSets; nSet++)
		{
			if ((pTMParameterSet = m_pTMParameterSets[0].GetAt(nSet)) && SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pTMParameterSet->GetName()) < 0)
			{
				for (SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_INSERTSTRING, nSet, (LPARAM)(LPCTSTR)pTMParameterSet->GetName()); !bSets; )
				{
					SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_SETCURSEL, nSet);
					SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
					m_cTMParameterSet.Copy(pTMParameterSet);
					bSets = TRUE;
					break;
				}
			}
		}
		ShowParameterSetMembers();
		Listview_SetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS), 0);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(((pDatabaseTMParameter = FindParameter()) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_RAW) != TMPARAMETER_NATURE_RAW  &&  m_cTMParameterSet.Find(pDatabaseTMParameter->GetTag()) < 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS)) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_DELETE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_EXPORT)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_NAME)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersDialog::OnExportSets()
{
	CTelemetryParametersExportSetsDialog  cTMParameterExportSetsDialog;

	cTMParameterExportSetsDialog.DoModal(m_pTMParameterSets[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersDialog::OnResetAllParameters()
{
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CHourglassCursor  cCursor;

	m_cTMParameterSet.RemoveAll();
	GetTMService()->ResetTMParameters();
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS, LVM_DELETEALLITEMS);
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, CB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_COMMENT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_COMMENT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(((pDatabaseTMParameter = FindParameter()) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_RAW) != TMPARAMETER_NATURE_RAW) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_RESETALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_NAME)->SetFocus();
}

void CTelemetryParametersDialog::OnSelchangeParameter()
{
	ShowParameterInfo();
}

void CTelemetryParametersDialog::OnSelchangeSetMemberValue()
{
	INT  nPos;
	CString  szValue[2];
	CTMParameter  *pTMParameter;

	if ((pTMParameter = (!(szValue[0] = Combobox_GetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE), (INT)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, CB_GETCURSEL))).IsEmpty()) ? m_cTMParameterSet.GetAt(Listview_GetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS))) : (CTMParameter *)NULL))
	{
		if ((nPos = szValue[0].ReverseFind(SPACE[0])) >= 0 && ((pTMParameter->GetValueAsText(GetDatabase(), 0, szValue[1]) && szValue[0].Left(nPos) != szValue[1]) || !pTMParameter->GetValueCount()))
		{
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE));
			return;
		}
	}
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
}

void CTelemetryParametersDialog::OnSelchangeSetMemberValueInterpretation()
{
	CString  szValue;
	CString  szInterpretation;
	CTMParameter  *pTMParameter;

	for (SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, CB_RESETCONTENT); (szInterpretation = Combobox_GetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION), (INT)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION, CB_GETCURSEL))) == STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEINTERPRETATION_CALIBRATED); )
	{
		EnumParameterValues();
		break;
	}
	if ((pTMParameter = m_cTMParameterSet.GetAt(Listview_GetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS)))) && pTMParameter->GetValueCount() > 0)
	{
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE)->SetWindowText((pTMParameter->GetValueAsText(GetDatabase(), 0, (szInterpretation == STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEINTERPRETATION_CALIBRATED)) ? pTMParameter->GetAttributes() : ((szInterpretation == STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEINTERPRETATION_CODED)) ? ((pTMParameter->GetAttributes() & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) | TMPARAMETER_CALIBRATION_NONE) : ((pTMParameter->GetAttributes() & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL)), szValue)) ? szValue : EMPTYSTRING);
		SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	}
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE)->SetFocus();
}

void CTelemetryParametersDialog::OnSelchangeSetName()
{
	CString  szName;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CTelemetryParameterSet  *pTMParameterSet;

	if ((pTMParameterSet = (!(szName = Combobox_GetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_NAME), (INT)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_GETCURSEL))).IsEmpty()) ? m_pTMParameterSets[0].GetAt(m_pTMParameterSets[0].Find(szName)) : (CTelemetryParameterSet *)NULL))
	{
		for (m_cTMParameterSet.Copy(pTMParameterSet), ShowParameterSetMembers(); SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT) > 0; )
		{
			Listview_SetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS), 0);
			EnumParameterValues();
			break;
		}
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(((pDatabaseTMParameter = FindParameter()) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_RAW) != TMPARAMETER_NATURE_RAW  &&  m_cTMParameterSet.Find(pDatabaseTMParameter->GetTag()) < 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS)) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_DELETE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE));
		GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_EXPORT)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersDialog::OnEditchangeSetMemberValue()
{
	INT  nPos;
	INT  nValue;
	INT  nValues;
	CString  szValue[3];
	CString  szInterpretation;
	CTMParameter  *pTMParameter;

	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE)->GetWindowText(szValue[0]);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUEINTERPRETATION)->GetWindowText(szInterpretation);
	if ((pTMParameter = m_cTMParameterSet.GetAt(Listview_GetCurText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS)))))
	{
		for (nValue = 0, nValues = (INT)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, CB_GETCOUNT), szValue[1] = (pTMParameter->GetValueAsText(GetDatabase(), 0, szValue[1])) ? szValue[1] : EMPTYSTRING; nValue < nValues; nValue++)
		{
			for (szValue[2] = Combobox_GetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE), nValue); (nPos = szValue[2].ReverseFind(SPACE[0])) >= 0; )
			{
				szValue[2] = szValue[2].Left(nPos);
				break;
			}
			if (szValue[0] == szValue[2] && szValue[0] != szValue[1]) break;
		}
		if (SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[0]) >= 0 || nValue < nValues)
		{
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE));
			return;
		}
		if (GetDatabase()->CheckTMParameterConstValue((szInterpretation == STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEINTERPRETATION_CALIBRATED)) ? ((pTMParameter->GetAttributes() & ~(TMPARAMETER_NATURE_RAW | TMPARAMETER_NATURE_DERIVED | TMPARAMETER_NATURE_DERIVED_OL | TMPARAMETER_NATURE_DERIVED_SPEL | TMPARAMETER_NATURE_DERIVED_HARDCODED | TMPARAMETER_NATURE_DERIVED_SAVED)) | TMPARAMETER_NATURE_CONSTANT) : ((szInterpretation == STRING(IDS_TELEMETRYPARAMETERSDIALOG_MEMBERVALUEINTERPRETATION_CODED)) ? ((pTMParameter->GetAttributes() & ~(TMPARAMETER_NATURE_RAW | TMPARAMETER_NATURE_DERIVED | TMPARAMETER_NATURE_DERIVED_OL | TMPARAMETER_NATURE_DERIVED_SPEL | TMPARAMETER_NATURE_DERIVED_HARDCODED | TMPARAMETER_NATURE_DERIVED_SAVED | TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) | TMPARAMETER_NATURE_CONSTANT | TMPARAMETER_CALIBRATION_NONE) : ((pTMParameter->GetAttributes() & ~(TMPARAMETER_NATURE_RAW | TMPARAMETER_NATURE_DERIVED | TMPARAMETER_NATURE_DERIVED_OL | TMPARAMETER_NATURE_DERIVED_SPEL | TMPARAMETER_NATURE_DERIVED_HARDCODED | TMPARAMETER_NATURE_DERIVED_SAVED | TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL)) | TMPARAMETER_NATURE_CONSTANT | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_RADIX_HEXADECIMAL)), szValue[0]) && !szValue[0].IsEmpty())
		{
			if ((pTMParameter->GetValueAsText(GetDatabase(), 0, szValue[1]) && szValue[0] != szValue[1]) || !pTMParameter->GetValueCount())
			{
				GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE));
				return;
			}
		}
		if (pTMParameter->GetValueCount() > 0 && szValue[0].IsEmpty())
		{
			GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE));
			return;
		}
	}
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
}

void CTelemetryParametersDialog::OnEditchangeSetName()
{
	CString  szName;

	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_SAVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT) > 0 && !szName.IsEmpty()) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_SETS_DELETE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_SETS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELEMETRYPARAMETERS_CHANGE) : FALSE);
}

void CTelemetryParametersDialog::OnOK()
{
	CProfile  cProfile;
	CByteArray  nSetsInfo;
	CHourglassCursor  cCursor;

	for (GetTMService()->UpdateTMParameters(m_cTMParameterSet); !m_pTMParameterSets[0].Compare(&m_pTMParameterSets[1]) && m_pTMParameterSets[0].Map(nSetsInfo); )
	{
		cProfile.SetTelemetryParameterSetsInfo(nSetsInfo);
		break;
	}
	EndDialog(IDOK);
}

BOOL CTelemetryParametersDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryParametersDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersImportSetsDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryParametersImportSetsDialog, CLocaleDialog)

CTelemetryParametersImportSetsDialog::CTelemetryParametersImportSetsDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryParametersImportSetsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryParametersImportSetsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTelemetryParametersImportSetsDialog::DoModal(CTelemetryParameterSets &pSets)
{
	INT  nSet;
	INT  nSets;
	INT  nResult;
	CTelemetryParameterSet  *pSet[2];

	for (m_pSets[0].RemoveAll(), m_pSets[1].Copy(&pSets); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		for (nSet = 0, nSets = (INT)m_pSets[0].GetSize(); nSet < nSets; nSet = nSet + 1)
		{
			if ((pSet[0] = m_pSets[0].GetAt(nSet)) != (CTelemetryParameterSet *)NULL)
			{
				if ((pSet[1] = pSets.GetAt(pSets.Find(pSet[0]->GetName()))))
				{
					pSet[1]->Copy(pSet[0]);
					continue;
				}
				if ((pSet[1] = new CTelemetryParameterSet))
				{
					for (pSet[1]->Copy(pSet[0]); pSets.Add(pSet[1]) < 0; )
					{
						delete pSet[1];
						break;
					}
				}
			}
		}
		break;
	}
	m_pSets[0].RemoveAll();
	m_pSets[1].RemoveAll();
	return nResult;
}

BOOL CTelemetryParametersImportSetsDialog::EnumParameterSets()
{
	INT  nSet;
	INT  nSets;
	INT  nParameter;
	INT  nParameters;
	DWORD  cbData;
	CFileEx  cFile;
	CString  szMessage;
	CString  szFileName;
	CByteArray  nFileData;
	CTMParameter  *pTMParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CTelemetryParameterSet  *pSet;

	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME)->GetWindowText(szFileName);
	if (cFile.Open(szFileName, CFile::modeRead | CFile::shareExclusive))
	{
		nFileData.SetSize((cbData = (DWORD)cFile.GetLength()*sizeof(BYTE)));
		if (ReadFile(cFile.m_hFile, nFileData.GetData(), (DWORD)nFileData.GetSize(), &cbData, (LPOVERLAPPED)NULL))
		{
			for (nSet = 0, nSets = (m_pSets[0].Unmap(nFileData)) ? (INT)m_pSets[0].GetSize() : 0; nSet < nSets; nSet++)
			{
				if ((pSet = m_pSets[0].GetAt(nSet)) && SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_INSERTSTRING, nSet, (LPARAM)(LPCTSTR)pSet->GetName()) >= 0)
				{
					for (nParameter = 0, nParameters = (INT)pSet->GetSize(); nParameter < nParameters; nParameter = nParameter + 1)
					{
						if ((pDatabaseTMParameter = ((pTMParameter = pSet->GetAt(nParameter))) ? GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pTMParameter->GetTag())) : (CDatabaseTMParameter *)NULL))
						{
							pTMParameter->SetAttributes(pDatabaseTMParameter->GetAttributes());
							continue;
						}
					}
				}
			}
		}
		else
		{
			szMessage = STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_FILE_FAILURE);
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
		}
		cFile.Close();
	}
	else
	{
		szMessage = STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_FILE_FAILURE);
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
	}
	for (ExamineParameterSets(), SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_SETCURSEL); SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) >= 0; )
	{
		ShowParameterSetMembers();
		break;
	}
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTelemetryParametersImportSetsDialog::ShowParameterSetMembers()
{
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	UINT  nStatus;
	CString  szItem;
	ULONGLONG  nValue;
	CStringTools  cStringTools;
	CTMParameter  *pTMParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CTelemetryParameterSet  *pSet;

	for (nParameter = 0, nParameters = ((pSet = FindParameterSet())) ? (INT)pSet->GetSize() : 0; nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter = ((pTMParameter = pSet->GetAt(nParameter))) ? GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pTMParameter->GetTag())) : (CDatabaseTMParameter *)NULL))
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_TAG); )
				{
					szItem = pTMParameter->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_DESCRIPTION); )
				{
					szItem = pDatabaseTMParameter->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_TYPE))
				{
					szItem = ((pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NONE) || (pTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) == 0) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TYPE_RAW) : EMPTYSTRING;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TYPE_NUMERICAL) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TYPE_STATUS) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_NATURE))
				{
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_NATURE_RAW) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_NATURE_NORMAL) : EMPTYSTRING;
					szItem = (pTMParameter->GetAttributes() & (TMPARAMETER_NATURE_DERIVED | TMPARAMETER_NATURE_DERIVED_OL | TMPARAMETER_NATURE_DERIVED_SPEL | TMPARAMETER_NATURE_DERIVED_HARDCODED | TMPARAMETER_NATURE_DERIVED_SAVED)) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_NATURE_DERIVED) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_NATURE_CONSTANT) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_NATURE_CONSTANT) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pDatabaseTMParameter->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_CODING))
				{
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_VALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_VALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_VALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CODING_COMPLEMENTCOMPLEX) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_VALUECODING_COMPLEMENTCOMPLEX) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_VALUECODING_FLOATINGPOINT) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_RADIX))
				{
					szItem = (((pTMParameter->GetAttributes() & (TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) == 0 && (pTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN)) || (pTMParameter->GetAttributes() & TMPARAMETER_RADIX_BINARY)) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_VALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_RADIX_OCTAL) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_VALUERADIX_OCTAL) : szItem;
					szItem = (((pTMParameter->GetAttributes() & (TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) == 0 && (pTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) == 0) || (pTMParameter->GetAttributes() & TMPARAMETER_RADIX_DECIMAL)) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_VALUERADIX_DECIMAL) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_VALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_VALUE); )
				{
					szItem = (pTMParameter->GetValueAsText(GetDatabase(), 0, szItem)) ? szItem : EMPTYSTRING;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_LIMITCHECK); )
				{
					if (pTMParameter->GetRawValue(0, nValue, nStatus))
					{
						if (nStatus & TMPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nStatus & TMPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_SOFTLIMIT);
							break;
						}
						if (nStatus & TMPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_HARDLIMIT);
							break;
						}
						if (nStatus & TMPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_DELTALIMIT);
							break;
						}
						if (nStatus & TMPARAMETER_STATUS_CONSISTENCYLIMIT)
						{
							szItem = STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_CONSISTENCYLIMIT);
							break;
						}
						szItem = (pTMParameter->GetValueCount() > 0) ? STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_NONE) : EMPTYSTRING;
						break;
					}
					szItem = STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (nParameter >= SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT) && !nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS), nParameter, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS), nParameter, nColumn, szItem);
			}
		}
	}
	while (nParameters < SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT))
	{
		Listview_DeleteText(GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS), nParameters);
		continue;
	}
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_PROPERTIES)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTelemetryParametersImportSetsDialog::ExamineParameterSets()
{
	INT  nSet;
	INT  nSets;
	CTelemetryParameterSet  *pSet;

	for (nSet = 0, nSets = (INT)m_pSets[0].GetSize(); nSet < nSets; nSet++)
	{
		if ((pSet = m_pSets[0].GetAt(nSet)) && m_pSets[1].Find(pSet->GetName()) >= 0) break;
		continue;
	}
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_COMMENT)->ShowWindow((nSet < nSets) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_COMMENT)->EnableWindow((nSet < nSets) ? TRUE : FALSE);
}

CTelemetryParameterSet *CTelemetryParametersImportSetsDialog::FindParameterSet() CONST
{
	return m_pSets[0].GetAt(m_pSets[0].Find(Listbox_GetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST), (INT)GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST)->SendMessage(LB_GETCURSEL))));
}

BOOL CTelemetryParametersImportSetsDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST)->SendMessage(LB_GETCOUNT) > 0) ? TRUE : FALSE);
}

void CTelemetryParametersImportSetsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryParametersImportSetsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryParametersImportSetsDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryParametersImportSetsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryParametersImportSetsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME_BROWSE, OnFilenameBrowse)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME_INSPECT, OnInspectParameterSet)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST_REMOVE, OnRemoveParameterSet)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST_REMOVEALL, OnRemoveAllParameterSets)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_IMPORTSETS_HELP, OnHelp)
	ON_LBN_SELCHANGE(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, OnSelchangeParameterSet)
	ON_EN_CHANGE(IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME, OnEditchangeFilename)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersImportSetsDialog message handlers

BOOL CTelemetryParametersImportSetsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_NATURE));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_LIMITCHECK));
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 4) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_NATURE)) ? (rColumns.Width() / 6) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 8) : (10 * rColumns.Width() / 35)))));
		continue;
	}
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME_BROWSE)->EnableWindow();
	return TRUE;
}

void CTelemetryParametersImportSetsDialog::OnFilenameBrowse()
{
	CString  szFileName;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME)->SetWindowText((szFileName = cFileBrowseDialog.GetPathName()));
		GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME_INSPECT)->EnableWindow(!szFileName.IsEmpty());
	}
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersImportSetsDialog::OnInspectParameterSet()
{
	CHourglassCursor  cCursor;

	EnumParameterSets();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersImportSetsDialog::OnRemoveParameterSet()
{
	INT  nIndex[2];
	CTelemetryParameterSet  *pSet;
	CHourglassCursor  cCursor;

	if ((pSet = m_pSets[0].GetAt((nIndex[0] = m_pSets[0].Find(Listbox_GetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST), (nIndex[1] = (INT)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_GETCURSEL))))))))
	{
		if (SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_DELETESTRING, nIndex[1]) >= 0)
		{
			for (m_pSets[0].RemoveAt(nIndex[0]); m_pSets[0].GetSize() >= 0; )
			{
				ExamineParameterSets();
				break;
			}
			SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_SETCURSEL);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
			ShowParameterSetMembers();
			delete pSet;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersImportSetsDialog::OnRemoveAllParameterSets()
{
	CHourglassCursor  cCursor;

	m_pSets[0].RemoveAll();
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST, LB_RESETCONTENT);
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS, LVM_DELETEALLITEMS);
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_COMMENT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_COMMENT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_LIST_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_PROPERTIES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersImportSetsDialog::OnSelchangeParameterSet()
{
	ShowParameterSetMembers();
}

void CTelemetryParametersImportSetsDialog::OnEditchangeFilename()
{
	CString  szFileName;

	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME)->GetWindowText(szFileName);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_IMPORTSETS_FILENAME_INSPECT)->EnableWindow(!szFileName.IsEmpty());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersImportSetsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	EndDialog(IDOK);
}

BOOL CTelemetryParametersImportSetsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryParametersImportSetsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYPARAMETERSIMPORTSETSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersExportSetsDialog dialog

IMPLEMENT_DYNCREATE(CTelemetryParametersExportSetsDialog, CLocaleDialog)

CTelemetryParametersExportSetsDialog::CTelemetryParametersExportSetsDialog(CWnd *pParentWnd) : CLocaleDialog(CTelemetryParametersExportSetsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelemetryParametersExportSetsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTelemetryParametersExportSetsDialog::DoModal(CONST CTelemetryParameterSets &pSets)
{
	return((m_pSets.Copy(&pSets)) ? (INT)CLocaleDialog::DoModal() : -1);
}

BOOL CTelemetryParametersExportSetsDialog::EnumParameterSets()
{
	INT  nSet;
	INT  nSets;
	CTelemetryParameterSet  *pSet;

	for (nSet = 0, nSets = (INT)m_pSets.GetSize(); nSet < nSets; nSet++)
	{
		if ((pSet = m_pSets.GetAt(nSet))) SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pSet->GetName());
		continue;
	}
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_PROPERTIES)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
	return((nSet == nSets) ? TRUE : FALSE);
}

VOID CTelemetryParametersExportSetsDialog::ShowParameterSetMembers()
{
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	UINT  nStatus;
	CString  szItem;
	ULONGLONG  nValue;
	CStringTools  cStringTools;
	CTMParameter  *pTMParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CTelemetryParameterSet  *pSet;

	for (nParameter = 0, nParameters = ((pSet = FindParameterSet())) ? (INT)pSet->GetSize() : 0; nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter = ((pTMParameter = pSet->GetAt(nParameter))) ? GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pTMParameter->GetTag())) : (CDatabaseTMParameter *)NULL))
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_TAG); )
				{
					szItem = pTMParameter->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_DESCRIPTION); )
				{
					szItem = pDatabaseTMParameter->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_TYPE))
				{
					szItem = ((pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NONE) || (pTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) == 0) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TYPE_RAW) : EMPTYSTRING;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TYPE_NUMERICAL) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TYPE_STATUS) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_NATURE))
				{
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_NATURE_RAW) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_NATURE_NORMAL) : EMPTYSTRING;
					szItem = (pTMParameter->GetAttributes() & (TMPARAMETER_NATURE_DERIVED | TMPARAMETER_NATURE_DERIVED_OL | TMPARAMETER_NATURE_DERIVED_SPEL | TMPARAMETER_NATURE_DERIVED_HARDCODED | TMPARAMETER_NATURE_DERIVED_SAVED)) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_NATURE_DERIVED) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_NATURE_CONSTANT) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_NATURE_CONSTANT) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pDatabaseTMParameter->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_CODING))
				{
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_VALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_VALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_VALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CODING_COMPLEMENTCOMPLEX) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_VALUECODING_COMPLEMENTCOMPLEX) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_VALUECODING_FLOATINGPOINT) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_RADIX))
				{
					szItem = (((pTMParameter->GetAttributes() & (TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) == 0 && (pTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN)) || (pTMParameter->GetAttributes() & TMPARAMETER_RADIX_BINARY)) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_VALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_RADIX_OCTAL) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_VALUERADIX_OCTAL) : szItem;
					szItem = (((pTMParameter->GetAttributes() & (TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) == 0 && (pTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) == 0) || (pTMParameter->GetAttributes() & TMPARAMETER_RADIX_DECIMAL)) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_VALUERADIX_DECIMAL) : szItem;
					szItem = (pTMParameter->GetAttributes() & TMPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_VALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_VALUE); )
				{
					szItem = (pTMParameter->GetValueAsText(GetDatabase(), 0, szItem)) ? szItem : EMPTYSTRING;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_LIMITCHECK); )
				{
					if (pTMParameter->GetRawValue(0, nValue, nStatus))
					{
						if (nStatus & TMPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nStatus & TMPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_SOFTLIMIT);
							break;
						}
						if (nStatus & TMPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_HARDLIMIT);
							break;
						}
						if (nStatus & TMPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_DELTALIMIT);
							break;
						}
						if (nStatus & TMPARAMETER_STATUS_CONSISTENCYLIMIT)
						{
							szItem = STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_CONSISTENCYLIMIT);
							break;
						}
						szItem = (pTMParameter->GetValueCount() > 0) ? STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_NONE) : EMPTYSTRING;
						break;
					}
					szItem = STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (nParameter >= SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT) && !nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS), nParameter, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS), nParameter, nColumn, szItem);
			}
		}
	}
	while (nParameters < SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT))
	{
		Listview_DeleteText(GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS), nParameters);
		continue;
	}
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_PROPERTIES)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

CTelemetryParameterSet *CTelemetryParametersExportSetsDialog::FindParameterSet() CONST
{
	CString  szName;

	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME)->GetWindowText(szName);
	return m_pSets.GetAt(m_pSets.Find(szName));
}

BOOL CTelemetryParametersExportSetsDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_FILENAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST)->SendMessage(LB_GETCOUNT) > 0) ? TRUE : FALSE);
}

void CTelemetryParametersExportSetsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelemetryParametersExportSetsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelemetryParametersExportSetsDialog::PostNcDestroy()
{
	m_pSets.RemoveAll();
	m_szColumns.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelemetryParametersExportSetsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelemetryParametersExportSetsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_ADD, OnAddParameterSet)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_REMOVE, OnRemoveParameterSet)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_REMOVEALL, OnRemoveAllParameterSets)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_EXPORTSETS_FILENAME_BROWSE, OnFilenameBrowse)
	ON_BN_CLICKED(IDC_TELEMETRYPARAMETERS_EXPORTSETS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME, OnSelchangeParameterSet)
	ON_EN_CHANGE(IDC_TELEMETRYPARAMETERS_EXPORTSETS_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelemetryParametersExportSetsDialog message handlers

BOOL CTelemetryParametersExportSetsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_NATURE));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_LIMITCHECK));
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 4) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_NATURE)) ? (rColumns.Width() / 6) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 8) : (10 * rColumns.Width() / 35)))));
		continue;
	}
	EnumParameterSets();
	ShowParameterSetMembers();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME), (INT)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL))) < 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_FILENAME_BROWSE)->EnableWindow();
	return TRUE;
}

void CTelemetryParametersExportSetsDialog::OnAddParameterSet()
{
	CHourglassCursor  cCursor;

	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME), (INT)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL))));
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME), (INT)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL))) < 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersExportSetsDialog::OnRemoveParameterSet()
{
	CHourglassCursor  cCursor;

	for (; !SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_GETCURSEL)); )
	{
		GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME)->SetFocus();
		break;
	}
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME), (INT)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL))) < 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_SETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersExportSetsDialog::OnRemoveAllParameterSets()
{
	CHourglassCursor  cCursor;

	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_RESETCONTENT);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersExportSetsDialog::OnFilenameBrowse()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELEMETRYPARAMETERS_EXPORTSETS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersExportSetsDialog::OnSelchangeParameterSet()
{
	ShowParameterSetMembers();
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME), (INT)SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL))) < 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
}

void CTelemetryParametersExportSetsDialog::OnEditchangeFileName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelemetryParametersExportSetsDialog::OnOK()
{
	INT  nSet;
	INT  nSets;
	DWORD  cbData;
	CFileEx  cFile;
	CString  szFileName;
	CByteArray  nFileData;
	CTelemetryParameterSet  *pSet;
	CHourglassCursor  cCursor;

	for (nSet = 0, nSets = (INT)m_pSets.GetSize(); nSet < nSets; nSet++)
	{
		if ((pSet = m_pSets.GetAt(nSet)) && SendDlgItemMessage(IDC_TELEMETRYPARAMETERS_EXPORTSETS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pSet->GetName()) >= 0) continue;
		m_pSets.RemoveAt(nSet);
		delete pSet;
		nSets--;
		nSet--;
	}
	for (GetDlgItem(IDC_TELEMETRYPARAMETERS_EXPORTSETS_FILENAME)->GetWindowText(szFileName); m_pSets.GetSize() > 0; )
	{
		if (cFile.Open(szFileName, CFile::modeCreate | CFile::modeReadWrite | CFile::shareExclusive))
		{
			if (WriteFile(cFile.m_hFile, nFileData.GetData(), (m_pSets.Map(nFileData)) ? (DWORD)nFileData.GetSize() : 0, &cbData, (LPOVERLAPPED)NULL) && cbData == nFileData.GetSize())
			{
				cFile.Close();
				break;
			}
			cFile.Close();
			cFile.Remove(szFileName);
		}
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TELEMETRYPARAMETERSEXPORTSETSDIALOG_FILE_FAILURE));
		break;
	}
	EndDialog(IDOK);
}

BOOL CTelemetryParametersExportSetsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelemetryParametersExportSetsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELEMETRYPARAMETERSEXPORTSETSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsArchivingPage property page

IMPLEMENT_DYNCREATE(CMemoryDumpsArchivingPage, CLocalePropertyPage)

CMemoryDumpsArchivingPage::CMemoryDumpsArchivingPage() : CLocalePropertyPage(CMemoryDumpsArchivingPage::IDD)
{
	//{{AFX_DATA_INIT(CMemoryDumpsArchivingPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CMemoryDumpsArchivingPage::SetInfo(CONST CMemoryDump *pDump, CONST CMemoryDump *pBackupDump, BOOL bUpdate)
{
	UINT  nFormats[2];

	for (m_cDump[0].Copy(pDump), m_cDump[0].SetArchivingFileFormats((nFormats[0] = pDump->GetArchivingFileFormats()) & (nFormats[1] = GetMemoryDumpsServiceSupport()->EnumMemoryDumpFileFormats(pDump->GetDataSource()))); (nFormats[0] & nFormats[1] & MEMORYDUMP_FILEFORMAT_NORMAL) != MEMORYDUMP_FILEFORMAT_NORMAL; )
	{
		m_cDump[0].SetFileExtension(MEMORYDUMP_FILEFORMAT_NORMAL, EMPTYSTRING);
		break;
	}
	for (; (nFormats[0] & nFormats[1] & MEMORYDUMP_FILEFORMAT_DESCRIPTIVE) != MEMORYDUMP_FILEFORMAT_DESCRIPTIVE; )
	{
		m_cDump[0].SetFileExtension(MEMORYDUMP_FILEFORMAT_DESCRIPTIVE, EMPTYSTRING);
		break;
	}
	for (; (nFormats[0] & nFormats[1] & MEMORYDUMP_FILEFORMAT_DELIMITED) != MEMORYDUMP_FILEFORMAT_DELIMITED; )
	{
		m_cDump[0].SetFileExtension(MEMORYDUMP_FILEFORMAT_DELIMITED, EMPTYSTRING);
		break;
	}
	for (; pBackupDump != (CONST CMemoryDump *) NULL; )
	{
		m_cDump[1].Copy(pBackupDump);
		break;
	}
	if (IsWindow(GetSafeHwnd()) && bUpdate)
	{
		ShowArchivingInfo();
		return;
	}
}

VOID CMemoryDumpsArchivingPage::GetInfo(CMemoryDump *pDump) CONST
{
	pDump->Copy(&m_cDump[0]);
}

VOID CMemoryDumpsArchivingPage::ShowArchivingInfo()
{
	UINT  nOptions;
	UINT  nFormats[2];
	CString  szExtensions[3];

	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL, ((nFormats[0] = m_cDump[0].GetArchivingFileFormats()) & MEMORYDUMP_FILEFORMAT_NORMAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE, (nFormats[0] & MEMORYDUMP_FILEFORMAT_DESCRIPTIVE) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED, (nFormats[0] & MEMORYDUMP_FILEFORMAT_DELIMITED) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STATUS, ((nOptions = m_cDump[0].GetArchivingRetentionOptions()) & MEMORYDUMP_RETENTION_ENABLED) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT, ((nOptions & MEMORYDUMP_RETENTION_ENABLED) && (nOptions & MEMORYDUMP_RETENTION_STOPBYCOUNT)) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYTIME, ((nOptions & MEMORYDUMP_RETENTION_ENABLED) && (nOptions & MEMORYDUMP_RETENTION_STOPBYTIME) && m_cDump[0].GetArchivingRetentionByTime() > CTime::GetCurrentTime()) ? TRUE : FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPTIME), m_cDump[0].GetArchivingRetentionByTime());
	Spinbox_SetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPCOUNT), m_cDump[0].GetArchivingRetentionByCount());
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FILENAME)->SetWindowText(m_cDump[0].GetFileName());
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL_EXTENSION)->SetWindowText((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL) && m_cDump[0].GetFileExtension(MEMORYDUMP_FILEFORMAT_NORMAL, szExtensions[0])) ? (LPCTSTR)szExtensions[0] : EMPTYSTRING);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE_EXTENSION)->SetWindowText((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE) && m_cDump[0].GetFileExtension(MEMORYDUMP_FILEFORMAT_DESCRIPTIVE, szExtensions[1])) ? (LPCTSTR)szExtensions[1] : EMPTYSTRING);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED_EXTENSION)->SetWindowText((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED) && m_cDump[0].GetFileExtension(MEMORYDUMP_FILEFORMAT_DELIMITED, szExtensions[2])) ? (LPCTSTR)szExtensions[2] : EMPTYSTRING);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FILENAME)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS)->EnableWindow(((nFormats[1] = GetMemoryDumpsServiceSupport()->EnumMemoryDumpFileFormats(m_cDump[0].GetDataSource())) & (MEMORYDUMP_FILEFORMAT_NORMAL | MEMORYDUMP_FILEFORMAT_DESCRIPTIVE | MEMORYDUMP_FILEFORMAT_DELIMITED)) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL)->EnableWindow((nFormats[1] & MEMORYDUMP_FILEFORMAT_NORMAL) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE)->EnableWindow((nFormats[1] & MEMORYDUMP_FILEFORMAT_DESCRIPTIVE) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED)->EnableWindow((nFormats[1] & MEMORYDUMP_FILEFORMAT_DELIMITED) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_EXTENSIONS)->EnableWindow((nFormats[1] & (MEMORYDUMP_FILEFORMAT_NORMAL | MEMORYDUMP_FILEFORMAT_DESCRIPTIVE | MEMORYDUMP_FILEFORMAT_DELIMITED)) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL_EXTENSION)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE_EXTENSION)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED_EXTENSION)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STATUS)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STATUS));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPCOUNT)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYTIME)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STATUS));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYTIME));
}

VOID CMemoryDumpsArchivingPage::AdjustToPrivileges()
{
	AccessControl(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FILENAME, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL_EXTENSION, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE_EXTENSION, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED_EXTENSION, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STATUS, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPCOUNT, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYTIME, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPTIME, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
}

CMemoryDumpsFolder *CMemoryDumpsArchivingPage::GetParent() CONST
{
	return((CMemoryDumpsFolder *)CLocalePropertyPage::GetParent());
}

BOOL CMemoryDumpsArchivingPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cDump[0].Compare(&m_cDump[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CMemoryDumpsArchivingPage::Check(BOOL bAll) CONST
{
	CString  szFileName;
	CString  szExtensions[MEMORYDUMP_FILEFORMATS];

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FILENAME)->GetWindowText(szFileName);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL_EXTENSION)->GetWindowText(szExtensions[0]);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE_EXTENSION)->GetWindowText(szExtensions[1]);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED_EXTENSION)->GetWindowText(szExtensions[2]);
		return(((szFileName.IsEmpty() && !IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL) && !IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE) && !IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED) && !IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STATUS) && !IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT) && !IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYTIME)) || (!szFileName.IsEmpty() && (IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL) || IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE) || IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED)) && (!IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL) || !szExtensions[0].IsEmpty()) && (!IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE) || !szExtensions[1].IsEmpty()) && (!IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED) || !szExtensions[2].IsEmpty()) && (szExtensions[0] != szExtensions[1] || szExtensions[0].IsEmpty()) && (szExtensions[0] != szExtensions[2] || szExtensions[0].IsEmpty()) && (szExtensions[1] != szExtensions[2] || szExtensions[1].IsEmpty()))) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

void CMemoryDumpsArchivingPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CMemoryDumpsArchivingPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CMemoryDumpsArchivingPage::PostNcDestroy()
{
	m_cDump[0].Empty();
	m_cDump[1].Empty();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CMemoryDumpsArchivingPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CMemoryDumpsArchivingPage)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL, OnFileFormatNormal)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE, OnFileFormatDescriptive)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED, OnFileFormatDelimited)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STATUS, OnRetentionStatus)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT, OnRetentionStopByCount)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYTIME, OnRetentionStopByTime)
	ON_CONTROL(SBXN_CHANGE, IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPCOUNT, OnSpinchangeRetentionCount)
	ON_CONTROL(TSBXN_CHANGE, IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPTIME, OnSpinchangeRetentionTime)
	ON_EN_CHANGE(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FILENAME, OnEditchangeFileName)
	ON_EN_CHANGE(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL_EXTENSION, OnEditchangeFileExtensionNormal)
	ON_EN_CHANGE(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE_EXTENSION, OnEditchangeFileExtensionDescriptive)
	ON_EN_CHANGE(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED_EXTENSION, OnEditchangeFileExtensionDelimited)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsArchivingPage message handlers

BOOL CMemoryDumpsArchivingPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPCOUNT), MEMORYDUMPSSERVICE_ARCHIVING_MINIMUMDUMPS, MEMORYDUMPSSERVICE_ARCHIVING_MAXIMUMDUMPS);
	AdjustToPrivileges();
	return TRUE;
}

BOOL CMemoryDumpsArchivingPage::OnSetActive()
{
	for (GetParent()->GetInfo(&m_cDump[0]); GetParent()->IsWindowVisible(); )
	{
		ShowArchivingInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CMemoryDumpsArchivingPage::OnKillActive()
{
	GetParent()->SetInfo(&m_cDump[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CMemoryDumpsArchivingPage::OnFileFormatNormal()
{
	if (!IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL))
	{
		m_cDump[0].SetFileExtension(MEMORYDUMP_FILEFORMAT_NORMAL, (LPCTSTR)EMPTYSTRING);
		m_cDump[0].SetArchivingFileFormats(m_cDump[0].GetArchivingFileFormats() & ~MEMORYDUMP_FILEFORMAT_NORMAL);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL_EXTENSION)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL_EXTENSION)->EnableWindow(FALSE);
	}
	else
	{
		m_cDump[0].SetArchivingFileFormats(m_cDump[0].GetArchivingFileFormats() | MEMORYDUMP_FILEFORMAT_NORMAL);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL_EXTENSION)->EnableWindow();
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL_EXTENSION)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsArchivingPage::OnFileFormatDescriptive()
{
	if (!IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE))
	{
		m_cDump[0].SetFileExtension(MEMORYDUMP_FILEFORMAT_DESCRIPTIVE, (LPCTSTR)EMPTYSTRING);
		m_cDump[0].SetArchivingFileFormats(m_cDump[0].GetArchivingFileFormats() & ~MEMORYDUMP_FILEFORMAT_DESCRIPTIVE);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE_EXTENSION)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE_EXTENSION)->EnableWindow(FALSE);
	}
	else
	{
		m_cDump[0].SetArchivingFileFormats(m_cDump[0].GetArchivingFileFormats() | MEMORYDUMP_FILEFORMAT_DESCRIPTIVE);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE_EXTENSION)->EnableWindow();
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE_EXTENSION)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsArchivingPage::OnFileFormatDelimited()
{
	if (!IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED))
	{
		m_cDump[0].SetFileExtension(MEMORYDUMP_FILEFORMAT_DELIMITED, (LPCTSTR)EMPTYSTRING);
		m_cDump[0].SetArchivingFileFormats(m_cDump[0].GetArchivingFileFormats() & ~MEMORYDUMP_FILEFORMAT_DELIMITED);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED_EXTENSION)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED_EXTENSION)->EnableWindow(FALSE);
	}
	else
	{
		m_cDump[0].SetArchivingFileFormats(m_cDump[0].GetArchivingFileFormats() | MEMORYDUMP_FILEFORMAT_DELIMITED);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED_EXTENSION)->EnableWindow();
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED_EXTENSION)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsArchivingPage::OnRetentionStatus()
{
	for (m_cDump[0].SetArchivingRetentionOptions(0), m_cDump[0].SetArchivingRetentionByCount(0), m_cDump[0].SetArchivingRetentionByTime(0); IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STATUS); )
	{
		m_cDump[0].SetArchivingRetentionOptions(MEMORYDUMP_RETENTION_ENABLED);
		break;
	}
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT, FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYTIME, FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STATUS));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPCOUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYTIME)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STATUS));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsArchivingPage::OnRetentionStopByCount()
{
	m_cDump[0].SetArchivingRetentionOptions((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT)) ? (m_cDump[0].GetArchivingRetentionOptions() | MEMORYDUMP_RETENTION_STOPBYCOUNT) : (m_cDump[0].GetArchivingRetentionOptions() & ~MEMORYDUMP_RETENTION_STOPBYCOUNT));
	m_cDump[0].SetArchivingRetentionByCount((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT)) ? MEMORYDUMPSSERVICE_ARCHIVING_DEFAULTDUMPS : 0);
	Spinbox_SetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPCOUNT), MEMORYDUMPSSERVICE_ARCHIVING_DEFAULTDUMPS);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPCOUNT)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYCOUNT));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPCOUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsArchivingPage::OnRetentionStopByTime()
{
	CTimeKey  tTime;

	m_cDump[0].SetArchivingRetentionOptions((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYTIME)) ? (m_cDump[0].GetArchivingRetentionOptions() | MEMORYDUMP_RETENTION_STOPBYTIME) : (m_cDump[0].GetArchivingRetentionOptions() & ~MEMORYDUMP_RETENTION_STOPBYTIME));
	m_cDump[0].SetArchivingRetentionByTime((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYTIME)) ? (SECONDSPERDAY*((tTime.GetTime() + MEMORYDUMPSSERVICE_ARCHIVING_DEFAULTINTERVAL) / SECONDSPERDAY + 1) - 1) : 0);
	Timespinbox_SetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPTIME), CTimeKey(tTime.GetTime() + MEMORYDUMPSSERVICE_ARCHIVING_DEFAULTINTERVAL));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPBYTIME));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsArchivingPage::OnSpinchangeRetentionCount()
{
	m_cDump[0].SetArchivingRetentionByCount((UINT)Spinbox_GetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPCOUNT)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsArchivingPage::OnSpinchangeRetentionTime()
{
	m_cDump[0].SetArchivingRetentionByTime(SECONDSPERDAY*(Timespinbox_GetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_RETENTIONS_STOPTIME)).GetTime() / SECONDSPERDAY + 1) - 1);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsArchivingPage::OnEditchangeFileName()
{
	CString  szFileName;

	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FILENAME)->GetWindowText(szFileName);
	m_cDump[0].SetFileName(szFileName);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsArchivingPage::OnEditchangeFileExtensionNormal()
{
	CString  szExtension;

	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_NORMAL_EXTENSION)->GetWindowText(szExtension);
	m_cDump[0].SetFileExtension(MEMORYDUMP_FILEFORMAT_NORMAL, szExtension);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsArchivingPage::OnEditchangeFileExtensionDescriptive()
{
	CString  szExtension;

	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DESCRIPTIVE_EXTENSION)->GetWindowText(szExtension);
	m_cDump[0].SetFileExtension(MEMORYDUMP_FILEFORMAT_DESCRIPTIVE, szExtension);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsArchivingPage::OnEditchangeFileExtensionDelimited()
{
	CString  szExtension;

	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_ARCHIVINGPAGE_FORMATS_DELIMITED_EXTENSION)->GetWindowText(szExtension);
	m_cDump[0].SetFileExtension(MEMORYDUMP_FILEFORMAT_DELIMITED, szExtension);
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsNotificationsPage property page

IMPLEMENT_DYNCREATE(CMemoryDumpsNotificationsPage, CLocalePropertyPage)

CMemoryDumpsNotificationsPage::CMemoryDumpsNotificationsPage() : CLocalePropertyPage(CMemoryDumpsNotificationsPage::IDD)
{
	//{{AFX_DATA_INIT(CMemoryDumpsNotificationsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CMemoryDumpsNotificationsPage::SetInfo(CONST CMemoryDump *pDump, CONST CMemoryDump *pBackupDump, BOOL bUpdate)
{
	for (m_cDump[0].Copy(pDump); pBackupDump != (CMemoryDump *)NULL; )
	{
		m_cDump[1].Copy(pBackupDump);
		break;
	}
	if (IsWindow(GetSafeHwnd()) && bUpdate)
	{
		ShowNotificationsInfo();
		return;
	}
}

VOID CMemoryDumpsNotificationsPage::GetInfo(CMemoryDump *pDump) CONST
{
	pDump->Copy(&m_cDump[0]);
}

VOID CMemoryDumpsNotificationsPage::ShowNotificationsInfo()
{
	UINT  nOptions;
	UINT  nFormats[3];

	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_NORMAL, ((nFormats[0] = m_cDump[0].GetArchivingFileFormats()) & (nFormats[1] = m_cDump[0].GetNotificationsFileFormats()) & (nFormats[2] = GetMemoryDumpsServiceSupport()->EnumMemoryDumpFileFormats(m_cDump[0].GetDataSource())) & MEMORYDUMP_FILEFORMAT_NORMAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_DESCRIPTIVE, (nFormats[0] & nFormats[1] & nFormats[2] & MEMORYDUMP_FILEFORMAT_DESCRIPTIVE) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_DELIMITED, (nFormats[0] & nFormats[1] & nFormats[2] & MEMORYDUMP_FILEFORMAT_DELIMITED) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STATUS, ((nOptions = m_cDump[0].GetNotificationsRetentionOptions()) & MEMORYDUMP_RETENTION_ENABLED) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYCOUNT, ((nOptions & MEMORYDUMP_RETENTION_ENABLED) && (nOptions & MEMORYDUMP_RETENTION_STOPBYCOUNT)) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYTIME, ((nOptions & MEMORYDUMP_RETENTION_ENABLED) && (nOptions & MEMORYDUMP_RETENTION_STOPBYTIME) && m_cDump[0].GetNotificationsRetentionByTime() > CTime::GetCurrentTime()) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORT, (m_cDump[0].GetFTPPort() > 0) ? TRUE : FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORTNUMBER), m_cDump[0].GetFTPPort());
	Spinbox_SetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPCOUNT), m_cDump[0].GetNotificationsRetentionByCount());
	Timespinbox_SetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPTIME), m_cDump[0].GetNotificationsRetentionByTime());
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_LOCATION)->SetWindowText(ConstructURL(m_cDump[0].GetFTPServer(), m_cDump[0].GetFTPDirectory()));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_USERNAME)->SetWindowText(m_cDump[0].GetFTPUserName());
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PASSWORD)->SetWindowText(m_cDump[0].GetFTPPassword());
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_LOCATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_LOCATION)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_USERNAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_USERNAME)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PASSWORD_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PASSWORD)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORT)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORTNUMBER)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORT));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_NORMAL)->EnableWindow((nFormats[0] & nFormats[2] & MEMORYDUMP_FILEFORMAT_NORMAL) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_DESCRIPTIVE)->EnableWindow((nFormats[0] & nFormats[2] & MEMORYDUMP_FILEFORMAT_DESCRIPTIVE) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_DELIMITED)->EnableWindow((nFormats[0] & nFormats[2] & MEMORYDUMP_FILEFORMAT_DELIMITED) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STATUS)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYCOUNT)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STATUS));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPCOUNT)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYCOUNT));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYCOUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYCOUNT));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYTIME)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STATUS));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYTIME));
}

BOOL CMemoryDumpsNotificationsPage::ParseURL(LPCTSTR pszLocation, CString &szServer, CString &szDirectory, UINT &nPort) CONST
{
	INT  nPos[2];
	DWORD  dwService;
	CString  szLocation;
	CString  szFTPSite[3];
	INTERNET_PORT  iPort;

	for (szLocation = pszLocation, szServer.Empty(), szDirectory.Empty(), nPort = 0; !szLocation.IsEmpty(); )
	{
		for (nPos[0] = szLocation.Find(STRING(IDS_MEMORYDUMPS_FTPTRANSFER_RECIPIENTS_SEPARATOR_SEMICOLON)), nPos[1] = szLocation.Find(STRING(IDS_MEMORYDUMPS_FTPTRANSFER_RECIPIENTS_SEPARATOR_COMMA)); (nPos[0] < nPos[1] || nPos[1] < 0) && nPos[0] >= 0; )
		{
			szFTPSite[0] = szLocation.Left(nPos[0]);
			szLocation = szLocation.Mid(nPos[0]);
			szLocation = szLocation.Mid(lstrlen(STRING(IDS_MEMORYDUMPS_FTPTRANSFER_RECIPIENTS_SEPARATOR_SEMICOLON)));
			break;
		}
		if ((nPos[0] >= nPos[1] || nPos[0] < 0) && nPos[1] >= 0)
		{
			szFTPSite[0] = szLocation.Left(nPos[1]);
			szLocation = szLocation.Mid(nPos[1]);
			szLocation = szLocation.Mid(lstrlen(STRING(IDS_MEMORYDUMPS_FTPTRANSFER_RECIPIENTS_SEPARATOR_COMMA)));
		}
		if (nPos[0] < 0 && nPos[1] < 0)
		{
			szFTPSite[0] = szLocation;
			szLocation.Empty();
		}
		if (AfxParseURL(szFTPSite[0], dwService, szFTPSite[1], szFTPSite[2], iPort))
		{
			if (dwService == AFX_INET_SERVICE_FTP && (iPort == INTERNET_DEFAULT_FTP_PORT || !nPort || nPort == (UINT)iPort))
			{
				szServer += (!szServer.IsEmpty()) ? (STRING(IDS_MEMORYDUMPS_FTPTRANSFER_RECIPIENTS_SEPARATOR_SEMICOLON) + szFTPSite[1]) : szFTPSite[1];
				szDirectory += (!szDirectory.IsEmpty()) ? (STRING(IDS_MEMORYDUMPS_FTPTRANSFER_RECIPIENTS_SEPARATOR_SEMICOLON) + szFTPSite[2]) : szFTPSite[2];
				nPort = (iPort != INTERNET_DEFAULT_FTP_PORT) ? iPort : nPort;
				continue;
			}
		}
		szLocation = pszLocation;
		break;
	}
	return szLocation.IsEmpty();
}

CString CMemoryDumpsNotificationsPage::ConstructURL(LPCTSTR pszServer, LPCTSTR pszDirectory) CONST
{
	INT  nPos[2];
	CString  szServer;
	CString  szLocation;
	CString  szDirectory;

	for (szServer = pszServer, szDirectory = pszDirectory; !szServer.IsEmpty(); )
	{
		for (szLocation += (!szLocation.IsEmpty()) ? (CString(STRING(IDS_MEMORYDUMPS_FTPTRANSFER_RECIPIENTS_SEPARATOR_SEMICOLON)) + STRING(IDS_INTERNET_PROTOCOL_FTP)) : STRING(IDS_INTERNET_PROTOCOL_FTP); (nPos[0] = szServer.Find(STRING(IDS_MEMORYDUMPS_FTPTRANSFER_RECIPIENTS_SEPARATOR_SEMICOLON))) >= 0; )
		{
			szLocation += szServer.Left(nPos[0]);
			szServer = szServer.Mid(nPos[0]);
			szServer = szServer.Mid(lstrlen(STRING(IDS_MEMORYDUMPS_FTPTRANSFER_RECIPIENTS_SEPARATOR_SEMICOLON)));
			break;
		}
		if (nPos[0] < 0)
		{
			szLocation += szServer;
			szServer.Empty();
		}
		if ((nPos[1] = szDirectory.Find(STRING(IDS_MEMORYDUMPS_FTPTRANSFER_RECIPIENTS_SEPARATOR_SEMICOLON))) >= 0)
		{
			szLocation += szDirectory.Left(nPos[1]);
			szDirectory = szDirectory.Mid(nPos[1]);
			szDirectory = szDirectory.Mid(lstrlen(STRING(IDS_MEMORYDUMPS_FTPTRANSFER_RECIPIENTS_SEPARATOR_SEMICOLON)));
		}
		if (nPos[1] < 0)
		{
			szLocation += szDirectory;
			szDirectory.Empty();
		}
	}
	return szLocation;
}

VOID CMemoryDumpsNotificationsPage::AdjustToPrivileges()
{
	AccessControl(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_LOCATION, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_USERNAME, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PASSWORD, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORT, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORTNUMBER, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_NORMAL, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_DESCRIPTIVE, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_DELIMITED, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STATUS, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYCOUNT, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPCOUNT, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYTIME, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPTIME, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
}

CMemoryDumpsFolder *CMemoryDumpsNotificationsPage::GetParent() CONST
{
	return((CMemoryDumpsFolder *)CLocalePropertyPage::GetParent());
}

BOOL CMemoryDumpsNotificationsPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cDump[0].Compare(&m_cDump[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CMemoryDumpsNotificationsPage::Check(BOOL bAll) CONST
{
	UINT  nPort;
	CString  szServer;
	CString  szDirectory;
	CString  szLocation;
	CString  szUserName;
	CString  szPassword;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_LOCATION)->GetWindowText(szLocation);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_USERNAME)->GetWindowText(szUserName);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PASSWORD)->GetWindowText(szPassword);
		return((ParseURL(szLocation, szServer, szDirectory, nPort) && ((szLocation.IsEmpty() && szUserName.IsEmpty() && szPassword.IsEmpty() && !IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORT) && !IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_NORMAL) && !IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_DESCRIPTIVE) && !IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_DELIMITED) && !IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STATUS)) || (!szLocation.IsEmpty() && (szPassword.IsEmpty() || !szUserName.IsEmpty())))) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

void CMemoryDumpsNotificationsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CMemoryDumpsNotificationsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CMemoryDumpsNotificationsPage::PostNcDestroy()
{
	m_cDump[0].Empty();
	m_cDump[1].Empty();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CMemoryDumpsNotificationsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CMemoryDumpsNotificationsPage)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_NORMAL, OnFileFormatNormal)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_DESCRIPTIVE, OnFileFormatDescriptive)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_DELIMITED, OnFileFormatDelimited)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORT, OnPort)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STATUS, OnRetentionStatus)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYCOUNT, OnRetentionStopByCount)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYTIME, OnRetentionStopByTime)
	ON_CONTROL(SBXN_CHANGE, IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORTNUMBER, OnSpinchangePort)
	ON_CONTROL(SBXN_CHANGE, IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPCOUNT, OnSpinchangeRetentionCount)
	ON_CONTROL(TSBXN_CHANGE, IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPTIME, OnSpinchangeRetentionTime)
	ON_EN_CHANGE(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_LOCATION, OnEditchangeLocation)
	ON_EN_CHANGE(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_USERNAME, OnEditchangeUserName)
	ON_EN_CHANGE(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PASSWORD, OnEditchangePassword)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsNotificationsPage message handlers

BOOL CMemoryDumpsNotificationsPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORTNUMBER), MEMORYDUMPSSERVICE_NOTIFICATIONS_FIRSTPORT, MEMORYDUMPSSERVICE_NOTIFICATIONS_LASTPORT);
	Spinbox_SetRange(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPCOUNT), MEMORYDUMPSSERVICE_NOTIFICATIONS_MINIMUMDUMPS, MEMORYDUMPSSERVICE_NOTIFICATIONS_MAXIMUMDUMPS);
	AdjustToPrivileges();
	return TRUE;
}

BOOL CMemoryDumpsNotificationsPage::OnSetActive()
{
	for (GetParent()->GetInfo(&m_cDump[0]); GetParent()->IsWindowVisible(); )
	{
		ShowNotificationsInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CMemoryDumpsNotificationsPage::OnKillActive()
{
	GetParent()->SetInfo(&m_cDump[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CMemoryDumpsNotificationsPage::OnFileFormatNormal()
{
	m_cDump[0].SetNotificationsFileFormats((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_NORMAL)) ? (m_cDump[0].GetNotificationsFileFormats() | MEMORYDUMP_FILEFORMAT_NORMAL) : (m_cDump[0].GetNotificationsFileFormats() & ~MEMORYDUMP_FILEFORMAT_NORMAL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsNotificationsPage::OnFileFormatDescriptive()
{
	m_cDump[0].SetNotificationsFileFormats((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_DESCRIPTIVE)) ? (m_cDump[0].GetNotificationsFileFormats() | MEMORYDUMP_FILEFORMAT_DESCRIPTIVE) : (m_cDump[0].GetNotificationsFileFormats() & ~MEMORYDUMP_FILEFORMAT_DESCRIPTIVE));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsNotificationsPage::OnFileFormatDelimited()
{
	m_cDump[0].SetNotificationsFileFormats((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_FORMATS_DELIMITED)) ? (m_cDump[0].GetNotificationsFileFormats() | MEMORYDUMP_FILEFORMAT_DELIMITED) : (m_cDump[0].GetNotificationsFileFormats() & ~MEMORYDUMP_FILEFORMAT_DELIMITED));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsNotificationsPage::OnPort()
{
	m_cDump[0].SetFTPPort((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORT)) ? MEMORYDUMPSSERVICE_NOTIFICATIONS_DEFAULTPORT : 0);
	Spinbox_SetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORTNUMBER), MEMORYDUMPSSERVICE_NOTIFICATIONS_DEFAULTPORT);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORTNUMBER)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORT));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORTNUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsNotificationsPage::OnRetentionStatus()
{
	for (m_cDump[0].SetNotificationsRetentionOptions(0), m_cDump[0].SetNotificationsRetentionByCount(0), m_cDump[0].SetNotificationsRetentionByTime(0); IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STATUS); )
	{
		m_cDump[0].SetNotificationsRetentionOptions(MEMORYDUMP_RETENTION_ENABLED);
		break;
	}
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYCOUNT, FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYTIME, FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYCOUNT)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STATUS));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPCOUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYCOUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYTIME)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STATUS));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsNotificationsPage::OnRetentionStopByCount()
{
	m_cDump[0].SetNotificationsRetentionOptions((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYCOUNT)) ? (m_cDump[0].GetNotificationsRetentionOptions() | MEMORYDUMP_RETENTION_STOPBYCOUNT) : (m_cDump[0].GetNotificationsRetentionOptions() & ~MEMORYDUMP_RETENTION_STOPBYCOUNT));
	m_cDump[0].SetNotificationsRetentionByCount((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYCOUNT)) ? MEMORYDUMPSSERVICE_NOTIFICATIONS_DEFAULTDUMPS : 0);
	Spinbox_SetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPCOUNT), MEMORYDUMPSSERVICE_NOTIFICATIONS_DEFAULTDUMPS);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYCOUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYCOUNT));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPCOUNT)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYCOUNT));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPCOUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsNotificationsPage::OnRetentionStopByTime()
{
	CTimeKey  tTime;

	m_cDump[0].SetNotificationsRetentionOptions((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYTIME)) ? (m_cDump[0].GetNotificationsRetentionOptions() | MEMORYDUMP_RETENTION_STOPBYTIME) : (m_cDump[0].GetNotificationsRetentionOptions() & ~MEMORYDUMP_RETENTION_STOPBYTIME));
	m_cDump[0].SetNotificationsRetentionByTime((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYTIME)) ? (SECONDSPERDAY*((tTime.GetTime() + MEMORYDUMPSSERVICE_NOTIFICATIONS_DEFAULTINTERVAL) / SECONDSPERDAY + 1) - 1) : 0);
	Timespinbox_SetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPTIME), CTimeKey(tTime.GetTime() + MEMORYDUMPSSERVICE_NOTIFICATIONS_DEFAULTINTERVAL));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPBYTIME));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsNotificationsPage::OnSpinchangeRetentionCount()
{
	m_cDump[0].SetNotificationsRetentionByCount((UINT)Spinbox_GetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPCOUNT)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsNotificationsPage::OnSpinchangeRetentionTime()
{
	m_cDump[0].SetNotificationsRetentionByTime(SECONDSPERDAY*(Timespinbox_GetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_RETENTIONS_STOPTIME)).GetTime() / SECONDSPERDAY + 1) - 1);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsNotificationsPage::OnEditchangeLocation()
{
	UINT  nPort;
	CString  szServer;
	CString  szLocation;
	CString  szDirectory;

	for (GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_LOCATION)->GetWindowText(szLocation); ParseURL(szLocation, szServer, szDirectory, nPort); )
	{
		for (m_cDump[0].SetFTPServer(szServer), m_cDump[0].SetFTPDirectory(szDirectory); !IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORT); )
		{
			m_cDump[0].SetFTPPort(nPort);
			break;
		}
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsNotificationsPage::OnEditchangeUserName()
{
	CString  szUserName;

	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_USERNAME)->GetWindowText(szUserName);
	m_cDump[0].SetFTPUserName(szUserName);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsNotificationsPage::OnEditchangePassword()
{
	CString  szPassword;

	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PASSWORD)->GetWindowText(szPassword);
	m_cDump[0].SetFTPPassword(szPassword);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsNotificationsPage::OnSpinchangePort()
{
	m_cDump[0].SetFTPPort((UINT)Spinbox_GetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_NOTIFICATIONSPAGE_PORTNUMBER)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsFTPTransfersPage property page

IMPLEMENT_DYNCREATE(CMemoryDumpsFTPTransfersPage, CLocalePropertyPage)

CMemoryDumpsFTPTransfersPage::CMemoryDumpsFTPTransfersPage() : CLocalePropertyPage(CMemoryDumpsFTPTransfersPage::IDD)
{
	//{{AFX_DATA_INIT(CMemoryDumpsFTPTransfersPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CMemoryDumpsFTPTransfersPage::SetInfo(CONST CMemoryDump *pDump, CONST CMemoryDump *pBackupDump, BOOL bUpdate)
{
	for (m_cDump[0].Copy(pDump); pBackupDump != (CMemoryDump *)NULL; )
	{
		m_cDump[1].Copy(pBackupDump);
		break;
	}
	if (IsWindow(GetSafeHwnd()) && bUpdate)
	{
		ShowFTPTransfersInfo();
		return;
	}
}

VOID CMemoryDumpsFTPTransfersPage::GetInfo(CMemoryDump *pDump) CONST
{
	pDump->Copy(&m_cDump[0]);
}

BOOL CMemoryDumpsFTPTransfersPage::EmptyDumpsQueue() CONST
{
	return IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RESETQUEUE);
}

VOID CMemoryDumpsFTPTransfersPage::ShowFTPTransfersInfo()
{
	UINT  nRetries;
	UINT  nAudition;
	CTimeSpan  tRetryInterval;

	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_NEVER, (m_cDump[0].GetFTPRetryInfo(nRetries, tRetryInterval) && !nRetries) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_CONTINOUSLY, (nRetries == (UINT)-1) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED, (nRetries > 0 && nRetries != (UINT)-1) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RESETQUEUE, FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_SAVEONEXIT, (m_cDump[0].GetFTPQueueFlag()) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_AUDITION_NONE, ((nAudition = m_cDump[0].GetFTPAudition()) == MEMORYDUMP_AUDITION_NONE) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_AUDITION_ALL, (nAudition == MEMORYDUMP_AUDITION_ALL) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_AUDITION_FAILURES, (nAudition == MEMORYDUMP_AUDITION_FAILURES) ? TRUE : FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_PERIOD), tRetryInterval.GetTotalSeconds() / SECONDSPERMINUTE);
	Spinbox_SetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED_COUNT), nRetries);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_BEHAVIOR)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_BEHAVIOR_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_NEVER)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_CONTINOUSLY)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_CONTINOUSLY) || IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_PERIOD)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_CONTINOUSLY) || IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_PERIOD_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_CONTINOUSLY) || IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RESETQUEUE)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_SAVEONEXIT)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_AUDITION)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_AUDITION_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_AUDITION_NONE)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_AUDITION_ALL)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_AUDITION_FAILURES)->EnableWindow();
}

VOID CMemoryDumpsFTPTransfersPage::AdjustToPrivileges()
{
	AccessControl(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_NEVER, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_CONTINOUSLY, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED_COUNT, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_PERIOD, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RESETQUEUE, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_SAVEONEXIT, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_AUDITION_NONE, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_AUDITION_ALL, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_AUDITION_FAILURES, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
}

CMemoryDumpsFolder *CMemoryDumpsFTPTransfersPage::GetParent() CONST
{
	return((CMemoryDumpsFolder *)CLocalePropertyPage::GetParent());
}

BOOL CMemoryDumpsFTPTransfersPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cDump[0].Compare(&m_cDump[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CMemoryDumpsFTPTransfersPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CMemoryDumpsFTPTransfersPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CMemoryDumpsFTPTransfersPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CMemoryDumpsFTPTransfersPage::PostNcDestroy()
{
	m_cDump[0].Empty();
	m_cDump[1].Empty();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CMemoryDumpsFTPTransfersPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CMemoryDumpsFTPTransfersPage)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_NEVER, OnRetryNone)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_CONTINOUSLY, OnRetryContinously)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED, OnRetryLimited)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RESETQUEUE, OnResetQueue)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_SAVEONEXIT, OnSaveOnExit)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_AUDITION_NONE, OnAuditionNone)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_AUDITION_ALL, OnAuditionAll)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_AUDITION_FAILURES, OnAuditionFailures)
	ON_CONTROL(SBXN_CHANGE, IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED_COUNT, OnSpinchangeRetries)
	ON_CONTROL(SBXN_CHANGE, IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_PERIOD, OnSpinchangeRetryInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsFTPTransfersPage message handlers

BOOL CMemoryDumpsFTPTransfersPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED_COUNT), MEMORYDUMPSSERVICE_FTPTRANSFERS_MINIMUMRETRIES, MEMORYDUMPSSERVICE_FTPTRANSFERS_MAXIMUMRETRIES);
	Spinbox_SetRange(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_PERIOD), MEMORYDUMPSSERVICE_FTPTRANSFERS_MINIMUMRETRYINTERVAL, MEMORYDUMPSSERVICE_FTPTRANSFERS_MAXIMUMRETRYINTERVAL);
	AdjustToPrivileges();
	return TRUE;
}

BOOL CMemoryDumpsFTPTransfersPage::OnSetActive()
{
	for (GetParent()->GetInfo(&m_cDump[0]); GetParent()->IsWindowVisible(); )
	{
		ShowFTPTransfersInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CMemoryDumpsFTPTransfersPage::OnKillActive()
{
	GetParent()->SetInfo(&m_cDump[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CMemoryDumpsFTPTransfersPage::OnRetryNone()
{
	m_cDump[0].SetFTPRetryInfo(0, 0);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_NEVER, TRUE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_CONTINOUSLY, FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED, FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_PERIOD)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_PERIOD_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsFTPTransfersPage::OnRetryContinously()
{
	m_cDump[0].SetFTPRetryInfo(-1, SECONDSPERMINUTE*MEMORYDUMPSSERVICE_FTPTRANSFERS_DEFAULTRETRYINTERVAL);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_NEVER, FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_CONTINOUSLY, TRUE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_PERIOD), MEMORYDUMPSSERVICE_FTPTRANSFERS_DEFAULTRETRYINTERVAL);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_PERIOD)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_PERIOD_STATIC)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsFTPTransfersPage::OnRetryLimited()
{
	m_cDump[0].SetFTPRetryInfo(MEMORYDUMPSSERVICE_FTPTRANSFERS_DEFAULTRETRIES, SECONDSPERMINUTE*MEMORYDUMPSSERVICE_FTPTRANSFERS_DEFAULTRETRYINTERVAL);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_NEVER, FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_CONTINOUSLY, FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED_COUNT), MEMORYDUMPSSERVICE_FTPTRANSFERS_DEFAULTRETRIES);
	Spinbox_SetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_PERIOD), MEMORYDUMPSSERVICE_FTPTRANSFERS_DEFAULTRETRYINTERVAL);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED_COUNT)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_PERIOD)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_PERIOD_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED_COUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsFTPTransfersPage::OnResetQueue()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsFTPTransfersPage::OnSaveOnExit()
{
	m_cDump[0].SetFTPQueueFlag(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_SAVEONEXIT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsFTPTransfersPage::OnAuditionNone()
{
	m_cDump[0].SetFTPAudition(MEMORYDUMP_AUDITION_NONE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsFTPTransfersPage::OnAuditionAll()
{
	m_cDump[0].SetFTPAudition(MEMORYDUMP_AUDITION_ALL);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsFTPTransfersPage::OnAuditionFailures()
{
	m_cDump[0].SetFTPAudition(MEMORYDUMP_AUDITION_FAILURES);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsFTPTransfersPage::OnSpinchangeRetries()
{
	UINT  nRetries;
	CTimeSpan  tRetryInterval;

	m_cDump[0].GetFTPRetryInfo(nRetries, tRetryInterval);
	m_cDump[0].SetFTPRetryInfo((UINT)Spinbox_GetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_LIMITED_COUNT)), tRetryInterval);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsFTPTransfersPage::OnSpinchangeRetryInterval()
{
	UINT  nRetries;
	CTimeSpan  tRetryInterval;

	m_cDump[0].GetFTPRetryInfo(nRetries, tRetryInterval);
	m_cDump[0].SetFTPRetryInfo(nRetries, SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_FTPTRANSFERSPAGE_RETRY_INTERVAL_PERIOD)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsFolderTabCtrl

IMPLEMENT_DYNCREATE(CMemoryDumpsFolderTabCtrl, CTabCtrl)

CMemoryDumpsFolder *CMemoryDumpsFolderTabCtrl::GetParent() CONST
{
	return((CMemoryDumpsFolder *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CMemoryDumpsFolderTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CMemoryDumpsFolderTabCtrl)
	ON_WM_GETDLGCODE()
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsFolderTabCtrl message handlers

UINT CMemoryDumpsFolderTabCtrl::OnGetDlgCode()
{
	return CTabCtrl::OnGetDlgCode() | DLGC_WANTTAB;
}

void CMemoryDumpsFolderTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CWnd  *pWnd;

	if (nChar == VK_TAB)
	{
		if ((pWnd = GetParent()->GetParent()->GetNextDlgTabItem(GetParent(), (HIBYTE(GetKeyState(VK_SHIFT))) ? TRUE : FALSE)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsFolder

IMPLEMENT_DYNCREATE(CMemoryDumpsFolder, CLocalePropertySheetDialog)

CMemoryDumpsFolder::CMemoryDumpsFolder() : CLocalePropertySheetDialog()
{
	AddPage(&m_pageArchiving);
	AddPage(&m_pageNotifications);
	AddPage(&m_pageFTPTransfers);
}

BOOL CMemoryDumpsFolder::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	INT  nIndex;

	if (CLocalePropertySheetDialog::Create(pParentWnd, WS_CHILD | WS_TABSTOP))
	{
		for (nIndex = GetPageCount() - 1, m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()); nIndex >= 0; nIndex--)
		{
			SetActivePage(nIndex);
			continue;
		}
		MoveWindow(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
		ShowWindow(SW_SHOWNORMAL);
		return TRUE;
	}
	return FALSE;
}

VOID CMemoryDumpsFolder::SetInfo(CONST CMemoryDump *pDump, BOOL bUpdate)
{
	CMemoryDump  cDump;

	cDump.Copy(pDump);
	m_pageArchiving.SetInfo(&cDump, (CMemoryDump *)NULL, bUpdate);
	m_pageNotifications.SetInfo(&cDump, (CMemoryDump *)NULL, bUpdate);
	m_pageFTPTransfers.SetInfo(&cDump, (CMemoryDump *)NULL, bUpdate);
}
VOID CMemoryDumpsFolder::SetInfo(CONST CMemoryDump *pDump, CONST CMemoryDump *pBackupDump)
{
	m_pageArchiving.SetInfo(pDump, pBackupDump);
	m_pageNotifications.SetInfo(pDump, pBackupDump);
	m_pageFTPTransfers.SetInfo(pDump, pBackupDump);
}

VOID CMemoryDumpsFolder::GetInfo(CMemoryDump *pDump) CONST
{
	CMemoryDump  cDump;

	if (GetActivePage()->GetSafeHwnd() == m_pageArchiving.GetSafeHwnd())
	{
		m_pageArchiving.GetInfo(&cDump);
		pDump->Copy(&cDump);
		return;
	}
	if (GetActivePage()->GetSafeHwnd() == m_pageNotifications.GetSafeHwnd())
	{
		m_pageNotifications.GetInfo(&cDump);
		pDump->Copy(&cDump);
		return;
	}
	if (GetActivePage()->GetSafeHwnd() == m_pageFTPTransfers.GetSafeHwnd())
	{
		m_pageFTPTransfers.GetInfo(&cDump);
		pDump->Copy(&cDump);
		return;
	}
}

BOOL CMemoryDumpsFolder::EmptyDumpsQueue() CONST
{
	return m_pageFTPTransfers.EmptyDumpsQueue();
}

CMemoryDumpsServiceDialog *CMemoryDumpsFolder::GetParent() CONST
{
	return((CMemoryDumpsServiceDialog *)CLocalePropertySheetDialog::GetParent());
}

VOID CMemoryDumpsFolder::RepositionButtons()
{
	GetDlgItem(IDOK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDCANCEL)->ShowWindow(SW_HIDE);
	GetDlgItem(ID_APPLY_NOW)->ShowWindow(SW_HIDE);
	GetDlgItem(IDHELP)->ShowWindow(SW_HIDE);
}

BOOL CMemoryDumpsFolder::Check(BOOL bModified) CONST
{
	return GetParent()->Check(bModified, CLocalePropertySheetDialog::Check(FALSE));
}
BOOL CMemoryDumpsFolder::Check(BOOL bModified, BOOL bChecked) CONST
{
	return((bChecked) ? CLocalePropertySheetDialog::Check(bModified) : FALSE);
}

BEGIN_MESSAGE_MAP(CMemoryDumpsFolder, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CMemoryDumpsFolder)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsFolder message handlers

void CMemoryDumpsFolder::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(m_wndTabCtrl.GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CLocalePropertySheetDialog::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsServiceDialog dialog

IMPLEMENT_DYNCREATE(CMemoryDumpsServiceDialog, CLocaleDialog)

CMemoryDumpsServiceDialog::CMemoryDumpsServiceDialog(CWnd *pParentWnd) : CLocaleDialog(CMemoryDumpsServiceDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CMemoryDumpsServiceDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CMemoryDumpsServiceDialog::Initialize()
{
	CMemoryDumps  pDumps;

	for (m_nLocked = 0; (m_pwndFolderCtrl = new CMemoryDumpsFolder) && GetMemoryDumpsService()->GetAvailabilityInfo(m_nCode, m_tStartTime, m_tStopTime) && GetMemoryDumpsService()->GetCharset(m_nCharset) && GetMemoryDumpsService()->GetMemoryDumps(pDumps); ) return SetDumps(pDumps);
	return FALSE;
}

BOOL CMemoryDumpsServiceDialog::SetDumps(CONST CMemoryDumps &pDumps)
{
	return m_pDumps[0].Copy(&pDumps) && m_pDumps[1].Copy(&pDumps) && m_pDumps[2].Copy(&pDumps);
}

BOOL CMemoryDumpsServiceDialog::GetDumps(CMemoryDumps &pDumps) CONST
{
	return pDumps.Copy(&m_pDumps[0]);
}

BOOL CMemoryDumpsServiceDialog::EnumDumps()
{
	INT  nDump;
	INT  nDumps;
	CMemoryDump  *pDump;

	for (nDump = 0, nDumps = (INT)m_pDumps[0].GetSize(); nDump < nDumps; nDump++)
	{
		if ((pDump = m_pDumps[0].GetAt(nDump))) SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pDump->GetName());
		continue;
	}
	return TRUE;
}

BOOL CMemoryDumpsServiceDialog::EnumDumpSources()
{
	INT  nSource;
	INT  nSources;
	CStringArray  szSources;

	for (nSource = 0, nSources = GetMemoryDumpsServiceSupport()->EnumMemoryDumpSources(szSources); nSource < nSources; nSource++)
	{
		SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_SOURCE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSources.GetAt(nSource));
		continue;
	}
	return((SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_SOURCE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CMemoryDumpsServiceDialog::EnumDumpFormatTypes()
{
	INT  nType;
	INT  nTypes;
	CStringArray  szTypes;

	for (nType = 0, nTypes = GetMemoryDumpsServiceSupport()->EnumMemoryDumpFormatTypes(szTypes); nType < nTypes; nType++)
	{
		SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FORMATTYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szTypes.GetAt(nType));
		continue;
	}
	return((SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FORMATTYPE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CMemoryDumpsServiceDialog::ShowServiceInfo()
{
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_STATUS, (!(m_nCode & MEMORYDUMPS_SERVICE_NOAVAILABILITY)) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_CHARSET_ASCII, (m_nCharset == MEMORYDUMPS_SERVICE_ASCIICHARSET) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_CHARSET_UNICODE, (m_nCharset == MEMORYDUMPS_SERVICE_UNICODECHARSET) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_UNLIMITED, (m_nCode & MEMORYDUMPS_SERVICE_UNLIMITEDAVAILABILITY) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY, (m_nCode & MEMORYDUMPS_SERVICE_DAILYAVAILABILITY) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_WORKINGDAYS, (m_nCode & MEMORYDUMPS_SERVICE_WORKINGDAYSAVAILABILITY) ? TRUE : FALSE);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_AUDIT, (m_nCode & MEMORYDUMPS_SERVICE_AUDITAVAILABILITY) ? TRUE : FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STARTTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + m_tStartTime.GetTotalSeconds() % SECONDSPERDAY));
	Timespinbox_SetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STOPTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + m_tStopTime.GetTotalSeconds() % SECONDSPERDAY));
	SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_SETCURSEL, max(SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_GETCURSEL), 0));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_STATUS_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_STATUS)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_CHARSET)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_CHARSET_ASCII)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_CHARSET_UNICODE)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_UNLIMITED)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_WORKINGDAYS)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_AUDIT)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY) || IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_WORKINGDAYS));
}

VOID CMemoryDumpsServiceDialog::SetDumpInfo(BOOL bInitialize)
{
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	CString  szAddress[2];
	CString  szDataSource;
	CString  szFormatType;
	CMemoryDump  *pDump[2];

	if ((pDump[0] = new CMemoryDump))
	{
		for (Lock(), UpdateDumpInfo((pDump[1] = (FindDumpInfo()) ? FindDumpInfo() : pDump[0]), bInitialize), GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_LOWADDRESS)->SetWindowText(EMPTYSTRING), GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_HIGHADDRESS)->SetWindowText(EMPTYSTRING), GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); pDump[1] != (CMemoryDump *)NULL; )
		{
			SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDump[1]->GetName()));
			SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_SOURCE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_SOURCE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((!pDump[1]->GetName().IsEmpty()) ? (LPCTSTR)GetMemoryDumpsServiceSupport()->TranslateMemoryDumpSource(pDump[1]->GetDataSource()) : EMPTYSTRING)));
			SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FORMATTYPE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FORMATTYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((!pDump[1]->GetName().IsEmpty()) ? (LPCTSTR)GetMemoryDumpsServiceSupport()->TranslateMemoryDumpFormatType(pDump[1]->GetDataSource()) : EMPTYSTRING)));
			GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_LOWADDRESS)->SetWindowText((!pDump[1]->GetName().IsEmpty() && pDump[1]->GetDataAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]) && TranslateDumpAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1], szAddress[0], szAddress[1])) ? szAddress[0] : EMPTYSTRING);
			GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_HIGHADDRESS)->SetWindowText((!pDump[1]->GetName().IsEmpty() && pDump[1]->GetDataAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]) && TranslateDumpAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1], szAddress[0], szAddress[1])) ? szAddress[1] : EMPTYSTRING);
			CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_AUDIT, (!pDump[1]->GetName().IsEmpty()) ? pDump[1]->GetAuditionFlag() : FALSE);
			break;
		}
		delete pDump[0];
		Unlock();
	}
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_SOURCE)->GetWindowText(szDataSource);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FORMATTYPE)->GetWindowText(szFormatType);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_ADDRESS_STATIC)->ShowWindow((GetMemoryDumpsServiceSupport()->IsMemoryDumpByAddressRange(GetMemoryDumpsServiceSupport()->TranslateMemoryDumpSource(szDataSource))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_REGISTER_STATIC)->ShowWindow((GetMemoryDumpsServiceSupport()->IsMemoryDumpByRegisters(GetMemoryDumpsServiceSupport()->TranslateMemoryDumpSource(szDataSource))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_SOURCE_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_SOURCE)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_ADDRESS_STATIC)->EnableWindow((GetMemoryDumpsServiceSupport()->IsMemoryDumpByAddressRange(GetMemoryDumpsServiceSupport()->TranslateMemoryDumpSource(szDataSource))) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_REGISTER_STATIC)->EnableWindow((GetMemoryDumpsServiceSupport()->IsMemoryDumpByRegisters(GetMemoryDumpsServiceSupport()->TranslateMemoryDumpSource(szDataSource))) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_LOWADDRESS)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_ADDRESS_TO_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_ADDRESS_COMMENTS)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_HIGHADDRESS)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_AUDIT)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FORMATTYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FORMATTYPE)->EnableWindow();
	Update(FALSE, m_pwndFolderCtrl->Check(FALSE));
}

VOID CMemoryDumpsServiceDialog::UpdateDumpInfo(CONST CMemoryDump *pDump, BOOL bInitialize)
{
	INT  nDump;
	INT  nDumps;
	CMemoryDump  *pMemoryDump;

	for (; !pDump->GetName().IsEmpty() && bInitialize; )
	{
		if ((pMemoryDump = m_pDumps[2].GetAt(m_pDumps[2].Find(pDump->GetName()))))
		{
			pMemoryDump->Copy(pDump);
			break;
		}
		if ((pMemoryDump = new CMemoryDump))
		{
			for (pMemoryDump->Copy(pDump); m_pDumps[2].Add(pMemoryDump) < 0; )
			{
				delete pMemoryDump;
				break;
			}
		}
		break;
	}
	for (nDump = 0, nDumps = (INT)m_pDumps[2].GetSize(), m_pwndFolderCtrl->SetInfo(pDump, (!pDump->GetName().IsEmpty()) ? m_pDumps[2].GetAt(m_pDumps[2].Find(pDump->GetName())) : ((bInitialize) ? pDump : (CONST CMemoryDump *) NULL)); nDump < nDumps; nDump++)
	{
		if ((pMemoryDump = m_pDumps[2].GetAt(nDump)) && m_pDumps[0].Find(pMemoryDump->GetName()) < 0)
		{
			m_pDumps[2].RemoveAt(nDump);
			delete pMemoryDump;
			nDumps--;
			nDump--;
		}
	}
}

BOOL CMemoryDumpsServiceDialog::GetDumpInfo(CMemoryDump *pDump) CONST
{
	UINT  nAddress[2][2];
	CMemoryDump  *pMemoryDump[2];

	if ((pMemoryDump[0] = new CMemoryDump))
	{
		for (m_pwndFolderCtrl->GetInfo(pMemoryDump[0]); (pMemoryDump[1] = FindDumpInfo()) && pMemoryDump[0]->GetName() == pMemoryDump[1]->GetName(); )
		{
			for (pMemoryDump[0]->SetName(pMemoryDump[1]->GetName()), pMemoryDump[0]->SetDataSource(pMemoryDump[1]->GetDataSource()), pMemoryDump[0]->SetDataAddressBitWidth(pMemoryDump[1]->GetDataAddressBitWidth()), pMemoryDump[0]->SetDataBitWidth(pMemoryDump[1]->GetDataBitWidth()), pMemoryDump[0]->SetAuditionFlag(pMemoryDump[1]->GetAuditionFlag()); pMemoryDump[1]->GetDataAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]); )
			{
				pMemoryDump[0]->SetDataAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]);
				break;
			}
			pDump->Copy(pMemoryDump[0]);
			delete pMemoryDump[0];
			return TRUE;
		}
		for (; pDump != (CMemoryDump *)NULL && !pMemoryDump[1]; )
		{
			pDump->Copy(pMemoryDump[0]);
			break;
		}
		delete pMemoryDump[0];
	}
	return FALSE;
}

CMemoryDump *CMemoryDumpsServiceDialog::FindDumpInfo() CONST
{
	CString  szName;

	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME)->GetWindowText(szName);
	return m_pDumps[0].GetAt(m_pDumps[0].Find(szName));
}

BOOL CMemoryDumpsServiceDialog::TranslateDumpAddressRange(LPCTSTR pszStartAddress, LPCTSTR pszEndAddress, UINT &nStartPage, UINT &nStartAddress, UINT &nEndPage, UINT &nEndAddress) CONST
{
	INT  nDigits;
	UINT  nRange[2][2];
	CString  szAddress[2];
	CStringTools  cStringTools;

	for (szAddress[0] = pszStartAddress, szAddress[1] = pszEndAddress, szAddress[0].MakeUpper(), szAddress[1].MakeUpper(), GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nDigits = cStringTools.ConvertUIntToString(nRange[1][1] - nRange[1][0], 16).GetLength(); lstrlen(pszStartAddress) > 0 && lstrlen(pszEndAddress) > 0; )
	{
		nStartPage = (nDigits < szAddress[0].GetLength()) ? (UINT)GetDatabase()->ParseValue(szAddress[0].Left(szAddress[0].GetLength() - nDigits), 16) : 0;
		nEndPage = (nDigits < szAddress[1].GetLength()) ? (UINT)GetDatabase()->ParseValue(szAddress[1].Left(szAddress[1].GetLength() - nDigits), 16) : 0;
		nStartAddress = (UINT)GetDatabase()->ParseValue(szAddress[0].Right(min(szAddress[0].GetLength(), nDigits)), 16);
		nEndAddress = (UINT)GetDatabase()->ParseValue(szAddress[1].Right(min(szAddress[1].GetLength(), nDigits)), 16);
		return((szAddress[0] == ((szAddress[0].GetLength() > nDigits) ? cStringTools.ConvertUIntToPaddedString(nStartPage, nDigits, 16) : EMPTYSTRING) + cStringTools.ConvertUIntToPaddedString(nStartAddress, nDigits, 16) && szAddress[1] == ((szAddress[1].GetLength() > nDigits) ? cStringTools.ConvertUIntToPaddedString(nEndPage, nDigits, 16) : EMPTYSTRING) + cStringTools.ConvertUIntToPaddedString(nEndAddress, nDigits, 16)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CMemoryDumpsServiceDialog::TranslateDumpAddressRange(UINT nStartPage, UINT nStartAddress, UINT nEndPage, UINT nEndAddress, CString &szStartAddress, CString &szEndAddress) CONST
{
	INT  nDigits;
	UINT  nRange[2][2];
	CStringTools  cStringTools;

	for (GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nDigits = cStringTools.ConvertUIntToString(nRange[1][1] - nRange[1][0], 16).GetLength(); (ULONGLONG)nStartPage*(ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nStartAddress <= (ULONGLONG)nEndPage*(ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nEndAddress; )
	{
		szStartAddress = (nStartPage > 0) ? (cStringTools.ConvertUIntToPaddedString(nStartPage, nDigits, 16) + cStringTools.ConvertUIntToPaddedString(nStartAddress, nDigits, 16)) : cStringTools.ConvertUIntToPaddedString(nStartAddress, nDigits, 16);
		szEndAddress = (nEndPage > 0) ? (cStringTools.ConvertUIntToPaddedString(nEndPage, nDigits, 16) + cStringTools.ConvertUIntToPaddedString(nEndAddress, nDigits, 16)) : cStringTools.ConvertUIntToPaddedString(nEndAddress, nDigits, 16);
		return TRUE;
	}
	return FALSE;
}

BOOL CMemoryDumpsServiceDialog::EmptyDumpsQueue() CONST
{
	return m_pwndFolderCtrl->EmptyDumpsQueue();
}

CRect CMemoryDumpsServiceDialog::CalcFolderSize() CONST
{
	CRect  rFolder;

	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FOLDER)->GetWindowRect(rFolder);
	ScreenToClient(rFolder);
	return rFolder;
}

VOID CMemoryDumpsServiceDialog::AdjustToPrivileges()
{
	AccessControl(IDC_MEMORYDUMPS_SERVICE_STATUS, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_CHARSET_ASCII, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_CHARSET_UNICODE, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_UNLIMITED, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STARTTIME, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STOPTIME, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_WORKINGDAYS, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_AUDIT, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_SOURCE, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_LOWADDRESS, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_HIGHADDRESS, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_AUDIT, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
	AccessControl(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FORMATTYPE, CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE));
}

BOOL CMemoryDumpsServiceDialog::IsModified() CONST
{
	UINT  nCode;
	UINT  nCharset;
	CTimeSpan  tStartTime;
	CTimeSpan  tStopTime;

	return((GetMemoryDumpsService()->GetCharset(nCharset) && GetMemoryDumpsService()->GetAvailabilityInfo(nCode, tStartTime, tStopTime)) ? (((m_nCharset != nCharset || m_nCode != nCode || m_tStartTime != tStartTime || m_tStopTime != tStopTime || !m_pDumps[0].Compare(&m_pDumps[1])) && (!m_pDumps[0].GetSize() || m_pDumps[0].Compare(&m_pDumps[2])) && !m_pwndFolderCtrl->IsModified()) || EmptyDumpsQueue()) : FALSE);
}

BOOL CMemoryDumpsServiceDialog::Check(BOOL bModified) CONST
{
	return((Check(bModified, m_pwndFolderCtrl->Check(FALSE, TRUE))) ? (!bModified || IsModified()) : FALSE);
}
BOOL CMemoryDumpsServiceDialog::Check(BOOL bModified, BOOL bChecked) CONST
{
	CString  szName;
	CString  szAddress[2];
	UINT  nAddress[2][2];

	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_LOWADDRESS)->GetWindowText(szAddress[0]);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_HIGHADDRESS)->GetWindowText(szAddress[1]);
	Update(bModified, (bChecked = ((!szName.IsEmpty() && GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_SOURCE)->SendMessage(CB_GETCURSEL) != CB_ERR  &&  GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FORMATTYPE)->SendMessage(CB_GETCURSEL) != CB_ERR  &&  !szAddress[0].IsEmpty() && !szAddress[1].IsEmpty() && TranslateDumpAddressRange(szAddress[0], szAddress[1], nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]) && (nAddress[0][0] < nAddress[1][0] || (nAddress[0][0] == nAddress[1][0] && nAddress[0][1] <= nAddress[1][1]))) || (szName.IsEmpty() && GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_SOURCE)->SendMessage(CB_GETCURSEL) == CB_ERR  &&  GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FORMATTYPE)->SendMessage(CB_GETCURSEL) == CB_ERR  &&  szAddress[0].IsEmpty() && szAddress[1].IsEmpty())) && bChecked));
	return((bChecked) ? (!bModified || IsModified()) : FALSE);
}

VOID CMemoryDumpsServiceDialog::Update(BOOL bModified, BOOL bChecked) CONST
{
	CMemoryDump  *pDump[2];

	if (!IsLocked())
	{
		if ((pDump[0] = new CMemoryDump))
		{
			for (GetDumpInfo(pDump[0]); bModified; )
			{
				if ((pDump[1] = FindDumpInfo())) pDump[1]->Copy(pDump[0]);
				m_pwndFolderCtrl->SetInfo(pDump[0], FALSE);
				break;
			}
			GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_ADD)->ShowWindow((!(pDump[1] = FindDumpInfo())) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_MODIFY)->ShowWindow((pDump[1] != (CMemoryDump *)NULL) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_ADD)->EnableWindow((GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME)->GetWindowTextLength() > 0 && !pDump[1] && bChecked) ? CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE) : FALSE);
			GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_MODIFY)->EnableWindow((GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME)->GetWindowTextLength() > 0 && ((m_pDumps[2].Find(pDump[0]->GetName()) >= 0 && !pDump[0]->Compare(m_pDumps[2].GetAt(m_pDumps[2].Find(pDump[0]->GetName())))) || m_pwndFolderCtrl->IsModified()) && bChecked) ? CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE) : FALSE);
			GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_REMOVE)->EnableWindow((pDump[1] != (CMemoryDump *)NULL) ? CheckAccountPrivilege(PRIVILEGE_MEMORYDUMPS_SETUPCHANGE) : FALSE);
			delete pDump[0];
		}
	}
}

VOID CMemoryDumpsServiceDialog::Lock()
{
	m_nLocked++;
}

BOOL CMemoryDumpsServiceDialog::IsLocked() CONST
{
	return(m_nLocked > 0);
}

VOID CMemoryDumpsServiceDialog::Unlock()
{
	m_nLocked--;
}

void CMemoryDumpsServiceDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CMemoryDumpsServiceDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CMemoryDumpsServiceDialog::PostNcDestroy()
{
	m_pDumps[0].RemoveAll();
	m_pDumps[1].RemoveAll();
	m_pDumps[2].RemoveAll();
	delete m_pwndFolderCtrl;
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CMemoryDumpsServiceDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CMemoryDumpsServiceDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_STATUS, OnServiceStatus)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_CHARSET_ASCII, OnCharsetASCII)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_CHARSET_UNICODE, OnCharsetUnicode)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_UNLIMITED, OnUnlimitedAvailability)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY, OnDailyAvailability)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_WORKINGDAYS, OnWorkingDaysAvailability)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_AUDIT, OnAuditAvailability)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_AUDIT, OnMemoryDumpAudit)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_ADD, OnAddMemoryDump)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_MODIFY, OnModifyMemoryDump)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_REMOVE, OnRemoveMemoryDump)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_SERVICE_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, OnEditchangeMemoryName)
	ON_CBN_SELCHANGE(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, OnSelchangeMemoryName)
	ON_CBN_SELCHANGE(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_SOURCE, OnSelchangeMemorySource)
	ON_CBN_SELCHANGE(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FORMATTYPE, OnSelchangeMemoryFormatType)
	ON_CONTROL(TSBXN_CHANGE, IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STARTTIME, OnSpinchangeDailyStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STOPTIME, OnSpinchangeDailyStopTime)
	ON_EN_CHANGE(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_LOWADDRESS, OnEditchangeLowAddress)
	ON_EN_CHANGE(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_HIGHADDRESS, OnEditchangeHighAddress)
	ON_EN_UPDATE(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_LOWADDRESS, OnEditupdateLowAddress)
	ON_EN_UPDATE(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_HIGHADDRESS, OnEditupdateHighAddress)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsServiceDialog message handlers

BOOL CMemoryDumpsServiceDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	for (CLocaleDialog::OnInitDialog(); m_pwndFolderCtrl->Create(this, CalcFolderSize()) && SetChildSheet(m_pwndFolderCtrl, GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FOLDER - 1)); )
	{
		SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_LOWADDRESS, EM_LIMITTEXT, 4 * sizeof(UINT));
		SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_HIGHADDRESS, EM_LIMITTEXT, 4 * sizeof(UINT));
		if (EnumDumps() && EnumDumpSources() && EnumDumpFormatTypes())
		{
			ShowServiceInfo();
			SetDumpInfo(TRUE);
		}
		break;
	}
	AdjustToPrivileges();
	return TRUE;
}

void CMemoryDumpsServiceDialog::OnServiceStatus()
{
	m_nCode = (IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_STATUS)) ? MEMORYDUMPS_SERVICE_UNLIMITEDAVAILABILITY : MEMORYDUMPS_SERVICE_NOAVAILABILITY;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnCharsetASCII()
{
	m_nCharset = MEMORYDUMPS_SERVICE_ASCIICHARSET;
	CheckRadioButton(IDC_MEMORYDUMPS_SERVICE_CHARSET_ASCII, IDC_MEMORYDUMPS_SERVICE_CHARSET_UNICODE, IDC_MEMORYDUMPS_SERVICE_CHARSET_ASCII);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnCharsetUnicode()
{
	m_nCharset = MEMORYDUMPS_SERVICE_UNICODECHARSET;
	CheckRadioButton(IDC_MEMORYDUMPS_SERVICE_CHARSET_ASCII, IDC_MEMORYDUMPS_SERVICE_CHARSET_UNICODE, IDC_MEMORYDUMPS_SERVICE_CHARSET_UNICODE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnUnlimitedAvailability()
{
	m_tStartTime = m_tStopTime = 0;
	m_nCode = MEMORYDUMPS_SERVICE_UNLIMITEDAVAILABILITY;
	m_nCode |= (IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_WORKINGDAYS)) ? MEMORYDUMPS_SERVICE_WORKINGDAYSAVAILABILITY : 0;
	m_nCode |= ((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_WORKINGDAYS)) ? IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_AUDIT) : FALSE) ? MEMORYDUMPS_SERVICE_AUDITAVAILABILITY : 0;
	CheckRadioButton(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_UNLIMITED, IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY, IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_UNLIMITED);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_AUDIT, (IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_WORKINGDAYS)) ? IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_AUDIT) : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_AUDIT)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_WORKINGDAYS));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnDailyAvailability()
{
	m_tStartTime = MEMORYDUMPSSERVICE_DEFAULTSTARTTIME;
	m_tStopTime = MEMORYDUMPSSERVICE_DEFAULTSTOPTIME;
	m_nCode = MEMORYDUMPS_SERVICE_DAILYAVAILABILITY;
	m_nCode |= (IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_WORKINGDAYS)) ? MEMORYDUMPS_SERVICE_WORKINGDAYSAVAILABILITY : 0;
	m_nCode |= (IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_AUDIT)) ? MEMORYDUMPS_SERVICE_AUDITAVAILABILITY : 0;
	CheckRadioButton(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_UNLIMITED, IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY, IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY);
	Timespinbox_SetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STARTTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + m_tStartTime.GetTotalSeconds() % SECONDSPERDAY));
	Timespinbox_SetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STOPTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + m_tStopTime.GetTotalSeconds() % SECONDSPERDAY));
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_AUDIT)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnWorkingDaysAvailability()
{
	m_nCode = (IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_WORKINGDAYS)) ? (m_nCode | MEMORYDUMPS_SERVICE_WORKINGDAYSAVAILABILITY) : (m_nCode & ~MEMORYDUMPS_SERVICE_WORKINGDAYSAVAILABILITY);
	m_nCode = ((IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY) || IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_WORKINGDAYS)) ? IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_AUDIT) : FALSE) ? (m_nCode | MEMORYDUMPS_SERVICE_AUDITAVAILABILITY) : (m_nCode & ~MEMORYDUMPS_SERVICE_AUDITAVAILABILITY);
	CheckDlgButton(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_AUDIT, (IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY) || IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_WORKINGDAYS)) ? IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_AUDIT) : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_AUDIT)->EnableWindow(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_DAILY) || IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_WORKINGDAYS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnAuditAvailability()
{
	m_nCode = (IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_AUDIT)) ? (m_nCode | MEMORYDUMPS_SERVICE_AUDITAVAILABILITY) : (m_nCode & ~MEMORYDUMPS_SERVICE_AUDITAVAILABILITY);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnAddMemoryDump()
{
	INT  nIndex[2];
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	CString  szName;
	CString  szSource;
	CString  szFormatType;
	CString  szAddress[2];
	CMemoryDump  *pDump;
	CStringTools  cStringTools;
	CHourglassCursor  cCursor;

	for (; (pDump = new CMemoryDump); )
	{
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME)->GetWindowText(szName);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_SOURCE)->GetWindowText(szSource);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FORMATTYPE)->GetWindowText(szFormatType);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_LOWADDRESS)->GetWindowText(szAddress[0]);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_HIGHADDRESS)->GetWindowText(szAddress[1]);
		if ((nIndex[0] = (TranslateDumpAddressRange(szAddress[0], szAddress[1], nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1])) ? (INT)SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szName) : -1) >= 0)
		{
			for (GetDumpInfo(pDump), pDump->SetName(szName), pDump->SetDataSource(GetMemoryDumpsServiceSupport()->TranslateMemoryDumpSource(szSource) | GetMemoryDumpsServiceSupport()->TranslateMemoryDumpFormatType(szFormatType)), pDump->SetDataAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]), pDump->SetDataAddressBitWidth((GetDatabase()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1])) ? (4 * cStringTools.ConvertUIntToString(nRange[1][1] - nRange[1][0], 16).GetLength()) : GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth()), pDump->SetDataBitWidth(GetDatabase()->GetOBProcessorMemoryImageBlockAddressWidth()), pDump->SetAuditionFlag(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_AUDIT)); (nIndex[1] = m_pDumps[0].Add(pDump)) >= 0; )
			{
				SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_SETCURSEL, nIndex[0], (LPARAM)NULL);
				SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
				break;
			}
			if (nIndex[1] >= 0)
			{
				SetDumpInfo(TRUE);
				break;
			}
			SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_DELETESTRING, nIndex[0]);
		}
		delete pDump;
		break;
	}
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnModifyMemoryDump()
{
	CMemoryDump  *pDump;
	CHourglassCursor  cCursor;

	if ((pDump = FindDumpInfo()))
	{
		GetDumpInfo(pDump);
		SetDumpInfo(TRUE);
	}
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnRemoveMemoryDump()
{
	INT  nIndex;
	CMemoryDump  *pDump;
	CHourglassCursor  cCursor;

	if ((pDump = FindDumpInfo()))
	{
		if (SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDump->GetName())) != CB_ERR)
		{
			for (SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_SETCURSEL); (nIndex = m_pDumps[0].Find(pDump->GetName())) >= 0; )
			{
				m_pDumps[0].RemoveAt(nIndex);
				delete pDump;
				break;
			}
			SetDumpInfo((!SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_GETCOUNT)) ? TRUE : FALSE);
		}
	}
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnSpinchangeDailyStartTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STOPTIME)); tStartTime != 0 || tStopTime != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STOPTIME), ((tStopTime = (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY) ? ((tStartTime.GetTime() % SECONDSPERDAY + 1 < SECONDSPERDAY) ? (tStartTime.GetTime() + 1) : tStartTime) : tStopTime)));
		break;
	}
	m_tStartTime = tStartTime.GetTime() % SECONDSPERDAY;
	m_tStopTime = tStopTime.GetTime() % SECONDSPERDAY;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnSpinchangeDailyStopTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STOPTIME)); tStartTime != 0 || tStopTime != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_MEMORYDUMPS_SERVICE_AVAILABILITY_STARTTIME), ((tStartTime = (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY) ? ((tStopTime.GetTime() % SECONDSPERDAY > 0) ? (tStopTime.GetTime() - 1) : tStopTime) : tStartTime)));
		break;
	}
	m_tStartTime = tStartTime.GetTime() % SECONDSPERDAY;
	m_tStopTime = tStopTime.GetTime() % SECONDSPERDAY;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnEditchangeMemoryName()
{
	if (FindDumpInfo()) SetDumpInfo();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnEditchangeLowAddress()
{
	UINT  nAddress[2][2];
	CString  szAddress[2];
	CMemoryDump  *pDump;

	if ((pDump = FindDumpInfo()))
	{
		for (GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_LOWADDRESS)->GetWindowText(szAddress[0]), GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_HIGHADDRESS)->GetWindowText(szAddress[1]); !szAddress[0].IsEmpty() && !szAddress[1].IsEmpty() && TranslateDumpAddressRange(szAddress[0], szAddress[1], nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]); )
		{
			pDump->SetDataAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]);
			break;
		}
		if (szAddress[0].IsEmpty() || szAddress[1].IsEmpty()) return;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnEditchangeHighAddress()
{
	UINT  nAddress[2][2];
	CString  szAddress[2];
	CMemoryDump  *pDump;

	if ((pDump = FindDumpInfo()))
	{
		for (GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_LOWADDRESS)->GetWindowText(szAddress[0]), GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_HIGHADDRESS)->GetWindowText(szAddress[1]); !szAddress[0].IsEmpty() && !szAddress[1].IsEmpty() && TranslateDumpAddressRange(szAddress[0], szAddress[1], nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]); )
		{
			pDump->SetDataAddressRange(nAddress[0][0], nAddress[0][1], nAddress[1][0], nAddress[1][1]);
			break;
		}
		if (szAddress[0].IsEmpty() || szAddress[1].IsEmpty()) return;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnEditupdateLowAddress()
{
	INT  nDigit;
	INT  nDigits;
	CString  szAddress[2];

	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_LOWADDRESS)->GetWindowText(szAddress[0]);
	for (nDigit = 0, nDigits = szAddress[0].GetLength(), szAddress[1] = szAddress[0]; nDigit < nDigits; nDigit++)
	{
		if (!_istxdigit(szAddress[0].GetAt(nDigit)))
		{
			szAddress[0] = szAddress[0].Left(nDigit) + szAddress[0].Mid(nDigit + 1);
			nDigits--;
			nDigit--;
		}
	}
	if (szAddress[0] != szAddress[1])
	{
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_LOWADDRESS)->SetWindowText(szAddress[0]);
		SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_LOWADDRESS, EM_SETSEL, szAddress[0].GetLength(), szAddress[0].GetLength());
		CAudioDevice::AlertBySound();
	}
}

void CMemoryDumpsServiceDialog::OnEditupdateHighAddress()
{
	INT  nDigit;
	INT  nDigits;
	CString  szAddress[2];

	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_HIGHADDRESS)->GetWindowText(szAddress[0]);
	for (nDigit = 0, nDigits = szAddress[0].GetLength(), szAddress[1] = szAddress[0]; nDigit < nDigits; nDigit++)
	{
		if (!_istxdigit(szAddress[0].GetAt(nDigit)))
		{
			szAddress[0] = szAddress[0].Left(nDigit) + szAddress[0].Mid(nDigit + 1);
			nDigits--;
			nDigit--;
		}
	}
	if (szAddress[0] != szAddress[1])
	{
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_HIGHADDRESS)->SetWindowText(szAddress[0]);
		SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_HIGHADDRESS, EM_SETSEL, szAddress[0].GetLength(), szAddress[0].GetLength());
		CAudioDevice::AlertBySound();
	}
}

void CMemoryDumpsServiceDialog::OnMemoryDumpAudit()
{
	CMemoryDump  *pDump;

	for (; (pDump = FindDumpInfo()); )
	{
		pDump->SetAuditionFlag(IsDlgButtonChecked(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_AUDIT));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnSelchangeMemoryName()
{
	for (SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_GETCURSEL)); SendDlgItemMessage(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_NAME, CB_GETCURSEL) >= 0; )
	{
		SetDumpInfo();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnSelchangeMemorySource()
{
	UINT  nFormats;
	CString  szSource;
	CString  szFormatType;
	CMemoryDump  *pDump;

	if ((pDump = FindDumpInfo()))
	{
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_SOURCE)->GetWindowText(szSource);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FORMATTYPE)->GetWindowText(szFormatType);
		for (pDump->SetDataSource(GetMemoryDumpsServiceSupport()->TranslateMemoryDumpSource(szSource) | GetMemoryDumpsServiceSupport()->TranslateMemoryDumpFormatType(szFormatType)), nFormats = GetMemoryDumpsServiceSupport()->EnumMemoryDumpFileFormats(GetMemoryDumpsServiceSupport()->TranslateMemoryDumpSource(szSource) | GetMemoryDumpsServiceSupport()->TranslateMemoryDumpFormatType(szFormatType)); (nFormats & MEMORYDUMP_FILEFORMAT_NORMAL) != MEMORYDUMP_FILEFORMAT_NORMAL; )
		{
			pDump->SetFileExtension(MEMORYDUMP_FILEFORMAT_NORMAL, EMPTYSTRING);
			break;
		}
		for (; (nFormats & MEMORYDUMP_FILEFORMAT_DESCRIPTIVE) != MEMORYDUMP_FILEFORMAT_DESCRIPTIVE; )
		{
			pDump->SetFileExtension(MEMORYDUMP_FILEFORMAT_DESCRIPTIVE, EMPTYSTRING);
			break;
		}
		for (; (nFormats & MEMORYDUMP_FILEFORMAT_DELIMITED) != MEMORYDUMP_FILEFORMAT_DELIMITED; )
		{
			pDump->SetFileExtension(MEMORYDUMP_FILEFORMAT_DELIMITED, EMPTYSTRING);
			break;
		}
	}
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_SOURCE)->GetWindowText(szSource);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FORMATTYPE)->GetWindowText(szFormatType);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_ADDRESS_STATIC)->ShowWindow((GetMemoryDumpsServiceSupport()->IsMemoryDumpByAddressRange(GetMemoryDumpsServiceSupport()->TranslateMemoryDumpSource(szSource))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_REGISTER_STATIC)->ShowWindow((GetMemoryDumpsServiceSupport()->IsMemoryDumpByRegisters(GetMemoryDumpsServiceSupport()->TranslateMemoryDumpSource(szSource))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_ADDRESS_STATIC)->EnableWindow((GetMemoryDumpsServiceSupport()->IsMemoryDumpByAddressRange(GetMemoryDumpsServiceSupport()->TranslateMemoryDumpSource(szSource))) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_REGISTER_STATIC)->EnableWindow((GetMemoryDumpsServiceSupport()->IsMemoryDumpByRegisters(GetMemoryDumpsServiceSupport()->TranslateMemoryDumpSource(szSource))) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnSelchangeMemoryFormatType()
{
	CString  szSource;
	CString  szFormatType;
	CMemoryDump  *pDump;

	if ((pDump = FindDumpInfo()))
	{
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_SOURCE)->GetWindowText(szSource);
		GetDlgItem(IDC_MEMORYDUMPS_SERVICE_PROPERTIES_FORMATTYPE)->GetWindowText(szFormatType);
		pDump->SetDataSource(GetMemoryDumpsServiceSupport()->TranslateMemoryDumpSource(szSource) | GetMemoryDumpsServiceSupport()->TranslateMemoryDumpFormatType(szFormatType));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsServiceDialog::OnOK()
{
	CHourglassCursor  cCursor;

	for (GetMemoryDumpsService()->SetCharset(m_nCharset), GetMemoryDumpsService()->SetAvailabilityInfo(m_nCode, m_tStartTime, m_tStopTime), GetMemoryDumpsService()->SetMemoryDumps(m_pDumps[2]); EmptyDumpsQueue(); )
	{
		GetMemoryDumpsService()->ResetFTPQueue();
		break;
	}
	EndDialog(IDOK);
}

BOOL CMemoryDumpsServiceDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_MEMORYDUMPSSERVICEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CMemoryDumpsServiceDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_MEMORYDUMPSSERVICEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsImportDialog dialog

IMPLEMENT_DYNCREATE(CMemoryDumpsImportDialog, CLocaleDialog)

CMemoryDumpsImportDialog::CMemoryDumpsImportDialog(CWnd *pParentWnd) : CLocaleDialog(CMemoryDumpsImportDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CMemoryDumpsImportDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CMemoryDumpsImportDialog::Initialize()
{
	GetMemoryDumpsService()->GetMemoryDumps(m_pDumps[0]);
	return TRUE;
}

VOID CMemoryDumpsImportDialog::EnumDumps()
{
	INT  nDump;
	INT  nDumps;
	DWORD  cbData;
	CFileEx  cFile;
	CString  szMessage;
	CString  szFileName;
	CByteArray  nFileData;
	CMemoryDump  *pDump;

	SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_DIRECTORY, CB_RESETCONTENT);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_FILENAME)->GetWindowText(szFileName);
	if (cFile.Open(szFileName, CFile::modeRead | CFile::shareExclusive))
	{
		nFileData.SetSize((cbData = (DWORD)cFile.GetLength()*sizeof(BYTE)));
		if (ReadFile(cFile.m_hFile, nFileData.GetData(), (DWORD)nFileData.GetSize(), &cbData, (LPOVERLAPPED)NULL))
		{
			for (nDump = 0, nDumps = (m_pDumps[1].Unmap(nFileData)) ? (INT)m_pDumps[1].GetSize() : 0; nDump < nDumps; nDump++)
			{
				if ((pDump = m_pDumps[1].GetAt(nDump))) SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_DIRECTORY, CB_INSERTSTRING, nDump, (LPARAM)(LPCTSTR)pDump->GetName());
				continue;
			}
		}
		else
		{
			szMessage = STRING(IDS_MEMORYDUMPS_IMPORT_FILE_FAILURE);
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
		}
		cFile.Close();
	}
	else
	{
		szMessage = STRING(IDS_MEMORYDUMPS_IMPORT_FILE_FAILURE);
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
	}
	if (SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_DIRECTORY, CB_SETCURSEL);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY_STATIC)->EnableWindow();
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY)->EnableWindow(FALSE);
}

BOOL CMemoryDumpsImportDialog::Check(BOOL bModified) CONST
{
	return((m_pDumps[2].GetSize() > 0) ? TRUE : FALSE);
}

void CMemoryDumpsImportDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CMemoryDumpsImportDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CMemoryDumpsImportDialog::PostNcDestroy()
{
	m_pDumps[0].RemoveAll();
	m_pDumps[1].RemoveAll();
	m_pDumps[2].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CMemoryDumpsImportDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CMemoryDumpsImportDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_MEMORYDUMPS_IMPORT_BROWSE, OnBrowse)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_IMPORT_INSPECT, OnInspect)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_IMPORT_ADD, OnAdd)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_IMPORT_ADDALL, OnAddAll)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_IMPORT_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_IMPORT_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_IMPORT_HELP, OnHelp)
	ON_EN_CHANGE(IDC_MEMORYDUMPS_IMPORT_FILENAME, OnEditchangeFileName)
	ON_CBN_SELCHANGE(IDC_MEMORYDUMPS_IMPORT_DIRECTORY, OnSelchangeSource)
	ON_LBN_SELCHANGE(IDC_MEMORYDUMPS_IMPORT_LIST, OnSelchangeDestination)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsImportDialog message handlers

BOOL CMemoryDumpsImportDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DETAILS)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_FILENAME)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_BROWSE)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ADDALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION_TEXT)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_FILENAME)->SetFocus();
	return FALSE;
}

void CMemoryDumpsImportDialog::OnBrowse()
{
	CString  szFileName;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_MEMORYDUMPS_IMPORT_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_FILENAME)->SetWindowText((szFileName = cFileBrowseDialog.GetPathName()));
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_BROWSE)->ShowWindow((szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_INSPECT)->ShowWindow((!szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_BROWSE)->EnableWindow((szFileName.IsEmpty()) ? TRUE : FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_INSPECT)->EnableWindow((!szFileName.IsEmpty()) ? TRUE : FALSE);
	}
	SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_FILENAME)->SetFocus();
}

void CMemoryDumpsImportDialog::OnInspect()
{
	INT  nDump;
	INT  nDumps;
	CString  szDump;
	CHourglassCursor  cCursor;

	EnumDumps();
	for (nDump = 0, nDumps = (INT)SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_DIRECTORY, CB_GETCOUNT); nDump < nDumps; nDump++)
	{
		if (SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY), nDump)) < 0) break;
		continue;
	}
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY)->GetWindowText(szDump);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDump) < 0 && !szDump.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ADDALL)->EnableWindow((nDump < nDumps) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY)->SetFocus();
}

void CMemoryDumpsImportDialog::OnAdd()
{
	INT  nDump;
	INT  nDumps;
	CString  szDump;
	CMemoryDump  *pDump[2];
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY)->GetWindowText(szDump);
	if (SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szDump) >= 0)
	{
		if ((pDump[0] = m_pDumps[1].GetAt(m_pDumps[1].Find(szDump))))
		{
			if ((pDump[1] = new CMemoryDump))
			{
				pDump[1]->Copy(pDump[0]);
				if (m_pDumps[2].Add(pDump[1]) < 0) delete pDump[1];
			}
		}
		for (nDump = 0, nDumps = (INT)SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_GETCOUNT); nDump < nDumps; nDump++)
		{
			if (m_pDumps[0].Find(Listbox_GetText(GetDlgItem(IDC_MEMORYDUMPS_IMPORT_LIST), nDump)) >= 0) break;
			continue;
		}
		SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDump));
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION)->ShowWindow((nDump < nDumps) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION_TEXT)->ShowWindow((nDump < nDumps) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION)->EnableWindow((nDump < nDumps) ? TRUE : FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION_TEXT)->EnableWindow((nDump < nDumps) ? TRUE : FALSE);
		for (nDump = 0, nDumps = (INT)SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_DIRECTORY, CB_GETCOUNT); nDump < nDumps; nDump++)
		{
			if (SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY), nDump)) < 0) break;
			continue;
		}
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ADDALL)->EnableWindow((nDump < nDumps) ? TRUE : FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_LIST)->EnableWindow();
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_REMOVE)->EnableWindow();
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_REMOVEALL)->EnableWindow();
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsImportDialog::OnAddAll()
{
	INT  nDump;
	INT  nDumps;
	CString  szDump;
	CMemoryDump  *pDump[2];
	CHourglassCursor  cCursor;

	for (nDump = 0, nDumps = (INT)SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_DIRECTORY, CB_GETCOUNT); nDump < nDumps; nDump++)
	{
		if (SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szDump = Combobox_GetText(GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY), nDump))) < 0)
		{
			SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szDump);
			continue;
		}
	}
	for (nDump = 0, nDumps = (INT)m_pDumps[1].GetSize(); nDump < nDumps; nDump++)
	{
		if ((pDump[0] = m_pDumps[1].GetAt(nDump)) && m_pDumps[2].Find(pDump[0]->GetName()) < 0)
		{
			if ((pDump[1] = new CMemoryDump))
			{
				pDump[1]->Copy(pDump[0]);
				if (m_pDumps[2].Add(pDump[1]) < 0)
				{
					delete pDump[1];
					continue;
				}
			}
		}
	}
	for (nDump = 0, nDumps = (INT)SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_GETCOUNT); nDump < nDumps; nDump++)
	{
		if (m_pDumps[0].Find((szDump = Listbox_GetText(GetDlgItem(IDC_MEMORYDUMPS_IMPORT_LIST), nDump))) >= 0) break;
		continue;
	}
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION)->ShowWindow((nDump < nDumps) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION_TEXT)->ShowWindow((nDump < nDumps) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION)->EnableWindow((nDump < nDumps) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION_TEXT)->EnableWindow((nDump < nDumps) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_LIST)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ADDALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsImportDialog::OnRemove()
{
	INT  nDump;
	INT  nDumps;
	INT  nIndex;
	CString  szDump;
	CHourglassCursor  cCursor;

	if ((nIndex = m_pDumps[2].Find(Listbox_GetText(GetDlgItem(IDC_MEMORYDUMPS_IMPORT_LIST), (INT)SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_GETCURSEL)))) >= 0)
	{
		delete m_pDumps[2].GetAt(nIndex);
		m_pDumps[2].RemoveAt(nIndex);
	}
	if (SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_GETCURSEL)) > 0)
	{
		for (nDump = 0, nDumps = (INT)SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_GETCOUNT); nDump < nDumps; nDump++)
		{
			if (m_pDumps[0].Find((szDump = Listbox_GetText(GetDlgItem(IDC_MEMORYDUMPS_IMPORT_LIST), nDump))) >= 0) break;
			continue;
		}
		SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_SETCURSEL);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY)->GetWindowText(szDump);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION)->ShowWindow((nDump < nDumps) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION_TEXT)->ShowWindow((nDump < nDumps) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION)->EnableWindow((nDump < nDumps) ? TRUE : FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION_TEXT)->EnableWindow((nDump < nDumps) ? TRUE : FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDump) < 0) ? TRUE : FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	}
	else
	{
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION_TEXT)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION)->EnableWindow(FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION_TEXT)->EnableWindow(FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_LIST_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_IMPORT_REMOVEALL)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsImportDialog::OnRemoveAll()
{
	CHourglassCursor  cCursor;

	m_pDumps[2].RemoveAll();
	SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_RESETCONTENT);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION_TEXT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ATTENTION_TEXT)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsImportDialog::OnEditchangeFileName()
{
	CString  szFileName;

	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_FILENAME)->GetWindowText(szFileName);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_BROWSE)->ShowWindow((szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_INSPECT)->ShowWindow((!szFileName.IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_BROWSE)->EnableWindow((szFileName.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_INSPECT)->EnableWindow((!szFileName.IsEmpty()) ? TRUE : FALSE);
}

void CMemoryDumpsImportDialog::OnSelchangeSource()
{
	CString  szDump;

	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_DIRECTORY)->GetWindowText(szDump);
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_IMPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDump) < 0) ? TRUE : FALSE);
}

void CMemoryDumpsImportDialog::OnSelchangeDestination()
{
	GetDlgItem(IDC_MEMORYDUMPS_IMPORT_REMOVE)->EnableWindow();
}

void CMemoryDumpsImportDialog::OnOK()
{
	INT  nDump;
	INT  nDumps;
	INT  nIndex;
	CString  szDump;
	CString  szMessage;
	CMemoryDump  *pDump[2];
	CMemoryDumps  pDumps;
	CHourglassCursor  cCursor;

	for (nDump = 0, nDumps = (GetMemoryDumpsService()->GetMemoryDumps(pDumps)) ? (INT)m_pDumps[2].GetSize() : 0; nDump < nDumps; nDump++)
	{
		if ((pDump[0] = m_pDumps[2].GetAt(nDump)) != (CMemoryDump *)NULL)
		{
			if ((nIndex = pDumps.Find((szDump = pDump[0]->GetName()))) >= 0)
			{
				delete pDumps.GetAt(nIndex);
				pDumps.RemoveAt(nIndex);
			}
			if ((pDump[1] = new CMemoryDump))
			{
				pDump[1]->Copy(pDump[0]);
				if (pDumps.Add(pDump[1]) < 0)
				{
					szMessage.Format(STRING(IDS_MEMORYDUMPS_IMPORT_FAILURE), (LPCTSTR)szDump);
					ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
					delete pDump[1];
				}
			}
			else
			{
				szMessage.Format(STRING(IDS_MEMORYDUMPS_IMPORT_FAILURE), (LPCTSTR)szDump);
				ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
			}
		}
		if (nDump == nDumps - 1)
		{
			GetMemoryDumpsService()->SetMemoryDumps(pDumps);
			continue;
		}
	}
	CLocaleDialog::OnOK();
}

BOOL CMemoryDumpsImportDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_MEMORYDUMPSIMPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CMemoryDumpsImportDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_MEMORYDUMPSIMPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsExportDialog dialog

IMPLEMENT_DYNCREATE(CMemoryDumpsExportDialog, CLocaleDialog)

CMemoryDumpsExportDialog::CMemoryDumpsExportDialog(CWnd *pParentWnd) : CLocaleDialog(CMemoryDumpsExportDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CMemoryDumpsExportDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CMemoryDumpsExportDialog::Initialize()
{
	GetMemoryDumpsService()->GetMemoryDumps(m_pDumps[0]);
	return TRUE;
}

BOOL CMemoryDumpsExportDialog::EnumDumps()
{
	INT  nDump;
	INT  nDumps;
	CMemoryDump  *pDump;

	for (nDump = 0, nDumps = (INT)m_pDumps[0].GetSize(); nDump < nDumps; nDump++)
	{
		if ((pDump = m_pDumps[0].GetAt(nDump))) SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_DIRECTORY, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pDump->GetName());
		continue;
	}
	if (SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_DIRECTORY, CB_SETCURSEL);
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_DIRECTORY_STATIC)->EnableWindow();
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_DIRECTORY)->EnableWindow();
		return TRUE;
	}
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_DIRECTORY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_DIRECTORY)->EnableWindow(FALSE);
	return FALSE;
}

BOOL CMemoryDumpsExportDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_MEMORYDUMPS_EXPORT_FILENAME)->GetWindowTextLength() > 0 && m_pDumps[1].GetSize() > 0) ? TRUE : FALSE);
}

void CMemoryDumpsExportDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CMemoryDumpsExportDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CMemoryDumpsExportDialog::PostNcDestroy()
{
	m_pDumps[0].RemoveAll();
	m_pDumps[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CMemoryDumpsExportDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CMemoryDumpsExportDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_MEMORYDUMPS_EXPORT_ADD, OnAdd)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_EXPORT_ADDALL, OnAddAll)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_EXPORT_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_EXPORT_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_EXPORT_BROWSE, OnBrowse)
	ON_BN_CLICKED(IDC_MEMORYDUMPS_EXPORT_HELP, OnHelp)
	ON_EN_CHANGE(IDC_MEMORYDUMPS_EXPORT_FILENAME, OnEditchangeFileName)
	ON_CBN_SELCHANGE(IDC_MEMORYDUMPS_EXPORT_DIRECTORY, OnSelchangeSource)
	ON_LBN_SELCHANGE(IDC_MEMORYDUMPS_EXPORT_LIST, OnSelchangeDestination)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CMemoryDumpsExportDialog message handlers

BOOL CMemoryDumpsExportDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_DETAILS)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_ADD)->EnableWindow((EnumDumps() && SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_FILENAME)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_BROWSE)->EnableWindow();
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_DIRECTORY)->SetFocus();
	return FALSE;
}

void CMemoryDumpsExportDialog::OnAdd()
{
	INT  nDump;
	INT  nDumps;
	CString  szDump;
	CMemoryDump  *pDump[2];
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_DIRECTORY)->GetWindowText(szDump);
	if (SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szDump) >= 0)
	{
		if ((pDump[0] = m_pDumps[0].GetAt(m_pDumps[0].Find(szDump))))
		{
			if ((pDump[1] = new CMemoryDump))
			{
				pDump[1]->Copy(pDump[0]);
				if (m_pDumps[1].Add(pDump[1]) < 0) delete pDump[1];
			}
		}
		for (nDump = 0, nDumps = (INT)SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_DIRECTORY, CB_GETCOUNT); nDump < nDumps; nDump++)
		{
			if (SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_MEMORYDUMPS_EXPORT_DIRECTORY), nDump)) < 0) break;
			continue;
		}
		SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDump));
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_ADDALL)->EnableWindow((nDump < nDumps) ? TRUE : FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_LIST)->EnableWindow();
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_REMOVE)->EnableWindow();
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_REMOVEALL)->EnableWindow();
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_DIRECTORY)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsExportDialog::OnAddAll()
{
	INT  nDump;
	INT  nDumps;
	CString  szDump;
	CMemoryDump  *pDump[2];
	CHourglassCursor  cCursor;

	for (nDump = 0, nDumps = (INT)SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_DIRECTORY, CB_GETCOUNT); nDump < nDumps; nDump++)
	{
		if (SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szDump = Combobox_GetText(GetDlgItem(IDC_MEMORYDUMPS_EXPORT_DIRECTORY), nDump))) < 0)
		{
			SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szDump);
			continue;
		}
	}
	for (nDump = 0, nDumps = (INT)m_pDumps[0].GetSize(); nDump < nDumps; nDump++)
	{
		if ((pDump[0] = m_pDumps[0].GetAt(nDump)) && m_pDumps[1].Find(pDump[0]->GetName()) < 0)
		{
			if ((pDump[1] = new CMemoryDump))
			{
				pDump[1]->Copy(pDump[0]);
				if (m_pDumps[1].Add(pDump[1]) < 0)
				{
					delete pDump[1];
					continue;
				}
			}
		}
	}
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_LIST)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_ADDALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsExportDialog::OnRemove()
{
	INT  nIndex;
	CString  szDump;
	CHourglassCursor  cCursor;

	if ((nIndex = m_pDumps[1].Find(Listbox_GetText(GetDlgItem(IDC_MEMORYDUMPS_EXPORT_LIST), (INT)SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_GETCURSEL)))) >= 0)
	{
		delete m_pDumps[1].GetAt(nIndex);
		m_pDumps[1].RemoveAt(nIndex);
	}
	if (SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_GETCURSEL)) > 0)
	{
		SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_SETCURSEL);
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_DIRECTORY)->GetWindowText(szDump);
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDump) < 0) ? TRUE : FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	}
	else
	{
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_LIST_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_LIST)->EnableWindow(FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_REMOVEALL)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsExportDialog::OnRemoveAll()
{
	CHourglassCursor  cCursor;

	m_pDumps[1].RemoveAll();
	SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_RESETCONTENT);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_DIRECTORY, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_ADDALL)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_DIRECTORY, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsExportDialog::OnBrowse()
{
	CString  szFileName;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_MEMORYDUMPS_EXPORT_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		szFileName = cFileBrowseDialog.GetPathName();
		GetDlgItem(IDC_MEMORYDUMPS_EXPORT_FILENAME)->SetWindowText(szFileName);
	}
	SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsExportDialog::OnEditchangeFileName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CMemoryDumpsExportDialog::OnSelchangeSource()
{
	CString  szDump;

	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_DIRECTORY)->GetWindowText(szDump);
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_ADD)->EnableWindow((SendDlgItemMessage(IDC_MEMORYDUMPS_EXPORT_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDump) < 0) ? TRUE : FALSE);
}

void CMemoryDumpsExportDialog::OnSelchangeDestination()
{
	GetDlgItem(IDC_MEMORYDUMPS_EXPORT_REMOVE)->EnableWindow();
}

void CMemoryDumpsExportDialog::OnOK()
{
	DWORD  cbData;
	CFileEx  cFile;
	CString  szFileName;
	CByteArray  nFileData;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_MEMORYDUMPS_EXPORT_FILENAME)->GetWindowText(szFileName); !szFileName.IsEmpty(); )
	{
		if (cFile.Open(szFileName, CFile::modeCreate | CFile::modeReadWrite | CFile::shareExclusive))
		{
			ReportEvent((!WriteFile(cFile.m_hFile, nFileData.GetData(), (m_pDumps[1].Map(nFileData)) ? (DWORD)nFileData.GetSize() : 0, &cbData, (LPOVERLAPPED)NULL) || !cbData) ? (EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR) : 0, STRING(IDS_MEMORYDUMPS_EXPORT_FILE_FAILURE));
			cFile.Close();
			break;
		}
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_MEMORYDUMPS_EXPORT_FILE_FAILURE));
		break;
	}
	CLocaleDialog::OnOK();
}

BOOL CMemoryDumpsExportDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_MEMORYDUMPSEXPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CMemoryDumpsExportDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_MEMORYDUMPSEXPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandServiceDialog dialog

IMPLEMENT_DYNCREATE(CTelecommandServiceDialog, CLocaleDialog)

CTelecommandServiceDialog::CTelecommandServiceDialog(CWnd *pParentWnd) : CLocaleDialog(CTelecommandServiceDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelecommandServiceDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelecommandServiceDialog::Initialize()
{
	GetTCService()->GetTCUplinkDevices(m_pDevices[0]);
	return((m_pDevices[1].Copy(&m_pDevices[0])) ? TRUE : FALSE);
}

BOOL CTelecommandServiceDialog::EnumProducts()
{
	INT  nDevice;
	INT  nDevices;
	CTCUplinkDevice  *pDevice;

	for (nDevice = 0, nDevices = (INT)m_pDevices[0].GetSize(); nDevice < nDevices; nDevice++)
	{
		if ((pDevice = m_pDevices[0].GetAt(nDevice)))
		{
			if (pDevice->Open())
			{
				if (pDevice->GetCapabilities() & IODEVICE_SERVICE_TC)
				{
					if (SendDlgItemMessage(IDC_TELECOMMANDSERVICE_PRODUCT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDevice->GetDeviceBrand()) < 0)
					{
						SendDlgItemMessage(IDC_TELECOMMANDSERVICE_PRODUCT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pDevice->GetDeviceBrand());
						pDevice->Close();
						continue;
					}
				}
				pDevice->Close();
			}
		}
	}
	GetDlgItem(IDC_TELECOMMANDSERVICE_DETAILS)->EnableWindow();
	SendDlgItemMessage(IDC_TELECOMMANDSERVICE_PRODUCT, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TELECOMMANDSERVICE_PRODUCT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((!m_pDevices[0].GetActiveDeviceBrand().IsEmpty()) ? (LPCTSTR)m_pDevices[0].GetActiveDeviceBrand() : (LPCTSTR)m_pDevices[0].GetDefaultDeviceBrand())), 0));
	GetDlgItem(IDC_TELECOMMANDSERVICE_PRODUCT_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDSERVICE_PRODUCT, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_PRODUCT)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDSERVICE_PRODUCT, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return TRUE;
}

BOOL CTelecommandServiceDialog::EnumProductDevices()
{
	INT  nDevice;
	INT  nDevices;
	CString  szProduct;
	CTCUplinkDevice  *pDevice;

	SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_RESETCONTENT);
	GetDlgItem(IDC_TELECOMMANDSERVICE_PRODUCT)->GetWindowText(szProduct);
	for (nDevice = 0, nDevices = (INT)m_pDevices[0].GetSize(); nDevice < nDevices; nDevice++)
	{
		if ((pDevice = m_pDevices[0].GetAt(nDevice)) && pDevice->GetDeviceBrand() == szProduct  &&  !pDevice->GetDeviceName().IsEmpty())
		{
			if (SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDevice->GetDeviceName()) < 0)
			{
				SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pDevice->GetDeviceName());
				continue;
			}
		}
	}
	if (SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_GETCOUNT) > 0)
	{
		SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((!m_pDevices[0].GetActiveDeviceName().IsEmpty()) ? (LPCTSTR)m_pDevices[0].GetActiveDeviceName() : (LPCTSTR)m_pDevices[0].GetDefaultDeviceName())), 0));
		GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE_CHANGE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDSERVICE_CHANGE) || CheckAccountPrivilege(PRIVILEGE_TELECOMMANDSERVICE_BROWSE));
		GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDSERVICE_CHANGE));
		GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDSERVICE_CHANGE));
		GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE)->EnableWindow();
		return TRUE;
	}
	GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE_CHANGE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDSERVICE_PRODUCT, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDSERVICE_CHANGE) : FALSE);
	return FALSE;
}

VOID CTelecommandServiceDialog::EnumBackupDevices()
{
	INT  nDevice;
	INT  nDevices;

	SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_RESETCONTENT);
	for (nDevice = 0, nDevices = (INT)SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_GETCOUNT); nDevice < nDevices; nDevice++)
	{
		if (SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Listbox_GetText(GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE), nDevice)) < 0 && nDevice != SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_GETCURSEL))
		{
			SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)Listbox_GetText(GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE), nDevice));
			continue;
		}
	}
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
}

VOID CTelecommandServiceDialog::ShowDeviceDetails()
{
	CTCUplinkDevice  *pDevice;

	for (GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE)->EnableWindow(), GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_USE)->EnableWindow(), GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_ALWAYS)->EnableWindow(), GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY)->EnableWindow(), GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL)->EnableWindow(), GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC)->EnableWindow(), GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DISABLED)->EnableWindow(), GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP)->EnableWindow(), GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY)->EnableWindow(), GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY)->EnableWindow(), GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT)->EnableWindow(), GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_ANYDEVICE)->EnableWindow(), GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT)->EnableWindow(); (pDevice = FindDevice()); )
	{
		ShowDeviceDetails(pDevice);
		return;
	}
	SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_ALWAYS, TRUE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_DISABLED, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_AUDIT, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY, TRUE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_ANYDEVICE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES, FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_AUDIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT_PERIOD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES)->EnableWindow(FALSE);
}
VOID CTelecommandServiceDialog::ShowDeviceDetails(CONST CTCUplinkDevice *pDevice)
{
	UINT  nRetries;
	CString  szName;
	CTimeKey  tTime;
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTimeSpan  tTimeout;
	CTimeSpan  tTimeSpan;
	CTimeSpan  tInterval;
	CTimeSpan  tDailyStartTime;
	CTimeSpan  tDailyStopTime;

	m_pDevices[0].SetActiveDevice(pDevice);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_ALWAYS, (pDevice->GetScheduleOptions() & TELECOMMANDUPLINKDEVICE_SCHEDULE_ALWAYS) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY, (pDevice->GetScheduleOptions() & TELECOMMANDUPLINKDEVICE_SCHEDULE_DAILY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL, (pDevice->GetScheduleOptions() & TELECOMMANDUPLINKDEVICE_SCHEDULE_INTERVAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC, (pDevice->GetScheduleOptions() & TELECOMMANDUPLINKDEVICE_SCHEDULE_PERIODIC) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_DISABLED, (pDevice->GetScheduleOptions() & TELECOMMANDUPLINKDEVICE_SCHEDULE_DISABLED) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_AUDIT, (pDevice->GetScheduleOptions() & TELECOMMANDUPLINKDEVICE_SCHEDULE_AUDIT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY, (pDevice->GetBackupOptions() & TELECOMMANDUPLINKDEVICE_BACKUP_CONTINOUSLY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT, (pDevice->GetBackupOptions() & TELECOMMANDUPLINKDEVICE_BACKUP_RETRIES) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE, (pDevice->GetBackupOptions() & TELECOMMANDUPLINKDEVICE_BACKUP_USEDEVICE) ? ((SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pDevice->GetBackupDevice(szName)) ? (LPCTSTR)szName : EMPTYSTRING)) >= 0) ? TRUE : FALSE) : FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_ANYDEVICE, (pDevice->GetBackupOptions() & TELECOMMANDUPLINKDEVICE_BACKUP_USEANYDEVICE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY, (!IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT) && !IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE) && !IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_ANYDEVICE)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT, (pDevice->GetBackupTimeout(tTimeout) && tTimeout > 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES, (pDevice->GetBackupOptions() & TELECOMMANDUPLINKDEVICE_BACKUP_AUDITFAILURES) ? TRUE : FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STARTTIME), (pDevice->GetScheduleDaily(tDailyStartTime, tDailyStopTime)) ? CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + tDailyStartTime.GetTotalSeconds()) : tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STOPTIME), (pDevice->GetScheduleDaily(tDailyStartTime, tDailyStopTime)) ? CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + tDailyStopTime.GetTotalSeconds()) : tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STARTTIME), (pDevice->GetScheduleInterval(tStartTime, tStopTime)) ? tStartTime : tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STOPTIME), (pDevice->GetScheduleInterval(tStartTime, tStopTime)) ? tStopTime : tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIME), (pDevice->GetSchedulePeriodic(tStartTime, tTimeSpan, tInterval)) ? tStartTime : tTime);
	Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN), TELECOMMANDSERVICE_MINIMUMTIMESPAN, TELECOMMANDSERVICE_MAXIMUMTIMESPAN);
	Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL), TELECOMMANDSERVICE_MINIMUMINTERVAL, TELECOMMANDSERVICE_MAXIMUMINTERVAL);
	Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_NUMBER), TELECOMMANDSERVICE_MINIMUMRETRIES, TELECOMMANDSERVICE_MAXIMUMRETRIES);
	Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT_PERIOD), TELECOMMANDSERVICE_MINIMUMTIMEOUT, TELECOMMANDSERVICE_MAXIMUMTIMEOUT);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN), (pDevice->GetSchedulePeriodic(tStartTime, tTimeSpan, tInterval)) ? tTimeSpan.GetTotalSeconds() : 0);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL), (pDevice->GetSchedulePeriodic(tStartTime, tTimeSpan, tInterval)) ? tInterval.GetTotalSeconds() : 0);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_NUMBER), (pDevice->GetBackupRetries(nRetries)) ? nRetries : 0);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT_PERIOD), (pDevice->GetBackupTimeout(tTimeout)) ? tTimeout.GetTotalSeconds() : 0);
	SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_SETCURSEL, (WPARAM)((IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE)) ? SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pDevice->GetBackupDevice(szName)) ? (LPCTSTR)szName : EMPTYSTRING)) : -1));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL_SECONDS)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_AUDIT)->EnableWindow(!IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_ALWAYS));
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT));
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT));
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE));
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT_PERIOD)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT));
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT));
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES)->EnableWindow(!IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY) || IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT));
}

CTCUplinkDevice *CTelecommandServiceDialog::FindDevice() CONST
{
	return m_pDevices[0].GetAt(m_pDevices[0].Find(Combobox_GetText(GetDlgItem(IDC_TELECOMMANDSERVICE_PRODUCT), (INT)GetDlgItem(IDC_TELECOMMANDSERVICE_PRODUCT)->SendMessage(CB_GETCURSEL)), Listbox_GetText(GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE), (INT)GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE)->SendMessage(LB_GETCURSEL))));
}

VOID CTelecommandServiceDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELECOMMANDSERVICE_DEVICE_ADD, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELECOMMANDSERVICE_CHANGE)));
	AccessControl(IDC_TELECOMMANDSERVICE_DEVICE_REMOVE, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_SCHEDULE_ALWAYS, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STARTTIME, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STOPTIME, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STARTTIME, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STOPTIME, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIME, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_SCHEDULE_DISABLED, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_SCHEDULE_AUDIT, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_NUMBER, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_ANYDEVICE, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT_PERIOD, bCheck);
	AccessControl(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES, bCheck);
}

BOOL CTelecommandServiceDialog::IsModified() CONST
{
	return !m_pDevices[0].Compare(&m_pDevices[1], FALSE);
}

BOOL CTelecommandServiceDialog::Check(BOOL bModified) CONST
{
	CTCUplinkDevice  cDevice;

	return((m_pDevices[0].GetActiveDevice(&cDevice)) ? (!bModified || IsModified()) : FALSE);
}

void CTelecommandServiceDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandServiceDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelecommandServiceDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelecommandServiceDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_DEVICE_ADD, OnAddDevice)
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_DEVICE_CHANGE, OnChangeDevice)
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_DEVICE_REMOVE, OnRemoveDevice)
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_SCHEDULE_ALWAYS, OnScheduleAlways)
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY, OnScheduleDaily)
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL, OnScheduleInterval)
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC, OnSchedulePeriodic)
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_SCHEDULE_DISABLED, OnScheduleDisabled)
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_SCHEDULE_AUDIT, OnScheduleAudit)
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY, OnBackupContinously)
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT, OnBackupRetries)
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE, OnBackupUseDevice)
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_ANYDEVICE, OnBackupUseAnyDevice)
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT, OnBackupTimeout)
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES, OnBackupAudit)
	ON_BN_CLICKED(IDC_TELECOMMANDSERVICE_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDSERVICE_PRODUCT, OnSelchangeProduct)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, OnSelchangeDeviceName)
	ON_LBN_SELCHANGE(IDC_TELECOMMANDSERVICE_DEVICE, OnSelchangeDevice)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STARTTIME, OnSpinchangeDailyStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STOPTIME, OnSpinchangeDailyStopTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STARTTIME, OnSpinchangeStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STOPTIME, OnSpinchangeStopTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIME, OnSpinchangePeriodicTime)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN, OnSpinchangePeriodicTimeSpan)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL, OnSpinchangePeriodicInterval)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_NUMBER, OnSpinchangeBackupRetryCount)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT_PERIOD, OnSpinchangeBackupTimeout)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandServiceDialog message handlers

BOOL CTelecommandServiceDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	EnumProducts();
	EnumProductDevices();
	EnumBackupDevices();
	ShowDeviceDetails();
	AdjustToPrivileges();
	return TRUE;
}

void CTelecommandServiceDialog::OnAddDevice()
{
	INT  nIndex;
	INT  nCount;
	CString  szFileName;
	CString  szDevice[2];
	CTCUplinkDevice  *pDevice[2];
	CHourglassCursor  cCursor;

	for (; (pDevice[0] = new CTCUplinkDevice); )
	{
		for (nIndex = 0, nCount = (INT)m_pDevices[0].GetSize(), szDevice[0] = Combobox_GetText(GetDlgItem(IDC_TELECOMMANDSERVICE_PRODUCT), (INT)SendDlgItemMessage(IDC_TELECOMMANDSERVICE_PRODUCT, CB_GETCURSEL)); nIndex < nCount; nIndex++)
		{
			if ((pDevice[1] = m_pDevices[0].GetAt(nIndex)) && pDevice[1]->GetDeviceBrand() == szDevice[0])
			{
				if (!(szFileName = pDevice[1]->GetDeviceModule()).IsEmpty()) break;
				continue;
			}
		}
		for (nIndex = 0; nIndex < nCount; nIndex++)
		{
			szDevice[1].Format(STRING(IDS_TELECOMMANDUPLINKDEVICE_NAME_FORMAT), nIndex);
			if (m_pDevices[0].Find(szDevice[0], szDevice[1]) < 0) break;
		}
		for (pDevice[0]->SetDeviceBrand(szDevice[0]), pDevice[0]->SetDeviceName(szDevice[1]); IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_ALWAYS); )
		{
			pDevice[0]->SetScheduleOptions(TELECOMMANDUPLINKDEVICE_SCHEDULE_ALWAYS);
			break;
		}
		if (IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY))
		{
			pDevice[0]->SetScheduleOptions(TELECOMMANDUPLINKDEVICE_SCHEDULE_DAILY);
			pDevice[0]->SetScheduleDaily(Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STARTTIME)).GetTime() % SECONDSPERDAY, Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STOPTIME)).GetTime() % SECONDSPERDAY);
		}
		if (IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL))
		{
			pDevice[0]->SetScheduleOptions(TELECOMMANDUPLINKDEVICE_SCHEDULE_INTERVAL);
			pDevice[0]->SetScheduleInterval(Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STARTTIME)), Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STOPTIME)));
		}
		if (IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC))
		{
			pDevice[0]->SetScheduleOptions(TELECOMMANDUPLINKDEVICE_SCHEDULE_PERIODIC);
			pDevice[0]->SetSchedulePeriodic(Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIME)), Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN)), Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL)));
		}
		for (; IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_DISABLED); )
		{
			pDevice[0]->SetScheduleOptions(pDevice[0]->GetScheduleOptions() | TELECOMMANDUPLINKDEVICE_SCHEDULE_DISABLED);
			break;
		}
		for (; IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_AUDIT); )
		{
			pDevice[0]->SetScheduleOptions(pDevice[0]->GetScheduleOptions() | TELECOMMANDUPLINKDEVICE_SCHEDULE_AUDIT);
			break;
		}
		for (; IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY); )
		{
			pDevice[0]->SetBackupOptions(TELECOMMANDUPLINKDEVICE_BACKUP_CONTINOUSLY);
			break;
		}
		if (IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT))
		{
			pDevice[0]->SetBackupOptions(TELECOMMANDUPLINKDEVICE_BACKUP_RETRIES);
			pDevice[0]->SetBackupRetries((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_NUMBER)));
		}
		if (IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE))
		{
			pDevice[0]->SetBackupOptions(TELECOMMANDUPLINKDEVICE_BACKUP_USEDEVICE);
			pDevice[0]->SetBackupDevice(Combobox_GetText(GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME), (INT)SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_GETCURSEL)));
		}
		for (; IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_ANYDEVICE); )
		{
			pDevice[0]->SetBackupOptions(TELECOMMANDUPLINKDEVICE_BACKUP_USEANYDEVICE);
			break;
		}
		for (pDevice[0]->SetBackupTimeout((IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT)) ? (UINT)Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT_PERIOD)) : 0); IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES); )
		{
			pDevice[0]->SetBackupOptions(pDevice[0]->GetBackupOptions() | TELECOMMANDUPLINKDEVICE_BACKUP_AUDITFAILURES);
			break;
		}
		for (; pDevice[0]->Open(szFileName, szDevice[0]); )
		{
			if (pDevice[0]->Initialize() && pDevice[0]->Configure(this, IODEVICE_TYPE_CLIENT) && m_pDevices[0].Add(pDevice[0]) >= 0)
			{
				if ((pDevice[1] = m_pDevices[0].GetAt((nIndex = m_pDevices[0].Find(pDevice[0]->GetDeviceBrand(), EMPTYSTRING)))))
				{
					m_pDevices[0].RemoveAt(nIndex);
					delete pDevice[1];
				}
				SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pDevice[0]->GetDeviceName()));
				m_pDevices[0].SetActiveDevice(pDevice[0]);
				pDevice[0]->Close();
				break;
			}
			pDevice[0]->Close();
			delete pDevice[0];
			break;
		}
		GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE_CHANGE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDSERVICE_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDSERVICE_CHANGE) : FALSE);
		EnumBackupDevices();
		break;
	}
	GetDlgItem(IDC_TELECOMMANDSERVICE_PRODUCT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnChangeDevice()
{
	INT  nIndex;
	CString  szDevice;
	CTCUplinkDevice  *pDevice;
	CHourglassCursor  cCursor;

	for (; (pDevice = FindDevice()) && pDevice->Open(); )
	{
		if (!CheckAccountPrivilege(PRIVILEGE_TELECOMMANDSERVICE_CHANGE))
		{
			pDevice->Configure(this, IODEVICE_TYPE_CLIENT, TRUE);
			pDevice->Close();
			break;
		}
		if ((nIndex = m_pDevices[0].Find(pDevice->GetDeviceBrand(), pDevice->GetDeviceName())) >= 0)
		{
			for (szDevice = pDevice->GetDeviceName(), m_pDevices[0].RemoveAt(nIndex), pDevice->Configure(this, IODEVICE_TYPE_CLIENT), SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDevice)); (nIndex = m_pDevices[0].Add(pDevice)) >= 0; )
			{
				SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pDevice->GetDeviceName()));
				break;
			}
			for (EnumBackupDevices(), ShowDeviceDetails(); nIndex < 0; )
			{
				pDevice->Close();
				delete pDevice;
				break;
			}
			if (nIndex < 0) break;
		}
		pDevice->Close();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnRemoveDevice()
{
	INT  nIndex;
	CTCUplinkDevice  *pDevice;
	CHourglassCursor  cCursor;

	for (; (pDevice = FindDevice()); )
	{
		if (SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDevice->GetDeviceName())) >= 0)
		{
			for (; (nIndex = m_pDevices[0].Find(pDevice->GetDeviceBrand(), pDevice->GetDeviceName())) >= 0; )
			{
				if (SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_GETCOUNT) > 0)
				{
					m_pDevices[0].RemoveAt(nIndex);
					delete pDevice;
					break;
				}
				pDevice->SetDeviceName(EMPTYSTRING);
				break;
			}
			if (SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_GETCOUNT) > 0)
			{
				SendDlgItemMessage(IDC_TELECOMMANDSERVICE_DEVICE, LB_SETCURSEL);
				EnumBackupDevices();
				ShowDeviceDetails();
				break;
			}
			GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE_STATIC)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE_CHANGE)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELECOMMANDSERVICE_DEVICE_REMOVE)->EnableWindow(FALSE);
			EnumBackupDevices();
			ShowDeviceDetails();
		}
		break;
	}
	GetDlgItem(IDC_TELECOMMANDSERVICE_PRODUCT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnScheduleAlways()
{
	UINT  nOptions;
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		nOptions = pDevice->GetScheduleOptions();
		pDevice->SetScheduleOptions((nOptions & ~(TELECOMMANDUPLINKDEVICE_SCHEDULE_DAILY | TELECOMMANDUPLINKDEVICE_SCHEDULE_INTERVAL | TELECOMMANDUPLINKDEVICE_SCHEDULE_PERIODIC | TELECOMMANDUPLINKDEVICE_SCHEDULE_AUDIT)) | TELECOMMANDUPLINKDEVICE_SCHEDULE_ALWAYS);
	}
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_ALWAYS, TRUE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_AUDIT, FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_AUDIT)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnScheduleDaily()
{
	CTimeKey  tTime;
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetScheduleOptions((pDevice->GetScheduleOptions() & ~(TELECOMMANDUPLINKDEVICE_SCHEDULE_ALWAYS | TELECOMMANDUPLINKDEVICE_SCHEDULE_INTERVAL | TELECOMMANDUPLINKDEVICE_SCHEDULE_PERIODIC)) | TELECOMMANDUPLINKDEVICE_SCHEDULE_DAILY);
		pDevice->SetScheduleDaily(TELECOMMANDSERVICE_DAILYSTARTTIME, TELECOMMANDSERVICE_DAILYSTOPTIME);
	}
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_ALWAYS, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY, TRUE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC, FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STARTTIME), CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TELECOMMANDSERVICE_DAILYSTARTTIME));
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STOPTIME), CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TELECOMMANDSERVICE_DAILYSTOPTIME));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_AUDIT)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnScheduleInterval()
{
	CTimeKey  tTime;
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetScheduleOptions((pDevice->GetScheduleOptions() & ~(TELECOMMANDUPLINKDEVICE_SCHEDULE_ALWAYS | TELECOMMANDUPLINKDEVICE_SCHEDULE_DAILY | TELECOMMANDUPLINKDEVICE_SCHEDULE_PERIODIC)) | TELECOMMANDUPLINKDEVICE_SCHEDULE_INTERVAL);
		pDevice->SetScheduleInterval(tTime.GetTime(), tTime.GetTime() + TELECOMMANDSERVICE_INTERVALTIME);
	}
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_ALWAYS, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL, TRUE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC, FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STARTTIME), tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STOPTIME), CTimeKey(tTime.GetTime() + TELECOMMANDSERVICE_INTERVALTIME));
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_AUDIT)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnSchedulePeriodic()
{
	CTimeKey  tTime;
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetScheduleOptions((pDevice->GetScheduleOptions() & ~(TELECOMMANDUPLINKDEVICE_SCHEDULE_ALWAYS | TELECOMMANDUPLINKDEVICE_SCHEDULE_INTERVAL | TELECOMMANDUPLINKDEVICE_SCHEDULE_DAILY)) | TELECOMMANDUPLINKDEVICE_SCHEDULE_PERIODIC);
		pDevice->SetSchedulePeriodic(tTime, TELECOMMANDSERVICE_DEFAULTTIMESPAN, TELECOMMANDSERVICE_DEFAULTINTERVAL);
	}
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_ALWAYS, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIME), tTime);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN), TELECOMMANDSERVICE_DEFAULTTIMESPAN);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL), TELECOMMANDSERVICE_DEFAULTINTERVAL);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL_SECONDS)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_AUDIT)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnScheduleDisabled()
{
	UINT  nOptions;
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		nOptions = pDevice->GetScheduleOptions();
		pDevice->SetScheduleOptions((IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_DISABLED)) ? (nOptions | TELECOMMANDUPLINKDEVICE_SCHEDULE_DISABLED) : (nOptions & ~TELECOMMANDUPLINKDEVICE_SCHEDULE_DISABLED));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnScheduleAudit()
{
	UINT  nOptions;
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		nOptions = pDevice->GetScheduleOptions();
		pDevice->SetScheduleOptions((IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_SCHEDULE_AUDIT)) ? (nOptions | TELECOMMANDUPLINKDEVICE_SCHEDULE_AUDIT) : (nOptions & ~TELECOMMANDUPLINKDEVICE_SCHEDULE_AUDIT));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnBackupContinously()
{
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetBackupOptions((pDevice->GetBackupOptions() & ~(TELECOMMANDUPLINKDEVICE_BACKUP_RETRIES | TELECOMMANDUPLINKDEVICE_BACKUP_USEDEVICE | TELECOMMANDUPLINKDEVICE_BACKUP_USEANYDEVICE | TELECOMMANDUPLINKDEVICE_BACKUP_AUDITFAILURES)) | TELECOMMANDUPLINKDEVICE_BACKUP_CONTINOUSLY);
		pDevice->SetBackupOptions((!IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT)) ? (pDevice->GetBackupOptions() & ~TELECOMMANDUPLINKDEVICE_BACKUP_AUDITFAILURES) : pDevice->GetBackupOptions());
	}
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY, TRUE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_ANYDEVICE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES, (IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT)) ? IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES) : FALSE);
	SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnBackupRetries()
{
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetBackupOptions((pDevice->GetBackupOptions() & ~(TELECOMMANDUPLINKDEVICE_BACKUP_CONTINOUSLY | TELECOMMANDUPLINKDEVICE_BACKUP_USEDEVICE | TELECOMMANDUPLINKDEVICE_BACKUP_USEANYDEVICE)) | TELECOMMANDUPLINKDEVICE_BACKUP_RETRIES);
		pDevice->SetBackupRetries(TELECOMMANDSERVICE_DEFAULTRETRIES);
	}
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT, TRUE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_ANYDEVICE, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_NUMBER), TELECOMMANDSERVICE_DEFAULTRETRIES);
	SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_NUMBER)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnBackupUseDevice()
{
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetBackupOptions((pDevice->GetBackupOptions() & ~(TELECOMMANDUPLINKDEVICE_BACKUP_CONTINOUSLY | TELECOMMANDUPLINKDEVICE_BACKUP_RETRIES | TELECOMMANDUPLINKDEVICE_BACKUP_USEANYDEVICE)) | TELECOMMANDUPLINKDEVICE_BACKUP_USEDEVICE);
		pDevice->SetBackupDevice(Combobox_GetText(GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME), (INT)max(SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_GETCURSEL), 0)));
	}
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE, TRUE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_ANYDEVICE, FALSE);
	SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_GETCURSEL), 0));
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnBackupUseAnyDevice()
{
	UINT  nOptions;
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		nOptions = pDevice->GetBackupOptions();
		pDevice->SetBackupOptions((nOptions & ~(TELECOMMANDUPLINKDEVICE_BACKUP_CONTINOUSLY | TELECOMMANDUPLINKDEVICE_BACKUP_RETRIES | TELECOMMANDUPLINKDEVICE_BACKUP_USEDEVICE)) | TELECOMMANDUPLINKDEVICE_BACKUP_USEANYDEVICE);
	}
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_ANYDEVICE, TRUE);
	SendDlgItemMessage(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnBackupTimeout()
{
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetBackupOptions((IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY) && !IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT)) ? (pDevice->GetBackupOptions() & ~TELECOMMANDUPLINKDEVICE_BACKUP_AUDITFAILURES) : pDevice->GetBackupOptions());
		pDevice->SetBackupTimeout((IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT)) ? TELECOMMANDSERVICE_DEFAULTTIMEOUT : 0);
	}
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT_PERIOD), TELECOMMANDSERVICE_DEFAULTTIMEOUT);
	CheckDlgButton(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES, (!IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY) || IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT)) ? IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES) : FALSE);
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT_PERIOD)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT));
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT));
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES)->EnableWindow(!IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_CONTINOUSLY) || IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT));
	GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT_PERIOD)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnBackupAudit()
{
	UINT  nOptions;
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		nOptions = pDevice->GetBackupOptions();
		pDevice->SetBackupOptions((IsDlgButtonChecked(IDC_TELECOMMANDSERVICE_BACKUP_AUDITFAILURES)) ? (nOptions | TELECOMMANDUPLINKDEVICE_BACKUP_AUDITFAILURES) : (nOptions & ~TELECOMMANDUPLINKDEVICE_BACKUP_AUDITFAILURES));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnSelchangeProduct()
{
	EnumProductDevices();
	EnumBackupDevices();
	ShowDeviceDetails();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnSelchangeDevice()
{
	EnumBackupDevices();
	ShowDeviceDetails();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnSelchangeDeviceName()
{
	CString  szDevice;
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_DEVICE_NAME)->GetWindowText(szDevice);
		pDevice->SetBackupOptions((pDevice->GetBackupOptions() & ~(TELECOMMANDUPLINKDEVICE_BACKUP_CONTINOUSLY | TELECOMMANDUPLINKDEVICE_BACKUP_RETRIES | TELECOMMANDUPLINKDEVICE_BACKUP_USEANYDEVICE)) | TELECOMMANDUPLINKDEVICE_BACKUP_USEDEVICE);
		pDevice->SetBackupDevice(szDevice);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnSpinchangeDailyStartTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTCUplinkDevice  *pDevice;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STOPTIME)); (pDevice = FindDevice()); )
	{
		pDevice->SetScheduleDaily(tStartTime.GetTime() % SECONDSPERDAY, (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY && (tStartTime.GetTime() + 1) % SECONDSPERDAY) ? ((tStartTime.GetTime() + 1) % SECONDSPERDAY) : (max(tStartTime.GetTime(), tStopTime.GetTime()) % SECONDSPERDAY));
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STOPTIME), (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY && (tStartTime.GetTime() + 1) % SECONDSPERDAY) ? CTimeKey(tStartTime.GetTime() + 1) : max(tStartTime, tStopTime));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnSpinchangeDailyStopTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTCUplinkDevice  *pDevice;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STOPTIME)); (pDevice = FindDevice()); )
	{
		pDevice->SetScheduleDaily((tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY  &&  tStopTime.GetTime() % SECONDSPERDAY) ? ((tStopTime.GetTime() - 1) % SECONDSPERDAY) : (min(tStartTime.GetTime(), tStopTime.GetTime()) % SECONDSPERDAY), tStopTime.GetTime() % SECONDSPERDAY);
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_DAILY_STARTTIME), (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY  &&  tStopTime.GetTime() % SECONDSPERDAY) ? CTimeKey(tStopTime.GetTime() - 1) : min(tStartTime, tStopTime));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnSpinchangeStartTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTCUplinkDevice  *pDevice;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STOPTIME)); (pDevice = FindDevice()); )
	{
		pDevice->SetScheduleInterval(tStartTime, (tStartTime >= tStopTime) ? (tStartTime.GetTime() + 1) : tStopTime.GetTime());
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STOPTIME), (tStartTime >= tStopTime) ? CTimeKey(tStartTime.GetTime() + 1) : tStopTime);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnSpinchangeStopTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTCUplinkDevice  *pDevice;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STOPTIME)); (pDevice = FindDevice()); )
	{
		pDevice->SetScheduleInterval((tStartTime >= tStopTime) ? (tStopTime.GetTime() - 1) : tStartTime.GetTime(), tStopTime);
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_INTERVAL_STARTTIME), (tStartTime >= tStopTime) ? CTimeKey(tStopTime.GetTime() - 1) : tStartTime);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnSpinchangePeriodicTime()
{
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetScheduleOptions((pDevice->GetScheduleOptions() & ~(TELECOMMANDUPLINKDEVICE_SCHEDULE_ALWAYS | TELECOMMANDUPLINKDEVICE_SCHEDULE_DAILY | TELECOMMANDUPLINKDEVICE_SCHEDULE_INTERVAL)) | TELECOMMANDUPLINKDEVICE_SCHEDULE_PERIODIC);
		pDevice->SetSchedulePeriodic(Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIME)), Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN)), Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL)));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnSpinchangePeriodicTimeSpan()
{
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetScheduleOptions((pDevice->GetScheduleOptions() & ~(TELECOMMANDUPLINKDEVICE_SCHEDULE_ALWAYS | TELECOMMANDUPLINKDEVICE_SCHEDULE_DAILY | TELECOMMANDUPLINKDEVICE_SCHEDULE_INTERVAL)) | TELECOMMANDUPLINKDEVICE_SCHEDULE_PERIODIC);
		pDevice->SetSchedulePeriodic(Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIME)), Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN)), Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL)));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnSpinchangePeriodicInterval()
{
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetScheduleOptions((pDevice->GetScheduleOptions() & ~(TELECOMMANDUPLINKDEVICE_SCHEDULE_ALWAYS | TELECOMMANDUPLINKDEVICE_SCHEDULE_DAILY | TELECOMMANDUPLINKDEVICE_SCHEDULE_INTERVAL)) | TELECOMMANDUPLINKDEVICE_SCHEDULE_PERIODIC);
		pDevice->SetSchedulePeriodic(Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIME)), Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_TIMESPAN)), Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_SCHEDULE_PERIODIC_INTERVAL)));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnSpinchangeBackupRetryCount()
{
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice()))
	{
		pDevice->SetBackupOptions((pDevice->GetBackupOptions() & ~(TELECOMMANDUPLINKDEVICE_BACKUP_CONTINOUSLY | TELECOMMANDUPLINKDEVICE_BACKUP_USEDEVICE | TELECOMMANDUPLINKDEVICE_BACKUP_USEANYDEVICE)) | TELECOMMANDUPLINKDEVICE_BACKUP_RETRIES);
		pDevice->SetBackupRetries((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_RETRY_COUNT_NUMBER)));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnSpinchangeBackupTimeout()
{
	CTCUplinkDevice  *pDevice;

	if ((pDevice = FindDevice())) pDevice->SetBackupTimeout((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDSERVICE_BACKUP_TIMEOUT_PERIOD)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandServiceDialog::OnOK()
{
	CTCUplinkDevice  cDevice[2];
	CHourglassCursor  cCursor;

	for (GetTCService()->Lock(); GetTCService()->GetActiveTCUplinkDevice(&cDevice[0]) && m_pDevices[0].GetActiveDevice(&cDevice[1]); )
	{
		for (cDevice[1].SetCommandHandler(cDevice[0].GetCommandHandler()), cDevice[1].SetCommandHandlerState(cDevice[0].GetCommandHandlerState()); m_pDevices[0].SetActiveDevice(&cDevice[1]); )
		{
			GetTCService()->SetTCUplinkDevices(m_pDevices[0]);
			break;
		}
		break;
	}
	GetTCService()->Unlock();
	EndDialog(IDOK);
}

BOOL CTelecommandServiceDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDSERVICEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelecommandServiceDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDSERVICEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsConfigurationPage property page

IMPLEMENT_DYNCREATE(CTelecommandOptionsConfigurationPage, CLocalePropertyPage)

CTelecommandOptionsConfigurationPage::CTelecommandOptionsConfigurationPage() : CLocalePropertyPage(CTelecommandOptionsConfigurationPage::IDD)
{
	//{{AFX_DATA_INIT(CTelecommandOptionsConfigurationPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelecommandOptionsConfigurationPage::SetCommandHandlerConfiguration(LPCTSTR pszPreferredCommandHandler, LPCTSTR pszBackupCommandHandler, BOOL bSelfCommandHandler, BOOL bAnyCommandHandler, BOOL bExclusiveCommandHandler, UINT nCommandHandlerOptions, UINT nCommandHandlerPort, UINT nCommandHandlerBufferSize, CONST CTimeSpan &tCommandHandlerTimeout, CONST CStringArray &szCommandHandlerClients, CONST CUIntArray &nCommandHandlerAccessCodes, CONST CTimeKeyArray &tCommandHandlerStartTimes, CONST CTimeKeyArray &tCommandHandlerStopTimes, CONST CTCProcessCommandSources &pCommandSources, UINT nTelecommandingMode, UINT nTelecommandingState, UINT nTelecommandingFlags, BOOL bTelecommandingInterlockMode, BOOL bTelecommandingReleaseWaitMode, BOOL bTelecommandingAutoRejectionMode, CONST CTimeSpan &tVerificationUncertaintyTimeWindow, CONST CTimeSpan &tMaximumExecutionTimePeriod, CONST CTimeSpan &tMaximumTimeCheckPeriod, CONST CTimeSpan &tDefaultReleaseTimeWindow, BOOL bCLCWToolWindow, BOOL bAllowUpdates, BOOL bBackup)
{
	for (m_szCommandHandler[0][0] = pszPreferredCommandHandler, m_szCommandHandler[0][1] = pszBackupCommandHandler, m_bCommandHandler[0][0] = bSelfCommandHandler, m_bCommandHandler[0][1] = bAnyCommandHandler, m_bCommandHandler[0][2] = bExclusiveCommandHandler, m_nCommandHandlerOptions[0] = nCommandHandlerOptions, m_nCommandHandlerPort[0] = nCommandHandlerPort, m_nCommandHandlerBufferSize[0] = nCommandHandlerBufferSize, m_tCommandHandlerTimeout[0] = tCommandHandlerTimeout, m_szCommandHandlerClients[0].Copy(szCommandHandlerClients), m_nCommandHandlerAccessCodes[0].Copy(nCommandHandlerAccessCodes), m_tCommandHandlerStartTimes[0].Copy(tCommandHandlerStartTimes), m_tCommandHandlerStopTimes[0].Copy(tCommandHandlerStopTimes), m_pCommandHandlerSources[0].Copy(&pCommandSources), m_nCommandHandlerTelecommandingMode[0] = nTelecommandingMode, m_nCommandHandlerTelecommandingState[0] = ((nTelecommandingState & (TCSERVICE_COMMANDHANDLERSTATE_ENABLED | TCSERVICE_COMMANDHANDLERSTATE_DISABLED)) == 0) ? (nTelecommandingState | TCSERVICE_COMMANDHANDLERSTATE_ENABLED) : nTelecommandingState, m_nCommandHandlerTelecommandingFlags[0] = nTelecommandingFlags, m_bCommandHandlerTelecommandingInterlockMode[0] = bTelecommandingInterlockMode, m_bCommandHandlerTelecommandingReleaseWaitMode[0] = bTelecommandingReleaseWaitMode, m_bCommandHandlerTelecommandingAutoRejectionMode[0] = bTelecommandingAutoRejectionMode, m_tCommandHandlerVerificationUncertaintyTimeWindow[0] = tVerificationUncertaintyTimeWindow, m_tCommandHandlerMaximumExecutionTimePeriod[0] = tMaximumExecutionTimePeriod, m_tCommandHandlerMaximumTimeCheckPeriod[0] = tMaximumTimeCheckPeriod, m_tCommandHandlerDefaultReleaseTimeWindow[0] = tDefaultReleaseTimeWindow, m_bCLCWToolWindow[0] = bCLCWToolWindow, m_bUpdate = bAllowUpdates; bBackup; )
	{
		m_szCommandHandler[1][0] = m_szCommandHandler[0][0];
		m_szCommandHandler[1][1] = m_szCommandHandler[0][1];
		m_bCommandHandler[1][0] = m_bCommandHandler[0][0];
		m_bCommandHandler[1][1] = m_bCommandHandler[0][1];
		m_bCommandHandler[1][2] = m_bCommandHandler[0][2];
		m_nCommandHandlerOptions[1] = m_nCommandHandlerOptions[0];
		m_nCommandHandlerPort[1] = nCommandHandlerPort;
		m_tCommandHandlerTimeout[1] = tCommandHandlerTimeout;
		m_nCommandHandlerBufferSize[1] = nCommandHandlerBufferSize;
		m_szCommandHandlerClients[1].Copy(szCommandHandlerClients);
		m_nCommandHandlerAccessCodes[1].Copy(nCommandHandlerAccessCodes);
		m_tCommandHandlerStartTimes[1].Copy(tCommandHandlerStartTimes);
		m_tCommandHandlerStopTimes[1].Copy(tCommandHandlerStopTimes);
		m_pCommandHandlerSources[1].Copy(&m_pCommandHandlerSources[0]);
		m_nCommandHandlerTelecommandingMode[1] = m_nCommandHandlerTelecommandingMode[0];
		m_nCommandHandlerTelecommandingState[1] = m_nCommandHandlerTelecommandingState[0];
		m_nCommandHandlerTelecommandingFlags[1] = m_nCommandHandlerTelecommandingFlags[0];
		m_bCommandHandlerTelecommandingInterlockMode[1] = m_bCommandHandlerTelecommandingInterlockMode[0];
		m_bCommandHandlerTelecommandingReleaseWaitMode[1] = m_bCommandHandlerTelecommandingReleaseWaitMode[0];
		m_bCommandHandlerTelecommandingAutoRejectionMode[1] = m_bCommandHandlerTelecommandingAutoRejectionMode[0];
		m_tCommandHandlerMaximumTimeCheckPeriod[1] = m_tCommandHandlerMaximumTimeCheckPeriod[0];
		m_tCommandHandlerMaximumExecutionTimePeriod[1] = m_tCommandHandlerMaximumExecutionTimePeriod[0];
		m_tCommandHandlerDefaultReleaseTimeWindow[1] = m_tCommandHandlerDefaultReleaseTimeWindow[0];
		m_tCommandHandlerVerificationUncertaintyTimeWindow[1] = m_tCommandHandlerVerificationUncertaintyTimeWindow[0];
		m_bCLCWToolWindow[1] = m_bCLCWToolWindow[0];
		break;
	}
}

BOOL CTelecommandOptionsConfigurationPage::GetCommandHandlerConfiguration(CString &szPreferredCommandHandler, CString &szBackupCommandHandler, BOOL &bSelfCommandHandler, BOOL &bAnyCommandHandler, BOOL &bExclusiveCommandHandler, UINT &nCommandHandlerOptions, UINT &nCommandHandlerPort, UINT &nCommandHandlerBufferSize, CTimeSpan &tCommandHandlerTimeout, CStringArray &szCommandHandlerClients, CUIntArray &nCommandHandlerAccessCodes, CTimeKeyArray &tCommandHandlerStartTimes, CTimeKeyArray &tCommandHandlerStopTimes, CTCProcessCommandSources &pCommandSources, UINT &nTelecommandingMode, UINT &nTelecommandingState, UINT &nTelecommandingFlags, BOOL &bTelecommandingInterlockMode, BOOL &bTelecommandingReleaseWaitMode, BOOL &bTelecommandingAutoRejectionMode, CTimeSpan &tVerificationUncertaintyTimeWindow, CTimeSpan &tMaximumExecutionTimePeriod, CTimeSpan &tMaximumTimeCheckPeriod, CTimeSpan &tDefaultReleaseTimeWindow, BOOL &bCLCWToolWindow) CONST
{
	szPreferredCommandHandler = m_szCommandHandler[0][0];
	szBackupCommandHandler = m_szCommandHandler[0][1];
	bSelfCommandHandler = m_bCommandHandler[0][0];
	bAnyCommandHandler = m_bCommandHandler[0][1];
	bExclusiveCommandHandler = m_bCommandHandler[0][2];
	nCommandHandlerOptions = m_nCommandHandlerOptions[0];
	nCommandHandlerPort = m_nCommandHandlerPort[0];
	tCommandHandlerTimeout = m_tCommandHandlerTimeout[0];
	nCommandHandlerBufferSize = m_nCommandHandlerBufferSize[0];
	szCommandHandlerClients.Copy(m_szCommandHandlerClients[0]);
	nCommandHandlerAccessCodes.Copy(m_nCommandHandlerAccessCodes[0]);
	tCommandHandlerStartTimes.Copy(m_tCommandHandlerStartTimes[0]);
	tCommandHandlerStopTimes.Copy(m_tCommandHandlerStopTimes[0]);
	pCommandSources.Copy(&m_pCommandHandlerSources[0]);
	nTelecommandingMode = m_nCommandHandlerTelecommandingMode[0];
	nTelecommandingState = m_nCommandHandlerTelecommandingState[0];
	nTelecommandingFlags = m_nCommandHandlerTelecommandingFlags[0];
	bTelecommandingInterlockMode = m_bCommandHandlerTelecommandingInterlockMode[0];
	bTelecommandingReleaseWaitMode = m_bCommandHandlerTelecommandingReleaseWaitMode[0];
	bTelecommandingAutoRejectionMode = m_bCommandHandlerTelecommandingAutoRejectionMode[0];
	tMaximumTimeCheckPeriod = m_tCommandHandlerMaximumTimeCheckPeriod[0];
	tMaximumExecutionTimePeriod = m_tCommandHandlerMaximumExecutionTimePeriod[0];
	tDefaultReleaseTimeWindow = m_tCommandHandlerDefaultReleaseTimeWindow[0];
	tVerificationUncertaintyTimeWindow = m_tCommandHandlerVerificationUncertaintyTimeWindow[0];
	bCLCWToolWindow = m_bCLCWToolWindow[0];
	return IsModified();
}

BOOL CTelecommandOptionsConfigurationPage::SetMasterManualModeOwner(LPCTSTR pszOwner)
{
	INT  nCommandSource;
	INT  nCommandSources;
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	for (nCommandSource = 0, nCommandSources = (GetMasterManualModeOwner().CompareNoCase(pszOwner)) ? (INT)m_pCommandHandlerSources[0].GetSize() : -1; nCommandSource < nCommandSources; nCommandSource++)
	{
		if ((pCommandSourceInfo = m_pCommandHandlerSources[0].GetAt(nCommandSource)) && pCommandSourceInfo->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK)
		{
			pCommandSourceInfo->SetTelecommandingMode((!pCommandSourceInfo->GetComputerName().CompareNoCase(pszOwner)) ? (pCommandSourceInfo->GetTelecommandingMode() | TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL) : (pCommandSourceInfo->GetTelecommandingMode() & ~TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL));
			continue;
		}
	}
	for (m_nCommandHandlerTelecommandingMode[0] = (m_pCommandHandlerSources[0].Find(pszOwner, TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK) >= 0 && lstrlen(pszOwner) > 0) ? (m_nCommandHandlerTelecommandingMode[0] | TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL) : (m_nCommandHandlerTelecommandingMode[0] & ~TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL); IsWindow(GetSafeHwnd()) && nCommandSource == nCommandSources; )
	{
		GetParent()->UpdateCommandHandlerSources(pszOwner);
		ShowConfiguration();
		return TRUE;
	}
	return((!IsWindow(GetSafeHwnd()) || nCommandSources < 0) ? TRUE : FALSE);
}

CString CTelecommandOptionsConfigurationPage::GetMasterManualModeOwner() CONST
{
	INT  nCommandSource;
	INT  nCommandSources;
	CString  szMasterManualModeOwner;
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	for (nCommandSource = 0, nCommandSources = (m_nCommandHandlerTelecommandingMode[0] & TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL) ? (INT)m_pCommandHandlerSources[0].GetSize() : 0; nCommandSource < nCommandSources; nCommandSource++)
	{
		if ((pCommandSourceInfo = m_pCommandHandlerSources[0].GetAt(nCommandSource)) && pCommandSourceInfo->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK)
		{
			if (pCommandSourceInfo->GetTelecommandingMode() & TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL)
			{
				szMasterManualModeOwner = pCommandSourceInfo->GetComputerName();
				break;
			}
		}
	}
	return szMasterManualModeOwner;
}

INT CTelecommandOptionsConfigurationPage::CollectLogEntries(CTCLogEntries &pEntries) CONST
{
	INT  nClient[2];
	INT  nClients[2];
	CString  szLogEntry;
	CString  szCommandHandler;
	CTCUplinkDevice  cDevice;
	CTimeKey  tLogEntry;

	for (GetTCService()->GetActiveTCUplinkDevice(&cDevice), szCommandHandler = (cDevice.GetCommandHandlerState() & TCSERVICE_COMMANDHANDLERSTATE_LINK_GOOD) ? cDevice.GetCommandHandler() : EMPTYSTRING, pEntries.RemoveAll(); m_szCommandHandler[0][0].CompareNoCase(m_szCommandHandler[1][0]); )
	{
		szLogEntry.Format((!m_szCommandHandler[0][0].IsEmpty()) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_PRIMARYCOMMANDHANDLER) : STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_NOPRIMARYCOMMANDHANDLER), (LPCTSTR)m_szCommandHandler[0][0]);
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_COMMANDHANDLER), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_COMMANDHANDLERCHANGE), szLogEntry, tLogEntry);
		break;
	}
	if (m_szCommandHandler[0][1].CompareNoCase(m_szCommandHandler[1][1]))
	{
		szLogEntry.Format((!m_szCommandHandler[0][1].IsEmpty()) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_SECONDARYCOMMANDHANDLER) : STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_NOSECONDARYCOMMANDHANDLER), (LPCTSTR)m_szCommandHandler[0][1]);
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_COMMANDHANDLER), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_COMMANDHANDLERCHANGE), szLogEntry, tLogEntry);
	}
	if (m_bCommandHandler[0][0] != m_bCommandHandler[1][0])
	{
		szLogEntry = (m_bCommandHandler[0][0]) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_ALLOWSELFTOBECOMMANDHANDLER))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_ALLOWSELFTOBECOMMANDHANDLER)));
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_COMMANDHANDLER), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_COMMANDHANDLERCHANGE), szLogEntry, tLogEntry);
	}
	if (m_bCommandHandler[0][1] != m_bCommandHandler[1][1])
	{
		szLogEntry = (m_bCommandHandler[0][1]) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_ALLOWANYTOBECOMMANDHANDLER))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_ALLOWANYTOBECOMMANDHANDLER)));
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_COMMANDHANDLER), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_COMMANDHANDLERCHANGE), szLogEntry, tLogEntry);
	}
	if (m_bCommandHandler[0][2] != m_bCommandHandler[1][2])
	{
		szLogEntry = (m_bCommandHandler[0][2]) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_ENSUREUNIQUECOMMANDHANDLER))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_ENSUREUNIQUECOMMANDHANDLER)));
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_COMMANDHANDLER), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_COMMANDHANDLERCHANGE), szLogEntry, tLogEntry);
	}
	if (m_nCommandHandlerPort[0] != m_nCommandHandlerPort[1])
	{
		szLogEntry.Format(CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_CHANGING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_COMMANDHANDLERPORTNUMBER)), m_nCommandHandlerPort[0]);
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_COMMANDHANDLER), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_COMMANDHANDLERCHANGE), szLogEntry, tLogEntry);
	}
	if (m_nCommandHandlerBufferSize[0] != m_nCommandHandlerBufferSize[1])
	{
		szLogEntry.Format(CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_CHANGING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_COMMANDHANDLERBUFFERSIZE)), m_nCommandHandlerBufferSize[0] / 1024);
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_COMMANDHANDLER), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_COMMANDHANDLERCHANGE), szLogEntry, tLogEntry);
	}
	if (m_tCommandHandlerTimeout[0] != m_tCommandHandlerTimeout[1])
	{
		szLogEntry.Format(CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_CHANGING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_COMMANDHANDLERTIMEOUT)), m_tCommandHandlerTimeout[0].GetTotalSeconds());
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_COMMANDHANDLER), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_COMMANDHANDLERCHANGE), szLogEntry, tLogEntry);
	}
	for (nClient[0] = 0, nClients[0] = (INT)m_szCommandHandlerClients[0].GetSize(); nClient[0] < nClients[0]; nClient[0]++)
	{
		for (nClient[1] = 0, nClients[1] = (INT)m_szCommandHandlerClients[1].GetSize(); nClient[1] < nClients[1]; nClient[1]++)
		{
			if (!m_szCommandHandlerClients[0].GetAt(nClient[0]).CompareNoCase(m_szCommandHandlerClients[1].GetAt(nClient[1])))
			{
				if (m_nCommandHandlerAccessCodes[0].GetAt(nClient[0]) != m_nCommandHandlerAccessCodes[1].GetAt(nClient[1])) continue;
				if (m_tCommandHandlerStartTimes[0].GetAt(nClient[0]) != m_tCommandHandlerStartTimes[1].GetAt(nClient[1])) continue;
				if (m_tCommandHandlerStopTimes[0].GetAt(nClient[0]) != m_tCommandHandlerStopTimes[1].GetAt(nClient[1])) continue;
				break;
			}
			continue;
		}
		if (nClient[1] == nClients[1]) break;
	}
	if (m_szCommandHandlerClients[0].GetSize() != m_szCommandHandlerClients[1].GetSize() || nClient[0] < nClients[0])
	{
		szLogEntry = CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_CHANGING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_COMMANDHANDLERCLIENTS));
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_COMMANDHANDLER), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_COMMANDHANDLERCHANGE), szLogEntry, tLogEntry);
	}
	if ((m_nCommandHandlerOptions[0] & TCSERVICE_COMMANDHANDLEROPTION_ALWAYSALLOWEXIT) != (m_nCommandHandlerOptions[1] & TCSERVICE_COMMANDHANDLEROPTION_ALWAYSALLOWEXIT))
	{
		szLogEntry = (m_nCommandHandlerOptions[0] & TCSERVICE_COMMANDHANDLEROPTION_ALWAYSALLOWEXIT) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_ALLOWTOEXITCOMMANDHANDLER))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_ALLOWTOEXITCOMMANDHANDLER)));
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_COMMANDHANDLER), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_COMMANDHANDLERCHANGE), szLogEntry, tLogEntry);
	}
	if ((m_nCommandHandlerTelecommandingMode[0] & TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL) != (m_nCommandHandlerTelecommandingMode[1] & TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL))
	{
		szLogEntry = (m_nCommandHandlerTelecommandingMode[0] & TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_MASTERMANALMODE))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_MASTERMANALMODE)));
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_MANUALSTACK), (m_nCommandHandlerTelecommandingMode[0] & TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL) ? FindMasterManualModeOwner(m_pCommandHandlerSources[0]) : FindMasterManualModeOwner(m_pCommandHandlerSources[1]), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_MODECHANGE), szLogEntry, tLogEntry);
	}
	if (m_bCommandHandlerTelecommandingInterlockMode[0] != m_bCommandHandlerTelecommandingInterlockMode[1])
	{
		szLogEntry = (m_bCommandHandlerTelecommandingInterlockMode[0]) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_INTERLOCKMODE))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_INTERLOCKMODE)));
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_ALLCOMMANDSOURCES), STRING(IDS_TELECOMMANDOPTIONS_LOGDESTINATION_ALLCOMPUTERS), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_INTERLOCKMODECHANGE), szLogEntry, tLogEntry);
	}
	if (m_bCommandHandlerTelecommandingReleaseWaitMode[0] != m_bCommandHandlerTelecommandingReleaseWaitMode[1])
	{
		szLogEntry = (m_bCommandHandlerTelecommandingReleaseWaitMode[0]) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_RELEASEWAITMODE))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_RELEASEWAITMODE)));
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_ALLCOMMANDSOURCES), STRING(IDS_TELECOMMANDOPTIONS_LOGDESTINATION_ALLCOMPUTERS), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_RELEASEWAITMODECHANGE), szLogEntry, tLogEntry);
	}
	if (m_bCommandHandlerTelecommandingAutoRejectionMode[0] != m_bCommandHandlerTelecommandingAutoRejectionMode[1])
	{
		szLogEntry = (m_bCommandHandlerTelecommandingAutoRejectionMode[0]) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_AUTOREJECTIONMODE))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_AUTOREJECTIONMODE)));
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_ALLCOMMANDSOURCES), STRING(IDS_TELECOMMANDOPTIONS_LOGDESTINATION_ALLCOMPUTERS), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_AUTOREJECTIONMODECHANGE), szLogEntry, tLogEntry);
	}
	if ((m_nCommandHandlerTelecommandingState[0] & TCSERVICE_COMMANDHANDLERSTATE_DISABLED) != (m_nCommandHandlerTelecommandingState[1] & TCSERVICE_COMMANDHANDLERSTATE_DISABLED))
	{
		szLogEntry = (m_nCommandHandlerTelecommandingState[0] & TCSERVICE_COMMANDHANDLERSTATE_DISABLED) ? STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLED) : STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLED);
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_ALLCOMMANDSOURCES), STRING(IDS_TELECOMMANDOPTIONS_LOGDESTINATION_ALLCOMPUTERS), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_STATECHANGE), szLogEntry, tLogEntry);
	}
	if ((m_nCommandHandlerTelecommandingFlags[0] & (TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_PTV_DISABLE)) != (m_nCommandHandlerTelecommandingFlags[1] & (TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_PTV_DISABLE)))
	{
		szLogEntry = (m_nCommandHandlerTelecommandingFlags[0] & (TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_PTV_DISABLE)) ? ((m_nCommandHandlerTelecommandingFlags[0] & TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_OVERRIDING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_PTVCHECKS))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_PTVCHECKS)))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_PTVCHECKS)));
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_ALLCOMMANDSOURCES), STRING(IDS_TELECOMMANDOPTIONS_LOGDESTINATION_ALLCOMPUTERS), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_CHECKSCHANGE), szLogEntry, tLogEntry);
	}
	if ((m_nCommandHandlerTelecommandingFlags[0] & (TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_PEV_DISABLE)) != (m_nCommandHandlerTelecommandingFlags[1] & (TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_PEV_DISABLE)))
	{
		szLogEntry = (m_nCommandHandlerTelecommandingFlags[0] & (TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_PEV_DISABLE)) ? ((m_nCommandHandlerTelecommandingFlags[0] & TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_OVERRIDING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_PEVCHECKS))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_PEVCHECKS)))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_PEVCHECKS)));
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_ALLCOMMANDSOURCES), STRING(IDS_TELECOMMANDOPTIONS_LOGDESTINATION_ALLCOMPUTERS), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_CHECKSCHANGE), szLogEntry, tLogEntry);
	}
	if ((m_nCommandHandlerTelecommandingFlags[0] & (TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_CEV_DISABLE)) != (m_nCommandHandlerTelecommandingFlags[1] & (TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_CEV_DISABLE)))
	{
		szLogEntry = (m_nCommandHandlerTelecommandingFlags[0] & (TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_CEV_DISABLE)) ? ((m_nCommandHandlerTelecommandingFlags[0] & TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_OVERRIDING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_CEVCHECKS))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_CEVCHECKS)))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_CEVCHECKS)));
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_ALLCOMMANDSOURCES), STRING(IDS_TELECOMMANDOPTIONS_LOGDESTINATION_ALLCOMPUTERS), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_CHECKSCHANGE), szLogEntry, tLogEntry);
	}
	if (m_tCommandHandlerVerificationUncertaintyTimeWindow[0] != m_tCommandHandlerVerificationUncertaintyTimeWindow[1])
	{
		szLogEntry.Format(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_VERIFICATIONUNCERTAINTYTIMEWINDOW), m_tCommandHandlerVerificationUncertaintyTimeWindow[0].GetTotalSeconds());
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_COMMANDHANDLER), szCommandHandler, STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_VERIFICATIONUNCERTAINTYTIMEWINDOWCHANGE), szLogEntry, tLogEntry);
	}
	if (m_tCommandHandlerMaximumExecutionTimePeriod[0] != m_tCommandHandlerMaximumExecutionTimePeriod[1])
	{
		szLogEntry.Format(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_MAXIMUMEXECUTIONTIMEPERIOD), m_tCommandHandlerMaximumExecutionTimePeriod[0].GetTotalHours());
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_COMMANDHANDLER), szCommandHandler, STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_MAXIMUMEXECUTIONTIMEPERIODCHANGE), szLogEntry, tLogEntry);
	}
	if (m_tCommandHandlerMaximumTimeCheckPeriod[0] != m_tCommandHandlerMaximumTimeCheckPeriod[1])
	{
		szLogEntry.Format(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_MAXIMUMTIMECHECKPERIOD), m_tCommandHandlerMaximumTimeCheckPeriod[0].GetTotalHours());
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_COMMANDHANDLER), szCommandHandler, STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_MAXIMUMTIMECHECKPERIODCHANGE), szLogEntry, tLogEntry);
	}
	if (m_tCommandHandlerDefaultReleaseTimeWindow[0] != m_tCommandHandlerDefaultReleaseTimeWindow[1])
	{
		szLogEntry.Format(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_DEFAULTRELEASETIMEWINDOW), m_tCommandHandlerDefaultReleaseTimeWindow[0].GetTotalSeconds());
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_COMMANDHANDLER), szCommandHandler, STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_DEFAULTRELEASETIMEWINDOWCHANGE), szLogEntry, tLogEntry);
	}
	return((INT)pEntries.GetSize());
}

CTelecommandOptionsDialog *CTelecommandOptionsConfigurationPage::GetParent() CONST
{
	return((CTelecommandOptionsDialog *)CLocalePropertyPage::GetParent());
}

BOOL CTelecommandOptionsConfigurationPage::EnumComputers()
{
	INT  nComputer;
	INT  nComputers;
	CStringArray  szComputers;

	for (nComputer = 0, nComputers = GetNetworkBrowseService()->EnumNetworkComputers(szComputers); nComputer < nComputers; nComputer++)
	{
		SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
		SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
	}
	return((nComputer == nComputers) ? TRUE : FALSE);
}

BOOL CTelecommandOptionsConfigurationPage::EnumClients()
{
	INT  nClient;
	INT  nClients;
	BOOL  bClients;
	CString  szClient;
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	for (nClient = 0, nClients = (INT)m_pCommandHandlerSources[0].GetSize(), szClient = GetMasterManualModeOwner(), bClients = FALSE; nClient < nClients; nClient++)
	{
		if ((pCommandSourceInfo = m_pCommandHandlerSources[0].GetAt(nClient)) && (!pCommandSourceInfo->GetComputerName().CompareNoCase(szClient) || szClient.IsEmpty()))
		{
			for (bClients = (pCommandSourceInfo->GetTelecommandingMode() & TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL) ? TRUE : bClients; SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pCommandSourceInfo->GetComputerName()) < 0; )
			{
				SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pCommandSourceInfo->GetComputerName());
				break;
			}
		}
	}
	m_nCommandHandlerTelecommandingMode[0] = (bClients) ? (m_nCommandHandlerTelecommandingMode[0] | TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL) : (m_nCommandHandlerTelecommandingMode[0] & ~TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL);
	m_nCommandHandlerTelecommandingMode[1] = m_nCommandHandlerTelecommandingMode[0];
	return((nClients >= 0) ? TRUE : FALSE);
}

VOID CTelecommandOptionsConfigurationPage::ShowConfiguration()
{
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szCommandHandler[0][0]));
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szCommandHandler[0][1]));
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)GetMasterManualModeOwner()));
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_VERIFICATIONUNCERTAINTYTIMEWINDOW_INTERVAL), m_tCommandHandlerVerificationUncertaintyTimeWindow[0].GetTotalSeconds());
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMEXECUTIONTIMEPERIOD_INTERVAL), m_tCommandHandlerMaximumExecutionTimePeriod[0].GetTotalHours());
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMTIMECHECKPERIOD_INTERVAL), m_tCommandHandlerMaximumTimeCheckPeriod[0].GetTotalHours());
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL), m_tCommandHandlerDefaultReleaseTimeWindow[0].GetTotalSeconds());
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY, !m_szCommandHandler[0][0].IsEmpty());
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY, !m_szCommandHandler[0][1].IsEmpty());
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ALLOWSELF, m_bCommandHandler[0][0]);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_USEANY, m_bCommandHandler[0][1]);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ENSUREUNIQUE, m_bCommandHandler[0][2]);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ALWAYSALLOWEXIT, (m_nCommandHandlerOptions[0] & TCSERVICE_COMMANDHANDLEROPTION_ALWAYSALLOWEXIT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE, (m_nCommandHandlerTelecommandingMode[0] & TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_RELEASEWAITMODE, m_bCommandHandlerTelecommandingReleaseWaitMode[0]);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_AUTOMATICREJECTIONMODE, m_bCommandHandlerTelecommandingAutoRejectionMode[0]);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALSTATE_DISABLERELEASE, (m_nCommandHandlerTelecommandingState[0] & TCSERVICE_COMMANDHANDLERSTATE_DISABLED) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_INTERLOCKS, m_bCommandHandlerTelecommandingInterlockMode[0]);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDEPTV, (m_nCommandHandlerTelecommandingFlags[0] & TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLEPTV, (m_nCommandHandlerTelecommandingFlags[0] & TCSERVICE_COMMANDSOURCEFLAGS_PTV_DISABLE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDEPEV, (m_nCommandHandlerTelecommandingFlags[0] & TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLEPEV, (m_nCommandHandlerTelecommandingFlags[0] & TCSERVICE_COMMANDSOURCEFLAGS_PEV_DISABLE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDECEV, (m_nCommandHandlerTelecommandingFlags[0] & TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLECEV, (m_nCommandHandlerTelecommandingFlags[0] & TCSERVICE_COMMANDSOURCEFLAGS_CEV_DISABLE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_SHOWCLCWPANEL, m_bCLCWToolWindow[0]);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME)->SetWindowText(m_szCommandHandler[0][0]);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME)->SetWindowText(m_szCommandHandler[0][1]);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE));
}

BOOL CTelecommandOptionsConfigurationPage::CollectLogEntry(CTCLogEntries &pEntries, LPCTSTR pszName, LPCTSTR pszDescription, LPCTSTR pszActivity, CONST CTimeKey &tTime) CONST
{
	CComputerToken  cComputerToken;

	return CollectLogEntry(pEntries, pszName, cComputerToken.GetComputerName(), pszDescription, pszActivity, tTime);
}
BOOL CTelecommandOptionsConfigurationPage::CollectLogEntry(CTCLogEntries &pEntries, LPCTSTR pszName, LPCTSTR pszComputer, LPCTSTR pszDescription, LPCTSTR pszActivity, CONST CTimeKey &tTime) CONST
{
	CTCLogEntry  *pEntry;

	if ((pEntry = new CTCLogEntry))
	{
		for (pEntry->SetName(pszName), pEntry->SetComputerName(pszComputer), pEntry->SetDescription(pszDescription), pEntry->SetActivity(pszActivity), pEntry->SetUser(GetAccountUserName()), pEntry->SetTime(tTime); pEntries.Add(pEntry) >= 0; ) return TRUE;
		delete pEntry;
	}
	return FALSE;
}

CString CTelecommandOptionsConfigurationPage::FindMasterManualModeOwner(CONST CTCProcessCommandSources &pCommandSources) CONST
{
	INT  nCommandSource;
	INT  nCommandSources;
	CString  szMasterManualModeOwner;
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	for (nCommandSource = 0, nCommandSources = (INT)pCommandSources.GetSize(); nCommandSource < nCommandSources; nCommandSource++)
	{
		if ((pCommandSourceInfo = pCommandSources.GetAt(nCommandSource)) && pCommandSourceInfo->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK)
		{
			if (pCommandSourceInfo->GetTelecommandingMode() & TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL)
			{
				szMasterManualModeOwner = pCommandSourceInfo->GetComputerName();
				break;
			}
		}
	}
	return szMasterManualModeOwner;
}

VOID CTelecommandOptionsConfigurationPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE)));
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME, bCheck, TRUE, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME, bCheck, TRUE, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ALLOWSELF, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_USEANY, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ENSUREUNIQUE, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ALWAYSALLOWEXIT, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_RELEASEWAITMODE, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_AUTOMATICREJECTIONMODE, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALSTATE_DISABLERELEASE, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDEPTV, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLEPTV, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDEPEV, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLEPEV, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDECEV, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLECEV, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_VERIFICATIONUNCERTAINTYTIMEWINDOW_INTERVAL, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_INTERLOCKS, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMEXECUTIONTIMEPERIOD_INTERVAL, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMTIMECHECKPERIOD_INTERVAL, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_SHOWCLCWPANEL, m_bUpdate  &&  bCheck);
}

BOOL CTelecommandOptionsConfigurationPage::IsModified(BOOL bAll) CONST
{
	INT  nClient[2];
	INT  nClients[2];

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nClient[0] = 0, nClients[0] = (!m_szCommandHandler[0][0].CompareNoCase(m_szCommandHandler[1][0]) && !m_szCommandHandler[0][1].CompareNoCase(m_szCommandHandler[1][1]) && m_bCommandHandler[0][0] == m_bCommandHandler[1][0] && m_bCommandHandler[0][1] == m_bCommandHandler[1][1] && m_bCommandHandler[0][2] == m_bCommandHandler[1][2] && m_nCommandHandlerOptions[0] == m_nCommandHandlerOptions[1] && m_nCommandHandlerPort[0] == m_nCommandHandlerPort[1] && m_nCommandHandlerBufferSize[0] == m_nCommandHandlerBufferSize[1] && m_tCommandHandlerTimeout[0] == m_tCommandHandlerTimeout[1] && m_szCommandHandlerClients[0].GetSize() == m_szCommandHandlerClients[1].GetSize() && m_nCommandHandlerAccessCodes[0].GetSize() == m_nCommandHandlerAccessCodes[1].GetSize() && m_tCommandHandlerStartTimes[0].GetSize() == m_tCommandHandlerStartTimes[1].GetSize() && m_tCommandHandlerStopTimes[0].GetSize() == m_tCommandHandlerStopTimes[1].GetSize() && m_pCommandHandlerSources[0].Compare(&m_pCommandHandlerSources[1]) && m_nCommandHandlerTelecommandingMode[0] == m_nCommandHandlerTelecommandingMode[1] && m_nCommandHandlerTelecommandingState[0] == m_nCommandHandlerTelecommandingState[1] && m_nCommandHandlerTelecommandingFlags[0] == m_nCommandHandlerTelecommandingFlags[1] && m_bCommandHandlerTelecommandingInterlockMode[0] == m_bCommandHandlerTelecommandingInterlockMode[1] && m_bCommandHandlerTelecommandingReleaseWaitMode[0] == m_bCommandHandlerTelecommandingReleaseWaitMode[1] && m_bCommandHandlerTelecommandingAutoRejectionMode[0] == m_bCommandHandlerTelecommandingAutoRejectionMode[1] && m_tCommandHandlerVerificationUncertaintyTimeWindow[0] == m_tCommandHandlerVerificationUncertaintyTimeWindow[1] && m_tCommandHandlerMaximumExecutionTimePeriod[0] == m_tCommandHandlerMaximumExecutionTimePeriod[1] && m_tCommandHandlerMaximumTimeCheckPeriod[0] == m_tCommandHandlerMaximumTimeCheckPeriod[1] && m_tCommandHandlerDefaultReleaseTimeWindow[0] == m_tCommandHandlerDefaultReleaseTimeWindow[1] && m_bCLCWToolWindow[0] == m_bCLCWToolWindow[1]) ? (INT)m_szCommandHandlerClients[0].GetSize() : -1; nClient[0] < nClients[0]; nClient[0]++)
		{
			for (nClient[1] = 0, nClients[1] = (INT)m_szCommandHandlerClients[1].GetSize(); nClient[1] < nClients[1]; nClient[1]++)
			{
				if (m_szCommandHandlerClients[0].GetAt(nClient[0]).CompareNoCase(m_szCommandHandlerClients[1].GetAt(nClient[1]))) continue;
				if (m_nCommandHandlerAccessCodes[0].GetAt(nClient[0]) != m_nCommandHandlerAccessCodes[1].GetAt(nClient[1])) continue;
				if (m_tCommandHandlerStartTimes[0].GetAt(nClient[0]) != m_tCommandHandlerStartTimes[1].GetAt(nClient[1])) continue;
				if (m_tCommandHandlerStopTimes[0].GetAt(nClient[0]) != m_tCommandHandlerStopTimes[1].GetAt(nClient[1])) continue;
				break;
			}
			if (nClient[1] == nClients[1]) break;
		}
		return((nClient[0] != nClients[0]) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::IsModified() : FALSE);
}

BOOL CTelecommandOptionsConfigurationPage::Check(BOOL bAll) CONST
{
	CString  szCommandHandler[2];
	CString  szMasterManualModeOwner;
	CComputerToken  cComputerToken;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME)->GetWindowText(szCommandHandler[0]);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME)->GetWindowText(szCommandHandler[1]);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER)->GetWindowText(szMasterManualModeOwner);
		return((!IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY) || !szCommandHandler[0].IsEmpty()) && (!IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY) || !szCommandHandler[1].IsEmpty()) && (szCommandHandler[0].CompareNoCase(szCommandHandler[1]) || szCommandHandler[0].IsEmpty()) && (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ALLOWSELF) || (szCommandHandler[0].CompareNoCase(cComputerToken.GetComputerName()) && szCommandHandler[1].CompareNoCase(cComputerToken.GetComputerName()))) && (!IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE) || GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER)->SendMessage(CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMasterManualModeOwner) >= 0));
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

void CTelecommandOptionsConfigurationPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandOptionsConfigurationPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelecommandOptionsConfigurationPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelecommandOptionsConfigurationPage)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY, OnPrimaryCommandHandler)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY, OnSecondaryCommandHandler)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ALLOWSELF, OnAllowSelfCommandHandler)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_USEANY, OnUseAnyCommandHandler)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ENSUREUNIQUE, OnEnsureUniqueCommandHandler)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ALWAYSALLOWEXIT, OnAlwaysAllowExit)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_MORE, OnMoreOptions)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE, OnMasterManualMode)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_RELEASEWAITMODE, OnReleaseWaitMode)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_AUTOMATICREJECTIONMODE, OnAutoRejectionMode)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALSTATE_DISABLERELEASE, OnDisableRelease)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDEPTV, OnOverridePTV)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDEPEV, OnOverridePEV)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDECEV, OnOverrideCEV)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLEPTV, OnDisablePTV)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLEPEV, OnDisablePEV)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLECEV, OnDisableCEV)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_INTERLOCKS, OnEnableInterlocks)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_SHOWCLCWPANEL, OnShowCLCWPanel)
	ON_CBN_EDITCHANGE(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME, OnEditchangePrimaryCommandHandler)
	ON_CBN_EDITCHANGE(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME, OnEditchangeSecondaryCommandHandler)
	ON_CBN_EDITCHANGE(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER, OnEditchangeMasterManualModeOwner)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME, OnSelchangePrimaryCommandHandler)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME, OnSelchangeSecondaryCommandHandler)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER, OnSelchangeMasterManualModeOwner)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_VERIFICATIONUNCERTAINTYTIMEWINDOW_INTERVAL, OnSpinchangeVerificationUncertaintyTimeWindow)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMEXECUTIONTIMEPERIOD_INTERVAL, OnSpinchangeMaximumExecutionTimePeriod)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMTIMECHECKPERIOD_INTERVAL, OnSpinchangeMaximumTimeCheckPeriod)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL, OnSpinchangeDefaultReleaseTimeWindow)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsConfigurationPage message handlers

BOOL CTelecommandOptionsConfigurationPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	if (EnumComputers() && EnumClients())
	{
		Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_VERIFICATIONUNCERTAINTYTIMEWINDOW_INTERVAL), TELECOMMANDOPTIONSCONFIGURATION_UNCERTAINTYTIMEWINDOW_MINIMUMINTERVAL, TELECOMMANDOPTIONSCONFIGURATION_UNCERTAINTYTIMEWINDOW_MAXIMUMINTERVAL);
		Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMEXECUTIONTIMEPERIOD_INTERVAL), TELECOMMANDOPTIONSCONFIGURATION_MAXIMUMEXECUTIONTIMEPERIOD_MINIMUMINTERVAL, TELECOMMANDOPTIONSCONFIGURATION_MAXIMUMEXECUTIONTIMEPERIOD_MAXIMUMINTERVAL);
		Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMTIMECHECKPERIOD_INTERVAL), TELECOMMANDOPTIONSCONFIGURATION_MAXIMUMCHETIMECKPERIOD_MINIMUMINTERVAL, TELECOMMANDOPTIONSCONFIGURATION_MAXIMUMCHETIMECKPERIOD_MAXIMUMINTERVAL);
		Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL), TELECOMMANDOPTIONSCONFIGURATION_DEFAULTRELEASETIMEWINDOW_MINIMUMINTERVAL, TELECOMMANDOPTIONSCONFIGURATION_DEFAULTRELEASETIMEWINDOW_MAXIMUMINTERVAL);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ALLOWSELF)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_USEANY)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ENSUREUNIQUE)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ALWAYSALLOWEXIT)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_MORE)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_RELEASEWAITMODE)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_AUTOMATICREJECTIONMODE)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALSTATE_DISABLERELEASE)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_INTERLOCKS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDEPTV)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLEPTV)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDEPEV)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLEPEV)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDECEV)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLECEV)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_VERIFICATIONUNCERTAINTYTIMEWINDOW_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_VERIFICATIONUNCERTAINTYTIMEWINDOW_INTERVAL)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_VERIFICATIONUNCERTAINTYTIMEWINDOW_INTERVAL_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMEXECUTIONTIMEPERIOD_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMEXECUTIONTIMEPERIOD_INTERVAL)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMEXECUTIONTIMEPERIOD_INTERVAL_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMTIMECHECKPERIOD_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMTIMECHECKPERIOD_INTERVAL)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMTIMECHECKPERIOD_INTERVAL_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_SHOWCLCWPANEL)->EnableWindow();
		ShowConfiguration();
	}
	AdjustToPrivileges();
	return TRUE;
}

void CTelecommandOptionsConfigurationPage::OnPrimaryCommandHandler()
{
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY, FALSE);
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(m_szCommandHandler[0][0] = EMPTYSTRING)));
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(m_szCommandHandler[0][1] = EMPTYSTRING)));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnSecondaryCommandHandler()
{
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(m_szCommandHandler[0][1] = EMPTYSTRING)));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnAllowSelfCommandHandler()
{
	m_bCommandHandler[0][0] = IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ALLOWSELF);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnUseAnyCommandHandler()
{
	m_bCommandHandler[0][1] = IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_USEANY);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnEnsureUniqueCommandHandler()
{
	m_bCommandHandler[0][2] = IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ENSUREUNIQUE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnAlwaysAllowExit()
{
	m_nCommandHandlerOptions[0] = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_ALWAYSALLOWEXIT)) ? (m_nCommandHandlerOptions[0] | TCSERVICE_COMMANDHANDLEROPTION_ALWAYSALLOWEXIT) : (m_nCommandHandlerOptions[0] & ~TCSERVICE_COMMANDHANDLEROPTION_ALWAYSALLOWEXIT);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnMoreOptions()
{
	CTelecommandOptionsCommandHandlerSettingsDialog  cCommandHandlerSettingsDialog;

	cCommandHandlerSettingsDialog.DoModal(m_nCommandHandlerPort[0], m_nCommandHandlerBufferSize[0], m_tCommandHandlerTimeout[0], m_szCommandHandlerClients[0], m_nCommandHandlerAccessCodes[0], m_tCommandHandlerStartTimes[0], m_tCommandHandlerStopTimes[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnMasterManualMode()
{
	SetMasterManualModeOwner(EMPTYSTRING);
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnReleaseWaitMode()
{
	m_bCommandHandlerTelecommandingReleaseWaitMode[0] = IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_RELEASEWAITMODE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnAutoRejectionMode()
{
	m_bCommandHandlerTelecommandingAutoRejectionMode[0] = IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_AUTOMATICREJECTIONMODE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnDisableRelease()
{
	m_nCommandHandlerTelecommandingState[0] = (!IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALSTATE_DISABLERELEASE)) ? ((m_nCommandHandlerTelecommandingState[0] & ~TCSERVICE_COMMANDHANDLERSTATE_DISABLED) | TCSERVICE_COMMANDHANDLERSTATE_ENABLED) : ((m_nCommandHandlerTelecommandingState[0] & ~TCSERVICE_COMMANDHANDLERSTATE_ENABLED) | TCSERVICE_COMMANDHANDLERSTATE_DISABLED);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnOverridePTV()
{
	m_nCommandHandlerTelecommandingFlags[0] = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDEPTV)) ? ((m_nCommandHandlerTelecommandingFlags[0] & ~TCSERVICE_COMMANDSOURCEFLAGS_PTV_DISABLE) | TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE) : (m_nCommandHandlerTelecommandingFlags[0] & ~TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLEPTV, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnOverridePEV()
{
	m_nCommandHandlerTelecommandingFlags[0] = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDEPEV)) ? ((m_nCommandHandlerTelecommandingFlags[0] & ~TCSERVICE_COMMANDSOURCEFLAGS_PEV_DISABLE) | TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE) : (m_nCommandHandlerTelecommandingFlags[0] & ~TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLEPEV, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnOverrideCEV()
{
	m_nCommandHandlerTelecommandingFlags[0] = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDECEV)) ? ((m_nCommandHandlerTelecommandingFlags[0] & ~TCSERVICE_COMMANDSOURCEFLAGS_CEV_DISABLE) | TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE) : (m_nCommandHandlerTelecommandingFlags[0] & ~TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLECEV, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnDisablePTV()
{
	m_nCommandHandlerTelecommandingFlags[0] = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLEPTV)) ? ((m_nCommandHandlerTelecommandingFlags[0] & ~TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE) | TCSERVICE_COMMANDSOURCEFLAGS_PTV_DISABLE) : (m_nCommandHandlerTelecommandingFlags[0] & ~TCSERVICE_COMMANDSOURCEFLAGS_PTV_DISABLE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDEPTV, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnDisablePEV()
{
	m_nCommandHandlerTelecommandingFlags[0] = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLEPEV)) ? ((m_nCommandHandlerTelecommandingFlags[0] & ~TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE) | TCSERVICE_COMMANDSOURCEFLAGS_PEV_DISABLE) : (m_nCommandHandlerTelecommandingFlags[0] & ~TCSERVICE_COMMANDSOURCEFLAGS_PEV_DISABLE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDEPEV, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnDisableCEV()
{
	m_nCommandHandlerTelecommandingFlags[0] = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_DISABLECEV)) ? ((m_nCommandHandlerTelecommandingFlags[0] & ~TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE) | TCSERVICE_COMMANDSOURCEFLAGS_CEV_DISABLE) : (m_nCommandHandlerTelecommandingFlags[0] & ~TCSERVICE_COMMANDSOURCEFLAGS_CEV_DISABLE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_OVERRIDECEV, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnEnableInterlocks()
{
	m_bCommandHandlerTelecommandingInterlockMode[0] = IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_INTERLOCKS);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnShowCLCWPanel()
{
	m_bCLCWToolWindow[0] = IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_SHOWCLCWPANEL);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnEditchangePrimaryCommandHandler()
{
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME)->GetWindowText(m_szCommandHandler[0][0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnEditchangeSecondaryCommandHandler()
{
	GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME)->GetWindowText(m_szCommandHandler[0][1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnEditchangeMasterManualModeOwner()
{
	CString  szMasterManualModeOwner;

	for (GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER)->GetWindowText(szMasterManualModeOwner); SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szMasterManualModeOwner) >= 0 || szMasterManualModeOwner.IsEmpty(); )
	{
		SetMasterManualModeOwner(szMasterManualModeOwner);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnSelchangePrimaryCommandHandler()
{
	m_szCommandHandler[0][0] = (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME, CB_GETCURSEL)) >= 0) ? Combobox_GetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME), (INT)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_PRIMARY_NAME, CB_GETCURSEL)) : m_szCommandHandler[0][0];
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnSelchangeSecondaryCommandHandler()
{
	m_szCommandHandler[0][1] = (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME, CB_GETCURSEL)) >= 0) ? Combobox_GetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME), (INT)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_COMMANDHANDLER_SECONDARY_NAME, CB_GETCURSEL)) : m_szCommandHandler[0][1];
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnSelchangeMasterManualModeOwner()
{
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER, CB_GETCURSEL));
	SetMasterManualModeOwner(Combobox_GetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER), (INT)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALMODES_MASTERMANUALMODE_OWNER, CB_GETCURSEL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnSpinchangeVerificationUncertaintyTimeWindow()
{
	m_tCommandHandlerVerificationUncertaintyTimeWindow[0] = Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_GLOBALCHECKS_VERIFICATIONUNCERTAINTYTIMEWINDOW_INTERVAL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnSpinchangeMaximumExecutionTimePeriod()
{
	m_tCommandHandlerMaximumExecutionTimePeriod[0] = Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMEXECUTIONTIMEPERIOD_INTERVAL))*SECONDSPERHOUR;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnSpinchangeMaximumTimeCheckPeriod()
{
	m_tCommandHandlerMaximumTimeCheckPeriod[0] = Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_MAXIMUMTIMECHECKPERIOD_INTERVAL))*SECONDSPERHOUR;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsConfigurationPage::OnSpinchangeDefaultReleaseTimeWindow()
{
	m_tCommandHandlerDefaultReleaseTimeWindow[0] = Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_CONFIGURATIONPAGE_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsCommandSourcesPage property page

IMPLEMENT_DYNCREATE(CTelecommandOptionsCommandSourcesPage, CLocalePropertyPage)

CTelecommandOptionsCommandSourcesPage::CTelecommandOptionsCommandSourcesPage() : CLocalePropertyPage(CTelecommandOptionsCommandSourcesPage::IDD)
{
	//{{AFX_DATA_INIT(CTelecommandOptionsCommandSourcesPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelecommandOptionsCommandSourcesPage::SetCommandHandlerSources(CONST CTCProcessCommandSources &pCommandSources, BOOL bAllowUpdates, BOOL bBackup)
{
	for (m_pCommandHandlerSources[0].Copy(&pCommandSources), m_bUpdate = bAllowUpdates; bBackup; )
	{
		m_pCommandHandlerSources[1].Copy(&m_pCommandHandlerSources[0]);
		break;
	}
}

BOOL CTelecommandOptionsCommandSourcesPage::GetCommandHandlerSources(CTCProcessCommandSources &pCommandSources) CONST
{
	pCommandSources.Copy(&m_pCommandHandlerSources[0]);
	return IsModified();
}

BOOL CTelecommandOptionsCommandSourcesPage::SetMasterManualModeOwner(LPCTSTR pszOwner)
{
	INT  nCommandSource;
	INT  nCommandSources;
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	for (nCommandSource = 0, nCommandSources = (GetMasterManualModeOwner().CompareNoCase(pszOwner)) ? (INT)m_pCommandHandlerSources[0].GetSize() : -1; nCommandSource < nCommandSources; nCommandSource++)
	{
		if ((pCommandSourceInfo = m_pCommandHandlerSources[0].GetAt(nCommandSource)) && pCommandSourceInfo->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK)
		{
			pCommandSourceInfo->SetTelecommandingMode((!pCommandSourceInfo->GetComputerName().CompareNoCase(pszOwner)) ? (pCommandSourceInfo->GetTelecommandingMode() | TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL) : (pCommandSourceInfo->GetTelecommandingMode() & ~TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL));
			continue;
		}
	}
	if (IsWindow(GetSafeHwnd()) && nCommandSource == nCommandSources)
	{
		GetParent()->UpdateCommandHandlerSources(pszOwner);
		ShowCommandSource();
		return TRUE;
	}
	return((!IsWindow(GetSafeHwnd()) || nCommandSources < 0) ? TRUE : FALSE);
}

CString CTelecommandOptionsCommandSourcesPage::GetMasterManualModeOwner() CONST
{
	INT  nCommandSource;
	INT  nCommandSources;
	CString  szMasterManualModeOwner;
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	for (nCommandSource = 0, nCommandSources = (INT)m_pCommandHandlerSources[0].GetSize(); nCommandSource < nCommandSources; nCommandSource++)
	{
		if ((pCommandSourceInfo = m_pCommandHandlerSources[0].GetAt(nCommandSource)) && pCommandSourceInfo->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK)
		{
			if (pCommandSourceInfo->GetTelecommandingMode() & TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL)
			{
				szMasterManualModeOwner = pCommandSourceInfo->GetComputerName();
				break;
			}
		}
	}
	return szMasterManualModeOwner;
}

INT CTelecommandOptionsCommandSourcesPage::CollectLogEntries(CTCLogEntries &pEntries) CONST
{
	INT  nCommandSource;
	INT  nCommandSources;
	CString  szLogEntry;
	CTimeKey  tLogEntry;
	CTCProcessCommandSourceInfo  *pCommandSourceInfo[2];

	for (nCommandSource = 0, nCommandSources = (INT)m_pCommandHandlerSources[0].GetSize(), pEntries.RemoveAll(); nCommandSource < nCommandSources; nCommandSource++)
	{
		if ((pCommandSourceInfo[0] = m_pCommandHandlerSources[0].GetAt(nCommandSource)) != (CTCProcessCommandSourceInfo *)NULL)
		{
			if ((pCommandSourceInfo[1] = m_pCommandHandlerSources[1].GetAt(m_pCommandHandlerSources[1].Find(pCommandSourceInfo[0]->GetComputerName(), pCommandSourceInfo[0]->GetSourceType()))))
			{
				if (pCommandSourceInfo[0]->IsTelecommandingInterlockModeEnabled() != pCommandSourceInfo[1]->IsTelecommandingInterlockModeEnabled())
				{
					szLogEntry = (pCommandSourceInfo[0]->IsTelecommandingInterlockModeEnabled()) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_INTERLOCKMODE))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_INTERLOCKMODE)));
					CollectLogEntry(pEntries, (pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_MANUALSTACK) : ((pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_AUTOMATICSTACK) : STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_PROCEDURESMONITOR)), pCommandSourceInfo[0]->GetComputerName(), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_INTERLOCKMODECHANGE), szLogEntry, tLogEntry);
				}
				if (pCommandSourceInfo[0]->IsTelecommandingReleaseWaitModeEnabled() != pCommandSourceInfo[1]->IsTelecommandingReleaseWaitModeEnabled())
				{
					szLogEntry = (pCommandSourceInfo[0]->IsTelecommandingReleaseWaitModeEnabled()) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_RELEASEWAITMODE))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_RELEASEWAITMODE)));
					CollectLogEntry(pEntries, (pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_MANUALSTACK) : ((pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_AUTOMATICSTACK) : STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_PROCEDURESMONITOR)), pCommandSourceInfo[0]->GetComputerName(), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_RELEASEWAITMODECHANGE), szLogEntry, tLogEntry);
				}
				if (pCommandSourceInfo[0]->IsTelecommandingAutoRejectionModeEnabled() != pCommandSourceInfo[1]->IsTelecommandingAutoRejectionModeEnabled())
				{
					szLogEntry = (pCommandSourceInfo[0]->IsTelecommandingAutoRejectionModeEnabled()) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_AUTOREJECTIONMODE))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_AUTOREJECTIONMODE)));
					CollectLogEntry(pEntries, (pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_MANUALSTACK) : ((pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_AUTOMATICSTACK) : STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_PROCEDURESMONITOR)), pCommandSourceInfo[0]->GetComputerName(), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_AUTOREJECTIONMODECHANGE), szLogEntry, tLogEntry);
				}
				if ((pCommandSourceInfo[0]->GetTelecommandingState() & TCSERVICE_COMMANDSOURCESTATE_DISABLED) != (pCommandSourceInfo[1]->GetTelecommandingState() & TCSERVICE_COMMANDSOURCESTATE_DISABLED))
				{
					szLogEntry = (pCommandSourceInfo[0]->GetTelecommandingState() & TCSERVICE_COMMANDSOURCESTATE_DISABLED) ? STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLED) : STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLED);
					CollectLogEntry(pEntries, (pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_MANUALSTACK) : ((pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_AUTOMATICSTACK) : STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_PROCEDURESMONITOR)), pCommandSourceInfo[0]->GetComputerName(), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_STATECHANGE), szLogEntry, tLogEntry);
				}
				if ((pCommandSourceInfo[0]->GetTelecommandingChecks() & (TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_PTV_DISABLE)) != (pCommandSourceInfo[1]->GetTelecommandingChecks() & (TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_PTV_DISABLE)))
				{
					szLogEntry = (pCommandSourceInfo[0]->GetTelecommandingChecks() & (TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_PTV_DISABLE)) ? ((pCommandSourceInfo[0]->GetTelecommandingChecks() & TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_OVERRIDING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_PTVCHECKS))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_PTVCHECKS)))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_PTVCHECKS)));
					CollectLogEntry(pEntries, (pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_MANUALSTACK) : ((pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_AUTOMATICSTACK) : STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_PROCEDURESMONITOR)), pCommandSourceInfo[0]->GetComputerName(), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_CHECKSCHANGE), szLogEntry, tLogEntry);
				}
				if ((pCommandSourceInfo[0]->GetTelecommandingChecks() & (TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_PEV_DISABLE)) != (pCommandSourceInfo[1]->GetTelecommandingChecks() & (TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_PEV_DISABLE)))
				{
					szLogEntry = (pCommandSourceInfo[0]->GetTelecommandingChecks() & (TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_PEV_DISABLE)) ? ((pCommandSourceInfo[0]->GetTelecommandingChecks() & TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_OVERRIDING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_PEVCHECKS))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_PEVCHECKS)))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_PEVCHECKS)));
					CollectLogEntry(pEntries, (pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_MANUALSTACK) : ((pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_AUTOMATICSTACK) : STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_PROCEDURESMONITOR)), pCommandSourceInfo[0]->GetComputerName(), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_CHECKSCHANGE), szLogEntry, tLogEntry);
				}
				if ((pCommandSourceInfo[0]->GetTelecommandingChecks() & (TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_CEV_DISABLE)) != (pCommandSourceInfo[1]->GetTelecommandingChecks() & (TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_CEV_DISABLE)))
				{
					szLogEntry = (pCommandSourceInfo[0]->GetTelecommandingChecks() & (TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE | TCSERVICE_COMMANDSOURCEFLAGS_CEV_DISABLE)) ? ((pCommandSourceInfo[0]->GetTelecommandingChecks() & TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_OVERRIDING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_CEVCHECKS))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_CEVCHECKS)))) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + CString(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_CEVCHECKS)));
					CollectLogEntry(pEntries, (pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_MANUALSTACK) : ((pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_AUTOMATICSTACK) : STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_PROCEDURESMONITOR)), pCommandSourceInfo[0]->GetComputerName(), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_CHECKSCHANGE), szLogEntry, tLogEntry);
				}
				if (pCommandSourceInfo[0]->GetDefaultReleaseTimeWindow() != pCommandSourceInfo[1]->GetDefaultReleaseTimeWindow())
				{
					szLogEntry.Format(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_DEFAULTRELEASETIMEWINDOW), pCommandSourceInfo[0]->GetDefaultReleaseTimeWindow().GetTotalSeconds());
					CollectLogEntry(pEntries, (pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_MANUALSTACK) : ((pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_AUTOMATICSTACK) : STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_PROCEDURESMONITOR)), pCommandSourceInfo[0]->GetComputerName(), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_DEFAULTRELEASETIMEWINDOWCHANGE), szLogEntry, tLogEntry);
				}
				if (pCommandSourceInfo[0]->GetDispatchTimeWindow() != pCommandSourceInfo[1]->GetDispatchTimeWindow())
				{
					szLogEntry.Format(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_DISPATCHTIMEWINDOW), pCommandSourceInfo[0]->GetDispatchTimeWindow().GetTotalSeconds());
					CollectLogEntry(pEntries, (pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_MANUALSTACK) : ((pCommandSourceInfo[0]->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_AUTOMATICSTACK) : STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_PROCEDURESMONITOR)), pCommandSourceInfo[0]->GetComputerName(), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_DISPATCHTIMEWINDOWCHANGE), szLogEntry, tLogEntry);
				}
			}
		}
	}
	return((INT)pEntries.GetSize());
}

CTelecommandOptionsDialog *CTelecommandOptionsCommandSourcesPage::GetParent() CONST
{
	return((CTelecommandOptionsDialog *)CLocalePropertyPage::GetParent());
}

BOOL CTelecommandOptionsCommandSourcesPage::EnumCommandSources()
{
	INT  nCommandSource;
	INT  nCommandSources;
	CComputerToken  cComputerToken;
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	for (nCommandSource = 0, nCommandSources = (INT)m_pCommandHandlerSources[0].GetSize(); nCommandSource < nCommandSources; nCommandSource++)
	{
		if ((pCommandSourceInfo = m_pCommandHandlerSources[0].GetAt(nCommandSource)) != (CTCProcessCommandSourceInfo *)NULL)
		{
			if (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pCommandSourceInfo->GetComputerName()) < 0)
			{
				SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pCommandSourceInfo->GetComputerName());
				continue;
			}
		}
	}
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cComputerToken.GetComputerName()), 0));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTelecommandOptionsCommandSourcesPage::ShowCommandSource()
{
	CString  szState;
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	if ((pCommandSourceInfo = FindCommandSource()))
	{
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_MASTERMANUALMODE, (pCommandSourceInfo->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK && (pCommandSourceInfo->GetTelecommandingMode() & TCSERVICE_COMMANDSOURCEMODE_MASTERMANUAL)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_RELEASEWAITMODE, pCommandSourceInfo->IsTelecommandingReleaseWaitModeEnabled());
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_AUTOMATICREJECTIONMODE, pCommandSourceInfo->IsTelecommandingAutoRejectionModeEnabled());
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_STATE_DISABLED, (pCommandSourceInfo->GetTelecommandingState() & TCSERVICE_COMMANDSOURCESTATE_DISABLED) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPTV, (pCommandSourceInfo->GetTelecommandingChecks() & TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPTV, (pCommandSourceInfo->GetTelecommandingChecks() & TCSERVICE_COMMANDSOURCEFLAGS_PTV_DISABLE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPEV, (pCommandSourceInfo->GetTelecommandingChecks() & TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPEV, (pCommandSourceInfo->GetTelecommandingChecks() & TCSERVICE_COMMANDSOURCEFLAGS_PEV_DISABLE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDECEV, (pCommandSourceInfo->GetTelecommandingChecks() & TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLECEV, (pCommandSourceInfo->GetTelecommandingChecks() & TCSERVICE_COMMANDSOURCEFLAGS_CEV_DISABLE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_INTERLOCKS, (pCommandSourceInfo->GetSourceType() != TCSERVICE_COMMANDSOURCETYPE_PROCEDURESMONITOR  &&  pCommandSourceInfo->IsTelecommandingInterlockModeEnabled()) ? TRUE : FALSE);
		Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL), pCommandSourceInfo->GetDefaultReleaseTimeWindow().GetTotalSeconds());
		Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL), pCommandSourceInfo->GetDispatchTimeWindow().GetTotalSeconds());
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_MASTERMANUALMODE)->EnableWindow((pCommandSourceInfo->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_AUTOMATICREJECTIONMODE)->EnableWindow((pCommandSourceInfo->GetSourceType() != TCSERVICE_COMMANDSOURCETYPE_PROCEDURESMONITOR) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPTV)->EnableWindow((pCommandSourceInfo->GetSourceType() != TCSERVICE_COMMANDSOURCETYPE_PROCEDURESMONITOR) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPTV)->EnableWindow((pCommandSourceInfo->GetSourceType() != TCSERVICE_COMMANDSOURCETYPE_PROCEDURESMONITOR) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_INTERLOCKS)->EnableWindow((pCommandSourceInfo->GetSourceType() != TCSERVICE_COMMANDSOURCETYPE_PROCEDURESMONITOR) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS)->EnableWindow((pCommandSourceInfo->GetSourceType() != TCSERVICE_COMMANDSOURCETYPE_PROCEDURESMONITOR) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_STATIC)->EnableWindow((pCommandSourceInfo->GetSourceType() != TCSERVICE_COMMANDSOURCETYPE_PROCEDURESMONITOR) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL)->EnableWindow((pCommandSourceInfo->GetSourceType() != TCSERVICE_COMMANDSOURCETYPE_PROCEDURESMONITOR) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL_STATIC)->EnableWindow((pCommandSourceInfo->GetSourceType() != TCSERVICE_COMMANDSOURCETYPE_PROCEDURESMONITOR) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DISPATCHTIMEWINDOW_STATIC)->EnableWindow((pCommandSourceInfo->GetSourceType() != TCSERVICE_COMMANDSOURCETYPE_PROCEDURESMONITOR) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL)->EnableWindow((pCommandSourceInfo->GetSourceType() != TCSERVICE_COMMANDSOURCETYPE_PROCEDURESMONITOR) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL_STATIC)->EnableWindow((pCommandSourceInfo->GetSourceType() != TCSERVICE_COMMANDSOURCETYPE_PROCEDURESMONITOR) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_SUBSYSTEMS)->EnableWindow((pCommandSourceInfo->GetSourceType() == TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_STATE)->SetWindowText((szState = GetCommandSourceState(pCommandSourceInfo)));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_STATE_STATIC)->ShowWindow((!szState.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_STATE)->ShowWindow((!szState.IsEmpty()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_STATE_STATIC)->EnableWindow(!szState.IsEmpty());
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_STATE)->EnableWindow(!szState.IsEmpty());
		return;
	}
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_MASTERMANUALMODE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_RELEASEWAITMODE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_AUTOMATICREJECTIONMODE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_STATE_DISABLED, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPTV, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPTV, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPEV, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPEV, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDECEV, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLECEV, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_INTERLOCKS, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL), TELECOMMANDOPTIONSCOMMANDSOURCES_DEFAULTRELEASETIMEWINDOW_DEFAULTINTERVAL);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL), TELECOMMANDOPTIONSCOMMANDSOURCES_DISPATCHTIMEWINDOW_DEFAULTINTERVAL);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_MASTERMANUALMODE)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_AUTOMATICREJECTIONMODE)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPTV)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPTV)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_INTERLOCKS)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DISPATCHTIMEWINDOW_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_SUBSYSTEMS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_STATE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_STATE_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_STATE)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_STATE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_STATE)->EnableWindow(FALSE);
}

CTCProcessCommandSourceInfo *CTelecommandOptionsCommandSourcesPage::FindCommandSource() CONST
{
	CString  szComputer;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER)->GetWindowText(szComputer);
	return m_pCommandHandlerSources[0].GetAt(m_pCommandHandlerSources[0].Find(szComputer, (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_TYPE_MANUALSTACK)) ? TCSERVICE_COMMANDSOURCETYPE_MANUALSTACK : ((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_TYPE_AUTOMATICSTACK)) ? TCSERVICE_COMMANDSOURCETYPE_AUTOMATICSTACK : TCSERVICE_COMMANDSOURCETYPE_PROCEDURESMONITOR)));
}

CString CTelecommandOptionsCommandSourcesPage::GetCommandSourceState(CTCProcessCommandSourceInfo *pCommandSourceInfo) CONST
{
	UINT  nState;
	CString  szState;

	szState = ((nState = pCommandSourceInfo->GetTelecommandingState()) & TCSERVICE_COMMANDSOURCESTATE_DEFAULT) ? STRING(IDS_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_STATE_DEFAULT) : EMPTYSTRING;
	szState = (nState & TCSERVICE_COMMANDSOURCESTATE_SUSPENDED) ? STRING(IDS_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_STATE_SUSPENDED) : szState;
	szState = (nState & TCSERVICE_COMMANDSOURCESTATE_STOPPED) ? STRING(IDS_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_STATE_STOPPED) : szState;
	szState += (nState & TCSERVICE_COMMANDSOURCESTATE_DISABLED) ? STRING(IDS_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_STATE_DISABLED) : EMPTYSTRING;
	return szState;
}

BOOL CTelecommandOptionsCommandSourcesPage::CollectLogEntry(CTCLogEntries &pEntries, LPCTSTR pszName, LPCTSTR pszDescription, LPCTSTR pszActivity, CONST CTimeKey &tTime) CONST
{
	CComputerToken  cComputerToken;

	return CollectLogEntry(pEntries, pszName, cComputerToken.GetComputerName(), pszDescription, pszActivity, tTime);
}
BOOL CTelecommandOptionsCommandSourcesPage::CollectLogEntry(CTCLogEntries &pEntries, LPCTSTR pszName, LPCTSTR pszComputer, LPCTSTR pszDescription, LPCTSTR pszActivity, CONST CTimeKey &tTime) CONST
{
	CTCLogEntry  *pEntry;

	if ((pEntry = new CTCLogEntry))
	{
		for (pEntry->SetName(pszName), pEntry->SetComputerName(pszComputer), pEntry->SetDescription(pszDescription), pEntry->SetActivity(pszActivity), pEntry->SetUser(GetAccountUserName()), pEntry->SetTime(tTime); pEntries.Add(pEntry) >= 0; ) return TRUE;
		delete pEntry;
	}
	return FALSE;
}

VOID CTelecommandOptionsCommandSourcesPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_MASTERMANUALMODE, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE)) && m_bUpdate);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_RELEASEWAITMODE, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_AUTOMATICREJECTIONMODE, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_STATE_DISABLED, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPTV, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPTV, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPEV, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPEV, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDECEV, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLECEV, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_INTERLOCKS, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL, m_bUpdate  &&  bCheck);
}

BOOL CTelecommandOptionsCommandSourcesPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_pCommandHandlerSources[0].Compare(&m_pCommandHandlerSources[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

void CTelecommandOptionsCommandSourcesPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandOptionsCommandSourcesPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelecommandOptionsCommandSourcesPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelecommandOptionsCommandSourcesPage)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_TYPE_MANUALSTACK, OnManualStack)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_TYPE_AUTOMATICSTACK, OnAutomaticStack)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_TYPE_PROCEDURESMONITOR, OnProceduresMonitor)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_MASTERMANUALMODE, OnMasterManualMode)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_RELEASEWAITMODE, OnReleaseWaitMode)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_AUTOMATICREJECTIONMODE, OnAutoRejectionMode)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_STATE_DISABLED, OnDisableRelease)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPTV, OnOverridePTV)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPEV, OnOverridePEV)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDECEV, OnOverrideCEV)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPTV, OnDisablePTV)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPEV, OnDisablePEV)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLECEV, OnDisableCEV)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_INTERLOCKS, OnEnableInterlocks)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_SUBSYSTEMS, OnSubSystems)
	ON_CBN_EDITCHANGE(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER, OnEditchangeComputer)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER, OnSelchangeComputer)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL, OnSpinchangeDefaultReleaseTimeWindow)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL, OnSpinchangeDispatchTimeWindow)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsCommandSourcesPage message handlers

BOOL CTelecommandOptionsCommandSourcesPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	for (CLocalePropertyPage::OnInitDialog(); EnumCommandSources(); )
	{
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_TYPE_MANUALSTACK, TRUE);
		Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL), TELECOMMANDOPTIONSCOMMANDSOURCES_DEFAULTRELEASETIMEWINDOW_MINIMUMINTERVAL, TELECOMMANDOPTIONSCOMMANDSOURCES_DEFAULTRELEASETIMEWINDOW_MAXIMUMINTERVAL);
		Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL), TELECOMMANDOPTIONSCOMMANDSOURCES_DISPATCHTIMEWINDOW_MINIMUMINTERVAL, TELECOMMANDOPTIONSCOMMANDSOURCES_DISPATCHTIMEWINDOW_MAXIMUMINTERVAL);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_TYPE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_TYPE_MANUALSTACK)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_TYPE_AUTOMATICSTACK)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_TYPE_PROCEDURESMONITOR)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_MASTERMANUALMODE)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_RELEASEWAITMODE)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_AUTOMATICREJECTIONMODE)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_STATE_DISABLED)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPTV)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPTV)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPEV)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPEV)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDECEV)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLECEV)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_INTERLOCKS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DISPATCHTIMEWINDOW_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL_STATIC)->EnableWindow();
		ShowCommandSource();
		break;
	}
	AdjustToPrivileges();
	return TRUE;
}

void CTelecommandOptionsCommandSourcesPage::OnManualStack()
{
	CHourglassCursor  cCursor;

	ShowCommandSource();
}

void CTelecommandOptionsCommandSourcesPage::OnAutomaticStack()
{
	CHourglassCursor  cCursor;

	ShowCommandSource();
}

void CTelecommandOptionsCommandSourcesPage::OnProceduresMonitor()
{
	CHourglassCursor  cCursor;

	ShowCommandSource();
}

void CTelecommandOptionsCommandSourcesPage::OnMasterManualMode()
{
	CString  szComputer;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER)->GetWindowText(szComputer);
	SetMasterManualModeOwner((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_MASTERMANUALMODE)) ? szComputer : EMPTYSTRING);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandSourcesPage::OnReleaseWaitMode()
{
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	for (; (pCommandSourceInfo = FindCommandSource()); )
	{
		pCommandSourceInfo->EnableTelecommandingReleaseWaitMode(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_RELEASEWAITMODE));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandSourcesPage::OnAutoRejectionMode()
{
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	for (; (pCommandSourceInfo = FindCommandSource()); )
	{
		pCommandSourceInfo->EnableTelecommandingAutoRejectionMode(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MODES_AUTOMATICREJECTIONMODE));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandSourcesPage::OnDisableRelease()
{
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	for (; (pCommandSourceInfo = FindCommandSource()); )
	{
		pCommandSourceInfo->SetTelecommandingState((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_STATE_DISABLED)) ? (pCommandSourceInfo->GetTelecommandingState() | TCSERVICE_COMMANDSOURCESTATE_DISABLED) : (pCommandSourceInfo->GetTelecommandingState() & ~TCSERVICE_COMMANDSOURCESTATE_DISABLED));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandSourcesPage::OnOverridePTV()
{
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	if ((pCommandSourceInfo = FindCommandSource()))
	{
		pCommandSourceInfo->SetTelecommandingChecks((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPTV)) ? ((pCommandSourceInfo->GetTelecommandingChecks() & ~TCSERVICE_COMMANDSOURCEFLAGS_PTV_DISABLE) | TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE) : (pCommandSourceInfo->GetTelecommandingChecks() & ~TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE));
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPTV, FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandSourcesPage::OnOverridePEV()
{
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	if ((pCommandSourceInfo = FindCommandSource()))
	{
		pCommandSourceInfo->SetTelecommandingChecks((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPEV)) ? ((pCommandSourceInfo->GetTelecommandingChecks() & ~TCSERVICE_COMMANDSOURCEFLAGS_PEV_DISABLE) | TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE) : (pCommandSourceInfo->GetTelecommandingChecks() & ~TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE));
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPEV, FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandSourcesPage::OnOverrideCEV()
{
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	if ((pCommandSourceInfo = FindCommandSource()))
	{
		pCommandSourceInfo->SetTelecommandingChecks((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDECEV)) ? ((pCommandSourceInfo->GetTelecommandingChecks() & ~TCSERVICE_COMMANDSOURCEFLAGS_CEV_DISABLE) | TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE) : (pCommandSourceInfo->GetTelecommandingChecks() & ~TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE));
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLECEV, FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandSourcesPage::OnDisablePTV()
{
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	if ((pCommandSourceInfo = FindCommandSource()))
	{
		pCommandSourceInfo->SetTelecommandingChecks((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPTV)) ? ((pCommandSourceInfo->GetTelecommandingChecks() & ~TCSERVICE_COMMANDSOURCEFLAGS_PTV_OVERRIDE) | TCSERVICE_COMMANDSOURCEFLAGS_PTV_DISABLE) : (pCommandSourceInfo->GetTelecommandingChecks() & ~TCSERVICE_COMMANDSOURCEFLAGS_PTV_DISABLE));
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPTV, FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandSourcesPage::OnDisablePEV()
{
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	if ((pCommandSourceInfo = FindCommandSource()))
	{
		pCommandSourceInfo->SetTelecommandingChecks((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLEPEV)) ? ((pCommandSourceInfo->GetTelecommandingChecks() & ~TCSERVICE_COMMANDSOURCEFLAGS_PEV_OVERRIDE) | TCSERVICE_COMMANDSOURCEFLAGS_PEV_DISABLE) : (pCommandSourceInfo->GetTelecommandingChecks() & ~TCSERVICE_COMMANDSOURCEFLAGS_PEV_DISABLE));
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDEPEV, FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandSourcesPage::OnDisableCEV()
{
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	if ((pCommandSourceInfo = FindCommandSource()))
	{
		pCommandSourceInfo->SetTelecommandingChecks((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_DISABLECEV)) ? ((pCommandSourceInfo->GetTelecommandingChecks() & ~TCSERVICE_COMMANDSOURCEFLAGS_CEV_OVERRIDE) | TCSERVICE_COMMANDSOURCEFLAGS_CEV_DISABLE) : (pCommandSourceInfo->GetTelecommandingChecks() & ~TCSERVICE_COMMANDSOURCEFLAGS_CEV_DISABLE));
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_OVERRIDECEV, FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandSourcesPage::OnEnableInterlocks()
{
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	for (; (pCommandSourceInfo = FindCommandSource()); )
	{
		pCommandSourceInfo->EnableTelecommandingInterlockMode(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_CHECKS_INTERLOCKS));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandSourcesPage::OnSubSystems()
{
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;
	CTelecommandOptionsSubSystemsDialog  cSubSystemsDialog;

	for (; (pCommandSourceInfo = FindCommandSource()); )
	{
		cSubSystemsDialog.DoModal(pCommandSourceInfo);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandSourcesPage::OnEditchangeComputer()
{
	CString  szComputer;

	for (GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER)->GetWindowText(szComputer); SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) >= 0; )
	{
		ShowCommandSource();
		break;
	}
}

void CTelecommandOptionsCommandSourcesPage::OnSelchangeComputer()
{
	for (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_COMPUTER, CB_GETCURSEL)); TRUE; )
	{
		ShowCommandSource();
		break;
	}
}

void CTelecommandOptionsCommandSourcesPage::OnSpinchangeDefaultReleaseTimeWindow()
{
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	if ((pCommandSourceInfo = FindCommandSource())) pCommandSourceInfo->SetDefaultReleaseTimeWindow(Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DEFAULTRELEASETIMEWINDOW_INTERVAL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandSourcesPage::OnSpinchangeDispatchTimeWindow()
{
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;

	if ((pCommandSourceInfo = FindCommandSource())) pCommandSourceInfo->SetDispatchTimeWindow(Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDSOURCESPAGE_CONFIGURATION_MISCELLANEOUS_DISPATCHTIMEWINDOW_INTERVAL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsInterlocksPage property page

IMPLEMENT_DYNCREATE(CTelecommandOptionsInterlocksPage, CLocalePropertyPage)

CTelecommandOptionsInterlocksPage::CTelecommandOptionsInterlocksPage() : CLocalePropertyPage(CTelecommandOptionsInterlocksPage::IDD)
{
	//{{AFX_DATA_INIT(CTelecommandOptionsInterlocksPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelecommandOptionsInterlocksPage::SetCommandHandlerInterlocks(CONST CTCInterlocks &pInterlocks, BOOL bAllowUpdates)
{
	m_pInterlocks[0].Copy(&pInterlocks);
	m_bUpdate = bAllowUpdates;
	m_bModified = FALSE;
}

BOOL CTelecommandOptionsInterlocksPage::GetCommandHandlerInterlocks(CTCInterlocks &pInterlocks) CONST
{
	return pInterlocks.Copy(&m_pInterlocks[0]);
}

CTelecommandOptionsDialog *CTelecommandOptionsInterlocksPage::GetParent() CONST
{
	return((CTelecommandOptionsDialog *)CLocalePropertyPage::GetParent());
}

VOID CTelecommandOptionsInterlocksPage::EnumInterlocks()
{
	INT  nColumn;
	INT  nColumns;
	INT  nInterlock;
	INT  nInterlocks;
	CString  szScope[2];
	CString  szInterlock;
	CTCInterlock  *pInterlock;

	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock)) != (CTCInterlock *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_NAME); )
				{
					szInterlock = pInterlock->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_COMPUTER); )
				{
					szInterlock = pInterlock->GetComputerName();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_TYPE))
				{
					szInterlock = (pInterlock->GetSourceType() == TCINTERLOCK_SOURCETYPE_MANUALSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_MANUALSTACKTYPE) : EMPTYSTRING;
					szInterlock = (pInterlock->GetSourceType() == TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_AUTOMATICSTACKTYPE) : szInterlock;
					szInterlock = (pInterlock->GetSourceType() == TCINTERLOCK_SOURCETYPE_PROCEDURESMONITOR) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_PROCEDURESMONITORTYPE) : szInterlock;
					szInterlock = (pInterlock->GetSourceType() == TCINTERLOCK_SOURCETYPE_ALLSOURCES) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_ALLSOURCESTYPE) : szInterlock;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_SCOPE))
				{
					szScope[0].Format(STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_SUBSYSTEMSCOPE), (LPCTSTR)GetTCService()->TranslateIDToTCSubSystem(TCINTERLOCKAPIDFROMCODE(pInterlock->GetScope())));
					szScope[1].Format(STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_SUBSYSTEMNOWAITSCOPE), (LPCTSTR)GetTCService()->TranslateIDToTCSubSystem(TCINTERLOCKAPIDFROMCODE(pInterlock->GetScope())));
					szInterlock = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_GLOBAL) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_GLOBALSCOPE) : EMPTYSTRING;
					szInterlock = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCAL) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_LOCALSCOPE) : szInterlock;
					szInterlock = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCALNOWAIT) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_LOCALNOWAITSCOPE) : szInterlock;
					szInterlock = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM) ? szScope[0] : szInterlock;
					szInterlock = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) ? szScope[1] : szInterlock;
					szInterlock = (TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()) == TCINTERLOCK_SCOPE_COMMANDS) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_COMMANDSSCOPE) : szInterlock;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_STAGE))
				{
					szInterlock = (pInterlock->GetStage() == TCINTERLOCK_STAGE_RECEPTION) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_RECEPTIONSTAGE) : EMPTYSTRING;
					szInterlock = (pInterlock->GetStage() == TCINTERLOCK_STAGE_TRANSMISSION) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_TRANSMISSIONSTAGE) : szInterlock;
					szInterlock = (pInterlock->GetStage() == TCINTERLOCK_STAGE_ACCEPTANCE) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_ACCEPTANCESTAGE) : szInterlock;
					szInterlock = (pInterlock->GetStage() == TCINTERLOCK_STAGE_START) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_STARTSTAGE) : szInterlock;
					szInterlock = (pInterlock->GetStage() == TCINTERLOCK_STAGE_PROGRESS) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_PROGRESSSTAGE) : szInterlock;
					szInterlock = (pInterlock->GetStage() == TCINTERLOCK_STAGE_COMPLETION) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_COMPLETIONSTAGE) : szInterlock;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_STATE))
				{
					szInterlock = (pInterlock->GetState() == TCINTERLOCK_STATE_IDLE) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_IDLESTATE) : EMPTYSTRING;
					szInterlock = (pInterlock->GetState() == TCINTERLOCK_STATE_PENDING) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_PENDINGSTATE) : szInterlock;
					szInterlock = (pInterlock->GetState() == TCINTERLOCK_STATE_SUCCESS) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_SUCCESSSTATE) : szInterlock;
					szInterlock = (pInterlock->GetState() == TCINTERLOCK_STATE_FAILURE) ? STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST_FAILURESTATE) : szInterlock;
				}
				if (!nColumn  &&  nInterlock >= SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST, LVM_GETITEMCOUNT))
				{
					Listview_InsertText(GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST), nInterlock, szInterlock);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST), nInterlock, nColumn, szInterlock);
			}
		}
	}
	while (nInterlocks < SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST, LVM_GETITEMCOUNT))
	{
		Listview_DeleteText(GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST), nInterlocks);
		continue;
	}
	Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST), max(Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST)), 0));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_RESET)->EnableWindow(((pInterlock = m_pInterlocks[0].GetAt(Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST)))) && (pInterlock->GetState() == TCINTERLOCK_STATE_SUCCESS || pInterlock->GetState() == TCINTERLOCK_STATE_FAILURE) && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_EDIT)->EnableWindow((m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
}

BOOL CTelecommandOptionsInterlocksPage::LogActivity(CONST CTCInterlock *pInterlock, LPCTSTR pszActivity, BOOL bSuccess)
{
	CString  szActivity;
	CTCLogEntry  *pEntry;

	if ((pEntry = new CTCLogEntry))
	{
		for (pEntry->SetName((pInterlock->GetSourceType() == TCINTERLOCK_SOURCETYPE_MANUALSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_MANUALSTACK) : ((pInterlock->GetSourceType() == TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_AUTOMATICSTACK) : STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_PROCEDURESMONITOR))), pEntry->SetComputerName(pInterlock->GetComputerName()), pEntry->SetDescription((bSuccess) ? STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_INTERLOCKPOOLSUCCESSFULCHANGE) : STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_INTERLOCKPOOLFAILEDCHANGE)), szActivity.Format(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_INTERLOCK), (LPCTSTR)pInterlock->GetName()), pEntry->SetActivity(CString(pszActivity) + SPACE + szActivity), pEntry->SetUser(GetAccountUserName()), pEntry->SetTime(CTime::GetCurrentTime().GetTime()); GetParent()->LogActivity(pEntry); )
		{
			delete pEntry;
			return TRUE;
		}
		delete pEntry;
	}
	return FALSE;
}
BOOL CTelecommandOptionsInterlocksPage::LogActivity(CONST CTCInterlocks &pInterlocks)
{
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock[3];

	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock[1] = ((pInterlock[0] = m_pInterlocks[0].GetAt(nInterlock))) ? m_pInterlocks[1].GetAt(m_pInterlocks[1].Find(pInterlock[0]->GetComputerName(), pInterlock[0]->GetSourceType(), pInterlock[0]->GetName())) : (CTCInterlock *)NULL))
		{
			if ((pInterlock[2] = (!pInterlock[0]->Compare(pInterlock[1])) ? pInterlocks.GetAt(pInterlocks.Find(pInterlock[0]->GetComputerName(), pInterlock[0]->GetSourceType(), pInterlock[0]->GetName())) : (CTCInterlock *)NULL))
			{
				LogActivity(pInterlock[0], (pInterlock[0]->GetState() == pInterlock[1]->GetState()) ? STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_CHANGING) : STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_RESETTING), pInterlock[1]->Compare(pInterlock[2]));
				continue;
			}
			for (; !pInterlock[0]->Compare(pInterlock[1]); )
			{
				LogActivity(pInterlock[0], (pInterlock[0]->GetState() == pInterlock[1]->GetState()) ? STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_CHANGING) : STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_RESETTING), FALSE);
				break;
			}
			continue;
		}
		if ((pInterlock[0] = m_pInterlocks[0].GetAt(nInterlock)))
		{
			if (m_pInterlocks[1].Find(pInterlock[0]->GetComputerName(), pInterlock[0]->GetSourceType(), pInterlock[0]->GetName()) < 0)
			{
				LogActivity(pInterlock[0], STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DELETING), pInterlocks.Find(pInterlock[0]->GetComputerName(), pInterlock[0]->GetSourceType(), pInterlock[0]->GetName()) < 0);
				continue;
			}
		}
	}
	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[1].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock[0] = m_pInterlocks[1].GetAt(nInterlock)) && m_pInterlocks[0].Find(pInterlock[0]->GetComputerName(), pInterlock[0]->GetSourceType(), pInterlock[0]->GetName()) < 0)
		{
			LogActivity(pInterlock[0], STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_CREATING), pInterlocks.Find(pInterlock[0]->GetComputerName(), pInterlock[0]->GetSourceType(), pInterlock[0]->GetName()) >= 0);
			continue;
		}
	}
	m_pInterlocks[1].RemoveAll();
	return((pInterlocks.GetSize() > 0) ? TRUE : FALSE);
}

VOID CTelecommandOptionsInterlocksPage::AdjustToPrivileges()
{
	return;
}

BOOL CTelecommandOptionsInterlocksPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? m_bModified : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTelecommandOptionsInterlocksPage::Update(CONST CTCInterlocks &pInterlocks)
{
	if (!m_pInterlocks[0].Compare(&pInterlocks))
	{
		for (LogActivity(pInterlocks), m_pInterlocks[0].Copy(&pInterlocks); IsWindow(GetSafeHwnd()); )
		{
			for (EnumInterlocks(); !SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST, LVM_GETITEMCOUNT); )
			{
				GetParent()->SetFocus();
				break;
			}
			break;
		}
		return TRUE;
	}
	return FALSE;
}

void CTelecommandOptionsInterlocksPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandOptionsInterlocksPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelecommandOptionsInterlocksPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_pInterlocks[0].RemoveAll();
	m_pInterlocks[1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelecommandOptionsInterlocksPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelecommandOptionsInterlocksPage)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_EDIT, OnEdit)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_RESET, OnReset)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsInterlocksPage message handlers

BOOL CTelecommandOptionsInterlocksPage::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_DETAILS)->EnableWindow();
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_COMPUTER));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_SCOPE));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_STAGE));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_STATE));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_NAME) || m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_COMPUTER)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_TYPE)) ? (rColumns.Width() / 4) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_INTERLOCKSPAGE_TITLEITEM_SCOPE)) ? (rColumns.Width() / 3) : (rColumns.Width() / 6))));
		continue;
	}
	EnumInterlocks();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTelecommandOptionsInterlocksPage::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	INT  nComputer;
	INT  nComputers;
	INT  nCommandSource;
	INT  nCommandSources;
	CStringArray  szComputers;
	CTCInterlock  *pInterlock;
	CTCInterlocks  pInterlocks;
	CTCProcessCommandSources  pCommandSources;
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;
	CTelecommandOptionsInterlocksDialog  cInterlocksDialog;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		for (; (pInterlock = (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) ? m_pInterlocks[0].GetAt(pNotifyListView->iItem) : (CTCInterlock *)NULL); )
		{
			GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_RESET)->EnableWindow(((pInterlock->GetState() == TCINTERLOCK_STATE_SUCCESS || pInterlock->GetState() == TCINTERLOCK_STATE_FAILURE) && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
			break;
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK)
		{
			for (nCommandSource = 0, nCommandSources = (GetParent()->GetCommandHandlerSources(pCommandSources) >= 0) ? (INT)pCommandSources.GetSize() : 0; nCommandSource < nCommandSources; nCommandSource++)
			{
				if ((pCommandSourceInfo = pCommandSources.GetAt(nCommandSource)) != (CTCProcessCommandSourceInfo *)NULL)
				{
					for (nComputer = 0, nComputers = (INT)szComputers.GetSize(); nComputer < nComputers; nComputer++)
					{
						if (!szComputers.GetAt(nComputer).CompareNoCase(pCommandSourceInfo->GetComputerName())) break;
						continue;
					}
					if (nComputer == nComputers)
					{
						szComputers.Add(pCommandSourceInfo->GetComputerName());
						continue;
					}
				}
			}
			if ((pInterlock = m_pInterlocks[0].GetAt(pNotifyListView->iItem)))
			{
				for (pInterlocks.Copy(&m_pInterlocks[0]); cInterlocksDialog.DoModal(szComputers, pInterlock, pInterlocks) == IDOK; )
				{
					for (m_pInterlocks[1].Copy(&pInterlocks); !GetTCService()->SetTCInterlocks(pInterlocks); )
					{
						LogActivity(pInterlocks);
						break;
					}
					m_bModified = TRUE;
					break;
				}
			}
			else
			{
				for (pInterlocks.Copy(&m_pInterlocks[0]); cInterlocksDialog.DoModal(szComputers, pInterlocks) == IDOK; )
				{
					for (m_pInterlocks[1].Copy(&pInterlocks); !GetTCService()->SetTCInterlocks(pInterlocks); )
					{
						LogActivity(pInterlocks);
						break;
					}
					m_bModified = TRUE;
					break;
				}
			}
			GetDlgItem(IDOK)->EnableWindow(Check());
		}
	}
	return CLocalePropertyPage::OnNotify(wParam, lParam, pResult);
}

void CTelecommandOptionsInterlocksPage::OnEdit()
{
	INT  nComputer;
	INT  nComputers;
	INT  nCommandSource;
	INT  nCommandSources;
	CStringArray  szComputers;
	CTCInterlock  *pInterlock;
	CTCInterlocks  pInterlocks;
	CTCProcessCommandSources  pCommandSources;
	CTCProcessCommandSourceInfo  *pCommandSourceInfo;
	CTelecommandOptionsInterlocksDialog  cInterlocksDialog;

	for (nCommandSource = 0, nCommandSources = (GetParent()->GetCommandHandlerSources(pCommandSources) >= 0) ? (INT)pCommandSources.GetSize() : 0; nCommandSource < nCommandSources; nCommandSource++)
	{
		if ((pCommandSourceInfo = pCommandSources.GetAt(nCommandSource)) != (CTCProcessCommandSourceInfo *)NULL)
		{
			for (nComputer = 0, nComputers = (INT)szComputers.GetSize(); nComputer < nComputers; nComputer++)
			{
				if (!szComputers.GetAt(nComputer).CompareNoCase(pCommandSourceInfo->GetComputerName())) break;
				continue;
			}
			if (nComputer == nComputers)
			{
				szComputers.Add(pCommandSourceInfo->GetComputerName());
				continue;
			}
		}
	}
	if ((pInterlock = m_pInterlocks[0].GetAt(Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST)))))
	{
		for (pInterlocks.Copy(&m_pInterlocks[0]); cInterlocksDialog.DoModal(szComputers, pInterlock, pInterlocks) == IDOK; )
		{
			for (m_pInterlocks[1].Copy(&pInterlocks); !GetTCService()->SetTCInterlocks(pInterlocks); )
			{
				LogActivity(pInterlocks);
				break;
			}
			m_bModified = TRUE;
			break;
		}
	}
	else
	{
		for (pInterlocks.Copy(&m_pInterlocks[0]); cInterlocksDialog.DoModal(szComputers, pInterlocks) == IDOK; )
		{
			for (m_pInterlocks[1].Copy(&pInterlocks); !GetTCService()->SetTCInterlocks(pInterlocks); )
			{
				LogActivity(pInterlocks);
				break;
			}
			m_bModified = TRUE;
			break;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksPage::OnReset()
{
	CTCInterlock  *pInterlock;
	CTCInterlocks  pInterlocks;
	CHourglassCursor  cCursor;

	for (pInterlocks.Copy(&m_pInterlocks[0]); (pInterlock = pInterlocks.GetAt(Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKSPAGE_LIST)))); )
	{
		for (pInterlock->SetState(TCINTERLOCK_STATE_IDLE), m_pInterlocks[1].Copy(&pInterlocks); !GetTCService()->SetTCInterlocks(pInterlocks); )
		{
			LogActivity(pInterlocks);
			break;
		}
		m_bModified = TRUE;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsQueuePage property page

IMPLEMENT_DYNCREATE(CTelecommandOptionsQueuePage, CLocalePropertyPage)

CTelecommandOptionsQueuePage::CTelecommandOptionsQueuePage() : CLocalePropertyPage(CTelecommandOptionsQueuePage::IDD)
{
	//{{AFX_DATA_INIT(CTelecommandOptionsQueuePage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelecommandOptionsQueuePage::SetCommandHandlerTelecommands(CONST CTCItems &pItems, BOOL bAllowUpdates)
{
	m_nTimerID = 0;
	m_pItems[0].Copy(&pItems);
	m_bUpdate = bAllowUpdates;
	m_bModified = FALSE;
}

BOOL CTelecommandOptionsQueuePage::GetCommandHandlerTelecommands(CTCItems &pItems) CONST
{
	return pItems.Copy(&m_pItems[0]);
}

CTelecommandOptionsDialog *CTelecommandOptionsQueuePage::GetParent() CONST
{
	return((CTelecommandOptionsDialog *)CLocalePropertyPage::GetParent());
}

VOID CTelecommandOptionsQueuePage::EnumTelecommands()
{
	INT  nItem;
	INT  nItems;
	INT  nDigits;
	INT  nColumn;
	INT  nColumns;
	INT  nArgument[2];
	INT  nArguments[2];
	INT  nArgumentsCount;
	BOOL  bAfterDispatch;
	UINT  nExecutionOBRT;
	DWORD  dwReleaseOffset;
	CTCItem  *pItem;
	CString  szItem;
	CString  szFlags;
	CString  szStatus;
	CString  szArgument;
	CString  szTCPacket;
	CString  szResult[2];
	CString  szReleaseTime;
	CString  szExecutionTime;
	CTimeTag  tReleaseTime;
	CTimeTag  tExecutionTime;
	CTimeSpan  tReleaseInterval;
	CStringTools  cStringTools;
	CDatabaseTCPacket  cPacket;
	CDatabaseTCParameter  *pParameter;
	CDatabaseTCParameters  pParameters;
	CDatabaseTCPacketParameter  *pPacketParameter;
	CDatabaseTCFunctionElement  *pFunctionElement;

	for (nItem = 0, nItems = (INT)m_pItems[0].GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = (CTCItem *)m_pItems[0].GetAt(nItem)) != (CTCItem *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nDigits = max(cStringTools.ConvertIntToString(nItems).GetLength(), 3); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_NUMBER); )
				{
					szItem = cStringTools.ConvertIntToPaddedString(nItem + 1, nDigits);
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_NAME); )
				{
					szItem.Format(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_NAMEFORMAT), (LPCTSTR)pItem->GetName(), (LPCTSTR)pItem->GetMembership());
					szItem = (pItem->GetMembership().IsEmpty()) ? pItem->GetName() : szItem;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_COMPUTER); )
				{
					szItem = pItem->GetComputerName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_COMMANDSOURCE); )
				{
					szItem = (pItem->GetSourceType() == TCITEM_SOURCETYPE_MANUALSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_COMMANDSOURCE_MANUALSTACK) : EMPTYSTRING;
					szItem = (pItem->GetSourceType() == TCITEM_SOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_COMMANDSOURCE_AUTOMATICSTACK) : szItem;
					szItem = (pItem->GetSourceType() == TCITEM_SOURCETYPE_PROCEDURESMONITOR) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_COMMANDSOURCE_PROCEDURESMONITOR) : szItem;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_DESCRIPTION); )
				{
					szItem = pItem->GetDescription();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_ARGUMENTS); )
				{
					for (nArgument[1] = 0, nArguments[1] = (((pItem->GetFlags() & TCITEM_LINKAGEFLAG_BLOCKED) != TCITEM_LINKAGEFLAG_BLOCKED || !pItem->GetReleaseBlockID()) && pItem->GetTCPacket(&cPacket)) ? (INT)cPacket.GetSize() : 0, szItem.Empty(), nArgumentsCount = 0; nArgument[1] < nArguments[1]; nArgument[1]++)
					{
						if ((pPacketParameter = cPacket.GetAt(nArgument[1])) && (pPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && (pPacketParameter->GetAttributes() & TCPARAMETER_TYPE_VARIABLE))
						{
							szArgument.Format(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_ARGUMENTSFORMAT), (LPCTSTR)pPacketParameter->GetTag(), (LPCTSTR)pPacketParameter->GetConstValueAsText());
							szItem += (nArgumentsCount > 0) ? (STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_ARGUMENTSSEPARATOR) + szArgument) : szArgument;
							nArgumentsCount++;
						}
					}
					for (nArgument[0] = 0, nArguments[0] = (INT)pItem->GetSize(); nArgument[0] < nArguments[0]; nArgument[0]++)
					{
						if ((pFunctionElement = pItem->GetAt(nArgument[0])) && (pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO && (pFunctionElement->GetAttributes() & TCPARAMETER_TYPE_VARIABLE))
						{
							for (szArgument.Format(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_ARGUMENTSFORMAT), (LPCTSTR)pFunctionElement->GetName(), (LPCTSTR)pFunctionElement->GetConstValueAsText()); (pParameter = ((pFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_FORMAL) && pItem->GetMembershipParameters(pParameters) > 0) ? pParameters.GetAt(pParameters.Find(pFunctionElement->GetConstValueAsText())) : (CDatabaseTCParameter *)NULL); )
							{
								szArgument.Format(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_ARGUMENTSFORMAT), (LPCTSTR)pFunctionElement->GetName(), (LPCTSTR)pParameter->GetConstValueAsText());
								break;
							}
							szItem += (nArgumentsCount > 0) ? (STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_ARGUMENTSSEPARATOR) + szArgument) : szArgument;
							nArgumentsCount++;
						}
					}
					szItem += (!nArgumentsCount  &&  nArguments[0] + nArguments[1] == 0) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_NOARGUMENTS) : EMPTYSTRING;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_FLAGS); )
				{
					szFlags.Format(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_FLAGS_BLOCKED), pItem->GetReleaseBlockID());
					szItem = (pItem->GetFlags() & TCITEM_LINKAGEFLAG_GROUPED) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_FLAGS_GROUPED) : EMPTYSTRING;
					szItem += (pItem->GetFlags() & TCITEM_LINKAGEFLAG_BLOCKED) ? ((!szItem.IsEmpty()) ? (STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_FLAGS_SEPARATOR) + szFlags) : szFlags) : EMPTYSTRING;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_TCPACKET); )
				{
					szTCPacket = (pItem->GetTCPacket(&cPacket)) ? cPacket.GetTag() : EMPTYSTRING;
					szItem = ((pItem->GetFlags() & TCITEM_LINKAGEFLAG_BLOCKED) && pItem->GetReleaseBlockID() > 0) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_BLOCKEDTCPACKET) : szTCPacket;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_RELEASETIME); )
				{
					for (szReleaseTime.Empty(); (tReleaseTime = pItem->GetReleaseTime().GetTime()) > 0; )
					{
						szReleaseTime = tReleaseTime.FormatGmt(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_RELEASETIME_FORMAT));
						break;
					}
					for (; tReleaseTime.GetTime() == 0 && !pItem->GetReleaseTimeWindow(dwReleaseOffset, tReleaseInterval, bAfterDispatch); )
					{
						szReleaseTime = STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_RELEASETIME_IMMEDIATE);
						break;
					}
					szItem = szReleaseTime;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_EXECUTIONTIME); )
				{
					szExecutionTime = (pItem->GetExecutionTime(tExecutionTime)) ? tExecutionTime.FormatGmt(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_EXECUTIONTIME_FORMAT)) : EMPTYSTRING;
					szExecutionTime = (pItem->GetExecutionOBRT(nExecutionOBRT)) ? (cStringTools.ConvertUIntToPaddedString(nExecutionOBRT, 2 * sizeof(nExecutionOBRT), 16) + STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_EXECUTIONTIME_OBRTFORMAT)) : szExecutionTime;
					szExecutionTime = (szExecutionTime.IsEmpty()) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_EXECUTIONTIME_IMMEDIATE) : szExecutionTime;
					szItem = szExecutionTime;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_PTVRESULT); )
				{
					szResult[0] = (pItem->GetResult() & TCITEM_RESULT_PTV_GO) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_PTVRESULT_GO) : EMPTYSTRING;
					szResult[0] = (pItem->GetResult() & TCITEM_RESULT_PTV_WAIT) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_PTVRESULT_WAIT) : szResult[0];
					szResult[0] = (pItem->GetResult() & TCITEM_RESULT_PTV_FAIL) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_PTVRESULT_FAIL) : szResult[0];
					szItem = szResult[0];
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_PEVRESULT); )
				{
					szResult[1] = (pItem->GetResult() & TCITEM_RESULT_PEV_GO) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_PEVRESULT_GO) : EMPTYSTRING;
					szResult[1] = (pItem->GetResult() & TCITEM_RESULT_PEV_NOGO) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_PEVRESULT_NOGO) : szResult[1];
					szItem = szResult[1];
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_STATUS); )
				{
					szStatus = (pItem->GetStatus() == TCITEM_STATUS_DISPATCHED) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_STATUS_DISPATCHED) : EMPTYSTRING;
					szStatus = (pItem->GetStatus() == TCITEM_STATUS_RELEASED) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_STATUS_RELEASED) : szStatus;
					szStatus = (pItem->GetStatus() == TCITEM_STATUS_NOTRELEASED) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_STATUS_NOTRELEASED) : szStatus;
					szStatus = (pItem->GetStatus() == TCITEM_STATUS_FAILEDRELEASE) ? STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_LIST_STATUS_FAILEDRELEASE) : szStatus;
					szItem = szStatus;
					break;
				}
				if (!nColumn  &&  nItem >= SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST, LVM_GETITEMCOUNT))
				{
					Listview_InsertText(GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST), nItem, nColumn, szItem);
			}
		}
	}
	while (nItems < SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST, LVM_GETITEMCOUNT))
	{
		Listview_DeleteText(GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST), nItems);
		continue;
	}
	if (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST, LVM_GETITEMCOUNT) > 0)
	{
		if ((m_nTimerID = (!m_nTimerID) ? SetTimer(TELECOMMANDOPTIONSQUEUEPAGE_RELEASECLOCK_TIMERID, TELECOMMANDOPTIONSQUEUEPAGE_RELEASECLOCK_TIMEOUT, NULL) : m_nTimerID) == 0)
		{
			GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME_STATIC)->ShowWindow(SW_HIDE);
			GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME)->ShowWindow(SW_HIDE);
			GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME)->SetWindowText(EMPTYSTRING);
			GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME_STATIC)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME)->EnableWindow(FALSE);
		}
		Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST), max(Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST)), 0));
	}
	else
	{
		for (GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME_STATIC)->ShowWindow(SW_HIDE), GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME)->ShowWindow(SW_HIDE), GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME)->SetWindowText(EMPTYSTRING), GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME_STATIC)->EnableWindow(FALSE), GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME)->EnableWindow(FALSE); m_nTimerID != 0; )
		{
			KillTimer(TELECOMMANDOPTIONSQUEUEPAGE_RELEASECLOCK_TIMERID);
			m_nTimerID = 0;
			break;
		}
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST)) >= 0 && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST, LVM_GETITEMCOUNT) > 0 && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
}

BOOL CTelecommandOptionsQueuePage::LogActivity(CONST CTCItem *pItem, BOOL bSuccess)
{
	CString  szActivity;
	CTCLogEntry  *pEntry;

	if ((pEntry = new CTCLogEntry))
	{
		for (pEntry->SetName((pItem->GetSourceType() == TCITEM_SOURCETYPE_MANUALSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_MANUALSTACK) : ((pItem->GetSourceType() == TCITEM_SOURCETYPE_AUTOMATICSTACK) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_AUTOMATICSTACK) : STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_PROCEDURESMONITOR))), pEntry->SetComputerName(pItem->GetComputerName()), pEntry->SetDescription((bSuccess) ? STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_TELECOMMANDQUEUESUCCESSFULCHANGE) : STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_TELECOMMANDQUEUEFAILEDCHANGE)), szActivity.Format((pItem->GetMembership().IsEmpty()) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_TELECOMMANDITEM) : STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_TELECOMMANDSEQUENCEITEM), (LPCTSTR)pItem->GetName(), (LPCTSTR)pItem->GetMembership()), pEntry->SetActivity(CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DELETING)) + SPACE + szActivity), pEntry->SetUser(GetAccountUserName()), pEntry->SetTime(CTime::GetCurrentTime().GetTime()); GetParent()->LogActivity(pEntry); )
		{
			delete pEntry;
			return TRUE;
		}
		delete pEntry;
	}
	return FALSE;
}
BOOL CTelecommandOptionsQueuePage::LogActivity(CONST CTCItems &pItems, BOOL bSuccess)
{
	INT  nItem;
	INT  nItems;
	CTCItem  *pItem;

	for (nItem = 0, nItems = (INT)pItems.GetSize(), m_pItems[1].RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem = pItems.GetAt(nItem)))
		{
			LogActivity(pItem, bSuccess);
			continue;
		}
	}
	return((pItems.GetSize() > 0) ? TRUE : FALSE);
}

INT CTelecommandOptionsQueuePage::CalcColumnWidth(LPCTSTR pszColumn)
{
	CDC  *pDC;
	CFont  *pOldFont;
	CSize  sizeColumn;

	if ((pDC = GetDC()))
	{
		if ((pOldFont = pDC->SelectObject(GetFont())))
		{
			for (sizeColumn = pDC->GetTextExtent(CString(SPACE) + pszColumn + CString(SPACE)); !lstrcmp(pszColumn, STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_NAME)) || !lstrcmp(pszColumn, STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_DESCRIPTION)); )
			{
				sizeColumn.cx *= 3;
				break;
			}
			for (; !lstrcmp(pszColumn, STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_ARGUMENTS)); )
			{
				sizeColumn.cx *= 4;
				break;
			}
			for (; !lstrcmp(pszColumn, STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_FLAGS)); )
			{
				sizeColumn.cx = (5 * sizeColumn.cx) / 4;
				break;
			}
			for (; !lstrcmp(pszColumn, STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_COMMANDSOURCE)) || !lstrcmp(pszColumn, STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_RELEASETIME)) || !lstrcmp(pszColumn, STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_EXECUTIONTIME)); )
			{
				sizeColumn.cx = (3 * sizeColumn.cx) / 2;
				break;
			}
			for (; !lstrcmp(pszColumn, STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_COMPUTER)) || !lstrcmp(pszColumn, STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_STATUS)); )
			{
				sizeColumn.cx *= 2;
				break;
			}
			sizeColumn.cx += 4 * GetSystemMetrics(SM_CXEDGE);
			pDC->SelectObject(pOldFont);
			ReleaseDC(pDC);
			return sizeColumn.cx;
		}
		ReleaseDC(pDC);
	}
	return 0;
}

VOID CTelecommandOptionsQueuePage::AdjustToPrivileges()
{
	return;
}

BOOL CTelecommandOptionsQueuePage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? m_bModified : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CTelecommandOptionsQueuePage::Update(CONST CTCItems &pItems)
{
	INT  nItem;
	INT  nItems;
	CTCItem  *pItem;

	if (!m_pItems[0].Compare(&pItems))
	{
		for (nItem = 0, nItems = (INT)m_pItems[1].GetSize(); nItem < nItems; nItem++)
		{
			if ((pItem = m_pItems[1].GetAt(nItem)) != (CTCItem *)NULL)
			{
				LogActivity(pItem, pItems.Find(pItem) < 0);
				continue;
			}
		}
		for (m_pItems[0].Copy(&pItems), m_pItems[1].RemoveAll(); IsWindow(GetSafeHwnd()); )
		{
			for (EnumTelecommands(); !SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST, LVM_GETITEMCOUNT); )
			{
				GetParent()->SetFocus();
				break;
			}
			break;
		}
		return TRUE;
	}
	return FALSE;
}

void CTelecommandOptionsQueuePage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandOptionsQueuePage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelecommandOptionsQueuePage::PostNcDestroy()
{
	m_pItems[0].RemoveAll();
	m_pItems[1].RemoveAll();
	m_szColumns.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelecommandOptionsQueuePage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelecommandOptionsQueuePage)
	ON_WM_TIMER()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_REMOVEALL, OnRemoveAll)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsQueuePage message handlers

BOOL CTelecommandOptionsQueuePage::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_DETAILS)->EnableWindow();
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_NUMBER));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_COMPUTER));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_COMMANDSOURCE));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_ARGUMENTS));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_FLAGS));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_TCPACKET));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_RELEASETIME));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_EXECUTIONTIME));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_PTVRESULT));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_PEVRESULT));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_QUEUEPAGE_TITLEITEM_STATUS));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST), nColumn, m_szColumns.GetAt(nColumn), CalcColumnWidth(m_szColumns.GetAt(nColumn)));
		continue;
	}
	EnumTelecommands();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTelecommandOptionsQueuePage::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CTCItem  *pItem;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if ((pItem = (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) ? m_pItems[0].GetAt(pNotifyListView->iItem) : (CTCItem *)NULL)) GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_REMOVE)->EnableWindow((pItem->GetStatus() == TCITEM_STATUS_DISPATCHED  &&  m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	}
	return CLocalePropertyPage::OnNotify(wParam, lParam, pResult);
}

void CTelecommandOptionsQueuePage::OnTimer(UINT_PTR nEventID)
{
	CTCItem  *pItem;
	CTimeKey  tTime;
	CTimeSpan  tTimeout;

	if (m_nTimerID == TELECOMMANDOPTIONSQUEUEPAGE_RELEASECLOCK_TIMERID)
	{
		if ((pItem = m_pItems[0].GetAt(Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST)))) && pItem->GetStatus() == TCITEM_STATUS_DISPATCHED)
		{
			tTimeout = (pItem->GetReleaseTime() > 0) ? max(pItem->GetReleaseTime().GetTimeInSeconds() - tTime.GetTime(), 0) : 0;
			GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME)->SetWindowText(tTimeout.Format(STRING(IDS_TIMEKEY_SPANFORMAT)));
			GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME_STATIC)->ShowWindow(SW_SHOW);
			GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME)->ShowWindow(SW_SHOW);
		}
		else
		{
			GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME_STATIC)->ShowWindow(SW_HIDE);
			GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME)->ShowWindow(SW_HIDE);
			GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME)->SetWindowText(EMPTYSTRING);
			GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME_STATIC)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_TIME)->EnableWindow(FALSE);
		}
	}
	CLocalePropertyPage::OnTimer(nEventID);
}

void CTelecommandOptionsQueuePage::OnRemove()
{
	CTCItems  pItems;
	CHourglassCursor  cCursor;

	if (m_pItems[0].Collect(Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_QUEUEPAGE_LIST)), pItems) > 0 && m_pItems[1].Copy(&pItems))
	{
		for (m_bModified = TRUE; !GetTCService()->DispatchTelecommands(pItems, TRUE); )
		{
			LogActivity(pItems, FALSE);
			break;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsQueuePage::OnRemoveAll()
{
	CTCItems  pItems;
	CHourglassCursor  cCursor;

	if (pItems.Copy(&m_pItems[0]) && m_pItems[1].Copy(&pItems))
	{
		for (m_bModified = TRUE; !GetTCService()->DispatchTelecommands(pItems, TRUE); )
		{
			LogActivity(pItems, FALSE);
			break;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsQueuePage::OnDestroy()
{
	if (m_nTimerID != 0)
	{
		KillTimer(TELECOMMANDOPTIONSQUEUEPAGE_RELEASECLOCK_TIMERID);
		m_nTimerID = 0;
	}
	CLocalePropertyPage::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsHistoryPage property page

IMPLEMENT_DYNCREATE(CTelecommandOptionsHistoryPage, CLocalePropertyPage)

CTelecommandOptionsHistoryPage::CTelecommandOptionsHistoryPage() : CLocalePropertyPage(CTelecommandOptionsHistoryPage::IDD)
{
	//{{AFX_DATA_INIT(CTelecommandOptionsHistoryPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelecommandOptionsHistoryPage::SetHistoryConfiguration(CONST CHistoryStoreFiles &pArchivalFiles, CONST CHistoryStoreFiles &pRetrievalFiles, LPCTSTR pszDefaultRetrievalFileName, BOOL bAllowUpdates, BOOL bBackup)
{
	for (m_pArchivalFiles[0].Copy(&pArchivalFiles), m_pRetrievalFiles[0].Copy(&pRetrievalFiles), m_szDefaultRetrievalFileName[0] = pszDefaultRetrievalFileName, m_bUpdate = bAllowUpdates; bBackup; )
	{
		m_pArchivalFiles[1].Copy(&m_pArchivalFiles[0]);
		m_pRetrievalFiles[1].Copy(&m_pRetrievalFiles[0]);
		m_szDefaultRetrievalFileName[1] = m_szDefaultRetrievalFileName[0];
		break;
	}
}

BOOL CTelecommandOptionsHistoryPage::GetHistoryConfiguration(CHistoryStoreFiles &pArchivalFiles, CHistoryStoreFiles &pRetrievalFiles, CString &szDefaultRetrievalFileName) CONST
{
	INT  nFile;
	INT  nFiles;
	CHistoryStoreFile  *pFile;

	for (nFile = 0, nFiles = (pArchivalFiles.Copy(&m_pArchivalFiles[0])) ? (INT)pArchivalFiles.GetSize() : 0; nFile < nFiles; nFile++)
	{
		if ((pFile = pArchivalFiles.GetAt(nFile)) && pFile->GetFileName().IsEmpty())
		{
			pArchivalFiles.RemoveAt(nFile);
			delete pFile;
			nFiles--;
			nFile--;
		}
	}
	for (nFile = 0, nFiles = (pRetrievalFiles.Copy(&m_pRetrievalFiles[0])) ? (INT)pRetrievalFiles.GetSize() : 0; nFile < nFiles; nFile++)
	{
		if ((pFile = pRetrievalFiles.GetAt(nFile)) && pFile->GetFileName().IsEmpty())
		{
			pRetrievalFiles.RemoveAt(nFile);
			delete pFile;
			nFiles--;
			nFile--;
		}
	}
	szDefaultRetrievalFileName = m_szDefaultRetrievalFileName[0];
	return IsModified();
}

INT CTelecommandOptionsHistoryPage::EnumHistoryFilesToDelete(CStringArray &szFiles) CONST
{
	CString  szFileName;

	for (szFiles.RemoveAll(); IsWindow(GetSafeHwnd()); )
	{
		if (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEARCHIVEFILE))
		{
			GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowText(szFileName);
			szFiles.Add(szFileName);
		}
		if (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEBACKUPFILE))
		{
			GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowText(szFileName);
			szFiles.Add(szFileName);
		}
		break;
	}
	return((INT)szFiles.GetSize());
}

INT CTelecommandOptionsHistoryPage::CollectLogEntries(CTCLogEntries &pEntries) CONST
{
	INT  nFile;
	INT  nFiles;
	CString  szLogEntry;
	CTimeKey  tLogEntry;
	CHistoryStoreFile  *pFile[2];

	for (nFile = 0, nFiles = (INT)m_pArchivalFiles[0].GetSize(), pEntries.RemoveAll(); nFile < nFiles; nFile++)
	{
		if ((pFile[1] = ((pFile[0] = m_pArchivalFiles[0].GetAt(nFile))) ? m_pArchivalFiles[1].GetAt(m_pArchivalFiles[1].Find(pFile[0]->GetFileName())) : (CHistoryStoreFile *)NULL))
		{
			for (szLogEntry.Format(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_HISTORYFILE), (LPCTSTR)pFile[0]->GetFileName()); !pFile[0]->GetFileName().IsEmpty() && !pFile[0]->Compare(pFile[1]); )
			{
				if ((pFile[0]->GetOptions() & HISTORYSTORE_OPTION_USE) == (pFile[1]->GetOptions() & HISTORYSTORE_OPTION_USE))
				{
					CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_ALLCOMMANDSOURCES), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_HISTORYARCHIVALFILECHANGE), CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_CHANGING)) + SPACE + szLogEntry, tLogEntry);
					break;
				}
				CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_ALLCOMMANDSOURCES), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_HISTORYARCHIVALFILECHANGE), (pFile[0]->GetOptions() & HISTORYSTORE_OPTION_USE) ? (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ENABLING)) + SPACE + szLogEntry) : (CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DISABLING)) + SPACE + szLogEntry), tLogEntry);
				break;
			}
			continue;
		}
		if ((pFile[0] = m_pArchivalFiles[0].GetAt(nFile)) && !pFile[0]->GetFileName().IsEmpty())
		{
			szLogEntry.Format(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_HISTORYFILE), (LPCTSTR)pFile[0]->GetFileName());
			CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_ALLCOMMANDSOURCES), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_HISTORYARCHIVALFILECHANGE), CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ADDING)) + SPACE + szLogEntry, tLogEntry);
			continue;
		}
	}
	for (nFile = 0, nFiles = (INT)m_pArchivalFiles[1].GetSize(); nFile < nFiles; nFile++)
	{
		if ((pFile[0] = m_pArchivalFiles[1].GetAt(nFile)) && m_pArchivalFiles[0].Find(pFile[0]->GetFileName()) < 0)
		{
			for (szLogEntry.Format(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_HISTORYFILE), (LPCTSTR)pFile[0]->GetFileName()); !pFile[0]->GetFileName().IsEmpty(); )
			{
				CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_ALLCOMMANDSOURCES), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_HISTORYARCHIVALFILECHANGE), CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_REMOVING)) + SPACE + szLogEntry, tLogEntry);
				break;
			}
		}
	}
	for (nFile = 0, nFiles = (INT)m_pRetrievalFiles[0].GetSize(); nFile < nFiles; nFile++)
	{
		if ((pFile[0] = m_pRetrievalFiles[0].GetAt(nFile)) && m_pRetrievalFiles[1].Find(pFile[0]->GetFileName()) < 0)
		{
			szLogEntry.Format(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_HISTORYFILE), (LPCTSTR)pFile[0]->GetFileName());
			CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_ALLCOMMANDSOURCES), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_HISTORYRETRIEVALFILECHANGE), CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_ADDING)) + SPACE + szLogEntry, tLogEntry);
		}
	}
	for (nFile = 0, nFiles = (INT)m_pRetrievalFiles[1].GetSize(); nFile < nFiles; nFile++)
	{
		if ((pFile[0] = m_pRetrievalFiles[1].GetAt(nFile)) && m_pRetrievalFiles[0].Find(pFile[0]->GetFileName()) < 0)
		{
			szLogEntry.Format(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_HISTORYFILE), (LPCTSTR)pFile[0]->GetFileName());
			CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_ALLCOMMANDSOURCES), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_HISTORYRETRIEVALFILECHANGE), CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_REMOVING)) + SPACE + szLogEntry, tLogEntry);
		}
	}
	if (m_szDefaultRetrievalFileName[0].CompareNoCase(m_szDefaultRetrievalFileName[1]))
	{
		szLogEntry.Format((!m_szDefaultRetrievalFileName[0].IsEmpty()) ? STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_DEFAULTHISTORYFILE) : STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_NODEFAULTHISTORYFILE), (LPCTSTR)m_szDefaultRetrievalFileName[0]);
		CollectLogEntry(pEntries, STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_ALLCOMMANDSOURCES), STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_HISTORYRETRIEVALFILECHANGE), szLogEntry, tLogEntry);
	}
	return((INT)pEntries.GetSize());
}

CTelecommandOptionsDialog *CTelecommandOptionsHistoryPage::GetParent() CONST
{
	return((CTelecommandOptionsDialog *)CLocalePropertyPage::GetParent());
}

BOOL CTelecommandOptionsHistoryPage::EnumArchivalFiles()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = m_pArchivalFiles[0].GetAt(0)))
	{
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME_USE, (pFile->GetOptions() & HISTORYSTORE_OPTION_USE) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->SetWindowText(pFile->GetFileName());
	}
	else
	{
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME_USE, FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->SetWindowText(EMPTYSTRING);
	}
	if ((pFile = m_pArchivalFiles[0].GetAt((INT)max(m_pArchivalFiles[0].GetSize() - 1, 1))))
	{
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME_USE, (pFile->GetOptions() & HISTORYSTORE_OPTION_USE) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->SetWindowText(pFile->GetFileName());
	}
	else
	{
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME_USE, FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->SetWindowText(EMPTYSTRING);
	}
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEARCHIVEFILE, (GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0) ? IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEARCHIVEFILE) : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEBACKUPFILE, (GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0) ? IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEBACKUPFILE) : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEFILE_STATIC)->EnableWindow(((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0 || GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0) && m_bUpdate) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEARCHIVEFILE)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0 && m_bUpdate) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEBACKUPFILE)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0 && m_bUpdate) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_FILESETTINGS)->EnableWindow(((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0 || GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0) && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	return TRUE;
}

BOOL CTelecommandOptionsHistoryPage::EnumRetrievalFiles()
{
	INT  nFile;
	INT  nFiles;
	CString  szFileName;
	CHistoryStoreFile  *pFile;

	for (nFile = 0, nFiles = (INT)m_pRetrievalFiles[0].GetSize(); nFile < nFiles; nFile++)
	{
		if ((pFile = m_pRetrievalFiles[0].GetAt(nFile))) SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pFile->GetFileName());
		continue;
	}
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szDefaultRetrievalFileName[0]), 0));
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_DEFAULT, (!m_szDefaultRetrievalFileName[0].CompareNoCase((szFileName = Combobox_GetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES), (INT)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_GETCURSEL)))) && !szFileName.IsEmpty()) ? TRUE : FALSE);
	SetDlgItemText(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE, (!szFileName.IsEmpty()) ? GetFreeRetrieveDiskSpace(szFileName) : EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE_STATIC)->ShowWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE_STATIC)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->ShowWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_GETCURSEL) < 0 && GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES)->GetWindowTextLength() > 0 && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_GETCURSEL) >= 0 && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_GETCURSEL) >= 0 && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_INSPECT)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_DEFAULT)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	ShowDataSourceInfo(szFileName);
	return TRUE;
}

VOID CTelecommandOptionsHistoryPage::InitializeFile(CHistoryStoreFile *pFile)
{
	CHistoryStoreFile  cFile;

	pFile->Copy(&cFile);
	pFile->SetOptions(HISTORYSTORE_OPTION_CYCLIC | HISTORYSTORE_OPTION_LIMITEDSIZE);
	pFile->SetFileSize(1024 * LOGFILE_DEFAULT_SIZE);
}

VOID CTelecommandOptionsHistoryPage::ShowDataSourceInfo()
{
	CString  szFileName;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES)->GetWindowText(szFileName);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_DEFAULT, (!szFileName.IsEmpty() && !m_szDefaultRetrievalFileName[0].CompareNoCase(szFileName)) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->SetWindowText((!szFileName.IsEmpty()) ? GetFreeRetrieveDiskSpace(szFileName) : EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE_STATIC)->ShowWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE_STATIC)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->ShowWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_DEFAULT)->EnableWindow((!szFileName.IsEmpty()) ? TRUE : FALSE);
	ShowDataSourceInfo(szFileName);
}
VOID CTelecommandOptionsHistoryPage::ShowDataSourceInfo(LPCTSTR pszFileName)
{
	CString  szProduct;
	CString  szCompany;
	CString  szTrademark;
	CString  szSpacecraft;
	CString  szStartTime;
	CString  szStopTime;
	CString  szCreationTime;
	CString  szDataSourceType;
	CString  szDataSourceSize;

	if (CheckRetrieveFile(pszFileName, szProduct, szCompany, szTrademark, szSpacecraft, szDataSourceType, szStartTime, szStopTime, szCreationTime, szDataSourceSize))
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_PRODUCT)->SetWindowText(szProduct);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_COMPANY)->SetWindowText(szCompany);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_SPACECRAFT)->SetWindowText(szSpacecraft);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TYPE)->SetWindowText(szDataSourceType);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STARTTIME)->SetWindowText(szStartTime);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STOPTIME)->SetWindowText(szStopTime);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_CREATIONTIME)->SetWindowText(szCreationTime);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_SIZE)->SetWindowText(szDataSourceSize);
	}
	else
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_PRODUCT)->SetWindowText((szProduct = EMPTYSTRING));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_COMPANY)->SetWindowText((szCompany = EMPTYSTRING));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_SPACECRAFT)->SetWindowText((szSpacecraft = EMPTYSTRING));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TYPE)->SetWindowText((szDataSourceType = EMPTYSTRING));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STARTTIME)->SetWindowText((szStartTime = EMPTYSTRING));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STOPTIME)->SetWindowText((szStopTime = EMPTYSTRING));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_CREATIONTIME)->SetWindowText((szCreationTime = EMPTYSTRING));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_SIZE)->SetWindowText((szDataSourceSize = EMPTYSTRING));
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_COMMENTS)->EnableWindow(szProduct.IsEmpty());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_COMMENTS)->ShowWindow((szProduct.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_PRODUCT_STATIC)->ShowWindow((!szProduct.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_PRODUCT_STATIC)->EnableWindow(!szProduct.IsEmpty());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_PRODUCT)->ShowWindow((!szProduct.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_PRODUCT)->EnableWindow(!szProduct.IsEmpty());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_COMPANY_STATIC)->ShowWindow((!szCompany.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_COMPANY_STATIC)->EnableWindow(!szCompany.IsEmpty());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_COMPANY)->ShowWindow((!szCompany.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_COMPANY)->EnableWindow(!szCompany.IsEmpty());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_SPACECRAFT_STATIC)->ShowWindow((!szSpacecraft.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_SPACECRAFT_STATIC)->EnableWindow(!szSpacecraft.IsEmpty());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_SPACECRAFT)->ShowWindow((!szSpacecraft.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_SPACECRAFT)->EnableWindow(!szSpacecraft.IsEmpty());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TYPE_STATIC)->ShowWindow((!szDataSourceType.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TYPE_STATIC)->EnableWindow(!szDataSourceType.IsEmpty());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TYPE)->ShowWindow((!szDataSourceType.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TYPE)->EnableWindow(!szDataSourceType.IsEmpty());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STATIC)->ShowWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STATIC)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STARTTIME)->ShowWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STARTTIME)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_TO)->ShowWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_TO)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STOPTIME)->ShowWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STOPTIME)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STARTTIME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_TIMERANGE_STOPTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_CREATIONTIME_STATIC)->ShowWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_CREATIONTIME)->GetWindowTextLength() > 0) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_CREATIONTIME_STATIC)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_CREATIONTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_CREATIONTIME)->ShowWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_CREATIONTIME)->GetWindowTextLength() > 0) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_CREATIONTIME)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_CREATIONTIME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_SIZE_STATIC)->ShowWindow((!szDataSourceSize.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_SIZE_STATIC)->EnableWindow(!szDataSourceSize.IsEmpty());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_SIZE)->ShowWindow((!szDataSourceSize.IsEmpty()) ? SW_SHOWNA : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_SOURCEINFO_SIZE)->EnableWindow(!szDataSourceSize.IsEmpty());
}

BOOL CTelecommandOptionsHistoryPage::CheckRetrieveFile(LPCTSTR pszFileName, CString &szProduct, CString &szCompany, CString &szTrademark, CString &szSpacecraft, CString &szDataSourceType, CString &szStartTime, CString &szStopTime, CString &szCreationTime, CString &szDataSourceSize) CONST
{
	CTimeKey  tTime;
	DWORDLONG  dwSize;
	CByteArray  nData;
	CFileFindEx  cFileFind;
	CHistoryFile  cHistoryFile;

	if (AfxIsValidString(pszFileName) && cFileFind.FindFile(pszFileName))
	{
		if (cHistoryFile.Open(pszFileName, (LPCTSTR)NULL, HISTORYSTORE_TYPE_TC, CFile::modeRead, TRUE) == HISTORYFILE_SUCCESS)
		{
			for (cHistoryFile.GetCopyrightProduct(szProduct), cHistoryFile.GetCopyrightCompany(szCompany), cHistoryFile.GetCopyrightTrademark(szTrademark), cHistoryFile.GetSpacecraft(szSpacecraft), cHistoryFile.GetType(szDataSourceType), szStartTime = (cHistoryFile.CLogFile::SeekToFirst() && cHistoryFile.CLogFile::Read(tTime, nData)) ? (LPCTSTR)tTime.FormatGmt(STRING(IDS_TELECOMMANDOPTIONS_HISTORYPAGE_SOURCEDATATIMEFORMAT)) : EMPTYSTRING, szStopTime = (cHistoryFile.CLogFile::SeekToLast() && cHistoryFile.CLogFile::Read(tTime, nData)) ? (LPCTSTR)tTime.FormatGmt(STRING(IDS_TELECOMMANDOPTIONS_HISTORYPAGE_SOURCEDATATIMEFORMAT)) : EMPTYSTRING, szCreationTime = (cHistoryFile.GetCopyrightCreationTime(tTime)) ? (LPCTSTR)tTime.FormatGmt(STRING(IDS_TELECOMMANDOPTIONS_HISTORYPAGE_SOURCEDATAFILETIMEFORMAT)) : EMPTYSTRING, szDataSourceSize.Format(STRING(IDS_TELECOMMANDOPTIONS_HISTORYPAGE_SOURCEDATASIZEFORMAT), ((dwSize = cHistoryFile.CLogFile::GetSize()) + 512) / 1024), szDataSourceSize = FormatDataSourceSize(szDataSourceSize); !szProduct.IsEmpty() && !szCompany.IsEmpty() && !szTrademark.IsEmpty(); )
			{
				cHistoryFile.Close();
				cFileFind.Close();
				return TRUE;
			}
			cHistoryFile.Close();
		}
		cFileFind.Close();
	}
	return FALSE;
}

CString CTelecommandOptionsHistoryPage::GetFreeRetrieveDiskSpace(LPCTSTR pszFileName) CONST
{
	INT  nPos;
	INT  cbDelimiter;
	CString  szDigit;
	CString  szDelimiter;
	CString  szDiskSpace;
	CString  szDirectory;
	CLogicalDrives  cDrives;
	ULARGE_INTEGER  nDiskSpace[3];
	CStringTools  cStringTools;
	DWORDLONG  dwFreeDiskSpace;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowText(szDiskSpace);
	if (GetDiskFreeSpaceEx((szDirectory = cDrives.ExtractDrive(pszFileName)), &nDiskSpace[0], &nDiskSpace[1], &nDiskSpace[2]))
	{
		if ((cbDelimiter = GetLocaleInfo(MAKELCID(GetLanguageID(), SORT_DEFAULT), LOCALE_STHOUSAND, (LPTSTR)NULL, 0)))
		{
			if (GetLocaleInfo(MAKELCID(GetLanguageID(), SORT_DEFAULT), LOCALE_STHOUSAND, szDelimiter.GetBufferSetLength(cbDelimiter - 1), cbDelimiter))
			{
				for (nPos = 0, dwFreeDiskSpace = ((DWORDLONG)nDiskSpace[0].HighPart << 32) + nDiskSpace[0].LowPart, dwFreeDiskSpace = dwFreeDiskSpace / 1024, szDigit = cStringTools.ConvertIntToString(0), szDiskSpace.Empty(), szDelimiter.ReleaseBuffer(); !nPos || dwFreeDiskSpace > 0; nPos++, dwFreeDiskSpace = dwFreeDiskSpace / 10)
				{
					szDiskSpace = (nPos > 0 && nPos % 3 == 0) ? (CString((TCHAR)(dwFreeDiskSpace % 10 + __toascii(szDigit[0]))) + szDelimiter + szDiskSpace) : (CString((TCHAR)(dwFreeDiskSpace % 10 + __toascii(szDigit[0]))) + szDiskSpace);
					continue;
				}
				return szDiskSpace;
			}
			szDelimiter.ReleaseBuffer();
		}
	}
	return((szDirectory.IsEmpty()) ? (LPCTSTR)szDiskSpace : EMPTYSTRING);
}

CString CTelecommandOptionsHistoryPage::FormatDataSourceSize(LPCTSTR pszDataSourceSize) CONST
{
	INT  cbSep;
	CString  szSep;
	CString  szSize;
	CString  szNumber;

	for (szNumber = pszDataSourceSize; (cbSep = GetLocaleInfo(MAKELCID(GetLanguageID(), SORT_DEFAULT), LOCALE_STHOUSAND, (LPTSTR)NULL, 0)); )
	{
		if (GetLocaleInfo(MAKELCID(GetLanguageID(), SORT_DEFAULT), LOCALE_STHOUSAND, szSep.GetBufferSetLength(cbSep - 1), cbSep))
		{
			for (szNumber = szNumber.Left(lstrlen(szNumber)), szSize.Empty(), szSep.ReleaseBuffer(); szNumber.GetLength() > 0 && !_istdigit(szNumber[szNumber.GetLength() - 1]); )
			{
				szSize = szNumber.Right(1) + szSize, szNumber = szNumber.Left(szNumber.GetLength() - 1);
				continue;
			}
			for (; szNumber.GetLength() > 0; szNumber = szNumber.Left(max(szNumber.GetLength() - 3, 0)))
			{
				szSize = (_istdigit(szSize[0])) ? (szNumber.Right(min(szNumber.GetLength(), 3)) + szSep + szSize) : (szNumber.Right(min(szNumber.GetLength(), 3)) + szSize);
				continue;
			}
			return szSize;
		}
		szSep.ReleaseBuffer();
	}
	return szNumber;
}

BOOL CTelecommandOptionsHistoryPage::CollectLogEntry(CTCLogEntries &pEntries, LPCTSTR pszName, LPCTSTR pszDescription, LPCTSTR pszActivity, CONST CTimeKey &tTime) CONST
{
	CTCLogEntry  *pEntry;

	if ((pEntry = new CTCLogEntry))
	{
		for (pEntry->SetName(pszName), pEntry->SetDescription(pszDescription), pEntry->SetActivity(pszActivity), pEntry->SetUser(GetAccountUserName()), pEntry->SetTime(tTime); pEntries.Add(pEntry) >= 0; ) return TRUE;
		delete pEntry;
	}
	return FALSE;
}

VOID CTelecommandOptionsHistoryPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME_USE, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE)) && m_bUpdate);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME_USE, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEARCHIVEFILE, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEBACKUPFILE, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, m_bUpdate  &&  bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_DEFAULT, m_bUpdate  &&  bCheck);
}

BOOL CTelecommandOptionsHistoryPage::IsModified(BOOL bAll) CONST
{
	INT  nFile[2];
	INT  nFiles[2];
	CHistoryStoreFile  *pFile[2];

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nFile[0] = 0, nFiles[0] = (INT)m_pArchivalFiles[0].GetSize(); nFile[0] < nFiles[0]; nFile[0]++)
		{
			if ((pFile[1] = ((pFile[0] = m_pArchivalFiles[0].GetAt(nFile[0])) && !pFile[0]->GetFileName().IsEmpty()) ? m_pArchivalFiles[1].GetAt(m_pArchivalFiles[1].Find(pFile[0]->GetFileName())) : (CHistoryStoreFile *)NULL))
			{
				if (!pFile[0]->Compare(pFile[1])) break;
				continue;
			}
			if ((pFile[0] = m_pArchivalFiles[0].GetAt(nFile[0])) && !pFile[0]->GetFileName().IsEmpty()) break;
		}
		for (nFile[1] = 0, nFiles[1] = (INT)m_pArchivalFiles[1].GetSize(); nFile[1] < nFiles[1]; nFile[1]++)
		{
			if ((pFile[1] = ((pFile[0] = m_pArchivalFiles[1].GetAt(nFile[1])) && !pFile[0]->GetFileName().IsEmpty()) ? m_pArchivalFiles[0].GetAt(m_pArchivalFiles[0].Find(pFile[0]->GetFileName())) : (CHistoryStoreFile *)NULL))
			{
				if (!pFile[0]->Compare(pFile[1])) break;
				continue;
			}
			if ((pFile[0] = m_pArchivalFiles[1].GetAt(nFile[1])) && !pFile[0]->GetFileName().IsEmpty()) break;
		}
		return((nFile[0] != nFiles[0] || nFile[1] != nFiles[1] || !m_pRetrievalFiles[0].Compare(&m_pRetrievalFiles[1]) || m_szDefaultRetrievalFileName[0].CompareNoCase(m_szDefaultRetrievalFileName[1]) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEARCHIVEFILE) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEBACKUPFILE)) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::IsModified() : FALSE);
}

BOOL CTelecommandOptionsHistoryPage::Check(BOOL bAll) CONST
{
	CString  szFileName[2];

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowText(szFileName[0]);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowText(szFileName[1]);
		return((!IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME_USE) || !szFileName[0].IsEmpty()) && (!IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME_USE) || !szFileName[1].IsEmpty()) && (szFileName[0].CompareNoCase(szFileName[1]) || szFileName[0].IsEmpty()));
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

void CTelecommandOptionsHistoryPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandOptionsHistoryPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelecommandOptionsHistoryPage::PostNcDestroy()
{
	m_pArchivalFiles[0].RemoveAll();
	m_pArchivalFiles[1].RemoveAll();
	m_pRetrievalFiles[0].RemoveAll();
	m_pRetrievalFiles[1].RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelecommandOptionsHistoryPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelecommandOptionsHistoryPage)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME_USE, OnHistoryFile)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME_USE, OnBackupFile)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME_BROWSE, OnBrowseHistoryFile)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME_BROWSE, OnBrowseBackupFile)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEARCHIVEFILE, OnDeleteHistoryFile)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEBACKUPFILE, OnDeleteBackupFile)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_FILESETTINGS, OnFileSettings)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_ADD, OnAddRetrievalFile)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_REMOVE, OnRemoveRetrievalFile)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_REMOVEALL, OnRemoveAllRetrievalFiles)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_BROWSE, OnBrowseRetrievalFile)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_INSPECT, OnInspectRetrievalFile)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_DEFAULT, OnDefaultRetrievalFile)
	ON_EN_CHANGE(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME, OnEditchangeHistoryFile)
	ON_EN_CHANGE(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME, OnEditchangeBackupFile)
	ON_CBN_EDITCHANGE(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, OnEditchangeRetrievalFile)
	ON_CBN_KILLFOCUS(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, OnUpdateStorageMediaFreeSpace)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsHistoryPage message handlers

BOOL CTelecommandOptionsHistoryPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	if (EnumArchivalFiles() && EnumRetrievalFiles())
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME_USE)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME_BROWSE)->EnableWindow((m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME_USE)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME_BROWSE)->EnableWindow((m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_BROWSE)->EnableWindow((m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	}
	AdjustToPrivileges();
	return TRUE;
}

void CTelecommandOptionsHistoryPage::OnHistoryFile()
{
	CHistoryStoreFile  *pFile;

	for (; (pFile = m_pArchivalFiles[0].GetAt(0)); )
	{
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME_USE)) ? (pFile->GetOptions() | HISTORYSTORE_OPTION_USE) : (pFile->GetOptions() & ~HISTORYSTORE_OPTION_USE));
		break;
	}
	if (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME_USE))
	{
		SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryPage::OnBackupFile()
{
	CHistoryStoreFile  *pFile;

	for (; (pFile = (m_pArchivalFiles[0].GetSize() > 1) ? m_pArchivalFiles[0].GetAt((INT)m_pArchivalFiles[0].GetUpperBound()) : (CHistoryStoreFile *)NULL); )
	{
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME_USE)) ? (pFile->GetOptions() | HISTORYSTORE_OPTION_USE) : (pFile->GetOptions() & ~HISTORYSTORE_OPTION_USE));
		break;
	}
	if (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME_USE))
	{
		SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryPage::OnBrowseHistoryFile()
{
	CHistoryStoreFile  *pFile;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME, STRING(IDS_FILEBROWSEDIALOG_TCHISTORYFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCHISTORYFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		if ((pFile = (m_pArchivalFiles[0].GetSize() > 0) ? m_pArchivalFiles[0].GetAt(0) : new CHistoryStoreFile))
		{
			if (!m_pArchivalFiles[0].GetSize())
			{
				m_pArchivalFiles[0].InsertAt(0, pFile, 1);
				InitializeFile(pFile);
			}
			pFile->SetFileName(cFileBrowseDialog.GetPathName());
			pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME_USE)) ? (pFile->GetOptions() | HISTORYSTORE_OPTION_USE) : (pFile->GetOptions() & ~HISTORYSTORE_OPTION_USE));
		}
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEARCHIVEFILE, (GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0) ? IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEARCHIVEFILE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEFILE_STATIC)->EnableWindow(((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0 || GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0) && m_bUpdate) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEARCHIVEFILE)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0 && m_bUpdate) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_FILESETTINGS)->EnableWindow(((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0 || GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0) && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	}
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryPage::OnBrowseBackupFile()
{
	CHistoryStoreFile  *pFile;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME, STRING(IDS_FILEBROWSEDIALOG_TCHISTORYFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCHISTORYFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		if ((pFile = (!m_pArchivalFiles[0].GetSize()) ? new CHistoryStoreFile : (CHistoryStoreFile *)NULL))
		{
			m_pArchivalFiles[0].InsertAt(0, pFile, 1);
			InitializeFile(pFile);
		}
		if ((pFile = (m_pArchivalFiles[0].GetSize() > 1) ? m_pArchivalFiles[0].GetAt((INT)m_pArchivalFiles[0].GetUpperBound()) : new CHistoryStoreFile))
		{
			if (m_pArchivalFiles[0].GetSize() <= 1)
			{
				m_pArchivalFiles[0].InsertAt(m_pArchivalFiles[0].GetSize(), pFile, 1);
				InitializeFile(pFile);
			}
			pFile->SetFileName(cFileBrowseDialog.GetPathName());
			pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME_USE)) ? (pFile->GetOptions() | HISTORYSTORE_OPTION_USE) : (pFile->GetOptions() & ~HISTORYSTORE_OPTION_USE));
		}
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEBACKUPFILE, (GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0) ? IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEBACKUPFILE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEFILE_STATIC)->EnableWindow(((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0 || GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0) && m_bUpdate) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEBACKUPFILE)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0 && m_bUpdate) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_FILESETTINGS)->EnableWindow(((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0 || GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0) && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	}
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryPage::OnDeleteHistoryFile()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryPage::OnDeleteBackupFile()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryPage::OnFileSettings()
{
	CHistoryStoreFile  *pFile;
	CTelecommandOptionsHistoryArchivalSettingsDialog  cHistoryArchivalSettingsDialog(this);

	if (cHistoryArchivalSettingsDialog.DoModal(m_pArchivalFiles[0]) == IDOK)
	{
		for (; (pFile = m_pArchivalFiles[0].GetAt(0)) != (CHistoryStoreFile *)NULL; )
		{
			CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME_USE, (pFile->GetOptions() & HISTORYSTORE_OPTION_USE) ? TRUE : FALSE);
			break;
		}
		for (; (pFile = (m_pArchivalFiles[0].GetSize() > 1) ? m_pArchivalFiles[0].GetAt((INT)m_pArchivalFiles[0].GetUpperBound()) : (CHistoryStoreFile *)NULL); )
		{
			CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME_USE, (pFile->GetOptions() & HISTORYSTORE_OPTION_USE) ? TRUE : FALSE);
			break;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryPage::OnAddRetrievalFile()
{
	INT  nIndex;
	CString  szFileName;
	CHistoryStoreFile  *pFile;
	CHourglassCursor  cCursor;

	if ((pFile = new CHistoryStoreFile))
	{
		for (GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES)->GetWindowText(szFileName), pFile->SetFileName(szFileName); (nIndex = m_pRetrievalFiles[0].Add(pFile)) >= 0; )
		{
			if (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pFile->GetFileName()) >= 0)
			{
				SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pFile->GetFileName()));
				GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_ADD)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_REMOVE)->EnableWindow((m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
				GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_REMOVEALL)->EnableWindow((m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
				break;
			}
			m_pRetrievalFiles[0].RemoveAt(nIndex);
			nIndex = -1;
			break;
		}
		for (ShowDataSourceInfo(); nIndex < 0; )
		{
			delete pFile;
			break;
		}
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryPage::OnRemoveRetrievalFile()
{
	INT  nIndex;
	CString  szFileName;
	CHistoryStoreFile  *pFile;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES)->GetWindowText(szFileName); (pFile = m_pRetrievalFiles[0].GetAt((nIndex = m_pRetrievalFiles[0].Find(szFileName)))); )
	{
		if (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName)) >= 0)
		{
			SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_SETCURSEL);
			GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_ADD)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_GETCURSEL) != CB_ERR  &&  m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
			GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_GETCOUNT) > 0 && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
			m_szDefaultRetrievalFileName[0] = (m_szDefaultRetrievalFileName[0].CompareNoCase(szFileName)) ? m_szDefaultRetrievalFileName[0] : EMPTYSTRING;
			m_pRetrievalFiles[0].RemoveAt(nIndex);
			delete pFile;
		}
		ShowDataSourceInfo();
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryPage::OnRemoveAllRetrievalFiles()
{
	CHourglassCursor  cCursor;

	if (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_RESETCONTENT) >= 0)
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE_STATIC)->ShowWindow(SW_HIDE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_REMOVEALL)->EnableWindow(FALSE);
		m_szDefaultRetrievalFileName[0].Empty();
		m_pRetrievalFiles[0].RemoveAll();
		ShowDataSourceInfo();
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryPage::OnBrowseRetrievalFile()
{
	CString  szFileName;
	CHistoryStoreFile  cFile;
	CFileBrowseDialog  cFileBrowseDialog(this, (GetTCService()->GetDefaultTCHistoryFile(HISTORYFILE_TYPE_RETRIEVE, cFile)) ? cFile.GetFileName() : (LPCTSTR)NULL, STRING(IDS_FILEBROWSEDIALOG_TCHISTORYFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCHISTORYFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES)->SetWindowText((szFileName = cFileBrowseDialog.GetPathName()));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->SetWindowText((!szFileName.IsEmpty()) ? GetFreeRetrieveDiskSpace(szFileName) : EMPTYSTRING);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->ShowWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE_STATIC)->ShowWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE_STATIC)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) < 0 && !szFileName.IsEmpty() && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) >= 0 && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_GETCOUNT) > 0 && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_INSPECT)->EnableWindow((!szFileName.IsEmpty()) ? TRUE : FALSE);
		ShowDataSourceInfo(szFileName);
	}
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES)->SetFocus();
}

void CTelecommandOptionsHistoryPage::OnInspectRetrievalFile()
{
	CString  szFileName;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES)->GetWindowText(szFileName);
	ShowDataSourceInfo((szFileName.IsEmpty()) ? Combobox_GetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES), (INT)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_GETCURSEL)) : szFileName);
}

void CTelecommandOptionsHistoryPage::OnDefaultRetrievalFile()
{
	CString  szFileName;
	CHistoryStoreFile  *pFile;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES)->GetWindowText(szFileName);
	m_szDefaultRetrievalFileName[0] = ((pFile = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_DEFAULT)) ? m_pRetrievalFiles[0].GetAt(m_pRetrievalFiles[0].Find(szFileName)) : (CHistoryStoreFile *)NULL)) ? pFile->GetFileName() : EMPTYSTRING;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryPage::OnEditchangeHistoryFile()
{
	CString  szFileName;
	CHistoryStoreFile  *pFile;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowText(szFileName);
	if ((pFile = (m_pArchivalFiles[0].GetSize() > 0) ? m_pArchivalFiles[0].GetAt(0) : new CHistoryStoreFile))
	{
		if (!m_pArchivalFiles[0].GetSize())
		{
			m_pArchivalFiles[0].InsertAt(0, pFile, 1);
			InitializeFile(pFile);
		}
		for (; szFileName.IsEmpty(); )
		{
			InitializeFile(pFile);
			break;
		}
		pFile->SetFileName(szFileName);
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME_USE)) ? (pFile->GetOptions() | HISTORYSTORE_OPTION_USE) : (pFile->GetOptions() & ~HISTORYSTORE_OPTION_USE));
	}
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEARCHIVEFILE, (GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0) ? IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEARCHIVEFILE) : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEFILE_STATIC)->EnableWindow(((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0 || GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0) && m_bUpdate) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEARCHIVEFILE)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0 && m_bUpdate) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_FILESETTINGS)->EnableWindow(((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0 || GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0) && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryPage::OnEditchangeBackupFile()
{
	CString  szFileName;
	CHistoryStoreFile  *pFile;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowText(szFileName);
	if ((pFile = (!m_pArchivalFiles[0].GetSize()) ? new CHistoryStoreFile : (CHistoryStoreFile *)NULL))
	{
		m_pArchivalFiles[0].InsertAt(0, pFile, 1);
		InitializeFile(pFile);
	}
	if ((pFile = (m_pArchivalFiles[0].GetSize() > 1) ? m_pArchivalFiles[0].GetAt((INT)m_pArchivalFiles[0].GetUpperBound()) : new CHistoryStoreFile))
	{
		if (m_pArchivalFiles[0].GetSize() <= 1)
		{
			m_pArchivalFiles[0].InsertAt(m_pArchivalFiles[0].GetSize(), pFile, 1);
			InitializeFile(pFile);
		}
		for (; szFileName.IsEmpty(); )
		{
			InitializeFile(pFile);
			break;
		}
		pFile->SetFileName(szFileName);
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME_USE)) ? (pFile->GetOptions() | HISTORYSTORE_OPTION_USE) : (pFile->GetOptions() & ~HISTORYSTORE_OPTION_USE));
	}
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEBACKUPFILE, (GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0) ? IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEBACKUPFILE) : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEFILE_STATIC)->EnableWindow(((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0 || GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0) && m_bUpdate) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_DELETEBACKUPFILE)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0 && m_bUpdate) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_FILESETTINGS)->EnableWindow(((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_ARCHIVEFILENAME)->GetWindowTextLength() > 0 || GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_BACKUPFILENAME)->GetWindowTextLength() > 0) && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryPage::OnEditchangeRetrievalFile()
{
	CString  szFileName;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES)->GetWindowText(szFileName);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_INSPECT)->EnableWindow((!szFileName.IsEmpty()) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) < 0 && !szFileName.IsEmpty() && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFileName) >= 0 && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES, CB_GETCOUNT) > 0 && m_bUpdate) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryPage::OnUpdateStorageMediaFreeSpace()
{
	CString  szFileName;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FILES)->GetWindowText(szFileName);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->SetWindowText((!szFileName.IsEmpty()) ? GetFreeRetrieveDiskSpace(szFileName) : EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->ShowWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE_STATIC)->ShowWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE_STATIC)->EnableWindow((GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYPAGE_RETRIEVALS_FREESPACE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsLoggingPage property page

IMPLEMENT_DYNCREATE(CTelecommandOptionsLoggingPage, CLocalePropertyPage)

CTelecommandOptionsLoggingPage::CTelecommandOptionsLoggingPage() : CLocalePropertyPage(CTelecommandOptionsLoggingPage::IDD)
{
	//{{AFX_DATA_INIT(CTelecommandOptionsLoggingPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelecommandOptionsLoggingPage::SetLoggingOptions(UINT nArchivalPolicy, LPCTSTR pszArchivalFileName, DWORDLONG dwArchivalRetention, CONST CTimeSpan &tArchivalRetention, LPCTSTR pszRetrievalFileName, UINT nRetrievalReloadCount, BOOL bShowAsEvent, BOOL bBackup)
{
	for (m_nArchivalPolicy[0] = nArchivalPolicy & ~LOGFILE_POLICY_RESET, m_szArchivalFileName[0] = pszArchivalFileName, m_dwArchivalRetention[0] = dwArchivalRetention, m_tArchivalRetention[0] = tArchivalRetention, m_szRetrievalFileName[0] = pszRetrievalFileName, m_nRetrievalReloadCount[0] = nRetrievalReloadCount, m_bShowAsEvent[0] = bShowAsEvent; bBackup; )
	{
		m_szArchivalFileName[1] = m_szArchivalFileName[0];
		m_szRetrievalFileName[1] = m_szRetrievalFileName[0];
		m_nRetrievalReloadCount[1] = m_nRetrievalReloadCount[0];
		m_dwArchivalRetention[1] = m_dwArchivalRetention[0];
		m_tArchivalRetention[1] = m_tArchivalRetention[0];
		m_nArchivalPolicy[1] = m_nArchivalPolicy[0];
		m_bShowAsEvent[1] = m_bShowAsEvent[0];
		break;
	}
}

BOOL CTelecommandOptionsLoggingPage::GetLoggingOptions(UINT &nArchivalPolicy, CString &szArchivalFileName, DWORDLONG &dwArchivalRetention, CTimeSpan &tArchivalRetention, CString &szRetrievalFileName, UINT &nRetrievalReloadCount, BOOL &bShowAsEvent) CONST
{
	szArchivalFileName = m_szArchivalFileName[0];
	szRetrievalFileName = m_szRetrievalFileName[0];
	nRetrievalReloadCount = m_nRetrievalReloadCount[0];
	dwArchivalRetention = m_dwArchivalRetention[0];
	tArchivalRetention = m_tArchivalRetention[0];
	nArchivalPolicy = m_nArchivalPolicy[0];
	bShowAsEvent = m_bShowAsEvent[0];
	return IsModified();
}

CTelecommandOptionsDialog *CTelecommandOptionsLoggingPage::GetParent() CONST
{
	return((CTelecommandOptionsDialog *)CLocalePropertyPage::GetParent());
}

BOOL CTelecommandOptionsLoggingPage::ShowLoggingDetails()
{
	for (Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD_COUNT), TELECOMMANDOPTIONSLOGGINGPAGE_MINIMUMRELOADCOUNT, TELECOMMANDOPTIONSLOGGINGPAGE_MAXIMUMRELOADCOUNT), Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPLIMIT), TELECOMMANDOPTIONSLOGGINGPAGE_MINIMUMRETRIEVALSTOPCOUNT, TELECOMMANDOPTIONSLOGGINGPAGE_MAXIMUMRETRIEVALSTOPCOUNT), CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_REALTIME, TRUE), CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL, FALSE), CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_SHOWASEVENT, m_bShowAsEvent[0]); m_nRetrievalReloadCount[0] > 0; )
	{
		Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD_COUNT), m_nRetrievalReloadCount[0]);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD, TRUE);
		break;
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD_COUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD));
	SetTimer(TELECOMMANDOPTIONSLOGGINGPAGE_LOGUPDATE_TIMERID, TELECOMMANDOPTIONSLOGGINGPAGE_LOGUPDATE_TIMEOUT, NULL);
	RetrieveLogEntries();
	return TRUE;
}

VOID CTelecommandOptionsLoggingPage::ShowLogEntries(CONST CTCLogEntries &pEntries)
{
	INT  nEntry;
	INT  nEntries;
	CTCLogEntry  *pEntry;

	for (nEntry = 0, nEntries = (INT)pEntries.GetSize(); nEntry < nEntries; nEntry++)
	{
		if ((pEntry = pEntries.GetAt(nEntry)))
		{
			ShowLogEntry(pEntry, nEntry);
			continue;
		}
	}
	while (nEntries < SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT))
	{
		Listview_DeleteText(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_LIST), nEntries);
		continue;
	}
	Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_LIST), 0);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTelecommandOptionsLoggingPage::ShowLogEntry(CONST CTCLogEntry *pEntry, INT nIndex)
{
	INT  nColumn;
	INT  nColumns;
	CString  szEntry;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_NAME); )
		{
			szEntry = pEntry->GetName();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_COMPUTER); )
		{
			szEntry = pEntry->GetComputerName();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_DESCRIPTION); )
		{
			szEntry = pEntry->GetDescription();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_ACTIVITY); )
		{
			szEntry = pEntry->GetActivity();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_TIME); )
		{
			szEntry = pEntry->GetTime().FormatGmt();
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_USER); )
		{
			szEntry = pEntry->GetUser();
			break;
		}
		if ((nIndex >= SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) || nIndex < 0) && !nColumn)
		{
			Listview_InsertText(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_LIST), (nIndex < 0) ? (INT)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) : nIndex, szEntry);
			continue;
		}
		Listview_SetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_LIST), (nIndex < 0) ? (INT)(SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) - 1) : nIndex, nColumn, szEntry);
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTelecommandOptionsLoggingPage::RetrieveLogEntries()
{
	CTCLogEntries  pEntries;

	if (RetrieveLogEntries(pEntries))
	{
		ShowLogEntries(pEntries);
		return TRUE;
	}
	return FALSE;
}
BOOL CTelecommandOptionsLoggingPage::RetrieveLogEntries(CTCLogEntries &pEntries)
{
	INT  nCount;
	INT  nEntry;
	INT  nEntries;
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTimeKey  tLogTime;
	CByteArray  nLogData;
	CTCLogEntry  *pEntry;

	for (pEntries.RemoveAll(); IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_REALTIME); )
	{
		if ((nCount = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD)) ? (INT)Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD_COUNT)) : 0) > 0)
		{
			if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
			{
				if (m_cRetrievalFile.SeekFromEnd(nCount))
				{
					do
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData))
						{
							if ((pEntry = new CTCLogEntry) != (CTCLogEntry *)NULL)
							{
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
						break;
					} while (TRUE);
					for (nEntry = 0, nEntries = (INT)(pEntries.GetSize() - nCount); nEntry < nEntries; nEntry++)
					{
						if ((pEntry = pEntries.GetAt(nEntry)))
						{
							pEntries.RemoveAt(nEntry);
							delete pEntry;
							nEntries--;
							nEntry--;
						}
					}
					m_cRetrievalFile.Close();
					return TRUE;
				}
				if (m_cRetrievalFile.IsEmpty())
				{
					m_cRetrievalFile.Close();
					return TRUE;
				}
				m_cRetrievalFile.Close();
			}
			return FALSE;
		}
		return TRUE;
	}
	if (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL))
	{
		if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
		{
			for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPTIME)), nCount = (INT)Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)); m_cRetrievalFile.SeekTo(tStartTime); )
			{
				do
				{
					if (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATTIME))
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData) && tLogTime <= tStopTime)
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (tLogTime < tStartTime)
								{
									delete pEntry;
									continue;
								}
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
						break;
					}
					if (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT))
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData) && nCount > pEntries.GetSize())
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (tLogTime < tStartTime)
								{
									delete pEntry;
									continue;
								}
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
						break;
					}
					if (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_NOLIMIT))
					{
						if (m_cRetrievalFile.Read(tLogTime, nLogData))
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (tLogTime < tStartTime)
								{
									delete pEntry;
									continue;
								}
								if (pEntry->Unmap(nLogData) && pEntries.Add(pEntry) >= 0) continue;
								delete pEntry;
							}
						}
					}
					break;
				} while (TRUE);
				m_cRetrievalFile.Close();
				return TRUE;
			}
			if (m_cRetrievalFile.IsEmpty())
			{
				m_cRetrievalFile.Close();
				return TRUE;
			}
			m_cRetrievalFile.Close();
		}
	}
	return FALSE;
}

VOID CTelecommandOptionsLoggingPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_REALTIME, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE)));
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD_COUNT, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STARTTIME, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATTIME, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPTIME, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPLIMIT, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_NOLIMIT, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_SHOWASEVENT, bCheck);
}

BOOL CTelecommandOptionsLoggingPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? (m_nArchivalPolicy[0] != m_nArchivalPolicy[1] || m_szArchivalFileName[0].CompareNoCase(m_szArchivalFileName[1]) || m_dwArchivalRetention[0] != m_dwArchivalRetention[1] || m_tArchivalRetention[0] != m_tArchivalRetention[1] || m_szRetrievalFileName[0].CompareNoCase(m_szRetrievalFileName[1]) || m_nRetrievalReloadCount[0] != m_nRetrievalReloadCount[1] || m_bShowAsEvent[0] != m_bShowAsEvent[1]) : FALSE);
}

BOOL CTelecommandOptionsLoggingPage::Update()
{
	return((IsWindow(GetSafeHwnd())) ? RetrieveLogEntries() : TRUE);
}

void CTelecommandOptionsLoggingPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandOptionsLoggingPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelecommandOptionsLoggingPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelecommandOptionsLoggingPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelecommandOptionsLoggingPage)
	ON_WM_TIMER()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_REALTIME, OnRealtime)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL, OnHistorical)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD, OnReloadCount)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_SETTINGS, OnSettings)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATTIME, OnStopAtTime)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, OnStopAtLimit)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_NOLIMIT, OnStopAtEnd)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_RETRIEVE, OnRetrieve)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_SHOWASEVENT, OnShowAsEvent)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD_COUNT, OnSpinchangeReloadCount)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STARTTIME, OnSpinchangeStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPTIME, OnSpinchangeStopTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsLoggingPage message handlers

BOOL CTelecommandOptionsLoggingPage::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_COMPUTER));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_ACTIVITY));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_TIME));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_USER));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_LIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_NAME) || m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_COMPUTER)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONS_LOGGINGPAGE_TITLEITEM_ACTIVITY)) ? (rColumns.Width() / 3) : (rColumns.Width() / 5))));
		continue;
	}
	if (ShowLoggingDetails())
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_SETTINGS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_MODE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_REALTIME)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_SHOWASEVENT)->EnableWindow();
	}
	AdjustToPrivileges();
	return TRUE;
}

void CTelecommandOptionsLoggingPage::OnRealtime()
{
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_REALTIME, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_NOLIMIT, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STARTTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_NOLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD));
}

void CTelecommandOptionsLoggingPage::OnHistorical()
{
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_REALTIME, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_NOLIMIT, TRUE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STARTTIME), CTimeKey(CTime::GetCurrentTime().GetTime() - SECONDSPERHOUR));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD_COUNT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STARTTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATTIME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_NOLIMIT)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow();
}

void CTelecommandOptionsLoggingPage::OnReloadCount()
{
	m_nRetrievalReloadCount[0] = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD)) ? TELECOMMANDOPTIONSLOGGINGPAGE_DEFAULTRELOADCOUNT : 0;
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD_COUNT), TELECOMMANDOPTIONSLOGGINGPAGE_DEFAULTRELOADCOUNT);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD_COUNT_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD_COUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingPage::OnStopAtTime()
{
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATTIME, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_NOLIMIT, FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPTIME), CTimeKey(CTime::GetCurrentTime().GetTime()));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPTIME)->SetFocus();
}

void CTelecommandOptionsLoggingPage::OnStopAtLimit()
{
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_NOLIMIT, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPLIMIT), TELECOMMANDOPTIONSLOGGINGPAGE_DEFAULTRETRIEVALSTOPCOUNT);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->SetFocus();
}

void CTelecommandOptionsLoggingPage::OnStopAtEnd()
{
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATTIME, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPATLIMIT, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_NOLIMIT, TRUE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPLIMIT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPLIMIT_STATIC)->EnableWindow(FALSE);
}

void CTelecommandOptionsLoggingPage::OnSettings()
{
	CTelecommandOptionsLoggingArchivalSettingsDialog  cLoggingArchivalSettingsDialog(this);

	if (cLoggingArchivalSettingsDialog.DoModal(m_szArchivalFileName[0], m_nArchivalPolicy[0], m_dwArchivalRetention[0], m_tArchivalRetention[0], m_szRetrievalFileName[0]) == IDOK && (m_nArchivalPolicy[0] & LOGFILE_POLICY_RESET))
	{
		if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
		{
			m_cRetrievalFile.Reset();
			m_cRetrievalFile.Close();
			RetrieveLogEntries();
		}
		m_nArchivalPolicy[0] &= ~LOGFILE_POLICY_RESET;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingPage::OnRetrieve()
{
	CHourglassCursor  cCursor;

	RetrieveLogEntries();
}

void CTelecommandOptionsLoggingPage::OnShowAsEvent()
{
	m_bShowAsEvent[0] = IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_SHOWASEVENT);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingPage::OnSpinchangeReloadCount()
{
	m_nRetrievalReloadCount[0] = (UINT)Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_RELOAD_COUNT));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_RETRIEVE)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingPage::OnSpinchangeStartTime()
{
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPTIME)); tTime[0] > tTime[1]; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPTIME), tTime[0]);
		break;
	}
}

void CTelecommandOptionsLoggingPage::OnSpinchangeStopTime()
{
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STOPTIME)); tTime[0] > tTime[1]; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_HISTORICAL_STARTTIME), tTime[1]);
		break;
	}
}

void CTelecommandOptionsLoggingPage::OnTimer(UINT_PTR nEventID)
{
	CByteArray  nLogData;
	CTCLogEntry  *pEntry;

	if (nEventID == TELECOMMANDOPTIONSLOGGINGPAGE_LOGUPDATE_TIMERID)
	{
		if (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGPAGE_REALTIME))
		{
			if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
			{
				if (m_cRetrievalFile.IsWatched() || m_cRetrievalFile.BeginWatch())
				{
					if (m_cRetrievalFile.Watch(nLogData))
					{
						do
						{
							if ((pEntry = new CTCLogEntry))
							{
								if (pEntry->Unmap(nLogData)) ShowLogEntry(pEntry);
								delete pEntry;
							}
						} while (m_cRetrievalFile.Watch(nLogData));
					}
				}
				m_cRetrievalFile.Close();
			}
		}
	}
	CLocalePropertyPage::OnTimer(nEventID);
}

void CTelecommandOptionsLoggingPage::OnDestroy()
{
	if (m_cRetrievalFile.Open(m_szRetrievalFileName[0], GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeRead))
	{
		m_cRetrievalFile.EndWatch();
		m_cRetrievalFile.Close();
	}
	KillTimer(TELECOMMANDOPTIONSLOGGINGPAGE_LOGUPDATE_TIMERID);
	CLocalePropertyPage::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsTabCtrl

IMPLEMENT_DYNCREATE(CTelecommandOptionsTabCtrl, CTabCtrl)

CTelecommandOptionsDialog *CTelecommandOptionsTabCtrl::GetParent() CONST
{
	return((CTelecommandOptionsDialog *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CTelecommandOptionsTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTelecommandOptionsTabCtrl)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//    DO NOT EDIT what you see in these blocks of generated code!
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsTabCtrl message handlers


/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsDialog

IMPLEMENT_DYNCREATE(CTelecommandOptionsDialog, CLocalePropertySheetDialog)

CTelecommandOptionsDialog::CTelecommandOptionsDialog(CWnd *pParentWnd) : CLocalePropertySheetDialog(STRING(IDS_TELECOMMANDOPTIONSDIALOG_TITLE), pParentWnd)
{
	AddPage(&m_pageConfiguration);
	AddPage(&m_pageCommandSources);
	AddPage(&m_pageInterlocks);
	AddPage(&m_pageQueue);
	AddPage(&m_pageHistory);
	AddPage(&m_pageLogging);
}

VOID CTelecommandOptionsDialog::SetCommandHandlerConfiguration(LPCTSTR pszPreferredCommandHandler, LPCTSTR pszBackupCommandHandler, BOOL bSelfCommandHandler, BOOL bAnyCommandHandler, BOOL bExclusiveCommandHandler, UINT nCommandHandlerOptions, UINT nCommandHandlerPort, UINT nCommandHandlerBufferSize, CONST CTimeSpan &tCommandHandlerTimeout, CONST CStringArray &szCommandHandlerClients, CONST CUIntArray &nCommandHandlerAccessCodes, CONST CTimeKeyArray &tCommandHandlerStartTimes, CONST CTimeKeyArray &tCommandHandlerStopTimes, CONST CTCProcessCommandSources &pCommandSources, UINT nTelecommandingMode, UINT nTelecommandingState, UINT nTelecommandingFlags, BOOL bTelecommandingInterlockMode, BOOL bTelecommandingReleaseWaitMode, BOOL bTelecommandingAutoRejectionMode, CONST CTimeSpan &tVerificationUncertaintyTimeWindow, CONST CTimeSpan &tMaximumExecutionTimePeriod, CONST CTimeSpan &tMaximumTimeCheckPeriod, CONST CTimeSpan &tDefaultReleaseTimeWindow, BOOL bCLCWToolWindow)
{
	m_pageConfiguration.SetCommandHandlerConfiguration(pszPreferredCommandHandler, pszBackupCommandHandler, bSelfCommandHandler, bAnyCommandHandler, bExclusiveCommandHandler, nCommandHandlerOptions, nCommandHandlerPort, nCommandHandlerBufferSize, tCommandHandlerTimeout, szCommandHandlerClients, nCommandHandlerAccessCodes, tCommandHandlerStartTimes, tCommandHandlerStopTimes, pCommandSources, nTelecommandingMode, nTelecommandingState, nTelecommandingFlags, bTelecommandingInterlockMode, bTelecommandingReleaseWaitMode, bTelecommandingAutoRejectionMode, tVerificationUncertaintyTimeWindow, tMaximumExecutionTimePeriod, tMaximumTimeCheckPeriod, tDefaultReleaseTimeWindow, bCLCWToolWindow, FALSE);
}

BOOL CTelecommandOptionsDialog::GetCommandHandlerConfiguration(CString &szPreferredCommandHandler, CString &szBackupCommandHandler, BOOL &bSelfCommandHandler, BOOL &bAnyCommandHandler, BOOL &bExclusiveCommandHandler, UINT &nCommandHandlerOptions, UINT &nCommandHandlerPort, UINT &nCommandHandlerBufferSize, CTimeSpan &tCommandHandlerTimeout, CStringArray &szCommandHandlerClients, CUIntArray &nCommandHandlerAccessCodes, CTimeKeyArray &tCommandHandlerStartTimes, CTimeKeyArray &tCommandHandlerStopTimes, CTCProcessCommandSources &pCommandSources, UINT &nTelecommandingMode, UINT &nTelecommandingState, UINT &nTelecommandingFlags, BOOL &bTelecommandingInterlockMode, BOOL &bTelecommandingReleaseWaitMode, BOOL &bTelecommandingAutoRejectionMode, CTimeSpan &tVerificationUncertaintyTimeWindow, CTimeSpan &tMaximumExecutionTimePeriod, CTimeSpan &tMaximumTimeCheckPeriod, CTimeSpan &tDefaultReleaseTimeWindow, BOOL &bCLCWToolWindow) CONST
{
	return m_pageConfiguration.GetCommandHandlerConfiguration(szPreferredCommandHandler, szBackupCommandHandler, bSelfCommandHandler, bAnyCommandHandler, bExclusiveCommandHandler, nCommandHandlerOptions, nCommandHandlerPort, nCommandHandlerBufferSize, tCommandHandlerTimeout, szCommandHandlerClients, nCommandHandlerAccessCodes, tCommandHandlerStartTimes, tCommandHandlerStopTimes, pCommandSources, nTelecommandingMode, nTelecommandingState, nTelecommandingFlags, bTelecommandingInterlockMode, bTelecommandingReleaseWaitMode, bTelecommandingAutoRejectionMode, tVerificationUncertaintyTimeWindow, tMaximumExecutionTimePeriod, tMaximumTimeCheckPeriod, tDefaultReleaseTimeWindow, bCLCWToolWindow);
}

VOID CTelecommandOptionsDialog::SetCommandHandlerSources(CONST CTCProcessCommandSources &pCommandSources)
{
	m_pageCommandSources.SetCommandHandlerSources(pCommandSources, FALSE);
}

BOOL CTelecommandOptionsDialog::GetCommandHandlerSources(CTCProcessCommandSources &pCommandSources) CONST
{
	return m_pageCommandSources.GetCommandHandlerSources(pCommandSources);
}

VOID CTelecommandOptionsDialog::UpdateCommandHandlerSources(LPCTSTR pszMasterManualModeOwner)
{
	if (m_pageConfiguration.GetSafeHwnd() == GetActivePage()->GetSafeHwnd())
	{
		m_pageCommandSources.SetMasterManualModeOwner(pszMasterManualModeOwner);
		return;
	}
	if (m_pageCommandSources.GetSafeHwnd() == GetActivePage()->GetSafeHwnd())
	{
		m_pageConfiguration.SetMasterManualModeOwner(pszMasterManualModeOwner);
		return;
	}
}

VOID CTelecommandOptionsDialog::SetCommandHandlerInterlocks(CONST CTCInterlocks &pInterlocks)
{
	m_pageInterlocks.SetCommandHandlerInterlocks(pInterlocks, FALSE);
}

BOOL CTelecommandOptionsDialog::GetCommandHandlerInterlocks(CTCInterlocks &pInterlocks) CONST
{
	return m_pageInterlocks.GetCommandHandlerInterlocks(pInterlocks);
}

VOID CTelecommandOptionsDialog::SetCommandHandlerTelecommands(CONST CTCItems &pItems)
{
	m_pageQueue.SetCommandHandlerTelecommands(pItems, FALSE);
}

BOOL CTelecommandOptionsDialog::GetCommandHandlerTelecommands(CTCItems &pItems) CONST
{
	return m_pageQueue.GetCommandHandlerTelecommands(pItems);
}

VOID CTelecommandOptionsDialog::SetHistoryConfiguration(CONST CHistoryStoreFiles &pArchivalFiles, CONST CHistoryStoreFiles &pRetrievalFiles, LPCTSTR pszDefaultRetrievalFileName)
{
	m_pageHistory.SetHistoryConfiguration(pArchivalFiles, pRetrievalFiles, pszDefaultRetrievalFileName, FALSE);
}

BOOL CTelecommandOptionsDialog::GetHistoryConfiguration(CHistoryStoreFiles &pArchivalFiles, CHistoryStoreFiles &pRetrievalFiles, CString &szDefaultRetrievalFileName) CONST
{
	return m_pageHistory.GetHistoryConfiguration(pArchivalFiles, pRetrievalFiles, szDefaultRetrievalFileName);
}

VOID CTelecommandOptionsDialog::SetLoggingOptions(UINT nArchivalPolicy, LPCTSTR pszArchivalFileName, DWORDLONG dwArchivalRetention, CONST CTimeSpan &tArchivalRetention, LPCTSTR pszRetrievalFileName, UINT nRetrievalReloadCount, BOOL bShowAsEvent)
{
	m_pageLogging.SetLoggingOptions(nArchivalPolicy, pszArchivalFileName, dwArchivalRetention, tArchivalRetention, pszRetrievalFileName, nRetrievalReloadCount, bShowAsEvent, FALSE);
}

BOOL CTelecommandOptionsDialog::GetLoggingOptions(UINT &nArchivalPolicy, CString &szArchivalFileName, DWORDLONG &dwArchivalRetention, CTimeSpan &tArchivalRetention, CString &szRetrievalFileName, UINT &nRetrievalReloadCount, BOOL &bShowAsEvent) CONST
{
	return m_pageLogging.GetLoggingOptions(nArchivalPolicy, szArchivalFileName, dwArchivalRetention, tArchivalRetention, szRetrievalFileName, nRetrievalReloadCount, bShowAsEvent);
}

INT CTelecommandOptionsDialog::EnumHistoryFilesToDelete(CStringArray &szFiles) CONST
{
	return m_pageHistory.EnumHistoryFilesToDelete(szFiles);
}

BOOL CTelecommandOptionsDialog::LogActivity(CONST CTCLogEntry *pEntry)
{
	BOOL  bShow;
	UINT  nPolicy;
	UINT  nReloadCount;
	CString  szFileName[2];
	DWORDLONG  dwRetention;
	CTimeSpan  tRetention;

	return((GetLoggingOptions(nPolicy, szFileName[0], dwRetention, tRetention, szFileName[1], nReloadCount, bShow) >= 0) ? LogActivity(pEntry, szFileName[0], nPolicy, bShow) : FALSE);
}
BOOL CTelecommandOptionsDialog::LogActivity(CONST CTCLogEntry *pEntry, LPCTSTR pszFileName, UINT nPolicy, BOOL bShow)
{
	CString  szLog[2];
	CString  szMessage;
	CLogFile  cLogFile;
	CTimeKey  tLogTime;
	CByteArray  nLogData;
	CEventObject  *pEvent;

	if (bShow)
	{
		for (szLog[0].Format(STRING(IDS_TELECOMMANDOPTIONS_LOGEVENTMESSAGE_FORMAT), (LPCTSTR)pEntry->GetDescription(), (LPCTSTR)pEntry->GetActivity(), (LPCTSTR)pEntry->GetComputerName()), szLog[1].Format(STRING(IDS_TELECOMMANDOPTIONS_LOGSHORTEVENTMESSAGE_FORMAT), (pEntry->GetActivity().IsEmpty()) ? (LPCTSTR)pEntry->GetDescription() : (LPCTSTR)pEntry->GetActivity(), (LPCTSTR)pEntry->GetComputerName()), szMessage = (!pEntry->GetDescription().IsEmpty() && !pEntry->GetActivity().IsEmpty()) ? szLog[0] : szLog[1]; (pEvent = new CEventObject); )
		{
			pEvent->SetCategory(EVENT_CATEGORY_USER);
			pEvent->SetType(STRING(IDS_EVENTTYPE_INFORMATIONAL));
			pEvent->SetSubtype(pEntry->GetName());
			pEvent->SetMessage(szMessage);
			pEvent->SetComments(EMPTYSTRING);
			pEvent->SetUser(pEntry->GetUser());
			pEvent->SetAuditTime(pEntry->GetTime());
			pEvent->SetAuditColor(VGA_COLOR_BLACK);
			pEvent->Acknowledge();
			pEvent->Show(TRUE);
			ReportEvent(pEvent);
			break;
		}
	}
	if ((nPolicy & LOGFILE_POLICY_DISABLED) != LOGFILE_POLICY_DISABLED)
	{
		if (cLogFile.Open(pszFileName, GetAccountSpacecraftName(), STRING(IDS_LOGFILETYPE_TCLOG), CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
		{
			if (pEntry->Map(nLogData) && cLogFile.Write(tLogTime, nLogData))
			{
				cLogFile.Close();
				return m_pageLogging.Update();
			}
			cLogFile.Close();
		}
	}
	return FALSE;
}

BOOL CTelecommandOptionsDialog::LogDeleteHistoryFile(LPCTSTR pszFileName, BOOL bSuccess)
{
	CString  szLogEntry;
	CTimeTag  tLogEntry;
	CTCLogEntry  cLogEntry;

	for (szLogEntry.Format(STRING(IDS_TELECOMMANDOPTIONS_LOGOPERATION_HISTORYFILE), pszFileName); bSuccess; )
	{
		cLogEntry.SetName(STRING(IDS_TELECOMMANDOPTIONS_LOGOBJECT_ALLCOMMANDSOURCES));
		cLogEntry.SetDescription(STRING(IDS_TELECOMMANDOPTIONS_LOGDESCRIPTION_HISTORYARCHIVALFILECHANGE));
		cLogEntry.SetActivity(CString(STRING(IDS_TELECOMMANDOPTIONS_LOGACTIVITY_DELETING)) + SPACE + szLogEntry);
		cLogEntry.SetUser(GetAccountUserName());
		cLogEntry.SetTime(tLogEntry);
		return LogActivity(&cLogEntry);
	}
	return FALSE;
}

BOOL CTelecommandOptionsDialog::FilterCommandHandlerContents(CTCItems &pItems) CONST
{
	INT  nItem;
	INT  nItems;
	CTCItem  *pItem;

	for (nItem = 0, nItems = (INT)pItems.GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = pItems.GetAt(nItem)) && pItem->GetStatus() != TCITEM_STATUS_DISPATCHED)
		{
			pItems.RemoveAt(nItem);
			delete pItem;
			nItems--;
			nItem--;
		}
	}
	return((pItems.GetSize() >= 0) ? TRUE : FALSE);
}

BEGIN_MESSAGE_MAP(CTelecommandOptionsDialog, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CTelecommandOptionsDialog)
	ON_WM_CREATE()
	ON_WM_TIMER()
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDHELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsDialog message handlers

int CTelecommandOptionsDialog::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	UINT  nLoggingPolicy;
	UINT  nLoggingReload;
	BOOL  bLoggingAsEvent;
	BOOL  bCommandHandler[3];
	UINT  nCommandHandlerPort;
	UINT  nCommandHandlerOptions;
	UINT  nCommandHandlerBufferSize;
	UINT  nCommandHandlerTelecommandingMode;
	UINT  nCommandHandlerTelecommandingState;
	UINT  nCommandHandlerTelecommandingFlags;
	BOOL  bCommandHandlerTelecommandingInterlockMode;
	BOOL  bCommandHandlerTelecommandingReleaseWaitMode;
	BOOL  bCommandHandlerTelecommandingAutoRejectionMode;
	CTimeSpan  tCommandHandlerVerificationUncertaintyTimeWindow;
	CTimeSpan  tCommandHandlerMaximumTimeCheckPeriod;
	CTimeSpan  tCommandHandlerMaximumExecutionTimePeriod;
	CTimeSpan  tCommandHandlerDefaultReleaseTimeWindow;
	CTimeSpan  tCommandHandlerTimeout;
	CUIntArray  nCommandHandlerAccessCodes;
	CStringArray  szCommandHandlerClients;
	CTimeKeyArray  tCommandHandlerStartTimes;
	CTimeKeyArray  tCommandHandlerStopTimes;
	CTCProcessCommandSources  pCommandHandlerSources;
	CHistoryStoreFiles  pCommandHandlerHistoryFiles[2];
	CTCInterlocks  pCommandHandlerInterlocks;
	CTCItems  pCommandHandlerItems;
	DWORDLONG  dwLoggingRetention;
	CTimeSpan  tLoggingRetention;
	CString  szCommandHandler[2];
	CString  szLoggingFileName[2];
	CString  szDefaultHistoryFileName;
	CCLCWToolWnd  *pCLCWToolWnd;

	if (CLocalePropertySheetDialog::OnCreate(lpCreateStruct) != -1)
	{
		if (GetTCService()->GetCommandHandlerConfiguration(szCommandHandler[0], szCommandHandler[1], bCommandHandler[0], bCommandHandler[1], bCommandHandler[2], nCommandHandlerOptions, nCommandHandlerPort, nCommandHandlerBufferSize, tCommandHandlerTimeout, szCommandHandlerClients, nCommandHandlerAccessCodes, tCommandHandlerStartTimes, tCommandHandlerStopTimes) && GetTCService()->GetCommandHandlerConfiguration(pCommandHandlerSources, nCommandHandlerTelecommandingMode, nCommandHandlerTelecommandingState, nCommandHandlerTelecommandingFlags, bCommandHandlerTelecommandingInterlockMode, bCommandHandlerTelecommandingReleaseWaitMode, bCommandHandlerTelecommandingAutoRejectionMode, tCommandHandlerVerificationUncertaintyTimeWindow, tCommandHandlerMaximumExecutionTimePeriod, tCommandHandlerMaximumTimeCheckPeriod, tCommandHandlerDefaultReleaseTimeWindow, pCommandHandlerItems, pCommandHandlerInterlocks, pCommandHandlerHistoryFiles[0], pCommandHandlerHistoryFiles[1], szDefaultHistoryFileName, GetSafeHwnd(), TELECOMMANDOPTIONS_UPDATEINTERVAL_TIMERID, (m_bUpdate = CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE))) && GetTCService()->GetLoggingOptions(nLoggingPolicy, szLoggingFileName[0], dwLoggingRetention, tLoggingRetention, szLoggingFileName[1], nLoggingReload, bLoggingAsEvent) && FilterCommandHandlerContents(pCommandHandlerItems))
		{
			m_pageConfiguration.SetCommandHandlerConfiguration(szCommandHandler[0], szCommandHandler[1], bCommandHandler[0], bCommandHandler[1], bCommandHandler[2], nCommandHandlerOptions, nCommandHandlerPort, nCommandHandlerBufferSize, tCommandHandlerTimeout, szCommandHandlerClients, nCommandHandlerAccessCodes, tCommandHandlerStartTimes, tCommandHandlerStopTimes, pCommandHandlerSources, nCommandHandlerTelecommandingMode, nCommandHandlerTelecommandingState, nCommandHandlerTelecommandingFlags, bCommandHandlerTelecommandingInterlockMode, bCommandHandlerTelecommandingReleaseWaitMode, bCommandHandlerTelecommandingAutoRejectionMode, tCommandHandlerVerificationUncertaintyTimeWindow, tCommandHandlerMaximumExecutionTimePeriod, tCommandHandlerMaximumTimeCheckPeriod, tCommandHandlerDefaultReleaseTimeWindow, ((pCLCWToolWnd = GetMainWnd()->GetCLCWToolWnd()) && pCLCWToolWnd->IsWindowVisible()) ? TRUE : FALSE, m_bUpdate, TRUE);
			m_pageLogging.SetLoggingOptions(nLoggingPolicy, szLoggingFileName[0], dwLoggingRetention, tLoggingRetention, szLoggingFileName[1], nLoggingReload, bLoggingAsEvent, TRUE);
			m_pageHistory.SetHistoryConfiguration(pCommandHandlerHistoryFiles[0], pCommandHandlerHistoryFiles[1], szDefaultHistoryFileName, m_bUpdate, TRUE);
			m_pageCommandSources.SetCommandHandlerSources(pCommandHandlerSources, m_bUpdate, TRUE);
			m_pageInterlocks.SetCommandHandlerInterlocks(pCommandHandlerInterlocks, m_bUpdate);
			m_pageQueue.SetCommandHandlerTelecommands(pCommandHandlerItems, m_bUpdate);
			return 0;
		}
	}
	return -1;
}

BOOL CTelecommandOptionsDialog::OnInitDialog()
{
	CTabCtrl  *pTabCtrl;
	CHourglassCursor  cCursor;

	CLocalePropertySheetDialog::OnInitDialog();
	if ((pTabCtrl = GetTabControl()) && IsWindow(pTabCtrl->GetSafeHwnd()))
	{
		m_wndTabCtrl.SubclassWindow(pTabCtrl->GetSafeHwnd());
		m_wndTabCtrl.SetFocus();
		return FALSE;
	}
	return TRUE;
}

void CTelecommandOptionsDialog::OnTimer(UINT_PTR nEventID)
{
	CTCItems  pItems;
	CTCInterlocks  pInterlocks;
	CTCOnBoardBufferQueues  pQueues;

	if (nEventID == TELECOMMANDOPTIONS_UPDATEINTERVAL_TIMERID)
	{
		for (KillTimer(nEventID); IsWindowVisible(); )
		{
			if (GetTCService()->GetCommandHandlerContents(pItems, pInterlocks, pQueues) && FilterCommandHandlerContents(pItems))
			{
				m_pageInterlocks.Update(pInterlocks);
				m_pageQueue.Update(pItems);
			}
			break;
		}
	}
	CLocalePropertySheetDialog::OnTimer(nEventID);
}

void CTelecommandOptionsDialog::OnOK()
{
	INT  nFile;
	INT  nFiles;
	INT  nLogEntry;
	INT  nLogEntries;
	UINT  nLoggingPolicy;
	UINT  nLoggingReload;
	BOOL  bLoggingAsEvent;
	BOOL  bCLCWToolWindow;
	BOOL  bCommandHandler[3];
	BOOL  bCommandHandlerCheck;
	UINT  nCommandHandlerPort;
	UINT  nCommandHandlerOptions;
	UINT  nCommandHandlerBufferSize;
	UINT  nCommandHandlerTelecommandingMode;
	UINT  nCommandHandlerTelecommandingState;
	UINT  nCommandHandlerTelecommandingFlags;
	BOOL  bCommandHandlerTelecommandingInterlockMode;
	BOOL  bCommandHandlerTelecommandingReleaseWaitMode;
	BOOL  bCommandHandlerTelecommandingAutoRejectionMode;
	CTimeSpan  tCommandHandlerVerificationUncertaintyTimeWindow;
	CTimeSpan  tCommandHandlerMaximumTimeCheckPeriod;
	CTimeSpan  tCommandHandlerMaximumExecutionTimePeriod;
	CTimeSpan  tCommandHandlerDefaultReleaseTimeWindow;
	CTimeSpan  tCommandHandlerTimeout;
	CUIntArray  nCommandHandlerAccessCodes;
	CStringArray  szCommandHandlerClients;
	CTimeKeyArray  tCommandHandlerStartTimes;
	CTimeKeyArray  tCommandHandlerStopTimes;
	CTCProcessCommandSources  pCommandHandlerSources;
	CHistoryStoreFiles  pCommandHandlerHistoryFiles[2];
	CHistoryStoreFile  cHistoryFile;
	CTCLogEntries  pLogEntries;
	CStringArray  szHistoryFiles;
	DWORDLONG  dwLoggingRetention;
	CTimeSpan  tLoggingRetention;
	CString  szCommandHandler[2];
	CString  szLoggingFileName[2];
	CString  szDefaultHistoryFileName;
	CCLCWToolWnd  *pCLCWToolWnd;
	CHourglassCursor  cCursor;

	for (bCommandHandlerCheck = (GetCommandHandlerConfiguration(szCommandHandler[0], szCommandHandler[1], bCommandHandler[0], bCommandHandler[1], bCommandHandler[2], nCommandHandlerOptions, nCommandHandlerPort, nCommandHandlerBufferSize, tCommandHandlerTimeout, szCommandHandlerClients, nCommandHandlerAccessCodes, tCommandHandlerStartTimes, tCommandHandlerStopTimes, pCommandHandlerSources, nCommandHandlerTelecommandingMode, nCommandHandlerTelecommandingState, nCommandHandlerTelecommandingFlags, bCommandHandlerTelecommandingInterlockMode, bCommandHandlerTelecommandingReleaseWaitMode, bCommandHandlerTelecommandingAutoRejectionMode, tCommandHandlerVerificationUncertaintyTimeWindow, tCommandHandlerMaximumExecutionTimePeriod, tCommandHandlerMaximumTimeCheckPeriod, tCommandHandlerDefaultReleaseTimeWindow, bCLCWToolWindow) + GetCommandHandlerSources(pCommandHandlerSources) + GetHistoryConfiguration(pCommandHandlerHistoryFiles[0], pCommandHandlerHistoryFiles[1], szDefaultHistoryFileName) > 0) ? TRUE : FALSE; bCommandHandlerCheck; )
	{
		bCommandHandlerCheck &= GetTCService()->SetCommandHandlerConfiguration(szCommandHandler[0], szCommandHandler[1], bCommandHandler[0], bCommandHandler[1], bCommandHandler[2], nCommandHandlerOptions, nCommandHandlerPort, nCommandHandlerBufferSize, tCommandHandlerTimeout, szCommandHandlerClients, nCommandHandlerAccessCodes, tCommandHandlerStartTimes, tCommandHandlerStopTimes);
		break;
	}
	for (GetTCService()->SetCommandHandlerConfiguration(pCommandHandlerSources, nCommandHandlerTelecommandingMode, nCommandHandlerTelecommandingState, nCommandHandlerTelecommandingFlags, bCommandHandlerTelecommandingInterlockMode, bCommandHandlerTelecommandingReleaseWaitMode, bCommandHandlerTelecommandingAutoRejectionMode, tCommandHandlerVerificationUncertaintyTimeWindow, tCommandHandlerMaximumExecutionTimePeriod, tCommandHandlerMaximumTimeCheckPeriod, tCommandHandlerDefaultReleaseTimeWindow, pCommandHandlerHistoryFiles[0], pCommandHandlerHistoryFiles[1], szDefaultHistoryFileName, m_bUpdate && bCommandHandlerCheck); GetLoggingOptions(nLoggingPolicy, szLoggingFileName[0], dwLoggingRetention, tLoggingRetention, szLoggingFileName[1], nLoggingReload, bLoggingAsEvent); )
	{
		GetTCService()->SetLoggingOptions(nLoggingPolicy, szLoggingFileName[0], dwLoggingRetention, tLoggingRetention, szLoggingFileName[1], nLoggingReload, bLoggingAsEvent);
		break;
	}
	for (nLogEntry = 0, nLogEntries = m_pageConfiguration.CollectLogEntries(pLogEntries); nLogEntry < nLogEntries; nLogEntry++)
	{
		LogActivity(pLogEntries.GetAt(nLogEntry));
		continue;
	}
	for (nLogEntry = 0, nLogEntries = m_pageCommandSources.CollectLogEntries(pLogEntries); nLogEntry < nLogEntries; nLogEntry++)
	{
		LogActivity(pLogEntries.GetAt(nLogEntry));
		continue;
	}
	for (nLogEntry = 0, nLogEntries = m_pageHistory.CollectLogEntries(pLogEntries); nLogEntry < nLogEntries; nLogEntry++)
	{
		LogActivity(pLogEntries.GetAt(nLogEntry));
		continue;
	}
	for (nFile = 0, nFiles = EnumHistoryFilesToDelete(szHistoryFiles); nFile < nFiles; nFile++)
	{
		LogDeleteHistoryFile(szHistoryFiles.GetAt(nFile), cHistoryFile.Remove(szHistoryFiles.GetAt(nFile)));
		continue;
	}
	if ((pCLCWToolWnd = GetMainWnd()->GetCLCWToolWnd())) pCLCWToolWnd->ShowWindow((bCLCWToolWindow) ? SW_SHOW : SW_HIDE);
	CLocalePropertySheetDialog::OnOK();
}

void CTelecommandOptionsDialog::OnCancel()
{
	BOOL  bCLCWToolWindow;
	BOOL  bCommandHandler[3];
	BOOL  bCommandHandlerCheck;
	UINT  nCommandHandlerPort;
	UINT  nCommandHandlerOptions;
	UINT  nCommandHandlerBufferSize;
	UINT  nCommandHandlerTelecommandingMode;
	UINT  nCommandHandlerTelecommandingState;
	UINT  nCommandHandlerTelecommandingFlags;
	BOOL  bCommandHandlerTelecommandingInterlockMode;
	BOOL  bCommandHandlerTelecommandingReleaseWaitMode;
	BOOL  bCommandHandlerTelecommandingAutoRejectionMode;
	CTimeSpan  tCommandHandlerVerificationUncertaintyTimeWindow;
	CTimeSpan  tCommandHandlerMaximumTimeCheckPeriod;
	CTimeSpan  tCommandHandlerMaximumExecutionTimePeriod;
	CTimeSpan  tCommandHandlerDefaultReleaseTimeWindow;
	CTimeSpan  tCommandHandlerTimeout;
	CUIntArray  nCommandHandlerAccessCodes;
	CStringArray  szCommandHandlerClients;
	CTimeKeyArray  tCommandHandlerStartTimes;
	CTimeKeyArray  tCommandHandlerStopTimes;
	CTCProcessCommandSources  pCommandHandlerSources;
	CHistoryStoreFiles  pCommandHandlerHistoryFiles[2];
	CString  szDefaultHistoryFileName;
	CString  szCommandHandler[2];
	CHourglassCursor  cCursor;

	for (bCommandHandlerCheck = (GetCommandHandlerConfiguration(szCommandHandler[0], szCommandHandler[1], bCommandHandler[0], bCommandHandler[1], bCommandHandler[2], nCommandHandlerOptions, nCommandHandlerPort, nCommandHandlerBufferSize, tCommandHandlerTimeout, szCommandHandlerClients, nCommandHandlerAccessCodes, tCommandHandlerStartTimes, tCommandHandlerStopTimes, pCommandHandlerSources, nCommandHandlerTelecommandingMode, nCommandHandlerTelecommandingState, nCommandHandlerTelecommandingFlags, bCommandHandlerTelecommandingInterlockMode, bCommandHandlerTelecommandingReleaseWaitMode, bCommandHandlerTelecommandingAutoRejectionMode, tCommandHandlerVerificationUncertaintyTimeWindow, tCommandHandlerMaximumExecutionTimePeriod, tCommandHandlerMaximumTimeCheckPeriod, tCommandHandlerDefaultReleaseTimeWindow, bCLCWToolWindow) + GetCommandHandlerSources(pCommandHandlerSources) + GetHistoryConfiguration(pCommandHandlerHistoryFiles[0], pCommandHandlerHistoryFiles[1], szDefaultHistoryFileName) >= 0) ? TRUE : FALSE; bCommandHandlerCheck; )
	{
		bCommandHandlerCheck &= GetTCService()->SetCommandHandlerConfiguration(pCommandHandlerSources, nCommandHandlerTelecommandingMode, nCommandHandlerTelecommandingState, nCommandHandlerTelecommandingFlags, bCommandHandlerTelecommandingInterlockMode, bCommandHandlerTelecommandingReleaseWaitMode, bCommandHandlerTelecommandingAutoRejectionMode, tCommandHandlerVerificationUncertaintyTimeWindow, tCommandHandlerMaximumExecutionTimePeriod, tCommandHandlerMaximumTimeCheckPeriod, tCommandHandlerDefaultReleaseTimeWindow, pCommandHandlerHistoryFiles[0], pCommandHandlerHistoryFiles[1], szDefaultHistoryFileName, FALSE);
		break;
	}
	CLocalePropertySheetDialog::OnCancel();
}

BOOL CTelecommandOptionsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelecommandOptionsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsInterlocksDialog dialog

IMPLEMENT_DYNCREATE(CTelecommandOptionsInterlocksDialog, CLocaleDialog)

CTelecommandOptionsInterlocksDialog::CTelecommandOptionsInterlocksDialog(CWnd *pParentWnd) : CLocaleDialog(CTelecommandOptionsInterlocksDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelecommandOptionsInterlocksDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTelecommandOptionsInterlocksDialog::DoModal(CONST CStringArray &szComputers, CTCInterlocks &pInterlocks)
{
	CTCInterlock  cInterlock;

	return DoModal(szComputers, &cInterlock, pInterlocks);
}
INT CTelecommandOptionsInterlocksDialog::DoModal(CONST CStringArray &szComputers, CONST CTCInterlock *pInterlock, CTCInterlocks &pInterlocks)
{
	INT  nResult;

	for (m_szComputers.Copy(szComputers), m_cInterlock.Copy(pInterlock), m_pInterlocks[0].Copy(&pInterlocks), m_pInterlocks[1].Copy(&pInterlocks); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		pInterlocks.Copy(&m_pInterlocks[0]);
		break;
	}
	m_szComputers.RemoveAll();
	m_pInterlocks[0].RemoveAll();
	m_pInterlocks[1].RemoveAll();
	return nResult;
}

BOOL CTelecommandOptionsInterlocksDialog::EnumInterlocks()
{
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;

	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock))) SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pInterlock->GetName());
		continue;
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_REMOVEALL)->EnableWindow(CanRemoveAllInterlocks());
	return TRUE;
}

BOOL CTelecommandOptionsInterlocksDialog::EnumSubSystems()
{
	INT  nSubSystem;
	INT  nSubSystems;
	CStringArray  szSubSystems;

	for (nSubSystem = 0, nSubSystems = GetTCService()->EnumTCSubSystems(szSubSystems, FALSE); nSubSystem < nSubSystems; nSubSystem++)
	{
		SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSubSystems.GetAt(nSubSystem));
		continue;
	}
	return TRUE;
}

BOOL CTelecommandOptionsInterlocksDialog::EnumComputers()
{
	INT  nComputer;
	INT  nComputers;
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;
	CComputerToken  cComputerToken;

	for (nComputer = 0, nComputers = (INT)m_szComputers.GetSize(); nComputer < nComputers; nComputer++)
	{
		if (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szComputers.GetAt(nComputer)) < 0)
		{
			SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_szComputers.GetAt(nComputer));
			continue;
		}
	}
	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock)) && SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pInterlock->GetComputerName()) < 0)
		{
			SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pInterlock->GetComputerName());
			continue;
		}
	}
	if (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cComputerToken.GetComputerName()) < 0) SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)cComputerToken.GetComputerName());
	return((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTelecommandOptionsInterlocksDialog::ShowProperties()
{
	UINT  nScope;
	UINT  nStage;
	UINT  nSourceType;
	CTCInterlock  *pInterlock;

	if ((pInterlock = FindInterlock()))
	{
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_GLOBAL, ((nScope = TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope())) == TCINTERLOCK_SCOPE_GLOBAL) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_LOCAL, (nScope == TCINTERLOCK_SCOPE_LOCAL || nScope == TCINTERLOCK_SCOPE_LOCALNOWAIT) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, ((nScope == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM || nScope == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) && SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, (nScope == TCINTERLOCK_SCOPE_LOCALNOWAIT || (nScope == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT  &&  SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_GETCOUNT) > 0)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, (nScope == TCINTERLOCK_SCOPE_COMMANDS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_MANUALSTACK, ((nSourceType = pInterlock->GetSourceType()) == TCINTERLOCK_SOURCETYPE_MANUALSTACK) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_AUTOMATICSTACK, (nSourceType == TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_PROCEDURESMONITOR, (nSourceType == TCINTERLOCK_SOURCETYPE_PROCEDURESMONITOR) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_RECEPTION, ((nStage = pInterlock->GetStage()) == TCINTERLOCK_STAGE_RECEPTION) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, (nStage == TCINTERLOCK_STAGE_TRANSMISSION) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, (nStage == TCINTERLOCK_STAGE_ACCEPTANCE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_START, (nStage == TCINTERLOCK_STAGE_START) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_PROGRESS, (nStage == TCINTERLOCK_STAGE_PROGRESS) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_COMPLETION, (nStage == TCINTERLOCK_STAGE_COMPLETION) ? TRUE : FALSE);
		SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)((nScope == TCINTERLOCK_SCOPE_LOCALSUBSYSTEM || nScope == TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT) ? SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)TranslateIDToSubSystem(TCINTERLOCKAPIDFROMCODE(pInterlock->GetScope()))) : -1));
		SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pInterlock->GetComputerName()));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_LOCAL) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM));
		AdjustToPrivileges();
		return;
	}
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_GLOBAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_LOCAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_MANUALSTACK, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_AUTOMATICSTACK, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_PROCEDURESMONITOR, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow(FALSE);
	AdjustToPrivileges();
}
VOID CTelecommandOptionsInterlocksDialog::ShowProperties(CONST CTCInterlock *pInterlock)
{
	UINT  nSourceType;

	if (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CB_SETCURSEL, (WPARAM)m_pInterlocks[0].Find(pInterlock->GetComputerName(), pInterlock->GetSourceType(), pInterlock->GetName())) >= 0)
	{
		if (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pInterlock->GetComputerName())) < 0) SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pInterlock->GetComputerName()));
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_MANUALSTACK, ((nSourceType = pInterlock->GetSourceType()) == TCINTERLOCK_SOURCETYPE_MANUALSTACK) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_AUTOMATICSTACK, (nSourceType == TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_PROCEDURESMONITOR, (nSourceType == TCINTERLOCK_SOURCETYPE_PROCEDURESMONITOR) ? TRUE : FALSE);
	}
	ShowProperties();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_REMOVE)->EnableWindow(CanRemoveInterlock());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_REMOVEALL)->EnableWindow(CanRemoveAllInterlocks());
}

CTCInterlock *CTelecommandOptionsInterlocksDialog::FindInterlock(INT nIndex) CONST
{
	CString  szName;
	CString  szComputer;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER)->GetWindowText(szComputer);
	return m_pInterlocks[0].GetAt(m_pInterlocks[0].Find(szComputer, (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_MANUALSTACK)) ? TCINTERLOCK_SOURCETYPE_MANUALSTACK : ((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_AUTOMATICSTACK)) ? TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK : TCINTERLOCK_SOURCETYPE_PROCEDURESMONITOR), (nIndex >= 0) ? Combobox_GetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME), nIndex) : szName));
}

UINT CTelecommandOptionsInterlocksDialog::TranslateToSubSystemID(LPCTSTR pszSubSystem) CONST
{
	return GetTCService()->TranslateTCSubSystemToID(pszSubSystem);
}

CString CTelecommandOptionsInterlocksDialog::TranslateIDToSubSystem(UINT nSubSystemID) CONST
{
	return GetTCService()->TranslateIDToTCSubSystem(nSubSystemID);
}

BOOL CTelecommandOptionsInterlocksDialog::CanAddInterlock() CONST
{
	return((!FindInterlock() && Check(FALSE)) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
}

BOOL CTelecommandOptionsInterlocksDialog::CanRemoveInterlock() CONST
{
	CTCInterlock  *pInterlock;

	return(((pInterlock = FindInterlock()) && !pInterlock->IsAutomatic()) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
}

BOOL CTelecommandOptionsInterlocksDialog::CanRemoveAllInterlocks() CONST
{
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;

	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = FindInterlock(nInterlock)) && !pInterlock->IsAutomatic()) break;
		continue;
	}
	return((nInterlock < nInterlocks) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
}

VOID CTelecommandOptionsInterlocksDialog::AdjustToPrivileges()
{
	BOOL  bCheck[2];
	CTCInterlock  *pInterlock;

	for (bCheck[0] = bCheck[1] = CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE); (pInterlock = FindInterlock()); )
	{
		bCheck[0] = ((pInterlock->GetState() == TCINTERLOCK_STATE_NONE || pInterlock->GetState() == TCINTERLOCK_STATE_IDLE) && !pInterlock->IsAutomatic()) ? bCheck[0] : FALSE;
		bCheck[1] = FALSE;
		break;
	}
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE));
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_GLOBAL, bCheck[0]);
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_LOCAL, bCheck[0]);
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, bCheck[0]);
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, bCheck[0]);
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, bCheck[0]);
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, bCheck[0]);
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER, bCheck[1]);
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_MANUALSTACK, bCheck[1]);
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_AUTOMATICSTACK, bCheck[1]);
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_PROCEDURESMONITOR, bCheck[1]);
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_RECEPTION, bCheck[0]);
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, bCheck[0]);
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, bCheck[0]);
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_START, bCheck[0]);
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_PROGRESS, bCheck[0]);
	AccessControl(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_COMPLETION, bCheck[0]);
}

BOOL CTelecommandOptionsInterlocksDialog::IsModified() CONST
{
	return((!m_pInterlocks[0].Compare(&m_pInterlocks[1])) ? TRUE : FALSE);
}

BOOL CTelecommandOptionsInterlocksDialog::Check(BOOL bModified) CONST
{
	return(((GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME)->GetWindowTextLength() > 0 && (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_GLOBAL) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_LOCAL) || (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM) && GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->SendMessage(CB_GETCURSEL) >= 0) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS)) && (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_RECEPTION) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_TRANSMISSION) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_START) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_PROGRESS) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_COMPLETION))) || (!GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME)->GetWindowTextLength() && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_GLOBAL) && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_LOCAL) && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM) && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS) && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_RECEPTION) && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_TRANSMISSION) && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE) && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_START) && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_PROGRESS) && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_COMPLETION))) ? (!bModified || IsModified()) : FALSE);
}

void CTelecommandOptionsInterlocksDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandOptionsInterlocksDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelecommandOptionsInterlocksDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelecommandOptionsInterlocksDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_GLOBAL, OnScopeGlobal)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_LOCAL, OnScopeLocal)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, OnScopeSubSystem)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, OnScopeTeleommands)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, OnScopeNoWaitState)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_MANUALSTACK, OnTypeManualStack)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_AUTOMATICSTACK, OnTypeAutomaticStack)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_PROCEDURESMONITOR, OnTypeProceduresMonitor)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_RECEPTION, OnStageReception)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, OnStageTransmission)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, OnStageAcceptance)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_START, OnStageStart)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_PROGRESS, OnStageProgress)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_COMPLETION, OnStageCompletion)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_INTERLOCKS_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, OnEditchangeName)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, OnSelchangeName)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, OnSelchangeSubSystem)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsInterlocksDialog message handlers

BOOL CTelecommandOptionsInterlocksDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	if (EnumInterlocks() && EnumSubSystems() && EnumComputers())
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_GLOBAL)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_LOCAL)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_MANUALSTACK)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_AUTOMATICSTACK)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_PROCEDURESMONITOR)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_RECEPTION)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_TRANSMISSION)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_START)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_PROGRESS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_COMPLETION)->EnableWindow();
		ShowProperties(&m_cInterlock);
	}
	AdjustToPrivileges();
	return TRUE;
}

void CTelecommandOptionsInterlocksDialog::OnAdd()
{
	UINT  nScope;
	UINT  nStage;
	CString  szName;
	CString  szComputer;
	CString  szSubSystem;
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	for (; (pInterlock = new CTCInterlock); )
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME)->GetWindowText(szName);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER)->GetWindowText(szComputer);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->GetWindowText(szSubSystem);
		nScope = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_GLOBAL)) ? TCINTERLOCK_SCOPE_GLOBAL : TCINTERLOCK_SCOPE_NONE;
		nScope = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_LOCAL)) ? ((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)) ? TCINTERLOCK_SCOPE_LOCALNOWAIT : TCINTERLOCK_SCOPE_LOCAL) : nScope;
		nScope = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM)) ? ((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)) ? TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT : TCINTERLOCK_SCOPE_LOCALSUBSYSTEM) : nScope;
		nScope = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS)) ? TCINTERLOCK_SCOPE_COMMANDS : nScope;
		nStage = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_RECEPTION)) ? TCINTERLOCK_STAGE_RECEPTION : TCINTERLOCK_STAGE_NONE;
		nStage = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_TRANSMISSION)) ? TCINTERLOCK_STAGE_TRANSMISSION : nStage;
		nStage = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE)) ? TCINTERLOCK_STAGE_ACCEPTANCE : nStage;
		nStage = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_START)) ? TCINTERLOCK_STAGE_START : nStage;
		nStage = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_PROGRESS)) ? TCINTERLOCK_STAGE_PROGRESS : nStage;
		nStage = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_COMPLETION)) ? TCINTERLOCK_STAGE_COMPLETION : nStage;
		for (pInterlock->SetName(szName), pInterlock->SetComputerName(szComputer), pInterlock->SetSourceType((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_MANUALSTACK)) ? TCINTERLOCK_SOURCETYPE_MANUALSTACK : ((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_AUTOMATICSTACK)) ? TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK : TCINTERLOCK_SOURCETYPE_PROCEDURESMONITOR)), pInterlock->SetScope((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM)) ? MAKETCINTERLOCKSCOPECODE(nScope, TranslateToSubSystemID(szSubSystem)) : MAKETCINTERLOCKSCOPECODE(nScope, 0)), pInterlock->SetStage(nStage); m_pInterlocks[0].Add(pInterlock) >= 0; )
		{
			SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szName));
			break;
		}
		if (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0)
		{
			SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
			GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_REMOVE)->EnableWindow(CanRemoveInterlock());
			GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_REMOVEALL)->EnableWindow(CanRemoveAllInterlocks());
			GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME)->SetFocus();
			break;
		}
		delete pInterlock;
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnRemove()
{
	INT  nIndex;
	CString  szName;
	CString  szComputer;
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME)->GetWindowText(szName), GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMPUTER)->GetWindowText(szComputer); (pInterlock = m_pInterlocks[0].GetAt((nIndex = m_pInterlocks[0].Find(szComputer, (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_MANUALSTACK)) ? TCINTERLOCK_SOURCETYPE_MANUALSTACK : ((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_AUTOMATICSTACK)) ? TCINTERLOCK_SOURCETYPE_AUTOMATICSTACK : TCINTERLOCK_SOURCETYPE_PROCEDURESMONITOR), szName)))); )
	{
		SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName));
		SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CB_SETCURSEL, (WPARAM)-1);
		m_pInterlocks[0].RemoveAt(nIndex);
		delete pInterlock;
		ShowProperties();
		break;
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_REMOVEALL)->EnableWindow(CanRemoveAllInterlocks());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnRemoveAll()
{
	INT  nInterlock;
	INT  nInterlocks;
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	for (nInterlock = 0, nInterlocks = (INT)m_pInterlocks[0].GetSize(); nInterlock < nInterlocks; nInterlock++)
	{
		if ((pInterlock = m_pInterlocks[0].GetAt(nInterlock)) && (pInterlock->GetState() == TCINTERLOCK_STATE_NONE || pInterlock->GetState() == TCINTERLOCK_STATE_IDLE))
		{
			SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pInterlock->GetName()));
			m_pInterlocks[0].RemoveAt(nInterlock);
			delete pInterlock;
			nInterlocks--;
			nInterlock--;
		}
	}
	if (!SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CB_GETCOUNT))
	{
		SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CB_SETCURSEL, (WPARAM)-1);
		ShowProperties();
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnScopeGlobal()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetScope(MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_GLOBAL, 0));
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_GLOBAL, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_LOCAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnScopeLocal()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetScope((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)) ? MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALNOWAIT, 0) : MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCAL, 0));
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_GLOBAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_LOCAL, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnScopeSubSystem()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetScope((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)) ? MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT, -1) : MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALSUBSYSTEM, -1));
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_GLOBAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_LOCAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnScopeTeleommands()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetScope(MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_COMMANDS, 0));
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_GLOBAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_LOCAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_TELECOMMANDS, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnScopeNoWaitState()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetScope((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_NOWAITSTATE)) ? ((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_LOCAL)) ? MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALNOWAIT, 0) : MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALSUBSYSTEMNOWAIT, -1)) : ((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_LOCAL)) ? MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCAL, 0) : MAKETCINTERLOCKSCOPECODE(TCINTERLOCK_SCOPE_LOCALSUBSYSTEM, -1)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnTypeManualStack()
{
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_MANUALSTACK, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_AUTOMATICSTACK, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_PROCEDURESMONITOR, FALSE);
}

void CTelecommandOptionsInterlocksDialog::OnTypeAutomaticStack()
{
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_MANUALSTACK, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_AUTOMATICSTACK, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_PROCEDURESMONITOR, FALSE);
}

void CTelecommandOptionsInterlocksDialog::OnTypeProceduresMonitor()
{
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_MANUALSTACK, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_AUTOMATICSTACK, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_COMMANDSOURCE_PROCEDURESMONITOR, TRUE);
}

void CTelecommandOptionsInterlocksDialog::OnStageReception()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_RECEPTION);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_RECEPTION, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnStageTransmission()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_TRANSMISSION);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnStageAcceptance()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_ACCEPTANCE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnStageStart()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_START);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_START, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnStageProgress()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_PROGRESS);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_PROGRESS, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_COMPLETION, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnStageCompletion()
{
	CTCInterlock  *pInterlock;
	CHourglassCursor  cCursor;

	if ((pInterlock = FindInterlock())) pInterlock->SetStage(TCINTERLOCK_STAGE_COMPLETION);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_RECEPTION, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_TRANSMISSION, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_START, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_PROGRESS, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_STAGE_COMPLETION, TRUE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnEditchangeName()
{
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	AdjustToPrivileges();
}

void CTelecommandOptionsInterlocksDialog::OnSelchangeName()
{
	CTCInterlock  *pInterlock;

	if ((pInterlock = m_pInterlocks[0].GetAt((INT)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_INTERLOCKS_NAME, CB_GETCURSEL)))))
	{
		ShowProperties(pInterlock);
		AdjustToPrivileges();
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_REMOVE)->EnableWindow(CanRemoveInterlock());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_REMOVEALL)->EnableWindow(CanRemoveAllInterlocks());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnSelchangeSubSystem()
{
	CString  szSubSystem;
	CTCInterlock  *pInterlock;

	if ((pInterlock = FindInterlock()))
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_PROPERTIES_SCOPE_SUBSYSTEM_NAME)->GetWindowText(szSubSystem);
		pInterlock->SetScope(MAKETCINTERLOCKSCOPECODE(TCINTERLOCKSCOPEFROMCODE(pInterlock->GetScope()), TranslateToSubSystemID(szSubSystem)));
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_INTERLOCKS_ADD)->EnableWindow(CanAddInterlock());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsInterlocksDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnOK();
}

BOOL CTelecommandOptionsInterlocksDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSINTERLOCKSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelecommandOptionsInterlocksDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSINTERLOCKSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsSubSystemsDialog dialog

IMPLEMENT_DYNCREATE(CTelecommandOptionsSubSystemsDialog, CLocaleDialog)

CTelecommandOptionsSubSystemsDialog::CTelecommandOptionsSubSystemsDialog(CWnd *pParentWnd) : CLocaleDialog(CTelecommandOptionsSubSystemsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelecommandOptionsSubSystemsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTelecommandOptionsSubSystemsDialog::DoModal(CTCProcessCommandSourceInfo *pCommandSourceInfo)
{
	INT  nResult;

	for (m_szComputer = pCommandSourceInfo->GetComputerName(), pCommandSourceInfo->GetSubSystemChecks(m_nSubSystemIDs[0], m_szSubSystemEvents[0][0], m_szSubSystemEvents[0][1], m_nSubSystemStatus[0]), m_nSubSystemIDs[1].Copy(m_nSubSystemIDs[0]), m_szSubSystemEvents[1][0].Copy(m_szSubSystemEvents[0][0]), m_szSubSystemEvents[1][1].Copy(m_szSubSystemEvents[0][1]), m_nSubSystemStatus[1].Copy(m_nSubSystemStatus[0]); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		pCommandSourceInfo->SetSubSystemChecks(m_nSubSystemIDs[0], m_szSubSystemEvents[0][0], m_szSubSystemEvents[0][1], m_nSubSystemStatus[0]);
		break;
	}
	return nResult;
}

BOOL CTelecommandOptionsSubSystemsDialog::EnumSubSystems()
{
	INT  nDigits;
	INT  nColumn;
	INT  nColumns;
	INT  nSubSystem;
	INT  nSubSystems;
	CString  szItem;
	CString  szEvent;
	CStringTools  cStringTools;

	for (nSubSystem = 0, nSubSystems = (INT)m_nSubSystemIDs[0].GetSize(), nDigits = 0; nSubSystem < nSubSystems; nSubSystem++)
	{
		nDigits = max(cStringTools.ConvertUIntToString(m_nSubSystemIDs[0].GetAt(nSubSystem), 16).GetLength(), nDigits);
		continue;
	}
	for (nSubSystem = 0; nSubSystem < nSubSystems; nSubSystem++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_TITLEITEM_NAME); )
			{
				szItem = GetTCService()->TranslateIDToTCSubSystem(m_nSubSystemIDs[0].GetAt(nSubSystem));
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_TITLEITEM_APID); )
			{
				szItem = cStringTools.ConvertUIntToPaddedString(m_nSubSystemIDs[0].GetAt(nSubSystem), max(nDigits, 3), 16);
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_TITLEITEM_SETTO); )
			{
				szItem = (LOBYTE(m_nSubSystemStatus[0].GetAt(nSubSystem))) ? STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_LIST_ENABLEDSTATUS) : STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_LIST_DISABLEDSTATUS);
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_TITLEITEM_STATUS); )
			{
				szEvent.Format(STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_LIST_DISABLINGEVENT), (LPCTSTR)m_szSubSystemEvents[0][1].GetAt(nSubSystem));
				szItem = (LOBYTE(m_nSubSystemStatus[0].GetAt(nSubSystem)) && HIBYTE(m_nSubSystemStatus[0].GetAt(nSubSystem))) ? STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_LIST_ENABLEDSTATUS) : EMPTYSTRING;
				szItem = (!LOBYTE(m_nSubSystemStatus[0].GetAt(nSubSystem)) || !HIBYTE(m_nSubSystemStatus[0].GetAt(nSubSystem))) ? ((LOBYTE(m_nSubSystemStatus[0].GetAt(nSubSystem)) && !m_szSubSystemEvents[0][1].GetAt(nSubSystem).IsEmpty()) ? (STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_LIST_DISABLEDSTATUS) + CString(SPACE) + szEvent) : STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_LIST_DISABLEDSTATUS)) : szItem;
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST), nSubSystem, szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST), nSubSystem, nColumn, szItem);
		}
	}
	return Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST), 0);
}

BOOL CTelecommandOptionsSubSystemsDialog::EnumEvents()
{
	INT  nEvent;
	INT  nEvents;
	INT  nSubSystem;
	INT  nSubSystems;
	CTelemetryEvents  pEvents;
	CTelemetryEventInfo  *pEventInfo;
	CComputerToken  cComputerToken;

	if (cComputerToken == m_szComputer)
	{
		for (nEvent = 0, nEvents = (GetTelemetryEvents(pEvents)) ? (INT)pEvents.GetSize() : 0; nEvent < nEvents; nEvent++)
		{
			if ((pEventInfo = (CTelemetryEventInfo *)pEvents.GetAt(nEvent)) != (CTelemetryEventInfo *)NULL)
			{
				SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pEventInfo->GetName());
				SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pEventInfo->GetName());
			}
		}
		return TRUE;
	}
	for (nSubSystem = 0, nSubSystems = (INT)m_szSubSystemEvents[0][0].GetSize(); nSubSystem < nSubSystems; nSubSystem++)
	{
		if (!m_szSubSystemEvents[0][0].GetAt(nSubSystem).IsEmpty()) SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szSubSystemEvents[0][0].GetAt(nSubSystem));
		continue;
	}
	for (nSubSystem = 0, nSubSystems = (INT)m_szSubSystemEvents[0][1].GetSize(); nSubSystem < nSubSystems; nSubSystem++)
	{
		if (!m_szSubSystemEvents[0][1].GetAt(nSubSystem).IsEmpty()) SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szSubSystemEvents[0][1].GetAt(nSubSystem));
		continue;
	}
	return TRUE;
}

VOID CTelecommandOptionsSubSystemsDialog::ShowDetails()
{
	INT  nIndex;

	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szSubSystemEvents[0][0].GetAt((nIndex = max(Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST)), 0)))));
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szSubSystemEvents[0][1].GetAt(nIndex)));
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT, (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT, (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLED, (LOBYTE(m_nSubSystemStatus[0].GetAt(nIndex))) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLED, (!LOBYTE(m_nSubSystemStatus[0].GetAt(nIndex))) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLED));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLED));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT));
}

INT CTelecommandOptionsSubSystemsDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

VOID CTelecommandOptionsSubSystemsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;
	CComputerToken  cComputerToken;

	AccessControl(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLED, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE)));
	AccessControl(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLED, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT, (cComputerToken == m_szComputer  &&  bCheck) ? TRUE : FALSE);
	AccessControl(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT, (cComputerToken == m_szComputer  &&  bCheck) ? TRUE : FALSE);
	AccessControl(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, (cComputerToken == m_szComputer  &&  bCheck) ? TRUE : FALSE, TRUE, (cComputerToken == m_szComputer  &&  bCheck) ? TRUE : FALSE);
	AccessControl(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, (cComputerToken == m_szComputer  &&  bCheck) ? TRUE : FALSE, TRUE, (cComputerToken == m_szComputer  &&  bCheck) ? TRUE : FALSE);
}

BOOL CTelecommandOptionsSubSystemsDialog::IsModified() CONST
{
	INT  nSubSystem;
	INT  nSubSystems;

	for (nSubSystem = 0, nSubSystems = (INT)m_nSubSystemIDs[0].GetSize(); nSubSystem < nSubSystems; nSubSystem++)
	{
		if ((m_nSubSystemIDs[0].GetAt(nSubSystem) != m_nSubSystemIDs[1].GetAt(nSubSystem) || m_szSubSystemEvents[0][0].GetAt(nSubSystem) != m_szSubSystemEvents[1][0].GetAt(nSubSystem) || m_szSubSystemEvents[0][1].GetAt(nSubSystem) != m_szSubSystemEvents[1][1].GetAt(nSubSystem) || m_nSubSystemStatus[0].GetAt(nSubSystem) != m_nSubSystemStatus[1].GetAt(nSubSystem)) && ((m_szSubSystemEvents[0][0].GetAt(nSubSystem).IsEmpty() && m_szSubSystemEvents[0][1].GetAt(nSubSystem).IsEmpty()) || m_szSubSystemEvents[0][0].GetAt(nSubSystem) != m_szSubSystemEvents[0][1].GetAt(nSubSystem))) break;
		continue;
	}
	return((nSubSystem < nSubSystems) ? TRUE : FALSE);
}

BOOL CTelecommandOptionsSubSystemsDialog::Check(BOOL bModified) CONST
{
	return(((!IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT) || GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME)->SendMessage(CB_GETCURSEL) >= 0) && (!IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT) || GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME)->SendMessage(CB_GETCURSEL) >= 0)) ? (!bModified || IsModified()) : FALSE);
}

void CTelecommandOptionsSubSystemsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandOptionsSubSystemsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelecommandOptionsSubSystemsDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelecommandOptionsSubSystemsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelecommandOptionsSubSystemsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLED, OnEnableSubSystem)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLED, OnDisableSubSystem)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT, OnUseEnableSubSystemEvent)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT, OnUseDisableSubSystemEvent)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, OnSelchangeEnableSubSystemEvent)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, OnSelchangeDisableSubSystemEvent)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsSubSystemsDialog message handlers

BOOL CTelecommandOptionsSubSystemsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_TITLEITEM_APID));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_TITLEITEM_SETTO));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_TITLEITEM_STATUS));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_TITLEITEM_NAME)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_TITLEITEM_APID)) ? (rColumns.Width() / 8) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_TITLEITEM_SETTO)) ? (rColumns.Width() / 5) : (rColumns.Width() / 2))));
		continue;
	}
	if (EnumSubSystems() && EnumEvents())
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLED)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLED)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT)->EnableWindow();
		ShowDetails();
	}
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTelecommandOptionsSubSystemsDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) ShowDetails();
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

void CTelecommandOptionsSubSystemsDialog::OnEnableSubSystem()
{
	INT  nIndex;

	for (nIndex = Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST)); nIndex < m_nSubSystemStatus[0].GetSize(); )
	{
		m_nSubSystemStatus[0].SetAt(nIndex, MAKEWORD(TRUE, HIBYTE(m_nSubSystemStatus[0].GetAt(nIndex))));
		break;
	}
	Listview_SetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST), nIndex, FindColumnIndex(STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_TITLEITEM_SETTO)), STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_LIST_ENABLEDSTATUS));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsSubSystemsDialog::OnDisableSubSystem()
{
	INT  nIndex;

	for (nIndex = Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST)); nIndex < m_nSubSystemStatus[0].GetSize(); )
	{
		m_nSubSystemStatus[0].SetAt(nIndex, MAKEWORD(FALSE, HIBYTE(m_nSubSystemStatus[0].GetAt(nIndex))));
		m_szSubSystemEvents[0][0].SetAt(nIndex, EMPTYSTRING);
		m_szSubSystemEvents[0][1].SetAt(nIndex, EMPTYSTRING);
		break;
	}
	Listview_SetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST), nIndex, FindColumnIndex(STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_TITLEITEM_SETTO)), STRING(IDS_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_LIST_DISABLEDSTATUS));
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsSubSystemsDialog::OnUseEnableSubSystemEvent()
{
	INT  nIndex;

	for (nIndex = Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST)); nIndex < m_szSubSystemEvents[0][0].GetSize(); )
	{
		m_szSubSystemEvents[0][0].SetAt(nIndex, EMPTYSTRING);
		break;
	}
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEBYEVENT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsSubSystemsDialog::OnUseDisableSubSystemEvent()
{
	INT  nIndex;

	for (nIndex = Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST)); nIndex < m_szSubSystemEvents[0][1].GetSize(); )
	{
		m_szSubSystemEvents[0][1].SetAt(nIndex, EMPTYSTRING);
		break;
	}
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEBYEVENT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsSubSystemsDialog::OnSelchangeEnableSubSystemEvent()
{
	INT  nIndex;
	CString  szEvent;

	for (nIndex = Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST)), GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_ENABLEEVENTNAME)->GetWindowText(szEvent); nIndex < m_szSubSystemEvents[0][0].GetSize(); )
	{
		m_szSubSystemEvents[0][0].SetAt(nIndex, szEvent);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsSubSystemsDialog::OnSelchangeDisableSubSystemEvent()
{
	INT  nIndex;
	CString  szEvent;

	for (nIndex = Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_LIST)), GetDlgItem(IDC_TELECOMMANDOPTIONS_SUBSYSTEMS_BEHAVIOR_DISABLEEVENTNAME)->GetWindowText(szEvent); nIndex < m_szSubSystemEvents[0][1].GetSize(); )
	{
		m_szSubSystemEvents[0][1].SetAt(nIndex, szEvent);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsSubSystemsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnOK();
}

BOOL CTelecommandOptionsSubSystemsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelecommandOptionsSubSystemsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSSUBSYSTEMSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsCommandHandlerSettingsDialog dialog

IMPLEMENT_DYNCREATE(CTelecommandOptionsCommandHandlerSettingsDialog, CLocaleDialog)

CTelecommandOptionsCommandHandlerSettingsDialog::CTelecommandOptionsCommandHandlerSettingsDialog(CWnd *pParentWnd) : CLocaleDialog(CTelecommandOptionsCommandHandlerSettingsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelecommandOptionsCommandHandlerSettingsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTelecommandOptionsCommandHandlerSettingsDialog::DoModal(UINT &nPort, UINT &nBufferSize, CTimeSpan &tTimeout, CStringArray &szClients, CUIntArray &nAccessCodes, CTimeKeyArray &tStartTimes, CTimeKeyArray &tStopTimes)
{
	INT  nResult;

	for (m_nPort[0] = m_nPort[1] = nPort, m_nBufferSize[0] = m_nBufferSize[1] = nBufferSize, m_tTimeout[0] = m_tTimeout[1] = tTimeout, m_szClients[0].Copy(szClients), m_szClients[1].Copy(szClients), m_nAccessCodes[0].Copy(nAccessCodes), m_nAccessCodes[1].Copy(nAccessCodes), m_tStartTimes[0].Copy(tStartTimes), m_tStartTimes[1].Copy(tStartTimes), m_tStopTimes[0].Copy(tStopTimes), m_tStopTimes[1].Copy(tStopTimes); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		nPort = m_nPort[0];
		tTimeout = m_tTimeout[0];
		nBufferSize = m_nBufferSize[0];
		szClients.Copy(m_szClients[0]);
		nAccessCodes.Copy(m_nAccessCodes[0]);
		tStartTimes.Copy(m_tStartTimes[0]);
		tStopTimes.Copy(m_tStopTimes[0]);
		break;
	}
	return nResult;
}

VOID CTelecommandOptionsCommandHandlerSettingsDialog::ShowCommandHandlerDetails()
{
	INT  nPos;
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;

	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_PORT), m_nPort[0]);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_BUFFERSIZE), m_nBufferSize[0] / 1024);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_TIMEOUT), m_tTimeout[0].GetTotalSeconds());
	for (nItem = 0, nItems = (INT)m_szClients[0].GetSize(), SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_DELETEALLITEMS); nItem < nItems; nItem++)
	{
		for (nColumn = 0, nColumns = (m_szClients[0].GetAt(nItem).GetLength() > 0) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSCOMMANDHANDLERSETTINGSDIALOG_NAME); )
			{
				szItem = ((nPos = m_szClients[0].GetAt(nItem).Find(EOL)) >= 0) ? m_szClients[0].GetAt(nItem).Left(nPos) : m_szClients[0].GetAt(nItem);
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSCOMMANDHANDLERSETTINGSDIALOG_ADDRESS); )
			{
				szItem = ((nPos = m_szClients[0].GetAt(nItem).Find(EOL)) >= 0) ? m_szClients[0].GetAt(nItem).Mid(nPos + 1) : EMPTYSTRING;
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS), nItem, szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS), nItem, nColumn, szItem);
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS), 0);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_ADDCLIENTS)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_REMOVECLIENTS)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS)) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE) : FALSE);
	ShowClientProperties();
}

VOID CTelecommandOptionsCommandHandlerSettingsDialog::ShowClientProperties(INT nIndex)
{
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_ANYCLIENT, (m_szClients[0].GetSize() > 0 && !m_szClients[0].GetAt(m_szClients[0].GetUpperBound()).GetLength()) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_NONE, (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0 && nIndex < m_nAccessCodes[0].GetSize() && (m_nAccessCodes[0].GetAt(nIndex) & TCSERVICE_COMMANDINTERFACE_UNLIMITEDACCESS)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_FULL, (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0 && nIndex < m_nAccessCodes[0].GetSize() && (m_nAccessCodes[0].GetAt(nIndex) & TCSERVICE_COMMANDINTERFACE_NOACCESS)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL, (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0 && nIndex < m_nAccessCodes[0].GetSize() && (m_nAccessCodes[0].GetAt(nIndex) & TCSERVICE_COMMANDINTERFACE_LIMITEDACCESS)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_AUDIT, (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0 && nIndex < m_nAccessCodes[0].GetSize() && (m_nAccessCodes[0].GetAt(nIndex) & TCSERVICE_COMMANDINTERFACE_AUDITACCESS)) ? TRUE : FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STARTTIME), (nIndex >= 0 && nIndex < m_tStartTimes[0].GetSize() && m_tStartTimes[0].GetAt(nIndex) > 0) ? m_tStartTimes[0].GetAt(nIndex) : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STOPTIME), (nIndex >= 0 && nIndex < m_tStopTimes[0].GetSize() && m_tStopTimes[0].GetAt(nIndex) > 0) ? m_tStopTimes[0].GetAt(nIndex) : CTime::GetCurrentTime().GetTime());
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_NONE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_FULL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_AUDIT)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL));
}

VOID CTelecommandOptionsCommandHandlerSettingsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_PORT, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE)));
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_BUFFERSIZE, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_TIMEOUT, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_ANYCLIENT, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_NONE, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_FULL, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STARTTIME, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STOPTIME, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_AUDIT, bCheck);
}

BOOL CTelecommandOptionsCommandHandlerSettingsDialog::IsModified() CONST
{
	INT  nClient[2];
	INT  nClients[2];

	for (nClient[0] = 0, nClients[0] = (m_nPort[0] == m_nPort[1] && m_nBufferSize[0] == m_nBufferSize[1] && m_tTimeout[0] == m_tTimeout[1] && m_szClients[0].GetSize() == m_szClients[1].GetSize() && m_nAccessCodes[0].GetSize() == m_nAccessCodes[1].GetSize() && m_tStartTimes[0].GetSize() == m_tStartTimes[1].GetSize() && m_tStopTimes[0].GetSize() == m_tStopTimes[1].GetSize()) ? (INT)m_szClients[0].GetSize() : -1; nClient[0] < nClients[0]; nClient[0]++)
	{
		for (nClient[1] = 0, nClients[1] = (INT)m_szClients[1].GetSize(); nClient[1] < nClients[1]; nClient[1]++)
		{
			if (m_szClients[0].GetAt(nClient[0]).CompareNoCase(m_szClients[1].GetAt(nClient[1]))) continue;
			if (m_nAccessCodes[0].GetAt(nClient[0]) != m_nAccessCodes[1].GetAt(nClient[1])) continue;
			if (m_tStartTimes[0].GetAt(nClient[0]) != m_tStartTimes[1].GetAt(nClient[1])) continue;
			if (m_tStopTimes[0].GetAt(nClient[0]) != m_tStopTimes[1].GetAt(nClient[1])) continue;
			break;
		}
		if (nClient[1] == nClients[1]) break;
	}
	return((nClient[0] != nClients[0]) ? TRUE : FALSE);
}

void CTelecommandOptionsCommandHandlerSettingsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandOptionsCommandHandlerSettingsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelecommandOptionsCommandHandlerSettingsDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelecommandOptionsCommandHandlerSettingsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelecommandOptionsCommandHandlerSettingsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_ADDCLIENTS, OnAddClients)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_REMOVECLIENTS, OnRemoveClients)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_ANYCLIENT, OnAllowAnyClient)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_NONE, OnNoAccessRestrictions)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_FULL, OnFullAccessRestrictions)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL, OnPartialAccessRestrictions)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_AUDIT, OnAuditRestrictions)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_PORT, OnSpinchangeProtocolPort)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_BUFFERSIZE, OnSpinchangeProtocolBufferSize)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_TIMEOUT, OnSpinchangeProtocolTimeout)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STARTTIME, OnSpinchangeAccessStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STOPTIME, OnSpinchangeAccessStopTime)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsCommandHandlerSettingsDialog message handlers

BOOL CTelecommandOptionsCommandHandlerSettingsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONSCOMMANDHANDLERSETTINGSDIALOG_NAME));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONSCOMMANDHANDLERSETTINGSDIALOG_ADDRESS));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS)->GetClientRect(rColumns);
	Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_PORT), TCSERVICE_COMMANDINTERFACE_FIRSTPORT, TCSERVICE_COMMANDINTERFACE_LASTPORT);
	Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_BUFFERSIZE), TCSERVICE_COMMANDINTERFACE_MINIMUMBUFFERSIZE / 1024, TCSERVICE_COMMANDINTERFACE_MAXIMUMBUFFERSIZE / 1024);
	Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_TIMEOUT), TCSERVICE_COMMANDINTERFACE_MINIMUMTIMEOUT, TCSERVICE_COMMANDINTERFACE_MAXIMUMTIMEOUT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS), nColumn, m_szColumns.GetAt(nColumn), rColumns.Width() / 2);
		continue;
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_PORT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_PORT)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_BUFFERSIZE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_BUFFERSIZE)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_BUFFERSIZE_KB)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_TIMEOUT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_TIMEOUT)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_TIMEOUT_SECONDS)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_STANDARD_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_ANYCLIENT)->EnableWindow();
	ShowCommandHandlerDetails();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTelecommandOptionsCommandHandlerSettingsDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) ShowClientProperties(pNotifyListView->iItem);
		if (pNotifyListView->hdr.code == LVN_DELETEALLITEMS) ShowClientProperties();
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

void CTelecommandOptionsCommandHandlerSettingsDialog::OnAddClients()
{
	INT  nPos;
	INT  nColumn;
	INT  nColumns;
	INT  nItem[2];
	INT  nItems[2];
	INT  nIndex[2];
	CString  szItem[2];
	CStringArray  szAddresses;
	CTelecommandOptionsCommandHandlerClientAddressesDialog  cClientAddressesDialog(this);

	if (cClientAddressesDialog.DoModal(szAddresses) == IDOK)
	{
		for (nItem[0] = 0, nItems[0] = (INT)szAddresses.GetSize(), nIndex[0] = -1; nItem[0] < nItems[0]; nItem[0]++)
		{
			for (nItem[1] = 0, nItems[1] = (INT)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_GETITEMCOUNT), szItem[0] = ((nPos = szAddresses.GetAt(nItem[0]).Find(EOL)) >= 0) ? szAddresses.GetAt(nItem[0]).Left(nPos) : szAddresses.GetAt(nItem[0]), szItem[1] = (nPos >= 0) ? szAddresses.GetAt(nItem[0]).Mid(nPos + 1) : EMPTYSTRING; nItem[1] < nItems[1]; nItem[1]++)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
				{
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSCOMMANDHANDLERCLIENTADDRESSESDIALOG_NAME))
					{
						if (!Listview_GetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS), nItem[1], nColumn).CompareNoCase(szItem[0]) && !szItem[0].IsEmpty()) break;
						continue;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSCOMMANDHANDLERCLIENTADDRESSESDIALOG_ADDRESS))
					{
						if (!Listview_GetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS), nItem[1], nColumn).CompareNoCase(szItem[1]) && !szItem[1].IsEmpty()) break;
						continue;
					}
				}
				if (nColumn < nColumns) break;
			}
			if (nItem[1] == nItems[1])
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), m_szClients[0].InsertAt((nIndex[1] = (m_szClients[0].GetSize() > 0 && !m_szClients[0].GetAt(m_szClients[0].GetUpperBound()).GetLength()) ? (INT)m_szClients[0].GetUpperBound() : (INT)m_szClients[0].GetSize()), szAddresses.GetAt(nItem[0])), m_nAccessCodes[0].InsertAt(nIndex[1], TCSERVICE_COMMANDINTERFACE_UNLIMITEDACCESS), m_tStartTimes[0].InsertAt(nIndex[1], CTimeKey(0)), m_tStopTimes[0].InsertAt(nIndex[1], CTimeKey(0)); nColumn < nColumns; nColumn++)
				{
					if ((!nColumn  &&  Listview_InsertText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS), nIndex[1], szItem[0])) || (nColumn > 0 && Listview_SetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS), nIndex[1], nColumn, szItem[1])))
					{
						nIndex[0] = (nIndex[0] >= 0) ? min(nIndex[0], nIndex[1]) : nIndex[1];
						continue;
					}
				}
			}
		}
		Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS), max(nIndex[0], 0));
	}
	if (SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0)
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_REMOVECLIENTS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS)->SetFocus();
	}
	else
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_REMOVECLIENTS)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_ADDCLIENTS)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandHandlerSettingsDialog::OnRemoveClients()
{
	INT  nIndex;
	CHourglassCursor  cCursor;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS))) >= 0)
	{
		if (Listview_DeleteText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS), nIndex))
		{
			for (m_szClients[0].RemoveAt(nIndex), m_nAccessCodes[0].RemoveAt(nIndex), m_tStartTimes[0].RemoveAt(nIndex), m_tStopTimes[0].RemoveAt(nIndex); !SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS, LVM_GETITEMCOUNT); )
			{
				CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_NONE, FALSE);
				CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_FULL, FALSE);
				CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL, FALSE);
				CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_AUDIT, FALSE);
				GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_REMOVECLIENTS)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS_STATIC)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STATIC)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_NONE)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_FULL)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STARTTIME)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL_STATIC)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STOPTIME)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_AUDIT)->EnableWindow(FALSE);
				break;
			}
			Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS), 0);
		}
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandHandlerSettingsDialog::OnAllowAnyClient()
{
	INT  nClient;
	INT  nClients;

	for (nClient = 0, nClients = (INT)m_szClients[0].GetSize(); nClient < nClients; nClient++)
	{
		if (!m_szClients[0].GetAt(nClient).GetLength())
		{
			m_szClients[0].RemoveAt(nClient);
			m_nAccessCodes[0].RemoveAt(nClient);
			m_tStartTimes[0].RemoveAt(nClient);
			m_tStopTimes[0].RemoveAt(nClient);
			break;
		}
	}
	if (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_ANYCLIENT))
	{
		m_szClients[0].Add(EMPTYSTRING);
		m_nAccessCodes[0].Add(TCSERVICE_COMMANDINTERFACE_UNLIMITEDACCESS | TCSERVICE_COMMANDINTERFACE_AUDITACCESS);
		m_tStartTimes[0].Add(0);
		m_tStopTimes[0].Add(0);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandHandlerSettingsDialog::OnNoAccessRestrictions()
{
	INT  nIndex;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS))) >= 0)
	{
		for (m_tStartTimes[0].SetAt(nIndex, 0), m_tStopTimes[0].SetAt(nIndex, 0), m_nAccessCodes[0].SetAt(nIndex, (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_AUDIT)) ? (TCSERVICE_COMMANDINTERFACE_UNLIMITEDACCESS | TCSERVICE_COMMANDINTERFACE_AUDITACCESS) : TCSERVICE_COMMANDINTERFACE_UNLIMITEDACCESS); TRUE; )
		{
			CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_NONE, TRUE);
			CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_FULL, FALSE);
			CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL, FALSE);
			break;
		}
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STARTTIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STOPTIME)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandHandlerSettingsDialog::OnFullAccessRestrictions()
{
	INT  nIndex;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS))) >= 0)
	{
		for (m_tStartTimes[0].SetAt(nIndex, 0), m_tStopTimes[0].SetAt(nIndex, 0), m_nAccessCodes[0].SetAt(nIndex, (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_AUDIT)) ? (TCSERVICE_COMMANDINTERFACE_NOACCESS | TCSERVICE_COMMANDINTERFACE_AUDITACCESS) : TCSERVICE_COMMANDINTERFACE_NOACCESS); TRUE; )
		{
			CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_NONE, FALSE);
			CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_FULL, TRUE);
			CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL, FALSE);
			break;
		}
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STARTTIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STOPTIME)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandHandlerSettingsDialog::OnPartialAccessRestrictions()
{
	INT  nIndex;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS))) >= 0)
	{
		for (m_tStartTimes[0].SetAt(nIndex, CTime::GetCurrentTime().GetTime()), m_tStopTimes[0].SetAt(nIndex, CTime::GetCurrentTime().GetTime() + TELECOMMANDOPTIONSCOMMANDHANDLERSETTINGS_DEFAULTACCESSPERIOD), m_nAccessCodes[0].SetAt(nIndex, (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_AUDIT)) ? (TCSERVICE_COMMANDINTERFACE_LIMITEDACCESS | TCSERVICE_COMMANDINTERFACE_AUDITACCESS) : TCSERVICE_COMMANDINTERFACE_LIMITEDACCESS); TRUE; )
		{
			Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STARTTIME), m_tStartTimes[0].GetAt(nIndex));
			Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STOPTIME), m_tStopTimes[0].GetAt(nIndex));
			CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_NONE, FALSE);
			CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_FULL, FALSE);
			CheckDlgButton(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL, TRUE);
			break;
		}
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STARTTIME)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_PARTIAL_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STOPTIME)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STARTTIME)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandHandlerSettingsDialog::OnAuditRestrictions()
{
	INT  nIndex;

	for (; (nIndex = Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS))) >= 0; )
	{
		m_nAccessCodes[0].SetAt(nIndex, (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_AUDIT)) ? (m_nAccessCodes[0].GetAt(nIndex) | TCSERVICE_COMMANDINTERFACE_AUDITACCESS) : (m_nAccessCodes[0].GetAt(nIndex) & ~TCSERVICE_COMMANDINTERFACE_AUDITACCESS));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandHandlerSettingsDialog::OnSpinchangeProtocolPort()
{
	m_nPort[0] = (UINT)Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_PORT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandHandlerSettingsDialog::OnSpinchangeProtocolBufferSize()
{
	m_nBufferSize[0] = (UINT)(1024 * Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_BUFFERSIZE)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandHandlerSettingsDialog::OnSpinchangeProtocolTimeout()
{
	m_tTimeout[0] = Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_TIMEOUT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandHandlerSettingsDialog::OnSpinchangeAccessStartTime()
{
	INT  nIndex;
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS))) >= 0)
	{
		for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STOPTIME)); tStartTime != 0 || tStopTime != 0; )
		{
			Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STOPTIME), ((tStopTime = (tStartTime >= tStopTime) ? ((tStartTime < tStartTime + 1) ? (tStartTime.GetTime() + 1) : tStartTime) : tStopTime)));
			break;
		}
		m_tStartTimes[0].SetAt(nIndex, tStartTime);
		m_tStopTimes[0].SetAt(nIndex, tStopTime);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsCommandHandlerSettingsDialog::OnSpinchangeAccessStopTime()
{
	INT  nIndex;
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_CLIENTS))) >= 0)
	{
		for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STOPTIME)); tStartTime != 0 || tStopTime != 0; )
		{
			Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERSETTINGS_SECURITY_RESTRICTIONS_STARTTIME), ((tStartTime = (tStartTime >= tStopTime) ? ((tStopTime > 0) ? (tStopTime.GetTime() - 1) : 0) : tStartTime)));
			break;
		}
		m_tStartTimes[0].SetAt(nIndex, tStartTime);
		m_tStopTimes[0].SetAt(nIndex, tStopTime);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

BOOL CTelecommandOptionsCommandHandlerSettingsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSCOMMANDHANDLERSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelecommandOptionsCommandHandlerSettingsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSCOMMANDHANDLERSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsCommandHandlerClientAddressesDialog dialog

IMPLEMENT_DYNCREATE(CTelecommandOptionsCommandHandlerClientAddressesDialog, CLocaleDialog)

CTelecommandOptionsCommandHandlerClientAddressesDialog::CTelecommandOptionsCommandHandlerClientAddressesDialog(CWnd *pParentWnd) : CLocaleDialog(CTelecommandOptionsCommandHandlerClientAddressesDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelecommandOptionsCommandHandlerClientAddressesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTelecommandOptionsCommandHandlerClientAddressesDialog::DoModal(CStringArray &szAddresses)
{
	INT  nResult;

	for (m_szAddresses.Copy(szAddresses); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		szAddresses.Copy(m_szAddresses);
		break;
	}
	return nResult;
}

BOOL CTelecommandOptionsCommandHandlerClientAddressesDialog::EnumComputers()
{
	INT  nComputer;
	INT  nComputers;
	CStringArray  szComputers;

	for (nComputer = 0, nComputers = GetNetworkBrowseService()->EnumNetworkComputers(szComputers), SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME, CB_RESETCONTENT); nComputer < nComputers; nComputer++)
	{
		if (CheckName(szComputers.GetAt(nComputer))) SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
		continue;
	}
	return((nComputer == nComputers) ? TRUE : FALSE);
}

BOOL CTelecommandOptionsCommandHandlerClientAddressesDialog::CheckName(LPCTSTR pszName) CONST
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CComputerToken  cComputerToken(pszName);

	for (nColumn = 0, nColumns = (lstrlen(pszName) > 0) ? (INT)m_szColumns.GetSize() : -1; nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSCOMMANDHANDLERCLIENTADDRESSESDIALOG_NAME)) break;
		continue;
	}
	for (nItem = 0, nItems = (nColumn < nColumns) ? (INT)GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST)->SendMessage(LVM_GETITEMCOUNT) : -1; nItem < nItems; nItem++)
	{
		if (Listview_GetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST), nItem, nColumn) == pszName) break;
		continue;
	}
	return((nItem == nItems) ? !cComputerToken.IsHost() : FALSE);
}

BOOL CTelecommandOptionsCommandHandlerClientAddressesDialog::CheckAddress(LPCTSTR pszAddress, BOOL bSyntax) CONST
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;

	if (bSyntax)
	{
		return(GetNetworkBrowseService()->IsValidAddress(pszAddress) != AF_UNSPEC);
	}
	for (nColumn = 0, nColumns = (lstrlen(pszAddress) > 0) ? (INT)m_szColumns.GetSize() : -1; nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSCOMMANDHANDLERCLIENTADDRESSESDIALOG_ADDRESS)) break;
		continue;
	}
	for (nItem = 0, nItems = (nColumn < nColumns) ? (INT)GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST)->SendMessage(LVM_GETITEMCOUNT) : -1; nItem < nItems; nItem++)
	{
		if (Listview_GetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST), nItem, nColumn) == pszAddress) break;
		continue;
	}
	return((nItem == nItems) ? (GetNetworkBrowseService()->IsValidAddress(pszAddress) != AF_UNSPEC && !GetNetworkBrowseService()->IsHost(pszAddress)) : FALSE);
}

void CTelecommandOptionsCommandHandlerClientAddressesDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandOptionsCommandHandlerClientAddressesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelecommandOptionsCommandHandlerClientAddressesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelecommandOptionsCommandHandlerClientAddressesDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelecommandOptionsCommandHandlerClientAddressesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDADDRESS, OnAddAddress)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_REMOVEADDRESS, OnRemoveAddress)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME, OnEditchangeName)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME, OnSelchangeName)
	ON_EN_CHANGE(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESS, OnEditchangeAddress)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsCommandHandlerClientAddressesDialog message handlers

BOOL CTelecommandOptionsCommandHandlerClientAddressesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONSCOMMANDHANDLERCLIENTADDRESSESDIALOG_NAME));
	m_szColumns.Add(STRING(IDS_TELECOMMANDOPTIONSCOMMANDHANDLERCLIENTADDRESSESDIALOG_ADDRESS));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST), nColumn, m_szColumns.GetAt(nColumn), rColumns.Width() / 2);
		continue;
	}
	if (EnumComputers())
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESS)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSSYNTAX_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME)->SetFocus();
		return FALSE;
	}
	return TRUE;
}

void CTelecommandOptionsCommandHandlerClientAddressesDialog::OnEditchangeName()
{
	CString  szName;
	CString  szAddress;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESS)->GetWindowText(szAddress);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDADDRESS)->EnableWindow(CheckName(szName) && CheckAddress(szAddress));
}

void CTelecommandOptionsCommandHandlerClientAddressesDialog::OnEditchangeAddress()
{
	CString  szName;
	CString  szAddress;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESS)->GetWindowText(szAddress);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDADDRESS)->EnableWindow(CheckName(szName) && CheckAddress(szAddress));
}

void CTelecommandOptionsCommandHandlerClientAddressesDialog::OnSelchangeName()
{
	CString  szName;
	CString  szAddress;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESS)->GetWindowText(szAddress);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDADDRESS)->EnableWindow(CheckName((szName = Combobox_GetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME), (INT)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME, CB_GETCURSEL)))) && CheckAddress(szAddress));
}

void CTelecommandOptionsCommandHandlerClientAddressesDialog::OnAddAddress()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CString  szName;
	CString  szAddress;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESS)->GetWindowText(szAddress);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nIndex = (INT)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST, LVM_GETITEMCOUNT); nColumn < nColumns; nColumn++)
	{
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSCOMMANDHANDLERCLIENTADDRESSESDIALOG_NAME); )
		{
			szItem = szName;
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSCOMMANDHANDLERCLIENTADDRESSESDIALOG_ADDRESS); )
		{
			szItem = (CheckAddress(szAddress, TRUE)) ? (LPCTSTR)szAddress : EMPTYSTRING;
			break;
		}
		if (!nColumn)
		{
			Listview_InsertText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST), nIndex, szItem);
			continue;
		}
		Listview_SetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST), nIndex, nColumn, szItem);
	}
	for (; nIndex >= 0; )
	{
		Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST), nIndex);
		break;
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME)->SetFocus();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESS)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDADDRESS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_REMOVEADDRESS)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

void CTelecommandOptionsCommandHandlerClientAddressesDialog::OnRemoveAddress()
{
	INT  nIndex;
	CHourglassCursor  cCursor;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST))) >= 0)
	{
		for (; Listview_DeleteText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST), nIndex); )
		{
			Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST), 0);
			break;
		}
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME)->SetFocus();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESS)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDADDRESS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_REMOVEADDRESS)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

void CTelecommandOptionsCommandHandlerClientAddressesDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CString  szAddress;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
		{
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSCOMMANDHANDLERCLIENTADDRESSESDIALOG_NAME))
			{
				szAddress = Listview_GetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST), nItem, nColumn);
				continue;
			}
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDOPTIONSCOMMANDHANDLERCLIENTADDRESSESDIALOG_ADDRESS))
			{
				szAddress += EOL + Listview_GetText(GetDlgItem(IDC_TELECOMMANDOPTIONS_COMMANDHANDLERCLIENTADDRESSES_ADDRESSLIST), nItem, nColumn);
				continue;
			}
		}
		m_szAddresses.Add(szAddress);
	}
	CLocaleDialog::OnOK();
}

BOOL CTelecommandOptionsCommandHandlerClientAddressesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSCOMMANDHANDLERCLIENTADDRESSESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelecommandOptionsCommandHandlerClientAddressesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSCOMMANDHANDLERCLIENTADDRESSESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsHistoryArchivalSettingsDialog dialog

IMPLEMENT_DYNCREATE(CTelecommandOptionsHistoryArchivalSettingsDialog, CLocaleDialog)

CTelecommandOptionsHistoryArchivalSettingsDialog::CTelecommandOptionsHistoryArchivalSettingsDialog(CWnd *pParentWnd) : CLocaleDialog(CTelecommandOptionsHistoryArchivalSettingsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelecommandOptionsHistoryArchivalSettingsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTelecommandOptionsHistoryArchivalSettingsDialog::DoModal(CHistoryStoreFiles &pArchivalFiles)
{
	INT  nResult;

	for (m_pArchivalFiles[0].Copy(&pArchivalFiles), m_pArchivalFiles[1].Copy(&pArchivalFiles); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		pArchivalFiles.Copy(&m_pArchivalFiles[0]);
		break;
	}
	return nResult;
}

VOID CTelecommandOptionsHistoryArchivalSettingsDialog::EnumArchivingFiles()
{
	INT  nFile;
	INT  nFiles;
	CHistoryStoreFile  *pFile;

	for (nFile = 0, nFiles = (INT)m_pArchivalFiles[0].GetSize(); nFile < nFiles; nFile++)
	{
		if ((pFile = m_pArchivalFiles[0].GetAt(nFile)) && !pFile->GetFileName().IsEmpty())
		{
			SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_FILENAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pFile->GetFileName());
			continue;
		}
	}
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_FILENAME, CB_SETCURSEL);
	ShowArchivingOptions();
}

VOID CTelecommandOptionsHistoryArchivalSettingsDialog::ShowArchivingOptions()
{
	UINT  nBackupRetries;
	CTimeSpan  tBackupTime[2];
	CTimeSpan  tBackupInterval;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchivingFile()))
	{
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_DISABLED, ((pFile->GetOptions() & HISTORYSTORE_OPTION_USE) != HISTORYSTORE_OPTION_USE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY, (pFile->GetOptions() & HISTORYSTORE_OPTION_SECONDARY) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_POLICY_CYCLIC, (pFile->GetOptions() & HISTORYSTORE_OPTION_CYCLIC) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_POLICY_NONCYCLIC, (pFile->GetOptions() & HISTORYSTORE_OPTION_NONCYCLIC) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_UNLIMITED, (pFile->GetOptions() & HISTORYSTORE_OPTION_UNLIMITEDSIZE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_LIMITED, (pFile->GetOptions() & HISTORYSTORE_OPTION_LIMITEDSIZE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_COMPRESSION, (pFile->GetOptions() & HISTORYSTORE_OPTION_COMPRESSION) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_SIMPLE, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPSIMPLE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_TIMETAGGED, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPTIMETAGGED) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_ENUMERATED, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPENUMERATED) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_AUTO, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPBYDEFAULT) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPBYSIZE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUP) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPDAILY) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DISK, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPEMPTYDISK) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPRETRIES) ? TRUE : FALSE);
		CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_AUDITFAILURES, (pFile->GetOptions() & HISTORYSTORE_OPTION_BACKUPAUDITFAILURES) ? TRUE : FALSE);
		Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STARTTIME), (pFile->GetBackupDailyPeriod(tBackupTime[0], tBackupTime[1])) ? CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + tBackupTime[0].GetTotalSeconds()) : CTime::GetCurrentTime().GetTime());
		Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STOPTIME), (pFile->GetBackupDailyPeriod(tBackupTime[0], tBackupTime[1])) ? CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + tBackupTime[1].GetTotalSeconds()) : CTime::GetCurrentTime().GetTime());
		Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_COUNT), (pFile->GetBackupRetryInfo(nBackupRetries, tBackupInterval)) ? nBackupRetries : 0);
		Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_INTERVAL), (pFile->GetBackupRetryInfo(nBackupRetries, tBackupInterval)) ? tBackupInterval.GetTotalMinutes() : 0);
		Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_MAXIMUM), pFile->GetFileSize() / (1024 * 1024));
		Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE_MB), pFile->GetBackupSize() / (1024 * 1024));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY_FILENAME)->SetWindowText(pFile->GetSecondaryFileName());
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_DIRECTORY)->SetWindowText(pFile->GetBackupDirectory());
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY_FILENAME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY_FILENAME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_MAXIMUM)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_LIMITED));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_MAXIMUM_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_LIMITED));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER)->EnableWindow(((pFile->GetOptions() & HISTORYSTORE_OPTION_NONCYCLIC) || (pFile->GetOptions() & HISTORYSTORE_OPTION_LIMITEDSIZE)) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_AUTO)->EnableWindow((pFile->GetOptions() & HISTORYSTORE_OPTION_LIMITEDSIZE) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE)->EnableWindow((pFile->GetOptions() & HISTORYSTORE_OPTION_NONCYCLIC) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE_MB)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE_MB_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTIONS)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DISK)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES));
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES));
		return;
	}
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_DISABLED, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_POLICY_CYCLIC, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_POLICY_NONCYCLIC, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_UNLIMITED, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_LIMITED, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_COMPRESSION, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_SIMPLE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_TIMETAGGED, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_ENUMERATED, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_AUTO, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DISK, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_AUDITFAILURES, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY_FILENAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_DIRECTORY)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY_FILENAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY_FILENAME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_MAXIMUM)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_MAXIMUM_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_AUTO)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE_MB)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE_MB_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTIONS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DISK)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_COUNT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_INTERVAL)->EnableWindow(FALSE);
}

CHistoryStoreFile *CTelecommandOptionsHistoryArchivalSettingsDialog::FindArchivingFile() CONST
{
	CString  szFileName;

	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_FILENAME)->GetWindowText(szFileName);
	return m_pArchivalFiles[0].GetAt(m_pArchivalFiles[0].Find(szFileName));
}

VOID CTelecommandOptionsHistoryArchivalSettingsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_DISABLED, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE)));
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY_FILENAME, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_POLICY_CYCLIC, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_POLICY_NONCYCLIC, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_UNLIMITED, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_LIMITED, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_MAXIMUM, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_COMPRESSION, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_SIMPLE, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_TIMETAGGED, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_ENUMERATED, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_DIRECTORY, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_AUTO, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE_MB, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STARTTIME, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STOPTIME, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DISK, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_COUNT, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_INTERVAL, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_AUDITFAILURES, bCheck);
}

BOOL CTelecommandOptionsHistoryArchivalSettingsDialog::IsModified() CONST
{
	return((!m_pArchivalFiles[0].Compare(&m_pArchivalFiles[1])) ? TRUE : FALSE);
}

BOOL CTelecommandOptionsHistoryArchivalSettingsDialog::Check(BOOL bModified) CONST
{
	return((m_pArchivalFiles[0].GetSize() > 0 && ((!IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM) && ((!IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_SIMPLE) && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_TIMETAGGED) && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_ENUMERATED) && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_AUTO) && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE) && !GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_DIRECTORY)->GetWindowTextLength()) || ((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_SIMPLE) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_TIMETAGGED) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_ENUMERATED)) && (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_AUTO) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE)) && GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_DIRECTORY)->GetWindowTextLength() > 0)) && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES) && !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_AUDITFAILURES)) || (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM) && (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_SIMPLE) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_TIMETAGGED) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_ENUMERATED)) && (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_AUTO) || IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE)) && GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_DIRECTORY)->GetWindowTextLength() > 0))) ? (!bModified || IsModified()) : FALSE);
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandOptionsHistoryArchivalSettingsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelecommandOptionsHistoryArchivalSettingsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelecommandOptionsHistoryArchivalSettingsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_DISABLED, OnDisabled)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY, OnUseSecondary)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_POLICY_CYCLIC, OnCyclicMode)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_POLICY_NONCYCLIC, OnNonCyclicMode)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_UNLIMITED, OnUnlimitedSize)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_LIMITED, OnLimitedSize)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_COMPRESSION, OnUseCompression)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_SIMPLE, OnTypeSimple)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_TIMETAGGED, OnTypeTimeTagged)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_ENUMERATED, OnTypeEnumerated)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM, OnBackups)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_AUTO, OnBackupByDefault)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE, OnBackupBySize)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY, OnBackupDaily)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DISK, OnBackupEmptyDisk)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES, OnBackupFailures)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_AUDITFAILURES, OnBackupAuditFailures)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_FILENAME, OnSelchangeFileName)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_MAXIMUM, OnSpinchangeSize)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE_MB, OnSpinchangeBackupBySize)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STARTTIME, OnSpinchangeBackupDailyStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STOPTIME, OnSpinchangeBackupDailyStopTime)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_COUNT, OnSpinchangeBackupRetries)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_INTERVAL, OnSpinchangeBackupInterval)
	ON_EN_CHANGE(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY_FILENAME, OnEditchangeSecondaryFileName)
	ON_EN_CHANGE(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_DIRECTORY, OnEditchangeBackupDirectory)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsHistoryArchivalSettingsDialog message handlers

BOOL CTelecommandOptionsHistoryArchivalSettingsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_MAXIMUM), TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_MINIMUMSIZE, TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_MAXIMUMSIZE);
	Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE_MB), TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_MINIMUMSIZE, TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_MAXIMUMSIZE);
	Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_COUNT), TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_MINIMUMRETRIES, TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_MAXIMUMRETRIES);
	Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_INTERVAL), TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_MINIMUMRETRYINTERVAL, TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_MAXIMUMRETRYINTERVAL);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_DISABLED)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_POLICY)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_POLICY_CYCLIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_POLICY_NONCYCLIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_UNLIMITED)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_LIMITED)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_COMPRESSION)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_SIMPLE)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_TIMETAGGED)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_ENUMERATED)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_DIRECTORY_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_DIRECTORY)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_AUDITFAILURES)->EnableWindow();
	EnumArchivingFiles();
	AdjustToPrivileges();
	return TRUE;
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnDisabled()
{
	CHistoryStoreFile  *pFile;

	for (; (pFile = FindArchivingFile()); )
	{
		pFile->SetOptions((!IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_DISABLED)) ? (pFile->GetOptions() | HISTORYSTORE_OPTION_USE) : (pFile->GetOptions() & ~HISTORYSTORE_OPTION_USE));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnUseSecondary()
{
	CHistoryStoreFile  *pFile;

	for (; (pFile = FindArchivingFile()); )
	{
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY)) ? (pFile->GetOptions() | HISTORYSTORE_OPTION_SECONDARY) : (pFile->GetOptions() & ~HISTORYSTORE_OPTION_SECONDARY));
		break;
	}
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY_FILENAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY_FILENAME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY_FILENAME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnCyclicMode()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchivingFile()))
	{
		pFile->SetOptions((pFile->GetOptions() & ~HISTORYSTORE_OPTION_NONCYCLIC) | HISTORYSTORE_OPTION_CYCLIC);
		pFile->SetOptions(pFile->GetOptions() & ~HISTORYSTORE_OPTION_BACKUPBYSIZE);
		pFile->SetBackupSize(0);
	}
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_POLICY_CYCLIC, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_POLICY_NONCYCLIC, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE_MB)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE_MB_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnNonCyclicMode()
{
	CHistoryStoreFile  *pFile;

	for (; (pFile = FindArchivingFile()); )
	{
		pFile->SetOptions((pFile->GetOptions() & ~HISTORYSTORE_OPTION_CYCLIC) | HISTORYSTORE_OPTION_NONCYCLIC);
		break;
	}
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_POLICY_CYCLIC, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_POLICY_NONCYCLIC, TRUE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnUnlimitedSize()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchivingFile()))
	{
		pFile->SetOptions((pFile->GetOptions() & ~HISTORYSTORE_OPTION_LIMITEDSIZE) | HISTORYSTORE_OPTION_UNLIMITEDSIZE);
		pFile->SetOptions(pFile->GetOptions() & ~HISTORYSTORE_OPTION_BACKUPBYDEFAULT);
		pFile->SetFileSize(0);
	}
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_UNLIMITED, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_LIMITED, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_AUTO, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_MAXIMUM_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_MAXIMUM)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_AUTO)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnLimitedSize()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchivingFile()))
	{
		pFile->SetOptions((pFile->GetOptions() & ~HISTORYSTORE_OPTION_UNLIMITEDSIZE) | HISTORYSTORE_OPTION_LIMITEDSIZE);
		pFile->SetFileSize(1024 * 1024 * TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_DEFAULTSIZE);
	}
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_UNLIMITED, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_LIMITED, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_MAXIMUM), TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_DEFAULTSIZE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_MAXIMUM_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_MAXIMUM)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_AUTO)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_MAXIMUM)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnUseCompression()
{
	CHistoryStoreFile  *pFile;

	for (; (pFile = FindArchivingFile()); )
	{
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_COMPRESSION)) ? (pFile->GetOptions() | HISTORYSTORE_OPTION_COMPRESSION) : (pFile->GetOptions() & ~HISTORYSTORE_OPTION_COMPRESSION));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnTypeSimple()
{
	CHistoryStoreFile  *pFile;

	for (; (pFile = FindArchivingFile()); )
	{
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_SIMPLE)) ? (pFile->GetOptions() & ~(HISTORYSTORE_OPTION_BACKUPSIMPLE | HISTORYSTORE_OPTION_BACKUPTIMETAGGED | HISTORYSTORE_OPTION_BACKUPENUMERATED)) : ((pFile->GetOptions() & ~(HISTORYSTORE_OPTION_BACKUPTIMETAGGED | HISTORYSTORE_OPTION_BACKUPENUMERATED)) | HISTORYSTORE_OPTION_BACKUPSIMPLE));
		break;
	}
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_SIMPLE, !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_SIMPLE));
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_TIMETAGGED, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_ENUMERATED, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnTypeTimeTagged()
{
	CHistoryStoreFile  *pFile;

	for (; (pFile = FindArchivingFile()); )
	{
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_TIMETAGGED)) ? (pFile->GetOptions() & ~(HISTORYSTORE_OPTION_BACKUPSIMPLE | HISTORYSTORE_OPTION_BACKUPTIMETAGGED | HISTORYSTORE_OPTION_BACKUPENUMERATED)) : ((pFile->GetOptions() & ~(HISTORYSTORE_OPTION_BACKUPSIMPLE | HISTORYSTORE_OPTION_BACKUPENUMERATED)) | HISTORYSTORE_OPTION_BACKUPTIMETAGGED));
		break;
	}
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_SIMPLE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_TIMETAGGED, !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_TIMETAGGED));
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_ENUMERATED, FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnTypeEnumerated()
{
	CHistoryStoreFile  *pFile;

	for (; (pFile = FindArchivingFile()); )
	{
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_ENUMERATED)) ? (pFile->GetOptions() & ~(HISTORYSTORE_OPTION_BACKUPSIMPLE | HISTORYSTORE_OPTION_BACKUPTIMETAGGED | HISTORYSTORE_OPTION_BACKUPENUMERATED)) : ((pFile->GetOptions() & ~(HISTORYSTORE_OPTION_BACKUPSIMPLE | HISTORYSTORE_OPTION_BACKUPTIMETAGGED)) | HISTORYSTORE_OPTION_BACKUPENUMERATED));
		break;
	}
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_SIMPLE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_TIMETAGGED, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_ENUMERATED, !IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TYPE_ENUMERATED));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnBackups()
{
	CHistoryStoreFile  *pFile;

	for (; (pFile = FindArchivingFile()); )
	{
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM)) ? ((pFile->GetOptions() & ~(HISTORYSTORE_OPTION_BACKUPDAILY | HISTORYSTORE_OPTION_BACKUPTIME | HISTORYSTORE_OPTION_BACKUPPROTECTEDDISK | HISTORYSTORE_OPTION_BACKUPEMPTYDISK | HISTORYSTORE_OPTION_BACKUPRETRIES | HISTORYSTORE_OPTION_BACKUPAUDITFAILURES)) | HISTORYSTORE_OPTION_BACKUP) : (pFile->GetOptions() & ~(HISTORYSTORE_OPTION_BACKUP | HISTORYSTORE_OPTION_BACKUPDAILY | HISTORYSTORE_OPTION_BACKUPTIME | HISTORYSTORE_OPTION_BACKUPPROTECTEDDISK | HISTORYSTORE_OPTION_BACKUPEMPTYDISK | HISTORYSTORE_OPTION_BACKUPRETRIES | HISTORYSTORE_OPTION_BACKUPAUDITFAILURES)));
		break;
	}
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DISK, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES, (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM)) ? IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES) : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_AUDITFAILURES, (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM)) ? IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_AUDITFAILURES) : FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTIONS)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DISK)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_PERFORM));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnBackupByDefault()
{
	CHistoryStoreFile  *pFile;

	for (; (pFile = FindArchivingFile()); )
	{
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_AUTO)) ? (pFile->GetOptions() | HISTORYSTORE_OPTION_BACKUPBYDEFAULT) : (pFile->GetOptions() & ~HISTORYSTORE_OPTION_BACKUPBYDEFAULT));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnBackupBySize()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchivingFile()))
	{
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE)) ? (pFile->GetOptions() | HISTORYSTORE_OPTION_BACKUPBYSIZE) : (pFile->GetOptions() & ~HISTORYSTORE_OPTION_BACKUPBYSIZE));
		pFile->SetBackupSize((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE)) ? (1024 * 1024 * (DWORDLONG)TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_DEFAULTSIZE) : 0);
	}
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE_MB), TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_DEFAULTSIZE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE_MB)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE_MB_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE_MB)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnBackupDaily()
{
	CTimeKey  tTime;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchivingFile()))
	{
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY)) ? (pFile->GetOptions() | HISTORYSTORE_OPTION_BACKUPDAILY) : (pFile->GetOptions() & ~HISTORYSTORE_OPTION_BACKUPDAILY));
		pFile->SetBackupDailyPeriod((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY)) ? TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_DAILYSTARTTIME : 0, (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY)) ? TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_DAILYSTOPTIME : 0);
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STARTTIME), CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_DAILYSTARTTIME));
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STOPTIME), CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_DAILYSTOPTIME));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnBackupEmptyDisk()
{
	CHistoryStoreFile  *pFile;

	for (; (pFile = FindArchivingFile()); )
	{
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DISK)) ? (pFile->GetOptions() | HISTORYSTORE_OPTION_BACKUPEMPTYDISK) : (pFile->GetOptions() & ~HISTORYSTORE_OPTION_BACKUPEMPTYDISK));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnBackupFailures()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchivingFile()))
	{
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES)) ? ((pFile->GetOptions() & ~HISTORYSTORE_OPTION_BACKUPAUDITFAILURES) | HISTORYSTORE_OPTION_BACKUPRETRIES) : (pFile->GetOptions() & ~(HISTORYSTORE_OPTION_BACKUPRETRIES | HISTORYSTORE_OPTION_BACKUPAUDITFAILURES)));
		pFile->SetBackupRetryInfo(TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_DEFAULTRETRIES, SECONDSPERMINUTE*TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_DEFAULTRETRYINTERVAL);
	}
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_COUNT), TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_DEFAULTRETRIES);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_INTERVAL), TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGS_DEFAULTRETRYINTERVAL);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_COUNT)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_COUNT)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnBackupAuditFailures()
{
	CHistoryStoreFile  *pFile;

	for (; (pFile = FindArchivingFile()); )
	{
		pFile->SetOptions((IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_AUDITFAILURES)) ? (pFile->GetOptions() | HISTORYSTORE_OPTION_BACKUPAUDITFAILURES) : (pFile->GetOptions() & ~HISTORYSTORE_OPTION_BACKUPAUDITFAILURES));
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnEditchangeSecondaryFileName()
{
	CString  szFileName;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchivingFile()))
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_SECONDARY_FILENAME)->GetWindowText(szFileName);
		pFile->SetSecondaryFileName(szFileName);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnEditchangeBackupDirectory()
{
	CString  szDirectory;
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchivingFile()))
	{
		GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_DIRECTORY)->GetWindowText(szDirectory);
		pFile->SetBackupDirectory(szDirectory);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnSelchangeFileName()
{
	ShowArchivingOptions();
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnSpinchangeSize()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchivingFile())) pFile->SetFileSize(1024 * 1024 * Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_PROPERTIES_SIZE_MAXIMUM)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnSpinchangeBackupBySize()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchivingFile())) pFile->SetBackupSize(1024 * 1024 * Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_TRIGGER_SIZE_MB)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnSpinchangeBackupDailyStartTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CHistoryStoreFile  *pFile;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STOPTIME)); (pFile = FindArchivingFile()); )
	{
		pFile->SetBackupDailyPeriod(tStartTime.GetTime() % SECONDSPERDAY, (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY && (tStartTime.GetTime() + 1) % SECONDSPERDAY) ? ((tStartTime.GetTime() + 1) % SECONDSPERDAY) : (max(tStartTime.GetTime(), tStopTime.GetTime()) % SECONDSPERDAY));
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STOPTIME), (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY && (tStartTime.GetTime() + 1) % SECONDSPERDAY) ? (tStartTime.GetTime() + 1) : max(tStartTime, tStopTime));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnSpinchangeBackupDailyStopTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CHistoryStoreFile  *pFile;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STOPTIME)); (pFile = FindArchivingFile()); )
	{
		pFile->SetBackupDailyPeriod((tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY  &&  tStopTime.GetTime() % SECONDSPERDAY) ? ((tStopTime.GetTime() - 1) % SECONDSPERDAY) : (min(tStartTime.GetTime(), tStopTime.GetTime()) % SECONDSPERDAY), tStopTime.GetTime() % SECONDSPERDAY);
		break;
	}
	Timespinbox_SetTime(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_RESTRICTION_DAILY_STARTTIME), (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY  &&  tStopTime.GetTime() % SECONDSPERDAY) ? (tStopTime.GetTime() - 1) : min(tStartTime, tStopTime));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnSpinchangeBackupRetries()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchivingFile())) pFile->SetBackupRetryInfo((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_COUNT)), SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_INTERVAL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnSpinchangeBackupInterval()
{
	CHistoryStoreFile  *pFile;

	if ((pFile = FindArchivingFile())) pFile->SetBackupRetryInfo((UINT)Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_COUNT)), SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_HISTORYARCHIVALSETTINGS_BACKUP_BEHAVIOR_FAILURES_RETRY_INTERVAL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnOK();
}

BOOL CTelecommandOptionsHistoryArchivalSettingsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelecommandOptionsHistoryArchivalSettingsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSHISTORYARCHIVALSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsLoggingArchivalSettingsDialog dialog

IMPLEMENT_DYNCREATE(CTelecommandOptionsLoggingArchivalSettingsDialog, CLocaleDialog)

CTelecommandOptionsLoggingArchivalSettingsDialog::CTelecommandOptionsLoggingArchivalSettingsDialog(CWnd *pParentWnd) : CLocaleDialog(CTelecommandOptionsLoggingArchivalSettingsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelecommandOptionsLoggingArchivalSettingsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTelecommandOptionsLoggingArchivalSettingsDialog::DoModal(CString &szArchivalFileName, UINT &nArchivalPolicy, DWORDLONG &dwArchivalRetention, CTimeSpan &tArchivalRetention, CString &szRetrievalFileName)
{
	INT  nResult;

	for (m_nArchivalPolicy[0] = m_nArchivalPolicy[1] = nArchivalPolicy, m_szArchivalFileName[0] = m_szArchivalFileName[1] = szArchivalFileName, m_dwArchivalRetention[0] = m_dwArchivalRetention[1] = dwArchivalRetention, m_tArchivalRetention[0] = m_tArchivalRetention[1] = tArchivalRetention, m_szRetrievalFileName[0] = m_szRetrievalFileName[1] = szRetrievalFileName; (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		szRetrievalFileName = m_szRetrievalFileName[0];
		szArchivalFileName = m_szArchivalFileName[0];
		dwArchivalRetention = m_dwArchivalRetention[0];
		tArchivalRetention = m_tArchivalRetention[0];
		nArchivalPolicy = m_nArchivalPolicy[0];
		break;
	}
	return nResult;
}

VOID CTelecommandOptionsLoggingArchivalSettingsDialog::ShowLoggingOptions()
{
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_DISABLED, (m_nArchivalPolicy[0] & LOGFILE_POLICY_DISABLED) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OVERWRITE, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_CYCLICMODE) && (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYTIME) != LOGFILE_POLICY_RETENTIONBYTIME) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OLDOVERWRITE, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_CYCLICMODE) && (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYTIME)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_NOOVERWRITE, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_CYCLICMODE) != LOGFILE_POLICY_CYCLICMODE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_UNLIMITED, ((m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) != LOGFILE_POLICY_RETENTIONBYSIZE) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_LIMITED, (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) ? TRUE : FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS), m_tArchivalRetention[0].GetTotalSeconds() / SECONDSPERDAY);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_MAXIMUM), m_dwArchivalRetention[0] / 1024);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_FILENAME)->SetWindowText(m_szArchivalFileName[0]);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OLDOVERWRITE));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OLDOVERWRITE));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_MAXIMUM)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_LIMITED));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_MAXIMUM_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_LIMITED));
}

VOID CTelecommandOptionsLoggingArchivalSettingsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_FILENAME, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE)));
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_DISABLED, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OVERWRITE, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OLDOVERWRITE, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_NOOVERWRITE, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_UNLIMITED, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_LIMITED, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_MAXIMUM, bCheck);
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_RESET, bCheck);
}

BOOL CTelecommandOptionsLoggingArchivalSettingsDialog::IsModified() CONST
{
	return((m_nArchivalPolicy[0] != m_nArchivalPolicy[1] || m_szArchivalFileName[0].CompareNoCase(m_szArchivalFileName[1]) || m_dwArchivalRetention[0] != m_dwArchivalRetention[1] || m_tArchivalRetention[0] != m_tArchivalRetention[1] || m_szRetrievalFileName[0].CompareNoCase(m_szRetrievalFileName[1])) ? TRUE : FALSE);
}

BOOL CTelecommandOptionsLoggingArchivalSettingsDialog::Check(BOOL bModified) CONST
{
	return((!m_szArchivalFileName[0].IsEmpty() && !m_szRetrievalFileName[0].IsEmpty()) ? (!bModified || IsModified()) : FALSE);
}

void CTelecommandOptionsLoggingArchivalSettingsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandOptionsLoggingArchivalSettingsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelecommandOptionsLoggingArchivalSettingsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelecommandOptionsLoggingArchivalSettingsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_RETRIEVALS, OnRetrievals)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_BROWSE, OnBrowseFileName)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OVERWRITE, OnOverwriteLogs)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OLDOVERWRITE, OnOverwriteOldLogs)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_NOOVERWRITE, OnOverwriteNoLogs)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_UNLIMITED, OnUnlimitedSize)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_LIMITED, OnLimitedSize)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_RESET, OnResetSize)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_DISABLED, OnDisabled)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_HELP, OnHelp)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS, OnSpinchangeDays)
	ON_CONTROL(SBXN_CHANGE, IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_MAXIMUM, OnSpinchangeSize)
	ON_EN_CHANGE(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsLoggingArchivalSettingsDialog message handlers

BOOL CTelecommandOptionsLoggingArchivalSettingsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS), TELECOMMANDOPTIONSLOGGINGARCHIVALSETTINGS_MINIMUMDAYS, TELECOMMANDOPTIONSLOGGINGARCHIVALSETTINGS_MAXIMUMDAYS);
	Spinbox_SetRange(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_MAXIMUM), TELECOMMANDOPTIONSLOGGINGARCHIVALSETTINGS_MINIMUMSIZE, TELECOMMANDOPTIONSLOGGINGARCHIVALSETTINGS_MAXIMUMSIZE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_DISABLED)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_RETRIEVALS)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OVERWRITE)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OLDOVERWRITE)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_NOOVERWRITE)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_UNLIMITED)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_LIMITED)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_RESET)->EnableWindow();
	ShowLoggingOptions();
	AdjustToPrivileges();
	return TRUE;
}

void CTelecommandOptionsLoggingArchivalSettingsDialog::OnRetrievals()
{
	CTelecommandOptionsLoggingRetrievalSettingsDialog  cLoggingRetrievalSettings(this);

	cLoggingRetrievalSettings.DoModal(m_szRetrievalFileName[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingArchivalSettingsDialog::OnBrowseFileName()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_TCOPTIONSLOGFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCOPTIONSLOGFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_FILENAME)->SetWindowText((m_szArchivalFileName[0] = cFileBrowseDialog.GetPathName()));
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingArchivalSettingsDialog::OnOverwriteLogs()
{
	m_nArchivalPolicy[0] = (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) | LOGFILE_POLICY_CYCLICMODE;
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS), (m_tArchivalRetention[0] = 0).GetTotalSeconds());
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OVERWRITE, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OLDOVERWRITE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_NOOVERWRITE, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingArchivalSettingsDialog::OnOverwriteOldLogs()
{
	m_nArchivalPolicy[0] = (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) | LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_RETENTIONBYTIME;
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS), (m_tArchivalRetention[0] = SECONDSPERDAY*TELECOMMANDOPTIONSLOGGINGARCHIVALSETTINGS_DEFAULTDAYS).GetTotalSeconds() / SECONDSPERDAY);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OVERWRITE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OLDOVERWRITE, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_NOOVERWRITE, FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingArchivalSettingsDialog::OnOverwriteNoLogs()
{
	m_nArchivalPolicy[0] = (m_nArchivalPolicy[0] & LOGFILE_POLICY_RETENTIONBYSIZE) | LOGFILE_POLICY_NONCYCLICMODE;
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS), (m_tArchivalRetention[0] = 0).GetTotalSeconds());
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OVERWRITE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_OLDOVERWRITE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_NOOVERWRITE, TRUE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingArchivalSettingsDialog::OnUnlimitedSize()
{
	m_nArchivalPolicy[0] &= ~LOGFILE_POLICY_RETENTIONBYSIZE;
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_UNLIMITED, TRUE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_LIMITED, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_MAXIMUM), (m_dwArchivalRetention[0] = 0));
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_MAXIMUM_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_MAXIMUM)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingArchivalSettingsDialog::OnLimitedSize()
{
	m_nArchivalPolicy[0] |= LOGFILE_POLICY_RETENTIONBYSIZE;
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_UNLIMITED, FALSE);
	CheckDlgButton(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_LIMITED, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_MAXIMUM), (m_dwArchivalRetention[0] = 1024 * TELECOMMANDOPTIONSLOGGINGARCHIVALSETTINGS_DEFAULTSIZE) / 1024);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_MAXIMUM_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_MAXIMUM)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_MAXIMUM)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingArchivalSettingsDialog::OnResetSize()
{
	m_nArchivalPolicy[0] = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_RESET)) ? (m_nArchivalPolicy[0] | LOGFILE_POLICY_RESET) : (m_nArchivalPolicy[0] & ~LOGFILE_POLICY_RESET);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingArchivalSettingsDialog::OnDisabled()
{
	m_nArchivalPolicy[0] = (IsDlgButtonChecked(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_DISABLED)) ? (m_nArchivalPolicy[0] | LOGFILE_POLICY_DISABLED) : (m_nArchivalPolicy[0] & ~LOGFILE_POLICY_DISABLED);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingArchivalSettingsDialog::OnSpinchangeDays()
{
	m_tArchivalRetention[0] = SECONDSPERDAY*Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_POLICY_DAYS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingArchivalSettingsDialog::OnSpinchangeSize()
{
	m_dwArchivalRetention[0] = 1024 * Spinbox_GetPos(GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_SIZE_MAXIMUM));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingArchivalSettingsDialog::OnEditchangeFileName()
{
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGARCHIVALSETTINGS_FILENAME)->GetWindowText(m_szArchivalFileName[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingArchivalSettingsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnOK();
}

BOOL CTelecommandOptionsLoggingArchivalSettingsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSLOGGINGARCHIVALSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelecommandOptionsLoggingArchivalSettingsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSLOGGINGARCHIVALSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsLoggingRetrievalSettingsDialog dialog

IMPLEMENT_DYNCREATE(CTelecommandOptionsLoggingRetrievalSettingsDialog, CLocaleDialog)

CTelecommandOptionsLoggingRetrievalSettingsDialog::CTelecommandOptionsLoggingRetrievalSettingsDialog(CWnd *pParentWnd) : CLocaleDialog(CTelecommandOptionsLoggingRetrievalSettingsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelecommandOptionsLoggingRetrievalSettingsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTelecommandOptionsLoggingRetrievalSettingsDialog::DoModal(CString &szFileName)
{
	INT  nResult;

	for (m_szFileName[0] = m_szFileName[1] = szFileName; (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		szFileName = m_szFileName[0];
		break;
	}
	return nResult;
}

VOID CTelecommandOptionsLoggingRetrievalSettingsDialog::AdjustToPrivileges()
{
	AccessControl(IDC_TELECOMMANDOPTIONS_LOGGINGRETRIEVALSETTINGS_FILENAME, CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE));
}

BOOL CTelecommandOptionsLoggingRetrievalSettingsDialog::IsModified() CONST
{
	return((m_szFileName[0].CompareNoCase(m_szFileName[1])) ? TRUE : FALSE);
}

BOOL CTelecommandOptionsLoggingRetrievalSettingsDialog::Check(BOOL bModified) CONST
{
	return((!m_szFileName[0].IsEmpty()) ? (!bModified || IsModified()) : FALSE);
}

void CTelecommandOptionsLoggingRetrievalSettingsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandOptionsLoggingRetrievalSettingsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelecommandOptionsLoggingRetrievalSettingsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelecommandOptionsLoggingRetrievalSettingsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGRETRIEVALSETTINGS_BROWSE, OnBrowseFileName)
	ON_BN_CLICKED(IDC_TELECOMMANDOPTIONS_LOGGINGRETRIEVALSETTINGS_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TELECOMMANDOPTIONS_LOGGINGRETRIEVALSETTINGS_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandOptionsLoggingRetrievalSettingsDialog message handlers

BOOL CTelecommandOptionsLoggingRetrievalSettingsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGRETRIEVALSETTINGS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGRETRIEVALSETTINGS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGRETRIEVALSETTINGS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGRETRIEVALSETTINGS_FILENAME)->SetWindowText(m_szFileName[0]);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGRETRIEVALSETTINGS_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDOPTIONS_CHANGE));
	AdjustToPrivileges();
	return TRUE;
}

void CTelecommandOptionsLoggingRetrievalSettingsDialog::OnBrowseFileName()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELECOMMANDOPTIONS_LOGGINGRETRIEVALSETTINGS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_TCOPTIONSLOGFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TCOPTIONSLOGFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGRETRIEVALSETTINGS_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	SendDlgItemMessage(IDC_TELECOMMANDOPTIONS_LOGGINGRETRIEVALSETTINGS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGRETRIEVALSETTINGS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingRetrievalSettingsDialog::OnEditchangeFileName()
{
	GetDlgItem(IDC_TELECOMMANDOPTIONS_LOGGINGRETRIEVALSETTINGS_FILENAME)->GetWindowText(m_szFileName[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandOptionsLoggingRetrievalSettingsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnOK();
}

BOOL CTelecommandOptionsLoggingRetrievalSettingsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSLOGGINGRETRIEVALSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelecommandOptionsLoggingRetrievalSettingsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDOPTIONSLOGGINGRETRIEVALSETTINGSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandParameterSet

CTelecommandParameterSet::CTelecommandParameterSet() : CTCParameters()
{
	return;
}

CTelecommandParameterSet::~CTelecommandParameterSet()
{
	RemoveAll();
}

VOID CTelecommandParameterSet::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CTelecommandParameterSet::GetName() CONST
{
	return m_szName;
}

BOOL CTelecommandParameterSet::Copy(CONST CTelecommandParameterSet *pTCParameterSet)
{
	m_szName = pTCParameterSet->m_szName;
	return CTCParameters::Copy(pTCParameterSet);
}

BOOL CTelecommandParameterSet::Compare(CONST CTelecommandParameterSet *pTCParameterSet) CONST
{
	return((pTCParameterSet->m_szName == m_szName) ? CTCParameters::Compare(pTCParameterSet) : FALSE);
}

BOOL CTelecommandParameterSet::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;
	CByteArray  nParametersData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbParameters = (CTCParameters::Map(nParametersData, TRUE)) ? (INT)nParametersData.GetSize() : -1;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + max(sData.cbParameters, 0))); nInfo.GetSize() == sData.cbSize && sData.cbParameters >= 0; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), nParametersData.GetData(), sData.cbParameters);
		return TRUE;
	}
	return FALSE;
}

BOOL CTelecommandParameterSet::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;
	CByteArray  nParametersData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbParameters && sData.cbName > 0 && sData.cbParameters >= 0; )
	{
		for (nParametersData.SetSize(sData.cbParameters), CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(nParametersData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbName), sData.cbParameters); CTCParameters::Unmap(nParametersData, TRUE); ) return TRUE;
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandParameterSets

CTelecommandParameterSets::CTelecommandParameterSets() : CPtrArray()
{
	return;
}

CTelecommandParameterSets::~CTelecommandParameterSets()
{
	RemoveAll();
}

INT CTelecommandParameterSets::Add(CTelecommandParameterSet *pTCParameterSet)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pTCParameterSet->GetName(), TRUE)) >= 0) InsertAt(nIndex, pTCParameterSet, 1);
	return nIndex;
}

INT CTelecommandParameterSets::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CTelecommandParameterSet *CTelecommandParameterSets::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTelecommandParameterSet *)CPtrArray::GetAt(nIndex) : (CTelecommandParameterSet *)NULL);
}

CTelecommandParameterSet *CTelecommandParameterSets::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTelecommandParameterSet *)CPtrArray::GetAt(nIndex) : (CTelecommandParameterSet *)NULL);
}

VOID CTelecommandParameterSets::RemoveAll()
{
	INT  nSet;
	INT  nSets;

	for (nSet = 0, nSets = (INT)GetSize(); nSet < nSets; nSet++)
	{
		delete GetAt(nSet);
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CTelecommandParameterSets::Copy(CONST CTelecommandParameterSets *pTCParameterSets)
{
	INT  nSet;
	INT  nSets;
	CTelecommandParameterSet  *pTCParameterSet;

	for (nSet = 0, nSets = (INT)pTCParameterSets->GetSize(), RemoveAll(); nSet < nSets; nSet++)
	{
		if ((pTCParameterSet = new CTelecommandParameterSet))
		{
			pTCParameterSet->Copy(pTCParameterSets->GetAt(nSet));
			InsertAt(nSet, pTCParameterSet, 1);
			continue;
		}
		break;
	}
	return((nSet == nSets) ? TRUE : FALSE);
}

BOOL CTelecommandParameterSets::Compare(CONST CTelecommandParameterSets *pTCParameterSets) CONST
{
	INT  nSet;
	INT  nSets;

	for (nSet = 0, nSets = (pTCParameterSets->GetSize() == GetSize()) ? (INT)GetSize() : -1; nSet < nSets; nSet++)
	{
		if (!pTCParameterSets->GetAt(nSet)->Compare(GetAt(nSet))) break;
		continue;
	}
	return((nSet == nSets) ? TRUE : FALSE);
}

BOOL CTelecommandParameterSets::Map(CByteArray &nInfo) CONST
{
	INT  nSet;
	INT  nSets;
	CByteArray  nParameterSetsData;
	CTelecommandParameterSet  *pTCParameterSet;

	for (nSet = 0, nSets = (INT)GetSize(), nInfo.RemoveAll(); nSet < nSets; nSet++)
	{
		if ((pTCParameterSet = GetAt(nSet)) && pTCParameterSet->Map(nParameterSetsData) && nInfo.Append(nParameterSetsData) >= 0) continue;
		break;
	}
	return((nSet == nSets) ? TRUE : FALSE);
}

BOOL CTelecommandParameterSets::Unmap(CONST CByteArray &nInfo)
{
	INT  cbSet;
	INT  cbSets;
	CByteArray  nParameterSetsData;
	CTelecommandParameterSet  *pTCParameterSet;

	for (cbSets = 0, RemoveAll(); cbSets < nInfo.GetSize(); cbSets += cbSet)
	{
		for (CopyMemory(&cbSet, nInfo.GetData() + cbSets, sizeof(cbSet)), nParameterSetsData.SetSize(max(min(cbSet, nInfo.GetSize() - cbSets), 0)); nParameterSetsData.GetSize() >= 0; )
		{
			CopyMemory(nParameterSetsData.GetData(), nInfo.GetData() + cbSets, nParameterSetsData.GetSize());
			break;
		}
		if ((pTCParameterSet = new CTelecommandParameterSet))
		{
			if (pTCParameterSet->Unmap(nParameterSetsData))
			{
				InsertAt(GetSize(), pTCParameterSet, 1);
				continue;
			}
			delete pTCParameterSet;
		}
		break;
	}
	return((cbSets == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CTelecommandParameterSets::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CTelecommandParameterSet  *pTCParameterSet;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pTCParameterSet = GetAt(nIndex[0]))) ? ((nIndex[1] = (pTCParameterSet->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pTCParameterSet = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pTCParameterSet->GetName() == pszName) || (bInsert && (((pTCParameterSet = GetAt(max(nIndex[0] - 1, 0))) && pTCParameterSet->GetName() != pszName && (pTCParameterSet = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pTCParameterSet->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersCharacteristicsPage property page

IMPLEMENT_DYNCREATE(CTelecommandParametersCharacteristicsPage, CLocalePropertyPage)

CTelecommandParametersCharacteristicsPage::CTelecommandParametersCharacteristicsPage() : CLocalePropertyPage(CTelecommandParametersCharacteristicsPage::IDD)
{
	//{{AFX_DATA_INIT(CTelecommandParametersCharacteristicsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelecommandParametersCharacteristicsPage::ShowParameterInfo()
{
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_RAW, FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_NUMERICAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_STATUS, FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_VARIABLE, FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_FIXED, FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_FORMAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_BITPATTERN, FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_SIGNEDINTEGER, FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_UNSIGNEDINTEGER, FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_FLOATINGPOINT, FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_TIME, FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_BINARY, FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_OCTAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_DECIMAL, FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_HEXADECIMAL, FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_UNITS)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH_BITS)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH_BIT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_UNITS_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_UNITS)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_RAW)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_NUMERICAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_STATUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH_BITS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_VARIABLE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_FIXED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_FORMAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_BITPATTERN)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_SIGNEDINTEGER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_UNSIGNEDINTEGER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_FLOATINGPOINT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_BINARY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_OCTAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_DECIMAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_HEXADECIMAL)->EnableWindow(FALSE);
}
VOID CTelecommandParametersCharacteristicsPage::ShowParameterInfo(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	ULONGLONG  nAttributes;
	CStringTools  cStringTools;

	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_RAW, (((nAttributes = pDatabaseTCParameter->GetAttributes()) & TCPARAMETER_CALIBRATION_NONE) || (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_NUMERICAL, (nAttributes & TCPARAMETER_CALIBRATION_NUMERICAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_STATUS, (nAttributes & TCPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_VARIABLE, ((nAttributes & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_FIXED, (nAttributes & TCPARAMETER_TYPE_CONSTANT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_FORMAL, (nAttributes & TCPARAMETER_VTYPE_FORMAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_BITPATTERN, (nAttributes & TCPARAMETER_CODING_BITPATTERN) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_SIGNEDINTEGER, (nAttributes & TCPARAMETER_CODING_SIGNEDINTEGER) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_UNSIGNEDINTEGER, (nAttributes & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_FLOATINGPOINT, (nAttributes & TCPARAMETER_CODING_FLOATINGPOINT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_TIME, (nAttributes & TCPARAMETER_CODING_TIME) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_BINARY, (((nAttributes & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0 && (nAttributes & TCPARAMETER_CODING_BITPATTERN)) || (nAttributes & TCPARAMETER_RADIX_BINARY)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_OCTAL, (nAttributes & TCPARAMETER_RADIX_OCTAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_DECIMAL, (((nAttributes & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0 && (nAttributes & TCPARAMETER_CODING_BITPATTERN) == 0) || (nAttributes & TCPARAMETER_RADIX_DECIMAL)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_HEXADECIMAL, (nAttributes & TCPARAMETER_RADIX_HEXADECIMAL) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH)->SetWindowText(cStringTools.ConvertIntToString(pDatabaseTCParameter->GetWidth()));
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_UNITS)->SetWindowText(pDatabaseTCParameter->GetUnit());
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH_STATIC)->ShowWindow(SW_SHOW);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH)->ShowWindow(SW_SHOW);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH_BITS)->ShowWindow((pDatabaseTCParameter->GetWidth() > 1) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH_BIT)->ShowWindow((pDatabaseTCParameter->GetWidth() == 1) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_UNITS_STATIC)->ShowWindow((!pDatabaseTCParameter->GetUnit().IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_UNITS)->ShowWindow((!pDatabaseTCParameter->GetUnit().IsEmpty()) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_RAW)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_NUMERICAL)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_STATUS)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH_BITS)->EnableWindow((pDatabaseTCParameter->GetWidth() > 1) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_WIDTH_BIT)->EnableWindow((pDatabaseTCParameter->GetWidth() == 1) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_UNITS_STATIC)->EnableWindow(!pDatabaseTCParameter->GetUnit().IsEmpty());
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_UNITS)->EnableWindow(!pDatabaseTCParameter->GetUnit().IsEmpty());
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_VARIABLE)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_FIXED)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_FORMAL)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_BITPATTERN)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_SIGNEDINTEGER)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_UNSIGNEDINTEGER)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_FLOATINGPOINT)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_TIME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_BINARY)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_OCTAL)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_DECIMAL)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_HEXADECIMAL)->EnableWindow();
}

BOOL CTelecommandParametersCharacteristicsPage::HasParameterInfo() CONST
{
	return TRUE;
}

CTelecommandParametersFolder *CTelecommandParametersCharacteristicsPage::GetParent() CONST
{
	return((CTelecommandParametersFolder *)CLocalePropertyPage::GetParent());
}

void CTelecommandParametersCharacteristicsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandParametersCharacteristicsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTelecommandParametersCharacteristicsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelecommandParametersCharacteristicsPage)
	// NOTE: the ClassWizard will add message map macros here
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersCharacteristicsPage message handlers

BOOL CTelecommandParametersCharacteristicsPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	AccessControl(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_RAW, FALSE);
	AccessControl(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_NUMERICAL, FALSE);
	AccessControl(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_TYPE_STATUS, FALSE);
	AccessControl(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_VARIABLE, FALSE);
	AccessControl(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_FIXED, FALSE);
	AccessControl(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_VALUE_FORMAL, FALSE);
	AccessControl(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_BITPATTERN, FALSE);
	AccessControl(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_SIGNEDINTEGER, FALSE);
	AccessControl(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_UNSIGNEDINTEGER, FALSE);
	AccessControl(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_FLOATINGPOINT, FALSE);
	AccessControl(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_CODING_TIME, FALSE);
	AccessControl(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_BINARY, FALSE);
	AccessControl(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_OCTAL, FALSE);
	AccessControl(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_DECIMAL, FALSE);
	AccessControl(IDC_TELECOMMANDPARAMETERS_CHARACTERISTICSPAGE_RADIX_HEXADECIMAL, FALSE);
	return TRUE;
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersCalibrationPage property page

IMPLEMENT_DYNCREATE(CTelecommandParametersCalibrationPage, CLocalePropertyPage)

CTelecommandParametersCalibrationPage::CTelecommandParametersCalibrationPage() : CLocalePropertyPage(CTelecommandParametersCalibrationPage::IDD)
{
	//{{AFX_DATA_INIT(CTelecommandParametersCalibrationPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelecommandParametersCalibrationPage::ShowParameterInfo()
{
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_INTERPRETATION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_STATUS)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_INTERPRETATION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_INTERPRETATION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_STATUS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_STATUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow(FALSE);
}
VOID CTelecommandParametersCalibrationPage::ShowParameterInfo(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	INT  nIndex;
	CString  szName;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;

	for (SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE, CB_RESETCONTENT), m_nCalTableRefs.RemoveAll(); (m_nCalTableType = (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))) == TCPARAMETER_CALIBRATION_NUMERICAL; )
	{
		if ((pDatabaseTCNumCalTable = GetDatabase()->GetTCNumCalTables()->GetAt((nIndex = pDatabaseTCParameter->GetCalTableRef()))) != (CDatabaseTCNumCalTable *)NULL)
		{
			for (szName.Format(STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTCNumCalTable->GetDescription(), (LPCTSTR)pDatabaseTCNumCalTable->GetName()); pDatabaseTCNumCalTable->GetDescription().IsEmpty(); )
			{
				szName = pDatabaseTCNumCalTable->GetName();
				break;
			}
			SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName);
			m_nCalTableRefs.Add(nIndex);
		}
		break;
	}
	if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
	{
		if ((pDatabaseTCTxtCalTable = GetDatabase()->GetTCTxtCalTables()->GetAt((nIndex = pDatabaseTCParameter->GetCalTableRef()))))
		{
			for (szName.Format(STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTCTxtCalTable->GetDescription(), (LPCTSTR)pDatabaseTCTxtCalTable->GetName()); pDatabaseTCTxtCalTable->GetDescription().IsEmpty(); )
			{
				szName = pDatabaseTCTxtCalTable->GetName();
				break;
			}
			SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName);
			m_nCalTableRefs.Add(nIndex);
		}
	}
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE, CB_SETCURSEL);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_INTERPRETATION)->SetWindowText((GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE)->GetWindowTextLength() > 0) ? ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) ? STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_INTERPRETATION_FULL) : STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_INTERPRETATION_EXTRAPOLATE)) : EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_INTERPRETATION_STATIC)->EnableWindow((GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_INTERPRETATION)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_INTERPRETATION)->EnableWindow((GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_INTERPRETATION)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	ShowCalibrationInfo();
}

VOID CTelecommandParametersCalibrationPage::ShowCalibrationInfo()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	double  fPtX;
	double  fPtY;
	CString  szPtX;
	CString  szPtY;
	CString  szItem;
	CString  szText;
	CStringTools  cStringTools;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;

	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE, CB_GETCURSEL)) >= 0 && nIndex < m_nCalTableRefs.GetSize())
	{
		if ((pDatabaseTCNumCalTable = (m_nCalTableType == TCPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTCNumCalTables()->GetAt(m_nCalTableRefs.GetAt(nIndex)) : (CDatabaseTCNumCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCNumCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCNumCalPoint = pDatabaseTCNumCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							szItem = cStringTools.ConvertFloatToTruncatedString(pDatabaseTCNumCalPoint->GetX());
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = cStringTools.ConvertFloatToString(pDatabaseTCNumCalPoint->GetY());
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS), 0);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTCNumCalTable->GetName());
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TYPE_NUMERICAL));
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_STATUS)->SetWindowText(STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_STATUS_ACTIVE));
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_STATUS_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_STATUS)->EnableWindow();
			return;
		}
		if ((pDatabaseTCTxtCalTable = (m_nCalTableType == TCPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTCTxtCalTables()->GetAt(m_nCalTableRefs.GetAt(nIndex)) : (CDatabaseTCTxtCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCTxtCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							if (pDatabaseTCTxtCalPoint->GetRange(fPtX, fPtY, szText) || pDatabaseTCTxtCalPoint->GetPoint(fPtX, szText))
							{
								for (szPtX = szItem = cStringTools.ConvertFloatToTruncatedString(fPtX, -1), szPtY = cStringTools.ConvertFloatToTruncatedString(fPtY, -1); fPtX != fPtY; )
								{
									szItem.Format(STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINT_RANGE), (LPCTSTR)szPtX, (LPCTSTR)szPtY);
									break;
								}
								break;
							}
							szItem.Empty();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = (pDatabaseTCTxtCalPoint->GetPoint(fPtX, szText) || pDatabaseTCTxtCalPoint->GetRange(fPtX, fPtY, szText)) ? (LPCTSTR)szText : EMPTYSTRING;
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS), 0);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTCTxtCalTable->GetName());
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TYPE_STATUS));
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_STATUS)->SetWindowText(STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_STATUS_ACTIVE));
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_STATUS_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_STATUS)->EnableWindow();
			return;
		}
	}
	ShowParameterInfo();
}

BOOL CTelecommandParametersCalibrationPage::HasParameterInfo() CONST
{
	return((GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

CTelecommandParametersFolder *CTelecommandParametersCalibrationPage::GetParent() CONST
{
	return((CTelecommandParametersFolder *)CLocalePropertyPage::GetParent());
}

void CTelecommandParametersCalibrationPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandParametersCalibrationPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelecommandParametersCalibrationPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_nCalTableRefs.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelecommandParametersCalibrationPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelecommandParametersCalibrationPage)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TABLE, OnSelchangeTable)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersCalibrationPage message handlers

BOOL CTelecommandParametersCalibrationPage::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y));
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), rColumns.DeflateRect(0, 0, GetSystemMetrics(SM_CXVSCROLL), 0), nWidth = rColumns.Width() / 7; nColumn < nColumns; nWidth = (++nColumn == 1) ? ((5 * rColumns.Width()) / 14) : (rColumns.Width() / 2))
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELECOMMANDPARAMETERS_CALIBRATIONPAGE_POINTS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	return TRUE;
}

void CTelecommandParametersCalibrationPage::OnSelchangeTable()
{
	ShowCalibrationInfo();
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersLimitsPage property page

IMPLEMENT_DYNCREATE(CTelecommandParametersLimitsPage, CLocalePropertyPage)

CTelecommandParametersLimitsPage::CTelecommandParametersLimitsPage() : CLocalePropertyPage(CTelecommandParametersLimitsPage::IDD)
{
	//{{AFX_DATA_INIT(CTelecommandParametersLimitsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelecommandParametersLimitsPage::ShowParameterInfo()
{
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TABLE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_ID)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_STATUS)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TABLE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TABLE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_ID_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_ID)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_STATUS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_STATUS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS)->EnableWindow(FALSE);
}
VOID CTelecommandParametersLimitsPage::ShowParameterInfo(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	INT  nIndex;
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;

	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TABLE, CB_RESETCONTENT);
	for (m_nOolTableRefs.RemoveAll(); (m_nOolTableType = (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))) != TCPARAMETER_CALIBRATION_STATUS; )
	{
		if ((pDatabaseTCNumOolTable = GetDatabase()->GetTCNumOolTables()->GetAt((nIndex = pDatabaseTCParameter->GetOolTableRef()))))
		{
			SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TABLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTCNumOolTable->GetName());
			SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TABLE, CB_SETCURSEL);
			m_nOolTableRefs.Add(nIndex);
		}
		break;
	}
	if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
	{
		if ((pDatabaseTCTxtOolTable = GetDatabase()->GetTCTxtOolTables()->GetAt((nIndex = pDatabaseTCParameter->GetOolTableRef()))))
		{
			SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TABLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTCTxtOolTable->GetName());
			SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TABLE, CB_SETCURSEL);
			m_nOolTableRefs.Add(nIndex);
		}
	}
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TABLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TABLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TABLE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TABLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	ShowLimitsInfo();
}

VOID CTelecommandParametersLimitsPage::ShowLimitsInfo()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	UINT  nOolType;
	double  fLimitRange[2];
	CString  szItem;
	CString  szTable;
	CString  szLimitDelta;
	CString  szLimitRange[2];
	CStringTools  cStringTools;
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;
	CDatabaseTCNumOolLimit  *pDatabaseTCNumOolLimit;
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;
	CDatabaseTCTxtOolLimit  *pDatabaseTCTxtOolLimit;

	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS, LVM_DELETEALLITEMS);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TABLE, CB_GETCURSEL)) >= 0 && nIndex < m_nOolTableRefs.GetSize())
	{
		if ((pDatabaseTCNumOolTable = (m_nOolTableType == TCPARAMETER_CALIBRATION_NONE || m_nOolTableType == TCPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTCNumOolTables()->GetAt(m_nOolTableRefs.GetAt(nIndex)) : (CDatabaseTCNumOolTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCNumOolTable->GetSize(), szTable = cStringTools.ConvertUIntToPaddedString(m_nOolTableRefs.GetAt(nIndex), (INT)ceil(log10((double)GetDatabase()->GetTCNumOolTables()->GetSize()))), nCount = 0; nItem < nItems; nItem++)
			{
				if ((pDatabaseTCNumOolLimit = pDatabaseTCNumOolTable->GetAt(nItem)) && pDatabaseTCNumOolLimit->GetType() != TCOOLLIMIT_TYPE_STATUSCONSISTENCY  &&  pDatabaseTCNumOolLimit->GetType() != TCOOLLIMIT_TYPE_EVENT)
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (szItem.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nCount + 1);
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_TITLEITEM_LIMIT))
						{
							for (; pDatabaseTCNumOolLimit->GetRange(nOolType, fLimitRange[0], fLimitRange[1]); )
							{
								if (!(pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_FLOATINGPOINT) && (pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW))
								{
									if (pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_SIGNEDINTEGER)
									{
										szLimitRange[0] = cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[0]);
										szLimitRange[1] = cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[1]);
									}
									else
									{
										szLimitRange[0] = cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[0]);
										szLimitRange[1] = cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[1]);
									}
								}
								else
								{
									szLimitRange[0] = cStringTools.ConvertFloatToString(fLimitRange[0]);
									szLimitRange[1] = cStringTools.ConvertFloatToString(fLimitRange[1]);
								}
								szItem.Format(STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_LIMIT_RANGE), (LPCTSTR)szLimitRange[0], (LPCTSTR)szLimitRange[1]);
								break;
							}
							for (; pDatabaseTCNumOolLimit->GetType() == TCOOLLIMIT_TYPE_DELTA; )
							{
								if (pDatabaseTCNumOolLimit->GetDelta(fLimitRange[0], TRUE) && pDatabaseTCNumOolLimit->GetDelta(fLimitRange[1], FALSE))
								{
									szLimitDelta.Format(STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_DELTA_MINMAX_FORMAT), (pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) ? ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_UNSIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[0]) : ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_SIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[0]) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[0]))) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[0]), (pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) ? ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_UNSIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[1]) : ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_SIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[1]) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[1]))) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[1]));
									szItem = szLimitDelta;
									break;
								}
								if (pDatabaseTCNumOolLimit->GetDelta(fLimitRange[0], TRUE))
								{
									szLimitDelta.Format(STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_DELTA_MIN_FORMAT), (pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) ? ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_UNSIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[0]) : ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_SIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[0]) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[0]))) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[0]));
									szItem = szLimitDelta;
									break;
								}
								if (pDatabaseTCNumOolLimit->GetDelta(fLimitRange[1], FALSE))
								{
									szLimitDelta.Format(STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_DELTA_MAX_FORMAT), (pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) ? ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_UNSIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[1]) : ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_SIGNEDINTEGER) ? (LPCTSTR)cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[1]) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[1]))) : (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[1]));
									szItem = szLimitDelta;
								}
								break;
							}
							if (!szItem.IsEmpty())
							{
								szItem += (nOolType == TCOOLLIMIT_TYPE_HARD) ? STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_LIMIT_HARD) : EMPTYSTRING;
								szItem += (nOolType == TCOOLLIMIT_TYPE_SOFT) ? STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_LIMIT_SOFT) : EMPTYSTRING;
								szItem += (nOolType == TCOOLLIMIT_TYPE_DELTA) ? STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_LIMIT_DELTA) : EMPTYSTRING;
							}
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS), nCount, szItem);
							nCount++;
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS), nCount - 1, nColumn, szItem);
					}
				}
			}
			Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS), 0);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_ID)->SetWindowText(szTable);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TYPE)->SetWindowText(STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_TYPE_NUMERICAL));
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_STATUS)->SetWindowText(STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_STATUS_ACTIVE));
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_ID)->EnableWindow((GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TYPE)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_STATUS_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_STATUS)->EnableWindow();
			return;
		}
		if ((pDatabaseTCTxtOolTable = (m_nOolTableType == TCPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTCTxtOolTables()->GetAt(m_nOolTableRefs.GetAt(nIndex)) : (CDatabaseTCTxtOolTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCTxtOolTable->GetSize(), szTable = cStringTools.ConvertUIntToPaddedString(m_nOolTableRefs.GetAt(nIndex), (INT)ceil(log10((double)GetDatabase()->GetTCTxtOolTables()->GetSize()))); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCTxtOolLimit = pDatabaseTCTxtOolTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (szItem.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_TITLEITEM_LIMIT))
						{
							if (pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW)
							{
								if (pDatabaseTCTxtOolLimit->GetLimit(fLimitRange[0]))
								{
									szLimitRange[0] = (pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CODING_FLOATINGPOINT) ? (LPCTSTR)cStringTools.ConvertFloatToString(fLimitRange[0]) : EMPTYSTRING;
									szLimitRange[0] = (pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CODING_SIGNEDINTEGER) ? cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[0]) : szLimitRange[0];
									szLimitRange[0] = (szLimitRange[0].IsEmpty()) ? cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[0]) : szLimitRange[0];
									szItem = szLimitRange[0];
								}
								else
								{
									if (pDatabaseTCTxtOolLimit->GetRange(fLimitRange[0], fLimitRange[1]))
									{
										if (!(pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CODING_FLOATINGPOINT))
										{
											if (pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CODING_SIGNEDINTEGER)
											{
												szLimitRange[0] = cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[0]);
												szLimitRange[1] = cStringTools.ConvertLongIntToString((LONGLONG)fLimitRange[1]);
											}
											else
											{
												szLimitRange[0] = cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[0]);
												szLimitRange[1] = cStringTools.ConvertLongUIntToString((ULONGLONG)fLimitRange[1]);
											}
										}
										else
										{
											szLimitRange[0] = cStringTools.ConvertFloatToString(fLimitRange[0]);
											szLimitRange[1] = cStringTools.ConvertFloatToString(fLimitRange[1]);
										}
										szItem.Format(STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_LIMIT_RANGE), (LPCTSTR)szLimitRange[0], (LPCTSTR)szLimitRange[1]);
									}
								}
							}
							for (; pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_CALIBRATED; )
							{
								if (pDatabaseTCTxtOolLimit->GetLimit(szLimitRange[0]) || (pDatabaseTCTxtOolLimit->GetRange(szLimitRange[0], szLimitRange[1]) && szLimitRange[0] == szLimitRange[1]))
								{
									szItem = szLimitRange[0];
									break;
								}
								szItem.Format(STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_LIMIT_RANGE), (LPCTSTR)szLimitRange[0], (LPCTSTR)szLimitRange[1]);
								break;
							}
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS), 0);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_ID)->SetWindowText(szTable);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TYPE)->SetWindowText(STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_TYPE_STATUS));
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_STATUS)->SetWindowText(STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_STATUS_ACTIVE));
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_ID)->EnableWindow((GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TYPE)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_STATUS_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_STATUS)->EnableWindow();
			return;
		}
	}
	ShowParameterInfo();
}

BOOL CTelecommandParametersLimitsPage::HasParameterInfo() CONST
{
	return((GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TABLE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

CTelecommandParametersFolder *CTelecommandParametersLimitsPage::GetParent() CONST
{
	return((CTelecommandParametersFolder *)CLocalePropertyPage::GetParent());
}

void CTelecommandParametersLimitsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandParametersLimitsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelecommandParametersLimitsPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_nOolTableRefs.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelecommandParametersLimitsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelecommandParametersLimitsPage)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_TABLE, OnSelchangeTable)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersLimitsPage message handlers

BOOL CTelecommandParametersLimitsPage::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_TITLEITEM_NUMBER));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERS_LIMITSPAGE_TITLEITEM_LIMIT));
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), rColumns.DeflateRect(0, 0, GetSystemMetrics(SM_CXVSCROLL), 0), nWidth = rColumns.Width() / 7; nColumn < nColumns; nWidth = (++nColumn < nColumns) ? ((6 * rColumns.Width()) / 7) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELECOMMANDPARAMETERS_LIMITSPAGE_POINTS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	return TRUE;
}

void CTelecommandParametersLimitsPage::OnSelchangeTable()
{
	ShowLimitsInfo();
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersAllocationsPage property page

IMPLEMENT_DYNCREATE(CTelecommandParametersAllocationsPage, CLocalePropertyPage)

CTelecommandParametersAllocationsPage::CTelecommandParametersAllocationsPage() : CLocalePropertyPage(CTelecommandParametersAllocationsPage::IDD)
{
	//{{AFX_DATA_INIT(CTelecommandParametersAllocationsPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTelecommandParametersAllocationsPage::ShowParameterInfo()
{
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_LOCATIONS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_COMMENT1)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_COMMENT2)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_COMMENT1)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_COMMENT2)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_LOCATIONS)->EnableWindow(FALSE);
}
VOID CTelecommandParametersAllocationsPage::ShowParameterInfo(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	INT  nPacket;
	INT  nPackets;
	INT  nFunction;
	INT  nFunctions;
	INT  nOccurrence;
	INT  nOccurrences;
	CString  szItem;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;

	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_LOCATIONS, LVM_DELETEALLITEMS);
	for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(), nCount = 0; nFunction < nFunctions; nFunction++)
	{
		if ((pDatabaseTCFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
		{
			for (nOccurrence = 0, nOccurrences = (INT)pDatabaseTCFunction->GetSize(); nOccurrence < nOccurrences; nOccurrence++)
			{
				if ((pDatabaseTCFunctionElement = pDatabaseTCFunction->GetAt(pDatabaseTCFunction->Find(pDatabaseTCParameter->GetTag(), nOccurrence))))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TITLEITEM_NAME); )
						{
							szItem = (!nOccurrence) ? pDatabaseTCFunction->GetName() : EMPTYSTRING;
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TITLEITEM_DESCRIPTION); )
						{
							szItem = (!nOccurrence) ? pDatabaseTCFunction->GetDescription() : EMPTYSTRING;
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TITLEITEM_POSITION); )
						{
							szItem.Format(STRING(IDS_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_POSITIONFORMAT), pDatabaseTCFunctionElement->GetBytePos(), pDatabaseTCFunctionElement->GetBitPos(), pDatabaseTCFunctionElement->GetWidth());
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_LOCATIONS), nCount, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_LOCATIONS), nCount, nColumn, szItem);
					}
					nCount++;
					continue;
				}
				break;
			}
		}
	}
	for (nPacket = 0, nPackets = (!SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_LOCATIONS, LVM_GETITEMCOUNT)) ? (INT)GetDatabase()->GetTCPackets()->GetSize() : -1; nPacket < nPackets; nPacket++)
	{
		if ((pDatabaseTCPacket = GetDatabase()->GetTCPackets()->GetAt(nPacket)))
		{
			if (pDatabaseTCPacket->Find(pDatabaseTCParameter->GetTag()) >= 0) break;
			continue;
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_LOCATIONS), 0);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TYPE)->SetWindowText((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_LOCATIONS, LVM_GETITEMCOUNT) > 0) ? STRING(IDS_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TYPE_TCFUNCTIONPARAMETER) : ((nPacket < nPackets) ? STRING(IDS_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TYPE_TCPACKETPARAMETER) : STRING(IDS_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TYPE_UNKNOWN)));
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_COMMENT1)->ShowWindow((nPacket < nPackets) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_COMMENT1)->EnableWindow((nPacket < nPackets) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_COMMENT2)->ShowWindow((nPacket == nPackets) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_COMMENT2)->EnableWindow((nPacket == nPackets) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_LOCATIONS)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_LOCATIONS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TYPE)->EnableWindow();
}

BOOL CTelecommandParametersAllocationsPage::HasParameterInfo() CONST
{
	return TRUE;
}

CTelecommandParametersFolder *CTelecommandParametersAllocationsPage::GetParent() CONST
{
	return((CTelecommandParametersFolder *)CLocalePropertyPage::GetParent());
}

void CTelecommandParametersAllocationsPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandParametersAllocationsPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelecommandParametersAllocationsPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelecommandParametersAllocationsPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTelecommandParametersAllocationsPage)
	// NOTE: the ClassWizard will add message map macros here
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersAllocationsPage message handlers

BOOL CTelecommandParametersAllocationsPage::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TITLEITEM_POSITION));
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_LOCATIONS)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), rColumns.DeflateRect(0, 0, GetSystemMetrics(SM_CXVSCROLL), 0), SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_LOCATIONS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_LOCATIONS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TITLEITEM_NAME)) ? (rColumns.Width() / 5) : (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERS_ALLOCATIONSPAGE_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() - rColumns.Width() / 4 - rColumns.Width() / 5) : (rColumns.Width() / 4));
		continue;
	}
	return TRUE;
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersFolderTabCtrl

IMPLEMENT_DYNCREATE(CTelecommandParametersFolderTabCtrl, CTabCtrl)

CTelecommandParametersFolder *CTelecommandParametersFolderTabCtrl::GetParent() CONST
{
	return((CTelecommandParametersFolder *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CTelecommandParametersFolderTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTelecommandParametersFolderTabCtrl)
	ON_WM_GETDLGCODE()
	ON_WM_KEYDOWN()
	ON_WM_LBUTTONDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersFolderTabCtrl message handlers

UINT CTelecommandParametersFolderTabCtrl::OnGetDlgCode()
{
	return CTabCtrl::OnGetDlgCode() | DLGC_WANTTAB;
}

void CTelecommandParametersFolderTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	INT  nIndex;
	INT  nCount;
	CWnd  *pWnd;

	if ((nChar == VK_LEFT  &&  GetCurSel() > 0) || (nChar == VK_RIGHT  &&  GetCurSel() < GetItemCount() - 1))
	{
		for (nIndex = (nChar == VK_LEFT) ? (GetCurSel() - 1) : (GetCurSel() + 1), nCount = GetItemCount(); nIndex >= 0 && nIndex < nCount; )
		{
			if (!GetParent()->CheckPageAccessibility(nIndex))
			{
				if (nChar == VK_RIGHT  &&  nIndex < nCount - 1)
				{
					nIndex++;
					continue;
				}
				if (nChar == VK_LEFT  &&  nIndex > 0)
				{
					nIndex--;
					continue;
				}
				CAudioDevice::AlertBySound();
				return;
			}
			GetParent()->SetActivePage(nIndex);
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	if (nChar == VK_TAB)
	{
		if ((pWnd = GetParent()->GetParent()->GetNextDlgTabItem(GetParent(), (HIBYTE(GetKeyState(VK_SHIFT))) ? TRUE : FALSE)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}

void CTelecommandParametersFolderTabCtrl::OnLButtonDown(UINT nFlags, CPoint point)
{
	INT  nIndex;
	INT  nCount;
	CRect  rTab;

	for (nIndex = 0, nCount = GetItemCount(), SetFocus(); nIndex < nCount; nIndex++)
	{
		if (GetItemRect(nIndex, rTab) && rTab.PtInRect(point))
		{
			if (!GetParent()->CheckPageAccessibility(nIndex))
			{
				CAudioDevice::AlertBySound();
				return;
			}
			break;
		}
	}
	CTabCtrl::OnLButtonDown(nFlags, point);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersFolder

IMPLEMENT_DYNCREATE(CTelecommandParametersFolder, CLocalePropertySheetDialog)

CTelecommandParametersFolder::CTelecommandParametersFolder() : CLocalePropertySheetDialog()
{
	AddPage(&m_pageCharacteristics);
	AddPage(&m_pageCalibration);
	AddPage(&m_pageLimits);
	AddPage(&m_pageAllocations);
}

BOOL CTelecommandParametersFolder::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	INT  nIndex;

	if (CLocalePropertySheetDialog::Create(pParentWnd, WS_CHILD | WS_TABSTOP | WS_DISABLED))
	{
		for (nIndex = GetPageCount() - 1, m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()); nIndex >= 0; nIndex--)
		{
			SetActivePage(nIndex);
			continue;
		}
		MoveWindow(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
		ShowWindow(SW_SHOWNORMAL);
		EnableWindow();
		return TRUE;
	}
	return FALSE;
}

VOID CTelecommandParametersFolder::ShowParameterInfo()
{
	m_pageCharacteristics.ShowParameterInfo();
	m_pageCalibration.ShowParameterInfo();
	m_pageLimits.ShowParameterInfo();
	m_pageAllocations.ShowParameterInfo();
}
VOID CTelecommandParametersFolder::ShowParameterInfo(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	m_pageCharacteristics.ShowParameterInfo(pDatabaseTCParameter);
	m_pageCalibration.ShowParameterInfo(pDatabaseTCParameter);
	m_pageLimits.ShowParameterInfo(pDatabaseTCParameter);
	m_pageAllocations.ShowParameterInfo(pDatabaseTCParameter);
}

BOOL CTelecommandParametersFolder::CheckPageAccessibility(INT nIndex) CONST
{
	LPVOID  pPage;

	return((nIndex >= 0 && nIndex < m_pages.GetSize()) ? ((((pPage = m_pages.GetAt(nIndex)) == &m_pageCharacteristics  &&  m_pageCharacteristics.HasParameterInfo()) || (pPage == &m_pageCalibration  &&  m_pageCalibration.HasParameterInfo()) || (pPage == &m_pageLimits  &&  m_pageLimits.HasParameterInfo()) || (pPage == &m_pageAllocations  &&  m_pageAllocations.HasParameterInfo())) ? TRUE : FALSE) : FALSE);
}

CTelecommandParametersDialog *CTelecommandParametersFolder::GetParent() CONST
{
	return((CTelecommandParametersDialog *)CLocalePropertySheetDialog::GetParent());
}

BEGIN_MESSAGE_MAP(CTelecommandParametersFolder, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CTelecommandParametersFolder)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersFolder message handlers

void CTelecommandParametersFolder::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(m_wndTabCtrl.GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CLocalePropertySheetDialog::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersDialog dialog

IMPLEMENT_DYNCREATE(CTelecommandParametersDialog, CLocaleDialog)

CTelecommandParametersDialog::CTelecommandParametersDialog(CWnd *pParentWnd) : CLocaleDialog(CTelecommandParametersDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelecommandParametersDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTelecommandParametersDialog::EnumParameters()
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;

	for (nParameter = 0, nParameters = (INT)GetDatabase()->GetTCParameters()->GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(nParameter)) != (CDatabaseTCParameter *)NULL)
		{
			szParameter.Format(STRING(IDS_TELECOMMANDPARAMETERSDIALOG_NAMEFORMAT), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)pDatabaseTCParameter->GetDescription());
			SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameter);
		}
	}
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_NAME, CB_SETCURSEL);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_RESETALL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_NAME, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
	return TRUE;
}

BOOL CTelecommandParametersDialog::EnumParameterSets()
{
	INT  nSet;
	INT  nSets;
	CByteArray  nSetsInfo;
	CTelecommandParameterSet  *pTCParameterSet;
	CProfile  cProfile;

	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_RESETCONTENT);
	for (nSet = 0, nSets = (cProfile.GetTelecommandParameterSetsInfo(nSetsInfo) && m_pTCParameterSets[0].Unmap(nSetsInfo) && m_pTCParameterSets[1].Copy(&m_pTCParameterSets[0])) ? (INT)m_pTCParameterSets[0].GetSize() : -1; nSet < nSets; nSet++)
	{
		if ((pTCParameterSet = m_pTCParameterSets[0].GetAt(nSet))) SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pTCParameterSet->GetName());
		continue;
	}
	return((nSet == nSets) ? TRUE : FALSE);
}

BOOL CTelecommandParametersDialog::EnumParameterValues()
{
	INT  nValue;
	INT  nValues;
	double  fX[2];
	CString  szValue[2];
	CStringTools  cStringTools;
	CTCParameter  *pTCParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;

	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE, CB_RESETCONTENT);
	if ((pDatabaseTCParameter = ((pTCParameter = m_cTCParameterSet.GetAt(Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS))))) ? GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pTCParameter->GetTag())) : (CDatabaseTCParameter *)NULL))
	{
		if ((pDatabaseTCTxtCalTable = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTCTxtCalTables()->GetAt(pDatabaseTCParameter->GetCalTableRef()) : (CDatabaseTCTxtCalTable *)NULL))
		{
			for (nValue = 0, nValues = (INT)pDatabaseTCTxtCalTable->GetSize(); nValue < nValues; nValue++)
			{
				if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nValue)))
				{
					if (pDatabaseTCTxtCalPoint->GetPoint(fX[0], szValue[0]))
					{
						szValue[1].Format(STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERVALUEPOINT_FORMAT), (LPCTSTR)szValue[0], (pTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? (LPCTSTR)cStringTools.ConvertFloatToString(fX[0]) : (LPCTSTR)cStringTools.ConvertLongIntToString((LONGLONG)fX[0]));
						SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[1]);
						continue;
					}
					if (pDatabaseTCTxtCalPoint->GetRange(fX[0], fX[1], szValue[0]))
					{
						szValue[1].Format(STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERVALUERANGE_FORMAT), (LPCTSTR)szValue[0], (pTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? (LPCTSTR)cStringTools.ConvertFloatToString(fX[0]) : (LPCTSTR)cStringTools.ConvertLongIntToString((LONGLONG)fX[0]), (pTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? (LPCTSTR)cStringTools.ConvertFloatToString(fX[1]) : (LPCTSTR)cStringTools.ConvertLongIntToString((LONGLONG)fX[1]));
						SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[1]);
						continue;
					}
				}
			}
			SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pTCParameter->GetValueAsText(GetDatabase(), 0, szValue[0])) ? (LPCTSTR)szValue[0] : EMPTYSTRING)));
		}
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE)->SetWindowText((pTCParameter->GetValueAsText(GetDatabase(), 0, szValue[0])) ? szValue[0] : EMPTYSTRING);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_COMMENT)->ShowWindow((!pTCParameter->GetValueCount()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_COMMENT)->EnableWindow((!pTCParameter->GetValueCount()) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE)->EnableWindow();
		return TRUE;
	}
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_COMMENT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_COMMENT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE)->EnableWindow(FALSE);
	return FALSE;
}

VOID CTelecommandParametersDialog::ShowParameterSetMembers()
{
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	UINT  nOolStatus;
	CString  szItem;
	CStringTools  cStringTools;
	CTCParameter  *pTCParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;

	for (nParameter = 0, nParameters = (INT)m_cTCParameterSet.GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter = ((pTCParameter = m_cTCParameterSet.GetAt(nParameter))) ? GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pTCParameter->GetTag())) : (CDatabaseTCParameter *)NULL))
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_TAG); )
				{
					szItem = pTCParameter->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_DESCRIPTION); )
				{
					szItem = pDatabaseTCParameter->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_TYPE))
				{
					szItem = ((pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERTYPE_RAW) : EMPTYSTRING;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERTYPE_NUMERICAL) : szItem;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERTYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pDatabaseTCParameter->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_CODING))
				{
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERVALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERVALUECODING_TIME) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_RADIX))
				{
					szItem = (((pTCParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0 && (pTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN)) || (pTCParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY)) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERVALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERVALUERADIX_OCTAL) : szItem;
					szItem = (((pTCParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0 && (pTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) == 0) || (pTCParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL)) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERVALUERADIX_DECIMAL) : szItem;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERVALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_FLAG); )
				{
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERVALUEFLAG_FIXED) : (((pTCParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERVALUEFLAG_VARIABLE) : STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERVALUEFLAG_AUTOMATIC));
					szItem += (pTCParameter->GetAttributes() & TCPARAMETER_VTYPE_FORMAL) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERVALUEFLAG_FORMAL) : EMPTYSTRING;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_VALUE); )
				{
					szItem = (pTCParameter->GetValueAsText(GetDatabase(), 0, szItem)) ? szItem : EMPTYSTRING;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_LIMITCHECK); )
				{
					if ((nOolStatus = CheckTCParameterOolStatus(pTCParameter)) == TCPARAMETER_STATUS_NOLIMIT)
					{
						szItem = STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERLIMITCHECK_NOLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
					{
						szItem = STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERLIMITCHECK_SOFTLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
					{
						szItem = STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERLIMITCHECK_HARDLIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
					{
						szItem = STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERLIMITCHECK_DELTALIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
					{
						szItem = STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERLIMITCHECK_VALUELIMIT);
						break;
					}
					if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
					{
						szItem = STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERLIMITCHECK_TIMELIMIT);
						break;
					}
					szItem = (nOolStatus != (UINT)-1) ? ((pTCParameter->GetValueCount() > 0) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERLIMITCHECK_NONE) : ((pTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERLIMITCHECK_NOTIME) : EMPTYSTRING)) : STRING(IDS_TELECOMMANDPARAMETERSDIALOG_MEMBERLIMITCHECK_FAILURE);
					break;
				}
				if (nParameter >= SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT) && !nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS), nParameter, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS), nParameter, nColumn, szItem);
			}
		}
	}
	while (nParameters < SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT))
	{
		Listview_DeleteText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS), nParameters);
		continue;
	}
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTelecommandParametersDialog::ShowParameterInfo()
{
	CDatabaseTCParameter  *pDatabaseTCParameter;

	if ((pDatabaseTCParameter = FindParameter()))
	{
		for (m_cDatabaseTCParameter.Copy(pDatabaseTCParameter); (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0; )
		{
			m_cDatabaseTCParameter.SetAttributes((m_cDatabaseTCParameter.GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_HEXADECIMAL)) | TCPARAMETER_RADIX_DECIMAL);
			break;
		}
		m_wndFolderCtrl.ShowParameterInfo(&m_cDatabaseTCParameter);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_ADD)->EnableWindow((m_cTCParameterSet.Find(m_cDatabaseTCParameter.GetTag()) < 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
		return;
	}
	if ((pDatabaseTCParameter = new CDatabaseTCParameter))
	{
		m_cDatabaseTCParameter.Copy(pDatabaseTCParameter);
		delete pDatabaseTCParameter;
	}
	m_wndFolderCtrl.ShowParameterInfo();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(FALSE);
}

CDatabaseTCParameter *CTelecommandParametersDialog::FindParameter() CONST
{
	INT  nPos;
	CString  szFormat;
	CString  szParameter;

	GetDlgItem(IDC_TELECOMMANDPARAMETERS_NAME)->GetWindowText(szParameter);
	szFormat.Format(STRING(IDS_TELECOMMANDPARAMETERSDIALOG_NAMEFORMAT), EMPTYSTRING, EMPTYSTRING);
	return(((nPos = szParameter.Find(szFormat)) >= 0) ? GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(szParameter.Left(nPos))) : (CDatabaseTCParameter *)NULL);
}

UINT CTelecommandParametersDialog::CheckTCParameterOolStatus(CONST CTCParameter *pTCParameter) CONST
{
	UINT  nOolStatus;
	CString  szValue;
	CDatabaseTCParameter  *pDatabaseTCParameter[2];

	for (nOolStatus = TCPARAMETER_STATUS_NONE; (pDatabaseTCParameter[1] = ((pDatabaseTCParameter[0] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pTCParameter->GetTag())))) ? new CDatabaseTCParameter : (CDatabaseTCParameter *)NULL); )
	{
		for (pDatabaseTCParameter[1]->Copy(pDatabaseTCParameter[0]), pDatabaseTCParameter[1]->SetAttributes(pTCParameter->GetAttributes()), pDatabaseTCParameter[1]->SetConstValueAsText((pTCParameter->GetValueAsText(GetDatabase(), 0, szValue)) ? szValue : EMPTYSTRING); GetTCService()->CheckTCParameterOolStatus(pDatabaseTCParameter[1], nOolStatus); )
		{
			delete pDatabaseTCParameter[1];
			return nOolStatus;
		}
		delete pDatabaseTCParameter[1];
		break;
	}
	return((UINT)-1);
}

CRect CTelecommandParametersDialog::CalcFolderSize() CONST
{
	CRect  rFolder;

	GetDlgItem(IDC_TELECOMMANDPARAMETERS_FOLDER)->GetWindowRect(rFolder);
	ScreenToClient(rFolder);
	return rFolder;
}

VOID CTelecommandParametersDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE, (bCheck = CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE)), TRUE, FALSE);
	AccessControl(IDC_TELECOMMANDPARAMETERS_SETS_NAME, bCheck);
}

BOOL CTelecommandParametersDialog::IsModified() CONST
{
	return((!m_pTCParameterSets[0].Compare(&m_pTCParameterSets[1]) || m_cTCParameterSet.GetSize() > 0) ? TRUE : FALSE);
}

void CTelecommandParametersDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandParametersDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelecommandParametersDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_cTCParameterSet.RemoveAll();
	m_pTCParameterSets[0].RemoveAll();
	m_pTCParameterSets[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelecommandParametersDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelecommandParametersDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_ADD, OnAddSetMember)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVE, OnRemoveSetMember)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVEALL, OnRemoveAllSetMembers)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_SET, OnSetMemberValueInitialization)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_SETS_SAVE, OnSaveSet)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_SETS_DELETE, OnDeleteSet)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_SETS_IMPORT, OnImportSets)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_SETS_EXPORT, OnExportSets)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_RESETALL, OnResetAllParameters)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDPARAMETERS_NAME, OnSelchangeParameter)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE, OnSelchangeSetMemberValue)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDPARAMETERS_SETS_NAME, OnSelchangeSetName)
	ON_CBN_EDITCHANGE(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE, OnEditchangeSetMemberValue)
	ON_CBN_EDITCHANGE(IDC_TELECOMMANDPARAMETERS_SETS_NAME, OnEditchangeSetName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersDialog message handlers

BOOL CTelecommandParametersDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_LIMITCHECK));
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_FLAG)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSDIALOG_SETSTITLEITEM_BITLENGTH)) ? (rColumns.Width() / 9) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	for (EnumParameterSets(); m_wndFolderCtrl.Create(this, CalcFolderSize()) && SetChildSheet(&m_wndFolderCtrl, GetDlgItem(IDC_TELECOMMANDPARAMETERS_FOLDER - 1)); )
	{
		if (EnumParameters()) ShowParameterInfo();
		break;
	}
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_NAME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_NAME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_DELETE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_IMPORT)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE));
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_EXPORT)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTelecommandParametersDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) EnumParameterValues();
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

void CTelecommandParametersDialog::OnAddSetMember()
{
	INT  nIndex[2];
	CTCParameter  *pTCParameter;
	CTCParameters  pTCParameters;
	CHourglassCursor  cCursor;

	if ((pTCParameter = new CTCParameter))
	{
		for (pTCParameter->SetTag(m_cDatabaseTCParameter.GetTag()), pTCParameter->SetAttributes(m_cDatabaseTCParameter.GetAttributes()); (nIndex[0] = pTCParameters.Add(pTCParameter)) >= 0; )
		{
			if ((nIndex[1] = (GetTCService()->Initialize(pTCParameters)) ? m_cTCParameterSet.Add(pTCParameter) : -1) >= 0)
			{
				pTCParameters.CPtrArray::RemoveAll();
				ShowParameterSetMembers();
			}
			Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS), max(nIndex[1], 0));
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE));
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE));
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_NAME_STATIC)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_NAME)->EnableWindow();
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_SAVE)->EnableWindow((GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_NAME)->GetWindowTextLength() > 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE)->SetFocus();
			break;
		}
		if (nIndex[0] < 0) delete pTCParameter;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersDialog::OnRemoveSetMember()
{
	INT  nIndex;
	CTCParameter  *pTCParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CHourglassCursor  cCursor;

	if ((pTCParameter = m_cTCParameterSet.GetAt((nIndex = Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS))))))
	{
		if (Listview_DeleteText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS), nIndex))
		{
			if (SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT) > 0)
			{
				Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS), 0);
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(((pDatabaseTCParameter = FindParameter()) && (m_cTCParameterSet.Find(pDatabaseTCParameter->GetTag()) < 0 || pDatabaseTCParameter->GetTag() == pTCParameter->GetTag())) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE));
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVEALL)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE));
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_SAVE)->EnableWindow((GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_NAME)->GetWindowTextLength() > 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
			}
			else
			{
				SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE, CB_RESETCONTENT);
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_COMMENT)->ShowWindow(SW_HIDE);
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_COMMENT)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE));
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVE)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVEALL)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_STATIC)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_NAME)->SetFocus();
			}
			m_cTCParameterSet.RemoveAt(nIndex);
			delete pTCParameter;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersDialog::OnRemoveAllSetMembers()
{
	CHourglassCursor  cCursor;

	m_cTCParameterSet.RemoveAll();
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS, LVM_DELETEALLITEMS);
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE, CB_RESETCONTENT);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_COMMENT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_COMMENT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE));
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersDialog::OnSetMemberValueInitialization()
{
	INT  nPos;
	CString  szValue;
	ULONGLONG  nValue;
	CTCParameter  *pTCParameter;
	CHourglassCursor  cCursor;

	if ((pTCParameter = m_cTCParameterSet.GetAt(Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS)))))
	{
		for (GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE)->GetWindowText(szValue), szValue = ((nPos = (SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue) >= 0) ? szValue.ReverseFind(SPACE[0]) : -1) >= 0) ? szValue.Left(nPos) : szValue; (pTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 && GetTCService()->ConvertTCParameterValue(pTCParameter->GetTag(), pTCParameter->GetAttributes(), szValue, nValue); )
		{
			pTCParameter->SetRawValue(0, nValue, CheckTCParameterOolStatus(pTCParameter));
			break;
		}
		for (; pTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME; )
		{
			pTCParameter->SetRawValue(0, GetDatabase()->TranslateTCParameterConstTime(pTCParameter->GetAttributes(), szValue));
			break;
		}
		for (GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE); szValue.IsEmpty(); )
		{
			pTCParameter->Reset();
			break;
		}
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_COMMENT)->ShowWindow((!pTCParameter->GetValueCount()) ? SW_SHOW : SW_HIDE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_COMMENT)->EnableWindow((!pTCParameter->GetValueCount()) ? TRUE : FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_SAVE)->EnableWindow((GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_NAME)->GetWindowTextLength() > 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS)->SetFocus();
		ShowParameterSetMembers();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersDialog::OnSaveSet()
{
	INT  nIndex;
	CString  szName;
	CTelecommandParameterSet  *pTCParameterSet;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_NAME)->GetWindowText(szName);
	if ((pTCParameterSet = (SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0 || SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szName) >= 0) ? new CTelecommandParameterSet : (CTelecommandParameterSet *)NULL))
	{
		for (pTCParameterSet->Copy(&m_cTCParameterSet), pTCParameterSet->SetName(szName); (nIndex = m_pTCParameterSets[0].Find(pTCParameterSet->GetName())) >= 0; )
		{
			m_pTCParameterSets[0].GetAt(nIndex)->Copy(pTCParameterSet);
			delete pTCParameterSet;
			break;
		}
		for (; nIndex < 0; )
		{
			if (m_pTCParameterSets[0].Add(pTCParameterSet) < 0)
			{
				SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName));
				SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_SETCURSEL, (WPARAM)-1);
				delete pTCParameterSet;
				break;
			}
			nIndex = 0;
			break;
		}
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_DELETE)->EnableWindow((nIndex >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_EXPORT)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_NAME)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersDialog::OnDeleteSet()
{
	INT  nIndex;
	CString  szName;
	CTelecommandParameterSet  *pTCParameterSet;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_NAME)->GetWindowText(szName);
	if ((pTCParameterSet = (SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName)) >= 0) ? m_pTCParameterSets[0].GetAt((nIndex = m_pTCParameterSets[0].Find(szName))) : (CTelecommandParameterSet *)NULL))
	{
		SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_SETCURSEL, (WPARAM)-1);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_DELETE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_EXPORT)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_NAME)->SetFocus();
		m_pTCParameterSets[0].RemoveAt(nIndex);
		delete pTCParameterSet;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersDialog::OnImportSets()
{
	INT  nSet;
	INT  nSets;
	BOOL  bSets;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CTelecommandParameterSet  *pTCParameterSet;
	CTelecommandParametersImportSetsDialog  cTCParameterImportSetsDialog;

	if (cTCParameterImportSetsDialog.DoModal(m_pTCParameterSets[0]) == IDOK)
	{
		for (nSet = 0, nSets = (INT)m_pTCParameterSets[0].GetSize(), bSets = FALSE; nSet < nSets; nSet++)
		{
			if ((pTCParameterSet = m_pTCParameterSets[0].GetAt(nSet)) && SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pTCParameterSet->GetName()) < 0)
			{
				for (SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_INSERTSTRING, nSet, (LPARAM)(LPCTSTR)pTCParameterSet->GetName()); !bSets; )
				{
					SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_SETCURSEL, nSet);
					SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
					m_cTCParameterSet.Copy(pTCParameterSet);
					bSets = TRUE;
					break;
				}
			}
		}
		ShowParameterSetMembers();
		Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS), 0);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(((pDatabaseTCParameter = FindParameter()) && m_cTCParameterSet.Find(pDatabaseTCParameter->GetTag()) < 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS)) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_DELETE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_GETCURSEL) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_EXPORT)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_GETCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_NAME)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersDialog::OnExportSets()
{
	CTelecommandParametersExportSetsDialog  cTCParameterExportSetsDialog;

	cTCParameterExportSetsDialog.DoModal(m_pTCParameterSets[0]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersDialog::OnResetAllParameters()
{
	CHourglassCursor  cCursor;

	m_cTCParameterSet.RemoveAll();
	GetTCService()->ResetTCParameters();
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS, LVM_DELETEALLITEMS);
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE, CB_RESETCONTENT);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_COMMENT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_COMMENT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE));
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_RESETALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_NAME)->SetFocus();
}

void CTelecommandParametersDialog::OnSelchangeParameter()
{
	ShowParameterInfo();
}

void CTelecommandParametersDialog::OnSelchangeSetMemberValue()
{
	INT  nPos;
	CString  szValue[2];
	CTCParameter  *pTCParameter;

	if ((pTCParameter = (!(szValue[0] = Combobox_GetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE), (INT)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE, CB_GETCURSEL))).IsEmpty()) ? m_cTCParameterSet.GetAt(Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS))) : (CTCParameter *)NULL))
	{
		if ((nPos = szValue[0].ReverseFind(SPACE[0])) >= 0 && ((pTCParameter->GetValueAsText(GetDatabase(), 0, szValue[1]) && szValue[0].Left(nPos) != szValue[1]) || !pTCParameter->GetValueCount()))
		{
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE));
			return;
		}
	}
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
}

void CTelecommandParametersDialog::OnSelchangeSetName()
{
	CString  szName;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CTelecommandParameterSet  *pTCParameterSet;

	if ((pTCParameterSet = (!(szName = Combobox_GetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_NAME), (INT)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_GETCURSEL))).IsEmpty()) ? m_pTCParameterSets[0].GetAt(m_pTCParameterSets[0].Find(szName)) : (CTelecommandParameterSet *)NULL))
	{
		for (m_cTCParameterSet.Copy(pTCParameterSet), ShowParameterSetMembers(); SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT) > 0; )
		{
			Listview_SetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS), 0);
			EnumParameterValues();
			break;
		}
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_ADD)->EnableWindow(((pDatabaseTCParameter = FindParameter()) && m_cTCParameterSet.Find(pDatabaseTCParameter->GetTag()) < 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS)) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_SAVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_DELETE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE));
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_EXPORT)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersDialog::OnEditchangeSetMemberValue()
{
	INT  nPos;
	INT  nValue;
	INT  nValues;
	CString  szValue[3];
	CTCParameter  *pTCParameter;

	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE)->GetWindowText(szValue[0]);
	if ((pTCParameter = m_cTCParameterSet.GetAt(Listview_GetCurText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS)))))
	{
		for (nValue = 0, nValues = (INT)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE, CB_GETCOUNT), szValue[1] = (pTCParameter->GetValueAsText(GetDatabase(), 0, szValue[1])) ? szValue[1] : EMPTYSTRING; nValue < nValues; nValue++)
		{
			for (szValue[2] = Combobox_GetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE), nValue); (nPos = szValue[2].ReverseFind(SPACE[0])) >= 0; )
			{
				szValue[2] = szValue[2].Left(nPos);
				break;
			}
			if (szValue[0] == szValue[2] && szValue[0] != szValue[1]) break;
		}
		if (SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[0]) >= 0 || nValue < nValues)
		{
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE));
			return;
		}
		if ((((pTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 && GetDatabase()->CheckTCParameterConstValue(pTCParameter->GetAttributes(), szValue[0])) || ((pTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) && GetDatabase()->CheckTCParameterConstTime(pTCParameter->GetAttributes(), szValue[0]))) && !szValue[0].IsEmpty())
		{
			if ((pTCParameter->GetValueAsText(GetDatabase(), 0, szValue[1]) && szValue[0] != szValue[1]) || !pTCParameter->GetValueCount())
			{
				GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE));
				return;
			}
		}
		if (pTCParameter->GetValueCount() > 0 && szValue[0].IsEmpty())
		{
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE));
			return;
		}
	}
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_MEMBER_VALUE_SET)->EnableWindow(FALSE);
}

void CTelecommandParametersDialog::OnEditchangeSetName()
{
	CString  szName;

	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_SAVE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_MEMBERS, LVM_GETITEMCOUNT) > 0 && !szName.IsEmpty()) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_SETS_DELETE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_SETS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TELECOMMANDPARAMETERS_CHANGE) : FALSE);
}

void CTelecommandParametersDialog::OnOK()
{
	CProfile  cProfile;
	CByteArray  nSetsInfo;
	CHourglassCursor  cCursor;

	for (GetTCService()->UpdateTCParameters(m_cTCParameterSet); !m_pTCParameterSets[0].Compare(&m_pTCParameterSets[1]) && m_pTCParameterSets[0].Map(nSetsInfo); )
	{
		cProfile.SetTelecommandParameterSetsInfo(nSetsInfo);
		break;
	}
	EndDialog(IDOK);
}

BOOL CTelecommandParametersDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelecommandParametersDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersImportSetsDialog dialog

IMPLEMENT_DYNCREATE(CTelecommandParametersImportSetsDialog, CLocaleDialog)

CTelecommandParametersImportSetsDialog::CTelecommandParametersImportSetsDialog(CWnd *pParentWnd) : CLocaleDialog(CTelecommandParametersImportSetsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelecommandParametersImportSetsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTelecommandParametersImportSetsDialog::DoModal(CTelecommandParameterSets &pSets)
{
	INT  nSet;
	INT  nSets;
	INT  nResult;
	CTelecommandParameterSet  *pSet[2];

	for (m_pSets[0].RemoveAll(), m_pSets[1].Copy(&pSets); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		for (nSet = 0, nSets = (INT)m_pSets[0].GetSize(); nSet < nSets; nSet = nSet + 1)
		{
			if ((pSet[0] = m_pSets[0].GetAt(nSet)) != (CTelecommandParameterSet *)NULL)
			{
				if ((pSet[1] = pSets.GetAt(pSets.Find(pSet[0]->GetName()))))
				{
					pSet[1]->Copy(pSet[0]);
					continue;
				}
				if ((pSet[1] = new CTelecommandParameterSet))
				{
					for (pSet[1]->Copy(pSet[0]); pSets.Add(pSet[1]) < 0; )
					{
						delete pSet[1];
						break;
					}
				}
			}
		}
		break;
	}
	m_pSets[0].RemoveAll();
	m_pSets[1].RemoveAll();
	return nResult;
}

BOOL CTelecommandParametersImportSetsDialog::EnumParameterSets()
{
	INT  nSet;
	INT  nSets;
	DWORD  cbData;
	CFileEx  cFile;
	CString  szMessage;
	CString  szFileName;
	CByteArray  nFileData;

	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_RESETCONTENT);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME)->GetWindowText(szFileName);
	if (cFile.Open(szFileName, CFile::modeRead | CFile::shareExclusive))
	{
		nFileData.SetSize((cbData = (DWORD)cFile.GetLength()*sizeof(BYTE)));
		if (ReadFile(cFile.m_hFile, nFileData.GetData(), (DWORD)nFileData.GetSize(), &cbData, (LPOVERLAPPED)NULL))
		{
			for (nSet = 0, nSets = (m_pSets[0].Unmap(nFileData)) ? (INT)m_pSets[0].GetSize() : 0; nSet < nSets; nSet++)
			{
				SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_INSERTSTRING, nSet, (LPARAM)(LPCTSTR)m_pSets[0].GetAt(nSet)->GetName());
				continue;
			}
		}
		else
		{
			szMessage = STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_FILE_FAILURE);
			ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
		}
		cFile.Close();
	}
	else
	{
		szMessage = STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_FILE_FAILURE);
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, szMessage);
	}
	for (ExamineParameterSets(), SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_SETCURSEL); SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) >= 0; )
	{
		ShowParameterSetMembers();
		break;
	}
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTelecommandParametersImportSetsDialog::ShowParameterSetMembers()
{
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	UINT  nStatus;
	CString  szItem;
	ULONGLONG  nValue;
	CStringTools  cStringTools;
	CTCParameter  *pTCParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CTelecommandParameterSet  *pSet;

	for (nParameter = 0, nParameters = ((pSet = FindParameterSet())) ? (INT)pSet->GetSize() : 0; nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter = ((pTCParameter = pSet->GetAt(nParameter))) ? GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pTCParameter->GetTag())) : (CDatabaseTCParameter *)NULL))
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_TAG); )
				{
					szItem = pTCParameter->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_DESCRIPTION); )
				{
					szItem = pDatabaseTCParameter->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_TYPE))
				{
					szItem = ((pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TYPE_RAW) : EMPTYSTRING;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TYPE_NUMERICAL) : szItem;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pDatabaseTCParameter->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_CODING))
				{
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_VALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_VALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_VALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_VALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_VALUECODING_TIME) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_RADIX))
				{
					szItem = (((pTCParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0 && (pTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN)) || (pTCParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY)) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_VALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_VALUERADIX_OCTAL) : szItem;
					szItem = (((pTCParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0 && (pTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) == 0) || (pTCParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL)) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_VALUERADIX_DECIMAL) : szItem;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_VALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_FLAG); )
				{
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_VALUEFLAG_FIXED) : (((pTCParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_VALUEFLAG_VARIABLE) : STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_VALUEFLAG_AUTOMATIC));
					szItem += (pTCParameter->GetAttributes() & TCPARAMETER_VTYPE_FORMAL) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_VALUEFLAG_FORMAL) : EMPTYSTRING;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_VALUE); )
				{
					szItem = (pTCParameter->GetValueAsText(GetDatabase(), 0, szItem)) ? szItem : EMPTYSTRING;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_LIMITCHECK); )
				{
					if (pTCParameter->GetRawValue(0, nValue, nStatus))
					{
						if (nStatus == TCPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_SOFTLIMIT);
							break;
						}
						if (nStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_HARDLIMIT);
							break;
						}
						if (nStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_DELTALIMIT);
							break;
						}
						if (nStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szItem = STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_VALUELIMIT);
							break;
						}
						if (nStatus == TCPARAMETER_STATUS_TIMELIMIT)
						{
							szItem = STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_TIMELIMIT);
							break;
						}
						szItem = (pTCParameter->GetValueCount() > 0) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_NONE) : ((pTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szItem = STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (nParameter >= SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT) && !nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS), nParameter, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS), nParameter, nColumn, szItem);
			}
		}
	}
	while (nParameters < SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT))
	{
		Listview_DeleteText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS), nParameters);
		continue;
	}
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_PROPERTIES)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTelecommandParametersImportSetsDialog::ExamineParameterSets()
{
	INT  nSet;
	INT  nSets;
	CTelecommandParameterSet  *pSet;

	for (nSet = 0, nSets = (INT)m_pSets[0].GetSize(); nSet < nSets; nSet++)
	{
		if ((pSet = m_pSets[0].GetAt(nSet)) && m_pSets[1].Find(pSet->GetName()) >= 0) break;
		continue;
	}
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_COMMENT)->ShowWindow((nSet < nSets) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_COMMENT)->EnableWindow((nSet < nSets) ? TRUE : FALSE);
}

CTelecommandParameterSet *CTelecommandParametersImportSetsDialog::FindParameterSet() CONST
{
	return m_pSets[0].GetAt(m_pSets[0].Find(Listbox_GetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST), (INT)GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST)->SendMessage(LB_GETCURSEL))));
}

BOOL CTelecommandParametersImportSetsDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST)->SendMessage(LB_GETCOUNT) > 0) ? TRUE : FALSE);
}

void CTelecommandParametersImportSetsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandParametersImportSetsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelecommandParametersImportSetsDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelecommandParametersImportSetsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelecommandParametersImportSetsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME_BROWSE, OnFilenameBrowse)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME_INSPECT, OnInspectParameterSet)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST_REMOVE, OnRemoveParameterSet)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST_REMOVEALL, OnRemoveAllParameterSets)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_HELP, OnHelp)
	ON_LBN_SELCHANGE(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, OnSelchangeParameterSet)
	ON_EN_CHANGE(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME, OnEditchangeFilename)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersImportSetsDialog message handlers

BOOL CTelecommandParametersImportSetsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_LIMITCHECK));
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 4) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_FLAG)) ? (rColumns.Width() / 6) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 8) : (10 * rColumns.Width() / 35)))));
		continue;
	}
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME_BROWSE)->EnableWindow();
	return TRUE;
}

void CTelecommandParametersImportSetsDialog::OnFilenameBrowse()
{
	CString  szFileName;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME)->SetWindowText((szFileName = cFileBrowseDialog.GetPathName()));
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME_INSPECT)->EnableWindow(!szFileName.IsEmpty());
	}
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersImportSetsDialog::OnInspectParameterSet()
{
	CHourglassCursor  cCursor;

	EnumParameterSets();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersImportSetsDialog::OnRemoveParameterSet()
{
	INT  nIndex[2];
	CTelecommandParameterSet  *pSet;
	CHourglassCursor  cCursor;

	if ((pSet = m_pSets[0].GetAt((nIndex[0] = m_pSets[0].Find(Listbox_GetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST), (nIndex[1] = (INT)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_GETCURSEL))))))))
	{
		if (SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_DELETESTRING, nIndex[1]) >= 0)
		{
			for (m_pSets[0].RemoveAt(nIndex[0]); m_pSets[0].GetSize() >= 0; )
			{
				ExamineParameterSets();
				break;
			}
			SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_SETCURSEL);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
			ShowParameterSetMembers();
			delete pSet;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersImportSetsDialog::OnRemoveAllParameterSets()
{
	CHourglassCursor  cCursor;

	m_pSets[0].RemoveAll();
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST, LB_RESETCONTENT);
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS, LVM_DELETEALLITEMS);
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_COMMENT)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_COMMENT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_LIST_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_PROPERTIES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_PROPERTIES_MEMBERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersImportSetsDialog::OnSelchangeParameterSet()
{
	ShowParameterSetMembers();
}

void CTelecommandParametersImportSetsDialog::OnEditchangeFilename()
{
	CString  szFileName;

	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME)->GetWindowText(szFileName);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_IMPORTSETS_FILENAME_INSPECT)->EnableWindow(!szFileName.IsEmpty());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersImportSetsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	EndDialog(IDOK);
}

BOOL CTelecommandParametersImportSetsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelecommandParametersImportSetsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDPARAMETERSIMPORTSETSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersExportSetsDialog dialog

IMPLEMENT_DYNCREATE(CTelecommandParametersExportSetsDialog, CLocaleDialog)

CTelecommandParametersExportSetsDialog::CTelecommandParametersExportSetsDialog(CWnd *pParentWnd) : CLocaleDialog(CTelecommandParametersExportSetsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTelecommandParametersExportSetsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTelecommandParametersExportSetsDialog::DoModal(CONST CTelecommandParameterSets &pSets)
{
	return((m_pSets.Copy(&pSets)) ? (INT)CLocaleDialog::DoModal() : -1);
}

BOOL CTelecommandParametersExportSetsDialog::EnumParameterSets()
{
	INT  nSet;
	INT  nSets;
	CTelecommandParameterSet  *pSet;

	for (nSet = 0, nSets = (INT)m_pSets.GetSize(); nSet < nSets; nSet++)
	{
		if ((pSet = m_pSets.GetAt(nSet))) SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pSet->GetName());
		continue;
	}
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_PROPERTIES)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
	return((nSet == nSets) ? TRUE : FALSE);
}

VOID CTelecommandParametersExportSetsDialog::ShowParameterSetMembers()
{
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	UINT  nStatus;
	CString  szItem;
	ULONGLONG  nValue;
	CStringTools  cStringTools;
	CTCParameter  *pTCParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CTelecommandParameterSet  *pSet;

	for (nParameter = 0, nParameters = ((pSet = FindParameterSet())) ? (INT)pSet->GetSize() : 0; nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter = ((pTCParameter = pSet->GetAt(nParameter))) ? GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pTCParameter->GetTag())) : (CDatabaseTCParameter *)NULL))
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn = nColumn + 1)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_TAG); )
				{
					szItem = pTCParameter->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_DESCRIPTION); )
				{
					szItem = pDatabaseTCParameter->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_TYPE))
				{
					szItem = ((pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TYPE_RAW) : EMPTYSTRING;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TYPE_NUMERICAL) : szItem;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_BITLENGTH); )
				{
					szItem = cStringTools.ConvertIntToString(pDatabaseTCParameter->GetWidth());
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_CODING))
				{
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_VALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_VALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_VALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_VALUECODING_FLOATINGPOINT) : szItem;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_VALUECODING_TIME) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_RADIX))
				{
					szItem = (((pTCParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0 && (pTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN)) || (pTCParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY)) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_VALUERADIX_BINARY) : EMPTYSTRING;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_VALUERADIX_OCTAL) : szItem;
					szItem = (((pTCParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0 && (pTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) == 0) || (pTCParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL)) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_VALUERADIX_DECIMAL) : szItem;
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_VALUERADIX_HEXADECIMAL) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_FLAG); )
				{
					szItem = (pTCParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_VALUEFLAG_FIXED) : (((pTCParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_VALUEFLAG_VARIABLE) : STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_VALUEFLAG_AUTOMATIC));
					szItem += (pTCParameter->GetAttributes() & TCPARAMETER_VTYPE_FORMAL) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_VALUEFLAG_FORMAL) : EMPTYSTRING;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_VALUE); )
				{
					szItem = (pTCParameter->GetValueAsText(GetDatabase(), 0, szItem)) ? szItem : EMPTYSTRING;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_LIMITCHECK); )
				{
					if (pTCParameter->GetRawValue(0, nValue, nStatus))
					{
						if (nStatus == TCPARAMETER_STATUS_NOLIMIT)
						{
							szItem = STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_NOLIMIT);
							break;
						}
						if (nStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szItem = STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_SOFTLIMIT);
							break;
						}
						if (nStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szItem = STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_HARDLIMIT);
							break;
						}
						if (nStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szItem = STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_DELTALIMIT);
							break;
						}
						if (nStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szItem = STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_VALUELIMIT);
							break;
						}
						if (nStatus == TCPARAMETER_STATUS_TIMELIMIT)
						{
							szItem = STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_TIMELIMIT);
							break;
						}
						szItem = (pTCParameter->GetValueCount() > 0) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_NONE) : ((pTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szItem = STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_LIMITCHECK_FAILURE);
					break;
				}
				if (nParameter >= SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT) && !nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS), nParameter, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS), nParameter, nColumn, szItem);
			}
		}
	}
	while (nParameters < SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT))
	{
		Listview_DeleteText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS), nParameters);
		continue;
	}
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_PROPERTIES)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

CTelecommandParameterSet *CTelecommandParametersExportSetsDialog::FindParameterSet() CONST
{
	CString  szName;

	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME)->GetWindowText(szName);
	return m_pSets.GetAt(m_pSets.Find(szName));
}

BOOL CTelecommandParametersExportSetsDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_FILENAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST)->SendMessage(LB_GETCOUNT) > 0) ? TRUE : FALSE);
}

void CTelecommandParametersExportSetsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTelecommandParametersExportSetsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTelecommandParametersExportSetsDialog::PostNcDestroy()
{
	m_pSets.RemoveAll();
	m_szColumns.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTelecommandParametersExportSetsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTelecommandParametersExportSetsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_ADD, OnAddParameterSet)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_REMOVE, OnRemoveParameterSet)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_REMOVEALL, OnRemoveAllParameterSets)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_FILENAME_BROWSE, OnFilenameBrowse)
	ON_BN_CLICKED(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME, OnSelchangeParameterSet)
	ON_EN_CHANGE(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTelecommandParametersExportSetsDialog message handlers

BOOL CTelecommandParametersExportSetsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_LIMITCHECK));
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_PROPERTIES_MEMBERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 4) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_DESCRIPTION)) ? (rColumns.Width() / 2) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_FLAG)) ? (rColumns.Width() / 6) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 8) : (10 * rColumns.Width() / 35)))));
		continue;
	}
	EnumParameterSets();
	ShowParameterSetMembers();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME), (INT)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL))) < 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_FILENAME_BROWSE)->EnableWindow();
	return TRUE;
}

void CTelecommandParametersExportSetsDialog::OnAddParameterSet()
{
	CHourglassCursor  cCursor;

	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME), (INT)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL))));
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME), (INT)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL))) < 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersExportSetsDialog::OnRemoveParameterSet()
{
	CHourglassCursor  cCursor;

	for (; !SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_GETCURSEL)); )
	{
		GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME)->SetFocus();
		break;
	}
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME), (INT)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL))) < 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_SETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersExportSetsDialog::OnRemoveAllParameterSets()
{
	CHourglassCursor  cCursor;

	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_RESETCONTENT);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersExportSetsDialog::OnFilenameBrowse()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TELECOMMANDPARAMETERS_EXPORTSETS_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersExportSetsDialog::OnSelchangeParameterSet()
{
	ShowParameterSetMembers();
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_ADD)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME), (INT)SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_NAME, CB_GETCURSEL))) < 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_GETCOUNT) > 0) ? TRUE : FALSE);
}

void CTelecommandParametersExportSetsDialog::OnEditchangeFileName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTelecommandParametersExportSetsDialog::OnOK()
{
	INT  nSet;
	INT  nSets;
	DWORD  cbData;
	CFileEx  cFile;
	CString  szFileName;
	CByteArray  nFileData;
	CTelecommandParameterSet  *pSet;
	CHourglassCursor  cCursor;

	for (nSet = 0, nSets = (INT)m_pSets.GetSize(); nSet < nSets; nSet++)
	{
		if ((pSet = m_pSets.GetAt(nSet)) && SendDlgItemMessage(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_LIST, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pSet->GetName()) >= 0) continue;
		m_pSets.RemoveAt(nSet);
		delete pSet;
		nSets--;
		nSet--;
	}
	for (GetDlgItem(IDC_TELECOMMANDPARAMETERS_EXPORTSETS_FILENAME)->GetWindowText(szFileName); m_pSets.GetSize() > 0; )
	{
		if (cFile.Open(szFileName, CFile::modeCreate | CFile::modeReadWrite | CFile::shareExclusive))
		{
			if (WriteFile(cFile.m_hFile, nFileData.GetData(), (m_pSets.Map(nFileData)) ? (DWORD)nFileData.GetSize() : 0, &cbData, (LPOVERLAPPED)NULL) && cbData == nFileData.GetSize())
			{
				cFile.Close();
				break;
			}
			cFile.Close();
			cFile.Remove(szFileName);
		}
		ReportEvent(EVENT_CATEGORY_SYSTEM | EVENT_TYPE_ERROR, STRING(IDS_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_FILE_FAILURE));
		break;
	}
	EndDialog(IDOK);
}

BOOL CTelecommandParametersExportSetsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTelecommandParametersExportSetsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TELECOMMANDPARAMETERSEXPORTSETSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CServerAddressBookDialog dialog

IMPLEMENT_DYNCREATE(CServerAddressBookDialog, CLocaleDialog)

CServerAddressBookDialog::CServerAddressBookDialog(CWnd *pParentWnd) : CLocaleDialog(CServerAddressBookDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CServerAddressBookDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CServerAddressBookDialog::EnumComputers()
{
	INT  nComputer;
	INT  nComputers;
	CString  szComputer;
	CStringArray  szComputers;
	CComputerToken  cComputerToken;

	for (szComputers.Add((szComputer = cComputerToken.GetComputerName())); CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_REMOTEBROWSE) || CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_REMOTECHANGE); )
	{
		GetNetworkBrowseService()->EnumNetworkComputers(szComputers);
		break;
	}
	for (nComputer = 0, nComputers = (INT)szComputers.GetSize(), SendDlgItemMessage(IDC_SERVERADDRESSBOOK_COMPUTER, CB_RESETCONTENT); nComputer < nComputers; nComputer++)
	{
		if (CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_BROWSE) || CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_CHANGE))
		{
			SendDlgItemMessage(IDC_SERVERADDRESSBOOK_COMPUTER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
			continue;
		}
	}
	SendDlgItemMessage(IDC_SERVERADDRESSBOOK_COMPUTER, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_SERVERADDRESSBOOK_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer), 0));
	GetDlgItem(IDC_SERVERADDRESSBOOK_CONNECT)->EnableWindow((SendDlgItemMessage(IDC_SERVERADDRESSBOOK_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)Combobox_GetText(GetDlgItem(IDC_SERVERADDRESSBOOK_COMPUTER), (INT)SendDlgItemMessage(IDC_SERVERADDRESSBOOK_COMPUTER, CB_GETCURSEL))) < 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_SERVERADDRESSBOOK_COMPUTER, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
}

BOOL CServerAddressBookDialog::EnumServers()
{
	INT  nComputer;
	INT  nComputers;
	CString  szComputer;
	CServerProfiles  *pProfiles[2];
	CServerAddressBook  cServerAddressBook;

	for (GetDlgItem(IDC_SERVERADDRESSBOOK_COMPUTER)->GetWindowText(szComputer); m_szComputer.CompareNoCase(szComputer) && !szComputer.IsEmpty(); )
	{
		for (nComputer = 0, nComputers = (!m_szComputer.IsEmpty()) ? (INT)m_szComputers.GetSize() : -1; nComputer < nComputers; nComputer++)
		{
			if (!m_szComputers.GetAt(nComputer).CompareNoCase(m_szComputer)) break;
			continue;
		}
		for (; nComputer == nComputers; )
		{
			if ((pProfiles[0] = new CServerProfiles))
			{
				if ((pProfiles[1] = new CServerProfiles))
				{
					m_pAddressBooks[0].Add(pProfiles[0]);
					m_pAddressBooks[1].Add(pProfiles[1]);
					m_szComputers.Add(m_szComputer);
					break;
				}
				delete pProfiles[0];
			}
			break;
		}
		if (nComputer < m_pAddressBooks[0].GetSize() && nComputer < m_pAddressBooks[1].GetSize() && nComputers >= 0)
		{
			if ((pProfiles[0] = (CServerProfiles *)m_pAddressBooks[0].GetAt(nComputer)))
			{
				if ((pProfiles[1] = (CServerProfiles *)m_pAddressBooks[1].GetAt(nComputer)))
				{
					pProfiles[0]->Copy(&m_pAddressBook[0]);
					pProfiles[1]->Copy(&m_pAddressBook[1]);
				}
			}
		}
		for (nComputer = 0, nComputers = (INT)m_szComputers.GetSize(); nComputer < nComputers; nComputer++)
		{
			if (!m_szComputers.GetAt(nComputer).CompareNoCase(szComputer)) break;
			continue;
		}
		if (nComputer < nComputers)
		{
			if ((pProfiles[0] = (CServerProfiles *)m_pAddressBooks[0].GetAt(nComputer)))
			{
				if ((pProfiles[1] = (CServerProfiles *)m_pAddressBooks[1].GetAt(nComputer)))
				{
					m_pAddressBook[0].Copy(pProfiles[0]);
					m_pAddressBook[1].Copy(pProfiles[1]);
					break;
				}
			}
		}
		for (; cServerAddressBook.SetComputerName(szComputer) && cServerAddressBook.GetServerAddressBook(m_pAddressBook[0]); )
		{
			m_pAddressBook[1].Copy(&m_pAddressBook[0]);
			break;
		}
		break;
	}
	for (ShowServers(), m_szComputer = szComputer; SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_SETCURSEL) >= 0; )
	{
		ShowServerInfo();
		break;
	}
	GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER_STATIC)->EnableWindow();
	GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->EnableWindow();
	return((m_pAddressBook[0].GetSize() == SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_GETCOUNT)) ? TRUE : FALSE);
}

BOOL CServerAddressBookDialog::EnumDevices()
{
	INT  nDevice;
	INT  nDevices;
	DWORD  dwDevices;
	DWORD  cbDevicesInfo;
	CString  szComputer;
	CString  szDeviceName;
	CString  szDeviceType;
	LPRASDEVINFO  pDevicesInfo;
	CComputerToken  cComputerToken;
	CServerProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindServerProfile()))
	{
		for (GetDlgItem(IDC_SERVERADDRESSBOOK_COMPUTER)->GetWindowText(szComputer), pProfileInfo->GetDeviceInfo(szDeviceName, szDeviceType), SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_RESETCONTENT); cComputerToken.GetComputerName().CompareNoCase(szComputer); )
		{
			for (m_szDeviceNames.RemoveAll(), m_szDeviceTypes.RemoveAll(); !szDeviceName.IsEmpty() && SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szDeviceName)) >= 0; )
			{
				m_szDeviceNames.Add(szDeviceName);
				m_szDeviceTypes.Add(szDeviceType);
				break;
			}
			return TRUE;
		}
	}
	SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_RESETCONTENT);
	RasEnumDevices((LPRASDEVINFO)NULL, &(cbDevicesInfo = 0), &(dwDevices = 0));
	if ((pDevicesInfo = (LPRASDEVINFO)GlobalAlloc(GPTR, cbDevicesInfo)))
	{
		pDevicesInfo->dwSize = (dwDevices > 0) ? sizeof(RASDEVINFO) : 0;
		if (RasEnumDevices(pDevicesInfo, &cbDevicesInfo, &dwDevices) == 0)
		{
			for (nDevice = 0, nDevices = dwDevices; nDevice < nDevices; nDevice++)
			{
				for (szDeviceName = (_tcsicmp(pDevicesInfo[nDevice].szDeviceType, RASDT_Vpn)) ? pDevicesInfo[nDevice].szDeviceName : STRING(IDS_RAS_DEVICE_VPN), szDeviceType = pDevicesInfo[nDevice].szDeviceType; (IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_VPN) && !_tcsicmp(pDevicesInfo[nDevice].szDeviceType, RASDT_Vpn)) || (IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_PHONE) && (!_tcsicmp(pDevicesInfo[nDevice].szDeviceType, RASDT_Modem) || !_tcsicmp(pDevicesInfo[nDevice].szDeviceType, RASDT_Isdn) || !_tcsicmp(pDevicesInfo[nDevice].szDeviceType, RASDT_X25))); )
				{
					if (SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDeviceName) == CB_ERR  &&  SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szDeviceName) >= 0)
					{
						m_szDeviceNames.SetAtGrow(SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_GETCOUNT) - 1, szDeviceName);
						m_szDeviceTypes.SetAtGrow(SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_GETCOUNT) - 1, szDeviceType.MakeUpper());
					}
					break;
				}
			}
			m_szDeviceNames.SetSize(SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_GETCOUNT));
			m_szDeviceTypes.SetSize(SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_GETCOUNT));
		}
		GlobalFree(pDevicesInfo);
	}
	return((m_szDeviceNames.GetSize() == SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_GETCOUNT)) ? TRUE : FALSE);
}

VOID CServerAddressBookDialog::ShowServers()
{
	INT  nServer;
	INT  nServers;
	CServerProfileInfo  *pProfileInfo;

	for (nServer = 0, nServers = (INT)m_pAddressBook[0].GetSize(), SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_RESETCONTENT); nServer < nServers; nServer++)
	{
		if ((pProfileInfo = m_pAddressBook[0].GetAt(nServer))) SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pProfileInfo->GetName());
		continue;
	}
	for (SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_SETCURSEL); SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_GETCOUNT) >= 0; )
	{
		ShowServerInfo();
		break;
	}
	AdjustToPrivileges();
}

VOID CServerAddressBookDialog::ShowServerInfo()
{
	UINT  nMode;
	UINT  nNumber;
	UINT  nNumbers;
	CString  szServer;
	CString  szCallbackNumber;
	CStringArray  szPhoneNumbers;
	CServerProfileInfo  *pProfileInfo;

	for (GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->GetWindowText(szServer); (pProfileInfo = m_pAddressBook[0].GetAt(m_pAddressBook[0].Find(szServer))); )
	{
		for (CheckDlgButton(IDC_SERVERADDRESSBOOK_ACCESS_VPN, ((nMode = pProfileInfo->GetMode()) & SERVERPROFILE_ACCESS_VPN) ? TRUE : FALSE), CheckDlgButton(IDC_SERVERADDRESSBOOK_ACCESS_PHONE, (nMode & SERVERPROFILE_ACCESS_PHONE) ? TRUE : FALSE), pProfileInfo->GetPhoneNumbers(szPhoneNumbers), szCallbackNumber = pProfileInfo->GetCallbackNumber(), nNumber = 0, nNumbers = (INT)szPhoneNumbers.GetSize(), SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_RESETCONTENT); nNumber < nNumbers; nNumber++)
		{
			SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szPhoneNumbers.GetAt(nNumber));
			continue;
		}
		SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_SETCURSEL, (EnumDevices() >= 0) ? 0 : -1);
		CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK, (nMode & SERVERPROFILE_BEHAVIOR_CALLBACK) ? TRUE : FALSE);
		CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS, ((nMode & SERVERPROFILE_BEHAVIOR_TRYALLNUMBERS) && nNumbers > 1) ? TRUE : FALSE);
		CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_MODEMSPEAKER, (nMode & SERVERPROFILE_BEHAVIOR_MODEMSPEAKER) ? TRUE : FALSE);
		CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_SOFTWARECOMPRESSION, (nMode & SERVERPROFILE_BEHAVIOR_SOFTWARECOMPRESSION) ? TRUE : FALSE);
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->SetWindowText(szCallbackNumber);
		GetDlgItem(IDC_SERVERADDRESSBOOK_ADDSERVER)->EnableWindow(FALSE);
		GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVESERVER)->EnableWindow(CanRemoveServer());
		GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVEALLSERVERS)->EnableWindow(CanRemoveAllServers());
		GetDlgItem(IDC_SERVERADDRESSBOOK_ACCESS)->EnableWindow();
		GetDlgItem(IDC_SERVERADDRESSBOOK_ACCESS_VPN)->EnableWindow();
		GetDlgItem(IDC_SERVERADDRESSBOOK_ACCESS_PHONE)->EnableWindow();
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP)->EnableWindow();
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS_STATIC)->EnableWindow();
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS)->EnableWindow();
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_ADDNUMBER)->EnableWindow(FALSE);
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_REMOVENUMBER)->EnableWindow(CanRemoveServerNumber());
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR)->EnableWindow(IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_PHONE));
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK)->EnableWindow(IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_PHONE));
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_PHONE) && IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK));
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS)->EnableWindow((SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_GETCOUNT) > 1) ? TRUE : FALSE);
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_MODEMSPEAKER)->EnableWindow(IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_PHONE));
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_SOFTWARECOMPRESSION)->EnableWindow(IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_PHONE));
		ShowDeviceInfo();
		return;
	}
	if (!m_pAddressBook[0].GetSize())
	{
		CheckDlgButton(IDC_SERVERADDRESSBOOK_ACCESS_VPN, FALSE);
		CheckDlgButton(IDC_SERVERADDRESSBOOK_ACCESS_PHONE, TRUE);
		CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK, FALSE);
		CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS, FALSE);
		CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_MODEMSPEAKER, IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_PHONE));
		CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_SOFTWARECOMPRESSION, IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_PHONE));
		SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_RESETCONTENT, EnumDevices());
		GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_SERVERADDRESSBOOK_ADDSERVER)->EnableWindow(FALSE);
		GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVESERVER)->EnableWindow(FALSE);
		GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVEALLSERVERS)->EnableWindow(FALSE);
		GetDlgItem(IDC_SERVERADDRESSBOOK_ACCESS)->EnableWindow();
		GetDlgItem(IDC_SERVERADDRESSBOOK_ACCESS_VPN)->EnableWindow();
		GetDlgItem(IDC_SERVERADDRESSBOOK_ACCESS_PHONE)->EnableWindow();
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP)->EnableWindow();
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS_STATIC)->EnableWindow();
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS)->EnableWindow();
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_ADDNUMBER)->EnableWindow(FALSE);
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_REMOVENUMBER)->EnableWindow(FALSE);
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR)->EnableWindow(IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_PHONE));
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK)->EnableWindow(IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_PHONE));
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->EnableWindow(FALSE);
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS)->EnableWindow(FALSE);
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_MODEMSPEAKER)->EnableWindow(IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_PHONE));
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_SOFTWARECOMPRESSION)->EnableWindow(IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_PHONE));
		ShowDeviceInfo();
		return;
	}
	CheckDlgButton(IDC_SERVERADDRESSBOOK_ACCESS_VPN, FALSE);
	CheckDlgButton(IDC_SERVERADDRESSBOOK_ACCESS_PHONE, FALSE);
	CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK, FALSE);
	CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS, FALSE);
	CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_MODEMSPEAKER, FALSE);
	CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_SOFTWARECOMPRESSION, FALSE);
	SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_RESETCONTENT);
	GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SERVERADDRESSBOOK_ADDSERVER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVESERVER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVEALLSERVERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_ACCESS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_ACCESS_VPN)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_ACCESS_PHONE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_ADDNUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_REMOVENUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_MODEMSPEAKER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_SOFTWARECOMPRESSION)->EnableWindow(FALSE);
	ShowDeviceInfo();
}

VOID CServerAddressBookDialog::ShowDeviceInfo()
{
	CString  szDeviceName;
	CString  szDeviceType;
	CServerProfileInfo  *pProfileInfo;

	for (GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_GETCOUNT) > 0) ? TRUE : FALSE), GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICE)->EnableWindow((SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_GETCOUNT) > 0) ? TRUE : FALSE); (pProfileInfo = FindServerProfile()); )
	{
		for (pProfileInfo->GetDeviceInfo(szDeviceName, szDeviceType); SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDeviceName) >= 0; )
		{
			SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szDeviceName));
			GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE)->SetWindowText(szDeviceType);
			GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE)->EnableWindow();
			return;
		}
		if (SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_SETCURSEL) >= 0)
		{
			GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICE)->GetWindowText(szDeviceName);
			GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE)->SetWindowText((szDeviceType = m_szDeviceTypes.GetAt(SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_GETCURSEL))));
			GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE_STATIC)->EnableWindow(!szDeviceType.IsEmpty());
			GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE)->EnableWindow(!szDeviceType.IsEmpty());
			pProfileInfo->SetDeviceInfo(szDeviceName, szDeviceType);
			return;
		}
		pProfileInfo->SetDeviceInfo(EMPTYSTRING, EMPTYSTRING);
		break;
	}
	if (SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_SETCURSEL) >= 0)
	{
		GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE)->SetWindowText((szDeviceType = m_szDeviceTypes.GetAt(SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_GETCURSEL))));
		GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE_STATIC)->EnableWindow(!szDeviceType.IsEmpty());
		GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE)->EnableWindow(!szDeviceType.IsEmpty());
		return;
	}
	GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPEDEFAULT)->GetWindowText(szDeviceType);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE)->SetWindowText(szDeviceType);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE_STATIC)->EnableWindow(!szDeviceType.IsEmpty());
	GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE)->EnableWindow(!szDeviceType.IsEmpty());
}

CServerProfileInfo *CServerAddressBookDialog::FindServerProfile() CONST
{
	INT  nServer;
	CString  szServer;

	GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->GetWindowText(szServer);
	return(((nServer = m_pAddressBook[0].Find(szServer)) >= 0) ? m_pAddressBook[0].GetAt(nServer) : (CServerProfileInfo *)NULL);
}

BOOL CServerAddressBookDialog::CanAddServer() CONST
{
	CString  szServer;
	CString  szComputer;
	CComputerToken  cComputerToken;

	GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->GetWindowText(szServer);
	GetDlgItem(IDC_SERVERADDRESSBOOK_COMPUTER)->GetWindowText(szComputer);
	return((!szComputer.IsEmpty() && GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->SendMessage(CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szServer) == CB_ERR  &&  !szServer.IsEmpty() && Check(FALSE)) ? ((cComputerToken == szComputer  &&  CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_CHANGE)) || (cComputerToken != szComputer  &&  CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_REMOTECHANGE))) : FALSE);
}

BOOL CServerAddressBookDialog::CanRemoveServer() CONST
{
	CString  szComputer;
	CComputerToken  cComputerToken;

	GetDlgItem(IDC_SERVERADDRESSBOOK_COMPUTER)->GetWindowText(szComputer);
	return((!szComputer.IsEmpty() && GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->SendMessage(CB_GETCURSEL) >= 0) ? ((cComputerToken == szComputer  &&  CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_CHANGE)) || (cComputerToken != szComputer  &&  CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_REMOTECHANGE))) : FALSE);
}

BOOL CServerAddressBookDialog::CanRemoveAllServers() CONST
{
	CString  szComputer;
	CComputerToken  cComputerToken;

	GetDlgItem(IDC_SERVERADDRESSBOOK_COMPUTER)->GetWindowText(szComputer);
	return((!szComputer.IsEmpty() && GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->SendMessage(CB_GETCOUNT) > 0) ? ((cComputerToken == szComputer  &&  CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_CHANGE)) || (cComputerToken != szComputer  &&  CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_REMOTECHANGE))) : FALSE);
}

BOOL CServerAddressBookDialog::CanAddServerNumber() CONST
{
	CString  szNumber;
	CString  szComputer;
	CComputerToken  cComputerToken;

	GetDlgItem(IDC_SERVERADDRESSBOOK_COMPUTER)->GetWindowText(szComputer);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS)->GetWindowText(szNumber);
	return((!szNumber.IsEmpty() && GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS)->SendMessage(CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNumber) == CB_ERR) ? ((cComputerToken == szComputer  &&  CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_CHANGE)) || (cComputerToken != szComputer  &&  CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_REMOTECHANGE))) : FALSE);
}

BOOL CServerAddressBookDialog::CanRemoveServerNumber() CONST
{
	CString  szNumber;
	CString  szComputer;
	CComputerToken  cComputerToken;

	GetDlgItem(IDC_SERVERADDRESSBOOK_COMPUTER)->GetWindowText(szComputer);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS)->GetWindowText(szNumber);
	return((!szNumber.IsEmpty() && GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS)->SendMessage(CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNumber) >= 0) ? ((cComputerToken == szComputer  &&  CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_CHANGE)) || (cComputerToken != szComputer  &&  CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_REMOTECHANGE))) : FALSE);
}

VOID CServerAddressBookDialog::AdjustToPrivileges()
{
	BOOL  bCheck;
	CString  szComputer;
	CComputerToken  cComputerToken;

	GetDlgItem(IDC_SERVERADDRESSBOOK_COMPUTER)->GetWindowText(szComputer);
	AccessControl(IDC_SERVERADDRESSBOOK_SERVER, (bCheck = ((cComputerToken == szComputer  &&  CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_CHANGE)) || (cComputerToken != szComputer  &&  CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_REMOTECHANGE)))));
	AccessControl(IDC_SERVERADDRESSBOOK_DEVICE, bCheck);
	AccessControl(IDC_SERVERADDRESSBOOK_ACCESS_VPN, bCheck);
	AccessControl(IDC_SERVERADDRESSBOOK_ACCESS_PHONE, bCheck);
	AccessControl(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, bCheck);
	AccessControl(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK, bCheck);
	AccessControl(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER, bCheck);
	AccessControl(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS, bCheck);
	AccessControl(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_MODEMSPEAKER, bCheck);
	AccessControl(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_SOFTWARECOMPRESSION, bCheck);
}

BOOL CServerAddressBookDialog::IsModified() CONST
{
	INT  nComputer;
	INT  nComputers;
	CServerProfiles  *pProfiles[2];

	for (nComputer = 0, nComputers = (m_pAddressBook[0].Compare(&m_pAddressBook[1])) ? (INT)m_szComputers.GetSize() : -1; nComputer < nComputers; nComputer++)
	{
		if (((pProfiles[1] = ((pProfiles[0] = (m_szComputers.GetAt(nComputer).CompareNoCase(m_szComputer)) ? (CServerProfiles *)m_pAddressBooks[0].GetAt(nComputer) : (CServerProfiles *)NULL)) ? (CServerProfiles *)m_pAddressBooks[1].GetAt(nComputer) : (CServerProfiles *)NULL)))
		{
			if (!pProfiles[0]->Compare(pProfiles[1])) break;
			continue;
		}
	}
	return((nComputer != nComputers) ? TRUE : FALSE);
}

BOOL CServerAddressBookDialog::Check(BOOL bModified) CONST
{
	CString  szServer;
	CString  szComputer;
	CComputerToken  cComputerToken;

	GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->GetWindowText(szServer);
	GetDlgItem(IDC_SERVERADDRESSBOOK_COMPUTER)->GetWindowText(szComputer);
	return((!szComputer.IsEmpty() && ((szServer.IsEmpty() && !m_pAddressBook[0].GetSize()) || (!szServer.IsEmpty() && (IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_VPN) || IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_PHONE)) && (!cComputerToken.IsHost() || GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICE)->SendMessage(CB_GETCURSEL) >= 0) && GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS)->SendMessage(CB_GETCOUNT) > 0 && (!IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK) || GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->GetWindowTextLength() > 0) && (!bModified || m_pAddressBook[0].GetSize() > 0)))) ? (!bModified || IsModified()) : FALSE);
}

void CServerAddressBookDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CServerAddressBookDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CServerAddressBookDialog::PostNcDestroy()
{
	INT  nComputer;
	INT  nComputers;
	CServerProfiles  *pProfiles[2];

	for (nComputer = 0, nComputers = (INT)max(m_pAddressBooks[0].GetSize(), m_pAddressBooks[1].GetSize()); nComputer < nComputers; nComputer++)
	{
		if ((pProfiles[0] = (nComputer < m_pAddressBooks[0].GetSize()) ? (CServerProfiles *)m_pAddressBooks[0].GetAt(nComputer) : (CServerProfiles *)NULL)) delete pProfiles[0];
		if ((pProfiles[1] = (nComputer < m_pAddressBooks[1].GetSize()) ? (CServerProfiles *)m_pAddressBooks[1].GetAt(nComputer) : (CServerProfiles *)NULL)) delete pProfiles[1];
	}
	m_szComputer.Empty();
	m_szComputers.RemoveAll();
	m_szDeviceNames.RemoveAll();
	m_szDeviceTypes.RemoveAll();
	m_pAddressBooks[0].RemoveAll();
	m_pAddressBooks[1].RemoveAll();
	m_pAddressBook[0].RemoveAll();
	m_pAddressBook[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CServerAddressBookDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CServerAddressBookDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_SERVERADDRESSBOOK_CONNECT, OnConnectComputer)
	ON_BN_CLICKED(IDC_SERVERADDRESSBOOK_ADDSERVER, OnAddServer)
	ON_BN_CLICKED(IDC_SERVERADDRESSBOOK_REMOVESERVER, OnRemoveServer)
	ON_BN_CLICKED(IDC_SERVERADDRESSBOOK_REMOVEALLSERVERS, OnRemoveAllServers)
	ON_BN_CLICKED(IDC_SERVERADDRESSBOOK_ACCESS_VPN, OnAccessByVPN)
	ON_BN_CLICKED(IDC_SERVERADDRESSBOOK_ACCESS_PHONE, OnAccessByPhone)
	ON_BN_CLICKED(IDC_SERVERADDRESSBOOK_DIALUP_ADDNUMBER, OnAddNumber)
	ON_BN_CLICKED(IDC_SERVERADDRESSBOOK_DIALUP_REMOVENUMBER, OnRemoveNumber)
	ON_BN_CLICKED(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK, OnBehaviorCallback)
	ON_BN_CLICKED(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS, OnBehaviorTryAllNumbers)
	ON_BN_CLICKED(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_MODEMSPEAKER, OnBehaviorModemSpeaker)
	ON_BN_CLICKED(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_SOFTWARECOMPRESSION, OnBehaviorSoftwareCompression)
	ON_BN_CLICKED(IDC_SERVERADDRESSBOOK_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_SERVERADDRESSBOOK_COMPUTER, OnEditchangeComputer)
	ON_CBN_EDITCHANGE(IDC_SERVERADDRESSBOOK_SERVER, OnEditchangeServer)
	ON_CBN_EDITCHANGE(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, OnEditchangeNumber)
	ON_CBN_SELCHANGE(IDC_SERVERADDRESSBOOK_COMPUTER, OnSelchangeComputer)
	ON_CBN_SELCHANGE(IDC_SERVERADDRESSBOOK_SERVER, OnSelchangeServer)
	ON_CBN_SELCHANGE(IDC_SERVERADDRESSBOOK_DEVICE, OnSelchangeDevice)
	ON_CBN_SELCHANGE(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, OnSelchangeNumber)
	ON_EN_CHANGE(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER, OnEditchangeCallbackNumber)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CServerAddressBookDialog message handlers

BOOL CServerAddressBookDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_SERVERADDRESSBOOK_DETAILS)->EnableWindow();
	GetDlgItem(IDC_SERVERADDRESSBOOK_CONNECTION)->EnableWindow();
	GetDlgItem(IDC_SERVERADDRESSBOOK_COMPUTER_STATIC)->EnableWindow();
	GetDlgItem(IDC_SERVERADDRESSBOOK_COMPUTER)->EnableWindow();
	EnumComputers();
	EnumServers();
	return TRUE;
}

void CServerAddressBookDialog::OnSelchangeComputer()
{
	CString  szComputer;
	CComputerToken  cComputerToken;

	if (SendDlgItemMessage(IDC_SERVERADDRESSBOOK_COMPUTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SERVERADDRESSBOOK_COMPUTER, CB_GETCURSEL)) >= 0) EnumServers();
	GetDlgItem(IDC_SERVERADDRESSBOOK_CONNECT)->EnableWindow((cComputerToken.SetComputerName((szComputer = Combobox_GetText(GetDlgItem(IDC_SERVERADDRESSBOOK_COMPUTER), (INT)SendDlgItemMessage(IDC_SERVERADDRESSBOOK_COMPUTER, CB_GETCURSEL)))) && !szComputer.IsEmpty() && !cComputerToken.IsHost() && SendDlgItemMessage(IDC_SERVERADDRESSBOOK_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) < 0) ? (CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_REMOTEBROWSE)) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnSelchangeServer()
{
	if (SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_GETCURSEL)) >= 0) ShowServerInfo();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnEditchangeComputer()
{
	CString  szComputer;
	CComputerToken  cComputerToken;

	for (GetDlgItem(IDC_SERVERADDRESSBOOK_COMPUTER)->GetWindowText(szComputer); SendDlgItemMessage(IDC_SERVERADDRESSBOOK_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) >= 0; )
	{
		EnumServers();
		break;
	}
	GetDlgItem(IDC_SERVERADDRESSBOOK_CONNECT)->EnableWindow((!szComputer.IsEmpty() && cComputerToken != szComputer  &&  SendDlgItemMessage(IDC_SERVERADDRESSBOOK_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) < 0) ? (CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_SERVERADDRESSBOOK_REMOTEBROWSE)) : FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_ADDSERVER)->EnableWindow(CanAddServer());
	GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVESERVER)->EnableWindow(CanRemoveServer());
	GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVEALLSERVERS)->EnableWindow(CanRemoveAllServers());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnEditchangeServer()
{
	CString  szServer;

	for (GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->GetWindowText(szServer); SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szServer) >= 0; )
	{
		ShowServerInfo();
		break;
	}
	GetDlgItem(IDC_SERVERADDRESSBOOK_ADDSERVER)->EnableWindow(CanAddServer());
	GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVESERVER)->EnableWindow(CanRemoveServer());
	GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVEALLSERVERS)->EnableWindow(CanRemoveAllServers());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnConnectComputer()
{
	CString  szComputer;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_USERADDRESSBOOK_COMPUTER)->GetWindowText(szComputer); !szComputer.IsEmpty(); )
	{
		EnumServers();
		break;
	}
}

void CServerAddressBookDialog::OnAddServer()
{
	INT  nIndex;
	UINT  nMode;
	UINT  nNumber;
	UINT  nNumbers;
	CString  szServer;
	CString  szDeviceName;
	CString  szDeviceType;
	CString  szCallbackNumber;
	CStringArray  szNumbers;
	CServerProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (; (pProfileInfo = new CServerProfileInfo); )
	{
		GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->GetWindowText(szServer);
		GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICE)->GetWindowText(szDeviceName);
		GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE)->GetWindowText(szDeviceType);
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->GetWindowText(szCallbackNumber);
		nMode = (IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_VPN)) ? SERVERPROFILE_ACCESS_VPN : 0;
		nMode |= (IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_ACCESS_PHONE)) ? SERVERPROFILE_ACCESS_PHONE : 0;
		nMode |= (IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK)) ? SERVERPROFILE_BEHAVIOR_CALLBACK : 0;
		nMode |= (IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS)) ? SERVERPROFILE_BEHAVIOR_TRYALLNUMBERS : 0;
		nMode |= (IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_MODEMSPEAKER)) ? SERVERPROFILE_BEHAVIOR_MODEMSPEAKER : 0;
		nMode |= (IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_SOFTWARECOMPRESSION)) ? SERVERPROFILE_BEHAVIOR_SOFTWARECOMPRESSION : 0;
		for (nNumber = 0, nNumbers = (INT)SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_GETCOUNT); nNumber < nNumbers; nNumber++)
		{
			szNumbers.Add(Combobox_GetText(GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS), nNumber));
			continue;
		}
		pProfileInfo->SetName(szServer);
		pProfileInfo->SetMode(nMode);
		pProfileInfo->SetPhoneNumbers(szNumbers);
		pProfileInfo->SetCallbackNumber(szCallbackNumber);
		pProfileInfo->SetDeviceInfo(szDeviceName, szDeviceType);
		if ((nIndex = m_pAddressBook[0].Add(pProfileInfo)) >= 0)
		{
			if (SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szServer)) >= 0) break;
			m_pAddressBook[0].RemoveAt(nIndex);
		}
		SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_SETCURSEL);
		delete pProfileInfo;
		ShowServerInfo();
		break;
	}
	GetDlgItem(IDC_SERVERADDRESSBOOK_ADDSERVER)->EnableWindow(CanAddServer());
	GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVESERVER)->EnableWindow(CanRemoveServer());
	GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVEALLSERVERS)->EnableWindow(CanRemoveAllServers());
	GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnRemoveServer()
{
	INT  nIndex;
	CString  szServer;
	CServerProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->GetWindowText(szServer); (pProfileInfo = m_pAddressBook[0].GetAt((nIndex = m_pAddressBook[0].Find(szServer)))) && SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szServer)) >= 0; )
	{
		SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_SETCURSEL);
		m_pAddressBook[0].RemoveAt(nIndex);
		delete pProfileInfo;
		break;
	}
	ShowServerInfo();
	GetDlgItem(IDC_SERVERADDRESSBOOK_ADDSERVER)->EnableWindow(CanAddServer());
	GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVESERVER)->EnableWindow(CanRemoveServer());
	GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVEALLSERVERS)->EnableWindow(CanRemoveAllServers());
	GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnRemoveAllServers()
{
	CHourglassCursor  cCursor;

	for (SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_RESETCONTENT); !SendDlgItemMessage(IDC_SERVERADDRESSBOOK_SERVER, CB_GETCOUNT); )
	{
		m_pAddressBook[0].RemoveAll();
		break;
	}
	ShowServerInfo();
	GetDlgItem(IDC_SERVERADDRESSBOOK_ADDSERVER)->EnableWindow(CanAddServer());
	GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVESERVER)->EnableWindow(CanRemoveServer());
	GetDlgItem(IDC_SERVERADDRESSBOOK_REMOVEALLSERVERS)->EnableWindow(CanRemoveAllServers());
	GetDlgItem(IDC_SERVERADDRESSBOOK_SERVER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnAccessByVPN()
{
	CStringArray  szNumbers;
	CServerProfileInfo  *pProfileInfo;

	for (EnumDevices(), ShowDeviceInfo(); (pProfileInfo = FindServerProfile()); )
	{
		pProfileInfo->SetMode((pProfileInfo->GetMode() & ~(SERVERPROFILE_ACCESS_PHONE | SERVERPROFILE_BEHAVIOR_CALLBACK | SERVERPROFILE_BEHAVIOR_TRYALLNUMBERS | SERVERPROFILE_BEHAVIOR_MODEMSPEAKER | SERVERPROFILE_BEHAVIOR_SOFTWARECOMPRESSION)) | SERVERPROFILE_ACCESS_VPN);
		pProfileInfo->SetCallbackNumber(EMPTYSTRING);
		pProfileInfo->SetPhoneNumbers(szNumbers);
		break;
	}
	CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK, FALSE);
	CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS, FALSE);
	CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_MODEMSPEAKER, FALSE);
	CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_SOFTWARECOMPRESSION, FALSE);
	SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_RESETCONTENT);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_MODEMSPEAKER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_SOFTWARECOMPRESSION)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_ADDSERVER)->EnableWindow(CanAddServer());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnAccessByPhone()
{
	CStringArray  szNumbers;
	CServerProfileInfo  *pProfileInfo;

	for (EnumDevices(), ShowDeviceInfo(); (pProfileInfo = FindServerProfile()); )
	{
		pProfileInfo->SetMode((pProfileInfo->GetMode() & ~SERVERPROFILE_ACCESS_VPN) | SERVERPROFILE_ACCESS_PHONE | SERVERPROFILE_BEHAVIOR_MODEMSPEAKER | SERVERPROFILE_BEHAVIOR_SOFTWARECOMPRESSION);
		pProfileInfo->SetCallbackNumber(EMPTYSTRING);
		pProfileInfo->SetPhoneNumbers(szNumbers);
		break;
	}
	CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK, FALSE);
	CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS, FALSE);
	CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_MODEMSPEAKER, TRUE);
	CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_SOFTWARECOMPRESSION, TRUE);
	SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_RESETCONTENT);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR)->EnableWindow();
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK)->EnableWindow();
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_MODEMSPEAKER)->EnableWindow();
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_SOFTWARECOMPRESSION)->EnableWindow();
	GetDlgItem(IDC_SERVERADDRESSBOOK_ADDSERVER)->EnableWindow(CanAddServer());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnAddNumber()
{
	INT  nIndex;
	CString  szNumber;
	CStringArray  szNumbers;
	CServerProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS)->GetWindowText(szNumber); (nIndex = (INT)SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szNumber)) >= 0; )
	{
		if ((pProfileInfo = FindServerProfile()) && pProfileInfo->GetPhoneNumbers(szNumbers) >= 0)
		{
			szNumbers.InsertAt(nIndex, szNumber);
			pProfileInfo->SetPhoneNumbers(szNumbers);
		}
		SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_SETCURSEL, nIndex);
		break;
	}
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_ADDNUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_REMOVENUMBER)->EnableWindow(CanRemoveServerNumber());
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS)->EnableWindow((SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_GETCOUNT) > 1) ? TRUE : FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_ADDSERVER)->EnableWindow(CanAddServer());
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnRemoveNumber()
{
	INT  nIndex;
	CString  szNumber;
	CStringArray  szNumbers;
	CServerProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS)->GetWindowText(szNumber); SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNumber) >= 0 && SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_DELETESTRING, (WPARAM)(nIndex = (INT)SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szNumber))) >= 0; )
	{
		if ((pProfileInfo = FindServerProfile()) && pProfileInfo->GetPhoneNumbers(szNumbers))
		{
			szNumbers.RemoveAt(nIndex);
			pProfileInfo->SetPhoneNumbers(szNumbers);
		}
		CheckDlgButton(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS, (SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_GETCOUNT) > 1) ? IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS) : FALSE);
		SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_SETCURSEL);
		break;
	}
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_ADDNUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_REMOVENUMBER)->EnableWindow(CanRemoveServerNumber());
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS)->EnableWindow((SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS, CB_GETCOUNT) > 1) ? TRUE : FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_ADDSERVER)->EnableWindow(CanAddServer());
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_NUMBERS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnBehaviorCallback()
{
	UINT  nMode;
	CServerProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindServerProfile()))
	{
		nMode = (IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK)) ? (pProfileInfo->GetMode() | SERVERPROFILE_BEHAVIOR_CALLBACK) : (pProfileInfo->GetMode() & ~SERVERPROFILE_BEHAVIOR_CALLBACK);
		pProfileInfo->SetCallbackNumber(EMPTYSTRING);
		pProfileInfo->SetMode(nMode);
	}
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->EnableWindow(IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACK));
	GetDlgItem(IDC_SERVERADDRESSBOOK_ADDSERVER)->EnableWindow(CanAddServer());
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnBehaviorTryAllNumbers()
{
	UINT  nMode;
	CServerProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindServerProfile()))
	{
		nMode = (IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_TRYALLNUMBERS)) ? (pProfileInfo->GetMode() | SERVERPROFILE_BEHAVIOR_TRYALLNUMBERS) : (pProfileInfo->GetMode() & ~SERVERPROFILE_BEHAVIOR_TRYALLNUMBERS);
		pProfileInfo->SetMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnBehaviorModemSpeaker()
{
	UINT  nMode;
	CServerProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindServerProfile()))
	{
		nMode = (IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_MODEMSPEAKER)) ? (pProfileInfo->GetMode() | SERVERPROFILE_BEHAVIOR_MODEMSPEAKER) : (pProfileInfo->GetMode() & ~SERVERPROFILE_BEHAVIOR_MODEMSPEAKER);
		pProfileInfo->SetMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnBehaviorSoftwareCompression()
{
	UINT  nMode;
	CServerProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindServerProfile()))
	{
		nMode = (IsDlgButtonChecked(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_SOFTWARECOMPRESSION)) ? (pProfileInfo->GetMode() | SERVERPROFILE_BEHAVIOR_SOFTWARECOMPRESSION) : (pProfileInfo->GetMode() & ~SERVERPROFILE_BEHAVIOR_SOFTWARECOMPRESSION);
		pProfileInfo->SetMode(nMode);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnSelchangeDevice()
{
	CString  szDeviceName;
	CString  szDeviceType;
	CServerProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindServerProfile()))
	{
		GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICE)->GetWindowText(szDeviceName);
		GetDlgItem(IDC_SERVERADDRESSBOOK_DEVICETYPE)->SetWindowText((szDeviceType = m_szDeviceTypes.GetAt(SendDlgItemMessage(IDC_SERVERADDRESSBOOK_DEVICE, CB_GETCURSEL))));
		pProfileInfo->SetDeviceInfo(szDeviceName, szDeviceType);
	}
	GetDlgItem(IDC_SERVERADDRESSBOOK_ADDSERVER)->EnableWindow(CanAddServer());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnSelchangeNumber()
{
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_ADDNUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_REMOVENUMBER)->EnableWindow(CanRemoveServerNumber());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnEditchangeNumber()
{
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_ADDNUMBER)->EnableWindow(CanAddServerNumber());
	GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_REMOVENUMBER)->EnableWindow(CanRemoveServerNumber());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnEditchangeCallbackNumber()
{
	CString  szNumber;
	CServerProfileInfo  *pProfileInfo;

	if ((pProfileInfo = FindServerProfile()))
	{
		GetDlgItem(IDC_SERVERADDRESSBOOK_DIALUP_BEHAVIOR_CALLBACKNUMBER)->GetWindowText(szNumber);
		pProfileInfo->SetCallbackNumber(szNumber);
	}
	GetDlgItem(IDC_SERVERADDRESSBOOK_ADDSERVER)->EnableWindow(CanAddServer());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CServerAddressBookDialog::OnOK()
{
	INT  nComputer;
	INT  nComputers;
	BOOL  bComputers;
	CServerProfiles  *pProfiles[2];
	CServerAddressBook  cServerAddressBook;
	CHourglassCursor  cCursor;

	for (nComputer = 0, nComputers = (INT)m_szComputers.GetSize(), bComputers = TRUE; nComputer < nComputers; nComputer++)
	{
		if ((pProfiles[1] = ((pProfiles[0] = (cServerAddressBook.SetComputerName(m_szComputers.GetAt(nComputer)) && m_szComputer.CompareNoCase(m_szComputers.GetAt(nComputer))) ? (CServerProfiles *)m_pAddressBooks[0].GetAt(nComputer) : (CServerProfiles *)NULL)) ? (CServerProfiles *)m_pAddressBooks[1].GetAt(nComputer) : (CServerProfiles *)NULL) && !pProfiles[0]->Compare(pProfiles[1]))
		{
			bComputers &= cServerAddressBook.SetServerAddressBook(*(pProfiles[0]));
			continue;
		}
	}
	for (cServerAddressBook.SetComputerName(m_szComputer), bComputers &= (m_pAddressBook[0].Compare(&m_pAddressBook[1]) || cServerAddressBook.SetServerAddressBook(m_pAddressBook[0])); !bComputers; )
	{
		ReportEvent(SYSTEM_WARNING_SERVERPROFILES_UPDATE_FAILURE);
		break;
	}
	EndDialog(IDOK);
}

BOOL CServerAddressBookDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SERVERADDRESSBOOKDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CServerAddressBookDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_SERVERADDRESSBOOKDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookPersonalNotes

IMPLEMENT_DYNCREATE(CUserAddressBookPersonalNotes, CEdit)

BEGIN_MESSAGE_MAP(CUserAddressBookPersonalNotes, CEdit)
	//{{AFX_MSG_MAP(CUserAddressBookPersonalNotes)
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookPersonalNotes message handlers

void CUserAddressBookPersonalNotes::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	if (nChar == VK_TAB)
	{
		if (!HIBYTE(GetKeyState(VK_SHIFT)))
		{
			GetParent()->GetParent()->SetFocus();
			return;
		}
	}
	CEdit::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookPersonalPage property page

IMPLEMENT_DYNCREATE(CUserAddressBookPersonalPage, CLocalePropertyPage)

CUserAddressBookPersonalPage::CUserAddressBookPersonalPage() : CLocalePropertyPage(CUserAddressBookPersonalPage::IDD)
{
	//{{AFX_DATA_INIT(CUserAddressBookPersonalPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CUserAddressBookPersonalPage::SetInfo(CONST CUserProfileInfo *pProfileInfo, BOOL bUpdate)
{
	for (m_cProfileInfo[0].Copy(pProfileInfo); IsWindow(GetSafeHwnd()) && bUpdate; )
	{
		ShowUserInfo();
		break;
	}
}
VOID CUserAddressBookPersonalPage::SetInfo(CONST CUserProfileInfo *pProfileInfo, CONST CUserProfileInfo *pBackupProfileInfo, BOOL bAccess, BOOL bUpdate)
{
	for (m_cProfileInfo[0].Copy(pProfileInfo); pBackupProfileInfo != (CONST CUserProfileInfo *) NULL; )
	{
		m_cProfileInfo[1].Copy(pBackupProfileInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()))
	{
		if (bUpdate) ShowUserInfo();
		AdjustToPrivileges(bAccess);
	}
}

VOID CUserAddressBookPersonalPage::GetInfo(CUserProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cProfileInfo[0]);
}

CUserAddressBookFolder *CUserAddressBookPersonalPage::GetParent() CONST
{
	return((CUserAddressBookFolder *)CLocalePropertyPage::GetParent());
}

VOID CUserAddressBookPersonalPage::ShowUserInfo()
{
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_NAME)->SetWindowText(GetUserName());
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_FIRSTNAME)->SetWindowText(GetUserFirstName());
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_ALIAS)->SetWindowText(GetUserAlias());
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_PROFESSION)->SetWindowText(GetUserProfession());
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_NOTES)->SetWindowText(GetUserNotes());
}

CString CUserAddressBookPersonalPage::GetUserName() CONST
{
	return m_cProfileInfo[0].GetName();
}

CString CUserAddressBookPersonalPage::GetUserFirstName() CONST
{
	return m_cProfileInfo[0].GetFirstName();
}

CString CUserAddressBookPersonalPage::GetUserAlias() CONST
{
	return m_cProfileInfo[0].GetAlias();
}

CString CUserAddressBookPersonalPage::GetUserProfession() CONST
{
	return m_cProfileInfo[0].GetProfession();
}

CString CUserAddressBookPersonalPage::GetUserNotes() CONST
{
	return m_cProfileInfo[0].GetNotes();
}

VOID CUserAddressBookPersonalPage::AdjustToPrivileges(BOOL bAccess)
{
	AccessControl(IDC_USERADDRESSBOOK_PERSONALPAGE_NAME, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PERSONALPAGE_FIRSTNAME, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PERSONALPAGE_ALIAS, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PERSONALPAGE_PROFESSION, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PERSONALPAGE_NOTES, bAccess);
}

BOOL CUserAddressBookPersonalPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cProfileInfo[0].Compare(&m_cProfileInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CUserAddressBookPersonalPage::Check(BOOL bAll) CONST
{
	CUserProfileInfo  cProfileInfo;

	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? ((GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_NAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_FIRSTNAME)->GetWindowTextLength() > 0) || m_cProfileInfo[0].Compare(&cProfileInfo)) : CLocalePropertyPage::Check()) : TRUE);
}

void CUserAddressBookPersonalPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CUserAddressBookPersonalPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CUserAddressBookPersonalPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CUserAddressBookPersonalPage)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_PERSONALPAGE_NAME, OnEditchangeUserName)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_PERSONALPAGE_FIRSTNAME, OnEditchangeUserFirstName)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_PERSONALPAGE_ALIAS, OnEditchangeUserAlias)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_PERSONALPAGE_PROFESSION, OnEditchangeUserProfession)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_PERSONALPAGE_NOTES, OnEditchangeUserNotes)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookPersonalPage message handlers

BOOL CUserAddressBookPersonalPage::OnInitDialog()
{
	CLocalePropertyPage::OnInitDialog();
	m_wndNotes.SubclassWindow(GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_NOTES)->GetSafeHwnd());
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_NAME)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_FIRSTNAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_FIRSTNAME)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_ALIAS_STATIC)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_ALIAS)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_PROFESSION_STATIC)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_PROFESSION)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_NOTES_STATIC)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_NOTES)->EnableWindow();
	return TRUE;
}

BOOL CUserAddressBookPersonalPage::OnSetActive()
{
	GetParent()->GetInfo(&m_cProfileInfo[0]);
	return CLocalePropertyPage::OnSetActive();
}

BOOL CUserAddressBookPersonalPage::OnKillActive()
{
	GetParent()->SetInfo(&m_cProfileInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CUserAddressBookPersonalPage::OnEditchangeUserName()
{
	CString  szName;

	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_NAME)->GetWindowText(szName);
	m_cProfileInfo[0].SetName(szName);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookPersonalPage::OnEditchangeUserFirstName()
{
	CString  szFirstName;

	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_FIRSTNAME)->GetWindowText(szFirstName);
	m_cProfileInfo[0].SetFirstName(szFirstName);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookPersonalPage::OnEditchangeUserAlias()
{
	CString  szAlias;

	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_ALIAS)->GetWindowText(szAlias);
	m_cProfileInfo[0].SetAlias(szAlias);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookPersonalPage::OnEditchangeUserProfession()
{
	CString  szProfession;

	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_PROFESSION)->GetWindowText(szProfession);
	m_cProfileInfo[0].SetProfession(szProfession);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookPersonalPage::OnEditchangeUserNotes()
{
	CString  szNotes;

	GetDlgItem(IDC_USERADDRESSBOOK_PERSONALPAGE_NOTES)->GetWindowText(szNotes);
	m_cProfileInfo[0].SetNotes(szNotes);
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookOfficePage property page

IMPLEMENT_DYNCREATE(CUserAddressBookOfficePage, CLocalePropertyPage)

CUserAddressBookOfficePage::CUserAddressBookOfficePage() : CLocalePropertyPage(CUserAddressBookOfficePage::IDD)
{
	//{{AFX_DATA_INIT(CUserAddressBookOfficePage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CUserAddressBookOfficePage::SetInfo(CONST CUserProfileInfo *pProfileInfo, BOOL bUpdate)
{
	for (m_cProfileInfo[0].Copy(pProfileInfo); IsWindow(GetSafeHwnd()) && bUpdate; )
	{
		ShowUserInfo();
		break;
	}
}
VOID CUserAddressBookOfficePage::SetInfo(CONST CUserProfileInfo *pProfileInfo, CONST CUserProfileInfo *pBackupProfileInfo, BOOL bAccess, BOOL bUpdate)
{
	for (m_cProfileInfo[0].Copy(pProfileInfo); pBackupProfileInfo != (CONST CUserProfileInfo *) NULL; )
	{
		m_cProfileInfo[1].Copy(pBackupProfileInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()))
	{
		if (bUpdate) ShowUserInfo();
		AdjustToPrivileges(bAccess);
	}
}

VOID CUserAddressBookOfficePage::GetInfo(CUserProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cProfileInfo[0]);
}

CUserAddressBookFolder *CUserAddressBookOfficePage::GetParent() CONST
{
	return((CUserAddressBookFolder *)CLocalePropertyPage::GetParent());
}

INT CUserAddressBookOfficePage::EnumComputers()
{
	INT  nComputer;
	INT  nComputers;
	CStringArray  szComputers;

	for (nComputer = 0, nComputers = GetNetworkBrowseService()->EnumNetworkComputers(szComputers); nComputer < nComputers; nComputer++)
	{
		SendDlgItemMessage(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPUTER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
		continue;
	}
	return((SendDlgItemMessage(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPUTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

INT CUserAddressBookOfficePage::EnumPrintProfiles()
{
	INT  nPrintProfile;
	INT  nPrintProfiles;
	CPrintProfiles  pPrintProfiles;
	CPrintProfileInfo  *pPrintProfileInfo;

	for (nPrintProfile = 0, nPrintProfiles = (GetPrintProfiles(pPrintProfiles)) ? (INT)pPrintProfiles.GetSize() : 0; nPrintProfile < nPrintProfiles; nPrintProfile++)
	{
		if ((pPrintProfileInfo = pPrintProfiles.GetAt(nPrintProfile))) SendDlgItemMessage(IDC_USERADDRESSBOOK_OFFICEPAGE_PRINTPROFILE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pPrintProfileInfo->GetName());
		continue;
	}
	return((SendDlgItemMessage(IDC_USERADDRESSBOOK_OFFICEPAGE_PRINTPROFILE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CUserAddressBookOfficePage::ShowUserInfo()
{
	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPANY)->SetWindowText(GetOfficeCompanyName());
	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_STREET)->SetWindowText(GetOfficeCompanyStreet());
	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_CITY)->SetWindowText(GetOfficeCompanyCity());
	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_ZIPCODE)->SetWindowText(GetOfficeCompanyZipCode());
	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_COUNTRY)->SetWindowText(GetOfficeCompanyCountry());
	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_DEPARTMENT)->SetWindowText(GetOfficeCompanyDepartment());
	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPUTER)->SetWindowText(GetOfficeComputer());
	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_PRINTPROFILE)->SetWindowText(GetOfficePrintProfile());
	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_PHONE)->SetWindowText(GetOfficePhone());
	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_PAGER)->SetWindowText(GetOfficePager());
	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_FAX)->SetWindowText(GetOfficeFAX());
	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_EMAIL)->SetWindowText(GetOfficeEMail());
}

CString CUserAddressBookOfficePage::GetOfficeCompanyName() CONST
{
	return m_cProfileInfo[0].GetOfficeCompany();
}

CString CUserAddressBookOfficePage::GetOfficeCompanyStreet() CONST
{
	return m_cProfileInfo[0].GetOfficeStreet();
}

CString CUserAddressBookOfficePage::GetOfficeCompanyCity() CONST
{
	return m_cProfileInfo[0].GetOfficeCity();
}

CString CUserAddressBookOfficePage::GetOfficeCompanyZipCode() CONST
{
	return m_cProfileInfo[0].GetOfficeZipCode();
}

CString CUserAddressBookOfficePage::GetOfficeCompanyCountry() CONST
{
	return m_cProfileInfo[0].GetOfficeCountry();
}

CString CUserAddressBookOfficePage::GetOfficeCompanyDepartment() CONST
{
	return m_cProfileInfo[0].GetOfficeDepartment();
}

CString CUserAddressBookOfficePage::GetOfficeComputer() CONST
{
	return m_cProfileInfo[0].GetOfficeComputer();
}

CString CUserAddressBookOfficePage::GetOfficePrintProfile() CONST
{
	return m_cProfileInfo[0].GetOfficePrintProfile();
}

CString CUserAddressBookOfficePage::GetOfficePhone() CONST
{
	return m_cProfileInfo[0].GetOfficePhone();
}

CString CUserAddressBookOfficePage::GetOfficePager() CONST
{
	return m_cProfileInfo[0].GetOfficePager();
}

CString CUserAddressBookOfficePage::GetOfficeFAX() CONST
{
	return m_cProfileInfo[0].GetOfficeFAX();
}

CString CUserAddressBookOfficePage::GetOfficeEMail() CONST
{
	return m_cProfileInfo[0].GetOfficeEMail();
}

VOID CUserAddressBookOfficePage::AdjustToPrivileges(BOOL bAccess)
{
	AccessControl(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPANY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_OFFICEPAGE_STREET, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_OFFICEPAGE_CITY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_OFFICEPAGE_ZIPCODE, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_OFFICEPAGE_COUNTRY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_OFFICEPAGE_DEPARTMENT, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPUTER, bAccess, TRUE, FALSE);
	AccessControl(IDC_USERADDRESSBOOK_OFFICEPAGE_PRINTPROFILE, bAccess, TRUE, FALSE);
	AccessControl(IDC_USERADDRESSBOOK_OFFICEPAGE_PHONE, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_OFFICEPAGE_PAGER, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_OFFICEPAGE_FAX, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_OFFICEPAGE_EMAIL, bAccess);
}

BOOL CUserAddressBookOfficePage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cProfileInfo[0].Compare(&m_cProfileInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CUserAddressBookOfficePage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CUserAddressBookOfficePage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CUserAddressBookOfficePage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CUserAddressBookOfficePage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CUserAddressBookOfficePage)
	ON_CBN_EDITCHANGE(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPUTER, OnEditchangeOfficeComputer)
	ON_CBN_EDITCHANGE(IDC_USERADDRESSBOOK_OFFICEPAGE_PRINTPROFILE, OnEditchangeOfficePrintProfile)
	ON_CBN_SELCHANGE(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPUTER, OnSelchangeOfficeComputer)
	ON_CBN_SELCHANGE(IDC_USERADDRESSBOOK_OFFICEPAGE_PRINTPROFILE, OnSelchangeOfficePrintProfile)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPANY, OnEditchangeOfficeCompanyName)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_OFFICEPAGE_STREET, OnEditchangeOfficeCompanyStreet)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_OFFICEPAGE_CITY, OnEditchangeOfficeCompanyCity)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_OFFICEPAGE_ZIPCODE, OnEditchangeOfficeCompanyZipCode)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_OFFICEPAGE_COUNTRY, OnEditchangeOfficeCompanyCountry)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_OFFICEPAGE_DEPARTMENT, OnEditchangeOfficeCompanyDepartment)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_OFFICEPAGE_PHONE, OnEditchangeOfficePhone)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_OFFICEPAGE_PAGER, OnEditchangeOfficePager)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_OFFICEPAGE_FAX, OnEditchangeOfficeFAX)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_OFFICEPAGE_EMAIL, OnEditchangeOfficeEMail)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookOfficePage message handlers

BOOL CUserAddressBookOfficePage::OnInitDialog()
{
	for (CLocalePropertyPage::OnInitDialog(); EnumComputers() >= 0 && EnumPrintProfiles() >= 0; )
	{
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPANY_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPANY)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_STREET_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_STREET)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_CITY_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_CITY)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_ZIPCODE_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_ZIPCODE)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_COUNTRY_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_COUNTRY)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_DEPARTMENT_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_DEPARTMENT)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPUTER_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPUTER)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_PRINTPROFILE_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_PRINTPROFILE)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_PHONE_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_PHONE)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_PAGER_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_PAGER)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_FAX_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_FAX)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_EMAIL_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_EMAIL)->EnableWindow();
		break;
	}
	return TRUE;
}

BOOL CUserAddressBookOfficePage::OnSetActive()
{
	GetParent()->GetInfo(&m_cProfileInfo[0]);
	return CLocalePropertyPage::OnSetActive();
}

BOOL CUserAddressBookOfficePage::OnKillActive()
{
	GetParent()->SetInfo(&m_cProfileInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CUserAddressBookOfficePage::OnEditchangeOfficeCompanyName()
{
	CString  szCompany;

	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPANY)->GetWindowText(szCompany);
	m_cProfileInfo[0].SetOfficeCompany(szCompany);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookOfficePage::OnEditchangeOfficeCompanyStreet()
{
	CString  szStreet;

	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_STREET)->GetWindowText(szStreet);
	m_cProfileInfo[0].SetOfficeStreet(szStreet);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookOfficePage::OnEditchangeOfficeCompanyCity()
{
	CString  szCity;

	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_CITY)->GetWindowText(szCity);
	m_cProfileInfo[0].SetOfficeCity(szCity);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookOfficePage::OnEditchangeOfficeCompanyZipCode()
{
	CString  szZipCode;

	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_ZIPCODE)->GetWindowText(szZipCode);
	m_cProfileInfo[0].SetOfficeZipCode(szZipCode);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookOfficePage::OnEditchangeOfficeCompanyCountry()
{
	CString  szCountry;

	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_COUNTRY)->GetWindowText(szCountry);
	m_cProfileInfo[0].SetOfficeCountry(szCountry);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookOfficePage::OnEditchangeOfficeCompanyDepartment()
{
	CString  szDepartment;

	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_DEPARTMENT)->GetWindowText(szDepartment);
	m_cProfileInfo[0].SetOfficeDepartment(szDepartment);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookOfficePage::OnEditchangeOfficeComputer()
{
	CString  szComputer;

	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPUTER)->GetWindowText(szComputer);
	m_cProfileInfo[0].SetOfficeComputer(szComputer);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookOfficePage::OnEditchangeOfficePrintProfile()
{
	CString  szPrintProfile;

	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_PRINTPROFILE)->GetWindowText(szPrintProfile);
	m_cProfileInfo[0].SetOfficePrintProfile(szPrintProfile);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookOfficePage::OnEditchangeOfficePhone()
{
	CString  szPhone;

	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_PHONE)->GetWindowText(szPhone);
	m_cProfileInfo[0].SetOfficePhone(szPhone);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookOfficePage::OnEditchangeOfficePager()
{
	CString  szPager;

	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_PAGER)->GetWindowText(szPager);
	m_cProfileInfo[0].SetOfficePager(szPager);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookOfficePage::OnEditchangeOfficeFAX()
{
	CString  szFAX;

	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_FAX)->GetWindowText(szFAX);
	m_cProfileInfo[0].SetOfficeFAX(szFAX);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookOfficePage::OnEditchangeOfficeEMail()
{
	CString  szEMail;

	GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_EMAIL)->GetWindowText(szEMail);
	m_cProfileInfo[0].SetOfficeEMail(szEMail);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookOfficePage::OnSelchangeOfficeComputer()
{
	m_cProfileInfo[0].SetOfficeComputer(Combobox_GetText(GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPUTER), (INT)SendDlgItemMessage(IDC_USERADDRESSBOOK_OFFICEPAGE_COMPUTER, CB_GETCURSEL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookOfficePage::OnSelchangeOfficePrintProfile()
{
	m_cProfileInfo[0].SetOfficePrintProfile(Combobox_GetText(GetDlgItem(IDC_USERADDRESSBOOK_OFFICEPAGE_PRINTPROFILE), (INT)SendDlgItemMessage(IDC_USERADDRESSBOOK_OFFICEPAGE_PRINTPROFILE, CB_GETCURSEL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookMissionPage property page

IMPLEMENT_DYNCREATE(CUserAddressBookMissionPage, CLocalePropertyPage)

CUserAddressBookMissionPage::CUserAddressBookMissionPage() : CLocalePropertyPage(CUserAddressBookMissionPage::IDD)
{
	//{{AFX_DATA_INIT(CUserAddressBookMissionPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CUserAddressBookMissionPage::SetInfo(CONST CUserProfileInfo *pProfileInfo, BOOL bUpdate)
{
	for (m_cProfileInfo[0].Copy(pProfileInfo); IsWindow(GetSafeHwnd()) && bUpdate; )
	{
		ShowUserInfo();
		break;
	}
}
VOID CUserAddressBookMissionPage::SetInfo(CONST CUserProfileInfo *pProfileInfo, CONST CUserProfileInfo *pBackupProfileInfo, BOOL bAccess, BOOL bUpdate)
{
	for (m_cProfileInfo[0].Copy(pProfileInfo); pBackupProfileInfo != (CONST CUserProfileInfo *) NULL; )
	{
		m_cProfileInfo[1].Copy(pBackupProfileInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()))
	{
		if (bUpdate) ShowUserInfo();
		AdjustToPrivileges(bAccess);
	}
}

VOID CUserAddressBookMissionPage::GetInfo(CUserProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cProfileInfo[0]);
}

CUserAddressBookFolder *CUserAddressBookMissionPage::GetParent() CONST
{
	return((CUserAddressBookFolder *)CLocalePropertyPage::GetParent());
}

INT CUserAddressBookMissionPage::EnumComputers()
{
	INT  nComputer;
	INT  nComputers;
	CStringArray  szComputers;

	for (nComputer = 0, nComputers = GetNetworkBrowseService()->EnumNetworkComputers(szComputers); nComputer < nComputers; nComputer++)
	{
		SendDlgItemMessage(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPUTER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
		continue;
	}
	return((SendDlgItemMessage(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPUTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

INT CUserAddressBookMissionPage::EnumPrintProfiles()
{
	INT  nPrintProfile;
	INT  nPrintProfiles;
	CPrintProfiles  pPrintProfiles;
	CPrintProfileInfo  *pPrintProfileInfo;

	for (nPrintProfile = 0, nPrintProfiles = (GetPrintProfiles(pPrintProfiles)) ? (INT)pPrintProfiles.GetSize() : 0; nPrintProfile < nPrintProfiles; nPrintProfile++)
	{
		if ((pPrintProfileInfo = pPrintProfiles.GetAt(nPrintProfile))) SendDlgItemMessage(IDC_USERADDRESSBOOK_MISSIONPAGE_PRINTPROFILE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pPrintProfileInfo->GetName());
		continue;
	}
	return((SendDlgItemMessage(IDC_USERADDRESSBOOK_MISSIONPAGE_PRINTPROFILE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CUserAddressBookMissionPage::ShowUserInfo()
{
	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPANY)->SetWindowText(GetMissionCompanyName());
	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_STREET)->SetWindowText(GetMissionCompanyStreet());
	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_CITY)->SetWindowText(GetMissionCompanyCity());
	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_ZIPCODE)->SetWindowText(GetMissionCompanyZipCode());
	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_COUNTRY)->SetWindowText(GetMissionCompanyCountry());
	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_DEPARTMENT)->SetWindowText(GetMissionCompanyDepartment());
	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPUTER)->SetWindowText(GetMissionComputer());
	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_PRINTPROFILE)->SetWindowText(GetMissionPrintProfile());
	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_PHONE)->SetWindowText(GetMissionPhone());
	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_MOBILE)->SetWindowText(GetMissionMobile());
	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_FAX)->SetWindowText(GetMissionFAX());
	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_EMAIL)->SetWindowText(GetMissionEMail());
}

CString CUserAddressBookMissionPage::GetMissionCompanyName() CONST
{
	return m_cProfileInfo[0].GetMissionCompany();
}

CString CUserAddressBookMissionPage::GetMissionCompanyStreet() CONST
{
	return m_cProfileInfo[0].GetMissionStreet();
}

CString CUserAddressBookMissionPage::GetMissionCompanyCity() CONST
{
	return m_cProfileInfo[0].GetMissionCity();
}

CString CUserAddressBookMissionPage::GetMissionCompanyZipCode() CONST
{
	return m_cProfileInfo[0].GetMissionZipCode();
}

CString CUserAddressBookMissionPage::GetMissionCompanyCountry() CONST
{
	return m_cProfileInfo[0].GetMissionCountry();
}

CString CUserAddressBookMissionPage::GetMissionCompanyDepartment() CONST
{
	return m_cProfileInfo[0].GetMissionDepartment();
}

CString CUserAddressBookMissionPage::GetMissionComputer() CONST
{
	return m_cProfileInfo[0].GetMissionComputer();
}

CString CUserAddressBookMissionPage::GetMissionPrintProfile() CONST
{
	return m_cProfileInfo[0].GetMissionPrintProfile();
}

CString CUserAddressBookMissionPage::GetMissionPhone() CONST
{
	return m_cProfileInfo[0].GetMissionPhone();
}

CString CUserAddressBookMissionPage::GetMissionMobile() CONST
{
	return m_cProfileInfo[0].GetMissionMobile();
}

CString CUserAddressBookMissionPage::GetMissionFAX() CONST
{
	return m_cProfileInfo[0].GetMissionFAX();
}

CString CUserAddressBookMissionPage::GetMissionEMail() CONST
{
	return m_cProfileInfo[0].GetMissionEMail();
}

VOID CUserAddressBookMissionPage::AdjustToPrivileges(BOOL bAccess)
{
	AccessControl(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPANY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_MISSIONPAGE_STREET, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_MISSIONPAGE_CITY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_MISSIONPAGE_ZIPCODE, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_MISSIONPAGE_COUNTRY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_MISSIONPAGE_DEPARTMENT, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPUTER, bAccess, TRUE, FALSE);
	AccessControl(IDC_USERADDRESSBOOK_MISSIONPAGE_PRINTPROFILE, bAccess, TRUE, FALSE);
	AccessControl(IDC_USERADDRESSBOOK_MISSIONPAGE_PHONE, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_MISSIONPAGE_MOBILE, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_MISSIONPAGE_FAX, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_MISSIONPAGE_EMAIL, bAccess);
}

BOOL CUserAddressBookMissionPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cProfileInfo[0].Compare(&m_cProfileInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CUserAddressBookMissionPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CUserAddressBookMissionPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CUserAddressBookMissionPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CUserAddressBookMissionPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CUserAddressBookMissionPage)
	ON_CBN_EDITCHANGE(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPUTER, OnEditchangeMissionComputer)
	ON_CBN_EDITCHANGE(IDC_USERADDRESSBOOK_MISSIONPAGE_PRINTPROFILE, OnEditchangeMissionPrintProfile)
	ON_CBN_SELCHANGE(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPUTER, OnSelchangeMissionComputer)
	ON_CBN_SELCHANGE(IDC_USERADDRESSBOOK_MISSIONPAGE_PRINTPROFILE, OnSelchangeMissionPrintProfile)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPANY, OnEditchangeMissionCompanyName)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_MISSIONPAGE_STREET, OnEditchangeMissionCompanyStreet)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_MISSIONPAGE_CITY, OnEditchangeMissionCompanyCity)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_MISSIONPAGE_ZIPCODE, OnEditchangeMissionCompanyZipCode)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_MISSIONPAGE_COUNTRY, OnEditchangeMissionCompanyCountry)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_MISSIONPAGE_DEPARTMENT, OnEditchangeMissionCompanyDepartment)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_MISSIONPAGE_PHONE, OnEditchangeMissionPhone)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_MISSIONPAGE_MOBILE, OnEditchangeMissionMobile)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_MISSIONPAGE_FAX, OnEditchangeMissionFAX)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_MISSIONPAGE_EMAIL, OnEditchangeMissionEMail)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookMissionPage message handlers

BOOL CUserAddressBookMissionPage::OnInitDialog()
{
	for (CLocalePropertyPage::OnInitDialog(); EnumComputers() >= 0 && EnumPrintProfiles() >= 0; )
	{
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPANY_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPANY)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_STREET_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_STREET)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_CITY_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_CITY)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_ZIPCODE_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_ZIPCODE)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_COUNTRY_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_COUNTRY)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_DEPARTMENT_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_DEPARTMENT)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPUTER_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPUTER)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_PRINTPROFILE_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_PRINTPROFILE)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_PHONE_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_PHONE)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_MOBILE_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_MOBILE)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_FAX_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_FAX)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_EMAIL_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_EMAIL)->EnableWindow();
		break;
	}
	return TRUE;
}

BOOL CUserAddressBookMissionPage::OnSetActive()
{
	GetParent()->GetInfo(&m_cProfileInfo[0]);
	return CLocalePropertyPage::OnSetActive();
}

BOOL CUserAddressBookMissionPage::OnKillActive()
{
	GetParent()->SetInfo(&m_cProfileInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CUserAddressBookMissionPage::OnEditchangeMissionCompanyName()
{
	CString  szCompany;

	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPANY)->GetWindowText(szCompany);
	m_cProfileInfo[0].SetMissionCompany(szCompany);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookMissionPage::OnEditchangeMissionCompanyStreet()
{
	CString  szStreet;

	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_STREET)->GetWindowText(szStreet);
	m_cProfileInfo[0].SetMissionStreet(szStreet);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookMissionPage::OnEditchangeMissionCompanyCity()
{
	CString  szCity;

	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_CITY)->GetWindowText(szCity);
	m_cProfileInfo[0].SetMissionCity(szCity);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookMissionPage::OnEditchangeMissionCompanyZipCode()
{
	CString  szZipCode;

	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_ZIPCODE)->GetWindowText(szZipCode);
	m_cProfileInfo[0].SetMissionZipCode(szZipCode);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookMissionPage::OnEditchangeMissionCompanyCountry()
{
	CString  szCountry;

	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_COUNTRY)->GetWindowText(szCountry);
	m_cProfileInfo[0].SetMissionCountry(szCountry);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookMissionPage::OnEditchangeMissionCompanyDepartment()
{
	CString  szDepartment;

	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_DEPARTMENT)->GetWindowText(szDepartment);
	m_cProfileInfo[0].SetMissionDepartment(szDepartment);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookMissionPage::OnEditchangeMissionComputer()
{
	CString  szComputer;

	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPUTER)->GetWindowText(szComputer);
	m_cProfileInfo[0].SetMissionComputer(szComputer);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookMissionPage::OnEditchangeMissionPrintProfile()
{
	CString  szPrintProfile;

	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_PRINTPROFILE)->GetWindowText(szPrintProfile);
	m_cProfileInfo[0].SetMissionPrintProfile(szPrintProfile);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookMissionPage::OnEditchangeMissionPhone()
{
	CString  szPhone;

	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_PHONE)->GetWindowText(szPhone);
	m_cProfileInfo[0].SetMissionPhone(szPhone);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookMissionPage::OnEditchangeMissionMobile()
{
	CString  szMobile;

	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_MOBILE)->GetWindowText(szMobile);
	m_cProfileInfo[0].SetMissionMobile(szMobile);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookMissionPage::OnEditchangeMissionFAX()
{
	CString  szFAX;

	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_FAX)->GetWindowText(szFAX);
	m_cProfileInfo[0].SetMissionFAX(szFAX);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookMissionPage::OnEditchangeMissionEMail()
{
	CString  szEMail;

	GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_EMAIL)->GetWindowText(szEMail);
	m_cProfileInfo[0].SetMissionEMail(szEMail);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookMissionPage::OnSelchangeMissionComputer()
{
	m_cProfileInfo[0].SetMissionComputer(Combobox_GetText(GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPUTER), (INT)SendDlgItemMessage(IDC_USERADDRESSBOOK_MISSIONPAGE_COMPUTER, CB_GETCURSEL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookMissionPage::OnSelchangeMissionPrintProfile()
{
	m_cProfileInfo[0].SetMissionPrintProfile(Combobox_GetText(GetDlgItem(IDC_USERADDRESSBOOK_MISSIONPAGE_PRINTPROFILE), (INT)SendDlgItemMessage(IDC_USERADDRESSBOOK_MISSIONPAGE_PRINTPROFILE, CB_GETCURSEL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookHomePage property page

IMPLEMENT_DYNCREATE(CUserAddressBookHomePage, CLocalePropertyPage)

CUserAddressBookHomePage::CUserAddressBookHomePage() : CLocalePropertyPage(CUserAddressBookHomePage::IDD)
{
	//{{AFX_DATA_INIT(CUserAddressBookHomePage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CUserAddressBookHomePage::SetInfo(CONST CUserProfileInfo *pProfileInfo, BOOL bUpdate)
{
	for (m_cProfileInfo[0].Copy(pProfileInfo); IsWindow(GetSafeHwnd()) && bUpdate; )
	{
		ShowUserInfo();
		break;
	}
}
VOID CUserAddressBookHomePage::SetInfo(CONST CUserProfileInfo *pProfileInfo, CONST CUserProfileInfo *pBackupProfileInfo, BOOL bAccess, BOOL bUpdate)
{
	for (m_cProfileInfo[0].Copy(pProfileInfo); pBackupProfileInfo != (CONST CUserProfileInfo *) NULL; )
	{
		m_cProfileInfo[1].Copy(pBackupProfileInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()))
	{
		if (bUpdate) ShowUserInfo();
		AdjustToPrivileges(bAccess);
	}
}

VOID CUserAddressBookHomePage::GetInfo(CUserProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cProfileInfo[0]);
}

CUserAddressBookFolder *CUserAddressBookHomePage::GetParent() CONST
{
	return((CUserAddressBookFolder *)CLocalePropertyPage::GetParent());
}

INT CUserAddressBookHomePage::EnumComputers()
{
	INT  nComputer;
	INT  nComputers;
	CStringArray  szComputers;

	for (nComputer = 0, nComputers = GetNetworkBrowseService()->EnumNetworkComputers(szComputers); nComputer < nComputers; nComputer++)
	{
		SendDlgItemMessage(IDC_USERADDRESSBOOK_HOMEPAGE_COMPUTER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
		continue;
	}
	return((SendDlgItemMessage(IDC_USERADDRESSBOOK_HOMEPAGE_COMPUTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

INT CUserAddressBookHomePage::EnumPrintProfiles()
{
	INT  nPrintProfile;
	INT  nPrintProfiles;
	CPrintProfiles  pPrintProfiles;
	CPrintProfileInfo  *pPrintProfileInfo;

	for (nPrintProfile = 0, nPrintProfiles = (GetPrintProfiles(pPrintProfiles)) ? (INT)pPrintProfiles.GetSize() : 0; nPrintProfile < nPrintProfiles; nPrintProfile++)
	{
		if ((pPrintProfileInfo = pPrintProfiles.GetAt(nPrintProfile))) SendDlgItemMessage(IDC_USERADDRESSBOOK_HOMEPAGE_PRINTPROFILE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pPrintProfileInfo->GetName());
		continue;
	}
	return((SendDlgItemMessage(IDC_USERADDRESSBOOK_HOMEPAGE_PRINTPROFILE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CUserAddressBookHomePage::ShowUserInfo()
{
	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_FAMILYNAME)->SetWindowText(GetHomeFamilyName());
	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_STREET)->SetWindowText(GetHomeStreet());
	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_CITY)->SetWindowText(GetHomeCity());
	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_ZIPCODE)->SetWindowText(GetHomeZipCode());
	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_COUNTRY)->SetWindowText(GetHomeCountry());
	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_COMPUTER)->SetWindowText(GetHomeComputer());
	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_PRINTPROFILE)->SetWindowText(GetHomePrintProfile());
	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_PHONE)->SetWindowText(GetHomePhone());
	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_FAX)->SetWindowText(GetHomeFAX());
	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_EMAIL)->SetWindowText(GetHomeEMail());
}

CString CUserAddressBookHomePage::GetHomeFamilyName() CONST
{
	return m_cProfileInfo[0].GetHomeFamilyName();
}

CString CUserAddressBookHomePage::GetHomeStreet() CONST
{
	return m_cProfileInfo[0].GetHomeStreet();
}

CString CUserAddressBookHomePage::GetHomeCity() CONST
{
	return m_cProfileInfo[0].GetHomeCity();
}

CString CUserAddressBookHomePage::GetHomeZipCode() CONST
{
	return m_cProfileInfo[0].GetHomeZipCode();
}

CString CUserAddressBookHomePage::GetHomeCountry() CONST
{
	return m_cProfileInfo[0].GetHomeCountry();
}

CString CUserAddressBookHomePage::GetHomeComputer() CONST
{
	return m_cProfileInfo[0].GetHomeComputer();
}

CString CUserAddressBookHomePage::GetHomePrintProfile() CONST
{
	return m_cProfileInfo[0].GetHomePrintProfile();
}

CString CUserAddressBookHomePage::GetHomePhone() CONST
{
	return m_cProfileInfo[0].GetHomePhone();
}

CString CUserAddressBookHomePage::GetHomeFAX() CONST
{
	return m_cProfileInfo[0].GetHomeFAX();
}

CString CUserAddressBookHomePage::GetHomeEMail() CONST
{
	return m_cProfileInfo[0].GetHomeEMail();
}

VOID CUserAddressBookHomePage::AdjustToPrivileges(BOOL bAccess)
{
	AccessControl(IDC_USERADDRESSBOOK_HOMEPAGE_FAMILYNAME, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_HOMEPAGE_STREET, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_HOMEPAGE_CITY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_HOMEPAGE_ZIPCODE, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_HOMEPAGE_COUNTRY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_HOMEPAGE_COMPUTER, bAccess, TRUE, FALSE);
	AccessControl(IDC_USERADDRESSBOOK_HOMEPAGE_PRINTPROFILE, bAccess, TRUE, FALSE);
	AccessControl(IDC_USERADDRESSBOOK_HOMEPAGE_PHONE, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_HOMEPAGE_FAX, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_HOMEPAGE_EMAIL, bAccess);
}

BOOL CUserAddressBookHomePage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cProfileInfo[0].Compare(&m_cProfileInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CUserAddressBookHomePage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CUserAddressBookHomePage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CUserAddressBookHomePage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CUserAddressBookHomePage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CUserAddressBookHomePage)
	ON_CBN_EDITCHANGE(IDC_USERADDRESSBOOK_HOMEPAGE_COMPUTER, OnEditchangeHomeComputer)
	ON_CBN_EDITCHANGE(IDC_USERADDRESSBOOK_HOMEPAGE_PRINTPROFILE, OnEditchangeHomePrintProfile)
	ON_CBN_SELCHANGE(IDC_USERADDRESSBOOK_HOMEPAGE_COMPUTER, OnSelchangeHomeComputer)
	ON_CBN_SELCHANGE(IDC_USERADDRESSBOOK_HOMEPAGE_PRINTPROFILE, OnSelchangeHomePrintProfile)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOMEPAGE_FAMILYNAME, OnEditchangeHomeFamilyName)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOMEPAGE_STREET, OnEditchangeHomeStreet)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOMEPAGE_CITY, OnEditchangeHomeCity)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOMEPAGE_ZIPCODE, OnEditchangeHomeZipCode)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOMEPAGE_COUNTRY, OnEditchangeHomeCountry)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOMEPAGE_PHONE, OnEditchangeHomePhone)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOMEPAGE_FAX, OnEditchangeHomeFAX)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOMEPAGE_EMAIL, OnEditchangeHomeEMail)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookHomePage message handlers

BOOL CUserAddressBookHomePage::OnInitDialog()
{
	for (CLocalePropertyPage::OnInitDialog(); EnumComputers() >= 0 && EnumPrintProfiles() >= 0; )
	{
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_FAMILYNAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_FAMILYNAME)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_STREET_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_STREET)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_CITY_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_CITY)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_ZIPCODE_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_ZIPCODE)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_COUNTRY_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_COUNTRY)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_COMPUTER_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_COMPUTER)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_PRINTPROFILE_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_PRINTPROFILE)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_PHONE_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_PHONE)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_FAX_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_FAX)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_EMAIL_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_EMAIL)->EnableWindow();
		break;
	}
	return TRUE;
}

BOOL CUserAddressBookHomePage::OnSetActive()
{
	GetParent()->GetInfo(&m_cProfileInfo[0]);
	return CLocalePropertyPage::OnSetActive();
}

BOOL CUserAddressBookHomePage::OnKillActive()
{
	GetParent()->SetInfo(&m_cProfileInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CUserAddressBookHomePage::OnEditchangeHomeFamilyName()
{
	CString  szFamilyName;

	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_FAMILYNAME)->GetWindowText(szFamilyName);
	m_cProfileInfo[0].SetHomeFamilyName(szFamilyName);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHomePage::OnEditchangeHomeStreet()
{
	CString  szStreet;

	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_STREET)->GetWindowText(szStreet);
	m_cProfileInfo[0].SetHomeStreet(szStreet);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHomePage::OnEditchangeHomeCity()
{
	CString  szCity;

	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_CITY)->GetWindowText(szCity);
	m_cProfileInfo[0].SetHomeCity(szCity);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHomePage::OnEditchangeHomeZipCode()
{
	CString  szZipCode;

	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_ZIPCODE)->GetWindowText(szZipCode);
	m_cProfileInfo[0].SetHomeZipCode(szZipCode);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHomePage::OnEditchangeHomeCountry()
{
	CString  szCountry;

	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_COUNTRY)->GetWindowText(szCountry);
	m_cProfileInfo[0].SetHomeCountry(szCountry);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHomePage::OnEditchangeHomeComputer()
{
	CString  szComputer;

	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_COMPUTER)->GetWindowText(szComputer);
	m_cProfileInfo[0].SetHomeComputer(szComputer);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHomePage::OnEditchangeHomePrintProfile()
{
	CString  szPrintProfile;

	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_PRINTPROFILE)->GetWindowText(szPrintProfile);
	m_cProfileInfo[0].SetHomePrintProfile(szPrintProfile);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHomePage::OnEditchangeHomePhone()
{
	CString  szPhone;

	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_PHONE)->GetWindowText(szPhone);
	m_cProfileInfo[0].SetHomePhone(szPhone);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHomePage::OnEditchangeHomeFAX()
{
	CString  szFAX;

	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_FAX)->GetWindowText(szFAX);
	m_cProfileInfo[0].SetHomeFAX(szFAX);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHomePage::OnEditchangeHomeEMail()
{
	CString  szEMail;

	GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_EMAIL)->GetWindowText(szEMail);
	m_cProfileInfo[0].SetHomeEMail(szEMail);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHomePage::OnSelchangeHomeComputer()
{
	m_cProfileInfo[0].SetHomeComputer(Combobox_GetText(GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_COMPUTER), (INT)SendDlgItemMessage(IDC_USERADDRESSBOOK_HOMEPAGE_COMPUTER, CB_GETCURSEL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHomePage::OnSelchangeHomePrintProfile()
{
	m_cProfileInfo[0].SetHomePrintProfile(Combobox_GetText(GetDlgItem(IDC_USERADDRESSBOOK_HOMEPAGE_PRINTPROFILE), (INT)SendDlgItemMessage(IDC_USERADDRESSBOOK_HOMEPAGE_PRINTPROFILE, CB_GETCURSEL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookHolidayPage property page

IMPLEMENT_DYNCREATE(CUserAddressBookHolidayPage, CLocalePropertyPage)

CUserAddressBookHolidayPage::CUserAddressBookHolidayPage() : CLocalePropertyPage(CUserAddressBookHolidayPage::IDD)
{
	//{{AFX_DATA_INIT(CUserAddressBookHolidayPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CUserAddressBookHolidayPage::SetInfo(CONST CUserProfileInfo *pProfileInfo, BOOL bUpdate)
{
	for (m_cProfileInfo[0].Copy(pProfileInfo); IsWindow(GetSafeHwnd()) && bUpdate; )
	{
		ShowUserInfo();
		break;
	}
}
VOID CUserAddressBookHolidayPage::SetInfo(CONST CUserProfileInfo *pProfileInfo, CONST CUserProfileInfo *pBackupProfileInfo, BOOL bAccess, BOOL bUpdate)
{
	for (m_cProfileInfo[0].Copy(pProfileInfo); pBackupProfileInfo != (CONST CUserProfileInfo *) NULL; )
	{
		m_cProfileInfo[1].Copy(pBackupProfileInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()))
	{
		if (bUpdate) ShowUserInfo();
		AdjustToPrivileges(bAccess);
	}
}

VOID CUserAddressBookHolidayPage::GetInfo(CUserProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cProfileInfo[0]);
}

CUserAddressBookFolder *CUserAddressBookHolidayPage::GetParent() CONST
{
	return((CUserAddressBookFolder *)CLocalePropertyPage::GetParent());
}

INT CUserAddressBookHolidayPage::EnumComputers()
{
	INT  nComputer;
	INT  nComputers;
	CStringArray  szComputers;

	for (nComputer = 0, nComputers = GetNetworkBrowseService()->EnumNetworkComputers(szComputers); nComputer < nComputers; nComputer++)
	{
		SendDlgItemMessage(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COMPUTER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
		continue;
	}
	return((SendDlgItemMessage(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COMPUTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

INT CUserAddressBookHolidayPage::EnumPrintProfiles()
{
	INT  nPrintProfile;
	INT  nPrintProfiles;
	CPrintProfiles  pPrintProfiles;
	CPrintProfileInfo  *pPrintProfileInfo;

	for (nPrintProfile = 0, nPrintProfiles = (GetPrintProfiles(pPrintProfiles)) ? (INT)pPrintProfiles.GetSize() : 0; nPrintProfile < nPrintProfiles; nPrintProfile++)
	{
		if ((pPrintProfileInfo = pPrintProfiles.GetAt(nPrintProfile))) SendDlgItemMessage(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PRINTPROFILE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pPrintProfileInfo->GetName());
		continue;
	}
	return((SendDlgItemMessage(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PRINTPROFILE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CUserAddressBookHolidayPage::ShowUserInfo()
{
	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_HOTEL)->SetWindowText(GetHolidayHotelName());
	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_STREET)->SetWindowText(GetHolidayHotelStreet());
	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_CITY)->SetWindowText(GetHolidayHotelCity());
	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_ZIPCODE)->SetWindowText(GetHolidayHotelZipCode());
	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COUNTRY)->SetWindowText(GetHolidayHotelCountry());
	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_APARTMENT)->SetWindowText(GetHolidayHotelApartment());
	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COMPUTER)->SetWindowText(GetHolidayComputer());
	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PRINTPROFILE)->SetWindowText(GetHolidayPrintProfile());
	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PHONE)->SetWindowText(GetHolidayPhone());
	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_FAX)->SetWindowText(GetHolidayFAX());
	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_EMAIL)->SetWindowText(GetHolidayEMail());
}

CString CUserAddressBookHolidayPage::GetHolidayHotelName() CONST
{
	return m_cProfileInfo[0].GetHolidayHotel();
}

CString CUserAddressBookHolidayPage::GetHolidayHotelStreet() CONST
{
	return m_cProfileInfo[0].GetHolidayStreet();
}

CString CUserAddressBookHolidayPage::GetHolidayHotelCity() CONST
{
	return m_cProfileInfo[0].GetHolidayCity();
}

CString CUserAddressBookHolidayPage::GetHolidayHotelZipCode() CONST
{
	return m_cProfileInfo[0].GetHolidayZipCode();
}

CString CUserAddressBookHolidayPage::GetHolidayHotelCountry() CONST
{
	return m_cProfileInfo[0].GetHolidayCountry();
}

CString CUserAddressBookHolidayPage::GetHolidayHotelApartment() CONST
{
	return m_cProfileInfo[0].GetHolidayApartment();
}

CString CUserAddressBookHolidayPage::GetHolidayComputer() CONST
{
	return m_cProfileInfo[0].GetHolidayComputer();
}

CString CUserAddressBookHolidayPage::GetHolidayPrintProfile() CONST
{
	return m_cProfileInfo[0].GetHolidayPrintProfile();
}

CString CUserAddressBookHolidayPage::GetHolidayPhone() CONST
{
	return m_cProfileInfo[0].GetHolidayPhone();
}

CString CUserAddressBookHolidayPage::GetHolidayFAX() CONST
{
	return m_cProfileInfo[0].GetHolidayFAX();
}

CString CUserAddressBookHolidayPage::GetHolidayEMail() CONST
{
	return m_cProfileInfo[0].GetHolidayEMail();
}

VOID CUserAddressBookHolidayPage::AdjustToPrivileges(BOOL bAccess)
{
	AccessControl(IDC_USERADDRESSBOOK_HOLIDAYPAGE_HOTEL, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_HOLIDAYPAGE_STREET, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_HOLIDAYPAGE_CITY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_HOLIDAYPAGE_ZIPCODE, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COUNTRY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_HOLIDAYPAGE_APARTMENT, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COMPUTER, bAccess, TRUE, FALSE);
	AccessControl(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PRINTPROFILE, bAccess, TRUE, FALSE);
	AccessControl(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PHONE, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_HOLIDAYPAGE_FAX, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_HOLIDAYPAGE_EMAIL, bAccess);
}

BOOL CUserAddressBookHolidayPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cProfileInfo[0].Compare(&m_cProfileInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CUserAddressBookHolidayPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CUserAddressBookHolidayPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CUserAddressBookHolidayPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CUserAddressBookHolidayPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CUserAddressBookHolidayPage)
	ON_CBN_EDITCHANGE(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COMPUTER, OnEditchangeHolidayComputer)
	ON_CBN_EDITCHANGE(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PRINTPROFILE, OnEditchangeHolidayPrintProfile)
	ON_CBN_SELCHANGE(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COMPUTER, OnSelchangeHolidayComputer)
	ON_CBN_SELCHANGE(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PRINTPROFILE, OnSelchangeHolidayPrintProfile)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOLIDAYPAGE_HOTEL, OnEditchangeHolidayHotelName)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOLIDAYPAGE_STREET, OnEditchangeHolidayHotelStreet)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOLIDAYPAGE_CITY, OnEditchangeHolidayHotelCity)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOLIDAYPAGE_ZIPCODE, OnEditchangeHolidayHotelZipCode)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COUNTRY, OnEditchangeHolidayHotelCountry)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOLIDAYPAGE_APARTMENT, OnEditchangeHolidayHotelApartment)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PHONE, OnEditchangeHolidayPhone)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOLIDAYPAGE_FAX, OnEditchangeHolidayFAX)
	ON_EN_CHANGE(IDC_USERADDRESSBOOK_HOLIDAYPAGE_EMAIL, OnEditchangeHolidayEMail)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookHolidayPage message handlers

BOOL CUserAddressBookHolidayPage::OnInitDialog()
{
	for (CLocalePropertyPage::OnInitDialog(); EnumComputers() >= 0 && EnumPrintProfiles() >= 0; )
	{
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_DETAILS)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_HOTEL_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_HOTEL)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_STREET_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_STREET)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_CITY_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_CITY)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_ZIPCODE_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_ZIPCODE)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COUNTRY_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COUNTRY)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_APARTMENT_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_APARTMENT)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COMPUTER_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COMPUTER)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PRINTPROFILE_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PRINTPROFILE)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PHONE_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PHONE)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_FAX_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_FAX)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_EMAIL_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_EMAIL)->EnableWindow();
		break;
	}
	return TRUE;
}

BOOL CUserAddressBookHolidayPage::OnSetActive()
{
	GetParent()->GetInfo(&m_cProfileInfo[0]);
	return CLocalePropertyPage::OnSetActive();
}

BOOL CUserAddressBookHolidayPage::OnKillActive()
{
	GetParent()->SetInfo(&m_cProfileInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CUserAddressBookHolidayPage::OnEditchangeHolidayHotelName()
{
	CString  szHotelName;

	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_HOTEL)->GetWindowText(szHotelName);
	m_cProfileInfo[0].SetHolidayHotel(szHotelName);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHolidayPage::OnEditchangeHolidayHotelStreet()
{
	CString  szStreet;

	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_STREET)->GetWindowText(szStreet);
	m_cProfileInfo[0].SetHolidayStreet(szStreet);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHolidayPage::OnEditchangeHolidayHotelCity()
{
	CString  szCity;

	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_CITY)->GetWindowText(szCity);
	m_cProfileInfo[0].SetHolidayCity(szCity);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHolidayPage::OnEditchangeHolidayHotelZipCode()
{
	CString  szZipCode;

	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_ZIPCODE)->GetWindowText(szZipCode);
	m_cProfileInfo[0].SetHolidayZipCode(szZipCode);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHolidayPage::OnEditchangeHolidayHotelCountry()
{
	CString  szCountry;

	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COUNTRY)->GetWindowText(szCountry);
	m_cProfileInfo[0].SetHolidayCountry(szCountry);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHolidayPage::OnEditchangeHolidayHotelApartment()
{
	CString  szApartment;

	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_APARTMENT)->GetWindowText(szApartment);
	m_cProfileInfo[0].SetHolidayApartment(szApartment);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHolidayPage::OnEditchangeHolidayComputer()
{
	CString  szComputer;

	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COMPUTER)->GetWindowText(szComputer);
	m_cProfileInfo[0].SetHolidayComputer(szComputer);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHolidayPage::OnEditchangeHolidayPrintProfile()
{
	CString  szPrintProfile;

	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PRINTPROFILE)->GetWindowText(szPrintProfile);
	m_cProfileInfo[0].SetHolidayPrintProfile(szPrintProfile);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHolidayPage::OnEditchangeHolidayPhone()
{
	CString  szPhone;

	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PHONE)->GetWindowText(szPhone);
	m_cProfileInfo[0].SetHolidayPhone(szPhone);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHolidayPage::OnEditchangeHolidayFAX()
{
	CString  szFAX;

	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_FAX)->GetWindowText(szFAX);
	m_cProfileInfo[0].SetHolidayFAX(szFAX);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHolidayPage::OnEditchangeHolidayEMail()
{
	CString  szEMail;

	GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_EMAIL)->GetWindowText(szEMail);
	m_cProfileInfo[0].SetHolidayEMail(szEMail);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHolidayPage::OnSelchangeHolidayComputer()
{
	m_cProfileInfo[0].SetHolidayComputer(Combobox_GetText(GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COMPUTER), (INT)SendDlgItemMessage(IDC_USERADDRESSBOOK_HOLIDAYPAGE_COMPUTER, CB_GETCURSEL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookHolidayPage::OnSelchangeHolidayPrintProfile()
{
	m_cProfileInfo[0].SetHolidayPrintProfile(Combobox_GetText(GetDlgItem(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PRINTPROFILE), (INT)SendDlgItemMessage(IDC_USERADDRESSBOOK_HOLIDAYPAGE_PRINTPROFILE, CB_GETCURSEL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookPlannerPage property page

IMPLEMENT_DYNCREATE(CUserAddressBookPlannerPage, CLocalePropertyPage)

CUserAddressBookPlannerPage::CUserAddressBookPlannerPage() : CLocalePropertyPage(CUserAddressBookPlannerPage::IDD)
{
	//{{AFX_DATA_INIT(CUserAddressBookPlannerPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CUserAddressBookPlannerPage::SetInfo(CONST CUserProfileInfo *pProfileInfo, BOOL bUpdate)
{
	for (m_cProfileInfo[0].Copy(pProfileInfo); IsWindow(GetSafeHwnd()) && bUpdate; )
	{
		ShowUserInfo();
		break;
	}
}
VOID CUserAddressBookPlannerPage::SetInfo(CONST CUserProfileInfo *pProfileInfo, CONST CUserProfileInfo *pBackupProfileInfo, BOOL bAccess, BOOL bUpdate)
{
	for (m_cProfileInfo[0].Copy(pProfileInfo); pBackupProfileInfo != (CONST CUserProfileInfo *) NULL; )
	{
		m_cProfileInfo[1].Copy(pBackupProfileInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()))
	{
		if (bUpdate) ShowUserInfo();
		AdjustToPrivileges(bAccess);
	}
}

VOID CUserAddressBookPlannerPage::GetInfo(CUserProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cProfileInfo[0]);
}

CUserAddressBookFolder *CUserAddressBookPlannerPage::GetParent() CONST
{
	return((CUserAddressBookFolder *)CLocalePropertyPage::GetParent());
}

VOID CUserAddressBookPlannerPage::ShowUserInfo()
{
	BOOL  bHomeDays;
	UINT  nOfficeDays;
	CTimeKey  tMission[2];
	CTimeKey  tHoliday[2];
	CTimeSpan  tHomeTime[2];
	CTimeSpan  tOfficeTime[2];

	if (GetOfficeHours(nOfficeDays, tOfficeTime[0], tOfficeTime[1]))
	{
		Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_STARTTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + tOfficeTime[0].GetTotalSeconds()));
		Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_STOPTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + tOfficeTime[1].GetTotalSeconds()));
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_MONDAY, (nOfficeDays & USERPROFILE_WORKDAY_MONDAY) ? TRUE : FALSE);
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_TUESDAY, (nOfficeDays & USERPROFILE_WORKDAY_TUESDAY) ? TRUE : FALSE);
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_WEDNESDAY, (nOfficeDays & USERPROFILE_WORKDAY_WEDNESDAY) ? TRUE : FALSE);
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_THURSDAY, (nOfficeDays & USERPROFILE_WORKDAY_THURSDAY) ? TRUE : FALSE);
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_FRIDAY, (nOfficeDays & USERPROFILE_WORKDAY_FRIDAY) ? TRUE : FALSE);
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_SATURDAY, (nOfficeDays & USERPROFILE_WORKDAY_SATURDAY) ? TRUE : FALSE);
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_SUNDAY, (nOfficeDays & USERPROFILE_WORKDAY_SUNDAY) ? TRUE : FALSE);
	}
	else
	{
		Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_STARTTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + USERPROFILE_DEFAULT_OFFICEHOURS_STARTTIME));
		Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_STOPTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + USERPROFILE_DEFAULT_OFFICEHOURS_STOPTIME));
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_MONDAY, FALSE);
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_TUESDAY, FALSE);
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_WEDNESDAY, FALSE);
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_THURSDAY, FALSE);
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_FRIDAY, FALSE);
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_SATURDAY, FALSE);
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_SUNDAY, FALSE);
	}
	if (GetHomeHours(tHomeTime[0], tHomeTime[1], bHomeDays))
	{
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS, TRUE);
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_WEEKDAYS, bHomeDays);
		Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STARTTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + tHomeTime[0].GetTotalSeconds()));
		Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STOPTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + tHomeTime[1].GetTotalSeconds()));
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STARTTIME_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STARTTIME)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STOPTIME_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STOPTIME)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_DAYS)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_WEEKDAYS)->EnableWindow();
	}
	else
	{
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS, FALSE);
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_WEEKDAYS, FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STARTTIME_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STARTTIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STOPTIME_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STOPTIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_DAYS)->EnableWindow(FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_WEEKDAYS)->EnableWindow(FALSE);
	}
	if (GetMissionInfo(tMission[0], tMission[1]))
	{
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION, TRUE);
		Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_LEAVEDAY), tMission[0]);
		Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_RETURNDAY), tMission[1]);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_LEAVEDAY_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_LEAVEDAY)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_RETURNDAY_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_RETURNDAY)->EnableWindow();
	}
	else
	{
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION, FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_LEAVEDAY_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_LEAVEDAY)->EnableWindow(FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_RETURNDAY_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_RETURNDAY)->EnableWindow(FALSE);
	}
	if (GetHolidayInfo(tHoliday[0], tHoliday[1]))
	{
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY, TRUE);
		Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_LEAVEDAY), tHoliday[0]);
		Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_RETURNDAY), tHoliday[1]);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_LEAVEDAY_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_LEAVEDAY)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_RETURNDAY_STATIC)->EnableWindow();
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_RETURNDAY)->EnableWindow();
	}
	else
	{
		CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY, FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_LEAVEDAY_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_LEAVEDAY)->EnableWindow(FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_RETURNDAY_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_RETURNDAY)->EnableWindow(FALSE);
	}
}

BOOL CUserAddressBookPlannerPage::GetOfficeHours(UINT &nDays, CTimeSpan &tStartTime, CTimeSpan &tStopTime) CONST
{
	return m_cProfileInfo[0].GetOfficeHours(nDays, tStartTime, tStopTime);
}

BOOL CUserAddressBookPlannerPage::GetHomeHours(CTimeSpan &tStartTime, CTimeSpan &tStopTime, BOOL &bDays) CONST
{
	return m_cProfileInfo[0].GetHomeHours(tStartTime, tStopTime, bDays);
}

BOOL CUserAddressBookPlannerPage::GetMissionInfo(CTimeKey &tLeaveTime, CTimeKey &tReturnTime) CONST
{
	return((m_cProfileInfo[0].GetMission(tLeaveTime, tReturnTime) && tLeaveTime < tReturnTime) ? TRUE : FALSE);
}

BOOL CUserAddressBookPlannerPage::GetHolidayInfo(CTimeKey &tLeaveTime, CTimeKey &tReturnTime) CONST
{
	return((m_cProfileInfo[0].GetHoliday(tLeaveTime, tReturnTime) && tLeaveTime < tReturnTime) ? TRUE : FALSE);
}

VOID CUserAddressBookPlannerPage::AdjustToPrivileges(BOOL bAccess)
{
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_STARTTIME, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_STOPTIME, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_MONDAY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_TUESDAY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_WEDNESDAY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_THURSDAY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_FRIDAY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_SATURDAY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_SUNDAY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STARTTIME, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STOPTIME, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_WEEKDAYS, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_LEAVEDAY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_RETURNDAY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_LEAVEDAY, bAccess);
	AccessControl(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_RETURNDAY, bAccess);
}

BOOL CUserAddressBookPlannerPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cProfileInfo[0].Compare(&m_cProfileInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CUserAddressBookPlannerPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

void CUserAddressBookPlannerPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CUserAddressBookPlannerPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CUserAddressBookPlannerPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CUserAddressBookPlannerPage)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS, OnHomeHours)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION, OnMission)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY, OnHoliday)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_MONDAY, OnChangeOfficeHoursInfo)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_TUESDAY, OnChangeOfficeHoursInfo)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_WEDNESDAY, OnChangeOfficeHoursInfo)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_THURSDAY, OnChangeOfficeHoursInfo)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_FRIDAY, OnChangeOfficeHoursInfo)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_SATURDAY, OnChangeOfficeHoursInfo)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_SUNDAY, OnChangeOfficeHoursInfo)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_WEEKDAYS, OnChangeHomeHoursInfo)
	ON_CONTROL(TSBXN_CHANGE, IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_STARTTIME, OnChangeOfficeHoursInfo)
	ON_CONTROL(TSBXN_CHANGE, IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_STOPTIME, OnChangeOfficeHoursInfo)
	ON_CONTROL(TSBXN_CHANGE, IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STARTTIME, OnChangeHomeHoursInfo)
	ON_CONTROL(TSBXN_CHANGE, IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STOPTIME, OnChangeHomeHoursInfo)
	ON_CONTROL(TSBXN_CHANGE, IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_LEAVEDAY, OnSpinchangeMissionLeaveDate)
	ON_CONTROL(TSBXN_CHANGE, IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_RETURNDAY, OnSpinchangeMissionReturnDate)
	ON_CONTROL(TSBXN_CHANGE, IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_LEAVEDAY, OnSpinchangeHolidayLeaveDate)
	ON_CONTROL(TSBXN_CHANGE, IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_RETURNDAY, OnSpinchangeHolidayReturnDate)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookPlannerPage message handlers

BOOL CUserAddressBookPlannerPage::OnInitDialog()
{
	CLocalePropertyPage::OnInitDialog();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_STARTTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_STOPTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_DAYS)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_MONDAY)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_TUESDAY)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_WEDNESDAY)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_THURSDAY)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_FRIDAY)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_SATURDAY)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_SUNDAY)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY)->EnableWindow();
	return TRUE;
}

BOOL CUserAddressBookPlannerPage::OnSetActive()
{
	GetParent()->GetInfo(&m_cProfileInfo[0]);
	return CLocalePropertyPage::OnSetActive();
}

BOOL CUserAddressBookPlannerPage::OnKillActive()
{
	GetParent()->SetInfo(&m_cProfileInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CUserAddressBookPlannerPage::OnHomeHours()
{
	CheckDlgButton(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_WEEKDAYS, FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STARTTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + USERPROFILE_DEFAULT_HOMEHOURS_STARTTIME));
	Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STOPTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + USERPROFILE_DEFAULT_HOMEHOURS_STOPTIME));
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STARTTIME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS));
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS));
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STOPTIME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS));
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS));
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_DAYS)->EnableWindow(IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS));
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_WEEKDAYS)->EnableWindow(IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS));
	m_cProfileInfo[0].SetHomeHours((IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS)) ? CTimeSpan(USERPROFILE_DEFAULT_HOMEHOURS_STARTTIME) : CTimeSpan(0), (IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS)) ? CTimeSpan(USERPROFILE_DEFAULT_HOMEHOURS_STOPTIME) : CTimeSpan(0), IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_WEEKDAYS));
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookPlannerPage::OnMission()
{
	CTimeKey  tMissionDates[2];

	Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_LEAVEDAY), (tMissionDates[0] = CTime::GetCurrentTime().GetTime()));
	Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_RETURNDAY), (tMissionDates[1] = tMissionDates[0].GetTime() + SECONDSPERWEEK));
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_LEAVEDAY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION));
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_LEAVEDAY)->EnableWindow(IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION));
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_RETURNDAY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION));
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_RETURNDAY)->EnableWindow(IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION));
	m_cProfileInfo[0].SetMission((IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION)) ? tMissionDates[0] : 0, (IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION)) ? tMissionDates[1] : 0);
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_LEAVEDAY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookPlannerPage::OnHoliday()
{
	CTimeKey  tHolidayDates[2];

	Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_LEAVEDAY), (tHolidayDates[0] = CTime::GetCurrentTime().GetTime()));
	Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_RETURNDAY), (tHolidayDates[1] = tHolidayDates[0].GetTime() + SECONDSPERWEEK));
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_LEAVEDAY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY));
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_LEAVEDAY)->EnableWindow(IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY));
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_RETURNDAY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY));
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_RETURNDAY)->EnableWindow(IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY));
	m_cProfileInfo[0].SetHoliday((IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY)) ? tHolidayDates[0] : 0, (IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY)) ? tHolidayDates[1] : 0);
	GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_LEAVEDAY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookPlannerPage::OnChangeOfficeHoursInfo()
{
	UINT  nOfficeDays;

	nOfficeDays = (IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_MONDAY)) ? USERPROFILE_WORKDAY_MONDAY : 0;
	nOfficeDays |= (IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_TUESDAY)) ? USERPROFILE_WORKDAY_TUESDAY : 0;
	nOfficeDays |= (IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_WEDNESDAY)) ? USERPROFILE_WORKDAY_WEDNESDAY : 0;
	nOfficeDays |= (IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_THURSDAY)) ? USERPROFILE_WORKDAY_THURSDAY : 0;
	nOfficeDays |= (IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_FRIDAY)) ? USERPROFILE_WORKDAY_FRIDAY : 0;
	nOfficeDays |= (IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_SATURDAY)) ? USERPROFILE_WORKDAY_SATURDAY : 0;
	nOfficeDays |= (IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_SUNDAY)) ? USERPROFILE_WORKDAY_SUNDAY : 0;
	m_cProfileInfo[0].SetOfficeHours(nOfficeDays, CTimeSpan(Timespinbox_GetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_STARTTIME)).GetTime() % SECONDSPERDAY), CTimeSpan(Timespinbox_GetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_OFFICEHOURS_STOPTIME)).GetTime() % SECONDSPERDAY));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookPlannerPage::OnChangeHomeHoursInfo()
{
	m_cProfileInfo[0].SetHomeHours(CTimeSpan(Timespinbox_GetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STARTTIME)).GetTime() % SECONDSPERDAY), CTimeSpan(Timespinbox_GetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_STOPTIME)).GetTime() % SECONDSPERDAY), IsDlgButtonChecked(IDC_USERADDRESSBOOK_PLANNERPAGE_HOMEHOURS_WEEKDAYS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookPlannerPage::OnSpinchangeMissionLeaveDate()
{
	CTimeKey  tMissionDates[2];

	for (tMissionDates[0] = Timespinbox_GetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_LEAVEDAY)), tMissionDates[1] = Timespinbox_GetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_RETURNDAY)); tMissionDates[0] != 0 || tMissionDates[1] != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_RETURNDAY), (tMissionDates[1] = (tMissionDates[0] <= tMissionDates[1].GetTime() - SECONDSPERDAY) ? tMissionDates[1] : (tMissionDates[0].GetTime() + SECONDSPERDAY)));
		break;
	}
	m_cProfileInfo[0].SetMission(tMissionDates[0], tMissionDates[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookPlannerPage::OnSpinchangeMissionReturnDate()
{
	CTimeKey  tMissionDates[2];

	for (tMissionDates[0] = Timespinbox_GetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_LEAVEDAY)), tMissionDates[1] = Timespinbox_GetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_RETURNDAY)); tMissionDates[0] != 0 || tMissionDates[1] != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_MISSION_LEAVEDAY), (tMissionDates[0] = (tMissionDates[0] <= tMissionDates[1].GetTime() - SECONDSPERDAY) ? tMissionDates[0] : (tMissionDates[1].GetTime() - SECONDSPERDAY)));
		break;
	}
	m_cProfileInfo[0].SetMission(tMissionDates[0], tMissionDates[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookPlannerPage::OnSpinchangeHolidayLeaveDate()
{
	CTimeKey  tHolidayDates[2];

	for (tHolidayDates[0] = Timespinbox_GetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_LEAVEDAY)), tHolidayDates[1] = Timespinbox_GetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_RETURNDAY)); tHolidayDates[0] != 0 || tHolidayDates[1] != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_RETURNDAY), (tHolidayDates[1] = (tHolidayDates[0] <= tHolidayDates[1].GetTime() - SECONDSPERDAY) ? tHolidayDates[1] : (tHolidayDates[0].GetTime() + SECONDSPERDAY)));
		break;
	}
	m_cProfileInfo[0].SetHoliday(tHolidayDates[0], tHolidayDates[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookPlannerPage::OnSpinchangeHolidayReturnDate()
{
	CTimeKey  tHolidayDates[2];

	for (tHolidayDates[0] = Timespinbox_GetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_LEAVEDAY)), tHolidayDates[1] = Timespinbox_GetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_RETURNDAY)); tHolidayDates[0] != 0 || tHolidayDates[1] != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_USERADDRESSBOOK_PLANNERPAGE_HOLIDAY_LEAVEDAY), (tHolidayDates[0] = (tHolidayDates[0] <= tHolidayDates[1].GetTime() - SECONDSPERDAY) ? tHolidayDates[0] : (tHolidayDates[1].GetTime() - SECONDSPERDAY)));
		break;
	}
	m_cProfileInfo[0].SetHoliday(tHolidayDates[0], tHolidayDates[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookFolderTabCtrl

IMPLEMENT_DYNCREATE(CUserAddressBookFolderTabCtrl, CTabCtrl)

CUserAddressBookFolder *CUserAddressBookFolderTabCtrl::GetParent() CONST
{
	return((CUserAddressBookFolder *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CUserAddressBookFolderTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CUserAddressBookFolderTabCtrl)
	ON_WM_GETDLGCODE()
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookFolderTabCtrl message handlers

UINT CUserAddressBookFolderTabCtrl::OnGetDlgCode()
{
	return CTabCtrl::OnGetDlgCode() | DLGC_WANTTAB;
}

void CUserAddressBookFolderTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CWnd  *pWnd;

	if (nChar == VK_TAB)
	{
		if ((pWnd = GetParent()->GetParent()->GetNextDlgTabItem(GetParent(), (HIBYTE(GetKeyState(VK_SHIFT))) ? TRUE : FALSE)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookFolder

IMPLEMENT_DYNCREATE(CUserAddressBookFolder, CLocalePropertySheetDialog)

CUserAddressBookFolder::CUserAddressBookFolder() : CLocalePropertySheetDialog()
{
	AddPage(&m_pagePersonal);
	AddPage(&m_pageOffice);
	AddPage(&m_pageMission);
	AddPage(&m_pageHome);
	AddPage(&m_pageHoliday);
	AddPage(&m_pagePlanner);
}

BOOL CUserAddressBookFolder::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	INT  nIndex;

	if (CLocalePropertySheetDialog::Create(pParentWnd, WS_CHILD | WS_TABSTOP))
	{
		for (nIndex = GetPageCount() - 1, m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()); nIndex >= 0; nIndex--)
		{
			SetActivePage(nIndex);
			continue;
		}
		MoveWindow(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
		ShowWindow(SW_SHOWNORMAL);
		return TRUE;
	}
	return FALSE;
}

VOID CUserAddressBookFolder::SetInfo(CONST CUserProfileInfo *pProfileInfo, BOOL bUpdate)
{
	CUserProfileInfo  cProfileInfo;

	cProfileInfo.Copy(pProfileInfo);
	m_pagePersonal.SetInfo(&cProfileInfo, bUpdate);
	m_pageOffice.SetInfo(&cProfileInfo, bUpdate);
	m_pageMission.SetInfo(&cProfileInfo, bUpdate);
	m_pageHome.SetInfo(&cProfileInfo, bUpdate);
	m_pageHoliday.SetInfo(&cProfileInfo, bUpdate);
	m_pagePlanner.SetInfo(&cProfileInfo, bUpdate);
}
VOID CUserAddressBookFolder::SetInfo(CONST CUserProfileInfo *pProfileInfo, CONST CUserProfileInfo *pBackupProfileInfo, BOOL bAccess, BOOL bUpdate)
{
	m_pagePersonal.SetInfo(pProfileInfo, pBackupProfileInfo, bAccess, bUpdate);
	m_pageOffice.SetInfo(pProfileInfo, pBackupProfileInfo, bAccess, bUpdate);
	m_pageMission.SetInfo(pProfileInfo, pBackupProfileInfo, bAccess, bUpdate);
	m_pageHome.SetInfo(pProfileInfo, pBackupProfileInfo, bAccess, bUpdate);
	m_pageHoliday.SetInfo(pProfileInfo, pBackupProfileInfo, bAccess, bUpdate);
	m_pagePlanner.SetInfo(pProfileInfo, pBackupProfileInfo, bAccess, bUpdate);
}

VOID CUserAddressBookFolder::GetInfo(CUserProfileInfo *pProfileInfo) CONST
{
	CUserProfileInfo  cProfileInfo;

	if (GetActivePage()->GetSafeHwnd() == m_pagePersonal.GetSafeHwnd())
	{
		m_pagePersonal.GetInfo(&cProfileInfo);
		pProfileInfo->Copy(&cProfileInfo);
		return;
	}
	if (GetActivePage()->GetSafeHwnd() == m_pageOffice.GetSafeHwnd())
	{
		m_pageOffice.GetInfo(&cProfileInfo);
		pProfileInfo->Copy(&cProfileInfo);
		return;
	}
	if (GetActivePage()->GetSafeHwnd() == m_pageMission.GetSafeHwnd())
	{
		m_pageMission.GetInfo(&cProfileInfo);
		pProfileInfo->Copy(&cProfileInfo);
		return;
	}
	if (GetActivePage()->GetSafeHwnd() == m_pageHome.GetSafeHwnd())
	{
		m_pageHome.GetInfo(&cProfileInfo);
		pProfileInfo->Copy(&cProfileInfo);
		return;
	}
	if (GetActivePage()->GetSafeHwnd() == m_pageHoliday.GetSafeHwnd())
	{
		m_pageHoliday.GetInfo(&cProfileInfo);
		pProfileInfo->Copy(&cProfileInfo);
		return;
	}
	if (GetActivePage()->GetSafeHwnd() == m_pagePlanner.GetSafeHwnd())
	{
		m_pagePlanner.GetInfo(&cProfileInfo);
		pProfileInfo->Copy(&cProfileInfo);
		return;
	}
}

CUserAddressBookDialog *CUserAddressBookFolder::GetParent() CONST
{
	return((CUserAddressBookDialog *)CLocalePropertySheetDialog::GetParent());
}

VOID CUserAddressBookFolder::RepositionButtons()
{
	GetDlgItem(IDOK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDCANCEL)->ShowWindow(SW_HIDE);
	GetDlgItem(ID_APPLY_NOW)->ShowWindow(SW_HIDE);
	GetDlgItem(IDHELP)->ShowWindow(SW_HIDE);
}

BOOL CUserAddressBookFolder::Check(BOOL bModified) CONST
{
	return GetParent()->Check(bModified, CLocalePropertySheetDialog::Check(FALSE));
}
BOOL CUserAddressBookFolder::Check(BOOL bModified, BOOL bChecked) CONST
{
	return((bChecked) ? CLocalePropertySheetDialog::Check(bModified) : FALSE);
}

BEGIN_MESSAGE_MAP(CUserAddressBookFolder, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CUserAddressBookFolder)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookFolder message handlers

void CUserAddressBookFolder::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(m_wndTabCtrl.GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CLocalePropertySheetDialog::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookDialog dialog

IMPLEMENT_DYNCREATE(CUserAddressBookDialog, CLocaleDialog)

CUserAddressBookDialog::CUserAddressBookDialog(CWnd *pParentWnd) : CLocaleDialog(CUserAddressBookDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CUserAddressBookDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CUserAddressBookDialog::Initialize()
{
	for (m_nLocked = 0; (m_pwndFolderCtrl = new CUserAddressBookFolder); ) return TRUE;
	return FALSE;
}

BOOL CUserAddressBookDialog::EnumComputers()
{
	INT  nComputer;
	INT  nComputers;
	CString  szComputer;
	CStringArray  szComputers;
	CComputerToken  cComputerToken;

	for (szComputers.Add((szComputer = cComputerToken.GetComputerName())); CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTEBROWSE) || CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTECHANGE); )
	{
		GetNetworkBrowseService()->EnumNetworkComputers(szComputers);
		break;
	}
	for (nComputer = 0, nComputers = (INT)szComputers.GetSize(), SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_RESETCONTENT); nComputer < nComputers; nComputer++)
	{
		if (CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_BROWSE) || CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_CHANGE))
		{
			SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
			continue;
		}
	}
	SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer), 0));
	GetDlgItem(IDC_USERADDRESSBOOK_COMPUTER_STATIC)->EnableWindow((SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_USERADDRESSBOOK_COMPUTER)->EnableWindow((SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
}

BOOL CUserAddressBookDialog::EnumUsers()
{
	INT  nComputer;
	INT  nComputers;
	BOOL  bInitialize;
	CString  szComputer;
	CUserProfiles  *pProfiles[3];
	CUserAddressBook  cUserAddressBook;

	for (GetDlgItem(IDC_USERADDRESSBOOK_COMPUTER)->GetWindowText(szComputer), bInitialize = FALSE; m_szComputer.CompareNoCase(szComputer) && !szComputer.IsEmpty(); )
	{
		for (nComputer = 0, nComputers = (!m_szComputer.IsEmpty()) ? (INT)m_szComputers.GetSize() : -1; nComputer < nComputers; nComputer++)
		{
			if (!m_szComputers.GetAt(nComputer).CompareNoCase(m_szComputer)) break;
			continue;
		}
		for (; nComputer == nComputers; )
		{
			if ((pProfiles[0] = new CUserProfiles))
			{
				if ((pProfiles[1] = new CUserProfiles))
				{
					if ((pProfiles[2] = new CUserProfiles))
					{
						m_pAddressBooks[0].Add(pProfiles[0]);
						m_pAddressBooks[1].Add(pProfiles[1]);
						m_pAddressBooks[2].Add(pProfiles[2]);
						m_szComputers.Add(m_szComputer);
						break;
					}
					delete pProfiles[1];
				}
				delete pProfiles[0];
			}
			break;
		}
		if (nComputer < m_pAddressBooks[0].GetSize() && nComputer < m_pAddressBooks[1].GetSize() && nComputer < m_pAddressBooks[2].GetSize() && nComputers >= 0)
		{
			if ((pProfiles[0] = (CUserProfiles *)m_pAddressBooks[0].GetAt(nComputer)))
			{
				if ((pProfiles[1] = (CUserProfiles *)m_pAddressBooks[1].GetAt(nComputer)))
				{
					if ((pProfiles[2] = (CUserProfiles *)m_pAddressBooks[2].GetAt(nComputer)))
					{
						pProfiles[0]->Copy(&m_pAddressBook[0]);
						pProfiles[1]->Copy(&m_pAddressBook[1]);
						pProfiles[2]->Copy(&m_pAddressBook[2]);
					}
				}
			}
		}
		for (nComputer = 0, nComputers = (INT)m_szComputers.GetSize(); nComputer < nComputers; nComputer++)
		{
			if (!m_szComputers.GetAt(nComputer).CompareNoCase(szComputer)) break;
			continue;
		}
		if (nComputer < nComputers)
		{
			if ((pProfiles[0] = (CUserProfiles *)m_pAddressBooks[0].GetAt(nComputer)))
			{
				if ((pProfiles[1] = (CUserProfiles *)m_pAddressBooks[1].GetAt(nComputer)))
				{
					if ((pProfiles[2] = (CUserProfiles *)m_pAddressBooks[2].GetAt(nComputer)))
					{
						m_pAddressBook[0].Copy(pProfiles[0]);
						m_pAddressBook[1].Copy(pProfiles[1]);
						m_pAddressBook[2].Copy(pProfiles[2]);
						break;
					}
				}
			}
		}
		if (cUserAddressBook.SetComputerName(szComputer) && cUserAddressBook.GetUserAddressBook(m_pAddressBook[0]))
		{
			m_pAddressBook[1].Copy(&m_pAddressBook[0]);
			m_pAddressBook[2].Copy(&m_pAddressBook[0]);
			bInitialize = TRUE;
		}
		break;
	}
	for (ShowUsers(), m_szComputer = szComputer; Listview_SetCurText(GetDlgItem(IDC_USERADDRESSBOOK_USERS), 0) >= 0; )
	{
		SetUserInfo(bInitialize);
		break;
	}
	return((m_pAddressBook[0].GetSize() == SendDlgItemMessage(IDC_USERADDRESSBOOK_USERS, LVM_GETITEMCOUNT)) ? TRUE : FALSE);
}

VOID CUserAddressBookDialog::ShowUsers()
{
	INT  nUser;
	INT  nUsers;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CUserProfileInfo  *pProfileInfo;

	for (nUser = 0, nUsers = (INT)m_pAddressBook[0].GetSize(); nUser < nUsers; nUser++)
	{
		if ((pProfileInfo = m_pAddressBook[0].GetAt(nUser)) != (CUserProfileInfo *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_USERADDRESSBOOKDIALOG_NAME); )
				{
					szItem = pProfileInfo->GetFullName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_USERADDRESSBOOKDIALOG_PHONENUMBER); )
				{
					szItem = pProfileInfo->GetOfficePhone();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_USERADDRESSBOOKDIALOG_FAXNUMBER); )
				{
					szItem = pProfileInfo->GetOfficeFAX();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_USERADDRESSBOOKDIALOG_EMAILADDRESS); )
				{
					szItem = pProfileInfo->GetOfficeEMail();
					break;
				}
				if (!nColumn  &&  nUser >= SendDlgItemMessage(IDC_USERADDRESSBOOK_USERS, LVM_GETITEMCOUNT))
				{
					Listview_InsertText(GetDlgItem(IDC_USERADDRESSBOOK_USERS), nUser, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_USERADDRESSBOOK_USERS), nUser, nColumn, szItem);
			}
		}
	}
	while (nUsers < SendDlgItemMessage(IDC_USERADDRESSBOOK_USERS, LVM_GETITEMCOUNT))
	{
		if (!Listview_DeleteText(GetDlgItem(IDC_USERADDRESSBOOK_USERS), nUsers)) break;
		continue;
	}
	GetDlgItem(IDC_USERADDRESSBOOK_USERS)->EnableWindow((SendDlgItemMessage(IDC_USERADDRESSBOOK_USERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

VOID CUserAddressBookDialog::SetUserInfo(BOOL bInitialize)
{
	CUserProfileInfo  *pProfileInfo[2];

	if ((pProfileInfo[0] = new CUserProfileInfo))
	{
		for (Lock(), UpdateUserInfo((pProfileInfo[1] = (FindUserInfo()) ? FindUserInfo() : pProfileInfo[0]), bInitialize); pProfileInfo[0] != (CUserProfileInfo *)NULL; )
		{
			delete pProfileInfo[0];
			break;
		}
		Unlock();
	}
	Update(FALSE, m_pwndFolderCtrl->Check(FALSE));
}

VOID CUserAddressBookDialog::UpdateUserInfo(CONST CUserProfileInfo *pProfileInfo, BOOL bInitialize)
{
	INT  nUser;
	INT  nUsers;
	CUserProfileInfo  *pUserProfileInfo;

	for (; !pProfileInfo->GetFullName().IsEmpty() && bInitialize; )
	{
		if ((pUserProfileInfo = m_pAddressBook[2].GetAt(m_pAddressBook[2].Find(pProfileInfo->GetFullName()))))
		{
			pUserProfileInfo->Copy(pProfileInfo);
			break;
		}
		if ((pUserProfileInfo = new CUserProfileInfo))
		{
			for (pUserProfileInfo->Copy(pProfileInfo); m_pAddressBook[2].Add(pUserProfileInfo) < 0; )
			{
				delete pUserProfileInfo;
				break;
			}
		}
		break;
	}
	for (nUser = 0, nUsers = (INT)m_pAddressBook[2].GetSize(), m_pwndFolderCtrl->SetInfo(pProfileInfo, (!pProfileInfo->GetFullName().IsEmpty()) ? m_pAddressBook[2].GetAt(m_pAddressBook[2].Find(pProfileInfo->GetFullName())) : ((bInitialize) ? pProfileInfo : (CONST CUserProfileInfo *) NULL), (!m_szComputer.CompareNoCase(GetAccountComputerName()) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_CHANGE)) || (m_szComputer.CompareNoCase(GetAccountComputerName()) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTECHANGE))); nUser < nUsers; nUser++)
	{
		if ((pUserProfileInfo = m_pAddressBook[2].GetAt(nUser)) && m_pAddressBook[0].Find(pUserProfileInfo->GetFullName()) < 0)
		{
			m_pAddressBook[2].RemoveAt(nUser);
			delete pUserProfileInfo;
			nUsers--;
			nUser--;
		}
	}
}

BOOL CUserAddressBookDialog::GetUserInfo(CUserProfileInfo *pProfileInfo) CONST
{
	m_pwndFolderCtrl->GetInfo(pProfileInfo);
	return TRUE;
}

CUserProfileInfo *CUserAddressBookDialog::FindUserInfo() CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (!m_szColumns.GetAt(nColumn).Compare(STRING(IDS_USERADDRESSBOOKDIALOG_NAME))) break;
		continue;
	}
	return((nColumn < nColumns) ? m_pAddressBook[0].GetAt(m_pAddressBook[0].Find(Listview_GetText(GetDlgItem(IDC_USERADDRESSBOOK_USERS), Listview_GetCurText(GetDlgItem(IDC_USERADDRESSBOOK_USERS)), nColumn))) : (CUserProfileInfo *)NULL);
}

CRect CUserAddressBookDialog::CalcFolderSize() CONST
{
	CRect  rFolder;

	GetDlgItem(IDC_USERADDRESSBOOK_FOLDER)->GetWindowRect(rFolder);
	ScreenToClient(rFolder);
	return rFolder;
}

VOID CUserAddressBookDialog::AdjustToPrivileges()
{
	return;
}

BOOL CUserAddressBookDialog::IsModified() CONST
{
	INT  nComputer;
	INT  nComputers;
	CUserProfiles  *pProfiles[3];

	for (nComputer = 0, nComputers = (m_pAddressBook[0].Compare(&m_pAddressBook[1])) ? (INT)m_szComputers.GetSize() : -1; nComputer < nComputers; nComputer++)
	{
		if ((pProfiles[2] = ((pProfiles[1] = ((pProfiles[0] = (m_szComputers.GetAt(nComputer).CompareNoCase(m_szComputer)) ? (CUserProfiles *)m_pAddressBooks[0].GetAt(nComputer) : (CUserProfiles *)NULL)) ? (CUserProfiles *)m_pAddressBooks[1].GetAt(nComputer) : (CUserProfiles *)NULL)) ? (CUserProfiles *)m_pAddressBooks[2].GetAt(nComputer) : (CUserProfiles *)NULL))
		{
			if (!pProfiles[0]->Compare(pProfiles[1]) && (!pProfiles[0]->GetSize() || pProfiles[0]->Compare(pProfiles[2]))) break;
			continue;
		}
	}
	return((nComputer != nComputers) ? ((!m_pAddressBook[0].GetSize() || m_pAddressBook[0].Compare(&m_pAddressBook[2])) && !m_pwndFolderCtrl->IsModified()) : FALSE);
}

BOOL CUserAddressBookDialog::Check(BOOL bModified) CONST
{
	return((Check(bModified, m_pwndFolderCtrl->Check(FALSE, TRUE))) ? (!bModified || IsModified()) : FALSE);
}
BOOL CUserAddressBookDialog::Check(BOOL bModified, BOOL bChecked) CONST
{
	Update(bModified, bChecked);
	return((bChecked) ? (!bModified || IsModified()) : FALSE);
}

VOID CUserAddressBookDialog::Update(BOOL bModified, BOOL bChecked) CONST
{
	INT  nIndex;
	CString  szComputer;
	CUserProfileInfo  *pProfileInfo[2];

	if (!IsLocked())
	{
		if ((pProfileInfo[0] = new CUserProfileInfo))
		{
			for (GetUserInfo(pProfileInfo[0]); bModified; )
			{
				if ((pProfileInfo[1] = FindUserInfo()) && pProfileInfo[0]->GetFullName() == pProfileInfo[1]->GetFullName()) pProfileInfo[1]->Copy(pProfileInfo[0]);
				m_pwndFolderCtrl->SetInfo(pProfileInfo[0], FALSE);
				break;
			}
			GetDlgItem(IDC_USERADDRESSBOOK_COMPUTER)->GetWindowText(szComputer);
			GetDlgItem(IDC_USERADDRESSBOOK_ADDUSER)->EnableWindow(((nIndex = m_pAddressBook[0].Find(pProfileInfo[0]->GetFullName())) < 0 && !pProfileInfo[0]->GetName().IsEmpty() && !pProfileInfo[0]->GetFirstName().IsEmpty() && !szComputer.IsEmpty() && m_szComputer == szComputer  &&  bChecked) ? ((!m_szComputer.CompareNoCase(GetAccountComputerName()) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_CHANGE)) || (m_szComputer.CompareNoCase(GetAccountComputerName()) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTECHANGE))) : FALSE);
			GetDlgItem(IDC_USERADDRESSBOOK_MODIFYUSER)->EnableWindow((nIndex >= 0 && ((m_pAddressBook[2].Find(pProfileInfo[0]->GetFullName()) >= 0 && !pProfileInfo[0]->Compare(m_pAddressBook[2].GetAt(m_pAddressBook[2].Find(pProfileInfo[0]->GetFullName())))) || m_pwndFolderCtrl->IsModified()) && !szComputer.IsEmpty() && m_szComputer == szComputer  &&  bChecked) ? ((!m_szComputer.CompareNoCase(GetAccountComputerName()) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_CHANGE)) || (m_szComputer.CompareNoCase(GetAccountComputerName()) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTECHANGE))) : FALSE);
			GetDlgItem(IDC_USERADDRESSBOOK_REMOVEUSER)->EnableWindow((nIndex >= 0 && !szComputer.IsEmpty() && m_szComputer == szComputer) ? ((!m_szComputer.CompareNoCase(GetAccountComputerName()) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_CHANGE)) || (m_szComputer.CompareNoCase(GetAccountComputerName()) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTECHANGE))) : FALSE);
			GetDlgItem(IDC_USERADDRESSBOOK_CLEARUSER)->EnableWindow((!szComputer.IsEmpty() && m_szComputer == szComputer) ? ((!m_szComputer.CompareNoCase(GetAccountComputerName()) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_CHANGE)) || (m_szComputer.CompareNoCase(GetAccountComputerName()) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTECHANGE))) : FALSE);
			delete pProfileInfo[0];
		}
	}
}

VOID CUserAddressBookDialog::Lock()
{
	m_nLocked++;
}

BOOL CUserAddressBookDialog::IsLocked() CONST
{
	return(m_nLocked > 0);
}

VOID CUserAddressBookDialog::Unlock()
{
	m_nLocked--;
}

void CUserAddressBookDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CUserAddressBookDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CUserAddressBookDialog::PostNcDestroy()
{
	INT  nComputer;
	INT  nComputers;
	CUserProfiles  *pProfiles[3];

	for (nComputer = 0, nComputers = (INT)max(m_pAddressBooks[0].GetSize(), max(m_pAddressBooks[1].GetSize(), m_pAddressBooks[2].GetSize())), m_szComputer.Empty(); nComputer < nComputers; nComputer++)
	{
		if ((pProfiles[0] = (nComputer < m_pAddressBooks[0].GetSize()) ? (CUserProfiles *)m_pAddressBooks[0].GetAt(nComputer) : (CUserProfiles *)NULL)) delete pProfiles[0];
		if ((pProfiles[1] = (nComputer < m_pAddressBooks[1].GetSize()) ? (CUserProfiles *)m_pAddressBooks[1].GetAt(nComputer) : (CUserProfiles *)NULL)) delete pProfiles[1];
		if ((pProfiles[2] = (nComputer < m_pAddressBooks[2].GetSize()) ? (CUserProfiles *)m_pAddressBooks[2].GetAt(nComputer) : (CUserProfiles *)NULL)) delete pProfiles[2];
	}
	m_szColumns.RemoveAll();
	m_szComputers.RemoveAll();
	m_pAddressBooks[0].RemoveAll();
	m_pAddressBooks[1].RemoveAll();
	m_pAddressBooks[2].RemoveAll();
	m_pAddressBook[0].RemoveAll();
	m_pAddressBook[1].RemoveAll();
	m_pAddressBook[2].RemoveAll();
	delete m_pwndFolderCtrl;
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CUserAddressBookDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CUserAddressBookDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_CONNECT, OnConnectComputer)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_ADDUSER, OnAddUser)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_MODIFYUSER, OnModifyUser)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_REMOVEUSER, OnRemoveUser)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_CLEARUSER, OnClearUser)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_IMPORTUSERS, OnImportUsers)
	ON_BN_CLICKED(IDC_USERADDRESSBOOK_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_USERADDRESSBOOK_COMPUTER, OnEditchangeComputer)
	ON_CBN_SELCHANGE(IDC_USERADDRESSBOOK_COMPUTER, OnSelchangeComputer)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookDialog message handlers

BOOL CUserAddressBookDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CString  szComputer;
	CComputerToken  cComputerToken;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_USERADDRESSBOOKDIALOG_NAME));
	m_szColumns.Add(STRING(IDS_USERADDRESSBOOKDIALOG_PHONENUMBER));
	m_szColumns.Add(STRING(IDS_USERADDRESSBOOKDIALOG_FAXNUMBER));
	m_szColumns.Add(STRING(IDS_USERADDRESSBOOKDIALOG_EMAILADDRESS));
	SendDlgItemMessage(IDC_USERADDRESSBOOK_USERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), rColumns = CalcFolderSize(); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_USERADDRESSBOOK_USERS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_USERADDRESSBOOKDIALOG_NAME) || m_szColumns.GetAt(nColumn) == STRING(IDS_USERADDRESSBOOKDIALOG_EMAILADDRESS)) ? ((2 * rColumns.Width()) / 7) : (rColumns.Width() / 5));
		continue;
	}
	if (m_pwndFolderCtrl->Create(this, rColumns) && SetChildSheet(m_pwndFolderCtrl, GetDlgItem(IDC_USERADDRESSBOOK_FOLDER - 1)))
	{
		GetDlgItem(IDC_USERADDRESSBOOK_DETAILS)->EnableWindow((EnumComputers() && EnumUsers() && SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_CONTENTS)->EnableWindow((SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_USERADDRESSBOOK_USERS, LVM_GETITEMCOUNT) >= 0) ? TRUE : FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_USERS)->EnableWindow((SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_USERADDRESSBOOK_USERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_IMPORTUSERS)->EnableWindow((SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_GETCURSEL) >= 0 && ((!cComputerToken.GetComputerName().CompareNoCase((szComputer = Combobox_GetText(GetDlgItem(IDC_USERADDRESSBOOK_COMPUTER), (INT)SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_GETCURSEL)))) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_CHANGE)) || (cComputerToken.GetComputerName().CompareNoCase(szComputer) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTECHANGE)))) ? TRUE : FALSE);
		GetDlgItem(IDC_USERADDRESSBOOK_CONNECT)->EnableWindow((SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_GETCURSEL) >= 0 && cComputerToken.SetComputerName(szComputer) && !szComputer.IsEmpty() && !cComputerToken.IsHost() && SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) < 0) ? (CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTEBROWSE)) : FALSE);
		m_pwndFolderCtrl->SetFocus();
		AdjustToPrivileges();
		return FALSE;
	}
	return TRUE;
}

BOOL CUserAddressBookDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_USERADDRESSBOOK_USERS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) SetUserInfo();
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

void CUserAddressBookDialog::OnSelchangeComputer()
{
	CString  szComputer;
	CComputerToken  cComputerToken;

	for (; SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_GETCURSEL)) >= 0; )
	{
		EnumUsers();
		break;
	}
	GetDlgItem(IDC_USERADDRESSBOOK_IMPORTUSERS)->EnableWindow(((!cComputerToken.GetComputerName().CompareNoCase((szComputer = Combobox_GetText(GetDlgItem(IDC_USERADDRESSBOOK_COMPUTER), (INT)SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_GETCURSEL)))) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_CHANGE)) || (cComputerToken.GetComputerName().CompareNoCase(szComputer) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTECHANGE))) ? TRUE : FALSE);
	GetDlgItem(IDC_USERADDRESSBOOK_CONNECT)->EnableWindow((cComputerToken.SetComputerName(szComputer) && !szComputer.IsEmpty() && !cComputerToken.IsHost() && SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) < 0) ? (CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTEBROWSE)) : FALSE);
}

void CUserAddressBookDialog::OnEditchangeComputer()
{
	CString  szComputer;
	CComputerToken  cComputerToken;

	for (GetDlgItem(IDC_USERADDRESSBOOK_COMPUTER)->GetWindowText(szComputer); SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) >= 0; )
	{
		EnumUsers();
		break;
	}
	GetDlgItem(IDC_USERADDRESSBOOK_IMPORTUSERS)->EnableWindow(((!cComputerToken.GetComputerName().CompareNoCase(szComputer) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_CHANGE)) || (cComputerToken.GetComputerName().CompareNoCase(szComputer) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTECHANGE))) ? TRUE : FALSE);
	GetDlgItem(IDC_USERADDRESSBOOK_CONNECT)->EnableWindow((cComputerToken.SetComputerName(szComputer) && !szComputer.IsEmpty() && !cComputerToken.IsHost() && SendDlgItemMessage(IDC_USERADDRESSBOOK_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) < 0) ? (CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTECHANGE) || CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTEBROWSE)) : FALSE);
}

void CUserAddressBookDialog::OnConnectComputer()
{
	CString  szComputer;
	CComputerToken  cComputerToken;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_USERADDRESSBOOK_COMPUTER)->GetWindowText(szComputer); !szComputer.IsEmpty(); )
	{
		EnumUsers();
		break;
	}
	GetDlgItem(IDC_USERADDRESSBOOK_IMPORTUSERS)->EnableWindow(((!cComputerToken.GetComputerName().CompareNoCase(szComputer) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_CHANGE)) || (cComputerToken.GetComputerName().CompareNoCase(szComputer) && CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTECHANGE))) ? TRUE : FALSE);
}

void CUserAddressBookDialog::OnAddUser()
{
	INT  nIndex;
	CUserProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (; (pProfileInfo = new CUserProfileInfo); )
	{
		if ((nIndex = (GetUserInfo(pProfileInfo)) ? m_pAddressBook[0].Add(pProfileInfo) : -1) >= 0)
		{
			for (ShowUsers(); Listview_SetCurText(GetDlgItem(IDC_USERADDRESSBOOK_USERS), nIndex); )
			{
				SetUserInfo(TRUE);
				break;
			}
			break;
		}
		delete pProfileInfo;
		break;
	}
	GetDlgItem(IDC_USERADDRESSBOOK_USERS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookDialog::OnModifyUser()
{
	CUserProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	if ((pProfileInfo = FindUserInfo()) && GetUserInfo(pProfileInfo))
	{
		SetUserInfo(TRUE);
		ShowUsers();
	}
	GetDlgItem(IDC_USERADDRESSBOOK_USERS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookDialog::OnRemoveUser()
{
	INT  nIndex;
	CUserProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	if ((pProfileInfo = FindUserInfo()))
	{
		if ((nIndex = m_pAddressBook[0].Find(pProfileInfo->GetFullName())) >= 0)
		{
			m_pAddressBook[0].RemoveAt(nIndex);
			delete pProfileInfo;
		}
	}
	for (ShowUsers(); TRUE; )
	{
		if (SendDlgItemMessage(IDC_USERADDRESSBOOK_USERS, LVM_GETITEMCOUNT) > 0)
		{
			Listview_SetCurText(GetDlgItem(IDC_USERADDRESSBOOK_USERS), 0);
			GetDlgItem(IDC_USERADDRESSBOOK_USERS)->SetFocus();
			SetUserInfo();
			break;
		}
		m_pwndFolderCtrl->SetFocus();
		SetUserInfo(TRUE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookDialog::OnClearUser()
{
	CHourglassCursor  cCursor;

	for (; Listview_SetCurText(GetDlgItem(IDC_USERADDRESSBOOK_USERS), -1) >= 0; )
	{
		SetUserInfo(TRUE);
		break;
	}
	m_pwndFolderCtrl->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookDialog::OnImportUsers()
{
	INT  nProfile;
	INT  nProfiles;
	CUserProfiles  pProfiles;
	CUserProfileInfo  *pProfileInfo[3];
	CUserAddressBookImportDialog  cUserImportDialog;

	for (nProfile = 0, nProfiles = (cUserImportDialog.DoModal(pProfiles) == IDOK) ? (INT)pProfiles.GetSize() : -1; nProfile < nProfiles; nProfile++)
	{
		if ((pProfileInfo[1] = ((pProfileInfo[0] = pProfiles.GetAt(nProfile))) ? m_pAddressBook[0].GetAt(m_pAddressBook[0].Find(pProfileInfo[0]->GetFullName())) : (CUserProfileInfo *)NULL))
		{
			for (pProfileInfo[1]->Copy(pProfileInfo[0]); (pProfileInfo[2] = m_pAddressBook[2].GetAt(m_pAddressBook[2].Find(pProfileInfo[0]->GetFullName()))); )
			{
				pProfileInfo[2]->Copy(pProfileInfo[0]);
				break;
			}
			if ((pProfileInfo[2] = (m_pAddressBook[2].Find(pProfileInfo[0]->GetFullName()) < 0) ? new CUserProfileInfo : (CUserProfileInfo *)NULL))
			{
				for (pProfileInfo[2]->Copy(pProfileInfo[0]); m_pAddressBook[2].Add(pProfileInfo[2]) < 0; )
				{
					delete pProfileInfo[2];
					break;
				}
			}
			continue;
		}
		if ((pProfileInfo[1] = new CUserProfileInfo))
		{
			if ((pProfileInfo[2] = new CUserProfileInfo))
			{
				for (pProfileInfo[1]->Copy(pProfileInfo[0]); m_pAddressBook[0].Add(pProfileInfo[1]) < 0; )
				{
					delete pProfileInfo[1];
					break;
				}
				for (pProfileInfo[2]->Copy(pProfileInfo[0]); m_pAddressBook[0].Find(pProfileInfo[0]->GetFullName()) < 0 || m_pAddressBook[2].Add(pProfileInfo[2]) < 0; )
				{
					delete pProfileInfo[2];
					break;
				}
				continue;
			}
			delete pProfileInfo[1];
		}
	}
	for (ShowUsers(); Listview_SetCurText(GetDlgItem(IDC_USERADDRESSBOOK_USERS), 0); )
	{
		SetUserInfo();
		break;
	}
	m_pwndFolderCtrl->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserAddressBookDialog::OnOK()
{
	INT  nComputer;
	INT  nComputers;
	BOOL  bComputers;
	CUserProfiles  *pProfiles[2];
	CUserAddressBook  cUserAddressBook;
	CHourglassCursor  cCursor;

	for (nComputer = 0, nComputers = (INT)m_szComputers.GetSize(), bComputers = TRUE; nComputer < nComputers; nComputer++)
	{
		if ((pProfiles[1] = ((pProfiles[0] = (cUserAddressBook.SetComputerName(m_szComputers.GetAt(nComputer)) && m_szComputer.CompareNoCase(m_szComputers.GetAt(nComputer))) ? (CUserProfiles *)m_pAddressBooks[0].GetAt(nComputer) : (CUserProfiles *)NULL)) ? (CUserProfiles *)m_pAddressBooks[1].GetAt(nComputer) : (CUserProfiles *)NULL) && !pProfiles[0]->Compare(pProfiles[1]))
		{
			bComputers &= cUserAddressBook.SetUserAddressBook(*(pProfiles[0]));
			continue;
		}
	}
	for (cUserAddressBook.SetComputerName(m_szComputer), bComputers &= (m_pAddressBook[0].Compare(&m_pAddressBook[1]) || cUserAddressBook.SetUserAddressBook(m_pAddressBook[0])); !bComputers; )
	{
		ReportEvent(SYSTEM_WARNING_USERPROFILES_UPDATE_FAILURE);
		break;
	}
	EndDialog(IDOK);
}

BOOL CUserAddressBookDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_USERADDRESSBOOKDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CUserAddressBookDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_USERADDRESSBOOKDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookImportDialog dialog

IMPLEMENT_DYNCREATE(CUserAddressBookImportDialog, CLocaleDialog)

CUserAddressBookImportDialog::CUserAddressBookImportDialog(CWnd *pParentWnd) : CLocaleDialog(CUserAddressBookImportDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CUserAddressBookImportDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CUserAddressBookImportDialog::DoModal(CUserProfiles &pUsers)
{
	INT  nResult;

	if ((nResult = (INT)CLocaleDialog::DoModal()) == IDOK)
	{
		pUsers.Copy(&m_pUsers);
		return IDOK;
	}
	return nResult;
}

VOID CUserAddressBookImportDialog::EnumComputers()
{
	INT  nComputer;
	INT  nComputers;
	CStringArray  szComputers;

	for (nComputer = 0, nComputers = (CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTEBROWSE) || CheckAccountPrivilege(PRIVILEGE_USERADDRESSBOOK_REMOTECHANGE)) ? GetNetworkBrowseService()->EnumNetworkComputers(szComputers) : 0; nComputer < nComputers; nComputer++)
	{
		SendDlgItemMessage(IDC_USERADDRESSBOOKIMPORT_COMPUTER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
		continue;
	}
}

VOID CUserAddressBookImportDialog::EnumUsers()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CString  szComputer;
	CUserProfileInfo  *pUserInfo;
	CUserAddressBook  cUserAddressBook;

	SendDlgItemMessage(IDC_USERADDRESSBOOKIMPORT_CONTENTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_USERADDRESSBOOKIMPORT_COMPUTER)->GetWindowText(szComputer);
	for (nItem = 0, nItems = (cUserAddressBook.SetComputerName(szComputer) && cUserAddressBook.GetUserAddressBook(m_pUsers)) ? (INT)m_pUsers.GetSize() : 0; nItem < nItems; nItem++)
	{
		for (nColumn = 0, nColumns = ((pUserInfo = m_pUsers.GetAt(nItem))) ? (INT)m_szColumns.GetSize() : -1; nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_USERADDRESSBOOKIMPORTDIALOG_NAME); )
			{
				szItem = pUserInfo->GetFullName();
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_USERADDRESSBOOKIMPORTDIALOG_PHONENUMBER); )
			{
				szItem = pUserInfo->GetOfficePhone();
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_USERADDRESSBOOKIMPORTDIALOG_FAXNUMBER); )
			{
				szItem = pUserInfo->GetOfficeFAX();
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_USERADDRESSBOOKIMPORTDIALOG_EMAILADDRESS); )
			{
				szItem = pUserInfo->GetOfficeEMail();
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_USERADDRESSBOOKIMPORT_CONTENTS), nItem, szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_USERADDRESSBOOKIMPORT_CONTENTS), nItem, nColumn, szItem);
		}
	}
	GetDlgItem(IDC_USERADDRESSBOOKIMPORT_CONTENTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_USERADDRESSBOOKIMPORT_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_USERADDRESSBOOKIMPORT_CONTENTS)->EnableWindow((SendDlgItemMessage(IDC_USERADDRESSBOOKIMPORT_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CUserAddressBookImportDialog::Check(BOOL bModified) CONST
{
	CUIntArray  nItemIDs;

	return((Listview_GetSelText(GetDlgItem(IDC_USERADDRESSBOOKIMPORT_CONTENTS), nItemIDs) > 0) ? TRUE : FALSE);
}

void CUserAddressBookImportDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CUserAddressBookImportDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CUserAddressBookImportDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CUserAddressBookImportDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CUserAddressBookImportDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_USERADDRESSBOOKIMPORT_CONNECT, OnConnectComputer)
	ON_BN_CLICKED(IDC_USERADDRESSBOOKIMPORT_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_USERADDRESSBOOKIMPORT_COMPUTER, OnEditchangeComputer)
	ON_CBN_SELCHANGE(IDC_USERADDRESSBOOKIMPORT_COMPUTER, OnSelchangeComputer)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CUserAddressBookImportDialog message handlers

BOOL CUserAddressBookImportDialog::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_USERADDRESSBOOKIMPORTDIALOG_NAME));
	m_szColumns.Add(STRING(IDS_USERADDRESSBOOKIMPORTDIALOG_PHONENUMBER));
	m_szColumns.Add(STRING(IDS_USERADDRESSBOOKIMPORTDIALOG_FAXNUMBER));
	m_szColumns.Add(STRING(IDS_USERADDRESSBOOKIMPORTDIALOG_EMAILADDRESS));
	GetDlgItem(IDC_USERADDRESSBOOKIMPORT_CONTENTS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_USERADDRESSBOOKIMPORT_CONTENTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), rColumns.InflateRect(0, 0, rColumns.Width() / 3, 0), nWidth = (2 * rColumns.Width()) / 7; nColumn < nColumns; nWidth = (++nColumn < nColumns - 1) ? (rColumns.Width() / 5) : ((2 * rColumns.Width()) / 7))
	{
		Listview_InsertColumn(GetDlgItem(IDC_USERADDRESSBOOKIMPORT_CONTENTS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	EnumComputers();
	GetDlgItem(IDC_USERADDRESSBOOKIMPORT_DETAILS)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOKIMPORT_CONNECT)->EnableWindow(FALSE);
	GetDlgItem(IDC_USERADDRESSBOOKIMPORT_COMPUTER_STATIC)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOKIMPORT_COMPUTER)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSBOOKIMPORT_COMPUTER)->SetFocus();
	return FALSE;
}

BOOL CUserAddressBookImportDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_USERADDRESSBOOKIMPORT_CONTENTS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) GetDlgItem(IDOK)->EnableWindow(Check());
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

void CUserAddressBookImportDialog::OnConnectComputer()
{
	CHourglassCursor  cCursor;

	EnumUsers();
}

void CUserAddressBookImportDialog::OnSelchangeComputer()
{
	for (; SendDlgItemMessage(IDC_USERADDRESSBOOKIMPORT_COMPUTER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_USERADDRESSBOOKIMPORT_COMPUTER, CB_GETCURSEL)) >= 0; )
	{
		EnumUsers();
		break;
	}
	GetDlgItem(IDC_USERADDRESSBOOKIMPORT_CONNECT)->EnableWindow(FALSE);
}

void CUserAddressBookImportDialog::OnEditchangeComputer()
{
	CString  szComputer;

	for (GetDlgItem(IDC_USERADDRESSBOOKIMPORT_COMPUTER)->GetWindowText(szComputer); SendDlgItemMessage(IDC_USERADDRESSBOOKIMPORT_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) >= 0; )
	{
		EnumUsers();
		break;
	}
	GetDlgItem(IDC_USERADDRESSBOOKIMPORT_CONNECT)->EnableWindow((SendDlgItemMessage(IDC_USERADDRESSBOOKIMPORT_COMPUTER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szComputer) < 0 && !szComputer.IsEmpty()) ? TRUE : FALSE);
}

void CUserAddressBookImportDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	CUserProfileInfo  *pUserInfo;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_USERADDRESSBOOKIMPORT_CONTENTS, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
	{
		if ((pUserInfo = (!Listview_IsSelText(GetDlgItem(IDC_USERADDRESSBOOKIMPORT_CONTENTS), nItem)) ? m_pUsers.GetAt(nItem) : (CUserProfileInfo *)NULL))
		{
			m_pUsers.SetAt(nItem, NULL);
			delete pUserInfo;
		}
	}
	for (nItem = 0; nItem < nItems; nItem++)
	{
		if (!m_pUsers.GetAt(nItem))
		{
			m_pUsers.RemoveAt(nItem);
			nItems--;
			nItem--;
		}
	}
	EndDialog(IDOK);
}

BOOL CUserAddressBookImportDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_USERADDRESSBOOKIMPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CUserAddressBookImportDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_USERADDRESSBOOKIMPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CUserAddressesDialog dialog

IMPLEMENT_DYNCREATE(CUserAddressesDialog, CLocaleDialog)

CUserAddressesDialog::CUserAddressesDialog(CWnd *pParentWnd) : CLocaleDialog(CUserAddressesDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CUserAddressBookDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CUserAddressesDialog::DoModal(CUserProfiles &pUsers)
{
	INT  nResult;

	for (m_pUsers.Copy(&pUsers); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		pUsers.Copy(&m_pUsers);
		break;
	}
	return nResult;
}

VOID CUserAddressesDialog::EnumUsers()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CUserProfileInfo  *pUserInfo;
	CUserAddressBook  cUserAddressBook;

	for (nItem = 0, nItems = (cUserAddressBook.GetUserAddressBook(m_pUserAddresses)) ? (INT)m_pUserAddresses.GetSize() : 0; nItem < nItems; nItem++)
	{
		if ((pUserInfo = (CUserProfileInfo *)m_pUserAddresses.GetAt(nItem)) != (CUserProfileInfo *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_USERADDRESSESDIALOG_NAME); )
				{
					szItem = pUserInfo->GetFullName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_USERADDRESSESDIALOG_PHONENUMBER); )
				{
					szItem = pUserInfo->GetOfficePhone();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_USERADDRESSESDIALOG_FAXNUMBER); )
				{
					szItem = pUserInfo->GetOfficeFAX();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_USERADDRESSESDIALOG_EMAILADDRESS); )
				{
					szItem = pUserInfo->GetOfficeEMail();
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_USERADDRESSES_USERS), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_USERADDRESSES_USERS), nItem, nColumn, szItem);
			}
		}
	}
}

BOOL CUserAddressesDialog::Check(BOOL bModified) CONST
{
	CUIntArray  nItemIDs;

	return((Listview_GetSelText(GetDlgItem(IDC_USERADDRESSES_USERS), nItemIDs) > 0) ? TRUE : FALSE);
}

void CUserAddressesDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CUserAddressesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CUserAddressesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_pUserAddresses.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CUserAddressesDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CUserAddressesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_USERADDRESSES_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CUserAddressesDialog message handlers

BOOL CUserAddressesDialog::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_USERADDRESSESDIALOG_NAME));
	m_szColumns.Add(STRING(IDS_USERADDRESSESDIALOG_PHONENUMBER));
	m_szColumns.Add(STRING(IDS_USERADDRESSESDIALOG_FAXNUMBER));
	m_szColumns.Add(STRING(IDS_USERADDRESSESDIALOG_EMAILADDRESS));
	GetDlgItem(IDC_USERADDRESSES_USERS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_USERADDRESSES_USERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), rColumns.InflateRect(0, 0, rColumns.Width() / 2, 0), nWidth = (2 * rColumns.Width()) / 7; nColumn < nColumns; nWidth = (++nColumn < nColumns - 1) ? (rColumns.Width() / 5) : ((2 * rColumns.Width()) / 7))
	{
		Listview_InsertColumn(GetDlgItem(IDC_USERADDRESSES_USERS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	EnumUsers();
	GetDlgItem(IDC_USERADDRESSES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_USERADDRESSES_USERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_USERADDRESSES_USERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_USERADDRESSES_USERS)->EnableWindow((SendDlgItemMessage(IDC_USERADDRESSES_USERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_USERADDRESSES_USERS)->SetFocus();
	return FALSE;
}

BOOL CUserAddressesDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_USERADDRESSES_USERS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) GetDlgItem(IDOK)->EnableWindow(Check());
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

void CUserAddressesDialog::OnOK()
{
	INT  nUser;
	INT  nUsers;
	CUserProfileInfo  *pUserInfo;
	CHourglassCursor  cCursor;

	for (nUser = 0, nUsers = (INT)SendDlgItemMessage(IDC_USERADDRESSES_USERS, LVM_GETITEMCOUNT); nUser < nUsers; nUser++)
	{
		if ((pUserInfo = (Listview_IsSelText(GetDlgItem(IDC_USERADDRESSES_USERS), nUser)) ? new CUserProfileInfo : (CUserProfileInfo *)NULL))
		{
			for (pUserInfo->Copy(m_pUserAddresses.GetAt(nUser)); m_pUsers.Add(pUserInfo) < 0; )
			{
				delete pUserInfo;
				break;
			}
		}
	}
	EndDialog(IDOK);
}

BOOL CUserAddressesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_USERADDRESSESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CUserAddressesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_USERADDRESSESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CPFLPServiceDialog dialog

IMPLEMENT_DYNCREATE(CPFLPServiceDialog, CLocaleDialog)

CPFLPServiceDialog::CPFLPServiceDialog(CWnd *pParentWnd) : CLocaleDialog(CPFLPServiceDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CPFLPServiceDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CPFLPServiceDialog::Initialize()
{
	INT  nDevice;
	INT  nDevices;
	CString  szDevice;
	CPFLPServiceDevice  *pDevice;

	if (GetPFLPService()->GetDevices(m_pDevices[0]) > 0 && GetPFLPService()->GetAvailabilityInfo(m_nCode[0], m_tStartTime[0], m_tStopTime[0]))
	{
		for (nDevice = 0, nDevices = (INT)m_pDevices[0].GetSize(); nDevice < nDevices; nDevice++)
		{
			if ((pDevice = m_pDevices[0].GetAt(nDevice)) && pDevice->GetDeviceName().IsEmpty())
			{
				szDevice.Format(STRING(IDS_TELEMETRYPROVIDERDEVICE_NAME_FORMAT), 0);
				pDevice->SetDeviceName(szDevice);
			}
		}
		m_nCode[1] = m_nCode[0];
		m_tStartTime[1] = m_tStartTime[0];
		m_tStopTime[1] = m_tStopTime[0];
		return m_pDevices[1].Copy(&m_pDevices[0]);
	}
	return FALSE;
}

VOID CPFLPServiceDialog::EnumServiceDevices()
{
	INT  nDevice;
	INT  nDevices;
	BOOL  bDevice;
	CPFLPServiceDevice  *pDevice;

	for (nDevice = 0, nDevices = (INT)m_pDevices[0].GetSize(); nDevice < nDevices; nDevice++)
	{
		if ((pDevice = m_pDevices[0].GetAt(nDevice)) && SendDlgItemMessage(IDC_PFLP_SERVICE_DEVICE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDevice->GetDeviceBrand()) < 0)
		{
			SendDlgItemMessage(IDC_PFLP_SERVICE_DEVICE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pDevice->GetDeviceBrand());
			continue;
		}
	}
	for (SendDlgItemMessage(IDC_PFLP_SERVICE_DEVICE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_PFLP_SERVICE_DEVICE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)m_pDevices[0].GetActiveDeviceBrand()), 0)); (pDevice = FindActiveDevice()); )
	{
		m_pDevices[0].SetActiveDevice(pDevice);
		break;
	}
	for (bDevice = FALSE; (pDevice = FindActiveDevice()) && pDevice->Open(); )
	{
		pDevice->Close();
		bDevice = TRUE;
		break;
	}
	GetDlgItem(IDC_PFLP_SERVICE_DEVICE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_PFLP_SERVICE_DEVICE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_PFLP_SERVICE_DEVICE)->EnableWindow((SendDlgItemMessage(IDC_PFLP_SERVICE_DEVICE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_PFLP_SERVICE_DEVICE_CONFIGURATION)->EnableWindow((SendDlgItemMessage(IDC_PFLP_SERVICE_DEVICE, CB_GETCURSEL) >= 0) ? bDevice : FALSE);
}

VOID CPFLPServiceDialog::ShowServiceDetails()
{
	Timespinbox_SetTime(GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STARTTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + m_tStartTime[0].GetTotalSeconds() % SECONDSPERDAY));
	Timespinbox_SetTime(GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STOPTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + m_tStopTime[0].GetTotalSeconds() % SECONDSPERDAY));
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_UNLIMITED, (m_nCode[0] & PFLP_SERVICE_UNLIMITEDAVAILABILITY) ? TRUE : FALSE);
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_DAILY, (m_nCode[0] & PFLP_SERVICE_DAILYAVAILABILITY) ? TRUE : FALSE);
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_DISABLED, (m_nCode[0] & PFLP_SERVICE_NOAVAILABILITY) ? TRUE : FALSE);
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS, (m_nCode[0] & PFLP_SERVICE_WORKINGDAYSAVAILABILITY) ? TRUE : FALSE);
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT, (m_nCode[0] & PFLP_SERVICE_AUDITAVAILABILITY) ? TRUE : FALSE);
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_DAILY));
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_DAILY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_DAILY));
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_DAILY));
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS)->EnableWindow(IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_UNLIMITED) || IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_DAILY));
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT)->EnableWindow(IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_DAILY) || IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS));
}

CPFLPServiceDevice *CPFLPServiceDialog::FindActiveDevice() CONST
{
	INT  nDevice;
	INT  nDevices;
	CString  szDevice;
	CPFLPServiceDevice  *pDevice;

	GetDlgItem(IDC_PFLP_SERVICE_DEVICE)->GetWindowText(szDevice);
	for (nDevice = 0, nDevices = (INT)m_pDevices[0].GetSize(); nDevice < nDevices; nDevice++)
	{
		if ((pDevice = m_pDevices[0].GetAt(nDevice)) && pDevice->GetDeviceBrand() == szDevice) break;
		continue;
	}
	return((nDevice < nDevices) ? m_pDevices[0].GetAt(nDevice) : (CPFLPServiceDevice *)NULL);
}

VOID CPFLPServiceDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_PFLP_SERVICE_DEVICE, (bCheck = CheckAccountPrivilege(PRIVILEGE_PFLP_SETUPCHANGE)));
	AccessControl(IDC_PFLP_SERVICE_AVAILABILITY_UNLIMITED, bCheck);
	AccessControl(IDC_PFLP_SERVICE_AVAILABILITY_DAILY, bCheck);
	AccessControl(IDC_PFLP_SERVICE_AVAILABILITY_STARTTIME, bCheck);
	AccessControl(IDC_PFLP_SERVICE_AVAILABILITY_STOPTIME, bCheck);
	AccessControl(IDC_PFLP_SERVICE_AVAILABILITY_DISABLED, bCheck);
	AccessControl(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS, bCheck);
	AccessControl(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT, bCheck);
}

BOOL CPFLPServiceDialog::IsModified() CONST
{
	return((m_nCode[0] != m_nCode[1] || m_tStartTime[0] != m_tStartTime[1] || m_tStopTime[0] != m_tStopTime[1] || !m_pDevices[0].Compare(&m_pDevices[1])) ? TRUE : FALSE);
}

BOOL CPFLPServiceDialog::Check(BOOL bModified) CONST
{
	return(!bModified || IsModified());
}

void CPFLPServiceDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CPFLPServiceDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CPFLPServiceDialog::PostNcDestroy()
{
	m_pDevices[0].RemoveAll();
	m_pDevices[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CPFLPServiceDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CPFLPServiceDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_PFLP_SERVICE_DEVICE_CONFIGURATION, OnDeviceConfiguration)
	ON_BN_CLICKED(IDC_PFLP_SERVICE_AVAILABILITY_UNLIMITED, OnUnlimitedAvailability)
	ON_BN_CLICKED(IDC_PFLP_SERVICE_AVAILABILITY_DAILY, OnDailyAvailability)
	ON_BN_CLICKED(IDC_PFLP_SERVICE_AVAILABILITY_DISABLED, OnDisabledAvailability)
	ON_BN_CLICKED(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS, OnWorkingDaysAvailability)
	ON_BN_CLICKED(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT, OnAuditAvailability)
	ON_BN_CLICKED(IDC_PFLP_SERVICE_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_PFLP_SERVICE_DEVICE, OnSelchangeDevice)
	ON_CONTROL(TSBXN_CHANGE, IDC_PFLP_SERVICE_AVAILABILITY_STARTTIME, OnSpinchangeDailyStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_PFLP_SERVICE_AVAILABILITY_STOPTIME, OnSpinchangeDailyStopTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CPFLPServiceDialog message handlers

BOOL CPFLPServiceDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	EnumServiceDevices();
	GetDlgItem(IDC_PFLP_SERVICE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY)->EnableWindow();
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_UNLIMITED)->EnableWindow();
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_DAILY)->EnableWindow();
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_DISABLED)->EnableWindow();
	ShowServiceDetails();
	AdjustToPrivileges();
	return TRUE;
}

void CPFLPServiceDialog::OnDeviceConfiguration()
{
	CPFLPServiceDevice  *pDevice;
	CHourglassCursor  cCursor;

	if ((pDevice = FindActiveDevice()) && pDevice->Open())
	{
		pDevice->Configure(this, IODEVICE_TYPE_SERVER | IODEVICE_TYPE_CLIENT, !CheckAccountPrivilege(PRIVILEGE_PFLP_SETUPCHANGE));
		pDevice->Close();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CPFLPServiceDialog::OnUnlimitedAvailability()
{
	m_tStartTime[0] = m_tStopTime[0] = 0;
	m_nCode[0] = PFLP_SERVICE_UNLIMITEDAVAILABILITY;
	m_nCode[0] |= (IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS)) ? PFLP_SERVICE_WORKINGDAYSAVAILABILITY : 0;
	m_nCode[0] |= ((IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS)) ? IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT) : FALSE) ? PFLP_SERVICE_AUDITAVAILABILITY : 0;
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_UNLIMITED, TRUE);
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_DAILY, FALSE);
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_DISABLED, FALSE);
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT, (IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS)) ? IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT) : FALSE);
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS)->EnableWindow();
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT)->EnableWindow(IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CPFLPServiceDialog::OnDailyAvailability()
{
	m_tStartTime[0] = PFLPSERVICE_DEFAULTSTARTTIME;
	m_tStopTime[0] = PFLPSERVICE_DEFAULTSTOPTIME;
	m_nCode[0] = PFLP_SERVICE_DAILYAVAILABILITY;
	m_nCode[0] |= (IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS)) ? PFLP_SERVICE_WORKINGDAYSAVAILABILITY : 0;
	m_nCode[0] |= (IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT)) ? PFLP_SERVICE_AUDITAVAILABILITY : 0;
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_UNLIMITED, FALSE);
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_DAILY, TRUE);
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_DISABLED, FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STARTTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + m_tStartTime[0].GetTotalSeconds() % SECONDSPERDAY));
	Timespinbox_SetTime(GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STOPTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + m_tStopTime[0].GetTotalSeconds() % SECONDSPERDAY));
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_DAILY_STATIC)->EnableWindow();
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS)->EnableWindow();
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT)->EnableWindow();
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CPFLPServiceDialog::OnDisabledAvailability()
{
	m_tStartTime[0] = m_tStopTime[0] = 0;
	m_nCode[0] = PFLP_SERVICE_NOAVAILABILITY;
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_UNLIMITED, FALSE);
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_DAILY, FALSE);
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_DISABLED, TRUE);
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS, FALSE);
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT, FALSE);
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS)->EnableWindow(FALSE);
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CPFLPServiceDialog::OnWorkingDaysAvailability()
{
	m_nCode[0] = (IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS)) ? (m_nCode[0] | PFLP_SERVICE_WORKINGDAYSAVAILABILITY) : (m_nCode[0] & ~PFLP_SERVICE_WORKINGDAYSAVAILABILITY);
	m_nCode[0] = ((IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_DAILY) || IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS)) ? IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT) : FALSE) ? (m_nCode[0] | PFLP_SERVICE_AUDITAVAILABILITY) : (m_nCode[0] & ~PFLP_SERVICE_AUDITAVAILABILITY);
	CheckDlgButton(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT, (IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_DAILY) || IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS)) ? IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT) : FALSE);
	GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT)->EnableWindow(IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_DAILY) || IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_WORKINGDAYS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CPFLPServiceDialog::OnAuditAvailability()
{
	m_nCode[0] = (IsDlgButtonChecked(IDC_PFLP_SERVICE_AVAILABILITY_AUDIT)) ? (m_nCode[0] | PFLP_SERVICE_AUDITAVAILABILITY) : (m_nCode[0] & ~PFLP_SERVICE_AUDITAVAILABILITY);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CPFLPServiceDialog::OnSelchangeDevice()
{
	BOOL  bDevice;
	CPFLPServiceDevice  *pDevice;

	for (bDevice = FALSE; (pDevice = FindActiveDevice()); )
	{
		for (m_pDevices[0].SetActiveDevice(pDevice); pDevice->Open(); )
		{
			pDevice->Close();
			bDevice = TRUE;
			break;
		}
		break;
	}
	GetDlgItem(IDC_PFLP_SERVICE_DEVICE_CONFIGURATION)->EnableWindow(bDevice);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CPFLPServiceDialog::OnSpinchangeDailyStartTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STOPTIME)); tStartTime != 0 || tStopTime != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STOPTIME), (tStopTime = (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY) ? ((tStartTime.GetTime() % SECONDSPERDAY + 1 < SECONDSPERDAY) ? (tStartTime.GetTime() + 1) : tStartTime) : tStopTime));
		break;
	}
	m_tStartTime[0] = tStartTime.GetTime() % SECONDSPERDAY;
	m_tStopTime[0] = tStopTime.GetTime() % SECONDSPERDAY;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CPFLPServiceDialog::OnSpinchangeDailyStopTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STOPTIME)); tStartTime != 0 || tStopTime != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_PFLP_SERVICE_AVAILABILITY_STARTTIME), (tStartTime = (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY) ? ((tStopTime.GetTime() % SECONDSPERDAY > 0) ? (tStopTime.GetTime() - 1) : tStopTime) : tStartTime));
		break;
	}
	m_tStartTime[0] = tStartTime.GetTime() % SECONDSPERDAY;
	m_tStopTime[0] = tStopTime.GetTime() % SECONDSPERDAY;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CPFLPServiceDialog::OnOK()
{
	CHourglassCursor  cCursor;

	GetPFLPService()->SetDevices(m_pDevices[0]);
	GetPFLPService()->SetAvailabilityInfo(m_nCode[0], m_tStartTime[0], m_tStopTime[0]);
	EndDialog(IDOK);
}

BOOL CPFLPServiceDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_PFLPSERVICEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CPFLPServiceDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_PFLPSERVICEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CPFLPClientsDialog dialog

IMPLEMENT_DYNCREATE(CPFLPClientsDialog, CLocaleDialog)

CPFLPClientsDialog::CPFLPClientsDialog(CWnd *pParentWnd) : CLocaleDialog(CPFLPClientsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CPFLPClientsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CPFLPClientsDialog::Initialize()
{
	return((GetPFLPService()->GetConnections(m_szClients, m_pConnections) >= 0) ? TRUE : FALSE);
}

BOOL CPFLPClientsDialog::EnumConnections()
{
	INT  nPos;
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	DWORDLONG  cbBytes;
	CTimeTag  tConnection[2];
	CPFLPConnection  *pConnectionInfo;
	CStringTools  cStringTools;

	for (nItem = 0, nItems = (m_szClients.GetSize() == m_pConnections.GetSize()) ? (INT)m_pConnections.GetSize() : -1, SendDlgItemMessage(IDC_PFLP_CLIENTS_NAMES, LVM_DELETEALLITEMS); nItem < nItems; nItem++)
	{
		if ((pConnectionInfo = m_pConnections.GetAt(nItem)) != (CPFLPConnection *)NULL)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_PFLPCLIENTSDIALOG_CLIENTNAME); )
				{
					for (szItem = m_szClients.GetAt(nItem); (nPos = szItem.Find(EOL)) >= 0; )
					{
						szItem.Format(STRING(IDS_PFLPCLIENTSDIALOG_CONNECTION_CLIENT), (LPCTSTR)szItem.Left(nPos), (LPCTSTR)szItem.Mid(nPos + 1));
						szItem = (nPos == szItem.GetLength() - 1) ? m_szClients.GetAt(nItem) : szItem;
						break;
					}
					break;
				}
				for (pConnectionInfo->GetStatistics(tConnection[0], tConnection[1], cbBytes); m_szColumns.GetAt(nColumn) == STRING(IDS_PFLPCLIENTSDIALOG_CONNECTION_OPENTIME); )
				{
					szItem = CTimeKey(tConnection[0].GetTimeInSeconds()).FormatGmt();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_PFLPCLIENTSDIALOG_CONNECTION_LASTTIME); )
				{
					szItem = CTimeKey(tConnection[1].GetTimeInSeconds()).FormatGmt();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_PFLPCLIENTSDIALOG_CONNECTION_BYTES); )
				{
					szItem.Format(STRING(IDS_PFLPCLIENTSDIALOG_CONNECTION_DATA_FORMAT), (LPCTSTR)cStringTools.ConvertLongUIntToStructuredString(cbBytes));
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_PFLP_CLIENTS_NAMES), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_PFLP_CLIENTS_NAMES), nItem, nColumn, szItem);
			}
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_PFLP_CLIENTS_NAMES), 0);
	GetDlgItem(IDC_PFLP_CLIENTS_NAMES_STATIC)->EnableWindow((SendDlgItemMessage(IDC_PFLP_CLIENTS_NAMES, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_PFLP_CLIENTS_NAMES)->EnableWindow((SendDlgItemMessage(IDC_PFLP_CLIENTS_NAMES, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_PFLP_CLIENTS_CLOSE)->EnableWindow((SendDlgItemMessage(IDC_PFLP_CLIENTS_NAMES, LVM_GETITEMCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_PFLP_CLIENTSCHANGE) : FALSE);
	GetDlgItem(IDC_PFLP_CLIENTS_CLOSEALL)->EnableWindow((SendDlgItemMessage(IDC_PFLP_CLIENTS_NAMES, LVM_GETITEMCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_PFLP_CLIENTSCHANGE) : FALSE);
	return((SendDlgItemMessage(IDC_PFLP_CLIENTS_NAMES, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

void CPFLPClientsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CPFLPClientsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CPFLPClientsDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_szClients.RemoveAll();
	m_pConnections.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CPFLPClientsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CPFLPClientsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_PFLP_CLIENTS_CLOSE, OnClose)
	ON_BN_CLICKED(IDC_PFLP_CLIENTS_CLOSEALL, OnCloseAll)
	ON_BN_CLICKED(IDC_PFLP_CLIENTS_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CPFLPClientsDialog message handlers

BOOL CPFLPClientsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_PFLPCLIENTSDIALOG_CLIENTNAME));
	m_szColumns.Add(STRING(IDS_PFLPCLIENTSDIALOG_CONNECTION_OPENTIME));
	m_szColumns.Add(STRING(IDS_PFLPCLIENTSDIALOG_CONNECTION_LASTTIME));
	m_szColumns.Add(STRING(IDS_PFLPCLIENTSDIALOG_CONNECTION_BYTES));
	GetDlgItem(IDC_PFLP_CLIENTS_NAMES)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_PFLP_CLIENTS_NAMES, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_PFLP_CLIENTS_NAMES), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_PFLPCLIENTSDIALOG_CLIENTNAME)) ? (rColumns.Width() / 3) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_PFLPCLIENTSDIALOG_CONNECTION_OPENTIME) || m_szColumns.GetAt(nColumn) == STRING(IDS_PFLPCLIENTSDIALOG_CONNECTION_LASTTIME)) ? (rColumns.Width() / 3) : (rColumns.Width() / 4)));
		continue;
	}
	EnumConnections();
	GetDlgItem(IDC_PFLP_CLIENTS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_PFLP_CLIENTS_NAMES)->SetFocus();
	return FALSE;
}

void CPFLPClientsDialog::OnClose()
{
	INT  nConnection;
	INT  nConnections;
	CPFLPConnection  *pConnection;
	CHourglassCursor  cCursor;

	for (nConnections = (INT)m_pConnections.GetSize(); (nConnection = Listview_GetCurText(GetDlgItem(IDC_PFLP_CLIENTS_NAMES))) >= 0 && nConnection < nConnections; )
	{
		if ((pConnection = m_pConnections.GetAt(nConnection)))
		{
			m_pConnections.RemoveAt(nConnection);
			m_szClients.RemoveAt(nConnection);
			delete pConnection;
		}
		EnumConnections();
		break;
	}
	if (SendDlgItemMessage(IDC_PFLP_CLIENTS_NAMES, LVM_GETITEMCOUNT) > 0)
	{
		GetDlgItem(IDC_PFLP_CLIENTS_NAMES)->SetFocus();
		GetDlgItem(IDOK)->EnableWindow();
		return;
	}
	GetDlgItem(IDOK)->EnableWindow();
	GetDlgItem(IDOK)->SetFocus();
}

void CPFLPClientsDialog::OnCloseAll()
{
	CHourglassCursor  cCursor;

	for (m_szClients.RemoveAll(), m_pConnections.RemoveAll(); !m_szClients.GetSize(); )
	{
		EnumConnections();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow();
	GetDlgItem(IDOK)->SetFocus();
}

void CPFLPClientsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	GetPFLPService()->SetConnections(m_szClients, m_pConnections);
	EndDialog(IDOK);
}

BOOL CPFLPClientsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_PFLPCLIENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CPFLPClientsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_PFLPCLIENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTPEPServiceDialog dialog

IMPLEMENT_DYNCREATE(CTPEPServiceDialog, CLocaleDialog)

CTPEPServiceDialog::CTPEPServiceDialog(CWnd *pParentWnd) : CLocaleDialog(CTPEPServiceDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTPEPServiceDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTPEPServiceDialog::Initialize()
{
	if (GetTPEPService()->GetPort(m_nPort[0]) && GetTPEPService()->GetBufferSize(m_nBufferSize[0]) && GetTPEPService()->GetTimeout(m_tTimeout[0]) && GetTPEPService()->GetCharset(m_nCharset[0]) && GetTPEPService()->GetAvailabilityInfo(m_nCode[0], m_tStartTime[0], m_tStopTime[0]) && GetTPEPService()->GetSecurityInfo(m_szClients[0], m_nAccessCodes[0], m_tStartTimes[0], m_tStopTimes[0]))
	{
		m_szClients[1].Copy(m_szClients[0]);
		m_nAccessCodes[1].Copy(m_nAccessCodes[0]);
		m_tStartTimes[1].Copy(m_tStartTimes[0]);
		m_tStopTimes[1].Copy(m_tStopTimes[0]);
		m_tStartTime[1] = m_tStartTime[0];
		m_tStopTime[1] = m_tStopTime[0];
		m_nBufferSize[1] = m_nBufferSize[0];
		m_nCharset[1] = m_nCharset[0];
		m_tTimeout[1] = m_tTimeout[0];
		m_nPort[1] = m_nPort[0];
		m_nCode[1] = m_nCode[0];
		return TRUE;
	}
	return FALSE;
}

VOID CTPEPServiceDialog::ShowServiceDetails()
{
	INT  nPos;
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;

	Spinbox_SetPos(GetDlgItem(IDC_TPEP_SERVICE_PORT), m_nPort[0]);
	Spinbox_SetPos(GetDlgItem(IDC_TPEP_SERVICE_BUFFERSIZE), m_nBufferSize[0] / 1024);
	Spinbox_SetPos(GetDlgItem(IDC_TPEP_SERVICE_TIMEOUT), m_tTimeout[0].GetTotalSeconds());
	Timespinbox_SetTime(GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STARTTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + m_tStartTime[0].GetTotalSeconds() % SECONDSPERDAY));
	Timespinbox_SetTime(GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STOPTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + m_tStopTime[0].GetTotalSeconds() % SECONDSPERDAY));
	CheckDlgButton(IDC_TPEP_SERVICE_CHARSET_ASCII, (m_nCharset[0] == TPEP_SERVICE_ASCIICHARSET) ? TRUE : FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_CHARSET_UNICODE, (m_nCharset[0] == TPEP_SERVICE_UNICODECHARSET) ? TRUE : FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_CHARSET_DEFAULT, (m_nCharset[0] == TPEP_SERVICE_DEFAULTCHARSET) ? TRUE : FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_UNLIMITED, (m_nCode[0] & TPEP_SERVICE_UNLIMITEDAVAILABILITY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_DAILY, (m_nCode[0] & TPEP_SERVICE_DAILYAVAILABILITY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_DISABLED, (m_nCode[0] & TPEP_SERVICE_NOAVAILABILITY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS, (m_nCode[0] & TPEP_SERVICE_WORKINGDAYSAVAILABILITY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT, (m_nCode[0] & TPEP_SERVICE_AUDITAVAILABILITY) ? TRUE : FALSE);
	for (nItem = 0, nItems = (INT)m_szClients[0].GetSize(), SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_DELETEALLITEMS); nItem < nItems; nItem++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPSERVICESETTINGSDIALOG_NAME); )
			{
				szItem = ((nPos = m_szClients[0].GetAt(nItem).Find(EOL)) >= 0) ? m_szClients[0].GetAt(nItem).Left(nPos) : m_szClients[0].GetAt(nItem);
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPSERVICESETTINGSDIALOG_ADDRESS); )
			{
				szItem = ((nPos = m_szClients[0].GetAt(nItem).Find(EOL)) >= 0) ? m_szClients[0].GetAt(nItem).Mid(nPos + 1) : EMPTYSTRING;
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS), nItem, szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS), nItem, nColumn, szItem);
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS), 0);
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_DAILY));
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_DAILY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_DAILY));
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_DAILY));
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_UNLIMITED) || IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_DAILY));
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_DAILY) || IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS));
	GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS)->EnableWindow((SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_SECURITY_ADDCLIENTS)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TPEP_SETUPCHANGE));
	GetDlgItem(IDC_TPEP_SERVICE_SECURITY_REMOVECLIENTS)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS)) >= 0) ? CheckAccountPrivilege(PRIVILEGE_TPEP_SETUPCHANGE) : FALSE);
	ShowClientProperties();
}

VOID CTPEPServiceDialog::ShowClientProperties(INT nIndex)
{
	CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_NONE, (SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0 && nIndex < m_nAccessCodes[0].GetSize() && (m_nAccessCodes[0].GetAt(nIndex) & TPEP_SERVICE_UNLIMITEDACCESS)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_FULL, (SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0 && nIndex < m_nAccessCodes[0].GetSize() && (m_nAccessCodes[0].GetAt(nIndex) & TPEP_SERVICE_DENIEDACCESS)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL, (SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0 && nIndex < m_nAccessCodes[0].GetSize() && (m_nAccessCodes[0].GetAt(nIndex) & TPEP_SERVICE_RESTRICTEDACCESS)) ? TRUE : FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_AUDIT, (SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0 && nIndex < m_nAccessCodes[0].GetSize() && (m_nAccessCodes[0].GetAt(nIndex) & TPEP_SERVICE_AUDITACCESS)) ? TRUE : FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STARTTIME), (nIndex >= 0 && nIndex < m_tStartTimes[0].GetSize() && m_tStartTimes[0].GetAt(nIndex) > 0) ? m_tStartTimes[0].GetAt(nIndex) : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STOPTIME), (nIndex >= 0 && nIndex < m_tStopTimes[0].GetSize() && m_tStopTimes[0].GetAt(nIndex) > 0) ? m_tStopTimes[0].GetAt(nIndex) : CTime::GetCurrentTime().GetTime());
	GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_NONE)->EnableWindow((SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_FULL)->EnableWindow((SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL)->EnableWindow((SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_AUDIT)->EnableWindow((SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0 && nIndex >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL));
	GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL));
	GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL));
}

VOID CTPEPServiceDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TPEP_SERVICE_PORT, (bCheck = CheckAccountPrivilege(PRIVILEGE_TPEP_SETUPCHANGE)));
	AccessControl(IDC_TPEP_SERVICE_TIMEOUT, bCheck);
	AccessControl(IDC_TPEP_SERVICE_BUFFERSIZE, bCheck);
	AccessControl(IDC_TPEP_SERVICE_CHARSET_ASCII, bCheck);
	AccessControl(IDC_TPEP_SERVICE_CHARSET_UNICODE, bCheck);
	AccessControl(IDC_TPEP_SERVICE_CHARSET_DEFAULT, bCheck);
	AccessControl(IDC_TPEP_SERVICE_AVAILABILITY_UNLIMITED, bCheck);
	AccessControl(IDC_TPEP_SERVICE_AVAILABILITY_DAILY, bCheck);
	AccessControl(IDC_TPEP_SERVICE_AVAILABILITY_STARTTIME, bCheck);
	AccessControl(IDC_TPEP_SERVICE_AVAILABILITY_STOPTIME, bCheck);
	AccessControl(IDC_TPEP_SERVICE_AVAILABILITY_DISABLED, bCheck);
	AccessControl(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS, bCheck);
	AccessControl(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT, bCheck);
	AccessControl(IDC_TPEP_SERVICE_SECURITY_ADDCLIENTS, bCheck);
	AccessControl(IDC_TPEP_SERVICE_SECURITY_REMOVECLIENTS, bCheck);
	AccessControl(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_NONE, bCheck);
	AccessControl(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_FULL, bCheck);
	AccessControl(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL, bCheck);
	AccessControl(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STARTTIME, bCheck);
	AccessControl(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STOPTIME, bCheck);
	AccessControl(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_AUDIT, bCheck);
}

BOOL CTPEPServiceDialog::IsModified() CONST
{
	INT  nClient[2];
	INT  nClients[2];

	for (nClient[0] = 0, nClients[0] = (m_nPort[0] == m_nPort[1] && m_nBufferSize[0] == m_nBufferSize[1] && m_tTimeout[0] == m_tTimeout[1] && m_nCharset[0] == m_nCharset[1] && m_nCode[0] == m_nCode[1] && m_tStartTime[0] == m_tStartTime[1] && m_tStopTime[0] == m_tStopTime[1] && m_szClients[0].GetSize() == m_szClients[1].GetSize() && m_nAccessCodes[0].GetSize() == m_nAccessCodes[1].GetSize() && m_tStartTimes[0].GetSize() == m_tStartTimes[1].GetSize() && m_tStopTimes[0].GetSize() == m_tStopTimes[1].GetSize()) ? (INT)m_szClients[0].GetSize() : -1; nClient[0] < nClients[0]; nClient[0]++)
	{
		for (nClient[1] = 0, nClients[1] = (INT)m_szClients[1].GetSize(); nClient[1] < nClients[1]; nClient[1]++)
		{
			if (!m_szClients[0].GetAt(nClient[0]).CompareNoCase(m_szClients[1].GetAt(nClient[1])))
			{
				if (m_nAccessCodes[0].GetAt(nClient[0]) != m_nAccessCodes[1].GetAt(nClient[1])) continue;
				if (m_tStartTimes[0].GetAt(nClient[0]) != m_tStartTimes[1].GetAt(nClient[1])) continue;
				if (m_tStopTimes[0].GetAt(nClient[0]) != m_tStopTimes[1].GetAt(nClient[1])) continue;
				break;
			}
		}
		if (nClient[1] == nClients[1]) break;
	}
	return((nClient[0] != nClients[0]) ? TRUE : FALSE);
}

BOOL CTPEPServiceDialog::Check(BOOL bModified) CONST
{
	return(!bModified || IsModified());
}

void CTPEPServiceDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTPEPServiceDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTPEPServiceDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_szClients[0].RemoveAll();
	m_szClients[1].RemoveAll();
	m_nAccessCodes[0].RemoveAll();
	m_nAccessCodes[1].RemoveAll();
	m_tStartTimes[0].RemoveAll();
	m_tStartTimes[1].RemoveAll();
	m_tStopTimes[0].RemoveAll();
	m_tStopTimes[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTPEPServiceDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTPEPServiceDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TPEP_SERVICE_CHARSET_ASCII, OnCharsetASCII)
	ON_BN_CLICKED(IDC_TPEP_SERVICE_CHARSET_UNICODE, OnCharsetUnicode)
	ON_BN_CLICKED(IDC_TPEP_SERVICE_CHARSET_DEFAULT, OnCharsetDefault)
	ON_BN_CLICKED(IDC_TPEP_SERVICE_AVAILABILITY_UNLIMITED, OnUnlimitedAvailability)
	ON_BN_CLICKED(IDC_TPEP_SERVICE_AVAILABILITY_DAILY, OnDailyAvailability)
	ON_BN_CLICKED(IDC_TPEP_SERVICE_AVAILABILITY_DISABLED, OnDisabledAvailability)
	ON_BN_CLICKED(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS, OnWorkingDaysAvailability)
	ON_BN_CLICKED(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT, OnAuditAvailability)
	ON_BN_CLICKED(IDC_TPEP_SERVICE_SECURITY_ADDCLIENTS, OnAddClients)
	ON_BN_CLICKED(IDC_TPEP_SERVICE_SECURITY_REMOVECLIENTS, OnRemoveClients)
	ON_BN_CLICKED(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_NONE, OnNoAccessRestrictions)
	ON_BN_CLICKED(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_FULL, OnFullAccessRestrictions)
	ON_BN_CLICKED(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL, OnPartialAccessRestrictions)
	ON_BN_CLICKED(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_AUDIT, OnAuditRestrictions)
	ON_BN_CLICKED(IDC_TPEP_SERVICE_HELP, OnHelp)
	ON_CONTROL(SBXN_CHANGE, IDC_TPEP_SERVICE_PORT, OnSpinchangeProtocolPort)
	ON_CONTROL(SBXN_CHANGE, IDC_TPEP_SERVICE_BUFFERSIZE, OnSpinchangeProtocolBufferSize)
	ON_CONTROL(SBXN_CHANGE, IDC_TPEP_SERVICE_TIMEOUT, OnSpinchangeProtocolTimeout)
	ON_CONTROL(TSBXN_CHANGE, IDC_TPEP_SERVICE_AVAILABILITY_STARTTIME, OnSpinchangeDailyStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TPEP_SERVICE_AVAILABILITY_STOPTIME, OnSpinchangeDailyStopTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STARTTIME, OnSpinchangeAccessStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STOPTIME, OnSpinchangeAccessStopTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTPEPServiceDialog message handlers

BOOL CTPEPServiceDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TPEPSERVICESETTINGSDIALOG_NAME));
	m_szColumns.Add(STRING(IDS_TPEPSERVICESETTINGSDIALOG_ADDRESS));
	GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS)->GetClientRect(rColumns);
	Spinbox_SetRange(GetDlgItem(IDC_TPEP_SERVICE_PORT), TPEP_SERVICE_FIRSTPORT, TPEP_SERVICE_LASTPORT);
	Spinbox_SetRange(GetDlgItem(IDC_TPEP_SERVICE_BUFFERSIZE), TPEP_SERVICE_MINIMUMBUFFERSIZE / 1024, TPEP_SERVICE_MAXIMUMBUFFERSIZE / 1024);
	Spinbox_SetRange(GetDlgItem(IDC_TPEP_SERVICE_TIMEOUT), TPEP_SERVICE_MINIMUMTIMEOUT, TPEP_SERVICE_MAXIMUMTIMEOUT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT), rColumns.DeflateRect(0, 0, GetSystemMetrics(SM_CXVSCROLL), 0); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS), nColumn, m_szColumns.GetAt(nColumn), rColumns.Width() / 2);
		continue;
	}
	GetDlgItem(IDC_TPEP_SERVICE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_PORT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_PORT)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_TIMEOUT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_TIMEOUT)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_TIMEOUT_SECONDS)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_BUFFERSIZE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_BUFFERSIZE)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_BUFFERSIZE_KB)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_CHARSET)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_CHARSET_ASCII)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_CHARSET_UNICODE)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_CHARSET_DEFAULT)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_UNLIMITED)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_DAILY)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_DISABLED)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_SECURITY)->EnableWindow();
	ShowServiceDetails();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTPEPServiceDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TPEP_SERVICE_SECURITY_CLIENTS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) ShowClientProperties(pNotifyListView->iItem);
		if (pNotifyListView->hdr.code == LVN_DELETEALLITEMS) ShowClientProperties();
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

void CTPEPServiceDialog::OnCharsetASCII()
{
	m_nCharset[0] = TPEP_SERVICE_ASCIICHARSET;
	CheckRadioButton(IDC_TPEP_SERVICE_CHARSET_ASCII, IDC_TPEP_SERVICE_CHARSET_DEFAULT, IDC_TPEP_SERVICE_CHARSET_ASCII);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnCharsetUnicode()
{
	m_nCharset[0] = TPEP_SERVICE_UNICODECHARSET;
	CheckRadioButton(IDC_TPEP_SERVICE_CHARSET_ASCII, IDC_TPEP_SERVICE_CHARSET_DEFAULT, IDC_TPEP_SERVICE_CHARSET_UNICODE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnCharsetDefault()
{
	m_nCharset[0] = TPEP_SERVICE_DEFAULTCHARSET;
	CheckRadioButton(IDC_TPEP_SERVICE_CHARSET_ASCII, IDC_TPEP_SERVICE_CHARSET_DEFAULT, IDC_TPEP_SERVICE_CHARSET_DEFAULT);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnUnlimitedAvailability()
{
	m_tStartTime[0] = m_tStopTime[0] = 0;
	m_nCode[0] = TPEP_SERVICE_UNLIMITEDAVAILABILITY;
	m_nCode[0] |= (IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS)) ? TPEP_SERVICE_WORKINGDAYSAVAILABILITY : 0;
	m_nCode[0] |= ((IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS)) ? IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT) : FALSE) ? TPEP_SERVICE_AUDITAVAILABILITY : 0;
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_UNLIMITED, TRUE);
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_DAILY, FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_DISABLED, FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT, (IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS)) ? IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT) : FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnDailyAvailability()
{
	m_tStartTime[0] = TPEPSERVICE_DEFAULTSTARTTIME;
	m_tStopTime[0] = TPEPSERVICE_DEFAULTSTOPTIME;
	m_nCode[0] = TPEP_SERVICE_DAILYAVAILABILITY;
	m_nCode[0] |= (IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS)) ? TPEP_SERVICE_WORKINGDAYSAVAILABILITY : 0;
	m_nCode[0] |= (IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT)) ? TPEP_SERVICE_AUDITAVAILABILITY : 0;
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_UNLIMITED, FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_DAILY, TRUE);
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_DISABLED, FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STARTTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + m_tStartTime[0].GetTotalSeconds() % SECONDSPERDAY));
	Timespinbox_SetTime(GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STOPTIME), CTimeKey(SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY) + m_tStopTime[0].GetTotalSeconds() % SECONDSPERDAY));
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_DAILY_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT)->EnableWindow();
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnDisabledAvailability()
{
	m_tStartTime[0] = m_tStopTime[0] = 0;
	m_nCode[0] = TPEP_SERVICE_NOAVAILABILITY;
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_UNLIMITED, FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_DAILY, FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_DISABLED, TRUE);
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS, FALSE);
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT, FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_DAILY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnWorkingDaysAvailability()
{
	m_nCode[0] = (IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS)) ? (m_nCode[0] | TPEP_SERVICE_WORKINGDAYSAVAILABILITY) : (m_nCode[0] & ~TPEP_SERVICE_WORKINGDAYSAVAILABILITY);
	m_nCode[0] = ((IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_DAILY) || IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS)) ? IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT) : FALSE) ? (m_nCode[0] | TPEP_SERVICE_AUDITAVAILABILITY) : (m_nCode[0] & ~TPEP_SERVICE_AUDITAVAILABILITY);
	CheckDlgButton(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT, (IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_DAILY) || IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS)) ? IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT) : FALSE);
	GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_DAILY) || IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_WORKINGDAYS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnAuditAvailability()
{
	m_nCode[0] = (IsDlgButtonChecked(IDC_TPEP_SERVICE_AVAILABILITY_AUDIT)) ? (m_nCode[0] | TPEP_SERVICE_AUDITAVAILABILITY) : (m_nCode[0] & ~TPEP_SERVICE_AUDITAVAILABILITY);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnAddClients()
{
	INT  nPos;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nItem[2];
	INT  nItems[2];
	CString  szItem[2];
	CStringArray  szAddresses;
	CTPEPClientAddressesDialog  cClientAddressesDialog(this);

	if (cClientAddressesDialog.DoModal(szAddresses) == IDOK)
	{
		for (nItem[0] = 0, nItems[0] = (INT)szAddresses.GetSize(), nIndex = -1; nItem[0] < nItems[0]; nItem[0]++)
		{
			for (nItem[1] = 0, nItems[1] = (INT)SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_GETITEMCOUNT), szItem[0] = ((nPos = szAddresses.GetAt(nItem[0]).Find(EOL)) >= 0) ? szAddresses.GetAt(nItem[0]).Left(nPos) : szAddresses.GetAt(nItem[0]), szItem[1] = (nPos >= 0) ? szAddresses.GetAt(nItem[0]).Mid(nPos + 1) : EMPTYSTRING; nItem[1] < nItems[1]; nItem[1]++)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPSERVICESETTINGSDIALOG_NAME))
					{
						if (!Listview_GetText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS), nItem[1], nColumn).CompareNoCase(szItem[0]) && !szItem[0].IsEmpty()) break;
						continue;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPSERVICESETTINGSDIALOG_ADDRESS))
					{
						if (!Listview_GetText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS), nItem[1], nColumn).CompareNoCase(szItem[1]) && !szItem[1].IsEmpty()) break;
						continue;
					}
				}
				if (nColumn < nColumns) break;
			}
			if (nItem[1] == nItems[1])
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), m_szClients[0].Add(szAddresses.GetAt(nItem[0])), m_nAccessCodes[0].Add(TPEP_SERVICE_UNLIMITEDACCESS), m_tStartTimes[0].Add(0), m_tStopTimes[0].Add(0); nColumn < nColumns; nColumn++)
				{
					if ((!nColumn  &&  Listview_InsertText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS), (INT)(m_szClients[0].GetSize() - 1), szItem[0])) || (nColumn > 0 && Listview_SetText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS), (INT)(m_szClients[0].GetSize() - 1), nColumn, szItem[1])))
					{
						nIndex = (nIndex >= 0) ? (INT)min(m_szClients[0].GetSize() - 1, nIndex) : (INT)(m_szClients[0].GetSize() - 1);
						continue;
					}
				}
			}
		}
		Listview_SetCurText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS), max(nIndex, 0));
	}
	if (SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_GETITEMCOUNT) > 0)
	{
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS)->EnableWindow();
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_REMOVECLIENTS)->EnableWindow();
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS)->SetFocus();
	}
	else
	{
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS)->EnableWindow(FALSE);
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_REMOVECLIENTS)->EnableWindow(FALSE);
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_ADDCLIENTS)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnRemoveClients()
{
	INT  nIndex;
	CHourglassCursor  cCursor;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS))) >= 0)
	{
		if (SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_DELETEITEM, nIndex))
		{
			for (m_szClients[0].RemoveAt(nIndex), m_nAccessCodes[0].RemoveAt(nIndex), m_tStartTimes[0].RemoveAt(nIndex), m_tStopTimes[0].RemoveAt(nIndex); !SendDlgItemMessage(IDC_TPEP_SERVICE_SECURITY_CLIENTS, LVM_GETITEMCOUNT); )
			{
				CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_NONE, FALSE);
				CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_FULL, FALSE);
				CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL, FALSE);
				CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_AUDIT, FALSE);
				GetDlgItem(IDC_TPEP_SERVICE_SECURITY_REMOVECLIENTS)->EnableWindow(FALSE);
				GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS_STATIC)->EnableWindow(FALSE);
				GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS)->EnableWindow(FALSE);
				GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STATIC)->EnableWindow(FALSE);
				GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_NONE)->EnableWindow(FALSE);
				GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_FULL)->EnableWindow(FALSE);
				GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL)->EnableWindow(FALSE);
				GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STARTTIME)->EnableWindow(FALSE);
				GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL_STATIC)->EnableWindow(FALSE);
				GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STOPTIME)->EnableWindow(FALSE);
				GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_AUDIT)->EnableWindow(FALSE);
				GetDlgItem(IDOK)->EnableWindow(Check());
				GetDlgItem(IDOK)->SetFocus();
				return;
			}
			Listview_SetCurText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS), 0);
		}
	}
	GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnNoAccessRestrictions()
{
	INT  nIndex;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS))) >= 0)
	{
		for (m_tStartTimes[0].SetAt(nIndex, 0), m_tStopTimes[0].SetAt(nIndex, 0), m_nAccessCodes[0].SetAt(nIndex, (IsDlgButtonChecked(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_AUDIT)) ? (TPEP_SERVICE_UNLIMITEDACCESS | TPEP_SERVICE_AUDITACCESS) : TPEP_SERVICE_UNLIMITEDACCESS); TRUE; )
		{
			CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_NONE, TRUE);
			CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_FULL, FALSE);
			CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL, FALSE);
			break;
		}
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STARTTIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STOPTIME)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnFullAccessRestrictions()
{
	INT  nIndex;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS))) >= 0)
	{
		for (m_tStartTimes[0].SetAt(nIndex, 0), m_tStopTimes[0].SetAt(nIndex, 0), m_nAccessCodes[0].SetAt(nIndex, (IsDlgButtonChecked(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_AUDIT)) ? (TPEP_SERVICE_DENIEDACCESS | TPEP_SERVICE_AUDITACCESS) : TPEP_SERVICE_DENIEDACCESS); TRUE; )
		{
			CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_NONE, FALSE);
			CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_FULL, TRUE);
			CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL, FALSE);
			break;
		}
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STARTTIME)->EnableWindow(FALSE);
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STOPTIME)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnPartialAccessRestrictions()
{
	INT  nIndex;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS))) >= 0)
	{
		for (m_tStartTimes[0].SetAt(nIndex, CTime::GetCurrentTime().GetTime()), m_tStopTimes[0].SetAt(nIndex, CTime::GetCurrentTime().GetTime() + TPEPSERVICE_DEFAULTACCESSPERIOD), m_nAccessCodes[0].SetAt(nIndex, (IsDlgButtonChecked(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_AUDIT)) ? (TPEP_SERVICE_RESTRICTEDACCESS | TPEP_SERVICE_AUDITACCESS) : TPEP_SERVICE_RESTRICTEDACCESS); TRUE; )
		{
			Timespinbox_SetTime(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STARTTIME), m_tStartTimes[0].GetAt(nIndex));
			Timespinbox_SetTime(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STOPTIME), m_tStopTimes[0].GetAt(nIndex));
			CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_NONE, FALSE);
			CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_FULL, FALSE);
			CheckDlgButton(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL, TRUE);
			break;
		}
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STARTTIME)->EnableWindow();
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_PARTIAL_STATIC)->EnableWindow();
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STOPTIME)->EnableWindow();
		GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STARTTIME)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnAuditRestrictions()
{
	INT  nIndex;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS))) >= 0) m_nAccessCodes[0].SetAt(nIndex, (IsDlgButtonChecked(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_AUDIT)) ? (m_nAccessCodes[0].GetAt(nIndex) | TPEP_SERVICE_AUDITACCESS) : (m_nAccessCodes[0].GetAt(nIndex) & ~TPEP_SERVICE_AUDITACCESS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnSpinchangeProtocolPort()
{
	m_nPort[0] = (UINT)Spinbox_GetPos(GetDlgItem(IDC_TPEP_SERVICE_PORT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnSpinchangeProtocolBufferSize()
{
	m_nBufferSize[0] = (UINT)(1024 * Spinbox_GetPos(GetDlgItem(IDC_TPEP_SERVICE_BUFFERSIZE)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnSpinchangeProtocolTimeout()
{
	m_tTimeout[0] = Spinbox_GetPos(GetDlgItem(IDC_TPEP_SERVICE_TIMEOUT));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnSpinchangeDailyStartTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STOPTIME)); tStartTime != 0 || tStopTime != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STOPTIME), (tStopTime = (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY) ? ((tStartTime.GetTime() % SECONDSPERDAY + 1 < SECONDSPERDAY) ? (tStartTime.GetTime() + 1) : tStartTime) : tStopTime));
		break;
	}
	m_tStartTime[0] = tStartTime.GetTime() % SECONDSPERDAY;
	m_tStopTime[0] = tStopTime.GetTime() % SECONDSPERDAY;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnSpinchangeDailyStopTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STOPTIME)); tStartTime != 0 || tStopTime != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TPEP_SERVICE_AVAILABILITY_STARTTIME), (tStartTime = (tStartTime.GetTime() % SECONDSPERDAY >= tStopTime.GetTime() % SECONDSPERDAY) ? ((tStopTime.GetTime() % SECONDSPERDAY > 0) ? (tStopTime.GetTime() - 1) : tStopTime) : tStartTime));
		break;
	}
	m_tStartTime[0] = tStartTime.GetTime() % SECONDSPERDAY;
	m_tStopTime[0] = tStopTime.GetTime() % SECONDSPERDAY;
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnSpinchangeAccessStartTime()
{
	INT  nIndex;
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS))) >= 0)
	{
		for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STOPTIME)); tStartTime != 0 || tStopTime != 0; )
		{
			Timespinbox_SetTime(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STOPTIME), (tStopTime = (tStartTime >= tStopTime) ? ((tStartTime < tStartTime + 1) ? (tStartTime.GetTime() + 1) : tStartTime) : tStopTime));
			break;
		}
		m_tStartTimes[0].SetAt(nIndex, tStartTime);
		m_tStopTimes[0].SetAt(nIndex, tStopTime);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnSpinchangeAccessStopTime()
{
	INT  nIndex;
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_CLIENTS))) >= 0)
	{
		for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STOPTIME)); tStartTime != 0 || tStopTime != 0; )
		{
			Timespinbox_SetTime(GetDlgItem(IDC_TPEP_SERVICE_SECURITY_RESTRICTIONS_STARTTIME), (tStartTime = (tStartTime >= tStopTime) ? ((tStopTime > 0) ? (tStopTime.GetTime() - 1) : 0) : tStartTime));
			break;
		}
		m_tStartTimes[0].SetAt(nIndex, tStartTime);
		m_tStopTimes[0].SetAt(nIndex, tStopTime);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPServiceDialog::OnOK()
{
	CHourglassCursor  cCursor;

	GetTPEPService()->SetPort(m_nPort[0]);
	GetTPEPService()->SetCharset(m_nCharset[0]);
	GetTPEPService()->SetTimeout(m_tTimeout[0]);
	GetTPEPService()->SetBufferSize(m_nBufferSize[0]);
	GetTPEPService()->SetAvailabilityInfo(m_nCode[0], m_tStartTime[0], m_tStopTime[0]);
	GetTPEPService()->SetSecurityInfo(m_szClients[0], m_nAccessCodes[0], m_tStartTimes[0], m_tStopTimes[0]);
	EndDialog(IDOK);
}

BOOL CTPEPServiceDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TPEPSERVICEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTPEPServiceDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TPEPSERVICEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTPEPConnectDialog dialog

IMPLEMENT_DYNCREATE(CTPEPConnectDialog, CLocaleDialog)

CTPEPConnectDialog::CTPEPConnectDialog(CWnd *pParentWnd) : CLocaleDialog(CTPEPConnectDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTPEPConnectDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTPEPConnectDialog::EnumServers()
{
	INT  nComputer;
	INT  nComputers;
	CStringArray  szComputers;

	for (nComputer = 0, nComputers = GetNetworkBrowseService()->EnumNetworkComputers(szComputers), SendDlgItemMessage(IDC_TPEP_CONNECT_SERVER, CB_RESETCONTENT); nComputer < nComputers; nComputer++)
	{
		SendDlgItemMessage(IDC_TPEP_CONNECT_SERVER, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
		continue;
	}
	return((nComputer == nComputers) ? TRUE : FALSE);
}

BOOL CTPEPConnectDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_TPEP_CONNECT_SERVER)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS)->SendMessage(LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

void CTPEPConnectDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTPEPConnectDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTPEPConnectDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTPEPConnectDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTPEPConnectDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PACKETS, OnPackets)
	ON_BN_CLICKED(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PARAMETERS, OnParameters)
	ON_BN_CLICKED(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_ADD, OnAddContents)
	ON_BN_CLICKED(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVE, OnRemoveContents)
	ON_BN_CLICKED(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVEALL, OnRemoveAllContents)
	ON_BN_CLICKED(IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_HOT, OnHotLinkType)
	ON_BN_CLICKED(IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_COLD, OnColdLinkType)
	ON_BN_CLICKED(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_RAW, OnRawDataType)
	ON_BN_CLICKED(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE, OnPIEDataType)
	ON_BN_CLICKED(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_UPDATE, OnUpdateTriggerMode)
	ON_BN_CLICKED(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE, OnChangeTriggerMode)
	ON_BN_CLICKED(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_REALTIME, OnRealtimeDataMode)
	ON_BN_CLICKED(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_RANDOM, OnRandomDataMode)
	ON_BN_CLICKED(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL, OnHistoricalDataMode)
	ON_BN_CLICKED(IDC_TPEP_CONNECT_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TPEP_CONNECT_SERVER, OnEditchangeServer)
	ON_CBN_SELCHANGE(IDC_TPEP_CONNECT_SERVER, OnSelchangeServer)
	ON_CONTROL(TSBXN_CHANGE, IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STARTTIME, OnSpinchangeRetrieveStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STOPTIME, OnSpinchangeRetrieveStopTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTPEPConnectDialog message handlers

BOOL CTPEPConnectDialog::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TPEPCONNECTDIALOG_ID));
	m_szColumns.Add(STRING(IDS_TPEPCONNECTDIALOG_DESCRIPTION));
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nWidth = rColumns.Width() / 5; nColumn < nColumns; nWidth = (++nColumn < nColumns) ? ((4 * rColumns.Width()) / 5) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	EnumServers();
	GetDlgItem(IDC_TPEP_CONNECT_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_SERVER_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_SERVER)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_VIEW)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TPEP_VIEW));
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PACKETS)->EnableWindow((GetTPEPServiceSupport()->GetTPEPSupport() & TPEP_TYPE_PACKETS) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PARAMETERS)->EnableWindow((GetTPEPServiceSupport()->GetTPEPSupport() & TPEP_TYPE_PARAMETERS) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_ADD)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_HOT)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_COLD)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_RAW)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE_NUMBER)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_UPDATE)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_REALTIME)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_RANDOM)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED)->EnableWindow(FALSE);
	CheckDlgButton(IDC_TPEP_CONNECT_VIEW, CheckAccountPrivilege(PRIVILEGE_TPEP_VIEW));
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PACKETS, IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PARAMETERS, (GetTPEPServiceSupport()->GetTPEPSupport() & TPEP_TYPE_PARAMETERS) ? IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PARAMETERS : IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PACKETS);
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_HOT, IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_COLD, IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_HOT);
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_RAW, IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE, IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE);
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_UPDATE, IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE, IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_UPDATE);
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_REALTIME, IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL, IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_REALTIME);
	Spinbox_SetRange(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE_NUMBER), TPEP_DATATYPE_PIE1, TPEP_DATATYPE_PIE3);
	Spinbox_SetPos(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE_NUMBER), TPEP_DATATYPE_PIE1);
	SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED, TBM_SETRANGE, TRUE, MAKELPARAM(TPEP_RETRIEVESPEED_MINIMUM, TPEP_RETRIEVESPEED_MAXIMUM));
	SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED, TBM_SETPOS, TRUE, TPEP_RETRIEVESPEED_MINIMUM);
	SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS, LVM_DELETEALLITEMS);
	return TRUE;
}

void CTPEPConnectDialog::OnPackets()
{
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PACKETS, IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PARAMETERS, IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PACKETS);
	SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_RAW)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPConnectDialog::OnParameters()
{
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PACKETS, IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PARAMETERS, IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PARAMETERS);
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_RAW, IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE, IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE);
	SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_RAW)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE_NUMBER)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPConnectDialog::OnAddContents()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nItem[2];
	INT  nItems[2];
	CString  szItem;
	CStringArray  szIDs;
	CStringArray  szDescriptions;
	CTPEPPacketsListDialog  cPacketsDialog(this);
	CTPEPParametersListDialog  cParametersDialog(this);

	if ((IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PACKETS) && cPacketsDialog.DoModal(szIDs, szDescriptions) == IDOK) || (IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PARAMETERS) && cParametersDialog.DoModal(szIDs, szDescriptions) == IDOK))
	{
		for (nItem[0] = 0, nItems[0] = (szIDs.GetSize() == szDescriptions.GetSize()) ? (INT)szIDs.GetSize() : 0, nIndex = -1; nItem[0] < nItems[0]; nItem[0] = nItem[0] + 1)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPCONNECTDIALOG_ID)) break;
				continue;
			}
			for (nItem[1] = 0, nItems[1] = (nColumn < nColumns) ? (INT)SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS, LVM_GETITEMCOUNT) : -1; nItem[1] < nItems[1]; nItem[1]++)
			{
				if (szIDs.GetAt(nItem[0]) == Listview_GetText(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS), nItem[1], nColumn)) break;
				continue;
			}
			if (nItem[1] == nItems[1])
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPCONNECTDIALOG_ID); )
					{
						szItem = szIDs.GetAt(nItem[0]);
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPCONNECTDIALOG_DESCRIPTION); )
					{
						szItem = szDescriptions.GetAt(nItem[0]);
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS), nItems[1], szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS), nItems[1], nColumn, szItem);
				}
				nIndex = (nIndex >= 0) ? min(nItems[1], nIndex) : nItems[1];
			}
		}
		Listview_SetCurText(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS), max(nIndex, 0));
	}
	if (SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS, LVM_GETITEMCOUNT) > 0)
	{
		GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS)->EnableWindow();
		GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVE)->EnableWindow();
		GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVEALL)->EnableWindow();
		GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS)->SetFocus();
	}
	else
	{
		GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS)->EnableWindow(FALSE);
		GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVEALL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_ADD)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPConnectDialog::OnRemoveContents()
{
	INT  nIndex;
	CHourglassCursor  cCursor;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS))) >= 0)
	{
		if (Listview_DeleteText(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS), nIndex))
		{
			if (!SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS, LVM_GETITEMCOUNT))
			{
				GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS)->EnableWindow(FALSE);
				GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVE)->EnableWindow(FALSE);
				GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVEALL)->EnableWindow(FALSE);
				GetDlgItem(IDOK)->EnableWindow(Check());
				GetDlgItem(IDCANCEL)->SetFocus();
				return;
			}
			Listview_SetCurText(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS), 0);
			GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS)->SetFocus();
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPConnectDialog::OnRemoveAllContents()
{
	CHourglassCursor  cCursor;

	SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
	GetDlgItem(IDCANCEL)->SetFocus();
}

void CTPEPConnectDialog::OnHotLinkType()
{
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_HOT, IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_COLD, IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_HOT);
	SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED, TBM_SETPOS, TRUE, (IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL)) ? ((TPEP_RETRIEVESPEED_MINIMUM + TPEP_RETRIEVESPEED_MAXIMUM) / 2) : TPEP_RETRIEVESPEED_MINIMUM);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE)->EnableWindow((IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_REALTIME) || IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL)) && IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE));
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL));
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL));
}

void CTPEPConnectDialog::OnColdLinkType()
{
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_HOT, IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_COLD, IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_COLD);
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_UPDATE, IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE, IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_UPDATE);
	SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED, TBM_SETPOS, TRUE, TPEP_RETRIEVESPEED_MINIMUM);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED)->EnableWindow(FALSE);
}

void CTPEPConnectDialog::OnRawDataType()
{
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_RAW, IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE, IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_RAW);
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_UPDATE, IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE, IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_UPDATE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE)->EnableWindow(FALSE);
}

void CTPEPConnectDialog::OnPIEDataType()
{
	Spinbox_SetPos(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE_NUMBER), TPEP_DATATYPE_PIE1);
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_RAW, IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE, IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE)->EnableWindow((IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_REALTIME) || IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL)) && IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_HOT));
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE_NUMBER)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE_NUMBER)->SetFocus();
}

void CTPEPConnectDialog::OnUpdateTriggerMode()
{
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_UPDATE, IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE, IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_UPDATE);
}

void CTPEPConnectDialog::OnChangeTriggerMode()
{
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_UPDATE, IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE, IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE);
}

void CTPEPConnectDialog::OnRealtimeDataMode()
{
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_REALTIME, IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL, IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_REALTIME);
	SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED, TBM_SETPOS, TRUE, TPEP_RETRIEVESPEED_MINIMUM);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_HOT) && IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE));
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED)->EnableWindow(FALSE);
}

void CTPEPConnectDialog::OnRandomDataMode()
{
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_REALTIME, IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL, IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_RANDOM);
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_UPDATE, IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE, IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_UPDATE);
	SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED, TBM_SETPOS, TRUE, TPEP_RETRIEVESPEED_MINIMUM);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED)->EnableWindow(FALSE);
}

void CTPEPConnectDialog::OnHistoricalDataMode()
{
	CTimeKey  tTime;

	Timespinbox_SetTime(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STOPTIME), tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STARTTIME), CTimeKey(tTime.GetTime() - TPEPCONNECT_DEFAULTRETRIEVALPERIOD));
	CheckRadioButton(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_REALTIME, IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL, IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL);
	SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED, TBM_SETPOS, TRUE, (IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_HOT)) ? ((TPEP_RETRIEVESPEED_MINIMUM + TPEP_RETRIEVESPEED_MAXIMUM) / 2) : TPEP_RETRIEVESPEED_MINIMUM);
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_CHANGE)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_HOT) && IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE));
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_HOT));
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED)->EnableWindow(IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_HOT));
	GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STARTTIME)->SetFocus();
}

void CTPEPConnectDialog::OnSpinchangeRetrieveStartTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STOPTIME)); tStartTime >= tStopTime; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STOPTIME), CTimeKey(tStartTime.GetTime() + 1));
		break;
	}
}

void CTPEPConnectDialog::OnSpinchangeRetrieveStopTime()
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;

	for (tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STARTTIME)), tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STOPTIME)); tStartTime >= tStopTime; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STARTTIME), CTimeKey(tStopTime.GetTime() - 1));
		break;
	}
}

void CTPEPConnectDialog::OnEditchangeServer()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPConnectDialog::OnSelchangeServer()
{
	SendDlgItemMessage(IDC_TPEP_CONNECT_SERVER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TPEP_CONNECT_SERVER, CB_GETCURSEL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPConnectDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CString  szServer;
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CTPEPWnd  *pTPEPWnd;
	CStringArray  szPackets;
	CStringArray  szParameters;
	CTPEPConnection  cConnection;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TPEP_CONNECT_SERVER)->GetWindowText(szServer);
	tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STARTTIME));
	tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_STOPTIME));
	cConnection.SetType((IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PACKETS)) ? TPEP_TYPE_PACKETS : TPEP_TYPE_PARAMETERS);
	cConnection.SetSpacecraftID((IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PACKETS) || IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PARAMETERS)) ? GetTPEPServiceSupport()->GetTPEPSpacecraftID() : 0);
	cConnection.SetDataMode((IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_REALTIME)) ? TPEP_DATAMODE_REALTIME : ((IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_RANDOM)) ? TPEP_DATAMODE_RANDOM : TPEP_DATAMODE_HISTORY));
	cConnection.SetDataLink((IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_LINKTYPE_COLD)) ? TPEP_DATALINK_COLD : TPEP_DATALINK_HOT);
	cConnection.SetDataType((IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_RAW)) ? TPEP_DATATYPE_RAW : (UINT)(TPEP_DATATYPE_PIE1 + Spinbox_GetPos(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_DATATYPE_PIE_NUMBER)) - 1));
	cConnection.SetTriggerMode((IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_TRIGGERMODE_UPDATE)) ? TPEP_TRIGGERMODE_UPDATE : TPEP_TRIGGERMODE_CHANGE);
	cConnection.SetRetrieveStartTime((IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL)) ? tStartTime : 0);
	cConnection.SetRetrieveStopTime((IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL)) ? tStopTime : 0);
	cConnection.SetRetrieveSpeed((IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_HISTORICAL)) ? (UINT)SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_DATAMODE_SPEED, TBM_GETPOS) : 0);
	for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPCONNECTDIALOG_ID))
			{
				if (IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PACKETS))
				{
					szPackets.Add(Listview_GetText(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS), nItem, nColumn));
					continue;
				}
				if (IsDlgButtonChecked(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS_PARAMETERS))
				{
					szParameters.Add(Listview_GetText(GetDlgItem(IDC_TPEP_CONNECT_PROPERTIES_CONTENTS), nItem, nColumn));
					continue;
				}
				break;
			}
		}
	}
	if (nItems >= 0)
	{
		cConnection.SetPackets(szPackets);
		cConnection.SetParameters(szParameters);
	}
	if ((pTPEPWnd = (IsDlgButtonChecked(IDC_TPEP_CONNECT_VIEW)) ? new CTPEPWnd : (CTPEPWnd *)NULL))
	{
		if (pTPEPWnd->SetType(MAKELONG(DISPLAY_TYPE_TPEP, TPEP_TYPE_SIMPLE)))
		{
			if (pTPEPWnd->SetConnectionProperties(szServer, &cConnection, TRUE))
			{
				if (GetDisplayArea()->AddDisplay(pTPEPWnd))
				{
					EndDialog(IDOK);
					return;
				}
				ReportEvent(SYSTEM_WARNING_TPEP_OPEN_FAILURE);
				EndDialog(IDOK);
				return;
			}
		}
		ReportEvent(SYSTEM_WARNING_TPEP_OPEN_FAILURE);
		EndDialog(IDOK);
		delete pTPEPWnd;
		return;
	}
	if (!IsDlgButtonChecked(IDC_TPEP_CONNECT_VIEW))
	{
		ReportEvent((!GetTPEPService()->AddClientConnection(szServer, &cConnection)) ? SYSTEM_WARNING_TPEP_CONNECT_FAILURE : SYSTEM_NOERROR);
		EndDialog(IDOK);
		return;
	}
	ReportEvent(SYSTEM_WARNING_TPEP_OPEN_FAILURE);
	EndDialog(IDOK);
}

BOOL CTPEPConnectDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TPEPCONNECTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTPEPConnectDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TPEPCONNECTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTPEPClientsDialog dialog

IMPLEMENT_DYNCREATE(CTPEPClientsDialog, CLocaleDialog)

CTPEPClientsDialog::CTPEPClientsDialog(CWnd *pParentWnd) : CLocaleDialog(CTPEPClientsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTPEPClientsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTPEPClientsDialog::Initialize()
{
	return((GetTPEPService()->GetClientConnections(m_szServers[0], m_pConnections[0][0]) >= 0 && GetTPEPService()->GetServerConnections(m_szClients[0], m_pConnections[1][0]) >= 0) ? TRUE : FALSE);
}

VOID CTPEPClientsDialog::EnumConnections()
{
	INT  nColumn;
	INT  nColumns;
	INT  nItem[2];
	INT  nItems[2];
	UINT  nCount[1];
	CHAR  szHost[1024];
	CString  szItem[2];
	CString  szHostComputer;
	CTimeKey  tConnection[2];
	CStringTools  cStringTools;
	CComputerToken  cComputerToken;

	for (nItem[0] = 0, nItems[0] = (INT)m_pConnections[0][0].GetSize(); nItem[0] < nItems[0]; nItem[0]++)
	{
		if (m_szClients[0].GetSize() < m_pConnections[0][0].GetSize() + m_pConnections[1][0].GetSize())
		{
			m_szClients[0].InsertAt(nItem[0], cComputerToken.GetComputerName());
			continue;
		}
		break;
	}
	for (nItem[0] = 0, nItems[0] = (m_szClients[0].GetSize() == m_pConnections[0][0].GetSize() + m_pConnections[1][0].GetSize()) ? nItems[0] : -1, SendDlgItemMessage(IDC_TPEP_CLIENTS_NAMES, LVM_DELETEALLITEMS); nItem[0] < nItems[0]; nItem[0]++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(); nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TPEPCLIENTSDIALOG_SERVERNAME); )
			{
				szItem[0] = m_szServers[0].GetAt(nItem[0]);
				break;
			}
			for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TPEPCLIENTSDIALOG_CLIENTNAME); )
			{
				szItem[0] = m_szClients[0].GetAt(nItem[0]);
				break;
			}
			for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TPEPCLIENTSDIALOG_CONNECTION_OPENTIME); )
			{
				m_pConnections[0][0].GetAt(nItem[0])->GetStatistics(tConnection[0], tConnection[1], nCount[0]);
				szItem[0] = tConnection[0].FormatGmt();
				break;
			}
			for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TPEPCLIENTSDIALOG_CONNECTION_LASTTIME); )
			{
				m_pConnections[0][0].GetAt(nItem[0])->GetStatistics(tConnection[0], tConnection[1], nCount[0]);
				szItem[0] = tConnection[1].FormatGmt();
				break;
			}
			for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TPEPCLIENTSDIALOG_CONNECTION_MESSAGES); )
			{
				m_pConnections[0][0].GetAt(nItem[0])->GetStatistics(tConnection[0], tConnection[1], nCount[0]);
				szItem[0] = cStringTools.ConvertUIntToString(nCount[0]);
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TPEP_CLIENTS_NAMES), nItem[0], szItem[0]);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TPEP_CLIENTS_NAMES), nItem[0], nColumn, szItem[0]);
		}
	}
	for (nItem[1] = 0, nItems[1] = (nItems[0] == SendDlgItemMessage(IDC_TPEP_CLIENTS_NAMES, LVM_GETITEMCOUNT)) ? (INT)m_pConnections[1][0].GetSize() : 0; nItem[1] < nItems[1]; nItem[1]++)
	{
		if (m_szServers[0].GetSize() < m_pConnections[0][0].GetSize() + m_pConnections[1][0].GetSize())
		{
			m_szServers[0].InsertAt(nItems[0] + nItem[1], cComputerToken.GetComputerName());
			continue;
		}
		break;
	}
	gethostname(szHost, sizeof(szHost) / sizeof(CHAR));
#ifndef UNICODE
	szHostComputer = szHost;
#else
	MultiByteToWideChar(CP_ACP, 0, szHost, -1, szHostComputer.GetBufferSetLength((INT)strlen(szHost)), (INT)strlen(szHost) + 1);
	szHostComputer.ReleaseBuffer();
#endif
	for (nItem[1] = 0, nItems[1] = (m_szServers[0].GetSize() == m_pConnections[0][0].GetSize() + m_pConnections[1][0].GetSize()) ? nItems[1] : -1; nItem[1] < nItems[1]; nItem[1]++)
	{
		for (nItem[0] = (m_szServers[0].GetAt(nItems[0] + nItem[1]) != m_szClients[0].GetAt(nItems[0] + nItem[1]) && (m_szServers[0].GetAt(nItems[0] + nItem[1]) != cComputerToken.GetComputerName() || m_szClients[0].GetAt(nItems[0] + nItem[1]) != szHostComputer) && (m_szServers[0].GetAt(nItems[0] + nItem[1]) != szHostComputer || m_szClients[0].GetAt(nItems[0] + nItem[1]) != cComputerToken.GetComputerName())) ? nItems[0] : 0; nItem[0] < nItems[0]; nItem[0]++)
		{
			if (m_pConnections[1][0][nItem[1]]->Compare(m_pConnections[0][0][nItem[0]])) break;
			continue;
		}
		if (nItem[0] < nItems[0])
		{
			m_szServers[0].RemoveAt(nItems[0] + nItem[1]);
			m_szClients[0].RemoveAt(nItems[0] + nItem[1]);
			delete m_pConnections[1][0].GetAt(nItem[1]);
			m_pConnections[1][0].RemoveAt(nItem[1]);
			nItems[1]--;
			nItem[1]--;
			continue;
		}
		for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(); nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TPEPCLIENTSDIALOG_SERVERNAME); )
			{
				szItem[1] = m_szServers[0].GetAt(nItems[0] + nItem[1]);
				break;
			}
			for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TPEPCLIENTSDIALOG_CLIENTNAME); )
			{
				szItem[1] = m_szClients[0].GetAt(nItems[0] + nItem[1]);
				break;
			}
			for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TPEPCLIENTSDIALOG_CONNECTION_OPENTIME); )
			{
				m_pConnections[1][0].GetAt(nItem[1])->GetStatistics(tConnection[0], tConnection[1], nCount[0]);
				szItem[1] = tConnection[0].FormatGmt();
				break;
			}
			for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TPEPCLIENTSDIALOG_CONNECTION_LASTTIME); )
			{
				m_pConnections[1][0].GetAt(nItem[1])->GetStatistics(tConnection[0], tConnection[1], nCount[0]);
				szItem[1] = tConnection[1].FormatGmt();
				break;
			}
			for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TPEPCLIENTSDIALOG_CONNECTION_MESSAGES); )
			{
				m_pConnections[1][0].GetAt(nItem[1])->GetStatistics(tConnection[0], tConnection[1], nCount[0]);
				szItem[1] = cStringTools.ConvertUIntToString(nCount[0]);
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TPEP_CLIENTS_NAMES), nItems[0] + nItem[1], szItem[1]);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TPEP_CLIENTS_NAMES), nItems[0] + nItem[1], nColumn, szItem[1]);
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TPEP_CLIENTS_NAMES), 0);
	GetDlgItem(IDC_TPEP_CLIENTS_NAMES_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TPEP_CLIENTS_NAMES, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_NAMES)->EnableWindow((SendDlgItemMessage(IDC_TPEP_CLIENTS_NAMES, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_CLOSE)->EnableWindow((SendDlgItemMessage(IDC_TPEP_CLIENTS_NAMES, LVM_GETITEMCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TPEP_CLIENTSCHANGE) : FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_CLOSEALL)->EnableWindow((SendDlgItemMessage(IDC_TPEP_CLIENTS_NAMES, LVM_GETITEMCOUNT) > 0) ? CheckAccountPrivilege(PRIVILEGE_TPEP_CLIENTSCHANGE) : FALSE);
	ShowConnectionInfo();
}

VOID CTPEPClientsDialog::ShowConnectionInfo(INT nIndex)
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	UINT  nType;
	UINT  nSpeed;
	UINT  nDataMode;
	UINT  nDataLink;
	UINT  nDataType;
	UINT  nTriggerMode;
	CString  szItem;
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;
	CStringArray  szPackets;
	CStringArray  szParameters;
	CTPEPConnection  *pConnection;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	if ((pConnection = (nIndex < m_pConnections[0][0].GetSize()) ? m_pConnections[0][0].GetAt(nIndex) : m_pConnections[1][0].GetAt((INT)(nIndex - m_pConnections[0][0].GetSize()))) && pConnection->IsInitialized())
	{
		for (nItem = 0, nItems = pConnection->GetPackets(szPackets), nType = pConnection->GetType(), nDataMode = pConnection->GetDataMode(), nDataLink = pConnection->GetDataLink(), nDataType = pConnection->GetDataType(), nTriggerMode = pConnection->GetTriggerMode(), tStartTime = pConnection->GetRetrieveStartTime(), tStopTime = pConnection->GetRetrieveStopTime(), nSpeed = pConnection->GetRetrieveSpeed(), SendDlgItemMessage(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS, LVM_DELETEALLITEMS); nItem < nItems; nItem++)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TPEPCLIENTSDIALOG_CONTENTS_ID); )
				{
					szItem = szPackets.GetAt(nItem);
					break;
				}
				for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TPEPCLIENTSDIALOG_CONTENTS_DESCRIPTION); )
				{
					for (szItem.Empty(); (pDatabaseTMPacket = GetDatabase()->GetTMPackets()->GetAt(GetDatabase()->GetTMPackets()->Find(szPackets.GetAt(nItem)))); )
					{
						szItem = pDatabaseTMPacket->GetDescription();
						break;
					}
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS), nItem, nColumn, szItem);
			}
		}
		for (nItem = 0, nItems = pConnection->GetParameters(szParameters); nItem < nItems; nItem++)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TPEPCLIENTSDIALOG_CONTENTS_ID); )
				{
					szItem = szParameters.GetAt(nItem);
					break;
				}
				for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TPEPCLIENTSDIALOG_CONTENTS_DESCRIPTION); )
				{
					for (szItem.Empty(); (pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(szParameters.GetAt(nItem)))); )
					{
						szItem = pDatabaseTMParameter->GetDescription();
						break;
					}
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS), nItem, nColumn, szItem);
			}
		}
		if (SendDlgItemMessage(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS, LVM_GETITEMCOUNT) > 0)
		{
			Listview_SetCurText(GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS), 0);
			SendDlgItemMessage(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_SPEED, TBM_SETPOS, TRUE, nSpeed);
			CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_LINKTYPE_HOT, (nDataLink == TPEP_DATALINK_HOT) ? TRUE : FALSE);
			CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_LINKTYPE_COLD, (nDataLink == TPEP_DATALINK_COLD) ? TRUE : FALSE);
			CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_RAW, (nDataType == TPEP_DATATYPE_RAW) ? TRUE : FALSE);
			CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_PIE, (nDataType != TPEP_DATATYPE_RAW) ? TRUE : FALSE);
			CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_TRIGGERMODE_UPDATE, (nTriggerMode == TPEP_TRIGGERMODE_UPDATE) ? TRUE : FALSE);
			CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_TRIGGERMODE_CHANGE, (nTriggerMode == TPEP_TRIGGERMODE_CHANGE) ? TRUE : FALSE);
			CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_REALTIME, (nDataMode == TPEP_DATAMODE_REALTIME) ? TRUE : FALSE);
			CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_RANDOM, (nDataMode == TPEP_DATAMODE_RANDOM) ? TRUE : FALSE);
			CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_HISTORICAL, (nDataMode == TPEP_DATAMODE_HISTORY) ? TRUE : FALSE);
			SetDlgItemInt(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_PIE_NUMBER, nDataType);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS_STATIC)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS_PACKETS)->ShowWindow((nType == TPEP_TYPE_PACKETS) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS_PACKETS)->EnableWindow((nType == TPEP_TYPE_PACKETS) ? TRUE : FALSE);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS_PARAMETERS)->ShowWindow((nType == TPEP_TYPE_PARAMETERS) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS_PARAMETERS)->EnableWindow((nType == TPEP_TYPE_PARAMETERS) ? TRUE : FALSE);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_LINKTYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_LINKTYPE_HOT)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_LINKTYPE_COLD)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_RAW)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_PIE)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_PIE_NUMBER)->ShowWindow((nDataType != TPEP_DATATYPE_RAW) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_PIE_NUMBER)->EnableWindow((nDataType != TPEP_DATATYPE_RAW) ? TRUE : FALSE);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_TRIGGERMODE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_TRIGGERMODE_UPDATE)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_TRIGGERMODE_CHANGE)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_REALTIME)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_RANDOM)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_HISTORICAL)->EnableWindow();
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STARTTIME_STATIC)->ShowWindow((nDataMode == TPEP_DATAMODE_HISTORY) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STARTTIME_STATIC)->EnableWindow((nDataMode == TPEP_DATAMODE_HISTORY) ? TRUE : FALSE);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STARTTIME)->ShowWindow((nDataMode == TPEP_DATAMODE_HISTORY) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STARTTIME)->EnableWindow((nDataMode == TPEP_DATAMODE_HISTORY) ? TRUE : FALSE);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STARTTIME)->SetWindowText((nDataMode == TPEP_DATAMODE_HISTORY) ? (LPCTSTR)tStartTime.FormatGmt() : EMPTYSTRING);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STOPTIME_STATIC)->ShowWindow((nDataMode == TPEP_DATAMODE_HISTORY) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STOPTIME_STATIC)->EnableWindow((nDataMode == TPEP_DATAMODE_HISTORY) ? TRUE : FALSE);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STOPTIME)->ShowWindow((nDataMode == TPEP_DATAMODE_HISTORY) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STOPTIME)->EnableWindow((nDataMode == TPEP_DATAMODE_HISTORY) ? TRUE : FALSE);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STOPTIME)->SetWindowText((nDataMode == TPEP_DATAMODE_HISTORY) ? (LPCTSTR)tStopTime.FormatGmt() : EMPTYSTRING);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_SPEED_STATIC)->EnableWindow((nDataMode == TPEP_DATAMODE_HISTORY) ? TRUE : FALSE);
			GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_SPEED)->EnableWindow((nDataMode == TPEP_DATAMODE_HISTORY) ? TRUE : FALSE);
			return;
		}
	}
	SendDlgItemMessage(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS, LVM_DELETEALLITEMS);
	SendDlgItemMessage(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_SPEED, TBM_SETPOS, TRUE);
	CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_LINKTYPE_HOT, FALSE);
	CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_LINKTYPE_COLD, FALSE);
	CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_RAW, FALSE);
	CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_PIE, FALSE);
	CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_TRIGGERMODE_UPDATE, FALSE);
	CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_TRIGGERMODE_CHANGE, FALSE);
	CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_REALTIME, FALSE);
	CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_RANDOM, FALSE);
	CheckDlgButton(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_HISTORICAL, FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS_PACKETS)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS_PACKETS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS_PARAMETERS)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS_PARAMETERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_LINKTYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_LINKTYPE_HOT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_LINKTYPE_COLD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_RAW)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_PIE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_PIE_NUMBER)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_PIE_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_PIE_NUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_TRIGGERMODE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_TRIGGERMODE_UPDATE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_TRIGGERMODE_CHANGE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_REALTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_RANDOM)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_HISTORICAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STARTTIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STARTTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STARTTIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STARTTIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STOPTIME_STATIC)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STOPTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STOPTIME)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_STOPTIME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_SPEED_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_SPEED)->EnableWindow(FALSE);
}

INT CTPEPClientsDialog::CalcColumnExtent(LPCTSTR pszColumn)
{
	CDC  *pDC;
	CFont  *pOldFont;
	CSize  sizeColumn;

	if ((pDC = GetDC()))
	{
		if ((pOldFont = pDC->SelectObject(GetFont())))
		{
			sizeColumn = pDC->GetTextExtent(pszColumn);
			sizeColumn.cx += 8 * GetSystemMetrics(SM_CXEDGE);
			pDC->SelectObject(pOldFont);
			ReleaseDC(pDC);
			return sizeColumn.cx;
		}
		ReleaseDC(pDC);
	}
	return 0;
}

void CTPEPClientsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTPEPClientsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTPEPClientsDialog::PostNcDestroy()
{
	m_szServers[0].RemoveAll();
	m_szServers[1].RemoveAll();
	m_szClients[0].RemoveAll();
	m_szClients[1].RemoveAll();
	m_szColumns[0].RemoveAll();
	m_szColumns[1].RemoveAll();
	m_pConnections[0][0].RemoveAll();
	m_pConnections[0][1].RemoveAll();
	m_pConnections[1][0].RemoveAll();
	m_pConnections[1][1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTPEPClientsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTPEPClientsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TPEP_CLIENTS_CLOSE, OnClose)
	ON_BN_CLICKED(IDC_TPEP_CLIENTS_CLOSEALL, OnCloseAll)
	ON_BN_CLICKED(IDC_TPEP_CLIENTS_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTPEPClientsDialog message handlers

BOOL CTPEPClientsDialog::OnInitDialog()
{
	INT  nWidth[2];
	INT  nColumn[2];
	INT  nColumns[2];
	CRect  rColumns[2];
	CString  szMessages;
	CStringTools  cStringTools;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns[0].Add(STRING(IDS_TPEPCLIENTSDIALOG_SERVERNAME));
	m_szColumns[0].Add(STRING(IDS_TPEPCLIENTSDIALOG_CLIENTNAME));
	m_szColumns[0].Add(STRING(IDS_TPEPCLIENTSDIALOG_CONNECTION_OPENTIME));
	m_szColumns[0].Add(STRING(IDS_TPEPCLIENTSDIALOG_CONNECTION_LASTTIME));
	m_szColumns[0].Add(STRING(IDS_TPEPCLIENTSDIALOG_CONNECTION_MESSAGES));
	m_szColumns[1].Add(STRING(IDS_TPEPCLIENTSDIALOG_CONTENTS_ID));
	m_szColumns[1].Add(STRING(IDS_TPEPCLIENTSDIALOG_CONTENTS_DESCRIPTION));
	GetDlgItem(IDC_TPEP_CLIENTS_NAMES)->GetClientRect(rColumns[0]);
	GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS)->GetClientRect(rColumns[1]);
	SendDlgItemMessage(IDC_TPEP_CLIENTS_NAMES, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	SendDlgItemMessage(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	SendDlgItemMessage(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_SPEED, TBM_SETRANGE, TRUE, MAKELPARAM(TPEP_RETRIEVESPEED_MINIMUM, TPEP_RETRIEVESPEED_MAXIMUM));
	for (nColumn[0] = 0, nColumns[0] = (INT)m_szColumns[0].GetSize(), nWidth[0] = rColumns[0].Width() / 3, szMessages = cStringTools.ConvertUIntToString(-1); nColumn[0] < nColumns[0]; nWidth[0] = (++nColumn[0] < nColumns[0]) ? ((m_szColumns[0].GetAt(nColumn[0]) != STRING(IDS_TPEPCLIENTSDIALOG_SERVERNAME) && m_szColumns[0].GetAt(nColumn[0]) != STRING(IDS_TPEPCLIENTSDIALOG_CLIENTNAME)) ? ((m_szColumns[0].GetAt(nColumn[0]) == STRING(IDS_TPEPCLIENTSDIALOG_CONNECTION_OPENTIME) || m_szColumns[0].GetAt(nColumn[0]) == STRING(IDS_TPEPCLIENTSDIALOG_CONNECTION_LASTTIME)) ? max(CalcColumnExtent(m_szColumns[0].GetAt(nColumn[0])), CalcColumnExtent(CTimeKey().FormatGmt())) : max(CalcColumnExtent(m_szColumns[0].GetAt(nColumn[0])), CalcColumnExtent(szMessages))) : (rColumns[0].Width() / 3)) : nWidth[0])
	{
		Listview_InsertColumn(GetDlgItem(IDC_TPEP_CLIENTS_NAMES), nColumn[0], m_szColumns[0].GetAt(nColumn[0]), nWidth[0]);
		continue;
	}
	for (nColumn[1] = 0, nColumns[1] = (INT)m_szColumns[1].GetSize(), nWidth[1] = rColumns[1].Width() / 6; nColumn[1] < nColumns[1]; nWidth[1] = (++nColumn[1] < nColumns[1]) ? ((5 * rColumns[1].Width()) / 6) : nWidth[1])
	{
		Listview_InsertColumn(GetDlgItem(IDC_TPEP_CLIENTS_PROPERTIES_CONTENTS), nColumn[1], m_szColumns[1].GetAt(nColumn[1]), nWidth[1]);
		continue;
	}
	EnumConnections();
	AccessControl(IDC_TPEP_CLIENTS_PROPERTIES_LINKTYPE_HOT, FALSE);
	AccessControl(IDC_TPEP_CLIENTS_PROPERTIES_LINKTYPE_COLD, FALSE);
	AccessControl(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_RAW, FALSE);
	AccessControl(IDC_TPEP_CLIENTS_PROPERTIES_DATATYPE_PIE, FALSE);
	AccessControl(IDC_TPEP_CLIENTS_PROPERTIES_TRIGGERMODE_UPDATE, FALSE);
	AccessControl(IDC_TPEP_CLIENTS_PROPERTIES_TRIGGERMODE_CHANGE, FALSE);
	AccessControl(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_REALTIME, FALSE);
	AccessControl(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_RANDOM, FALSE);
	AccessControl(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_HISTORICAL, FALSE);
	AccessControl(IDC_TPEP_CLIENTS_PROPERTIES_DATAMODE_SPEED, FALSE);
	GetDlgItem(IDC_TPEP_CLIENTS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TPEP_CLIENTS_NAMES)->SetFocus();
	return FALSE;
}

BOOL CTPEPClientsDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TPEP_CLIENTS_NAMES)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) ShowConnectionInfo(pNotifyListView->iItem);
		if (pNotifyListView->hdr.code == LVN_DELETEALLITEMS) ShowConnectionInfo();
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

void CTPEPClientsDialog::OnClose()
{
	INT  nConnection;
	INT  nConnections;
	CHourglassCursor  cCursor;

	if ((nConnection = Listview_GetCurText(GetDlgItem(IDC_TPEP_CLIENTS_NAMES))) >= 0)
	{
		if ((nConnections = (INT)m_pConnections[0][0].GetSize()) <= nConnection)
		{
			m_pConnections[1][1].Add(m_pConnections[1][0].GetAt(nConnection - nConnections));
			m_pConnections[1][0].RemoveAt(nConnection - nConnections);
		}
		else
		{
			m_pConnections[0][1].Add(m_pConnections[0][0].GetAt(nConnection));
			m_pConnections[0][0].RemoveAt(nConnection);
		}
		m_szServers[1].Add(m_szServers[0].GetAt(nConnection));
		m_szClients[1].Add(m_szClients[0].GetAt(nConnection));
		m_szServers[0].RemoveAt(nConnection);
		m_szClients[0].RemoveAt(nConnection);
		EnumConnections();
	}
	if (!SendDlgItemMessage(IDC_TPEP_CLIENTS_NAMES, LVM_GETITEMCOUNT))
	{
		GetDlgItem(IDOK)->EnableWindow();
		GetDlgItem(IDOK)->SetFocus();
		return;
	}
	if (nConnection < 0)
	{
		GetDlgItem(IDC_TPEP_CLIENTS_NAMES)->SetFocus();
		return;
	}
	GetDlgItem(IDC_TPEP_CLIENTS_NAMES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow();
}

void CTPEPClientsDialog::OnCloseAll()
{
	CHourglassCursor  cCursor;

	for (m_pConnections[0][1].Copy(&m_pConnections[0][0]), m_pConnections[1][1].Copy(&m_pConnections[1][0]), m_pConnections[0][0].RemoveAll(), m_pConnections[1][0].RemoveAll(), m_szServers[1].Copy(m_szServers[0]), m_szClients[1].Copy(m_szClients[0]), m_szServers[0].RemoveAll(), m_szClients[0].RemoveAll(); TRUE; )
	{
		EnumConnections();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow();
	GetDlgItem(IDOK)->SetFocus();
}

void CTPEPClientsDialog::OnOK()
{
	INT  nConnection[2];
	INT  nConnections[2];
	CHourglassCursor  cCursor;

	for (nConnection[0] = 0, nConnections[0] = (INT)m_pConnections[0][1].GetSize(); nConnection[0] < nConnections[0]; nConnection[0]++)
	{
		ReportEvent((!GetTPEPService()->RemoveClientConnection(m_szServers[1].GetAt(nConnection[0]), m_pConnections[0][1].GetAt(nConnection[0]))) ? SYSTEM_WARNING_TPEP_CLOSE_FAILURE : SYSTEM_NOERROR);
		continue;
	}
	for (nConnection[1] = 0, nConnections[1] = (INT)m_pConnections[1][1].GetSize(); nConnection[1] < nConnections[1]; nConnection[1]++)
	{
		ReportEvent((!GetTPEPService()->RemoveServerConnection(m_szClients[1].GetAt(nConnections[0] + nConnection[1]), m_pConnections[1][1].GetAt(nConnection[1]))) ? SYSTEM_WARNING_TPEP_CLOSE_FAILURE : SYSTEM_NOERROR);
		continue;
	}
	EndDialog(IDOK);
}

BOOL CTPEPClientsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TPEPCLIENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTPEPClientsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TPEPCLIENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTPEPClientAddressesDialog dialog

IMPLEMENT_DYNCREATE(CTPEPClientAddressesDialog, CLocaleDialog)

CTPEPClientAddressesDialog::CTPEPClientAddressesDialog(CWnd *pParentWnd) : CLocaleDialog(CTPEPClientAddressesDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTPEPClientAddressesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTPEPClientAddressesDialog::DoModal(CStringArray &szAddresses)
{
	INT  nResult;

	for (m_szAddresses.Copy(szAddresses); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		szAddresses.Copy(m_szAddresses);
		break;
	}
	return nResult;
}

BOOL CTPEPClientAddressesDialog::EnumComputers()
{
	INT  nComputer;
	INT  nComputers;
	CStringArray  szComputers;

	for (nComputer = 0, nComputers = GetNetworkBrowseService()->EnumNetworkComputers(szComputers), SendDlgItemMessage(IDC_TPEP_CLIENTADDRESSES_NAME, CB_RESETCONTENT); nComputer < nComputers; nComputer++)
	{
		SendDlgItemMessage(IDC_TPEP_CLIENTADDRESSES_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szComputers.GetAt(nComputer));
		continue;
	}
	return((nComputer == nComputers) ? TRUE : FALSE);
}

BOOL CTPEPClientAddressesDialog::CheckName(LPCTSTR pszName) CONST
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (lstrlen(pszName) > 0) ? (INT)m_szColumns.GetSize() : -1; nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPCLIENTADDRESSESDIALOG_NAME)) break;
		continue;
	}
	for (nItem = 0, nItems = (nColumn < nColumns) ? (INT)GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST)->SendMessage(LVM_GETITEMCOUNT) : -1; nItem < nItems; nItem++)
	{
		if (!Listview_GetText(GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST), nItem, nColumn).CompareNoCase(pszName)) break;
		continue;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTPEPClientAddressesDialog::CheckAddress(LPCTSTR pszAddress, BOOL bSyntax) CONST
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;

	if (bSyntax)
	{
		return(GetNetworkBrowseService()->IsValidAddress(pszAddress) != AF_UNSPEC);
	}
	for (nColumn = 0, nColumns = (lstrlen(pszAddress) > 0) ? (INT)m_szColumns.GetSize() : -1; nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPCLIENTADDRESSESDIALOG_ADDRESS)) break;
		continue;
	}
	for (nItem = 0, nItems = (nColumn < nColumns) ? (INT)GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST)->SendMessage(LVM_GETITEMCOUNT) : -1; nItem < nItems; nItem++)
	{
		if (Listview_GetText(GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST), nItem, nColumn) == pszAddress) break;
		continue;
	}
	return((nItem == nItems) ? (GetNetworkBrowseService()->IsValidAddress(pszAddress) != AF_UNSPEC) : FALSE);
}

BOOL CTPEPClientAddressesDialog::IsModified() CONST
{
	return((GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST)->SendMessage(LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTPEPClientAddressesDialog::Check(BOOL bModified) CONST
{
	CString  szName;
	CString  szAddress;

	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESS)->GetWindowText(szAddress);
	return((bModified || (CheckName(szName) && CheckAddress(szAddress))) ? (!bModified || IsModified()) : FALSE);
}

void CTPEPClientAddressesDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTPEPClientAddressesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTPEPClientAddressesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTPEPClientAddressesDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTPEPClientAddressesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TPEP_CLIENTADDRESSES_ADDADDRESS, OnAddAddress)
	ON_BN_CLICKED(IDC_TPEP_CLIENTADDRESSES_REMOVEADDRESS, OnRemoveAddress)
	ON_BN_CLICKED(IDC_TPEP_CLIENTADDRESSES_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TPEP_CLIENTADDRESSES_NAME, OnEditchangeName)
	ON_CBN_SELCHANGE(IDC_TPEP_CLIENTADDRESSES_NAME, OnSelchangeName)
	ON_EN_CHANGE(IDC_TPEP_CLIENTADDRESSES_ADDRESS, OnEditchangeAddress)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTPEPClientAddressesDialog message handlers

BOOL CTPEPClientAddressesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TPEPCLIENTADDRESSESDIALOG_NAME));
	m_szColumns.Add(STRING(IDS_TPEPCLIENTADDRESSESDIALOG_ADDRESS));
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST), nColumn, m_szColumns.GetAt(nColumn), rColumns.Width() / 2);
		continue;
	}
	EnumComputers();
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_NAME)->EnableWindow();
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESS)->EnableWindow();
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSSYNTAX_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_NAME)->SetFocus();
	return FALSE;
}

void CTPEPClientAddressesDialog::OnEditchangeName()
{
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDADDRESS)->EnableWindow(Check(FALSE));
}

void CTPEPClientAddressesDialog::OnEditchangeAddress()
{
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDADDRESS)->EnableWindow(Check(FALSE));
}

void CTPEPClientAddressesDialog::OnSelchangeName()
{
	SendDlgItemMessage(IDC_TPEP_CLIENTADDRESSES_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TPEP_CLIENTADDRESSES_NAME, CB_GETCURSEL));
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDADDRESS)->EnableWindow(Check(FALSE));
}

void CTPEPClientAddressesDialog::OnAddAddress()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CString  szName;
	CString  szAddress;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESS)->GetWindowText(szAddress);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nIndex = (INT)SendDlgItemMessage(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST, LVM_GETITEMCOUNT); nColumn < nColumns; nColumn++)
	{
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPCLIENTADDRESSESDIALOG_NAME); )
		{
			szItem = szName;
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPCLIENTADDRESSESDIALOG_ADDRESS); )
		{
			szItem = (CheckAddress(szAddress, TRUE)) ? (LPCTSTR)szAddress : EMPTYSTRING;
			break;
		}
		if (!nColumn)
		{
			Listview_InsertText(GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST), nIndex, szItem);
			continue;
		}
		Listview_SetText(GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST), nIndex, nColumn, szItem);
	}
	for (; nIndex >= 0; )
	{
		Listview_SetCurText(GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST), nIndex);
		break;
	}
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESS)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDADDRESS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_REMOVEADDRESS)->EnableWindow((SendDlgItemMessage(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST)->EnableWindow((SendDlgItemMessage(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPClientAddressesDialog::OnRemoveAddress()
{
	INT  nIndex;
	CHourglassCursor  cCursor;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST))) >= 0)
	{
		for (; Listview_DeleteText(GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST), nIndex); )
		{
			Listview_SetCurText(GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST), 0);
			break;
		}
	}
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESS)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDADDRESS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_REMOVEADDRESS)->EnableWindow((SendDlgItemMessage(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST)->EnableWindow((SendDlgItemMessage(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_CLIENTADDRESSES_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPClientAddressesDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CString  szAddress;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPCLIENTADDRESSESDIALOG_NAME))
			{
				szAddress = Listview_GetText(GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST), nItem, nColumn);
				continue;
			}
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPCLIENTADDRESSESDIALOG_ADDRESS))
			{
				szAddress += EOL + Listview_GetText(GetDlgItem(IDC_TPEP_CLIENTADDRESSES_ADDRESSLIST), nItem, nColumn);
				continue;
			}
		}
		m_szAddresses.Add(szAddress);
	}
	CLocaleDialog::OnOK();
}

BOOL CTPEPClientAddressesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TPEPCLIENTADDRESSESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTPEPClientAddressesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TPEPCLIENTADDRESSESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTPEPPacketsListDialog dialog

IMPLEMENT_DYNCREATE(CTPEPPacketsListDialog, CLocaleDialog)

CTPEPPacketsListDialog::CTPEPPacketsListDialog(CWnd *pParentWnd) : CLocaleDialog(CTPEPPacketsListDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTPEPPacketsListDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTPEPPacketsListDialog::DoModal(CStringArray &szPacketIDs, CStringArray &szPacketDescriptions)
{
	INT  nResult;

	for (m_szPacketIDs.Copy(szPacketIDs), m_szPacketDescriptions.Copy(szPacketDescriptions); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		szPacketIDs.Copy(m_szPacketIDs);
		szPacketDescriptions.Copy(m_szPacketDescriptions);
		break;
	}
	return nResult;
}

BOOL CTPEPPacketsListDialog::EnumPackets()
{
	INT  nPacket;
	INT  nPackets;
	CString  szPacket;
	CDatabaseTMPacket  *pDatabaseTMPacket;

	for (nPacket = 0, nPackets = (INT)GetDatabase()->GetTMPackets()->GetSize(); nPacket < nPackets; nPacket++)
	{
		if ((pDatabaseTMPacket = GetDatabase()->GetTMPackets()->GetAt(nPacket)) && pDatabaseTMPacket->GetDataSize() > 1)
		{
			szPacket.Format(STRING(IDS_TPEPPACKETSDIALOG_LISTFORMAT), (LPCTSTR)pDatabaseTMPacket->GetDescription(), (LPCTSTR)pDatabaseTMPacket->GetTag());
			SendDlgItemMessage(IDC_TPEP_PACKETSLIST_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szPacket);
			continue;
		}
	}
	SendDlgItemMessage(IDC_TPEP_PACKETSLIST_NAME, CB_SETCURSEL);
	return((SendDlgItemMessage(IDC_TPEP_PACKETSLIST_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTPEPPacketsListDialog::EnumProfiles()
{
	INT  nProfile;
	INT  nProfiles;
	CTPEPDataProfile  *pProfile;

	for (nProfile = 0, nProfiles = (GetTPEPService()->GetPacketProfiles(&m_pPacketProfiles[0]) && GetTPEPService()->GetPacketProfiles(&m_pPacketProfiles[1])) ? (INT)m_pPacketProfiles[0].GetSize() : 0; nProfile < nProfiles; nProfile++)
	{
		if ((pProfile = m_pPacketProfiles[0].GetAt(nProfile))) SendDlgItemMessage(IDC_TPEP_PACKETSLIST_PROFILES_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pProfile->GetName());
		continue;
	}
	SendDlgItemMessage(IDC_TPEP_PACKETSLIST_PROFILES_NAME, CB_SETCURSEL, (WPARAM)-1);
	return((SendDlgItemMessage(IDC_TPEP_PACKETSLIST_PROFILES_NAME, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
}

BOOL CTPEPPacketsListDialog::IsModified() CONST
{
	return((GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT) > 0 || !m_pPacketProfiles[0].Compare(&m_pPacketProfiles[1])) ? TRUE : FALSE);
}

BOOL CTPEPPacketsListDialog::Check(BOOL bModified) CONST
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	INT  nPacket;
	INT  nPackets;
	CString  szProfile;
	CStringArray  szPackets;
	CTPEPDataProfile  *pProfile;

	GetDlgItem(IDC_TPEP_PACKETSLIST_PROFILES_NAME)->GetWindowText(szProfile);
	for (nPacket = nPackets = -1; (pProfile = m_pPacketProfiles[0].GetAt(m_pPacketProfiles[0].Find(szProfile))); )
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPACKETSDIALOG_ID)) break;
			continue;
		}
		for (nPacket = 0, nPackets = (pProfile->GetIDs(szPackets) == GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT)) ? (INT)szPackets.GetSize() : -1; nPacket < nPackets; nPacket++)
		{
			for (nItem = 0, nItems = (INT)GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT); nItem < nItems; nItem++)
			{
				if (szPackets.GetAt(nPacket) == Listview_GetText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), nItem, nColumn)) break;
				continue;
			}
			if (nItem == nItems) break;
		}
		break;
	}
	GetDlgItem(IDC_TPEP_PACKETSLIST_PROFILES)->EnableWindow((GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT) > 0 || m_pPacketProfiles[0].GetSize() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_PACKETSLIST_PROFILES_NAME_STATIC)->EnableWindow((GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT) > 0 || m_pPacketProfiles[0].GetSize() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_PACKETSLIST_PROFILES_NAME)->EnableWindow((GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT) > 0 || m_pPacketProfiles[0].GetSize() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_PACKETSLIST_PROFILES_SAVE)->EnableWindow((GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT) > 0 && szProfile.GetLength() > 0 && nPacket == nPackets  &&  nPackets < 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_PACKETSLIST_PROFILES_MODIFY)->EnableWindow((GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT) > 0 && szProfile.GetLength() > 0 && nPacket != nPackets) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_PACKETSLIST_PROFILES_DELETE)->EnableWindow((GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT) > 0 && szProfile.GetLength() > 0 && (nPacket != nPackets || nPackets >= 0)) ? TRUE : FALSE);
	return(!bModified || IsModified());
}

void CTPEPPacketsListDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTPEPPacketsListDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTPEPPacketsListDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_pPacketProfiles[0].RemoveAll();
	m_pPacketProfiles[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTPEPPacketsListDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTPEPPacketsListDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TPEP_PACKETSLIST_ADD, OnAddPacket)
	ON_BN_CLICKED(IDC_TPEP_PACKETSLIST_REMOVE, OnRemovePacket)
	ON_BN_CLICKED(IDC_TPEP_PACKETSLIST_PROFILES_SAVE, OnSaveProfile)
	ON_BN_CLICKED(IDC_TPEP_PACKETSLIST_PROFILES_MODIFY, OnModifyProfile)
	ON_BN_CLICKED(IDC_TPEP_PACKETSLIST_PROFILES_DELETE, OnDeleteProfile)
	ON_BN_CLICKED(IDC_TPEP_PACKETSLIST_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TPEP_PACKETSLIST_PROFILES_NAME, OnEditchangeProfile)
	ON_CBN_SELCHANGE(IDC_TPEP_PACKETSLIST_NAME, OnSelchangePacket)
	ON_CBN_SELCHANGE(IDC_TPEP_PACKETSLIST_PROFILES_NAME, OnSelchangeProfile)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTPEPPacketsListDialog message handlers

BOOL CTPEPPacketsListDialog::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TPEPPACKETSDIALOG_ID));
	m_szColumns.Add(STRING(IDS_TPEPPACKETSDIALOG_DESCRIPTION));
	GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_TPEP_PACKETSLIST_MEMBERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nWidth = rColumns.Width() / 5; nColumn < nColumns; nWidth = (++nColumn < nColumns) ? ((4 * rColumns.Width()) / 5) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	EnumPackets();
	EnumProfiles();
	GetDlgItem(IDC_TPEP_PACKETSLIST_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TPEP_PACKETSLIST_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_PACKETSLIST_NAME)->EnableWindow();
	GetDlgItem(IDC_TPEP_PACKETSLIST_ADD)->EnableWindow();
	GetDlgItem(IDC_TPEP_PACKETSLIST_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
	return FALSE;
}

void CTPEPPacketsListDialog::OnAddPacket()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nPacket;
	INT  nPackets;
	CString  szItem;
	CString  szPacket[2];
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TPEP_PACKETSLIST_NAME)->GetWindowText(szPacket[0]);
	for (nPacket = 0, nPackets = (INT)GetDatabase()->GetTMPackets()->GetSize(); nPacket < nPackets; nPacket++)
	{
		if ((pDatabaseTMPacket = GetDatabase()->GetTMPackets()->GetAt(nPacket)) && pDatabaseTMPacket->GetDataSize() > 1)
		{
			for (szPacket[1].Format(STRING(IDS_TPEPPACKETSDIALOG_LISTFORMAT), (LPCTSTR)pDatabaseTMPacket->GetDescription(), (LPCTSTR)pDatabaseTMPacket->GetTag()); szPacket[0] == szPacket[1]; )
			{
				szPacket[0] = pDatabaseTMPacket->GetTag();
				szPacket[1] = pDatabaseTMPacket->GetDescription();
				break;
			}
			if (szPacket[0] == pDatabaseTMPacket->GetTag()) break;
		}
	}
	for (nColumn = 0, nColumns = (nPacket < nPackets) ? (INT)m_szColumns.GetSize() : 0, nIndex = (INT)SendDlgItemMessage(IDC_TPEP_PACKETSLIST_MEMBERS, LVM_GETITEMCOUNT); nColumn < nColumns; nColumn++)
	{
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPACKETSDIALOG_ID); )
		{
			szItem = szPacket[0];
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPACKETSDIALOG_DESCRIPTION); )
		{
			szItem = szPacket[1];
			break;
		}
		if (!nColumn)
		{
			Listview_InsertText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), nIndex, szItem);
			continue;
		}
		Listview_SetText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), nIndex, nColumn, szItem);
	}
	if (SendDlgItemMessage(IDC_TPEP_PACKETSLIST_MEMBERS, LVM_GETITEMCOUNT) > 0)
	{
		Listview_SetCurText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), nIndex);
		GetDlgItem(IDC_TPEP_PACKETSLIST_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TPEP_PACKETSLIST_REMOVE)->EnableWindow();
		GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS)->EnableWindow();
	}
	GetDlgItem(IDC_TPEP_PACKETSLIST_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPPacketsListDialog::OnRemovePacket()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	CString  szItem[2];
	CString  szPacket[2];
	CHourglassCursor  cCursor;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS))) >= 0)
	{
		if (Listview_DeleteText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), nIndex))
		{
			if ((nItems = (INT)SendDlgItemMessage(IDC_TPEP_PACKETSLIST_MEMBERS, LVM_GETITEMCOUNT)) > 0)
			{
				for (nItem = 0, GetDlgItem(IDC_TPEP_PACKETSLIST_NAME)->GetWindowText(szPacket[0]); nItem < nItems; nItem++)
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPACKETSDIALOG_ID); )
						{
							szItem[0] = Listview_GetText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), 0, nColumn);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPACKETSDIALOG_DESCRIPTION); )
						{
							szItem[1] = Listview_GetText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), 0, nColumn);
							break;
						}
					}
					szPacket[1].Format(STRING(IDS_TPEPPACKETSDIALOG_LISTFORMAT), (LPCTSTR)szItem[1], (LPCTSTR)szItem[0]);
					if (szPacket[0] == szPacket[1]) break;
				}
				Listview_SetCurText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), 0);
				GetDlgItem(IDC_TPEP_PACKETSLIST_ADD)->EnableWindow((nItem == nItems) ? TRUE : FALSE);
				GetDlgItem(IDC_TPEP_PACKETSLIST_REMOVE)->EnableWindow();
				GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS)->EnableWindow();
			}
			else
			{
				GetDlgItem(IDC_TPEP_PACKETSLIST_ADD)->EnableWindow();
				GetDlgItem(IDC_TPEP_PACKETSLIST_REMOVE)->EnableWindow(FALSE);
				GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS)->EnableWindow(FALSE);
			}
		}
	}
	GetDlgItem(IDC_TPEP_PACKETSLIST_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPPacketsListDialog::OnSaveProfile()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	CString  szProfile;
	CStringArray  szIDs;
	CTPEPDataProfile  *pProfile;
	CHourglassCursor  cCursor;

	if ((pProfile = new CTPEPDataProfile))
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPACKETSDIALOG_ID)) break;
			continue;
		}
		for (nItem = 0, nItems = (nColumn < nColumns) ? (INT)SendDlgItemMessage(IDC_TPEP_PACKETSLIST_MEMBERS, LVM_GETITEMCOUNT) : 0; nItem < nItems; nItem++)
		{
			szIDs.Add(Listview_GetText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), nItem, nColumn));
			continue;
		}
		for (GetDlgItem(IDC_TPEP_PACKETSLIST_PROFILES_NAME)->GetWindowText(szProfile), pProfile->SetName(szProfile), pProfile->SetIDs(szIDs); (nIndex = (nColumn < nColumns) ? m_pPacketProfiles[0].Add(pProfile) : -1) >= 0; )
		{
			if (SendDlgItemMessage(IDC_TPEP_PACKETSLIST_PROFILES_NAME, CB_INSERTSTRING, nIndex, (LPARAM)(LPCTSTR)szProfile) >= 0)
			{
				SendDlgItemMessage(IDC_TPEP_PACKETSLIST_PROFILES_NAME, CB_SETCURSEL, nIndex);
				break;
			}
			m_pPacketProfiles[0].RemoveAt(nIndex);
			break;
		}
		for (; nIndex < 0; )
		{
			delete pProfile;
			break;
		}
	}
	SendDlgItemMessage(IDC_TPEP_PACKETSLIST_PROFILES_NAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TPEP_PACKETSLIST_PROFILES_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPPacketsListDialog::OnModifyProfile()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CString  szProfile;
	CStringArray  szIDs;
	CTPEPDataProfile  *pProfile;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TPEP_PACKETSLIST_PROFILES_NAME)->GetWindowText(szProfile);
	if ((pProfile = m_pPacketProfiles[0].GetAt(m_pPacketProfiles[0].Find(szProfile))))
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPACKETSDIALOG_ID)) break;
			continue;
		}
		for (nItem = 0, nItems = (nColumn < nColumns) ? (INT)SendDlgItemMessage(IDC_TPEP_PACKETSLIST_MEMBERS, LVM_GETITEMCOUNT) : 0; nItem < nItems; nItem++)
		{
			szIDs.Add(Listview_GetText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), nItem, nColumn));
			continue;
		}
		if (nColumn < nColumns)
		{
			pProfile->SetName(szProfile);
			pProfile->SetIDs(szIDs);
		}
	}
	SendDlgItemMessage(IDC_TPEP_PACKETSLIST_PROFILES_NAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TPEP_PACKETSLIST_PROFILES_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPPacketsListDialog::OnDeleteProfile()
{
	INT  nIndex;
	CString  szProfile;
	CTPEPDataProfile  *pProfile;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TPEP_PACKETSLIST_PROFILES_NAME)->GetWindowText(szProfile);
	if ((pProfile = m_pPacketProfiles[0].GetAt((nIndex = m_pPacketProfiles[0].Find(szProfile)))))
	{
		if (SendDlgItemMessage(IDC_TPEP_PACKETSLIST_PROFILES_NAME, CB_DELETESTRING, nIndex) != CB_ERR)
		{
			GetDlgItem(IDC_TPEP_PACKETSLIST_PROFILES_NAME)->SetWindowText(EMPTYSTRING);
			m_pPacketProfiles[0].RemoveAt(nIndex);
			delete pProfile;
		}
	}
	SendDlgItemMessage(IDC_TPEP_PACKETSLIST_PROFILES_NAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TPEP_PACKETSLIST_PROFILES_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPPacketsListDialog::OnEditchangeProfile()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPPacketsListDialog::OnSelchangePacket()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CString  szItem[2];
	CString  szPacket[2];

	GetDlgItem(IDC_TPEP_PACKETSLIST_NAME)->GetWindowText(szPacket[0]);
	for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TPEP_PACKETSLIST_MEMBERS, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPACKETSDIALOG_ID); )
			{
				szItem[0] = Listview_GetText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), nItem, nColumn);
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPACKETSDIALOG_DESCRIPTION); )
			{
				szItem[1] = Listview_GetText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), nItem, nColumn);
				break;
			}
		}
		szPacket[1].Format(STRING(IDS_TPEPPACKETSDIALOG_LISTFORMAT), (LPCTSTR)szItem[1], (LPCTSTR)szItem[0]);
		if (szPacket[0] == szPacket[1]) break;
	}
	GetDlgItem(IDC_TPEP_PACKETSLIST_ADD)->EnableWindow((nItem == nItems) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPPacketsListDialog::OnSelchangeProfile()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nPacket;
	INT  nPackets;
	BOOL  bPacket;
	CString  szItem;
	CString  szProfile;
	CString  szPacket[2];
	CStringArray  szPackets;
	CTPEPDataProfile  *pProfile;
	CDatabaseTMPacket  *pDatabaseTMPacket;

	GetDlgItem(IDC_TPEP_PACKETSLIST_NAME)->GetWindowText(szPacket[0]);
	for (szProfile = Combobox_GetText(GetDlgItem(IDC_TPEP_PACKETSLIST_PROFILES_NAME), (INT)SendDlgItemMessage(IDC_TPEP_PACKETSLIST_PROFILES_NAME, CB_GETCURSEL)), SendDlgItemMessage(IDC_TPEP_PACKETSLIST_PROFILES_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TPEP_PACKETSLIST_PROFILES_NAME, CB_GETCURSEL)); (pProfile = m_pPacketProfiles[0].GetAt((INT)SendDlgItemMessage(IDC_TPEP_PACKETSLIST_PROFILES_NAME, CB_GETCURSEL))); )
	{
		for (nPacket = 0, nPackets = pProfile->GetIDs(szPackets), SendDlgItemMessage(IDC_TPEP_PACKETSLIST_MEMBERS, LVM_DELETEALLITEMS), bPacket = FALSE; nPacket < nPackets; nPacket++)
		{
			if ((pDatabaseTMPacket = GetDatabase()->GetTMPackets()->GetAt(GetDatabase()->GetTMPackets()->Find(szPackets.GetAt(nPacket)))) != (CDatabaseTMPacket *)NULL)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nIndex = (INT)SendDlgItemMessage(IDC_TPEP_PACKETSLIST_MEMBERS, LVM_GETITEMCOUNT); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPACKETSDIALOG_ID); )
					{
						szItem = pDatabaseTMPacket->GetTag();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPACKETSDIALOG_DESCRIPTION); )
					{
						szItem = pDatabaseTMPacket->GetDescription();
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), nIndex, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), nIndex, nColumn, szItem);
				}
				szPacket[1].Format(STRING(IDS_TPEPPACKETSDIALOG_LISTFORMAT), (LPCTSTR)pDatabaseTMPacket->GetDescription(), (LPCTSTR)pDatabaseTMPacket->GetTag());
				bPacket = (szPacket[0] == szPacket[1]) ? TRUE : bPacket;
			}
		}
		if (SendDlgItemMessage(IDC_TPEP_PACKETSLIST_MEMBERS, LVM_GETITEMCOUNT) > 0)
		{
			Listview_SetCurText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), 0);
			GetDlgItem(IDC_TPEP_PACKETSLIST_ADD)->EnableWindow(!bPacket);
			GetDlgItem(IDC_TPEP_PACKETSLIST_REMOVE)->EnableWindow();
			GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS)->EnableWindow();
			break;
		}
		GetDlgItem(IDC_TPEP_PACKETSLIST_ADD)->EnableWindow();
		GetDlgItem(IDC_TPEP_PACKETSLIST_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS)->EnableWindow(FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPPacketsListDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TPEP_PACKETSLIST_MEMBERS, LVM_GETITEMCOUNT), m_szPacketIDs.RemoveAll(), m_szPacketDescriptions.RemoveAll(); nItem < nItems; nItem++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPACKETSDIALOG_ID); )
			{
				m_szPacketIDs.Add(Listview_GetText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), nItem, nColumn));
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPACKETSDIALOG_DESCRIPTION); )
			{
				m_szPacketDescriptions.Add(Listview_GetText(GetDlgItem(IDC_TPEP_PACKETSLIST_MEMBERS), nItem, nColumn));
				break;
			}
		}
	}
	GetTPEPService()->SetPacketProfiles(&m_pPacketProfiles[0]);
	EndDialog(IDOK);
}

BOOL CTPEPPacketsListDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TPEPPACKETSLISTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTPEPPacketsListDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TPEPPACKETSLISTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTPEPParametersListDialog dialog

IMPLEMENT_DYNCREATE(CTPEPParametersListDialog, CLocaleDialog)

CTPEPParametersListDialog::CTPEPParametersListDialog(CWnd *pParentWnd) : CLocaleDialog(CTPEPParametersListDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTPEPParametersListDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTPEPParametersListDialog::DoModal(CStringArray &szParameterIDs, CStringArray &szParameterDescriptions)
{
	INT  nResult;

	for (m_szParameterIDs.Copy(szParameterIDs), m_szParameterDescriptions.Copy(szParameterDescriptions); (nResult = (INT)CLocaleDialog::DoModal()) == IDOK; )
	{
		szParameterIDs.Copy(m_szParameterIDs);
		szParameterDescriptions.Copy(m_szParameterDescriptions);
		break;
	}
	return nResult;
}

BOOL CTPEPParametersListDialog::EnumParameters()
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	for (nParameter = 0, nParameters = (INT)GetDatabase()->GetTMParameters()->GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
		{
			szParameter.Format(STRING(IDS_TPEPPARAMETERSDIALOG_LISTFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
			SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szParameter);
			continue;
		}
	}
	SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_NAME, CB_SETCURSEL);
	return((SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTPEPParametersListDialog::EnumProfiles()
{
	INT  nProfile;
	INT  nProfiles;
	CTPEPDataProfile  *pProfile;

	for (nProfile = 0, nProfiles = (GetTPEPService()->GetParameterProfiles(&m_pParameterProfiles[0]) && GetTPEPService()->GetParameterProfiles(&m_pParameterProfiles[1])) ? (INT)m_pParameterProfiles[0].GetSize() : 0; nProfile < nProfiles; nProfile++)
	{
		if ((pProfile = m_pParameterProfiles[0].GetAt(nProfile))) SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pProfile->GetName());
		continue;
	}
	SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME, CB_SETCURSEL, (WPARAM)-1);
	return((SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
}

BOOL CTPEPParametersListDialog::IsModified() CONST
{
	return((GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT) > 0 || !m_pParameterProfiles[0].Compare(&m_pParameterProfiles[1])) ? TRUE : FALSE);
}

BOOL CTPEPParametersListDialog::Check(BOOL bModified) CONST
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	CString  szProfile;
	CStringArray  szParameters;
	CTPEPDataProfile  *pProfile;

	GetDlgItem(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME)->GetWindowText(szProfile);
	for (nParameter = nParameters = -1; (pProfile = m_pParameterProfiles[0].GetAt(m_pParameterProfiles[0].Find(szProfile))); )
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPARAMETERSDIALOG_ID)) break;
			continue;
		}
		for (nParameter = 0, nParameters = (pProfile->GetIDs(szParameters) == GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT)) ? (INT)szParameters.GetSize() : -1; nParameter < nParameters; nParameter++)
		{
			for (nItem = 0, nItems = (INT)GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT); nItem < nItems; nItem++)
			{
				if (szParameters.GetAt(nParameter) == Listview_GetText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), nItem, nColumn)) break;
				continue;
			}
			if (nItem == nItems) break;
		}
		break;
	}
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_PROFILES)->EnableWindow((GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT) > 0 || m_pParameterProfiles[0].GetSize() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME_STATIC)->EnableWindow((GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT) > 0 || m_pParameterProfiles[0].GetSize() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME)->EnableWindow((GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT) > 0 || m_pParameterProfiles[0].GetSize() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_PROFILES_SAVE)->EnableWindow((GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT) > 0 && szProfile.GetLength() > 0 && nParameter == nParameters  &&  nParameters < 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_PROFILES_MODIFY)->EnableWindow((GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT) > 0 && szProfile.GetLength() > 0 && nParameter != nParameters) ? TRUE : FALSE);
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_PROFILES_DELETE)->EnableWindow((GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS)->SendMessage(LVM_GETITEMCOUNT) > 0 && szProfile.GetLength() > 0 && (nParameter != nParameters || nParameters >= 0)) ? TRUE : FALSE);
	return(!bModified || IsModified());
}

void CTPEPParametersListDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTPEPParametersListDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTPEPParametersListDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_pParameterProfiles[0].RemoveAll();
	m_pParameterProfiles[1].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTPEPParametersListDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTPEPParametersListDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TPEP_PARAMETERSLIST_ADD, OnAddParameter)
	ON_BN_CLICKED(IDC_TPEP_PARAMETERSLIST_REMOVE, OnRemoveParameter)
	ON_BN_CLICKED(IDC_TPEP_PARAMETERSLIST_PROFILES_SAVE, OnSaveProfile)
	ON_BN_CLICKED(IDC_TPEP_PARAMETERSLIST_PROFILES_MODIFY, OnModifyProfile)
	ON_BN_CLICKED(IDC_TPEP_PARAMETERSLIST_PROFILES_DELETE, OnDeleteProfile)
	ON_BN_CLICKED(IDC_TPEP_PARAMETERSLIST_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME, OnEditchangeProfile)
	ON_CBN_SELCHANGE(IDC_TPEP_PARAMETERSLIST_NAME, OnSelchangeParameter)
	ON_CBN_SELCHANGE(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME, OnSelchangeProfile)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTPEPParametersListDialog message handlers

BOOL CTPEPParametersListDialog::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TPEPPARAMETERSDIALOG_ID));
	m_szColumns.Add(STRING(IDS_TPEPPARAMETERSDIALOG_DESCRIPTION));
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_MEMBERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nWidth = rColumns.Width() / 5; nColumn < nColumns; nWidth = (++nColumn < nColumns) ? ((4 * rColumns.Width()) / 5) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	EnumParameters();
	EnumProfiles();
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_NAME)->EnableWindow();
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_ADD)->EnableWindow();
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
	return FALSE;
}

void CTPEPParametersListDialog::OnAddParameter()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	CString  szItem;
	CString  szParameter[2];
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TPEP_PARAMETERSLIST_NAME)->GetWindowText(szParameter[0]);
	for (nParameter = 0, nParameters = (INT)GetDatabase()->GetTMParameters()->GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
		{
			for (szParameter[1].Format(STRING(IDS_TPEPPARAMETERSDIALOG_LISTFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription()); szParameter[0] == szParameter[1]; )
			{
				szParameter[0] = pDatabaseTMParameter->GetTag();
				szParameter[1] = pDatabaseTMParameter->GetDescription();
				break;
			}
			if (szParameter[0] == pDatabaseTMParameter->GetTag()) break;
		}
	}
	for (nColumn = 0, nColumns = (nParameter < nParameters) ? (INT)m_szColumns.GetSize() : 0, nIndex = (INT)SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_MEMBERS, LVM_GETITEMCOUNT); nColumn < nColumns; nColumn++)
	{
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPARAMETERSDIALOG_ID); )
		{
			szItem = szParameter[0];
			break;
		}
		for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPARAMETERSDIALOG_DESCRIPTION); )
		{
			szItem = szParameter[1];
			break;
		}
		if (!nColumn)
		{
			Listview_InsertText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), nIndex, szItem);
			continue;
		}
		Listview_SetText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), nIndex, nColumn, szItem);
	}
	if (SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_MEMBERS, LVM_GETITEMCOUNT) > 0)
	{
		Listview_SetCurText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), nIndex);
		GetDlgItem(IDC_TPEP_PARAMETERSLIST_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TPEP_PARAMETERSLIST_REMOVE)->EnableWindow();
		GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS)->EnableWindow();
	}
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPParametersListDialog::OnRemoveParameter()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	CString  szItem[2];
	CString  szParameter[2];
	CHourglassCursor  cCursor;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS))) >= 0)
	{
		if (Listview_DeleteText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), nIndex))
		{
			if ((nItems = (INT)SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_MEMBERS, LVM_GETITEMCOUNT)) > 0)
			{
				for (nItem = 0, GetDlgItem(IDC_TPEP_PARAMETERSLIST_NAME)->GetWindowText(szParameter[0]); nItem < nItems; nItem++)
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPARAMETERSDIALOG_ID); )
						{
							szItem[0] = Listview_GetText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), 0, nColumn);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPARAMETERSDIALOG_DESCRIPTION); )
						{
							szItem[1] = Listview_GetText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), 0, nColumn);
							break;
						}
					}
					szParameter[1].Format(STRING(IDS_TPEPPARAMETERSDIALOG_LISTFORMAT), (LPCTSTR)szItem[0], (LPCTSTR)szItem[1]);
					if (szParameter[0] == szParameter[1]) break;
				}
				Listview_SetCurText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), 0);
				GetDlgItem(IDC_TPEP_PARAMETERSLIST_ADD)->EnableWindow((nItem == nItems) ? TRUE : FALSE);
				GetDlgItem(IDC_TPEP_PARAMETERSLIST_REMOVE)->EnableWindow();
				GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS)->EnableWindow();
			}
			else
			{
				GetDlgItem(IDC_TPEP_PARAMETERSLIST_ADD)->EnableWindow();
				GetDlgItem(IDC_TPEP_PARAMETERSLIST_REMOVE)->EnableWindow(FALSE);
				GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS)->EnableWindow(FALSE);
			}
		}
	}
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPParametersListDialog::OnSaveProfile()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	CString  szProfile;
	CStringArray  szIDs;
	CTPEPDataProfile  *pProfile;
	CHourglassCursor  cCursor;

	if ((pProfile = new CTPEPDataProfile))
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPARAMETERSDIALOG_ID)) break;
			continue;
		}
		for (nItem = 0, nItems = (nColumn < nColumns) ? (INT)SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_MEMBERS, LVM_GETITEMCOUNT) : 0; nItem < nItems; nItem++)
		{
			szIDs.Add(Listview_GetText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), nItem, nColumn));
			continue;
		}
		for (GetDlgItem(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME)->GetWindowText(szProfile), pProfile->SetName(szProfile), pProfile->SetIDs(szIDs); (nIndex = (nColumn < nColumns) ? m_pParameterProfiles[0].Add(pProfile) : -1) >= 0; )
		{
			if (SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME, CB_INSERTSTRING, nIndex, (LPARAM)(LPCTSTR)szProfile) >= 0)
			{
				SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME, CB_SETCURSEL, nIndex);
				break;
			}
			m_pParameterProfiles[0].RemoveAt(nIndex);
			break;
		}
		for (; nIndex < 0; )
		{
			delete pProfile;
			break;
		}
	}
	SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPParametersListDialog::OnModifyProfile()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CString  szProfile;
	CStringArray  szIDs;
	CTPEPDataProfile  *pProfile;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME)->GetWindowText(szProfile);
	if ((pProfile = m_pParameterProfiles[0].GetAt(m_pParameterProfiles[0].Find(szProfile))))
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPARAMETERSDIALOG_ID)) break;
			continue;
		}
		for (nItem = 0, nItems = (nColumn < nColumns) ? (INT)SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_MEMBERS, LVM_GETITEMCOUNT) : 0; nItem < nItems; nItem++)
		{
			szIDs.Add(Listview_GetText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), nItem, nColumn));
			continue;
		}
		if (nColumn < nColumns)
		{
			pProfile->SetName(szProfile);
			pProfile->SetIDs(szIDs);
		}
	}
	SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPParametersListDialog::OnDeleteProfile()
{
	INT  nIndex;
	CString  szProfile;
	CTPEPDataProfile  *pProfile;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME)->GetWindowText(szProfile);
	if ((pProfile = m_pParameterProfiles[0].GetAt((nIndex = m_pParameterProfiles[0].Find(szProfile)))))
	{
		if (SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME, CB_DELETESTRING, nIndex) != CB_ERR)
		{
			GetDlgItem(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME)->SetWindowText(EMPTYSTRING);
			m_pParameterProfiles[0].RemoveAt(nIndex);
			delete pProfile;
		}
	}
	SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPParametersListDialog::OnEditchangeProfile()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPParametersListDialog::OnSelchangeParameter()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CString  szItem[2];
	CString  szParameter[2];

	GetDlgItem(IDC_TPEP_PARAMETERSLIST_NAME)->GetWindowText(szParameter[0]);
	for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_MEMBERS, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPARAMETERSDIALOG_ID); )
			{
				szItem[0] = Listview_GetText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), nItem, nColumn);
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPARAMETERSDIALOG_DESCRIPTION); )
			{
				szItem[1] = Listview_GetText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), nItem, nColumn);
				break;
			}
		}
		szParameter[1].Format(STRING(IDS_TPEPPARAMETERSDIALOG_LISTFORMAT), (LPCTSTR)szItem[0], (LPCTSTR)szItem[1]);
		if (szParameter[0] == szParameter[1]) break;
	}
	GetDlgItem(IDC_TPEP_PARAMETERSLIST_ADD)->EnableWindow((nItem == nItems) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPParametersListDialog::OnSelchangeProfile()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	BOOL  bParameter;
	CString  szItem;
	CString  szProfile;
	CString  szParameter[2];
	CStringArray  szParameters;
	CTPEPDataProfile  *pProfile;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	GetDlgItem(IDC_TPEP_PARAMETERSLIST_NAME)->GetWindowText(szParameter[0]);
	for (szProfile = Combobox_GetText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME), (INT)SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME, CB_GETCURSEL)), SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME, CB_GETCURSEL)); (pProfile = m_pParameterProfiles[0].GetAt((INT)SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_PROFILES_NAME, CB_GETCURSEL))); )
	{
		for (nParameter = 0, nParameters = pProfile->GetIDs(szParameters), SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_MEMBERS, LVM_DELETEALLITEMS), bParameter = FALSE; nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(szParameters.GetAt(nParameter)))) != (CDatabaseTMParameter *)NULL)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nIndex = (INT)SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_MEMBERS, LVM_GETITEMCOUNT); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPARAMETERSDIALOG_ID); )
					{
						szItem = pDatabaseTMParameter->GetTag();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPARAMETERSDIALOG_DESCRIPTION); )
					{
						szItem = pDatabaseTMParameter->GetDescription();
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), nIndex, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), nIndex, nColumn, szItem);
				}
				szParameter[1].Format(STRING(IDS_TPEPPARAMETERSDIALOG_LISTFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
				bParameter = (szParameter[0] == szParameter[1]) ? TRUE : bParameter;
			}
		}
		if (SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_MEMBERS, LVM_GETITEMCOUNT) > 0)
		{
			Listview_SetCurText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), 0);
			GetDlgItem(IDC_TPEP_PARAMETERSLIST_ADD)->EnableWindow(!bParameter);
			GetDlgItem(IDC_TPEP_PARAMETERSLIST_REMOVE)->EnableWindow();
			GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS)->EnableWindow();
			break;
		}
		GetDlgItem(IDC_TPEP_PARAMETERSLIST_ADD)->EnableWindow();
		GetDlgItem(IDC_TPEP_PARAMETERSLIST_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS)->EnableWindow(FALSE);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTPEPParametersListDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	CHourglassCursor  cCursor;

	for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TPEP_PARAMETERSLIST_MEMBERS, LVM_GETITEMCOUNT), m_szParameterIDs.RemoveAll(), m_szParameterDescriptions.RemoveAll(); nItem < nItems; nItem++)
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPARAMETERSDIALOG_ID); )
			{
				m_szParameterIDs.Add(Listview_GetText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), nItem, nColumn));
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TPEPPARAMETERSDIALOG_DESCRIPTION); )
			{
				m_szParameterDescriptions.Add(Listview_GetText(GetDlgItem(IDC_TPEP_PARAMETERSLIST_MEMBERS), nItem, nColumn));
				break;
			}
		}
	}
	GetTPEPService()->SetParameterProfiles(&m_pParameterProfiles[0]);
	EndDialog(IDOK);
}

BOOL CTPEPParametersListDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TPEPPARAMETERSLISTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTPEPParametersListDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TPEPPARAMETERSLISTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CToolsDownloadsFilesPage property page

IMPLEMENT_DYNCREATE(CToolsDownloadsFilesPage, CLocalePropertyPage)

CToolsDownloadsFilesPage::CToolsDownloadsFilesPage() : CLocalePropertyPage(CToolsDownloadsFilesPage::IDD)
{
	//{{AFX_DATA_INIT(CToolsDownloadsFilesPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CToolsDownloadsFilesPage::SetInfo(CONST CToolsDownloadProfileInfo *pProfileInfo, CONST CToolsDownloadProfileInfo *pBackupProfileInfo, BOOL bUpdate)
{
	for (m_cInfo[0].Copy(pProfileInfo); pBackupProfileInfo != (CONST CToolsDownloadProfileInfo *) NULL; )
	{
		m_cInfo[1].Copy(pBackupProfileInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()) && bUpdate)
	{
		ShowFilesInfo();
		return;
	}
}

VOID CToolsDownloadsFilesPage::GetInfo(CToolsDownloadProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cInfo[0]);
}

CToolsDownloadsPageFolder *CToolsDownloadsFilesPage::GetParent() CONST
{
	return((CToolsDownloadsPageFolder *)CLocalePropertyPage::GetParent());
}

VOID CToolsDownloadsFilesPage::ShowFilesInfo()
{
	CheckDlgButton(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT, (m_cInfo[0].GetFTPPort() != 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_FILESPAGE_TRANSFER_ASCII, ((m_cInfo[0].GetOptions() & TOOLSDOWNLOADINFO_OPTION_TRANSFERASASCII) || (m_cInfo[0].GetOptions() & (TOOLSDOWNLOADINFO_OPTION_TRANSFERASASCII | TOOLSDOWNLOADINFO_OPTION_TRANSFERASBINARY)) == 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_FILESPAGE_TRANSFER_BINARY, (m_cInfo[0].GetOptions() & TOOLSDOWNLOADINFO_OPTION_TRANSFERASBINARY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_FILESPAGE_DELETEFILES, (m_cInfo[0].GetOptions() & TOOLSDOWNLOADINFO_OPTION_DELETEFILES) ? TRUE : FALSE);
	Spinbox_SetRange(GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT_NUMBER), TOOLSDOWNLOADSFILES_FIRSTPORT, TOOLSDOWNLOADSFILES_LASTPORT);
	Spinbox_SetPos(GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT_NUMBER), m_cInfo[0].GetFTPPort());
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FILES)->SetWindowText(m_cInfo[0].GetFiles());
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_DIRECTORY)->SetWindowText(m_cInfo[0].GetDirectory());
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_LOCATION)->SetWindowText(m_cInfo[0].GetFTPLocation());
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_USERNAME)->SetWindowText(m_cInfo[0].GetFTPUserName());
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PASSWORD)->SetWindowText(m_cInfo[0].GetFTPPassword());
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FILES_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FILES)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FILES_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TOOLSDOWNLOADPROFILES_CHANGE));
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_DIRECTORY_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_DIRECTORY)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_DIRECTORY_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TOOLSDOWNLOADPROFILES_CHANGE));
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_TRANSFER_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_TRANSFER_ASCII)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_TRANSFER_BINARY)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_DELETEFILES)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_LOCATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_LOCATION)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_USERNAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_USERNAME)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PASSWORD_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PASSWORD)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT));
}

BOOL CToolsDownloadsFilesPage::CheckFTPLocation() CONST
{
	DWORD  dwType;
	CString  szServer;
	CString  szLocation;
	CString  szDirectory;
	INTERNET_PORT  iPort;

	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_LOCATION)->GetWindowText(szLocation);
	return((AfxParseURL(szLocation, dwType, szServer, szDirectory, iPort) && dwType == AFX_INET_SERVICE_FTP) ? TRUE : FALSE);
}

VOID CToolsDownloadsFilesPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TOOLSDOWNLOADS_FILESPAGE_FILES, (bCheck = CheckAccountPrivilege(PRIVILEGE_TOOLSDOWNLOADPROFILES_CHANGE)));
	AccessControl(IDC_TOOLSDOWNLOADS_FILESPAGE_DIRECTORY, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_FILESPAGE_TRANSFER_ASCII, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_FILESPAGE_TRANSFER_BINARY, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_FILESPAGE_DELETEFILES, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_LOCATION, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_USERNAME, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PASSWORD, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT_NUMBER, bCheck);
}

BOOL CToolsDownloadsFilesPage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cInfo[0].Compare(&m_cInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CToolsDownloadsFilesPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FILES)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_LOCATION)->GetWindowTextLength() > 0 && CheckFTPLocation() && (IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_FILESPAGE_TRANSFER_ASCII) || IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_FILESPAGE_TRANSFER_BINARY)) && (GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_USERNAME)->GetWindowTextLength() > 0 || !GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PASSWORD)->GetWindowTextLength())) : CLocalePropertyPage::Check()) : TRUE);
}

void CToolsDownloadsFilesPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CToolsDownloadsFilesPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CToolsDownloadsFilesPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CToolsDownloadsFilesPage)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_FILESPAGE_FILES_BROWSE, OnBrowseFiles)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_FILESPAGE_DIRECTORY_BROWSE, OnBrowseDirectory)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_FILESPAGE_TRANSFER_ASCII, OnTransferASCIIMode)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_FILESPAGE_TRANSFER_BINARY, OnTransferBinaryMode)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_FILESPAGE_DELETEFILES, OnDeleteFiles)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT, OnUseFTPPort)
	ON_EN_CHANGE(IDC_TOOLSDOWNLOADS_FILESPAGE_FILES, OnEditchangeFiles)
	ON_EN_CHANGE(IDC_TOOLSDOWNLOADS_FILESPAGE_DIRECTORY, OnEditchangeDirectory)
	ON_EN_CHANGE(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_LOCATION, OnEditchangeFTPLocation)
	ON_EN_CHANGE(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_USERNAME, OnEditchangeFTPUserName)
	ON_EN_CHANGE(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PASSWORD, OnEditchangeFTPPassword)
	ON_CONTROL(SBXN_CHANGE, IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT_NUMBER, OnSpinchangeFTPPort)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CToolsDownloadsFilesPage message handlers

BOOL CToolsDownloadsFilesPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CToolsDownloadsFilesPage::OnSetActive()
{
	for (GetParent()->GetInfo(&m_cInfo[0]); GetParent()->IsWindowVisible(); )
	{
		ShowFilesInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CToolsDownloadsFilesPage::OnKillActive()
{
	GetParent()->SetInfo(&m_cInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CToolsDownloadsFilesPage::OnBrowseFiles()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TOOLSDOWNLOADS_FILESPAGE_FILES, STRING(IDS_FILEBROWSEDIALOG_TEXTFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_TEXTFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		m_cInfo[0].SetFiles(cFileBrowseDialog.GetPathName());
		GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FILES)->SetWindowText(cFileBrowseDialog.GetPathName());
	}
	if (!GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FILES)->GetWindowTextLength())
	{
		CheckDlgButton(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT, FALSE);
		GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_LOCATION)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_USERNAME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PASSWORD)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT_NUMBER)->EnableWindow(FALSE);
		m_cInfo[0].SetFTPLocation(EMPTYSTRING);
		m_cInfo[0].SetFTPUserName(EMPTYSTRING);
		m_cInfo[0].SetFTPPassword(EMPTYSTRING);
		m_cInfo[0].SetFTPPort(0);
	}
	SendDlgItemMessage(IDC_TOOLSDOWNLOADS_FILESPAGE_FILES, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FILES)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsFilesPage::OnBrowseDirectory()
{
	LPMALLOC  pIMalloc;
	LPITEMIDLIST  pItemIDList;
	TCHAR  szItemBuffer[MAX_PATH];
	TCHAR  szDisplayName[MAX_PATH];
	BROWSEINFO  sBrowseInfo = { 0 };

	if (SHGetMalloc(&pIMalloc) == NOERROR)
	{
		sBrowseInfo.hwndOwner = GetSafeHwnd();
		sBrowseInfo.pszDisplayName = szDisplayName;
		sBrowseInfo.lpszTitle = STRING(IDS_DIRECTORYBROWSEDIALOG_TITLE);
		if ((pItemIDList = SHBrowseForFolder(&sBrowseInfo)))
		{
			if (SHGetPathFromIDList(pItemIDList, szItemBuffer))
			{
				GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_DIRECTORY)->SetWindowText(szItemBuffer);
				m_cInfo[0].SetDirectory(szItemBuffer);
			}
			pIMalloc->Free(pItemIDList);
		}
		pIMalloc->Release();
	}
	SendDlgItemMessage(IDC_TOOLSDOWNLOADS_FILESPAGE_DIRECTORY, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_DIRECTORY)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsFilesPage::OnTransferASCIIMode()
{
	CheckDlgButton(IDC_TOOLSDOWNLOADS_FILESPAGE_TRANSFER_ASCII, TRUE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_FILESPAGE_TRANSFER_BINARY, FALSE);
	m_cInfo[0].SetOptions((m_cInfo[0].GetOptions() & ~TOOLSDOWNLOADINFO_OPTION_TRANSFERASBINARY) | TOOLSDOWNLOADINFO_OPTION_TRANSFERASASCII);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsFilesPage::OnTransferBinaryMode()
{
	CheckDlgButton(IDC_TOOLSDOWNLOADS_FILESPAGE_TRANSFER_ASCII, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_FILESPAGE_TRANSFER_BINARY, TRUE);
	m_cInfo[0].SetOptions((m_cInfo[0].GetOptions() & ~TOOLSDOWNLOADINFO_OPTION_TRANSFERASASCII) | TOOLSDOWNLOADINFO_OPTION_TRANSFERASBINARY);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsFilesPage::OnDeleteFiles()
{
	m_cInfo[0].SetOptions((IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_FILESPAGE_DELETEFILES)) ? (m_cInfo[0].GetOptions() | TOOLSDOWNLOADINFO_OPTION_DELETEFILES) : (m_cInfo[0].GetOptions() & ~TOOLSDOWNLOADINFO_OPTION_DELETEFILES));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsFilesPage::OnUseFTPPort()
{
	if (IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT))
	{
		m_cInfo[0].SetFTPPort(TOOLSDOWNLOADSFILES_DEFAULTPORT);
		Spinbox_SetPos(GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT_NUMBER), TOOLSDOWNLOADSFILES_DEFAULTPORT);
		GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT_NUMBER)->EnableWindow();
		GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT_NUMBER)->SetFocus();
	}
	else
	{
		m_cInfo[0].SetFTPPort(0);
		GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT_NUMBER)->EnableWindow(FALSE);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsFilesPage::OnEditchangeFiles()
{
	CString  szFiles;

	for (GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FILES)->GetWindowText(szFiles); szFiles.IsEmpty(); )
	{
		CheckDlgButton(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT, FALSE);
		GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_LOCATION)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_USERNAME)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PASSWORD)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT_NUMBER)->EnableWindow(FALSE);
		m_cInfo[0].SetFTPLocation(EMPTYSTRING);
		m_cInfo[0].SetFTPUserName(EMPTYSTRING);
		m_cInfo[0].SetFTPPassword(EMPTYSTRING);
		m_cInfo[0].SetFTPPort(0);
		break;
	}
	m_cInfo[0].SetFiles(szFiles);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsFilesPage::OnEditchangeDirectory()
{
	CString  szDirectory;

	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_DIRECTORY)->GetWindowText(szDirectory);
	m_cInfo[0].SetDirectory(szDirectory);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsFilesPage::OnEditchangeFTPLocation()
{
	CString  szLocation;

	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_LOCATION)->GetWindowText(szLocation);
	m_cInfo[0].SetFTPLocation(szLocation);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsFilesPage::OnEditchangeFTPUserName()
{
	CString  szUserName;

	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_USERNAME)->GetWindowText(szUserName);
	m_cInfo[0].SetFTPUserName(szUserName);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsFilesPage::OnEditchangeFTPPassword()
{
	CString  szPassword;

	GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PASSWORD)->GetWindowText(szPassword);
	m_cInfo[0].SetFTPPassword(szPassword);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsFilesPage::OnSpinchangeFTPPort()
{
	m_cInfo[0].SetFTPPort((UINT)Spinbox_GetPos(GetDlgItem(IDC_TOOLSDOWNLOADS_FILESPAGE_FTP_PORT_NUMBER)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CToolsDownloadsSchedulePage property page

IMPLEMENT_DYNCREATE(CToolsDownloadsSchedulePage, CLocalePropertyPage)

CToolsDownloadsSchedulePage::CToolsDownloadsSchedulePage() : CLocalePropertyPage(CToolsDownloadsSchedulePage::IDD)
{
	//{{AFX_DATA_INIT(CToolsDownloadsSchedulePage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CToolsDownloadsSchedulePage::SetInfo(CONST CToolsDownloadProfileInfo *pProfileInfo, CONST CToolsDownloadProfileInfo *pBackupProfileInfo, BOOL bUpdate)
{
	for (m_cInfo[0].Copy(pProfileInfo); pBackupProfileInfo != (CONST CToolsDownloadProfileInfo *) NULL; )
	{
		m_cInfo[1].Copy(pBackupProfileInfo);
		break;
	}
	if (IsWindow(GetSafeHwnd()) && bUpdate)
	{
		ShowScheduleInfo();
		return;
	}
}

VOID CToolsDownloadsSchedulePage::GetInfo(CToolsDownloadProfileInfo *pProfileInfo) CONST
{
	pProfileInfo->Copy(&m_cInfo[0]);
}

CToolsDownloadsPageFolder *CToolsDownloadsSchedulePage::GetParent() CONST
{
	return((CToolsDownloadsPageFolder *)CLocalePropertyPage::GetParent());
}

BOOL CToolsDownloadsSchedulePage::EnumEvents()
{
	INT  nEvent;
	INT  nEvents;
	CTelemetryEvents  pEvents;
	CTelemetryEventInfo  *pEventInfo;

	for (nEvent = 0, nEvents = (GetTelemetryEvents(pEvents)) ? (INT)pEvents.GetSize() : 0; nEvent < nEvents; nEvent++)
	{
		if ((pEventInfo = pEvents.GetAt(nEvent))) SendDlgItemMessage(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)pEventInfo->GetName());
		continue;
	}
	return((SendDlgItemMessage(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CToolsDownloadsSchedulePage::ShowScheduleInfo()
{
	UINT  nMode;
	CString  szEvent;
	CTimeKey  tExecution;
	CTimeKey  tExecutionStartTime;
	CTimeKey  tExecutionStopTime;
	CTimeSpan  tExecutionInterval;
	CTimeSpan  tExecutionDelay;
	CTimeSpan  tDailyExecution;

	nMode = m_cInfo[0].GetExecutionMode();
	tExecution = m_cInfo[0].GetExecutionTime();
	tDailyExecution = m_cInfo[0].GetDailyExecutionTime();
	szEvent = m_cInfo[0].GetTriggeredExecution(tExecutionDelay);
	m_cInfo[0].GetPeriodicalExecutionTime(tExecutionStartTime, tExecutionInterval, tExecutionStopTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE_TIME), (nMode == TOOLSDOWNLOADINFO_EXECUTION_ATTIME) ? tExecution : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY_TIME), (nMode == TOOLSDOWNLOADINFO_EXECUTION_ATDAILYTIME) ? CTimeKey((CTime::GetCurrentTime().GetTime() / SECONDSPERDAY)*SECONDSPERDAY + tDailyExecution.GetTotalSeconds()) : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STARTTIME), (nMode == TOOLSDOWNLOADINFO_EXECUTION_ATINTERVAL) ? tExecutionStartTime : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME), (nMode == TOOLSDOWNLOADINFO_EXECUTION_ATINTERVAL) ? tExecutionStopTime : CTime::GetCurrentTime().GetTime());
	Spinbox_SetRange(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL), TOOLSDOWNLOADSSCHEDULE_MINIMUMINTERVAL, TOOLSDOWNLOADSSCHEDULE_MAXIMUMINTERVAL);
	Spinbox_SetRange(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL), TOOLSDOWNLOADSSCHEDULE_MINIMUMINTERVAL, TOOLSDOWNLOADSSCHEDULE_MAXIMUMINTERVAL);
	Spinbox_SetRange(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY), TOOLSDOWNLOADSSCHEDULE_MINIMUMDELAY, TOOLSDOWNLOADSSCHEDULE_MAXIMUMDELAY);
	Spinbox_SetPos(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL), tExecutionInterval.GetTotalSeconds() / SECONDSPERMINUTE);
	Spinbox_SetPos(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY), tExecutionDelay.GetTotalSeconds() / SECONDSPERMINUTE);
	SendDlgItemMessage(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME, CB_SETCURSEL, (nMode == TOOLSDOWNLOADINFO_EXECUTION_ATEVENT) ? (WPARAM)SendDlgItemMessage(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szEvent) : (WPARAM)-1);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_IMMEDIATELY, (nMode == TOOLSDOWNLOADINFO_EXECUTION_IMMEDIATELY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE, (nMode == TOOLSDOWNLOADINFO_EXECUTION_ATTIME) ? TRUE : FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY, (nMode == TOOLSDOWNLOADINFO_EXECUTION_ATDAILYTIME) ? TRUE : FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY, (nMode == TOOLSDOWNLOADINFO_EXECUTION_ATINTERVAL) ? TRUE : FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT, (nMode == TOOLSDOWNLOADINFO_EXECUTION_ATEVENT  &&  SendDlgItemMessage(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT)->EnableWindow((SendDlgItemMessage(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT));
}

VOID CToolsDownloadsSchedulePage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_IMMEDIATELY, (bCheck = CheckAccountPrivilege(PRIVILEGE_TOOLSDOWNLOADPROFILES_CHANGE)));
	AccessControl(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE_TIME, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY_TIME, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STARTTIME, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY, bCheck);
}

BOOL CToolsDownloadsSchedulePage::IsModified(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? !m_cInfo[0].Compare(&m_cInfo[1]) : CLocalePropertyPage::IsModified()) : FALSE);
}

BOOL CToolsDownloadsSchedulePage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_IMMEDIATELY) || IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE) || IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY) || IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY) || IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT)) : CLocalePropertyPage::Check()) : TRUE);
}

void CToolsDownloadsSchedulePage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CToolsDownloadsSchedulePage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CToolsDownloadsSchedulePage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CToolsDownloadsSchedulePage)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_IMMEDIATELY, OnExecutionNow)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE, OnExecutionAtTime)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY, OnExecutionAtDailyTime)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY, OnExecutionAtPeriodicalTime)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT, OnExecutionAtEvent)
	ON_CBN_SELCHANGE(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME, OnSelchangeExecutionEvent)
	ON_CONTROL(TSBXN_CHANGE, IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE_TIME, OnSpinchangeExecutionTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY_TIME, OnSpinchangeExecutionDailyTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STARTTIME, OnSpinchangeExecutionPeriodicalStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME, OnSpinchangeExecutionPeriodicalStopTime)
	ON_CONTROL(SBXN_CHANGE, IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL, OnSpinchangeExecutionPeriodicalInterval)
	ON_CONTROL(SBXN_CHANGE, IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY, OnSpinchangeExecutionDelay)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CToolsDownloadsSchedulePage message handlers

BOOL CToolsDownloadsSchedulePage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	AdjustToPrivileges();
	EnumEvents();
	return TRUE;
}

BOOL CToolsDownloadsSchedulePage::OnSetActive()
{
	for (GetParent()->GetInfo(&m_cInfo[0]); GetParent()->IsWindowVisible(); )
	{
		ShowScheduleInfo();
		break;
	}
	return CLocalePropertyPage::OnSetActive();
}

BOOL CToolsDownloadsSchedulePage::OnKillActive()
{
	GetParent()->SetInfo(&m_cInfo[0]);
	return CLocalePropertyPage::OnKillActive();
}

void CToolsDownloadsSchedulePage::OnExecutionNow()
{
	m_cInfo[0].SetExecutionTime(0);
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetLastExecutionTime(0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_IMMEDIATELY)) ? TOOLSDOWNLOADINFO_EXECUTION_IMMEDIATELY : 0);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_IMMEDIATELY, !IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_IMMEDIATELY));
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT, FALSE);
	SendDlgItemMessage(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsSchedulePage::OnExecutionAtTime()
{
	CTimeKey  tExecution;

	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetLastExecutionTime(0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE)) ? TOOLSDOWNLOADINFO_EXECUTION_ATTIME : 0);
	m_cInfo[0].SetExecutionTime((!IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE)) ? tExecution.GetTime() : 0);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE, !IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE));
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT, FALSE);
	SendDlgItemMessage(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME, CB_SETCURSEL, (WPARAM)-1);
	Timespinbox_SetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE_TIME), tExecution);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsSchedulePage::OnExecutionAtDailyTime()
{
	CTimeKey  tExecution;

	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetLastExecutionTime(0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY)) ? TOOLSDOWNLOADINFO_EXECUTION_ATDAILYTIME : 0);
	m_cInfo[0].SetDailyExecutionTime((!IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY)) ? ((SECONDSPERHOUR*(tExecution.GetTime() / SECONDSPERHOUR)) % SECONDSPERDAY) : 0);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY, !IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY));
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT, FALSE);
	SendDlgItemMessage(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME, CB_SETCURSEL, (WPARAM)-1);
	Timespinbox_SetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY_TIME), CTimeKey(SECONDSPERHOUR*(tExecution.GetTime() / SECONDSPERHOUR)));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY_TIME)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY_TIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsSchedulePage::OnExecutionAtPeriodicalTime()
{
	CTimeKey  tTime;

	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetLastExecutionTime(0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY)) ? TOOLSDOWNLOADINFO_EXECUTION_ATINTERVAL : 0);
	m_cInfo[0].SetPeriodicalExecutionTime((!IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY)) ? tTime.GetTime() : 0, (!IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY)) ? (SECONDSPERMINUTE*(TOOLSDOWNLOADSSCHEDULE_DEFAULTINTERVAL / 6)) : 0, (!IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY)) ? (tTime.GetTime() + SECONDSPERMINUTE*TOOLSDOWNLOADSSCHEDULE_DEFAULTINTERVAL) : 0);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY, !IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY));
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT, FALSE);
	SendDlgItemMessage(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME, CB_SETCURSEL, (WPARAM)-1);
	Timespinbox_SetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STARTTIME), tTime);
	Timespinbox_SetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME), CTimeKey(tTime.GetTime() + SECONDSPERMINUTE*TOOLSDOWNLOADSSCHEDULE_DEFAULTINTERVAL));
	Spinbox_SetPos(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL), TOOLSDOWNLOADSSCHEDULE_DEFAULTINTERVAL / 6);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsSchedulePage::OnExecutionAtEvent()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetLastExecutionTime(0);
	m_cInfo[0].SetExecutionMode((!IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT)) ? TOOLSDOWNLOADINFO_EXECUTION_ATEVENT : 0);
	m_cInfo[0].SetTriggeredExecution((!IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT)) ? Combobox_GetText(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME), 0) : EMPTYSTRING, SECONDSPERMINUTE*TOOLSDOWNLOADSSCHEDULE_DEFAULTDELAY);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT, !IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT));
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY, FALSE);
	CheckDlgButton(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY, FALSE);
	SendDlgItemMessage(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME, CB_SETCURSEL, (IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT)) ? 0 : -1);
	Spinbox_SetPos(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY), TOOLSDOWNLOADSSCHEDULE_DEFAULTDELAY);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY_MINUTES_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT));
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL_MINUTES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsSchedulePage::OnSelchangeExecutionEvent()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTriggeredExecution(Combobox_GetText(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME), (INT)SendDlgItemMessage(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME, CB_GETCURSEL)), SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsSchedulePage::OnSpinchangeExecutionTime()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetLastExecutionTime(0);
	m_cInfo[0].SetExecutionTime(Timespinbox_GetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_ONCE_TIME)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsSchedulePage::OnSpinchangeExecutionDailyTime()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetLastExecutionTime(0);
	m_cInfo[0].SetDailyExecutionTime(Timespinbox_GetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_DAILY_TIME)).GetTime() % SECONDSPERDAY);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsSchedulePage::OnSpinchangeExecutionPeriodicalStartTime()
{
	CTimeKey  tTime[2];
	CTimeSpan  tInterval;

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME)), tInterval = SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL)); tTime[0] != 0 || tTime[1] != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME), (tTime[1] = (tTime[0].GetTime() + tInterval.GetTotalSeconds() > tTime[1].GetTime()) ? (tTime[0].GetTime() + tInterval.GetTotalSeconds()) : tTime[1]));
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetPeriodicalExecutionTime(tTime[0], tInterval, tTime[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsSchedulePage::OnSpinchangeExecutionPeriodicalStopTime()
{
	CTimeKey  tTime[2];
	CTimeSpan  tInterval;

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME)), tInterval = SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL)); tTime[0] != 0 || tTime[1] != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STARTTIME), (tTime[0] = (tTime[1].GetTime() - tInterval.GetTotalSeconds() < tTime[0].GetTime()) ? (tTime[1].GetTime() - tInterval.GetTotalSeconds()) : tTime[0]));
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetPeriodicalExecutionTime(tTime[0], tInterval, tTime[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsSchedulePage::OnSpinchangeExecutionPeriodicalInterval()
{
	CTimeKey  tTime[2];
	CTimeSpan  tInterval;

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STARTTIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME)), tInterval = SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_INTERVAL)); tTime[0] != 0 || tTime[1] != 0; )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_PERIODICALLY_STOPTIME), (tTime[1] = (tTime[0].GetTime() + tInterval.GetTotalSeconds() > tTime[1].GetTime()) ? (tTime[0].GetTime() + tInterval.GetTotalSeconds()) : tTime[1]));
		break;
	}
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetPeriodicalExecutionTime(tTime[0], tInterval, tTime[1]);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsSchedulePage::OnSpinchangeExecutionDelay()
{
	m_cInfo[0].SetExecutionCycle(0);
	m_cInfo[0].SetTriggeredExecution(Combobox_GetText(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME), (INT)SendDlgItemMessage(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_NAME, CB_GETCURSEL)), SECONDSPERMINUTE*Spinbox_GetPos(GetDlgItem(IDC_TOOLSDOWNLOADS_SCHEDULEPAGE_RUN_EVENT_DELAY)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CToolsDownloadsPageTabCtrl

IMPLEMENT_DYNCREATE(CToolsDownloadsPageTabCtrl, CTabCtrl)

CToolsDownloadsPageFolder *CToolsDownloadsPageTabCtrl::GetParent() CONST
{
	return((CToolsDownloadsPageFolder *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CToolsDownloadsPageTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CToolsDownloadsPageTabCtrl)
	ON_WM_GETDLGCODE()
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CToolsDownloadsPageTabCtrl message handlers

UINT CToolsDownloadsPageTabCtrl::OnGetDlgCode()
{
	return CTabCtrl::OnGetDlgCode() | DLGC_WANTTAB;
}

void CToolsDownloadsPageTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CWnd  *pWnd;

	if (nChar == VK_TAB)
	{
		if ((pWnd = GetParent()->GetParent()->GetNextDlgTabItem(GetParent(), (HIBYTE(GetKeyState(VK_SHIFT))) ? TRUE : FALSE)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CToolsDownloadsPageFolder

IMPLEMENT_DYNAMIC(CToolsDownloadsPageFolder, CLocalePropertySheetDialog)

CToolsDownloadsPageFolder::CToolsDownloadsPageFolder() : CLocalePropertySheetDialog()
{
	AddPage(&m_pageFiles);
	AddPage(&m_pageSchedule);
}

BOOL CToolsDownloadsPageFolder::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	INT  nIndex;

	if (CLocalePropertySheetDialog::Create(pParentWnd, WS_CHILD | WS_TABSTOP))
	{
		for (nIndex = GetPageCount() - 1, m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()); nIndex >= 0; nIndex--)
		{
			SetActivePage(nIndex);
			continue;
		}
		MoveWindow(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
		ShowWindow(SW_SHOWNORMAL);
		return TRUE;
	}
	return FALSE;
}

VOID CToolsDownloadsPageFolder::SetInfo(CONST CToolsDownloadProfileInfo *pProfileInfo, BOOL bUpdate)
{
	CToolsDownloadProfileInfo  cInfo;

	cInfo.Copy(pProfileInfo);
	m_pageFiles.SetInfo(&cInfo, (CONST CToolsDownloadProfileInfo *) NULL, bUpdate);
	m_pageSchedule.SetInfo(&cInfo, (CONST CToolsDownloadProfileInfo *) NULL, bUpdate);
}
VOID CToolsDownloadsPageFolder::SetInfo(CONST CToolsDownloadProfileInfo *pProfileInfo, CONST CToolsDownloadProfileInfo *pBackupProfileInfo)
{
	m_pageFiles.SetInfo(pProfileInfo, pBackupProfileInfo);
	m_pageSchedule.SetInfo(pProfileInfo, pBackupProfileInfo);
}

VOID CToolsDownloadsPageFolder::GetInfo(CToolsDownloadProfileInfo *pProfileInfo) CONST
{
	CToolsDownloadProfileInfo  cInfo;

	if (GetActivePage()->GetSafeHwnd() == m_pageFiles.GetSafeHwnd())
	{
		m_pageFiles.GetInfo(&cInfo);
		pProfileInfo->Copy(&cInfo);
		return;
	}
	if (GetActivePage()->GetSafeHwnd() == m_pageSchedule.GetSafeHwnd())
	{
		m_pageSchedule.GetInfo(&cInfo);
		pProfileInfo->Copy(&cInfo);
		return;
	}
}

CToolsDownloadsDialog *CToolsDownloadsPageFolder::GetParent() CONST
{
	return((CToolsDownloadsDialog *)CLocalePropertySheetDialog::GetParent());
}

VOID CToolsDownloadsPageFolder::RepositionButtons()
{
	GetDlgItem(IDOK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDCANCEL)->ShowWindow(SW_HIDE);
	GetDlgItem(ID_APPLY_NOW)->ShowWindow(SW_HIDE);
	GetDlgItem(IDHELP)->ShowWindow(SW_HIDE);
}

BOOL CToolsDownloadsPageFolder::Check(BOOL bModified) CONST
{
	return GetParent()->Check(bModified, CLocalePropertySheetDialog::Check(FALSE));
}
BOOL CToolsDownloadsPageFolder::Check(BOOL bModified, BOOL bChecked) CONST
{
	return((bChecked) ? CLocalePropertySheetDialog::Check(bModified) : FALSE);
}

BEGIN_MESSAGE_MAP(CToolsDownloadsPageFolder, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CToolsDownloadsPageFolder)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CToolsDownloadsPageFolder message handlers

void CToolsDownloadsPageFolder::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(m_wndTabCtrl.GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CLocalePropertySheetDialog::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CToolsDownloadsDialog dialog

IMPLEMENT_DYNCREATE(CToolsDownloadsDialog, CLocaleDialog)

CToolsDownloadsDialog::CToolsDownloadsDialog(CWnd *pParentWnd) : CLocaleDialog(CToolsDownloadsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CToolsDownloadsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CToolsDownloadsDialog::Initialize()
{
	CToolsDownloadProfiles  pProfiles;

	for (m_nLocked = 0; (m_pwndFolderCtrl = new CToolsDownloadsPageFolder) && GetToolsDownloadProfiles(pProfiles); ) return SetDownloadProfiles(pProfiles);
	return FALSE;
}

BOOL CToolsDownloadsDialog::SetDownloadProfiles(CONST CToolsDownloadProfiles &pProfiles)
{
	return m_pProfiles[0].Copy(&pProfiles) && m_pProfiles[1].Copy(&pProfiles) && m_pProfiles[2].Copy(&pProfiles);
}

BOOL CToolsDownloadsDialog::GetDownloadProfiles(CToolsDownloadProfiles &pProfiles) CONST
{
	return pProfiles.Copy(&m_pProfiles[0]);
}

BOOL CToolsDownloadsDialog::EnumDownloadProfiles()
{
	INT  nProfile;
	INT  nProfiles;
	CToolsDownloadProfileInfo  *pProfileInfo;

	for (nProfile = 0, nProfiles = (INT)m_pProfiles[0].GetSize(); nProfile < nProfiles; nProfile++)
	{
		if ((pProfileInfo = m_pProfiles[0].GetAt(nProfile))) SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pProfileInfo->GetName());
		continue;
	}
	SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_SETCURSEL);
	return((SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CToolsDownloadsDialog::SetDownloadProfileInfo(BOOL bInitialize)
{
	CToolsDownloadProfileInfo  *pProfileInfo[2];

	if ((pProfileInfo[0] = new CToolsDownloadProfileInfo))
	{
		for (Lock(), UpdateDownloadProfileInfo((pProfileInfo[1] = (FindDownloadProfileInfo()) ? FindDownloadProfileInfo() : pProfileInfo[0]), bInitialize); pProfileInfo[1] != (CToolsDownloadProfileInfo *)NULL; )
		{
			CheckDlgButton(IDC_TOOLSDOWNLOADS_DISABLED, (pProfileInfo[1]->GetOptions() & TOOLSDOWNLOADINFO_OPTION_DISABLED) ? TRUE : FALSE);
			CheckDlgButton(IDC_TOOLSDOWNLOADS_AUDITION, (pProfileInfo[1]->GetOptions() & TOOLSDOWNLOADINFO_OPTION_AUDITION) ? TRUE : FALSE);
			GetDlgItem(IDC_TOOLSDOWNLOADS_DISABLED)->EnableWindow();
			GetDlgItem(IDC_TOOLSDOWNLOADS_AUDITION)->EnableWindow();
			break;
		}
		delete pProfileInfo[0];
		Unlock();
	}
	Update(FALSE, m_pwndFolderCtrl->Check(FALSE));
}

VOID CToolsDownloadsDialog::UpdateDownloadProfileInfo(CONST CToolsDownloadProfileInfo *pProfileInfo, BOOL bInitialize)
{
	INT  nProfile;
	INT  nProfiles;
	CToolsDownloadProfileInfo  *pDownloadProfileInfo;

	for (; !pProfileInfo->GetName().IsEmpty() && bInitialize; )
	{
		if ((pDownloadProfileInfo = m_pProfiles[2].GetAt(m_pProfiles[2].Find(pProfileInfo->GetName()))))
		{
			pDownloadProfileInfo->Copy(pProfileInfo);
			break;
		}
		if ((pDownloadProfileInfo = new CToolsDownloadProfileInfo))
		{
			for (pDownloadProfileInfo->Copy(pProfileInfo); m_pProfiles[2].Add(pDownloadProfileInfo) < 0; )
			{
				delete pDownloadProfileInfo;
				break;
			}
		}
		break;
	}
	for (nProfile = 0, nProfiles = (INT)m_pProfiles[2].GetSize(), m_pwndFolderCtrl->SetInfo(pProfileInfo, (!pProfileInfo->GetName().IsEmpty()) ? m_pProfiles[2].GetAt(m_pProfiles[2].Find(pProfileInfo->GetName())) : ((bInitialize) ? pProfileInfo : (CONST CToolsDownloadProfileInfo *) NULL)); nProfile < nProfiles; nProfile++)
	{
		if ((pDownloadProfileInfo = m_pProfiles[2].GetAt(nProfile)) && m_pProfiles[0].Find(pDownloadProfileInfo->GetName()) < 0)
		{
			m_pProfiles[2].RemoveAt(nProfile);
			delete pDownloadProfileInfo;
			nProfiles--;
			nProfile--;
		}
	}
}

BOOL CToolsDownloadsDialog::GetDownloadProfileInfo(CToolsDownloadProfileInfo *pProfileInfo) CONST
{
	CString  szProfile;
	CToolsDownloadProfileInfo  *pDownloadProfileInfo[2];

	if ((pDownloadProfileInfo[0] = new CToolsDownloadProfileInfo))
	{
		for (GetDlgItem(IDC_TOOLSDOWNLOADS_PROFILE)->GetWindowText(szProfile), m_pwndFolderCtrl->GetInfo(pDownloadProfileInfo[0]), pDownloadProfileInfo[0]->SetName(szProfile); (pDownloadProfileInfo[1] = FindDownloadProfileInfo()) && pDownloadProfileInfo[0]->GetName() == pDownloadProfileInfo[1]->GetName(); )
		{
			pDownloadProfileInfo[0]->SetOptions((pDownloadProfileInfo[0]->GetOptions() & ~(TOOLSDOWNLOADINFO_OPTION_AUDITION | TOOLSDOWNLOADINFO_OPTION_DISABLED)) | ((IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_AUDITION)) ? TOOLSDOWNLOADINFO_OPTION_AUDITION : 0) | ((IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_DISABLED)) ? TOOLSDOWNLOADINFO_OPTION_DISABLED : 0));
			pProfileInfo->Copy(pDownloadProfileInfo[0]);
			delete pDownloadProfileInfo[0];
			return TRUE;
		}
		if (pProfileInfo != (CToolsDownloadProfileInfo *)NULL  &&  !pDownloadProfileInfo[1])
		{
			pDownloadProfileInfo[0]->SetOptions((pDownloadProfileInfo[0]->GetOptions() & ~(TOOLSDOWNLOADINFO_OPTION_AUDITION | TOOLSDOWNLOADINFO_OPTION_DISABLED)) | (((IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_AUDITION)) ? TOOLSDOWNLOADINFO_OPTION_AUDITION : 0) | ((IsDlgButtonChecked(IDC_TOOLSDOWNLOADS_DISABLED)) ? TOOLSDOWNLOADINFO_OPTION_DISABLED : 0)));
			pProfileInfo->Copy(pDownloadProfileInfo[0]);
		}
		delete pDownloadProfileInfo[0];
	}
	return FALSE;
}

CToolsDownloadProfileInfo *CToolsDownloadsDialog::FindDownloadProfileInfo() CONST
{
	CString  szProfile;

	GetDlgItem(IDC_TOOLSDOWNLOADS_PROFILE)->GetWindowText(szProfile);
	return m_pProfiles[0].GetAt(m_pProfiles[0].Find(szProfile));
}

CRect CToolsDownloadsDialog::CalcFolderSize() CONST
{
	CRect  rFolder;

	GetDlgItem(IDC_TOOLSDOWNLOADS_FOLDER)->GetWindowRect(rFolder);
	ScreenToClient(rFolder);
	return rFolder;
}

VOID CToolsDownloadsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TOOLSDOWNLOADS_PROFILE, (bCheck = CheckAccountPrivilege(PRIVILEGE_TOOLSDOWNLOADPROFILES_CHANGE)));
	AccessControl(IDC_TOOLSDOWNLOADS_DISABLED, bCheck);
	AccessControl(IDC_TOOLSDOWNLOADS_AUDITION, bCheck);
}

BOOL CToolsDownloadsDialog::IsModified() CONST
{
	return((!m_pProfiles[0].Compare(&m_pProfiles[1]) && m_pProfiles[0].Compare(&m_pProfiles[2]) && !m_pwndFolderCtrl->IsModified()) ? TRUE : FALSE);
}

BOOL CToolsDownloadsDialog::Check(BOOL bModified) CONST
{
	CToolsDownloadProfileInfo  cProfileInfo[2];

	GetDownloadProfileInfo(&cProfileInfo[0]);
	return((Check(bModified, m_pwndFolderCtrl->Check(FALSE, TRUE) || cProfileInfo[0].Compare(&cProfileInfo[1]))) ? (!bModified || IsModified()) : FALSE);
}
BOOL CToolsDownloadsDialog::Check(BOOL bModified, BOOL bChecked) CONST
{
	CString  szProfile;

	GetDlgItem(IDC_TOOLSDOWNLOADS_PROFILE)->GetWindowText(szProfile);
	Update(bModified, (bChecked = (!szProfile.IsEmpty() && bChecked)));
	return((bChecked) ? (!bModified || IsModified()) : FALSE);
}

VOID CToolsDownloadsDialog::Update(BOOL bModified, BOOL bChecked) CONST
{
	CToolsDownloadProfileInfo  *pProfileInfo[3];

	if (!IsLocked())
	{
		if ((pProfileInfo[0] = new CToolsDownloadProfileInfo))
		{
			if ((pProfileInfo[1] = new CToolsDownloadProfileInfo))
			{
				for (GetDownloadProfileInfo(pProfileInfo[0]); bModified; )
				{
					if ((pProfileInfo[2] = FindDownloadProfileInfo())) pProfileInfo[2]->Copy(pProfileInfo[0]);
					m_pwndFolderCtrl->SetInfo(pProfileInfo[0], FALSE);
					break;
				}
				GetDlgItem(IDC_TOOLSDOWNLOADS_SAVE)->EnableWindow(((((pProfileInfo[2] = FindDownloadProfileInfo()) && ((m_pProfiles[2].Find(pProfileInfo[0]->GetName()) >= 0 && !pProfileInfo[0]->Compare(m_pProfiles[2].GetAt(m_pProfiles[2].Find(pProfileInfo[0]->GetName())))) || m_pwndFolderCtrl->IsModified())) || !pProfileInfo[2]) && GetDlgItem(IDC_TOOLSDOWNLOADS_PROFILE)->GetWindowTextLength() > 0 && bChecked) ? CheckAccountPrivilege(PRIVILEGE_TOOLSDOWNLOADPROFILES_CHANGE) : FALSE);
				GetDlgItem(IDC_TOOLSDOWNLOADS_DELETE)->EnableWindow((pProfileInfo[2] != (CToolsDownloadProfileInfo *)NULL  &&  !pProfileInfo[2]->Compare(pProfileInfo[1])) ? CheckAccountPrivilege(PRIVILEGE_TOOLSDOWNLOADPROFILES_CHANGE) : FALSE);
				GetDlgItem(IDC_TOOLSDOWNLOADS_DELETEALL)->EnableWindow((pProfileInfo[2] != (CToolsDownloadProfileInfo *)NULL && (m_pProfiles[0].GetSize() > 1 || !pProfileInfo[2]->Compare(pProfileInfo[1]))) ? CheckAccountPrivilege(PRIVILEGE_TOOLSDOWNLOADPROFILES_CHANGE) : FALSE);
				delete pProfileInfo[1];
			}
			delete pProfileInfo[0];
		}
	}
}

VOID CToolsDownloadsDialog::Lock()
{
	m_nLocked++;
}

BOOL CToolsDownloadsDialog::IsLocked() CONST
{
	return(m_nLocked > 0);
}

VOID CToolsDownloadsDialog::Unlock()
{
	m_nLocked--;
}

void CToolsDownloadsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CToolsDownloadsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CToolsDownloadsDialog::PostNcDestroy()
{
	m_pProfiles[0].RemoveAll();
	m_pProfiles[1].RemoveAll();
	m_pProfiles[2].RemoveAll();
	delete m_pwndFolderCtrl;
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CToolsDownloadsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CToolsDownloadsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_SAVE, OnSave)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_DELETE, OnDelete)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_DELETEALL, OnDeleteAll)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_DISABLED, OnDisabled)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_AUDITION, OnAudition)
	ON_BN_CLICKED(IDC_TOOLSDOWNLOADS_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TOOLSDOWNLOADS_PROFILE, OnEditchangeProfile)
	ON_CBN_SELCHANGE(IDC_TOOLSDOWNLOADS_PROFILE, OnSelchangeProfile)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CToolsDownloadsDialog message handlers

BOOL CToolsDownloadsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	for (CLocaleDialog::OnInitDialog(); m_pwndFolderCtrl->Create(this, CalcFolderSize()) && SetChildSheet(m_pwndFolderCtrl, GetDlgItem(IDC_TOOLSDOWNLOADS_FOLDER - 1)); )
	{
		if (EnumDownloadProfiles()) SetDownloadProfileInfo(TRUE);
		break;
	}
	GetDlgItem(IDC_TOOLSDOWNLOADS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_PROPERTIES)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_PROFILE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_PROFILE)->EnableWindow();
	GetDlgItem(IDC_TOOLSDOWNLOADS_PROFILE)->SetFocus();
	AdjustToPrivileges();
	return FALSE;
}

void CToolsDownloadsDialog::OnSave()
{
	INT  nIndex[2];
	CString  szProfile;
	CToolsDownloadProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	if (!(pProfileInfo = FindDownloadProfileInfo()))
	{
		for (GetDlgItem(IDC_TOOLSDOWNLOADS_PROFILE)->GetWindowText(szProfile); (nIndex[0] = (INT)SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szProfile)) >= 0; )
		{
			if ((pProfileInfo = new CToolsDownloadProfileInfo) != (CToolsDownloadProfileInfo *)NULL)
			{
				for (GetDownloadProfileInfo(pProfileInfo); (nIndex[1] = m_pProfiles[0].Add(pProfileInfo)) < 0; )
				{
					delete pProfileInfo;
					break;
				}
				if (nIndex[1] >= 0)
				{
					SetDownloadProfileInfo(TRUE);
					break;
				}
			}
			SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_DELETESTRING, nIndex[0]);
			break;
		}
	}
	else
	{
		GetDownloadProfileInfo(pProfileInfo);
		SetDownloadProfileInfo(TRUE);
	}
	GetDlgItem(IDC_TOOLSDOWNLOADS_PROFILE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsDialog::OnDelete()
{
	INT  nIndex;
	CString  szProfile;
	CToolsDownloadProfileInfo  *pProfileInfo[2];
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TOOLSDOWNLOADS_PROFILE)->GetWindowText(szProfile); (pProfileInfo[0] = FindDownloadProfileInfo()); )
	{
		if (szProfile == STRING(IDS_TOOLSDOWNLOADS_DEFAULT_NAME))
		{
			if ((pProfileInfo[1] = new CToolsDownloadProfileInfo))
			{
				if ((nIndex = m_pProfiles[0].Find(szProfile)) >= 0)
				{
					m_pProfiles[0].SetAt(nIndex, pProfileInfo[1]);
					SetDownloadProfileInfo();
					delete pProfileInfo[0];
					break;
				}
				delete pProfileInfo[1];
			}
			break;
		}
		if (SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szProfile)) >= 0)
		{
			for (SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_SETCURSEL); (nIndex = m_pProfiles[0].Find(szProfile)) >= 0; )
			{
				delete m_pProfiles[0].GetAt(nIndex);
				m_pProfiles[0].RemoveAt(nIndex);
				break;
			}
			SetDownloadProfileInfo((!SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_GETCOUNT)) ? TRUE : FALSE);
		}
		break;
	}
	GetDlgItem(IDC_TOOLSDOWNLOADS_PROFILE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsDialog::OnDeleteAll()
{
	INT  nIndex;
	INT  nProfile;
	INT  nProfiles;
	CString  szProfile;
	CToolsDownloadProfileInfo  *pProfileInfo;
	CHourglassCursor  cCursor;

	for (nProfile = 0, nProfiles = (INT)SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_GETCOUNT); nProfile < nProfiles; nProfile++)
	{
		if ((szProfile = Combobox_GetText(GetDlgItem(IDC_TOOLSDOWNLOADS_PROFILE), nProfile)) == STRING(IDS_TOOLSDOWNLOADS_DEFAULT_NAME))
		{
			if ((pProfileInfo = new CToolsDownloadProfileInfo))
			{
				if ((nIndex = m_pProfiles[0].Find(szProfile)) >= 0)
				{
					delete m_pProfiles[0].GetAt(nIndex);
					m_pProfiles[0].SetAt(nIndex, pProfileInfo);
					continue;
				}
				delete pProfileInfo;
			}
			continue;
		}
		if (SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szProfile)) >= 0)
		{
			if ((nIndex = m_pProfiles[0].Find(szProfile)) >= 0)
			{
				delete m_pProfiles[0].GetAt(nIndex);
				m_pProfiles[0].RemoveAt(nIndex);
				nProfiles--;
				nProfile--;
			}
		}
	}
	if (SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_GETCOUNT) >= 0)
	{
		SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_SETCURSEL, max(SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TOOLSDOWNLOADS_DEFAULT_NAME)), 0));
		SetDownloadProfileInfo(TRUE);
	}
	GetDlgItem(IDC_TOOLSDOWNLOADS_PROFILE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsDialog::OnDisabled()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsDialog::OnAudition()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsDialog::OnEditchangeProfile()
{
	CString  szProfile;

	for (GetDlgItem(IDC_TOOLSDOWNLOADS_PROFILE)->GetWindowText(szProfile); SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szProfile) >= 0; )
	{
		SetDownloadProfileInfo();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsDialog::OnSelchangeProfile()
{
	for (; SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TOOLSDOWNLOADS_PROFILE, CB_GETCURSEL)) >= 0; )
	{
		SetDownloadProfileInfo();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsDownloadsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	ReportEvent((!SetToolsDownloadProfiles(m_pProfiles[0])) ? SYSTEM_WARNING_TOOLSDOWNLOADPROFILES_UPDATE_FAILURE : SYSTEM_NOERROR);
	EndDialog(IDOK);
}

BOOL CToolsDownloadsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TOOLSDOWNLOADSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CToolsDownloadsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TOOLSDOWNLOADSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CToolsOptionsDatabasePage property page

IMPLEMENT_DYNCREATE(CToolsOptionsDatabasePage, CLocalePropertyPage)

CToolsOptionsDatabasePage::CToolsOptionsDatabasePage() : CLocalePropertyPage(CToolsOptionsDatabasePage::IDD)
{
	//{{AFX_DATA_INIT(CToolsOptionsDatabasePage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CToolsOptionsDatabasePage::Initialize()
{
	GetToolsDatabaseService()->GetUpdateBehavior(m_nOption, m_tStartTime, m_tStopTime);
	return TRUE;
}

CToolsOptionsDialog *CToolsOptionsDatabasePage::GetParent() CONST
{
	return((CToolsOptionsDialog *)CLocalePropertyPage::GetParent());
}

VOID CToolsOptionsDatabasePage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_DONOTHING, (bCheck = CheckAccountPrivilege(PRIVILEGE_TOOLSDATABASEOPTIONS_CHANGE)));
	AccessControl(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_INFORMBYEVENT, bCheck);
	AccessControl(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEIMMEDIATELY, bCheck);
	AccessControl(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME, bCheck);
	AccessControl(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME, bCheck);
	AccessControl(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME, bCheck);
	AccessControl(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_RELOADNOW, bCheck);
}

BOOL CToolsOptionsDatabasePage::IsModified(BOOL bAll) CONST
{
	CTimeKey  tStartTime;
	CTimeKey  tStopTime;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		tStartTime = Timespinbox_GetTime(GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME));
		tStopTime = Timespinbox_GetTime(GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME));
		return(((IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_DONOTHING) && m_nOption != TOOLSDATABASESERVICE_OPTION_DONOTHING) || (IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_INFORMBYEVENT) && m_nOption != TOOLSDATABASESERVICE_OPTION_INFORMBYEVENT) || (IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEIMMEDIATELY) && m_nOption != TOOLSDATABASESERVICE_OPTION_UPDATEIMMEDIATELY) || (IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME) && (m_nOption != TOOLSDATABASESERVICE_OPTION_UPDATEATTIME || m_tStartTime.GetTime() % SECONDSPERDAY != tStartTime.GetTime() % SECONDSPERDAY || m_tStopTime.GetTime() % SECONDSPERDAY != tStopTime.GetTime() % SECONDSPERDAY)) || IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_RELOADNOW)) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::IsModified() : FALSE);
}

BOOL CToolsOptionsDatabasePage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

VOID CToolsOptionsDatabasePage::Update()
{
	if (IsWindow(GetSafeHwnd()))
	{
		for (GetToolsDatabaseService()->SetUpdateBehavior((IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_DONOTHING)*TOOLSDATABASESERVICE_OPTION_DONOTHING) | (IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_INFORMBYEVENT)*TOOLSDATABASESERVICE_OPTION_INFORMBYEVENT) | (IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEIMMEDIATELY)*TOOLSDATABASESERVICE_OPTION_UPDATEIMMEDIATELY) | (IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME)*TOOLSDATABASESERVICE_OPTION_UPDATEATTIME), (IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME)) ? Timespinbox_GetTime(GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME)) : 0, (IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME)) ? Timespinbox_GetTime(GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME)) : 0); IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_RELOADNOW); )
		{
			GetMainWnd()->SetTimer(TOOLSDATABASESERVICE_BEHAVIOR_TIMERID, TOOLSDATABASESERVICE_BEHAVIOR_TIMEOUT, NULL);
			break;
		}
	}
}

void CToolsOptionsDatabasePage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CToolsOptionsDatabasePage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CToolsOptionsDatabasePage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CToolsOptionsDatabasePage)
	ON_BN_CLICKED(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_DONOTHING, OnDoNothing)
	ON_BN_CLICKED(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_INFORMBYEVENT, OnInformByEvent)
	ON_BN_CLICKED(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEIMMEDIATELY, OnUpdateImmediately)
	ON_BN_CLICKED(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME, OnUpdateAtTime)
	ON_BN_CLICKED(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_RELOADNOW, OnReloadNow)
	ON_CONTROL(TSBXN_CHANGE, IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME, OnSpinchangeStartTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME, OnSpinchangeStopTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CToolsOptionsDatabasePage message handlers

BOOL CToolsOptionsDatabasePage::OnInitDialog()
{
	CFileFindEx  cFileFind;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	CheckDlgButton(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_DONOTHING, (m_nOption == TOOLSDATABASESERVICE_OPTION_DONOTHING) ? TRUE : FALSE);
	CheckDlgButton(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_INFORMBYEVENT, (m_nOption == TOOLSDATABASESERVICE_OPTION_INFORMBYEVENT) ? TRUE : FALSE);
	CheckDlgButton(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEIMMEDIATELY, (m_nOption == TOOLSDATABASESERVICE_OPTION_UPDATEIMMEDIATELY) ? TRUE : FALSE);
	CheckDlgButton(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME, (m_nOption == TOOLSDATABASESERVICE_OPTION_UPDATEATTIME) ? TRUE : FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME), (m_tStartTime > 0 && m_tStopTime > 0) ? m_tStartTime : CTime::GetCurrentTime().GetTime());
	Timespinbox_SetTime(GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME), (m_tStartTime > 0 && m_tStopTime > 0) ? m_tStopTime : CTime::GetCurrentTime().GetTime());
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_DONOTHING)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_INFORMBYEVENT)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEIMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME));
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME));
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME));
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME));
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_RELOADNOW)->EnableWindow(cFileFind.FindFile(GetDatabase()->GetUpdateFileName()));
	AdjustToPrivileges();
	return TRUE;
}

void CToolsOptionsDatabasePage::OnDoNothing()
{
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsDatabasePage::OnInformByEvent()
{
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsDatabasePage::OnUpdateImmediately()
{
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsDatabasePage::OnUpdateAtTime()
{
	CTimeKey  tTime;
	CHourglassCursor  cCursor;

	Timespinbox_SetTime(GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME), CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TOOLOPTIONSDATABASE_UPDATE_STARTTIME));
	Timespinbox_SetTime(GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME), CTimeKey(SECONDSPERDAY*(tTime.GetTime() / SECONDSPERDAY) + TOOLOPTIONSDATABASE_UPDATE_STOPTIME));
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STOPTIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_DATABASEPAGE_ACTION_UPDATEATTIME_STARTTIME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsDatabasePage::OnReloadNow()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsDatabasePage::OnSpinchangeStartTime()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsDatabasePage::OnSpinchangeStopTime()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CToolsOptionsSatelliteTrackingPage property page

IMPLEMENT_DYNCREATE(CToolsOptionsSatelliteTrackingPage, CLocalePropertyPage)

CToolsOptionsSatelliteTrackingPage::CToolsOptionsSatelliteTrackingPage() : CLocalePropertyPage(CToolsOptionsSatelliteTrackingPage::IDD)
{
	//{{AFX_DATA_INIT(CToolsOptionsSatelliteTrackingPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CToolsOptionsSatelliteTrackingPage::Initialize()
{
	CSatelliteTrackingToolWnd  *pSatelliteTrackingToolWnd;

	if ((pSatelliteTrackingToolWnd = (CSatelliteTrackingToolWnd *)GetDisplayArea()->FindDisplay(DISPLAY_TYPE_SATELLITETRACKINGTOOL)))
	{
		m_szConfigurationFileName = pSatelliteTrackingToolWnd->GetConfigurationFileName();
		m_szHelpFileName = pSatelliteTrackingToolWnd->GetHelpFileName();
		m_bEnabled = pSatelliteTrackingToolWnd->IsEnabled();
		return TRUE;
	}
	return FALSE;
}

CToolsOptionsDialog *CToolsOptionsSatelliteTrackingPage::GetParent() CONST
{
	return((CToolsOptionsDialog *)CLocalePropertyPage::GetParent());
}

VOID CToolsOptionsSatelliteTrackingPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_CONFIGURATIONFILENAME)->EnableWindow((bCheck = CheckAccountPrivilege(PRIVILEGE_TOOLSSATELLITETRACKINGOPTIONS_CHANGE)));
	GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_HELPFILENAME)->EnableWindow(bCheck);
	GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_ENABLED)->EnableWindow(bCheck);
}

BOOL CToolsOptionsSatelliteTrackingPage::IsModified(BOOL bAll) CONST
{
	CString  szFileName[2];

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_CONFIGURATIONFILENAME)->GetWindowText(szFileName[0]);
		GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_HELPFILENAME)->GetWindowText(szFileName[1]);
		return((m_szConfigurationFileName.CompareNoCase(szFileName[0]) || m_szHelpFileName.CompareNoCase(szFileName[1]) || m_bEnabled != IsDlgButtonChecked(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_ENABLED)) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::IsModified() : FALSE);
}

BOOL CToolsOptionsSatelliteTrackingPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? (GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_CONFIGURATIONFILENAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_HELPFILENAME)->GetWindowTextLength() > 0) : CLocalePropertyPage::Check()) : TRUE);
}

VOID CToolsOptionsSatelliteTrackingPage::Update()
{
	CString  szFileName[2];
	CSatelliteTrackingToolWnd  *pSatelliteTrackingToolWnd;

	if (IsWindow(GetSafeHwnd()))
	{
		if ((pSatelliteTrackingToolWnd = (CSatelliteTrackingToolWnd *)GetDisplayArea()->FindDisplay(DISPLAY_TYPE_SATELLITETRACKINGTOOL)))
		{
			GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_CONFIGURATIONFILENAME)->GetWindowText(szFileName[0]);
			GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_HELPFILENAME)->GetWindowText(szFileName[1]);
			pSatelliteTrackingToolWnd->SetConfigurationFileName(szFileName[0]);
			pSatelliteTrackingToolWnd->SetHelpFileName(szFileName[1]);
			pSatelliteTrackingToolWnd->Enable(IsDlgButtonChecked(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_ENABLED));
		}
	}
}

void CToolsOptionsSatelliteTrackingPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CToolsOptionsSatelliteTrackingPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CToolsOptionsSatelliteTrackingPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CToolsOptionsSatelliteTrackingPage)
	ON_BN_CLICKED(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_ENABLED, OnEnable)
	ON_BN_CLICKED(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_CONFIGURATIONFILENAME_BROWSE, OnBrowseConfigurationFileName)
	ON_BN_CLICKED(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_HELPFILENAME_BROWSE, OnBrowseHelpFileName)
	ON_EN_CHANGE(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_CONFIGURATIONFILENAME, OnEditchangeConfigurationFileName)
	ON_EN_CHANGE(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_HELPFILENAME, OnEditchangeHelpFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CToolsOptionsSatelliteTrackingPage message handlers

BOOL CToolsOptionsSatelliteTrackingPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	CheckDlgButton(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_ENABLED, m_bEnabled);
	GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_CONFIGURATIONFILENAME)->SetWindowText(m_szConfigurationFileName);
	GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_HELPFILENAME)->SetWindowText(m_szHelpFileName);
	GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_CONFIGURATIONFILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_CONFIGURATIONFILENAME)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_CONFIGURATIONFILENAME_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TOOLSSATELLITETRACKINGOPTIONS_CHANGE));
	GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_HELPFILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_HELPFILENAME)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_HELPFILENAME_BROWSE)->EnableWindow(CheckAccountPrivilege(PRIVILEGE_TOOLSSATELLITETRACKINGOPTIONS_CHANGE));
	GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_ENABLED)->EnableWindow();
	AdjustToPrivileges();
	return TRUE;
}

void CToolsOptionsSatelliteTrackingPage::OnEnable()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsSatelliteTrackingPage::OnBrowseConfigurationFileName()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_CONFIGURATIONFILENAME, STRING(IDS_FILEBROWSEDIALOG_JSONFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_JSONFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_CONFIGURATIONFILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	}
	SendDlgItemMessage(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_CONFIGURATIONFILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_CONFIGURATIONFILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsSatelliteTrackingPage::OnBrowseHelpFileName()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_HELPFILENAME, STRING(IDS_FILEBROWSEDIALOG_HELPFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_HELPFILEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_HELPFILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	}
	SendDlgItemMessage(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_HELPFILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TOOLSOPTIONS_SATELLITETRACKINGPAGE_HELPFILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsSatelliteTrackingPage::OnEditchangeConfigurationFileName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsSatelliteTrackingPage::OnEditchangeHelpFileName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CToolsOptionsEMailPage property page

IMPLEMENT_DYNCREATE(CToolsOptionsEMailPage, CLocalePropertyPage)

CToolsOptionsEMailPage::CToolsOptionsEMailPage() : CLocalePropertyPage(CToolsOptionsEMailPage::IDD)
{
	//{{AFX_DATA_INIT(CToolsOptionsEMailPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CToolsOptionsEMailPage::Initialize()
{
	m_szServer = GetEMailSystem()->GetServer();
	m_szAccountName = GetEMailSystem()->GetAccountName();
	m_szAccountAddress = GetEMailSystem()->GetAccountAddress();
	m_szAccountLogin = GetEMailSystem()->GetAccountLogin();
	m_szAccountPassword = GetEMailSystem()->GetAccountPassword();
	m_nType = GetEMailSystem()->GetSecurity();
	m_nPort = GetEMailSystem()->GetPort();
	m_nOptions[0] = m_nOptions[1] = GetEMailSystem()->GetExtraOptions();
	m_nPriority[0] = m_nPriority[1] = GetEMailSystem()->GetPriority();
	m_nSSLProtocol[0] = m_nSSLProtocol[1] = GetEMailSystem()->GetSSLProtocol();
	m_nAuthentication[0] = m_nAuthentication[1] = GetEMailSystem()->GetAuthentication();
	m_szCharsetEncoding[0] = m_szCharsetEncoding[1] = GetEMailSystem()->GetCharsetEncoding();
	m_szConnectBoundIP[0] = m_szConnectBoundIP[1] = GetEMailSystem()->GetConnectIPAddress();
	return TRUE;
}

CToolsOptionsDialog *CToolsOptionsEMailPage::GetParent() CONST
{
	return((CToolsOptionsDialog *)CLocalePropertyPage::GetParent());
}

VOID CToolsOptionsEMailPage::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TOOLSOPTIONS_EMAILPAGE_SERVER, (bCheck = CheckAccountPrivilege(PRIVILEGE_TOOLSEMAILOPTIONS_CHANGE)));
	AccessControl(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_PLAINTEXT, bCheck);
	AccessControl(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_SSLTLS, bCheck);
	AccessControl(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_STARTTLS, bCheck);
	AccessControl(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_AUTOSTARTTLS, bCheck);
	AccessControl(IDC_TOOLSOPTIONS_EMAILPAGE_PORT, bCheck);
	AccessControl(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_NAME, bCheck);
	AccessControl(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_ADDRESS, bCheck);
	AccessControl(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINNAME, bCheck);
	AccessControl(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINPASSWORD, bCheck);
}

BOOL CToolsOptionsEMailPage::IsModified(BOOL bAll) CONST
{
	CString  szServer;
	CString  szAccountName;
	CString  szAccountAddress;
	CString  szAccountLogin;
	CString  szAccountPassword;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_SERVER)->GetWindowText(szServer);
		GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_NAME)->GetWindowText(szAccountName);
		GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_ADDRESS)->GetWindowText(szAccountAddress);
		GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINNAME)->GetWindowText(szAccountLogin);
		GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINPASSWORD)->GetWindowText(szAccountPassword);
		return((m_szServer.Compare(szServer) || m_szAccountName.Compare(szAccountName) || m_szAccountAddress.Compare(szAccountAddress) || m_szAccountLogin.Compare(szAccountLogin) || m_szAccountPassword.Compare(szAccountPassword) || (IsDlgButtonChecked(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_PLAINTEXT) && m_nType != CSMTPConnection::PlainText) || (IsDlgButtonChecked(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_SSLTLS) && m_nType != CSMTPConnection::SSL_TLS) || (IsDlgButtonChecked(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_STARTTLS) && m_nType != CSMTPConnection::STARTTLS) || (IsDlgButtonChecked(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_AUTOSTARTTLS) && m_nType != CSMTPConnection::AutoUpgradeToSTARTTLS) || m_nPort != Spinbox_GetPos(GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_PORT)) || m_szCharsetEncoding[0] != m_szCharsetEncoding[1] || m_szConnectBoundIP[0] != m_szConnectBoundIP[1] || m_nAuthentication[0] != m_nAuthentication[1] || m_nSSLProtocol[0] != m_nSSLProtocol[1] || m_nPriority[0] != m_nPriority[1] || m_nOptions[0] != m_nOptions[1]) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::IsModified() : FALSE);
}

BOOL CToolsOptionsEMailPage::Check(BOOL bAll) CONST
{
	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		return(GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_SERVER)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_NAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_ADDRESS)->GetWindowTextLength() > 0 && (IsDlgButtonChecked(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_PLAINTEXT) || IsDlgButtonChecked(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_SSLTLS) || IsDlgButtonChecked(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_STARTTLS) || IsDlgButtonChecked(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_AUTOSTARTTLS)));
	}
	return((bAll) ? CLocalePropertyPage::Check() : TRUE);
}

VOID CToolsOptionsEMailPage::Update()
{
	CString  szServer;
	CString  szAccountName;
	CString  szAccountAddress;
	CString  szAccountLogin;
	CString  szAccountPassword;

	if (IsWindow(GetSafeHwnd()))
	{
		for (GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_SERVER)->GetWindowText(szServer), GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_NAME)->GetWindowText(szAccountName), GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_ADDRESS)->GetWindowText(szAccountAddress), GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINNAME)->GetWindowText(szAccountLogin), GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINPASSWORD)->GetWindowText(szAccountPassword); GetEMailSystem()->Lock(); )
		{
			GetEMailSystem()->SetServer(szServer);
			GetEMailSystem()->SetAccountName(szAccountName);
			GetEMailSystem()->SetAccountAddress(szAccountAddress);
			GetEMailSystem()->SetAccountLogin(szAccountLogin);
			GetEMailSystem()->SetAccountPassword(szAccountPassword);
			GetEMailSystem()->SetSecurity((IsDlgButtonChecked(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_PLAINTEXT)) ? CSMTPConnection::PlainText : ((IsDlgButtonChecked(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_SSLTLS)) ? CSMTPConnection::SSL_TLS : ((IsDlgButtonChecked(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_STARTTLS)) ? CSMTPConnection::STARTTLS : CSMTPConnection::AutoUpgradeToSTARTTLS)));
			GetEMailSystem()->SetPort((UINT)Spinbox_GetPos(GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_PORT)));
			GetEMailSystem()->SetCharsetEncoding(m_szCharsetEncoding[0]);
			GetEMailSystem()->SetConnectIPAddress(m_szConnectBoundIP[0]);
			GetEMailSystem()->SetAuthentication(m_nAuthentication[0]);
			GetEMailSystem()->SetSSLProtocol(m_nSSLProtocol[0]);
			GetEMailSystem()->SetExtraOptions(m_nOptions[0]);
			GetEMailSystem()->SetPriority(m_nPriority[0]);
			GetEMailSystem()->Unlock();
			break;
		}
	}
}

void CToolsOptionsEMailPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CToolsOptionsEMailPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CToolsOptionsEMailPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CToolsOptionsEMailPage)
	ON_BN_CLICKED(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_PLAINTEXT, OnTypePlainText)
	ON_BN_CLICKED(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_SSLTLS, OnTypeSSLTLS)
	ON_BN_CLICKED(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_STARTTLS, OnTypeSTARTTLS)
	ON_BN_CLICKED(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_AUTOSTARTTLS, OnTypeAutoSTARTTLS)
	ON_BN_CLICKED(IDC_TOOLSOPTIONS_EMAILPAGE_ADVANCED, OnAdvancedSettings)
	ON_EN_CHANGE(IDC_TOOLSOPTIONS_EMAILPAGE_SERVER, OnEditchangeServer)
	ON_EN_CHANGE(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_NAME, OnEditchangeAccountName)
	ON_EN_CHANGE(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_ADDRESS, OnEditchangeAccountAddress)
	ON_EN_CHANGE(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINNAME, OnEditchangeAccountLoginName)
	ON_EN_CHANGE(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINPASSWORD, OnEditchangeAccountLoginPassword)
	ON_CONTROL(SBXN_CHANGE, IDC_TOOLSOPTIONS_EMAILPAGE_PORT, OnSpinchangePort)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CToolsOptionsEMailPage message handlers

BOOL CToolsOptionsEMailPage::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	CheckDlgButton(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_PLAINTEXT, m_nType == CSMTPConnection::PlainText);
	CheckDlgButton(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_SSLTLS, m_nType == CSMTPConnection::SSL_TLS);
	CheckDlgButton(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_STARTTLS, m_nType == CSMTPConnection::STARTTLS);
	CheckDlgButton(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_AUTOSTARTTLS, m_nType == CSMTPConnection::AutoUpgradeToSTARTTLS);
	Spinbox_SetRange(GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_PORT), TOOLOPTIONSEMAIL_MINIMUMPORT, TOOLOPTIONSEMAIL_MAXIMUMPORT);
	Spinbox_SetPos(GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_PORT), m_nPort);
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_SERVER)->SetWindowText(m_szServer);
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_NAME)->SetWindowText(m_szAccountName);
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_ADDRESS)->SetWindowText(m_szAccountAddress);
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINNAME)->SetWindowText(m_szAccountLogin);
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINPASSWORD)->SetWindowText(m_szAccountPassword);
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_SERVER_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_SERVER)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_PLAINTEXT)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_SSLTLS)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_STARTTLS)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_AUTOSTARTTLS)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_PORT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_PORT)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ADVANCED)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_NAME)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_ADDRESS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_ADDRESS)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINNAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINNAME)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINPASSWORD_STATIC)->EnableWindow();
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINPASSWORD)->EnableWindow();
	AdjustToPrivileges();
	return TRUE;
}

void CToolsOptionsEMailPage::OnTypePlainText()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsEMailPage::OnTypeSSLTLS()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsEMailPage::OnTypeSTARTTLS()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsEMailPage::OnTypeAutoSTARTTLS()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsEMailPage::OnAdvancedSettings()
{
	UINT  nPort;
	CString  szServer;
	CString  szAccountName;
	CString  szAccountAddress;
	CString  szAccountLogin;
	CString  szAccountPassword;
	CSMTPConnection::ConnectionType  nType;
	CEMailSystemConfigurationDialog  cEMailSystemConfigurationDialog(this);

	for (GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_SERVER)->GetWindowText(szServer), nType = (IsDlgButtonChecked(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_PLAINTEXT)) ? CSMTPConnection::PlainText : ((IsDlgButtonChecked(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_SSLTLS)) ? CSMTPConnection::SSL_TLS : ((IsDlgButtonChecked(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_STARTTLS)) ? CSMTPConnection::STARTTLS : CSMTPConnection::AutoUpgradeToSTARTTLS)), nPort = (UINT)Spinbox_GetPos(GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_PORT)), GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_NAME)->GetWindowText(szAccountName), GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_ADDRESS)->GetWindowText(szAccountAddress), GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINNAME)->GetWindowText(szAccountLogin), GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINPASSWORD)->GetWindowText(szAccountPassword); cEMailSystemConfigurationDialog.DoModal(szServer, nType, m_nAuthentication[0], m_nSSLProtocol[0], m_nPriority[0], m_nOptions[0], nPort, m_szConnectBoundIP[0], m_szCharsetEncoding[0], szAccountName, szAccountAddress, szAccountLogin, szAccountPassword) == IDOK; )
	{
		CheckDlgButton(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_PLAINTEXT, nType == CSMTPConnection::PlainText);
		CheckDlgButton(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_SSLTLS, nType == CSMTPConnection::SSL_TLS);
		CheckDlgButton(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_STARTTLS, nType == CSMTPConnection::STARTTLS);
		CheckDlgButton(IDC_TOOLSOPTIONS_EMAILPAGE_TYPE_AUTOSTARTTLS, nType == CSMTPConnection::AutoUpgradeToSTARTTLS);
		Spinbox_SetPos(GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_PORT), nPort);
		GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_SERVER)->SetWindowText(szServer);
		GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_NAME)->SetWindowText(szAccountName);
		GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_ACCOUNT_ADDRESS)->SetWindowText(szAccountAddress);
		GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINNAME)->SetWindowText((m_nAuthentication[0] != CSMTPConnection::AUTH_NONE) ? szAccountLogin : EMPTYSTRING);
		GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINPASSWORD)->SetWindowText((m_nAuthentication[0] != CSMTPConnection::AUTH_NONE) ? szAccountPassword : EMPTYSTRING);
		GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINNAME_STATIC)->EnableWindow((m_nAuthentication[0] != CSMTPConnection::AUTH_NONE) ? TRUE : FALSE);
		GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINNAME)->EnableWindow((m_nAuthentication[0] != CSMTPConnection::AUTH_NONE) ? TRUE : FALSE);
		GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINPASSWORD_STATIC)->EnableWindow((m_nAuthentication[0] != CSMTPConnection::AUTH_NONE) ? TRUE : FALSE);
		GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_LOGINPASSWORD)->EnableWindow((m_nAuthentication[0] != CSMTPConnection::AUTH_NONE) ? TRUE : FALSE);
		break;
	}
	SendDlgItemMessage(IDC_TOOLSOPTIONS_EMAILPAGE_SERVER, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TOOLSOPTIONS_EMAILPAGE_SERVER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsEMailPage::OnEditchangeServer()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsEMailPage::OnEditchangeAccountName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsEMailPage::OnEditchangeAccountAddress()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsEMailPage::OnEditchangeAccountLoginName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsEMailPage::OnEditchangeAccountLoginPassword()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CToolsOptionsEMailPage::OnSpinchangePort()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}


/////////////////////////////////////////////////////////////////////////////
// CToolsOptionsTabCtrl

IMPLEMENT_DYNCREATE(CToolsOptionsTabCtrl, CTabCtrl)

CToolsOptionsDialog *CToolsOptionsTabCtrl::GetParent() CONST
{
	return((CToolsOptionsDialog *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CToolsOptionsTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CToolsOptionsTabCtrl)
	ON_WM_KEYDOWN()
	ON_WM_LBUTTONDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CToolsOptionsTabCtrl message handlers

void CToolsOptionsTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	INT  nIndex;
	INT  nCount;
	CWnd  *pWnd;

	if ((nChar == VK_LEFT  &&  GetCurSel() > 0) || (nChar == VK_RIGHT  &&  GetCurSel() < GetItemCount() - 1))
	{
		for (nIndex = (nChar == VK_LEFT) ? (GetCurSel() - 1) : (GetCurSel() + 1), nCount = GetItemCount(); nIndex >= 0 && nIndex < nCount; )
		{
			if (!GetParent()->CheckPageAccessibility(nIndex))
			{
				if (nChar == VK_RIGHT  &&  nIndex < nCount - 1)
				{
					nIndex++;
					continue;
				}
				if (nChar == VK_LEFT  &&  nIndex > 0)
				{
					nIndex--;
					continue;
				}
				CAudioDevice::AlertBySound();
				return;
			}
			GetParent()->SetActivePage(nIndex);
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}

void CToolsOptionsTabCtrl::OnLButtonDown(UINT nFlags, CPoint point)
{
	INT  nIndex;
	INT  nCount;
	CRect  rTab;

	for (nIndex = 0, nCount = GetItemCount(), SetFocus(); nIndex < nCount; nIndex++)
	{
		if (GetItemRect(nIndex, rTab) && rTab.PtInRect(point))
		{
			if (!GetParent()->CheckPageAccessibility(nIndex))
			{
				CAudioDevice::AlertBySound();
				return;
			}
			break;
		}
	}
	CTabCtrl::OnLButtonDown(nFlags, point);
}


/////////////////////////////////////////////////////////////////////////////
// CToolsOptionsDialog

IMPLEMENT_DYNCREATE(CToolsOptionsDialog, CLocalePropertySheetDialog)

CToolsOptionsDialog::CToolsOptionsDialog(CWnd *pParentWnd) : CLocalePropertySheetDialog(STRING(IDS_TOOLSOPTIONSDIALOG_TITLE), pParentWnd)
{
	AddPage(&m_pageDatabase);
	AddPage(&m_pageSatelliteTracking);
	AddPage(&m_pageEMail);
}

BOOL CToolsOptionsDialog::CheckPageAccessibility(INT nIndex) CONST
{
	CLocalePropertyPage  *pPage;

	return((nIndex >= 0 && nIndex < m_pages.GetSize()) ? ((((pPage = (CLocalePropertyPage *)m_pages.GetAt(nIndex))->GetSafeHwnd() == m_pageDatabase.GetSafeHwnd() && (CheckAccountPrivilege(PRIVILEGE_TOOLSDATABASEOPTIONS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_TOOLSDATABASEOPTIONS_CHANGE))) || (pPage->GetSafeHwnd() == m_pageSatelliteTracking.GetSafeHwnd() && (CheckAccountPrivilege(PRIVILEGE_TOOLSSATELLITETRACKINGOPTIONS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_TOOLSSATELLITETRACKINGOPTIONS_CHANGE))) || (pPage->GetSafeHwnd() == m_pageEMail.GetSafeHwnd() && (CheckAccountPrivilege(PRIVILEGE_TOOLSEMAILOPTIONS_BROWSE) || CheckAccountPrivilege(PRIVILEGE_TOOLSEMAILOPTIONS_CHANGE)))) ? TRUE : FALSE) : FALSE);
}

BEGIN_MESSAGE_MAP(CToolsOptionsDialog, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CToolsOptionsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDHELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CToolsOptionsDialog message handlers

BOOL CToolsOptionsDialog::OnInitDialog()
{
	INT  nIndex;
	INT  nCount;
	CHourglassCursor  cCursor;

	CLocalePropertySheetDialog::OnInitDialog();
	if (m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()))
	{
		for (nIndex = 0, nCount = GetPageCount(); nIndex < nCount; nIndex++)
		{
			if (CheckPageAccessibility(nIndex))
			{
				SetActivePage(nIndex);
				break;
			}
		}
		m_wndTabCtrl.SetFocus();
		return FALSE;
	}
	return TRUE;
}

void CToolsOptionsDialog::OnOK()
{
	CHourglassCursor  cCursor;

	m_pageEMail.Update();
	m_pageDatabase.Update();
	m_pageSatelliteTracking.Update();
	CLocalePropertySheetDialog::OnOK();
}

BOOL CToolsOptionsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TOOLSOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CToolsOptionsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_TOOLSOPTIONSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CDisplayPagesDialog dialog

IMPLEMENT_DYNCREATE(CDisplayPagesDialog, CLocaleDialog)

CDisplayPagesDialog::CDisplayPagesDialog(CWnd *pParentWnd) : CLocaleDialog(CDisplayPagesDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CDisplayPagesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

void CDisplayPagesDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CDisplayPagesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CDisplayPagesDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CDisplayPagesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_DISPLAYPAGES_HELP, OnHelp)
	ON_LBN_DBLCLK(IDC_DISPLAYPAGES_LIST, OnSelectDisplayPage)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CDisplayPagesDialog message handlers

BOOL CDisplayPagesDialog::OnInitDialog()
{
	INT  nPos;
	INT  nDisplayPage;
	INT  nDisplayPages;
	CString  szDisplayPage;
	CStringArray  szDisplayPages;
	CDisplayArea  *pDisplayArea;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	if ((pDisplayArea = GetDisplayArea()))
	{
		for (nDisplayPage = 0, nDisplayPages = pDisplayArea->EnumPages(szDisplayPages); nDisplayPage < nDisplayPages; nDisplayPage++)
		{
			szDisplayPage = ((nPos = szDisplayPages.GetAt(nDisplayPage).Find(CString(STRING(IDS_CHARSET_MENUITEMPREFIX)) + CString(STRING(IDS_CHARSET_MENUITEMPREFIX)))) >= 0) ? (szDisplayPages.GetAt(nDisplayPage).Left(nPos + 1) + szDisplayPages.GetAt(nDisplayPage).Mid(nPos + lstrlen(CString(STRING(IDS_CHARSET_MENUITEMPREFIX)) + CString(STRING(IDS_CHARSET_MENUITEMPREFIX))))) : szDisplayPages.GetAt(nDisplayPage);
			SendDlgItemMessage(IDC_DISPLAYPAGES_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szDisplayPage);
		}
		SendDlgItemMessage(IDC_DISPLAYPAGES_LIST, LB_SETCURSEL, pDisplayArea->GetActivePage());
		GetDlgItem(IDC_DISPLAYPAGES_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_DISPLAYPAGES_LIST)->EnableWindow();
		GetDlgItem(IDC_DISPLAYPAGES_LIST)->SetFocus();
		GetDlgItem(IDOK)->EnableWindow();
		return FALSE;
	}
	return TRUE;
}

void CDisplayPagesDialog::OnSelectDisplayPage()
{
	CDisplayArea  *pDisplayArea;
	CHourglassCursor  cCursor;

	EndDialog(((pDisplayArea = GetDisplayArea()) && pDisplayArea->ActivatePage((INT)SendDlgItemMessage(IDC_DISPLAYPAGES_LIST, LB_GETCURSEL))) ? IDOK : IDCANCEL);
}

void CDisplayPagesDialog::OnOK()
{
	CDisplayArea  *pDisplayArea;
	CHourglassCursor  cCursor;

	EndDialog(((pDisplayArea = GetDisplayArea()) && pDisplayArea->ActivatePage((INT)SendDlgItemMessage(IDC_DISPLAYPAGES_LIST, LB_GETCURSEL))) ? IDOK : IDCANCEL);
}

BOOL CDisplayPagesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_DISPLAYPAGESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CDisplayPagesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_DISPLAYPAGESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CDisplayWindowsDialog dialog

IMPLEMENT_DYNCREATE(CDisplayWindowsDialog, CLocaleDialog)

CDisplayWindowsDialog::CDisplayWindowsDialog(CWnd *pParentWnd) : CLocaleDialog(CDisplayWindowsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CDisplayWindowsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CDisplayWindowsDialog::DoModal(INT nIndex)
{
	m_nIndex = nIndex;
	return((INT)CLocaleDialog::DoModal());
}

void CDisplayWindowsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CDisplayWindowsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CDisplayWindowsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CDisplayWindowsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_DISPLAYWINDOWS_HELP, OnHelp)
	ON_LBN_DBLCLK(IDC_DISPLAYWINDOWS_LIST, OnSelectDisplayWindow)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CDisplayWindowsDialog message handlers

BOOL CDisplayWindowsDialog::OnInitDialog()
{
	INT  nDisplay;
	INT  nDisplays;
	CString  szTitle;
	CPtrArray  pDisplays;
	CDisplayWnd  *pDisplayWnd;
	CDisplayArea  *pDisplayArea;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	if ((pDisplayArea = GetDisplayArea()))
	{
		for (nDisplay = 0, nDisplays = (pDisplayArea->GetType() == DISPLAYAREA_TYPE_STANDARD) ? pDisplayArea->EnumDisplays(pDisplays, TRUE) : pDisplayArea->EnumDisplays(m_nIndex, pDisplays, TRUE); nDisplay < nDisplays; nDisplay++)
		{
			if ((pDisplayWnd = (CDisplayWnd *)pDisplays.GetAt(nDisplay)))
			{
				for (pDisplayWnd->GetWindowText(szTitle); pDisplayWnd->Check(); )
				{
					SendDlgItemMessage(IDC_DISPLAYWINDOWS_LIST, LB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szTitle);
					break;
				}
			}
		}
		SendDlgItemMessage(IDC_DISPLAYWINDOWS_LIST, LB_SETCURSEL);
		GetDlgItem(IDC_DISPLAYWINDOWS_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_DISPLAYWINDOWS_LIST)->EnableWindow();
		GetDlgItem(IDC_DISPLAYWINDOWS_LIST)->SetFocus();
		GetDlgItem(IDOK)->EnableWindow();
		return FALSE;
	}
	return TRUE;
}

void CDisplayWindowsDialog::OnSelectDisplayWindow()
{
	INT  nIndex;
	INT  nDisplay;
	INT  nDisplays;
	CPtrArray  pDisplays;
	CDisplayWnd  *pDisplayWnd;
	CDisplayArea  *pDisplayArea;
	CHourglassCursor  cCursor;

	if ((pDisplayArea = GetDisplayArea()))
	{
		for (nDisplay = 0, nDisplays = ((pDisplayArea->GetType() == DISPLAYAREA_TYPE_STANDARD && pDisplayArea->EnumDisplays(pDisplays, TRUE)) || (pDisplayArea->GetType() == DISPLAYAREA_TYPE_FOLDER && pDisplayArea->ActivatePage(m_nIndex) && pDisplayArea->EnumDisplays(m_nIndex, pDisplays, TRUE))) ? (INT)pDisplays.GetSize() : 0; nDisplay < nDisplays; nDisplay++)
		{
			if ((pDisplayWnd = (CDisplayWnd *)pDisplays.GetAt(nDisplay)) && !pDisplayWnd->Check())
			{
				pDisplays.RemoveAt(nDisplay);
				nDisplays--;
				nDisplay--;
			}
		}
		if ((pDisplayWnd = ((nIndex = (INT)SendDlgItemMessage(IDC_DISPLAYWINDOWS_LIST, LB_GETCURSEL)) < pDisplays.GetSize()) ? (CDisplayWnd *)pDisplays.GetAt(nIndex) : (CDisplayWnd *)NULL)) pDisplayArea->ActivateDisplay(pDisplayWnd);
	}
	EndDialog(IDOK);
}

void CDisplayWindowsDialog::OnOK()
{
	INT  nIndex;
	INT  nDisplay;
	INT  nDisplays;
	CPtrArray  pDisplays;
	CDisplayWnd  *pDisplayWnd;
	CDisplayArea  *pDisplayArea;
	CHourglassCursor  cCursor;

	if ((pDisplayArea = GetDisplayArea()))
	{
		for (nDisplay = 0, nDisplays = ((pDisplayArea->GetType() == DISPLAYAREA_TYPE_STANDARD && pDisplayArea->EnumDisplays(pDisplays, TRUE)) || (pDisplayArea->GetType() == DISPLAYAREA_TYPE_FOLDER && pDisplayArea->ActivatePage(m_nIndex) && pDisplayArea->EnumDisplays(m_nIndex, pDisplays, TRUE))) ? (INT)pDisplays.GetSize() : 0; nDisplay < nDisplays; nDisplay++)
		{
			if ((pDisplayWnd = (CDisplayWnd *)pDisplays.GetAt(nDisplay)) && !pDisplayWnd->Check())
			{
				pDisplays.RemoveAt(nDisplay);
				nDisplays--;
				nDisplay--;
			}
		}
		for (; (pDisplayWnd = ((nIndex = (INT)SendDlgItemMessage(IDC_DISPLAYWINDOWS_LIST, LB_GETCURSEL)) < pDisplays.GetSize()) ? (CDisplayWnd *)pDisplays.GetAt(nIndex) : (CDisplayWnd *)NULL); )
		{
			pDisplayArea->ActivateDisplay(pDisplayWnd);
			break;
		}
	}
	EndDialog(IDOK);
}

BOOL CDisplayWindowsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_DISPLAYWINDOWSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CDisplayWindowsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_DISPLAYWINDOWSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CUserInterfaceRibbonBarPage

IMPLEMENT_DYNCREATE(CUserInterfaceRibbonBarPage, CLocalePropertyPage)

CUserInterfaceRibbonBarPage::CUserInterfaceRibbonBarPage(CMFCRibbonBar *pRibbonBar) : CLocalePropertyPage(CUserInterfaceRibbonBarPage::IDD), m_wndCommandsList(pRibbonBar), m_wndQATList(pRibbonBar, TRUE, TRUE)
{
	m_pRibbonBar = pRibbonBar;
	m_bQAToolbarOnBottom = m_bQAToolbarBelow = !m_pRibbonBar->IsQuickAccessToolbarOnTop();

	//{{AFX_DATA_INIT(CUserInterfaceRibbonBarPage)
	m_nCategory = -1;
	//}}AFX_DATA_INIT
}

BOOL CUserInterfaceRibbonBarPage::IsModified(BOOL bAll) CONST
{
	INT  nCommand;
	INT  nCommands;
	CMFCRibbonBaseElement  *pCommand;

	if (IsWindow(GetSafeHwnd()) && !bAll)
	{
		for (nCommand = 0, nCommands = m_wndQATList.GetCount(); nCommand < nCommands; nCommand++)
		{
			if ((pCommand = (CMFCRibbonBaseElement *)m_wndQATList.GetItemData(nCommand)) != (CMFCRibbonBaseElement *)NULL)
			{
				if (nCommand >= m_nQATCommandIDs.GetSize() || pCommand->GetID() != m_nQATCommandIDs.GetAt(nCommand)) break;
				continue;
			}
		}
		return((m_wndQATList.GetCount() != m_nQATCommandIDs.GetSize() || nCommand < nCommands || m_bQAToolbarOnBottom != m_bQAToolbarBelow) ? TRUE : FALSE);
	}
	return((bAll) ? CLocalePropertyPage::IsModified() : FALSE);
}

BOOL CUserInterfaceRibbonBarPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

VOID CUserInterfaceRibbonBarPage::Update()
{
	INT  nCommand;
	INT  nCommands;
	CList<UINT, UINT>  lstQACommands;
	CFrameWnd  *pParentFrame;

	if (IsWindow(GetSafeHwnd()))
	{
		for (nCommand = 0, nCommands = m_wndQATList.GetCount(), UpdateData(); nCommand < nCommands; nCommand++)
		{
			lstQACommands.AddTail(m_wndQATList.GetCommand(nCommand)->GetID());
			continue;
		}
		for (m_pRibbonBar->SetQuickAccessCommands(lstQACommands), m_pRibbonBar->SetQuickAccessToolbarOnTop(!m_bQAToolbarOnBottom); pParentFrame = m_pRibbonBar->GetParentFrame(); )
		{
			pParentFrame->RecalcLayout();
			pParentFrame->RedrawWindow();
			break;
		}
	}
}

VOID CUserInterfaceRibbonBarPage::EnumCommands()
{
	INT  nCommand;
	INT  nCommands;
	CString  szCommand;
	CMFCRibbonCategory  *pCategory;
	CMFCRibbonBaseElement  *pCommand;

	for (UpdateData(); (pCategory = (CMFCRibbonCategory *)m_wndCategoryCombo.GetItemData(m_nCategory)); )
	{
		m_wndCommandsList.FillFromCategory(pCategory);
		break;
	}
	for (nCommand = 0, nCommands = m_wndCommandsList.GetCount(); nCommand < nCommands; nCommand++)
	{
		for (m_wndCommandsList.GetText(nCommand, szCommand); nCommand > 0 && _istdigit(szCommand.GetAt(0)); )
		{
			m_wndCommandsList.DeleteString(nCommand);
			nCommands--;
			nCommand--;
			break;
		}
	}
	for (; (pCommand = (!m_nCategory) ? m_pRibbonBar->FindByID(ID_APP_EXIT) : (CMFCRibbonBaseElement *)NULL); )
	{
		pCommand->AddToListBox(&m_wndCommandsList, FALSE);
		break;
	}
	m_wndAdd.EnableWindow(((pCommand = m_wndCommandsList.GetSelected()) && m_wndQATList.GetCommandIndex(pCommand->GetID()) < 0) ? TRUE : FALSE);
}

void CUserInterfaceRibbonBarPage::MoveCommand(BOOL bUp)
{
	INT  nIndex[2];
	CString  szCommand;
	DWORD_PTR  dwCommandData;

	for (nIndex[0] = m_wndQATList.GetCurSel(); nIndex[0] >= 0; )
	{
		for (m_wndQATList.GetText(nIndex[0], szCommand), dwCommandData = m_wndQATList.GetItemData(nIndex[0]); m_wndQATList.DeleteString(nIndex[0]) >= 0; )
		{
			if ((nIndex[1] = m_wndQATList.InsertString((bUp) ? (nIndex[0] - 1) : (nIndex[0] + 1), szCommand)) >= 0)
			{
				m_wndQATList.SetItemData(nIndex[1], dwCommandData);
				m_wndQATList.SetCurSel(nIndex[1]);
			}
			break;
		}
		break;
	}
	m_wndUp.EnableWindow(m_wndQATList.GetCurSel() > 0);
	m_wndDown.EnableWindow(m_wndQATList.GetCurSel() < m_wndQATList.GetCount() - 1);
	m_wndRemove.EnableWindow(m_wndQATList.GetCurSel() >= 0);
}

void CUserInterfaceRibbonBarPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CUserInterfaceRibbonBarPage)
	DDX_Control(pDX, IDC_USERINTERFACE_RIBBONBARPAGE_CATEGORY, m_wndCategoryCombo);
	DDX_Control(pDX, IDC_USERINTERFACE_RIBBONBARPAGE_COMMANDS, m_wndCommandsList);
	DDX_Control(pDX, IDC_USERINTERFACE_RIBBONBARPAGE_COMMAND_ADD, m_wndAdd);
	DDX_Control(pDX, IDC_USERINTERFACE_RIBBONBARPAGE_COMMAND_REMOVE, m_wndRemove);
	DDX_Control(pDX, IDC_USERINTERFACE_RIBBONBARPAGE_QAT_LIST, m_wndQATList);
	DDX_Control(pDX, IDC_USERINTERFACE_RIBBONBARPAGE_QAT_MOVEUP, m_wndUp);
	DDX_Control(pDX, IDC_USERINTERFACE_RIBBONBARPAGE_QAT_MOVEDOWN, m_wndDown);
	DDX_CBIndex(pDX, IDC_USERINTERFACE_RIBBONBARPAGE_CATEGORY, m_nCategory);
	//}}AFX_DATA_MAP
}

void CUserInterfaceRibbonBarPage::PostNcDestroy()
{
	m_nQATCommandIDs.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CUserInterfaceRibbonBarPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CUserInterfaceRibbonBarPage)
	ON_BN_CLICKED(IDC_USERINTERFACE_RIBBONBARPAGE_COMMAND_ADD, OnAddCommand)
	ON_BN_CLICKED(IDC_USERINTERFACE_RIBBONBARPAGE_COMMAND_REMOVE, OnRemoveCommand)
	ON_BN_CLICKED(IDC_USERINTERFACE_RIBBONBARPAGE_QAT_MOVEUP, OnQATCommandUp)
	ON_BN_CLICKED(IDC_USERINTERFACE_RIBBONBARPAGE_QAT_MOVEDOWN, OnQATCommandDown)
	ON_BN_CLICKED(IDC_USERINTERFACE_RIBBONBARPAGE_QAT_RESET, OnQATReset)
	ON_BN_CLICKED(IDC_USERINTERFACE_RIBBONBARPAGE_QAT_BELOW, OnQAToolbarBelow)
	ON_CBN_SELENDOK(IDC_USERINTERFACE_RIBBONBARPAGE_CATEGORY, OnSelendokCategory)
	ON_LBN_SELCHANGE(IDC_USERINTERFACE_RIBBONBARPAGE_COMMANDS, OnSelchangeCommands)
	ON_LBN_SELCHANGE(IDC_USERINTERFACE_RIBBONBARPAGE_QAT_LIST, OnSelchangeQATList)
	ON_LBN_DBLCLK(IDC_USERINTERFACE_RIBBONBARPAGE_COMMANDS, OnAddCommand)
	ON_LBN_DBLCLK(IDC_USERINTERFACE_RIBBONBARPAGE_QAT_LIST, OnRemoveCommand)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CUserInterfaceRibbonBarPage message handlers

BOOL CUserInterfaceRibbonBarPage::OnInitDialog()
{
	INT  nIndex;
	INT  nCategory;
	INT  nCategories;
	POSITION  lPosition;
	CList<UINT, UINT>  lstQACommands;
	CMFCRibbonCategory  *pCategory;

	CLocalePropertyPage::OnInitDialog();
	for (nCategory = 0, nCategories = m_pRibbonBar->GetCategoryCount(), m_wndUp.SetStdImage(CMenuImages::IdArrowUpLarge), m_wndDown.SetStdImage(CMenuImages::IdArrowDownLarge), CheckDlgButton(IDC_USERINTERFACE_RIBBONBARPAGE_QAT_BELOW, m_bQAToolbarOnBottom); nCategory < nCategories; nCategory++)
	{
		if ((pCategory = m_pRibbonBar->GetCategory(nCategory)))
		{
			nIndex = m_wndCategoryCombo.AddString(pCategory->GetName());
			m_wndCategoryCombo.SetItemData(nIndex, (DWORD_PTR)pCategory);
		}
	}
	if (m_wndCategoryCombo.GetCount() > 0)
	{
		m_nCategory = 0;
		UpdateData(FALSE);
		EnumCommands();
	}
	for (m_pRibbonBar->GetQuickAccessCommands(lstQACommands); lstQACommands.GetCount() > 0; )
	{
		for (lPosition = lstQACommands.GetHeadPosition(), m_wndQATList.FillFromIDs(lstQACommands, FALSE); lPosition; )
		{
			m_nQATCommandIDs.Add(lstQACommands.GetNext(lPosition));
			continue;
		}
		m_wndUp.EnableWindow(m_wndQATList.GetCurSel() > 0);
		m_wndDown.EnableWindow(m_wndQATList.GetCurSel() < m_wndQATList.GetCount() - 1);
		m_wndRemove.EnableWindow(m_wndQATList.GetCurSel() >= 0);
		break;
	}
	GetDlgItem(IDC_USERINTERFACE_RIBBONBARPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_USERINTERFACE_RIBBONBARPAGE_CATEGORY_STATIC)->EnableWindow(m_wndCategoryCombo.GetCount() > 0);
	GetDlgItem(IDC_USERINTERFACE_RIBBONBARPAGE_CATEGORY)->EnableWindow(m_wndCategoryCombo.GetCount() > 0);
	GetDlgItem(IDC_USERINTERFACE_RIBBONBARPAGE_COMMANDS_STATIC)->EnableWindow(m_wndCommandsList.GetCount() > 0);
	GetDlgItem(IDC_USERINTERFACE_RIBBONBARPAGE_COMMANDS)->EnableWindow(m_wndCommandsList.GetCount() > 0);
	GetDlgItem(IDC_USERINTERFACE_RIBBONBARPAGE_COMMAND_ADD)->EnableWindow(m_wndCommandsList.GetCount() > 0 && m_wndCommandsList.GetCurSel() >= 0);
	GetDlgItem(IDC_USERINTERFACE_RIBBONBARPAGE_COMMAND_REMOVE)->EnableWindow(m_wndQATList.GetCount() > 0 && m_wndQATList.GetCurSel() >= 0);
	GetDlgItem(IDC_USERINTERFACE_RIBBONBARPAGE_QAT_LIST)->EnableWindow(m_wndQATList.GetCount() > 0);
	GetDlgItem(IDC_USERINTERFACE_RIBBONBARPAGE_QAT_MOVEUP)->EnableWindow(m_wndQATList.GetCount() > 0 && m_wndQATList.GetCurSel() > 0);
	GetDlgItem(IDC_USERINTERFACE_RIBBONBARPAGE_QAT_MOVEDOWN)->EnableWindow(m_wndQATList.GetCount() > 0 && m_wndQATList.GetCurSel() < m_wndQATList.GetCount() - 1);
	GetDlgItem(IDC_USERINTERFACE_RIBBONBARPAGE_QAT_RESET)->EnableWindow(m_wndQATList.GetCount() > 0);
	GetDlgItem(IDC_USERINTERFACE_RIBBONBARPAGE_QAT_BELOW)->EnableWindow();
	return TRUE;
}

void CUserInterfaceRibbonBarPage::OnAddCommand()
{
	INT  nIndex;
	CMFCRibbonBaseElement  *pCommand;
	CHourglassCursor  cCursor;

	if ((pCommand = m_wndCommandsList.GetSelected()))
	{
		if (m_wndQATList.AddCommand(pCommand, TRUE, FALSE))
		{
			if ((nIndex = m_wndCommandsList.GetCurSel()) < m_wndCommandsList.GetCount() - 1) m_wndCommandsList.SetCurSel(nIndex + 1);
			EnumCommands();
		}
	}
	m_wndUp.EnableWindow(m_wndQATList.GetCurSel() > 0);
	m_wndDown.EnableWindow(m_wndQATList.GetCurSel() < m_wndQATList.GetCount() - 1);
	m_wndRemove.EnableWindow(m_wndQATList.GetCurSel() >= 0);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserInterfaceRibbonBarPage::OnRemoveCommand()
{
	INT  nIndex;
	CMFCRibbonBaseElement  *pCommand;

	if ((nIndex = m_wndQATList.GetCurSel()) >= 0)
	{
		for (m_wndQATList.DeleteString(nIndex); (nIndex = min(nIndex, m_wndQATList.GetCount() - 1)) >= 0; )
		{
			m_wndQATList.SetCurSel(nIndex);
			break;
		}
	}
	m_wndUp.EnableWindow(m_wndQATList.GetCurSel() > 0);
	m_wndDown.EnableWindow(m_wndQATList.GetCurSel() < m_wndQATList.GetCount() - 1);
	m_wndAdd.EnableWindow(((pCommand = m_wndCommandsList.GetSelected()) && m_wndQATList.GetCommandIndex(pCommand->GetID()) < 0) ? TRUE : FALSE);
	m_wndRemove.EnableWindow(m_wndQATList.GetCurSel() >= 0);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserInterfaceRibbonBarPage::OnQATCommandUp()
{
	MoveCommand(TRUE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserInterfaceRibbonBarPage::OnQATCommandDown()
{
	MoveCommand(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserInterfaceRibbonBarPage::OnQATReset()
{
	CList<UINT, UINT>  lstCmds;

	m_wndQATList.FillFromIDs(lstCmds, FALSE);
	m_wndQATList.EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserInterfaceRibbonBarPage::OnQAToolbarBelow()
{
	m_bQAToolbarOnBottom = IsDlgButtonChecked(IDC_USERINTERFACE_RIBBONBARPAGE_QAT_BELOW);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserInterfaceRibbonBarPage::OnSelendokCategory()
{
	EnumCommands();
}

void CUserInterfaceRibbonBarPage::OnSelchangeCommands()
{
	CMFCRibbonBaseElement  *pCommand;

	m_wndAdd.EnableWindow(((pCommand = m_wndCommandsList.GetSelected()) && m_wndQATList.GetCommandIndex(pCommand->GetID()) < 0) ? TRUE : FALSE);
}

void CUserInterfaceRibbonBarPage::OnSelchangeQATList()
{
	m_wndUp.EnableWindow(m_wndQATList.GetCurSel() > 0);
	m_wndDown.EnableWindow(m_wndQATList.GetCurSel() < m_wndQATList.GetCount() - 1);
	m_wndRemove.EnableWindow(m_wndQATList.GetCurSel() >= 0);
}


/////////////////////////////////////////////////////////////////////////////
// CUserInterfaceKeyboardPage

IMPLEMENT_DYNCREATE(CUserInterfaceKeyboardPage, CLocalePropertyPage)

CUserInterfaceKeyboardPage::CUserInterfaceKeyboardPage(CMFCRibbonBar *pRibbonBar) : CLocalePropertyPage(CUserInterfaceKeyboardPage::IDD), m_wndCommandsList(pRibbonBar, FALSE)
{
	m_pRibbonBar = pRibbonBar;
	m_pParentFrame = m_pRibbonBar->GetTopLevelFrame();
	m_pButton = (CMFCRibbonBaseElement *)NULL;
	m_hAccelTable = (HACCEL)NULL;
	m_pAccel[0] = (LPACCEL)NULL;
	m_pAccel[1] = (LPACCEL)NULL;
	m_pAccel[2] = (LPACCEL)NULL;
	m_nAccelSize[0] = 0;
	m_nAccelSize[1] = 0;

	//{{AFX_DATA_INIT(CUserInterfaceKeyboardPage)
	//}}AFX_DATA_INIT
}

CUserInterfaceKeyboardPage::~CUserInterfaceKeyboardPage()
{
	if (m_pAccel[0] != NULL) delete[] m_pAccel[0];
	if (m_pAccel[1] != NULL) delete[] m_pAccel[1];
}

BOOL CUserInterfaceKeyboardPage::IsModified(BOOL bAll) CONST
{
	INT  nIndex[2];
	INT  nCount[2];

	for (nIndex[0] = 0, nCount[0] = (IsWindow(GetSafeHwnd())) ? ((m_nAccelSize[0] == m_nAccelSize[1]) ? m_nAccelSize[0] : -1) : 0; nIndex[0] < nCount[0]; nIndex[0]++)
	{
		for (nIndex[1] = 0, nCount[1] = m_nAccelSize[1]; nIndex[1] < nCount[1]; nIndex[1]++)
		{
			if (m_pAccel[0][nIndex[0]].cmd == m_pAccel[1][nIndex[1]].cmd) break;
			continue;
		}
		if (nIndex[1] == nCount[1] || m_pAccel[0][nIndex[0]].key != m_pAccel[1][nIndex[1]].key || (m_pAccel[0][nIndex[0]].fVirt & (FCONTROL | FALT | FSHIFT | FVIRTKEY)) != (m_pAccel[1][nIndex[1]].fVirt & (FCONTROL | FALT | FSHIFT | FVIRTKEY))) break;
	}
	return((nIndex[0] != nCount[0]) ? TRUE : FALSE);
}

BOOL CUserInterfaceKeyboardPage::Check(BOOL bAll) CONST
{
	return((IsWindow(GetSafeHwnd())) ? ((!bAll) ? TRUE : CLocalePropertyPage::Check()) : TRUE);
}

VOID CUserInterfaceKeyboardPage::Update()
{
	return;
}

VOID CUserInterfaceKeyboardPage::EnumCommands()
{
	INT  nIndex;
	INT  nCommand;
	INT  nCommands;
	CString  szCommand;
	CMFCRibbonCategory  *pCategory;

	for (UpdateData(); (pCategory = ((nIndex = m_wndCategoryList.GetCurSel()) >= 0) ? m_pRibbonBar->GetCategory(nIndex) : (CMFCRibbonCategory *)NULL); )
	{
		m_wndCommandsList.FillFromCategory(pCategory);
		break;
	}
	for (nCommand = 0, nCommands = m_wndCommandsList.GetCount(); nCommand < nCommands; nCommand++)
	{
		for (m_wndCommandsList.GetText(nCommand, szCommand); _istdigit(szCommand.GetAt(0)); )
		{
			m_wndCommandsList.DeleteString(nCommand);
			nCommands--;
			nCommand--;
			break;
		}
	}
	if (m_wndCommandsList.GetCount() > 0)
	{
		m_wndCommandsList.SetCurSel(0);
		EnumAccelerators();
	}
}

VOID CUserInterfaceKeyboardPage::EnumAccelerators()
{
	INT  nIndex;
	LPACCEL  pAccel;

	for (m_hAccelTable = NULL; m_pAccel[0] != (LPACCEL)NULL; )
	{
		delete[] m_pAccel[0];
		m_pAccel[0] = NULL;
		break;
	}
	if ((nIndex = m_wndViewTypeList.GetCurSel()) == CB_ERR)
	{
		m_wndViewIcon.SetIcon((HICON)NULL);
		return;
	}
	for (m_wndViewIcon.SetIcon((HICON)(LONG_PTR)GetClassLongPtr(m_pParentFrame->GetSafeHwnd(), GCLP_HICON)), m_nAccelSize[0] = CopyAcceleratorTable((m_hAccelTable = m_pParentFrame->m_hAccelTable), (LPACCEL)NULL, 0); (m_pAccel[0] = new ACCEL[m_nAccelSize[0]]); )
	{
		for (CopyAcceleratorTable(m_hAccelTable, m_pAccel[0], m_nAccelSize[0]); (pAccel = (!m_pAccel[1]) ? new ACCEL[(m_nAccelSize[1] = m_nAccelSize[0])] : (LPACCEL)NULL); )
		{
			CopyAcceleratorTable(m_hAccelTable, (m_pAccel[1] = pAccel), m_nAccelSize[1]);
			break;
		}
		break;
	}
	ShowAccelerator();
}

VOID CUserInterfaceKeyboardPage::ShowAccelerator()
{
	INT  nIndex;
	INT  nCount;

	for (m_szCommand.Empty(), m_wndCurrentKeysList.ResetContent(), m_wndRemoveButton.EnableWindow(FALSE), m_pAccel[2] = NULL; (nIndex = m_wndCommandsList.GetCurSel()) == LB_ERR; )
	{
		m_wndNewKey.EnableWindow(FALSE);
		UpdateData(FALSE);
		m_pButton = NULL;
		return;
	}
	for (; (m_pButton = (CMFCRibbonBaseElement*)m_wndCommandsList.GetItemData(nIndex)); )
	{
		m_pParentFrame->GetMessageString(m_pButton->GetID(), m_szCommand);
		break;
	}
	for (nIndex = 0, nCount = (m_pAccel[0] != (LPACCEL)NULL) ? m_nAccelSize[0] : 0; nIndex < nCount; nIndex++)
	{
		if (m_pButton->GetID() == m_pAccel[0][nIndex].cmd)
		{
			AddKeyEntry(&m_pAccel[0][nIndex]);
			continue;
		}
	}
	UpdateData(FALSE);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDDESCRIPTION_STATIC)->ShowWindow((GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDDESCRIPTION)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDDESCRIPTION)->ShowWindow((GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDDESCRIPTION)->GetWindowTextLength() > 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDDESCRIPTION_STATIC)->EnableWindow((GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDDESCRIPTION)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDDESCRIPTION)->EnableWindow((GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDDESCRIPTION)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_CURRENTKEYS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_USERINTERFACE_KEYBOARDPAGE_CURRENTKEYS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_CURRENTKEYS)->EnableWindow((SendDlgItemMessage(IDC_USERINTERFACE_KEYBOARDPAGE_CURRENTKEYS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_NEWKEY_STATIC)->EnableWindow(!m_szCommand.IsEmpty());
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_NEWKEY)->EnableWindow(!m_szCommand.IsEmpty());
}

VOID CUserInterfaceKeyboardPage::ShowShortcutKey()
{
	INT  nIndex;
	INT  nCount;
	BYTE  nFlags;
	BOOL  bDefined;
	LPACCEL  pAccel;
	CString  szText;
	CMFCRibbonBaseElement  *pCommand;

	if ((pAccel = (LPACCEL)m_wndNewKey.GetAccel()))
	{
		for (m_wndAssociation.ShowWindow((m_wndNewKey.IsKeyDefined()) ? SW_SHOW : SW_HIDE), m_wndAssignButton.EnableWindow(FALSE), m_szAssociation.Empty(); m_wndNewKey.IsKeyDefined(); )
		{
			for (nIndex = 0, nCount = m_nAccelSize[0], nFlags = FCONTROL | FALT | FSHIFT | FVIRTKEY, bDefined = FALSE; nIndex < nCount; nIndex++)
			{
				if (pAccel->key == m_pAccel[0][nIndex].key && (pAccel->fVirt & nFlags) == (m_pAccel[0][nIndex].fVirt & nFlags))
				{
					if ((pCommand = m_pRibbonBar->FindByID(m_pAccel[0][nIndex].cmd, FALSE)) != (CMFCRibbonBaseElement *)NULL)
					{
						for (m_szAssociation = pCommand->GetText(); m_szAssociation.IsEmpty(); )
						{
							pCommand->UpdateTooltipInfo();
							m_szAssociation = pCommand->GetToolTipText();
							break;
						}
					}
					else
					{
						for (m_szAssociation = STRING(IDS_USERINTERFACEDIALOG_KEYBOARDPAGE_ASSOCIATIONUNKNOWN); szText.LoadString(m_pAccel[0][nIndex].cmd) && !szText.IsEmpty(); )
						{
							AfxExtractSubString(m_szAssociation, szText, 1, EOL);
							break;
						}
					}
					bDefined = TRUE;
				}
			}
			if (!bDefined)
			{
				m_szAssociation = STRING(IDS_USERINTERFACEDIALOG_KEYBOARDPAGE_ASSOCIATIONNONE);
				m_wndAssignButton.EnableWindow();
			}
			break;
		}
		UpdateData(FALSE);
		GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDASSOCIATION_STATIC)->EnableWindow(m_wndNewKey.IsKeyDefined());
		GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDASSOCIATION)->EnableWindow(m_wndNewKey.IsKeyDefined());
	}
}

VOID CUserInterfaceKeyboardPage::AddKeyEntry(LPACCEL pEntry)
{
	INT  nIndex;
	CString  szKey;
	CMFCAcceleratorKey  cKey(pEntry);

	for (cKey.Format(szKey); (nIndex = m_wndCurrentKeysList.AddString(szKey)) >= 0; )
	{
		m_wndCurrentKeysList.SetItemData(nIndex, (DWORD_PTR)pEntry);
		break;
	}
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_CURRENTKEYS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_USERINTERFACE_KEYBOARDPAGE_CURRENTKEYS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_CURRENTKEYS)->EnableWindow((SendDlgItemMessage(IDC_USERINTERFACE_KEYBOARDPAGE_CURRENTKEYS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
}

void CUserInterfaceKeyboardPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CUserInterfaceKeyboardPage)
	DDX_Control(pDX, IDC_USERINTERFACE_KEYBOARDPAGE_CATEGORY, m_wndCategoryList);
	DDX_Control(pDX, IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDS, m_wndCommandsList);
	DDX_Control(pDX, IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDVIEWTYPE, m_wndViewTypeList);
	DDX_Control(pDX, IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDVIEWTYPE_SYMBOL, m_wndViewIcon);
	DDX_Control(pDX, IDC_USERINTERFACE_KEYBOARDPAGE_CURRENTKEYS, m_wndCurrentKeysList);
	DDX_Control(pDX, IDC_USERINTERFACE_KEYBOARDPAGE_NEWKEY, m_wndNewKey);
	DDX_Control(pDX, IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDASSOCIATION_STATIC, m_wndAssociation);
	DDX_Control(pDX, IDC_USERINTERFACE_KEYBOARDPAGE_ACCELERATOR_ASSIGN, m_wndAssignButton);
	DDX_Control(pDX, IDC_USERINTERFACE_KEYBOARDPAGE_ACCELERATOR_REMOVE, m_wndRemoveButton);
	DDX_Text(pDX, IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDDESCRIPTION, m_szCommand);
	DDX_Text(pDX, IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDASSOCIATION, m_szAssociation);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CUserInterfaceKeyboardPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CUserInterfaceKeyboardPage)
	ON_BN_CLICKED(IDC_USERINTERFACE_KEYBOARDPAGE_ACCELERATOR_ASSIGN, OnAssignAccelerator)
	ON_BN_CLICKED(IDC_USERINTERFACE_KEYBOARDPAGE_ACCELERATOR_REMOVE, OnRemoveAccelerator)
	ON_BN_CLICKED(IDC_USERINTERFACE_KEYBOARDPAGE_ACCELERATORS_RESET, OnResetAllAccelerators)
	ON_EN_CHANGE(IDC_USERINTERFACE_KEYBOARDPAGE_NEWKEY, OnEditchangeNewKey)
	ON_CBN_SELCHANGE(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDVIEWTYPE, OnSelchangeViewType)
	ON_LBN_SELCHANGE(IDC_USERINTERFACE_KEYBOARDPAGE_CATEGORY, OnSelchangeCategory)
	ON_LBN_SELCHANGE(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDS, OnSelchangeCommandsList)
	ON_LBN_SELCHANGE(IDC_USERINTERFACE_KEYBOARDPAGE_CURRENTKEYS, OnSelchangeCurrentKeysList)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CUserInterfaceKeyboardPage message handlers

BOOL CUserInterfaceKeyboardPage::OnInitDialog()
{
	INT  nIndex;
	INT  nCategory;
	INT  nCategories;
	CMFCRibbonCategory  *pCategory;

	CLocalePropertyPage::OnInitDialog();
	for (nCategory = 0, nCategories = m_pRibbonBar->GetCategoryCount(); nCategory < nCategories; nCategory++)
	{
		if ((pCategory = m_pRibbonBar->GetCategory(nCategory)))
		{
			m_wndCategoryList.AddString(pCategory->GetName());
			continue;
		}
	}
	if (m_wndCategoryList.GetCount() > 0)
	{
		m_wndCategoryList.SetCurSel(0);
		EnumCommands();
	}
	if ((nIndex = m_wndViewTypeList.AddString(STRING(IDS_USERINTERFACEDIALOG_KEYBOARDPAGE_DEFAULTCOMMANDVIEW))) >= 0)
	{
		m_wndViewTypeList.SetItemData(nIndex, (DWORD_PTR)NULL);
		m_wndViewTypeList.SetCurSel(nIndex);
		EnumAccelerators();
	}
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_CATEGORY_STATIC)->EnableWindow(m_wndCategoryList.GetCount() > 0);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_CATEGORY)->EnableWindow(m_wndCategoryList.GetCount() > 0);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDS_STATIC)->EnableWindow(m_wndCommandsList.GetCount() > 0);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDS)->EnableWindow(m_wndCommandsList.GetCount() > 0);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDVIEWTYPE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDVIEWTYPE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDVIEWTYPE)->EnableWindow((SendDlgItemMessage(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDVIEWTYPE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDVIEWTYPE_SYMBOL)->EnableWindow((SendDlgItemMessage(IDC_USERINTERFACE_KEYBOARDPAGE_COMMANDVIEWTYPE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_ACCELERATORS_RESET)->EnableWindow();
	return TRUE;
}

void CUserInterfaceKeyboardPage::OnAssignAccelerator()
{
	INT  nIndex[2];
	INT  nCount[2];
	LPACCEL  pAccel[2];

	if ((pAccel[0] = (LPACCEL)m_wndNewKey.GetAccel()))
	{
		for (pAccel[0]->cmd = (USHORT)m_pButton->GetID(), pAccel[1] = m_pAccel[0]; (m_pAccel[0] = new ACCEL[m_nAccelSize[0] + 1]); )
		{
			for (nIndex[0] = 0, nCount[0] = m_nAccelSize[0], memcpy(m_pAccel[0], pAccel[1], m_nAccelSize[0] * sizeof(ACCEL)); nIndex[0] < nCount[0]; nIndex[0]++)
			{
				for (nIndex[1] = 0, nCount[1] = m_wndCurrentKeysList.GetCount(); nIndex[1] < nCount[1]; nIndex[1]++)
				{
					if (m_wndCurrentKeysList.GetItemData(nIndex[1]) == (DWORD_PTR)(pAccel[1] + nIndex[0]))
					{
						m_wndCurrentKeysList.SetItemData(nIndex[1], (DWORD_PTR)(m_pAccel[0] + nIndex[0]));
						break;
					}
				}
			}
			for (m_pAccel[0][m_nAccelSize[0]++] = *pAccel[0], GetDesktopApp()->GetKeyboardManager()->UpdateAccelTable((CMultiDocTemplate *)NULL, m_pAccel[0], m_nAccelSize[0]), AddKeyEntry(&m_pAccel[0][m_nAccelSize[0] - 1]), m_wndNewKey.ResetKey(); pAccel[1] != (LPACCEL)NULL; )
			{
				delete[] pAccel[1];
				break;
			}
			ShowShortcutKey();
			m_wndNewKey.SetFocus();
			break;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserInterfaceKeyboardPage::OnRemoveAccelerator()
{
	INT  nIndex[3];
	INT  nCount[3];
	LPACCEL  pAccel;

	for (pAccel = m_pAccel[0]; (m_pAccel[0] = new ACCEL[m_nAccelSize[0] - 1]); )
	{
		for (nIndex[0] = 0, nCount[0] = m_nAccelSize[0], nIndex[1] = 0; nIndex[0] < nCount[0]; nIndex[0]++)
		{
			if (m_pAccel[2] != (pAccel + nIndex[0]))
			{
				m_pAccel[0][nIndex[1]++] = pAccel[nIndex[0]];
				for (nIndex[2] = 0, nCount[2] = m_wndCurrentKeysList.GetCount(); nIndex[2] < nCount[2]; nIndex[2]++)
				{
					if (m_wndCurrentKeysList.GetItemData(nIndex[2]) == (DWORD_PTR)(pAccel + nIndex[0]))
					{
						m_wndCurrentKeysList.SetItemData(nIndex[2], (DWORD_PTR)(m_pAccel[0] + nIndex[1] - 1));
						break;
					}
				}
			}
		}
		for (GetDesktopApp()->GetKeyboardManager()->UpdateAccelTable((CMultiDocTemplate *)NULL, m_pAccel[0], --m_nAccelSize[0]); pAccel != (LPACCEL)NULL; )
		{
			delete[] pAccel;
			break;
		}
		ShowAccelerator();
		m_wndNewKey.SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserInterfaceKeyboardPage::OnResetAllAccelerators()
{
	for (GetDesktopApp()->GetKeyboardManager()->ResetAll(), GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_NEWKEY)->SetWindowText(EMPTYSTRING), m_wndAssignButton.EnableWindow(FALSE); m_pParentFrame != NULL; )
	{
		m_pParentFrame->SendMessage(AFX_WM_RESETKEYBOARD);
		break;
	}
	EnumAccelerators();
	ShowAccelerator();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CUserInterfaceKeyboardPage::OnEditchangeNewKey()
{
	ShowShortcutKey();
	SendDlgItemMessage(IDC_USERINTERFACE_KEYBOARDPAGE_NEWKEY, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_USERINTERFACE_KEYBOARDPAGE_NEWKEY)->SetFocus();
}

void CUserInterfaceKeyboardPage::OnSelchangeCategory()
{
	EnumCommands();
}

void CUserInterfaceKeyboardPage::OnSelchangeCommandsList()
{
	ShowAccelerator();
}

void CUserInterfaceKeyboardPage::OnSelchangeCurrentKeysList()
{
	INT  nIndex;

	if ((nIndex = m_wndCurrentKeysList.GetCurSel()) >= 0)
	{
		m_pAccel[2] = (LPACCEL)m_wndCurrentKeysList.GetItemData(nIndex);
		m_wndRemoveButton.EnableWindow();
		return;
	}
	m_pAccel[2] = (LPACCEL)NULL;
	m_wndRemoveButton.EnableWindow(FALSE);
}

void CUserInterfaceKeyboardPage::OnSelchangeViewType()
{
	EnumAccelerators();
}


/////////////////////////////////////////////////////////////////////////////
// CUserInterfaceDialog

IMPLEMENT_DYNAMIC(CUserInterfaceDialog, CLocalePropertySheetDialog)

CUserInterfaceDialog::CUserInterfaceDialog(CWnd *pParentWnd, CMFCRibbonBar *pRibbonBar) : CLocalePropertySheetDialog(STRING(IDS_USERINTERFACEDIALOG_TITLE), pParentWnd)
{
	m_psh.dwFlags |= PSH_NOAPPLYNOW;
	m_pRibbonBarPage = new CUserInterfaceRibbonBarPage(pRibbonBar);
	m_pKeyboardPage = new CUserInterfaceKeyboardPage(pRibbonBar);
	AddPage(m_pRibbonBarPage);
	AddPage(m_pKeyboardPage);
}

CUserInterfaceDialog::~CUserInterfaceDialog()
{
	delete m_pRibbonBarPage;
	delete m_pKeyboardPage;
}

BEGIN_MESSAGE_MAP(CUserInterfaceDialog, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CUserInterfaceDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDHELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CUserInterfaceDialog message handlers

void CUserInterfaceDialog::OnOK()
{
	CHourglassCursor  cCursor;

	m_pRibbonBarPage->Update();
	m_pKeyboardPage->Update();
	CLocalePropertySheetDialog::OnOK();
}

BOOL CUserInterfaceDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_USERINTERFACEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CUserInterfaceDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ReportEvent((!ShowHelp(STRING(IDS_ONLINEHELP_USERINTERFACEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CAboutDialog dialog

IMPLEMENT_DYNCREATE(CAboutDialog, CLocaleDialog)

CAboutDialog::CAboutDialog(CWnd *pParentWnd) : CLocaleDialog(CAboutDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CAboutDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

void CAboutDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAboutDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CAboutDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CAboutDialog)
	// NOTE: the ClassWizard will add message map macros here
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CAboutDialog message handlers

BOOL CAboutDialog::OnInitDialog()
{
	CString  szTitle[2];
	CString  szVersion[2];
	CString  szCopyright[2];
	CTimeKey  tCopyrightTime;
	CVersionInfo  cVersionInfo;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	for (GetWindowText(szTitle[0]), GetDlgItem(IDC_ABOUT_VERSION)->GetWindowText(szVersion[0]), GetDlgItem(IDC_ABOUT_COPYRIGHT)->GetWindowText(szCopyright[0]), szTitle[1].Format(szTitle[0], (LPCTSTR)GetAppTitle()), szVersion[1].Format(szVersion[0], (LPCTSTR)cVersionInfo.QueryProductVersion()), szCopyright[1].Format(szCopyright[0], tCopyrightTime.GetYear(), (LPCTSTR)cVersionInfo.QueryCompanyName()); szTitle[0] != szTitle[1]; )
	{
		SetWindowText(szTitle[1]);
		break;
	}
	GetDlgItem(IDC_ABOUT_NAME)->SetWindowText(GetAppTitle());
	GetDlgItem(IDC_ABOUT_VERSION)->SetWindowText(szVersion[1]);
	GetDlgItem(IDC_ABOUT_COPYRIGHT)->SetWindowText(szCopyright[1]);
	GetDlgItem(IDC_ABOUT_DETAILS)->EnableWindow();
	GetDlgItem(IDC_ABOUT_NAME)->EnableWindow();
	GetDlgItem(IDC_ABOUT_VERSION)->EnableWindow();
	GetDlgItem(IDC_ABOUT_COPYRIGHT)->EnableWindow();
	GetDlgItem(IDC_ABOUT_COPYRIGHTNOTICE_TITLE)->EnableWindow();
	GetDlgItem(IDC_ABOUT_COPYRIGHTNOTICE_STATEMENT)->EnableWindow();
	GetDlgItem(IDC_ABOUT_COPYRIGHTNOTICE_CONSEQUENCE)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow();
	return TRUE;
}

void CAboutDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnOK();
}
