// ALTEL.CPP : ALTEL Database Driver.
//
// This is a part of the SatView(TM) spacecraft operating system.
// Copyright© 1992-2016 by BINARY SPACE, Switzerland.
// All rights reserved.
//
// This source code contains the definition of the ALTEL database
// driver related interface.
//
/**********************************************************************
* Modifications:                                                     *
*====================================================================*
* Date       | Release | Comments                                    *
*------------|---------|---------------------------------------------*
* 1998/04/16 | 1.00.00 | Initial creation. [AW]                      *
**********************************************************************/

#define LIBRARYENVIRONMENT
#define ALTELENVIRONMENT

#include "ALTEL.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif


CALTELLibraryApp  cALTELLibraryApp;



/////////////////////////////////////////////////////////////////////////////
// CALTELDatabaseEngine

CALTELDatabaseEngine::CALTELDatabaseEngine() : CDatabaseEngine()
{
	return;
}

BOOL CALTELDatabaseEngine::Save()
{
	BOOL  bSuccess;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		bSuccess = SaveTMPackets();
		bSuccess &= SaveTCPackets();
		bSuccess &= SaveTCFunctions();
		bSuccess &= SaveTCSequences();
		bSuccess &= SaveOBProcessors();
		bSuccess &= SaveTCProcedures();
		bSuccess &= SaveTMParameters();
		bSuccess &= SaveTCParameters();
		bSuccess &= SaveANDs();
		bSuccess &= SaveGRDs();
		bSuccess &= SaveMMDs();
		bSuccess &= SavePODs();
		bSuccess &= SaveScripts();
		CloseDBMS();
		return bSuccess;
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(ULONGLONG nComponents)
{
	return CBinaryDatabase::Save(nComponents);
}

BOOL CALTELDatabaseEngine::Load()
{
	BOOL  bSuccess;

	for (Reset(); OpenDBMS(CDatabase::openReadOnly | CDatabase::noOdbcDialog); )
	{
		bSuccess = LoadTMPackets();
		bSuccess &= LoadTCPackets();
		bSuccess &= LoadTCFunctions();
		bSuccess &= LoadTCSequences();
		bSuccess &= LoadOBProcessors();
		bSuccess &= (LoadTCProcedures() >= 0);
		bSuccess &= LoadTMParameters();
		bSuccess &= LoadTCParameters();
		bSuccess &= LoadANDs();
		bSuccess &= LoadGRDs();
		bSuccess &= (LoadMMDs() >= 0);
		bSuccess &= LoadPODs();
		bSuccess &= (LoadScripts() >= 0);
		CloseDBMS();
		return bSuccess;
	}
	return FALSE;
}
UINT CALTELDatabaseEngine::Load(ULONGLONG nComponents, BOOL bAll)
{
	return CBinaryDatabase::Load(nComponents, bAll);
}

BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTMPacket *pDatabaseTMPacket)
{
	INT  nParameter;
	INT  nParameters;
	CString  szQuery;
	CDatabaseTMPacket  *pPacket;
	CDatabaseTMPacketParameter  *pDatabaseTMPacketParameter;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMPacketsRecordset  cDatabaseTMPackets(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PMF_SQLFINDSET), (LPCTSTR)pDatabaseTMPacket->GetTag());
			cDatabaseTMPackets.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTMPackets.IsBOF() || cDatabaseTMPackets.IsEOF())
		{
			try
			{
				cDatabaseTMPackets.AddNew();
				cDatabaseTMPackets.Translate(pDatabaseTMPacket);
				cDatabaseTMPackets.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMPackets.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTMPackets.Edit();
				cDatabaseTMPackets.Translate(pDatabaseTMPacket);
				cDatabaseTMPackets.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMPackets.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMPacketParametersRecordset  cDatabaseTMPacketParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PLF_SQLFINDSET), (LPCTSTR)pDatabaseTMPacket->GetTag());
			cDatabaseTMPacketParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMPackets.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMPacketParameters.IsBOF() && !cDatabaseTMPacketParameters.IsEOF())
		{
			try
			{
				cDatabaseTMPacketParameters.Delete();
				cDatabaseTMPacketParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMPackets.Close();
				cDatabaseTMPacketParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nParameter = 0, nParameters = (INT)pDatabaseTMPacket->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTMPacketParameter = pDatabaseTMPacket->GetAt(nParameter)) != (CDatabaseTMPacketParameter *)NULL)
			{
				if (cDatabaseTMPacketParameters.Translate(pDatabaseTMPacket, pDatabaseTMPacketParameter))
				{
					try
					{
						cDatabaseTMPacketParameters.AddNew();
						cDatabaseTMPacketParameters.Translate(pDatabaseTMPacket, pDatabaseTMPacketParameter);
						cDatabaseTMPacketParameters.Update();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseTMPackets.Close();
						cDatabaseTMPacketParameters.Close();
						CloseDBMS();
						return FALSE;
					}
				}
			}
		}
		if ((pPacket = GetTMPackets()->GetAt(GetTMPackets()->Find(pDatabaseTMPacket->GetTag()))))
		{
			pPacket->Copy(pDatabaseTMPacket);
			cDatabaseTMPackets.Close();
			cDatabaseTMPacketParameters.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pPacket = new CDatabaseTMPacket))
		{
			for (pPacket->Copy(pDatabaseTMPacket); GetTMPackets()->Add(pPacket) >= 0; )
			{
				cDatabaseTMPackets.Close();
				cDatabaseTMPacketParameters.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pPacket;
		}
		cDatabaseTMPackets.Close();
		cDatabaseTMPacketParameters.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTCPacket *pDatabaseTCPacket)
{
	INT  nParameter;
	INT  nParameters;
	CString  szQuery;
	CDatabaseTCPacket  *pPacket;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCPacketsRecordset  cDatabaseTCPackets(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_TCP_SQLFINDSET), (LPCTSTR)pDatabaseTCPacket->GetTag());
			cDatabaseTCPackets.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTCPackets.IsBOF() || cDatabaseTCPackets.IsEOF())
		{
			try
			{
				cDatabaseTCPackets.AddNew();
				cDatabaseTCPackets.Translate(pDatabaseTCPacket);
				cDatabaseTCPackets.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCPackets.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTCPackets.Edit();
				cDatabaseTCPackets.Translate(pDatabaseTCPacket);
				cDatabaseTCPackets.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCPackets.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCPacketParametersRecordset  cDatabaseTCPacketParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PCDF_SQLFINDSET), (LPCTSTR)pDatabaseTCPacket->GetTag());
			cDatabaseTCPacketParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCPackets.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCPacketParameters.IsBOF() && !cDatabaseTCPacketParameters.IsEOF())
		{
			try
			{
				cDatabaseTCPacketParameters.Delete();
				cDatabaseTCPacketParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCPackets.Close();
				cDatabaseTCPacketParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nParameter = 0, nParameters = (INT)pDatabaseTCPacket->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTCPacketParameter = pDatabaseTCPacket->GetAt(nParameter)) != (CDatabaseTCPacketParameter *)NULL)
			{
				if (cDatabaseTCPacketParameters.Translate(pDatabaseTCPacket, pDatabaseTCPacketParameter))
				{
					try
					{
						cDatabaseTCPacketParameters.AddNew();
						cDatabaseTCPacketParameters.Translate(pDatabaseTCPacket, pDatabaseTCPacketParameter);
						cDatabaseTCPacketParameters.Update();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseTCPackets.Close();
						cDatabaseTCPacketParameters.Close();
						CloseDBMS();
						return FALSE;
					}
				}
			}
		}
		if ((pPacket = GetTCPackets()->GetAt(GetTCPackets()->Find(pDatabaseTCPacket->GetTag()))))
		{
			pPacket->Copy(pDatabaseTCPacket);
			cDatabaseTCPackets.Close();
			cDatabaseTCPacketParameters.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pPacket = new CDatabaseTCPacket))
		{
			for (pPacket->Copy(pDatabaseTCPacket); GetTCPackets()->Add(pPacket) >= 0; )
			{
				cDatabaseTCPackets.Close();
				cDatabaseTCPacketParameters.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pPacket;
		}
		cDatabaseTCPackets.Close();
		cDatabaseTCPacketParameters.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTCFunction *pDatabaseTCFunction)
{
	INT  nSet;
	INT  nSets;
	INT  nElement;
	INT  nElements;
	CString  szQuery;
	CStringArray  szParameterSets;
	CDatabaseTCFunction  *pFunction;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCFunctionsRecordset  cDatabaseTCFunctions(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CCF_SQLFINDSET), (LPCTSTR)pDatabaseTCFunction->GetName());
			cDatabaseTCFunctions.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTCFunctions.IsBOF() || cDatabaseTCFunctions.IsEOF())
		{
			try
			{
				cDatabaseTCFunctions.AddNew();
				cDatabaseTCFunctions.Translate(pDatabaseTCFunction);
				cDatabaseTCFunctions.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCFunctions.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTCFunctions.Edit();
				cDatabaseTCFunctions.Translate(pDatabaseTCFunction);
				cDatabaseTCFunctions.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCFunctions.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCFunctionElementsRecordset  cDatabaseTCFunctionElements(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CDF_SQLFINDSET), (LPCTSTR)pDatabaseTCFunction->GetName());
			cDatabaseTCFunctionElements.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCFunctions.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCFunctionElements.IsBOF() && !cDatabaseTCFunctionElements.IsEOF())
		{
			try
			{
				cDatabaseTCFunctionElements.Delete();
				cDatabaseTCFunctionElements.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCFunctions.Close();
				cDatabaseTCFunctionElements.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nElement = 0, nElements = (INT)pDatabaseTCFunction->GetSize(); nElement < nElements; nElement++)
		{
			if ((pDatabaseTCFunctionElement = pDatabaseTCFunction->GetAt(nElement)) != (CDatabaseTCFunctionElement *)NULL)
			{
				if (cDatabaseTCFunctionElements.Translate(pDatabaseTCFunction, pDatabaseTCFunctionElement))
				{
					try
					{
						cDatabaseTCFunctionElements.AddNew();
						cDatabaseTCFunctionElements.Translate(pDatabaseTCFunction, pDatabaseTCFunctionElement);
						cDatabaseTCFunctionElements.Update();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseTCFunctions.Close();
						cDatabaseTCFunctionElements.Close();
						CloseDBMS();
						return FALSE;
					}
				}
			}
		}
		CALTELDatabaseTCParameterSetAssociationsRecordset  cDatabaseTCParameterSetAssociations(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PCPS_SQLFINDSETBYREF), (LPCTSTR)pDatabaseTCFunction->GetName());
			cDatabaseTCParameterSetAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCFunctions.Close();
			cDatabaseTCFunctionElements.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCParameterSetAssociations.IsBOF() && !cDatabaseTCParameterSetAssociations.IsEOF())
		{
			try
			{
				cDatabaseTCParameterSetAssociations.Delete();
				cDatabaseTCParameterSetAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCFunctions.Close();
				cDatabaseTCFunctionElements.Close();
				cDatabaseTCParameterSetAssociations.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nSet = 0, nSets = pDatabaseTCFunction->GetParameterSets(szParameterSets); nSet < nSets; nSet++)
		{
			if ((pDatabaseTCParameterSet = GetTCParameterSets()->GetAt(GetTCParameterSets()->Find(szParameterSets.GetAt(nSet)))))
			{
				try
				{
					cDatabaseTCParameterSetAssociations.AddNew();
					cDatabaseTCParameterSetAssociations.Translate(pDatabaseTCFunction, pDatabaseTCParameterSet);
					cDatabaseTCParameterSetAssociations.Update();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseTCFunctions.Close();
					cDatabaseTCFunctionElements.Close();
					cDatabaseTCParameterSetAssociations.Close();
					CloseDBMS();
					return FALSE;
				}
			}
		}
		if ((pFunction = GetTCFunctions()->GetAt(GetTCFunctions()->Find(pDatabaseTCFunction->GetName()))))
		{
			pFunction->Copy(pDatabaseTCFunction);
			cDatabaseTCFunctions.Close();
			cDatabaseTCFunctionElements.Close();
			cDatabaseTCParameterSetAssociations.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pFunction = new CDatabaseTCFunction))
		{
			for (pFunction->Copy(pDatabaseTCFunction); GetTCFunctions()->Add(pFunction) >= 0; )
			{
				cDatabaseTCFunctions.Close();
				cDatabaseTCFunctionElements.Close();
				cDatabaseTCParameterSetAssociations.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pFunction;
		}
		cDatabaseTCFunctions.Close();
		cDatabaseTCFunctionElements.Close();
		cDatabaseTCParameterSetAssociations.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTCSequence *pDatabaseTCSequence)
{
	INT  nEntry;
	INT  nEntries;
	INT  nParameter;
	INT  nParameters;
	CString  szQuery;
	CDatabaseTCSequence  *pSequence;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCParameters  pDatabaseTCParameters;
	CDatabaseTCSequenceEntry  *pDatabaseTCSequenceEntry;
	CDatabaseTCSequenceEntryParameter  *pDatabaseTCSequenceEntryParameter;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCSequencesRecordset  cDatabaseTCSequences(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CSF_SQLFINDSET), (LPCTSTR)pDatabaseTCSequence->GetName());
			cDatabaseTCSequences.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTCSequences.IsBOF() || cDatabaseTCSequences.IsEOF())
		{
			try
			{
				cDatabaseTCSequences.AddNew();
				cDatabaseTCSequences.Translate(pDatabaseTCSequence);
				cDatabaseTCSequences.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCSequences.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTCSequences.Edit();
				cDatabaseTCSequences.Translate(pDatabaseTCSequence);
				cDatabaseTCSequences.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCSequences.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCSequenceEntriesRecordset  cDatabaseTCSequenceEntries(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CSS_SQLFINDSET), (LPCTSTR)pDatabaseTCSequence->GetName());
			cDatabaseTCSequenceEntries.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCSequences.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCSequenceEntries.IsBOF() && !cDatabaseTCSequenceEntries.IsEOF())
		{
			try
			{
				cDatabaseTCSequenceEntries.Delete();
				cDatabaseTCSequenceEntries.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCSequences.Close();
				cDatabaseTCSequenceEntries.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nEntry = 0, nEntries = (INT)pDatabaseTCSequence->GetSize(); nEntry < nEntries; nEntry++)
		{
			if ((pDatabaseTCSequenceEntry = pDatabaseTCSequence->GetAt(nEntry)) != (CDatabaseTCSequenceEntry *)NULL)
			{
				if (cDatabaseTCSequenceEntries.Translate(pDatabaseTCSequence, pDatabaseTCSequenceEntry, nEntry))
				{
					try
					{
						cDatabaseTCSequenceEntries.AddNew();
						cDatabaseTCSequenceEntries.Translate(pDatabaseTCSequence, pDatabaseTCSequenceEntry, nEntry);
						cDatabaseTCSequenceEntries.Update();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseTCSequences.Close();
						cDatabaseTCSequenceEntries.Close();
						CloseDBMS();
						return FALSE;
					}
				}
			}
		}
		CALTELDatabaseTCSequenceParametersRecordset  cDatabaseTCSequenceParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CSP_SQLFINDSET), (LPCTSTR)pDatabaseTCSequence->GetName());
			cDatabaseTCSequenceParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCSequences.Close();
			cDatabaseTCSequenceEntries.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCSequenceParameters.IsBOF() && !cDatabaseTCSequenceParameters.IsEOF())
		{
			try
			{
				cDatabaseTCSequenceParameters.Delete();
				cDatabaseTCSequenceParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCSequences.Close();
				cDatabaseTCSequenceEntries.Close();
				cDatabaseTCSequenceParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nParameter = 0, nParameters = pDatabaseTCSequence->GetParameters(pDatabaseTCParameters); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTCParameter = pDatabaseTCParameters.GetAt(nParameter)) != (CDatabaseTCParameter *)NULL)
			{
				if (cDatabaseTCSequenceParameters.Translate(pDatabaseTCSequence, pDatabaseTCParameter, nParameter))
				{
					try
					{
						cDatabaseTCSequenceParameters.AddNew();
						cDatabaseTCSequenceParameters.Translate(pDatabaseTCSequence, pDatabaseTCParameter, nParameter);
						cDatabaseTCSequenceParameters.Update();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseTCSequences.Close();
						cDatabaseTCSequenceEntries.Close();
						cDatabaseTCSequenceParameters.Close();
						CloseDBMS();
						return FALSE;
					}
				}
			}
		}
		CALTELDatabaseTCSequenceEntryParametersRecordset  cDatabaseTCSequenceEntryParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_SDF_SQLFINDSET), (LPCTSTR)pDatabaseTCSequence->GetName());
			cDatabaseTCSequenceEntryParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCSequences.Close();
			cDatabaseTCSequenceEntries.Close();
			cDatabaseTCSequenceParameters.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCSequenceEntryParameters.IsBOF() && !cDatabaseTCSequenceEntryParameters.IsEOF())
		{
			try
			{
				cDatabaseTCSequenceEntryParameters.Delete();
				cDatabaseTCSequenceEntryParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCSequences.Close();
				cDatabaseTCSequenceEntries.Close();
				cDatabaseTCSequenceParameters.Close();
				cDatabaseTCSequenceEntryParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nEntry = 0, nEntries = (INT)pDatabaseTCSequence->GetSize(); nEntry < nEntries; nEntry++)
		{
			if ((pDatabaseTCSequenceEntry = pDatabaseTCSequence->GetAt(nEntry)) != (CDatabaseTCSequenceEntry *)NULL)
			{
				for (nParameter = 0, nParameters = (INT)pDatabaseTCSequenceEntry->GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTCSequenceEntryParameter = pDatabaseTCSequenceEntry->GetAt(nParameter)) != (CDatabaseTCSequenceEntryParameter *)NULL)
					{
						if (cDatabaseTCSequenceEntryParameters.Translate(pDatabaseTCSequence, pDatabaseTCSequenceEntryParameter, nEntry))
						{
							try
							{
								cDatabaseTCSequenceEntryParameters.AddNew();
								cDatabaseTCSequenceEntryParameters.Translate(pDatabaseTCSequence, pDatabaseTCSequenceEntryParameter, nEntry);
								cDatabaseTCSequenceEntryParameters.Update();
							}
							catch (CException *pException)
							{
								pException->Delete();
								cDatabaseTCSequences.Close();
								cDatabaseTCSequenceEntries.Close();
								cDatabaseTCSequenceParameters.Close();
								cDatabaseTCSequenceEntryParameters.Close();
								CloseDBMS();
								return FALSE;
							}
						}
					}
				}
			}
		}
		if ((pSequence = GetTCSequences()->GetAt(GetTCSequences()->Find(pDatabaseTCSequence->GetName()))))
		{
			pSequence->Copy(pDatabaseTCSequence);
			cDatabaseTCSequences.Close();
			cDatabaseTCSequenceEntries.Close();
			cDatabaseTCSequenceParameters.Close();
			cDatabaseTCSequenceEntryParameters.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pSequence = new CDatabaseTCSequence))
		{
			for (pSequence->Copy(pDatabaseTCSequence); GetTCSequences()->Add(pSequence) >= 0; )
			{
				cDatabaseTCSequences.Close();
				cDatabaseTCSequenceEntries.Close();
				cDatabaseTCSequenceParameters.Close();
				cDatabaseTCSequenceEntryParameters.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pSequence;
		}
		cDatabaseTCSequences.Close();
		cDatabaseTCSequenceEntries.Close();
		cDatabaseTCSequenceParameters.Close();
		cDatabaseTCSequenceEntryParameters.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseOBProcessor *pDatabaseOBProcessor)
{
	INT  nImageBlock;
	INT  nImageBlocks;
	INT  nMemoryArea;
	INT  nMemoryAreas;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	INT  nCatalogueEntry;
	INT  nCatalogueEntries;
	CString  szQuery;
	CDatabaseOBProcessor  *pProcessor;
	CDatabaseOBProcessorMemoryArea  *pDatabaseOBProcessorMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage[2];
	CDatabaseOBProcessorMemoryAreaBlock  *pDatabaseOBProcessorMemoryAreaBlock;
	CDatabaseOBProcessorMemoryImageBlock  *pDatabaseOBProcessorMemoryImageBlock;
	CDatabaseOBProcessorMemoryAreaCheckSum  *pDatabaseOBProcessorMemoryAreaCheckSum;
	CDatabaseOBProcessorMemoryAreaCatalogue  *pDatabaseOBProcessorMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pDatabaseOBProcessorMemoryAreaCatalogueEntry;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseOBProcessorsRecordset  cDatabaseOBProcessors(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_GEN_SQLFINDSET), (LPCTSTR)pDatabaseOBProcessor->GetName());
			cDatabaseOBProcessors.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseOBProcessors.IsBOF() || cDatabaseOBProcessors.IsEOF())
		{
			try
			{
				cDatabaseOBProcessors.AddNew();
				cDatabaseOBProcessors.Translate(pDatabaseOBProcessor);
				cDatabaseOBProcessors.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseOBProcessors.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseOBProcessors.Edit();
				cDatabaseOBProcessors.Translate(pDatabaseOBProcessor);
				cDatabaseOBProcessors.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseOBProcessors.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseOBProcessorMemoryAreasRecordset  cDatabaseOBProcessorMemoryAreas(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_MAD_SQLFINDSET), (LPCTSTR)pDatabaseOBProcessor->GetName());
			cDatabaseOBProcessorMemoryAreas.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseOBProcessors.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseOBProcessorMemoryAreas.IsBOF() && !cDatabaseOBProcessorMemoryAreas.IsEOF())
		{
			CALTELDatabaseOBProcessorMemoryAreaBlocksRecordset  cDatabaseOBProcessorMemoryAreaBlocks(this);
			try
			{
				szQuery.Format(STRING(IDS_DATABASE_TABLE_MEM_SQLFINDSET), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetName());
				cDatabaseOBProcessorMemoryAreaBlocks.Open(CRecordset::dynamic, szQuery, CRecordset::none);
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseOBProcessorMemoryAreas.Close();
				cDatabaseOBProcessors.Close();
				CloseDBMS();
				return FALSE;
			}
			while (!cDatabaseOBProcessorMemoryAreaBlocks.IsBOF() && !cDatabaseOBProcessorMemoryAreaBlocks.IsEOF())
			{
				try
				{
					cDatabaseOBProcessorMemoryAreaBlocks.Delete();
					cDatabaseOBProcessorMemoryAreaBlocks.MoveNext();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseOBProcessorMemoryAreaBlocks.Close();
					cDatabaseOBProcessorMemoryAreas.Close();
					cDatabaseOBProcessors.Close();
					CloseDBMS();
					return FALSE;
				}
			}
			CALTELDatabaseOBProcessorMemoryAreaCataloguesRecordset  cDatabaseOBProcessorMemoryAreaCatalogues(this);
			try
			{
				szQuery.Format(STRING(IDS_DATABASE_TABLE_CAT_SQLFINDSET), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetName());
				cDatabaseOBProcessorMemoryAreaCatalogues.Open(CRecordset::dynamic, szQuery, CRecordset::none);
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseOBProcessorMemoryAreaBlocks.Close();
				cDatabaseOBProcessorMemoryAreas.Close();
				cDatabaseOBProcessors.Close();
				CloseDBMS();
				return FALSE;
			}
			while (!cDatabaseOBProcessorMemoryAreaCatalogues.IsBOF() && !cDatabaseOBProcessorMemoryAreaCatalogues.IsEOF())
			{
				try
				{
					cDatabaseOBProcessorMemoryAreaCatalogues.Delete();
					cDatabaseOBProcessorMemoryAreaCatalogues.MoveNext();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseOBProcessorMemoryAreaCatalogues.Close();
					cDatabaseOBProcessorMemoryAreaBlocks.Close();
					cDatabaseOBProcessorMemoryAreas.Close();
					cDatabaseOBProcessors.Close();
					CloseDBMS();
					return FALSE;
				}
			}
			try
			{
				cDatabaseOBProcessorMemoryAreas.Delete();
				cDatabaseOBProcessorMemoryAreas.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseOBProcessorMemoryAreaCatalogues.Close();
				cDatabaseOBProcessorMemoryAreaBlocks.Close();
				cDatabaseOBProcessorMemoryAreas.Close();
				cDatabaseOBProcessors.Close();
				CloseDBMS();
				return FALSE;
			}
			cDatabaseOBProcessorMemoryAreaCatalogues.Close();
			cDatabaseOBProcessorMemoryAreaBlocks.Close();
		}
		for (nMemoryArea = 0, nMemoryAreas = (INT)pDatabaseOBProcessor->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
		{
			if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nMemoryArea)) != (CDatabaseOBProcessorMemoryArea *)NULL)
			{
				if (cDatabaseOBProcessorMemoryAreas.Translate(pDatabaseOBProcessor, pDatabaseOBProcessorMemoryArea))
				{
					try
					{
						cDatabaseOBProcessorMemoryAreas.AddNew();
						cDatabaseOBProcessorMemoryAreas.Translate(pDatabaseOBProcessor, pDatabaseOBProcessorMemoryArea);
						cDatabaseOBProcessorMemoryAreas.Update();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseOBProcessorMemoryAreas.Close();
						cDatabaseOBProcessors.Close();
						CloseDBMS();
						return FALSE;
					}
				}
			}
		}
		CALTELDatabaseOBProcessorMemoryAreaBlocksRecordset  cDatabaseOBProcessorMemoryAreaBlocks(this);
		for (nMemoryArea = 0, nMemoryAreas = (INT)pDatabaseOBProcessor->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
		{
			if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nMemoryArea)))
			{
				try
				{
					szQuery.Format(STRING(IDS_DATABASE_TABLE_MEM_SQLFINDSET), (LPCTSTR)pDatabaseOBProcessorMemoryArea->GetName());
					cDatabaseOBProcessorMemoryAreaBlocks.Open(CRecordset::dynamic, szQuery, CRecordset::none);
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseOBProcessorMemoryAreas.Close();
					cDatabaseOBProcessors.Close();
					CloseDBMS();
					return FALSE;
				}
				for (nMemoryBlock = 0, nMemoryBlocks = (pDatabaseOBProcessorMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_MEMORY) ? (INT)pDatabaseOBProcessorMemoryArea->GetSize() : 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
				{
					if ((pDatabaseOBProcessorMemoryAreaBlock = pDatabaseOBProcessorMemoryArea->GetAt(nMemoryBlock)) != (CDatabaseOBProcessorMemoryAreaBlock *)NULL)
					{
						if (cDatabaseOBProcessorMemoryAreaBlocks.Translate(pDatabaseOBProcessorMemoryArea, pDatabaseOBProcessorMemoryAreaBlock))
						{
							try
							{
								cDatabaseOBProcessorMemoryAreaBlocks.AddNew();
								cDatabaseOBProcessorMemoryAreaBlocks.Translate(pDatabaseOBProcessorMemoryArea, pDatabaseOBProcessorMemoryAreaBlock);
								cDatabaseOBProcessorMemoryAreaBlocks.Update();
							}
							catch (CException *pException)
							{
								pException->Delete();
								cDatabaseOBProcessorMemoryAreaBlocks.Close();
								cDatabaseOBProcessorMemoryAreas.Close();
								cDatabaseOBProcessors.Close();
								CloseDBMS();
								return FALSE;
							}
						}
					}
				}
				cDatabaseOBProcessorMemoryAreaBlocks.Close();
			}
		}
		CALTELDatabaseOBProcessorMemoryImagesRecordset  cDatabaseOBProcessorMemoryImages(this);
		for (nMemoryArea = 0, nMemoryAreas = (INT)pDatabaseOBProcessor->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
		{
			if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nMemoryArea)) != (CDatabaseOBProcessorMemoryArea *)NULL)
			{
				if (pDatabaseOBProcessorMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_IMAGE)
				{
					if ((pDatabaseOBProcessorMemoryImage[0] = new CDatabaseOBProcessorMemoryImage))
					{
						try
						{
							szQuery.Format(STRING(IDS_DATABASE_TABLE_IMG_SQLFINDSET), (LPCTSTR)pDatabaseOBProcessorMemoryArea->GetName());
							cDatabaseOBProcessorMemoryImages.Open(CRecordset::dynamic, szQuery, CRecordset::none);
						}
						catch (CException *pException)
						{
							pException->Delete();
							delete pDatabaseOBProcessorMemoryImage[0];
							cDatabaseOBProcessorMemoryAreas.Close();
							cDatabaseOBProcessors.Close();
							CloseDBMS();
							return FALSE;
						}
						for (nImageBlock = 0, nImageBlocks = (pDatabaseOBProcessorMemoryArea->GetMemoryImage(pDatabaseOBProcessorMemoryImage[0])) ? (INT)pDatabaseOBProcessorMemoryImage[0]->GetSize() : 0; nImageBlock < nImageBlocks; nImageBlock++)
						{
							if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage[0]->GetAt(nImageBlock)))
							{
								try
								{
									cDatabaseOBProcessorMemoryImages.AddNew();
									cDatabaseOBProcessorMemoryImages.Translate(pDatabaseOBProcessorMemoryImage[0], pDatabaseOBProcessorMemoryImageBlock);
									cDatabaseOBProcessorMemoryImages.Update();
								}
								catch (CException *pException)
								{
									pException->Delete();
									delete pDatabaseOBProcessorMemoryImage[0];
									cDatabaseOBProcessorMemoryImages.Close();
									cDatabaseOBProcessorMemoryAreas.Close();
									cDatabaseOBProcessors.Close();
									CloseDBMS();
									return FALSE;
								}
							}
						}
						cDatabaseOBProcessorMemoryImages.Close();
						delete pDatabaseOBProcessorMemoryImage[0];
					}
				}
			}
		}
		CALTELDatabaseOBProcessorMemoryAreaCheckSumsRecordset  cDatabaseOBProcessorMemoryAreaCheckSums(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CRC_SQLFINDSET), (LPCTSTR)pDatabaseOBProcessor->GetName());
			cDatabaseOBProcessorMemoryAreaCheckSums.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseOBProcessors.Close();
			cDatabaseOBProcessorMemoryAreas.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseOBProcessorMemoryAreaCheckSums.IsBOF() && !cDatabaseOBProcessorMemoryAreaCheckSums.IsEOF())
		{
			try
			{
				cDatabaseOBProcessorMemoryAreaCheckSums.Delete();
				cDatabaseOBProcessorMemoryAreaCheckSums.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseOBProcessorMemoryAreaCheckSums.Close();
				cDatabaseOBProcessorMemoryAreas.Close();
				cDatabaseOBProcessors.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nMemoryArea = 0, nMemoryAreas = (INT)pDatabaseOBProcessor->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
		{
			if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nMemoryArea)) != (CDatabaseOBProcessorMemoryArea *)NULL)
			{
				if ((pDatabaseOBProcessorMemoryAreaCheckSum = new CDatabaseOBProcessorMemoryAreaCheckSum) != (CDatabaseOBProcessorMemoryAreaCheckSum *)NULL)
				{
					for (pDatabaseOBProcessorMemoryArea->GetCheckSum(pDatabaseOBProcessorMemoryAreaCheckSum); cDatabaseOBProcessorMemoryAreaCheckSums.Translate(pDatabaseOBProcessor, pDatabaseOBProcessorMemoryArea, pDatabaseOBProcessorMemoryAreaCheckSum); )
					{
						try
						{
							cDatabaseOBProcessorMemoryAreaCheckSums.AddNew();
							cDatabaseOBProcessorMemoryAreaCheckSums.Translate(pDatabaseOBProcessor, pDatabaseOBProcessorMemoryArea, pDatabaseOBProcessorMemoryAreaCheckSum);
							cDatabaseOBProcessorMemoryAreaCheckSums.Update();
						}
						catch (CException *pException)
						{
							pException->Delete();
							delete pDatabaseOBProcessorMemoryAreaCheckSum;
							cDatabaseOBProcessorMemoryAreaCheckSums.Close();
							cDatabaseOBProcessorMemoryAreas.Close();
							cDatabaseOBProcessors.Close();
							CloseDBMS();
							return FALSE;
						}
						break;
					}
					delete pDatabaseOBProcessorMemoryAreaCheckSum;
				}
			}
		}
		CALTELDatabaseOBProcessorMemoryAreaCataloguesRecordset  cDatabaseOBProcessorMemoryAreaCatalogues(this);
		for (nMemoryArea = 0, nMemoryAreas = (INT)pDatabaseOBProcessor->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
		{
			if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nMemoryArea)))
			{
				try
				{
					szQuery.Format(STRING(IDS_DATABASE_TABLE_CAT_SQLFINDSET), (LPCTSTR)pDatabaseOBProcessorMemoryArea->GetName());
					cDatabaseOBProcessorMemoryAreaCatalogues.Open(CRecordset::dynamic, szQuery, CRecordset::none);
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseOBProcessorMemoryAreaCheckSums.Close();
					cDatabaseOBProcessorMemoryAreas.Close();
					cDatabaseOBProcessors.Close();
					CloseDBMS();
					return FALSE;
				}
				if ((pDatabaseOBProcessorMemoryAreaCatalogue = new CDatabaseOBProcessorMemoryAreaCatalogue))
				{
					if (pDatabaseOBProcessorMemoryArea->GetCatalogue(pDatabaseOBProcessorMemoryAreaCatalogue))
					{
						for (nCatalogueEntry = 0, nCatalogueEntries = (INT)pDatabaseOBProcessorMemoryAreaCatalogue->GetSize(); nCatalogueEntry < nCatalogueEntries; nCatalogueEntry++)
						{
							if ((pDatabaseOBProcessorMemoryAreaCatalogueEntry = pDatabaseOBProcessorMemoryAreaCatalogue->GetAt(nCatalogueEntry)) != (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)NULL)
							{
								if (cDatabaseOBProcessorMemoryAreaCatalogues.Translate(pDatabaseOBProcessorMemoryArea, pDatabaseOBProcessorMemoryAreaCatalogueEntry))
								{
									try
									{
										cDatabaseOBProcessorMemoryAreaCatalogues.AddNew();
										cDatabaseOBProcessorMemoryAreaCatalogues.Translate(pDatabaseOBProcessorMemoryArea, pDatabaseOBProcessorMemoryAreaCatalogueEntry);
										cDatabaseOBProcessorMemoryAreaCatalogues.Update();
									}
									catch (CException *pException)
									{
										pException->Delete();
										delete pDatabaseOBProcessorMemoryAreaCatalogue;
										cDatabaseOBProcessorMemoryAreaCatalogues.Close();
										cDatabaseOBProcessorMemoryAreaCheckSums.Close();
										cDatabaseOBProcessorMemoryAreas.Close();
										cDatabaseOBProcessors.Close();
										CloseDBMS();
										return FALSE;
									}
								}
							}
						}
					}
					delete pDatabaseOBProcessorMemoryAreaCatalogue;
				}
				cDatabaseOBProcessorMemoryAreaCatalogues.Close();
			}
		}
		if ((pProcessor = GetOBProcessors()->GetAt(GetOBProcessors()->Find(pDatabaseOBProcessor->GetName()))))
		{
			for (nMemoryArea = 0, nMemoryAreas = (pProcessor->Copy(pDatabaseOBProcessor)) ? (INT)pDatabaseOBProcessor->GetSize() : 0; nMemoryArea < nMemoryAreas; nMemoryArea++)
			{
				if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nMemoryArea)) && (pDatabaseOBProcessorMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_IMAGE))
				{
					if ((pDatabaseOBProcessorMemoryImage[0] = new CDatabaseOBProcessorMemoryImage) != (CDatabaseOBProcessorMemoryImage *)NULL)
					{
						if ((pDatabaseOBProcessorMemoryImage[1] = GetOBProcessorMemoryImages()->GetAt(GetOBProcessorMemoryImages()->Find(pDatabaseOBProcessorMemoryArea->GetName()))))
						{
							if (pDatabaseOBProcessorMemoryArea->GetMemoryImage(pDatabaseOBProcessorMemoryImage[0]))
							{
								pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]);
								delete pDatabaseOBProcessorMemoryImage[0];
							}
							continue;
						}
						if ((pDatabaseOBProcessorMemoryImage[1] = new CDatabaseOBProcessorMemoryImage))
						{
							if (pDatabaseOBProcessorMemoryArea->GetMemoryImage(pDatabaseOBProcessorMemoryImage[0]))
							{
								pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]);
								if (GetOBProcessorMemoryImages()->Add(pDatabaseOBProcessorMemoryImage[1]) >= 0)
								{
									delete pDatabaseOBProcessorMemoryImage[0];
									continue;
								}
							}
							delete pDatabaseOBProcessorMemoryImage[1];
						}
						delete pDatabaseOBProcessorMemoryImage[0];
					}
				}
			}
			cDatabaseOBProcessorMemoryAreaCheckSums.Close();
			cDatabaseOBProcessorMemoryAreas.Close();
			cDatabaseOBProcessors.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pProcessor = new CDatabaseOBProcessor))
		{
			for (pProcessor->Copy(pDatabaseOBProcessor); GetOBProcessors()->Add(pProcessor) >= 0; )
			{
				for (nMemoryArea = 0, nMemoryAreas = (INT)pDatabaseOBProcessor->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
				{
					if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nMemoryArea)) && (pDatabaseOBProcessorMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_IMAGE))
					{
						if ((pDatabaseOBProcessorMemoryImage[0] = new CDatabaseOBProcessorMemoryImage) != (CDatabaseOBProcessorMemoryImage *)NULL)
						{
							if ((pDatabaseOBProcessorMemoryImage[1] = GetOBProcessorMemoryImages()->GetAt(GetOBProcessorMemoryImages()->Find(pDatabaseOBProcessorMemoryArea->GetName()))))
							{
								if (pDatabaseOBProcessorMemoryArea->GetMemoryImage(pDatabaseOBProcessorMemoryImage[0]))
								{
									pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]);
									delete pDatabaseOBProcessorMemoryImage[0];
								}
								continue;
							}
							if ((pDatabaseOBProcessorMemoryImage[1] = new CDatabaseOBProcessorMemoryImage))
							{
								if (pDatabaseOBProcessorMemoryArea->GetMemoryImage(pDatabaseOBProcessorMemoryImage[0]))
								{
									pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]);
									if (GetOBProcessorMemoryImages()->Add(pDatabaseOBProcessorMemoryImage[1]) >= 0)
									{
										delete pDatabaseOBProcessorMemoryImage[0];
										continue;
									}
								}
								delete pDatabaseOBProcessorMemoryImage[1];
							}
							delete pDatabaseOBProcessorMemoryImage[0];
						}
					}
				}
				cDatabaseOBProcessorMemoryAreaCheckSums.Close();
				cDatabaseOBProcessorMemoryAreas.Close();
				cDatabaseOBProcessors.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pProcessor;
		}
		cDatabaseOBProcessorMemoryAreaCheckSums.Close();
		cDatabaseOBProcessorMemoryAreas.Close();
		cDatabaseOBProcessors.Close();
		CloseDBMS();
	}
	return FALSE;
}
INT CALTELDatabaseEngine::Save(CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	INT  nIndex;
	CDatabaseTCProcedure  *pProcedure;

	if ((pProcedure = GetTCProcedures()->GetAt((nIndex = GetTCProcedures()->Find(pDatabaseTCProcedure->GetName())))))
	{
		if (pProcedure->Copy(pDatabaseTCProcedure) && CBinaryDatabase::Save(DATABASE_COMPONENT_TCPROCEDURE)) return nIndex;
		return -1;
	}
	if ((pProcedure = new CDatabaseTCProcedure))
	{
		if ((nIndex = (pProcedure->Copy(pDatabaseTCProcedure)) ? GetTCProcedures()->Add(pProcedure) : -1) >= 0)
		{
			if (CBinaryDatabase::Save(DATABASE_COMPONENT_TCPROCEDURE)) return nIndex;
			return -1;
		}
		delete pProcedure;
	}
	return -1;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTMParameter *pDatabaseTMParameter)
{
	INT  nTable;
	INT  nTables;
	CString  szQuery;
	CStringArray  szCalTables[2];
	CStringArray  szOolTables[2];
	CDatabaseTMParameter  *pParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMParametersRecordset  cDatabaseTMParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PCF_SQLFINDSET), (LPCTSTR)pDatabaseTMParameter->GetTag());
			cDatabaseTMParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTMParameters.IsBOF() || cDatabaseTMParameters.IsEOF())
		{
			try
			{
				cDatabaseTMParameters.AddNew();
				cDatabaseTMParameters.Translate(pDatabaseTMParameter);
				cDatabaseTMParameters.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTMParameters.Edit();
				cDatabaseTMParameters.Translate(pDatabaseTMParameter);
				cDatabaseTMParameters.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMNumCalTableAssociationsRecordset  cDatabaseTMNumCalTableAssociations(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PCAL_SQLFINDSETBYREF), (LPCTSTR)pDatabaseTMParameter->GetTag());
			cDatabaseTMNumCalTableAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMParameters.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMNumCalTableAssociations.IsBOF() && !cDatabaseTMNumCalTableAssociations.IsEOF())
		{
			try
			{
				cDatabaseTMNumCalTableAssociations.Delete();
				cDatabaseTMNumCalTableAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMParameters.Close();
				cDatabaseTMNumCalTableAssociations.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMNumOolTableAssociationsRecordset  cDatabaseTMNumOolTableAssociations(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_POCF_SQLFINDSETBYREF), (LPCTSTR)pDatabaseTMParameter->GetTag());
			cDatabaseTMNumOolTableAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMParameters.Close();
			cDatabaseTMNumCalTableAssociations.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMNumOolTableAssociations.IsBOF() && !cDatabaseTMNumOolTableAssociations.IsEOF())
		{
			try
			{
				cDatabaseTMNumOolTableAssociations.Delete();
				cDatabaseTMNumOolTableAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMParameters.Close();
				cDatabaseTMNumCalTableAssociations.Close();
				cDatabaseTMNumOolTableAssociations.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)
		{
			for (nTable = 0, nTables = pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]); nTable < nTables; nTable++)
			{
				if ((pDatabaseTMNumCalTable = GetTMNumCalTables()->GetAt(GetTMNumCalTables()->Find(szCalTables[0].GetAt(nTable)))))
				{
					try
					{
						cDatabaseTMNumCalTableAssociations.AddNew();
						cDatabaseTMNumCalTableAssociations.Translate(pDatabaseTMNumCalTable, pDatabaseTMParameter, szCalTables[1].GetAt(nTable));
						cDatabaseTMNumCalTableAssociations.Update();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseTMParameters.Close();
						cDatabaseTMNumCalTableAssociations.Close();
						cDatabaseTMNumOolTableAssociations.Close();
						CloseDBMS();
						return FALSE;
					}
				}
			}
			for (nTable = 0, nTables = pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1]); nTable < nTables; nTable++)
			{
				if ((pDatabaseTMNumOolTable = GetTMNumOolTables()->GetAt(GetTMNumOolTables()->Find(szOolTables[0].GetAt(nTable)))))
				{
					try
					{
						cDatabaseTMNumOolTableAssociations.AddNew();
						cDatabaseTMNumOolTableAssociations.Translate(pDatabaseTMNumOolTable, pDatabaseTMParameter, szOolTables[1].GetAt(nTable));
						cDatabaseTMNumOolTableAssociations.Update();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseTMParameters.Close();
						cDatabaseTMNumCalTableAssociations.Close();
						cDatabaseTMNumOolTableAssociations.Close();
						CloseDBMS();
						return FALSE;
					}
				}
			}
		}
		cDatabaseTMNumCalTableAssociations.Close();
		cDatabaseTMNumOolTableAssociations.Close();
		CALTELDatabaseTMTxtCalTableAssociationsRecordset  cDatabaseTMTxtCalTableAssociations(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PTXF_SQLFINDSETBYREF), (LPCTSTR)pDatabaseTMParameter->GetTag());
			cDatabaseTMTxtCalTableAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMParameters.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMTxtCalTableAssociations.IsBOF() && !cDatabaseTMTxtCalTableAssociations.IsEOF())
		{
			try
			{
				cDatabaseTMTxtCalTableAssociations.Delete();
				cDatabaseTMTxtCalTableAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMParameters.Close();
				cDatabaseTMTxtCalTableAssociations.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMTxtOolTableAssociationsRecordset  cDatabaseTMTxtOolTableAssociations(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PFXF_SQLFINDSETBYREF), (LPCTSTR)pDatabaseTMParameter->GetTag());
			cDatabaseTMTxtOolTableAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMParameters.Close();
			cDatabaseTMTxtCalTableAssociations.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMTxtOolTableAssociations.IsBOF() && !cDatabaseTMTxtOolTableAssociations.IsEOF())
		{
			try
			{
				cDatabaseTMTxtOolTableAssociations.Delete();
				cDatabaseTMTxtOolTableAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMParameters.Close();
				cDatabaseTMTxtCalTableAssociations.Close();
				cDatabaseTMTxtOolTableAssociations.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS)
		{
			for (nTable = 0, nTables = pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]); nTable < nTables; nTable++)
			{
				if ((pDatabaseTMTxtCalTable = GetTMTxtCalTables()->GetAt(GetTMTxtCalTables()->Find(szCalTables[0].GetAt(nTable)))))
				{
					try
					{
						cDatabaseTMTxtCalTableAssociations.AddNew();
						cDatabaseTMTxtCalTableAssociations.Translate(pDatabaseTMTxtCalTable, pDatabaseTMParameter, szCalTables[1].GetAt(nTable));
						cDatabaseTMTxtCalTableAssociations.Update();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseTMParameters.Close();
						cDatabaseTMTxtCalTableAssociations.Close();
						cDatabaseTMTxtOolTableAssociations.Close();
						CloseDBMS();
						return FALSE;
					}
				}
			}
			for (nTable = 0, nTables = pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1]); nTable < nTables; nTable++)
			{
				if ((pDatabaseTMTxtOolTable = GetTMTxtOolTables()->GetAt(GetTMTxtOolTables()->Find(szOolTables[0].GetAt(nTable)))))
				{
					try
					{
						cDatabaseTMTxtOolTableAssociations.AddNew();
						cDatabaseTMTxtOolTableAssociations.Translate(pDatabaseTMTxtOolTable, pDatabaseTMParameter, szOolTables[1].GetAt(nTable));
						cDatabaseTMTxtOolTableAssociations.Update();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseTMParameters.Close();
						cDatabaseTMTxtCalTableAssociations.Close();
						cDatabaseTMTxtOolTableAssociations.Close();
						CloseDBMS();
						return FALSE;
					}
				}
			}
		}
		cDatabaseTMTxtCalTableAssociations.Close();
		cDatabaseTMTxtOolTableAssociations.Close();
		if ((pParameter = GetTMParameters()->GetAt(GetTMParameters()->Find(pDatabaseTMParameter->GetTag()))))
		{
			pParameter->Copy(pDatabaseTMParameter);
			cDatabaseTMParameters.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pParameter = new CDatabaseTMParameter))
		{
			for (pParameter->Copy(pDatabaseTMParameter); GetTMParameters()->Add(pParameter) >= 0; )
			{
				cDatabaseTMParameters.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pParameter;
		}
		cDatabaseTMParameters.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	CString  szQuery;
	CDatabaseTCParameter  *pParameter;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCParametersRecordset  cDatabaseTCParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CPC_SQLFINDSET), (LPCTSTR)pDatabaseTCParameter->GetTag());
			cDatabaseTCParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTCParameters.IsBOF() || cDatabaseTCParameters.IsEOF())
		{
			try
			{
				cDatabaseTCParameters.AddNew();
				cDatabaseTCParameters.Translate(pDatabaseTCParameter);
				cDatabaseTCParameters.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTCParameters.Edit();
				cDatabaseTCParameters.Translate(pDatabaseTCParameter);
				cDatabaseTCParameters.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pParameter = GetTCParameters()->GetAt(GetTCParameters()->Find(pDatabaseTCParameter->GetTag()))))
		{
			pParameter->Copy(pDatabaseTCParameter);
			cDatabaseTCParameters.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pParameter = new CDatabaseTCParameter))
		{
			for (pParameter->Copy(pDatabaseTCParameter); GetTCParameters()->Add(pParameter) >= 0; )
			{
				cDatabaseTCParameters.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pParameter;
		}
		cDatabaseTCParameters.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTMNumCalTable *pDatabaseTMNumCalTable)
{
	INT  nPoint;
	INT  nPoints;
	CString  szQuery;
	CDatabaseTMNumCalTable  *pTMTable;
	CDatabaseTCNumCalTable  *pTCTable;
	CDatabaseTMNumCalPoint  *pDatabaseTMNumCalPoint;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMNumCalTablesRecordset  cDatabaseTMNumCalTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CAL_SQLFINDSET), (LPCTSTR)pDatabaseTMNumCalTable->GetName());
			cDatabaseTMNumCalTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTMNumCalTables.IsBOF() || cDatabaseTMNumCalTables.IsEOF())
		{
			try
			{
				cDatabaseTMNumCalTables.AddNew();
				cDatabaseTMNumCalTables.Translate(pDatabaseTMNumCalTable);
				cDatabaseTMNumCalTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMNumCalTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTMNumCalTables.Edit();
				cDatabaseTMNumCalTables.Translate(pDatabaseTMNumCalTable);
				cDatabaseTMNumCalTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMNumCalTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMNumCalTablePointsRecordset  cDatabaseTMNumCalTablePoints(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CALP_SQLFINDSET), (LPCTSTR)pDatabaseTMNumCalTable->GetName());
			cDatabaseTMNumCalTablePoints.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMNumCalTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMNumCalTablePoints.IsBOF() && !cDatabaseTMNumCalTablePoints.IsEOF())
		{
			try
			{
				cDatabaseTMNumCalTablePoints.Delete();
				cDatabaseTMNumCalTablePoints.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMNumCalTables.Close();
				cDatabaseTMNumCalTablePoints.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nPoint = 0, nPoints = (INT)pDatabaseTMNumCalTable->GetSize(); nPoint < nPoints; nPoint++)
		{
			if ((pDatabaseTMNumCalPoint = pDatabaseTMNumCalTable->GetAt(nPoint)))
			{
				try
				{
					cDatabaseTMNumCalTablePoints.AddNew();
					cDatabaseTMNumCalTablePoints.Translate(pDatabaseTMNumCalTable, pDatabaseTMNumCalPoint);
					cDatabaseTMNumCalTablePoints.Update();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseTMNumCalTables.Close();
					cDatabaseTMNumCalTablePoints.Close();
					CloseDBMS();
					return FALSE;
				}
			}
		}
		if ((pTMTable = GetTMNumCalTables()->GetAt(GetTMNumCalTables()->Find(pDatabaseTMNumCalTable->GetName()))))
		{
			for (pTMTable->Copy(pDatabaseTMNumCalTable); (pTCTable = GetTCNumCalTables()->GetAt(GetTCNumCalTables()->Find(pDatabaseTMNumCalTable->GetName()))); )
			{
				pTCTable->Copy(pTMTable);
				cDatabaseTMNumCalTables.Close();
				cDatabaseTMNumCalTablePoints.Close();
				CloseDBMS();
				return TRUE;
			}
			if ((pTCTable = new CDatabaseTCNumCalTable))
			{
				for (pTCTable->Copy(pTMTable); GetTCNumCalTables()->Add(pTCTable) < 0; )
				{
					delete pTCTable;
					break;
				}
			}
			cDatabaseTMNumCalTables.Close();
			cDatabaseTMNumCalTablePoints.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pTMTable = new CDatabaseTMNumCalTable))
		{
			for (pTMTable->Copy(pDatabaseTMNumCalTable); GetTMNumCalTables()->Add(pTMTable) >= 0; )
			{
				if ((pTCTable = GetTCNumCalTables()->GetAt(GetTCNumCalTables()->Find(pDatabaseTMNumCalTable->GetName()))))
				{
					pTCTable->Copy(pTMTable);
					cDatabaseTMNumCalTables.Close();
					cDatabaseTMNumCalTablePoints.Close();
					CloseDBMS();
					return TRUE;
				}
				if ((pTCTable = new CDatabaseTCNumCalTable))
				{
					for (pTCTable->Copy(pTMTable); GetTCNumCalTables()->Add(pTCTable) < 0; )
					{
						delete pTCTable;
						break;
					}
				}
				cDatabaseTMNumCalTables.Close();
				cDatabaseTMNumCalTablePoints.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pTMTable;
		}
		cDatabaseTMNumCalTables.Close();
		cDatabaseTMNumCalTablePoints.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTMTxtCalTable *pDatabaseTMTxtCalTable)
{
	INT  nPoint;
	INT  nPoints;
	CString  szQuery;
	CDatabaseTMTxtCalTable  *pTMTable;
	CDatabaseTCTxtCalTable  *pTCTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMTxtCalTablesRecordset  cDatabaseTMTxtCalTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_TXF_SQLFINDSET), (LPCTSTR)pDatabaseTMTxtCalTable->GetName());
			cDatabaseTMTxtCalTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTMTxtCalTables.IsBOF() || cDatabaseTMTxtCalTables.IsEOF())
		{
			try
			{
				cDatabaseTMTxtCalTables.AddNew();
				cDatabaseTMTxtCalTables.Translate(pDatabaseTMTxtCalTable);
				cDatabaseTMTxtCalTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMTxtCalTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTMTxtCalTables.Edit();
				cDatabaseTMTxtCalTables.Translate(pDatabaseTMTxtCalTable);
				cDatabaseTMTxtCalTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMTxtCalTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMTxtCalTablePointsRecordset  cDatabaseTMTxtCalTablePoints(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_TXFP_SQLFINDSET), (LPCTSTR)pDatabaseTMTxtCalTable->GetName());
			cDatabaseTMTxtCalTablePoints.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMTxtCalTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMTxtCalTablePoints.IsBOF() && !cDatabaseTMTxtCalTablePoints.IsEOF())
		{
			try
			{
				cDatabaseTMTxtCalTablePoints.Delete();
				cDatabaseTMTxtCalTablePoints.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMTxtCalTables.Close();
				cDatabaseTMTxtCalTablePoints.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nPoint = 0, nPoints = (INT)pDatabaseTMTxtCalTable->GetSize(); nPoint < nPoints; nPoint++)
		{
			if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt(nPoint)))
			{
				try
				{
					cDatabaseTMTxtCalTablePoints.AddNew();
					cDatabaseTMTxtCalTablePoints.Translate(pDatabaseTMTxtCalTable, pDatabaseTMTxtCalPoint);
					cDatabaseTMTxtCalTablePoints.Update();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseTMTxtCalTables.Close();
					cDatabaseTMTxtCalTablePoints.Close();
					CloseDBMS();
					return FALSE;
				}
			}
		}
		if ((pTMTable = GetTMTxtCalTables()->GetAt(GetTMTxtCalTables()->Find(pDatabaseTMTxtCalTable->GetName()))))
		{
			for (pTMTable->Copy(pDatabaseTMTxtCalTable); (pTCTable = GetTCTxtCalTables()->GetAt(GetTCTxtCalTables()->Find(pDatabaseTMTxtCalTable->GetName()))); )
			{
				pTCTable->Copy(pTMTable);
				cDatabaseTMTxtCalTables.Close();
				cDatabaseTMTxtCalTablePoints.Close();
				CloseDBMS();
				return TRUE;
			}
			if ((pTCTable = new CDatabaseTCTxtCalTable))
			{
				for (pTCTable->Copy(pTMTable); GetTCTxtCalTables()->Add(pTCTable) < 0; )
				{
					delete pTCTable;
					break;
				}
			}
			cDatabaseTMTxtCalTables.Close();
			cDatabaseTMTxtCalTablePoints.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pTMTable = new CDatabaseTMTxtCalTable))
		{
			for (pTMTable->Copy(pDatabaseTMTxtCalTable); GetTMTxtCalTables()->Add(pTMTable) >= 0; )
			{
				if ((pTCTable = GetTCTxtCalTables()->GetAt(GetTCTxtCalTables()->Find(pDatabaseTMTxtCalTable->GetName()))))
				{
					pTCTable->Copy(pTMTable);
					cDatabaseTMTxtCalTables.Close();
					cDatabaseTMTxtCalTablePoints.Close();
					CloseDBMS();
					return TRUE;
				}
				if ((pTCTable = new CDatabaseTCTxtCalTable))
				{
					for (pTCTable->Copy(pTMTable); GetTCTxtCalTables()->Add(pTCTable) < 0; )
					{
						delete pTCTable;
						break;
					}
				}
				cDatabaseTMTxtCalTables.Close();
				cDatabaseTMTxtCalTablePoints.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pTMTable;
		}
		cDatabaseTMTxtCalTables.Close();
		cDatabaseTMTxtCalTablePoints.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTMNumOolTable *pDatabaseTMNumOolTable)
{
	INT  nLimit;
	INT  nLimits;
	CString  szQuery;
	CDatabaseTMNumOolTable  *pTable;
	CDatabaseTMNumOolLimit  *pDatabaseTMNumOolLimit;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMNumOolTablesRecordset  cDatabaseTMNumOolTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_OCF_SQLFINDSET), (LPCTSTR)pDatabaseTMNumOolTable->GetName());
			cDatabaseTMNumOolTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTMNumOolTables.IsBOF() || cDatabaseTMNumOolTables.IsEOF())
		{
			try
			{
				cDatabaseTMNumOolTables.AddNew();
				cDatabaseTMNumOolTables.Translate(pDatabaseTMNumOolTable);
				cDatabaseTMNumOolTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMNumOolTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTMNumOolTables.Edit();
				cDatabaseTMNumOolTables.Translate(pDatabaseTMNumOolTable);
				cDatabaseTMNumOolTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMNumOolTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMNumOolTableLimitsRecordset  cDatabaseTMNumOolTableLimits(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_OCFP_SQLFINDSET), (LPCTSTR)pDatabaseTMNumOolTable->GetName());
			cDatabaseTMNumOolTableLimits.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMNumOolTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMNumOolTableLimits.IsBOF() && !cDatabaseTMNumOolTableLimits.IsEOF())
		{
			try
			{
				cDatabaseTMNumOolTableLimits.Delete();
				cDatabaseTMNumOolTableLimits.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMNumOolTables.Close();
				cDatabaseTMNumOolTableLimits.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nLimit = 0, nLimits = (INT)pDatabaseTMNumOolTable->GetSize(); nLimit < nLimits; nLimit++)
		{
			if ((pDatabaseTMNumOolLimit = pDatabaseTMNumOolTable->GetAt(nLimit)))
			{
				try
				{
					cDatabaseTMNumOolTableLimits.AddNew();
					cDatabaseTMNumOolTableLimits.Translate(pDatabaseTMNumOolTable, pDatabaseTMNumOolLimit);
					cDatabaseTMNumOolTableLimits.Update();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseTMNumOolTables.Close();
					cDatabaseTMNumOolTableLimits.Close();
					CloseDBMS();
					return FALSE;
				}
			}
		}
		if ((pTable = GetTMNumOolTables()->GetAt(GetTMNumOolTables()->Find(pDatabaseTMNumOolTable->GetName()))))
		{
			pTable->Copy(pDatabaseTMNumOolTable);
			cDatabaseTMNumOolTables.Close();
			cDatabaseTMNumOolTableLimits.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pTable = new CDatabaseTMNumOolTable))
		{
			for (pTable->Copy(pDatabaseTMNumOolTable); GetTMNumOolTables()->Add(pTable) >= 0; )
			{
				cDatabaseTMNumOolTables.Close();
				cDatabaseTMNumOolTableLimits.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pTable;
		}
		cDatabaseTMNumOolTables.Close();
		cDatabaseTMNumOolTableLimits.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTMTxtOolTable *pDatabaseTMTxtOolTable)
{
	INT  nLimit;
	INT  nLimits;
	CString  szQuery;
	CDatabaseTMTxtOolTable  *pTable;
	CDatabaseTMTxtOolLimit  *pDatabaseTMTxtOolLimit;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMTxtOolTablesRecordset  cDatabaseTMTxtOolTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_FXF_SQLFINDSET), (LPCTSTR)pDatabaseTMTxtOolTable->GetName());
			cDatabaseTMTxtOolTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTMTxtOolTables.IsBOF() || cDatabaseTMTxtOolTables.IsEOF())
		{
			try
			{
				cDatabaseTMTxtOolTables.AddNew();
				cDatabaseTMTxtOolTables.Translate(pDatabaseTMTxtOolTable);
				cDatabaseTMTxtOolTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMTxtOolTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTMTxtOolTables.Edit();
				cDatabaseTMTxtOolTables.Translate(pDatabaseTMTxtOolTable);
				cDatabaseTMTxtOolTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMTxtOolTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMTxtOolTableLimitsRecordset  cDatabaseTMTxtOolTableLimits(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_FXFP_SQLFINDSET), (LPCTSTR)pDatabaseTMTxtOolTable->GetName());
			cDatabaseTMTxtOolTableLimits.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMTxtOolTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMTxtOolTableLimits.IsBOF() && !cDatabaseTMTxtOolTableLimits.IsEOF())
		{
			try
			{
				cDatabaseTMTxtOolTableLimits.Delete();
				cDatabaseTMTxtOolTableLimits.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMTxtOolTables.Close();
				cDatabaseTMTxtOolTableLimits.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nLimit = 0, nLimits = (INT)pDatabaseTMTxtOolTable->GetSize(); nLimit < nLimits; nLimit++)
		{
			if ((pDatabaseTMTxtOolLimit = pDatabaseTMTxtOolTable->GetAt(nLimit)))
			{
				try
				{
					cDatabaseTMTxtOolTableLimits.AddNew();
					cDatabaseTMTxtOolTableLimits.Translate(pDatabaseTMTxtOolTable, pDatabaseTMTxtOolLimit);
					cDatabaseTMTxtOolTableLimits.Update();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseTMTxtOolTables.Close();
					cDatabaseTMTxtOolTableLimits.Close();
					CloseDBMS();
					return FALSE;
				}
			}
		}
		if ((pTable = GetTMTxtOolTables()->GetAt(GetTMTxtOolTables()->Find(pDatabaseTMTxtOolTable->GetName()))))
		{
			pTable->Copy(pDatabaseTMTxtOolTable);
			cDatabaseTMTxtOolTables.Close();
			cDatabaseTMTxtOolTableLimits.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pTable = new CDatabaseTMTxtOolTable))
		{
			for (pTable->Copy(pDatabaseTMTxtOolTable); GetTMTxtOolTables()->Add(pTable) >= 0; )
			{
				cDatabaseTMTxtOolTables.Close();
				cDatabaseTMTxtOolTableLimits.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pTable;
		}
		cDatabaseTMTxtOolTables.Close();
		cDatabaseTMTxtOolTableLimits.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTCNumCalTable *pDatabaseTCNumCalTable)
{
	INT  nPoint;
	INT  nPoints;
	CString  szQuery;
	CDatabaseTMNumCalTable  *pTMTable;
	CDatabaseTCNumCalTable  *pTCTable;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCNumCalTablesRecordset  cDatabaseTCNumCalTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CAL_SQLFINDSET), (LPCTSTR)pDatabaseTCNumCalTable->GetName());
			cDatabaseTCNumCalTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTCNumCalTables.IsBOF() || cDatabaseTCNumCalTables.IsEOF())
		{
			try
			{
				cDatabaseTCNumCalTables.AddNew();
				cDatabaseTCNumCalTables.Translate(pDatabaseTCNumCalTable);
				cDatabaseTCNumCalTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCNumCalTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTCNumCalTables.Edit();
				cDatabaseTCNumCalTables.Translate(pDatabaseTCNumCalTable);
				cDatabaseTCNumCalTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCNumCalTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCNumCalTablePointsRecordset  cDatabaseTCNumCalTablePoints(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CALP_SQLFINDSET), (LPCTSTR)pDatabaseTCNumCalTable->GetName());
			cDatabaseTCNumCalTablePoints.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCNumCalTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCNumCalTablePoints.IsBOF() && !cDatabaseTCNumCalTablePoints.IsEOF())
		{
			try
			{
				cDatabaseTCNumCalTablePoints.Delete();
				cDatabaseTCNumCalTablePoints.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCNumCalTables.Close();
				cDatabaseTCNumCalTablePoints.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nPoint = 0, nPoints = (INT)pDatabaseTCNumCalTable->GetSize(); nPoint < nPoints; nPoint++)
		{
			if ((pDatabaseTCNumCalPoint = pDatabaseTCNumCalTable->GetAt(nPoint)))
			{
				try
				{
					cDatabaseTCNumCalTablePoints.AddNew();
					cDatabaseTCNumCalTablePoints.Translate(pDatabaseTCNumCalTable, pDatabaseTCNumCalPoint);
					cDatabaseTCNumCalTablePoints.Update();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseTCNumCalTables.Close();
					cDatabaseTCNumCalTablePoints.Close();
					CloseDBMS();
					return FALSE;
				}
			}
		}
		if ((pTCTable = GetTCNumCalTables()->GetAt(GetTCNumCalTables()->Find(pDatabaseTCNumCalTable->GetName()))))
		{
			for (pTCTable->Copy(pDatabaseTCNumCalTable); (pTMTable = GetTMNumCalTables()->GetAt(GetTMNumCalTables()->Find(pDatabaseTCNumCalTable->GetName()))); )
			{
				pTMTable->Copy(pTCTable);
				cDatabaseTCNumCalTables.Close();
				cDatabaseTCNumCalTablePoints.Close();
				CloseDBMS();
				return TRUE;
			}
			if ((pTMTable = new CDatabaseTMNumCalTable))
			{
				for (pTMTable->Copy(pTCTable); GetTMNumCalTables()->Add(pTMTable) < 0; )
				{
					delete pTMTable;
					break;
				}
			}
			cDatabaseTCNumCalTables.Close();
			cDatabaseTCNumCalTablePoints.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pTCTable = new CDatabaseTCNumCalTable))
		{
			for (pTCTable->Copy(pDatabaseTCNumCalTable); GetTCNumCalTables()->Add(pTCTable) >= 0; )
			{
				if ((pTMTable = GetTMNumCalTables()->GetAt(GetTMNumCalTables()->Find(pDatabaseTCNumCalTable->GetName()))))
				{
					pTMTable->Copy(pTCTable);
					cDatabaseTCNumCalTables.Close();
					cDatabaseTCNumCalTablePoints.Close();
					CloseDBMS();
					return TRUE;
				}
				if ((pTMTable = new CDatabaseTMNumCalTable))
				{
					for (pTMTable->Copy(pTCTable); GetTMNumCalTables()->Add(pTMTable) < 0; )
					{
						delete pTMTable;
						break;
					}
				}
				cDatabaseTCNumCalTables.Close();
				cDatabaseTCNumCalTablePoints.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pTCTable;
		}
		cDatabaseTCNumCalTables.Close();
		cDatabaseTCNumCalTablePoints.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTCTxtCalTable *pDatabaseTCTxtCalTable)
{
	INT  nPoint;
	INT  nPoints;
	CString  szQuery;
	CDatabaseTMTxtCalTable  *pTMTable;
	CDatabaseTCTxtCalTable  *pTCTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCTxtCalTablesRecordset  cDatabaseTCTxtCalTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_TXF_SQLFINDSET), (LPCTSTR)pDatabaseTCTxtCalTable->GetName());
			cDatabaseTCTxtCalTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTCTxtCalTables.IsBOF() || cDatabaseTCTxtCalTables.IsEOF())
		{
			try
			{
				cDatabaseTCTxtCalTables.AddNew();
				cDatabaseTCTxtCalTables.Translate(pDatabaseTCTxtCalTable);
				cDatabaseTCTxtCalTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCTxtCalTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTCTxtCalTables.Edit();
				cDatabaseTCTxtCalTables.Translate(pDatabaseTCTxtCalTable);
				cDatabaseTCTxtCalTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCTxtCalTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCTxtCalTablePointsRecordset  cDatabaseTCTxtCalTablePoints(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_TXFP_SQLFINDSET), (LPCTSTR)pDatabaseTCTxtCalTable->GetName());
			cDatabaseTCTxtCalTablePoints.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCTxtCalTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCTxtCalTablePoints.IsBOF() && !cDatabaseTCTxtCalTablePoints.IsEOF())
		{
			try
			{
				cDatabaseTCTxtCalTablePoints.Delete();
				cDatabaseTCTxtCalTablePoints.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCTxtCalTables.Close();
				cDatabaseTCTxtCalTablePoints.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nPoint = 0, nPoints = (INT)pDatabaseTCTxtCalTable->GetSize(); nPoint < nPoints; nPoint++)
		{
			if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nPoint)))
			{
				try
				{
					cDatabaseTCTxtCalTablePoints.AddNew();
					cDatabaseTCTxtCalTablePoints.Translate(pDatabaseTCTxtCalTable, pDatabaseTCTxtCalPoint);
					cDatabaseTCTxtCalTablePoints.Update();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseTCTxtCalTables.Close();
					cDatabaseTCTxtCalTablePoints.Close();
					CloseDBMS();
					return FALSE;
				}
			}
		}
		if ((pTCTable = GetTCTxtCalTables()->GetAt(GetTCTxtCalTables()->Find(pDatabaseTCTxtCalTable->GetName()))))
		{
			for (pTCTable->Copy(pDatabaseTCTxtCalTable); (pTMTable = GetTMTxtCalTables()->GetAt(GetTMTxtCalTables()->Find(pDatabaseTCTxtCalTable->GetName()))); )
			{
				pTMTable->Copy(pTCTable);
				cDatabaseTCTxtCalTables.Close();
				cDatabaseTCTxtCalTablePoints.Close();
				CloseDBMS();
				return TRUE;
			}
			if ((pTMTable = new CDatabaseTMTxtCalTable))
			{
				for (pTMTable->Copy(pTCTable); GetTMTxtCalTables()->Add(pTMTable) < 0; )
				{
					delete pTMTable;
					break;
				}
			}
			cDatabaseTCTxtCalTables.Close();
			cDatabaseTCTxtCalTablePoints.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pTCTable = new CDatabaseTCTxtCalTable))
		{
			for (pTCTable->Copy(pDatabaseTCTxtCalTable); GetTCTxtCalTables()->Add(pTCTable) >= 0; )
			{
				if ((pTMTable = GetTMTxtCalTables()->GetAt(GetTMTxtCalTables()->Find(pDatabaseTCTxtCalTable->GetName()))))
				{
					pTMTable->Copy(pTCTable);
					cDatabaseTCTxtCalTables.Close();
					cDatabaseTCTxtCalTablePoints.Close();
					CloseDBMS();
					return TRUE;
				}
				if ((pTMTable = new CDatabaseTMTxtCalTable))
				{
					for (pTMTable->Copy(pTCTable); GetTMTxtCalTables()->Add(pTMTable) < 0; )
					{
						delete pTMTable;
						break;
					}
				}
				cDatabaseTCTxtCalTables.Close();
				cDatabaseTCTxtCalTablePoints.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pTCTable;
		}
		cDatabaseTCTxtCalTables.Close();
		cDatabaseTCTxtCalTablePoints.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTCNumOolTable *pDatabaseTCNumOolTable)
{
	INT  nLimit;
	INT  nLimits;
	CString  szQuery;
	CDatabaseTCNumOolTable  *pTable;
	CDatabaseTCNumOolLimit  *pDatabaseTCNumOolLimit;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCNumOolTablesRecordset  cDatabaseTCNumOolTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_OCF_SQLFINDSET), (LPCTSTR)pDatabaseTCNumOolTable->GetName());
			cDatabaseTCNumOolTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTCNumOolTables.IsBOF() || cDatabaseTCNumOolTables.IsEOF())
		{
			try
			{
				cDatabaseTCNumOolTables.AddNew();
				cDatabaseTCNumOolTables.Translate(pDatabaseTCNumOolTable);
				cDatabaseTCNumOolTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCNumOolTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTCNumOolTables.Edit();
				cDatabaseTCNumOolTables.Translate(pDatabaseTCNumOolTable);
				cDatabaseTCNumOolTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCNumOolTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCNumOolTableLimitsRecordset  cDatabaseTCNumOolTableLimits(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_OCFP_SQLFINDSET), (LPCTSTR)pDatabaseTCNumOolTable->GetName());
			cDatabaseTCNumOolTableLimits.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCNumOolTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCNumOolTableLimits.IsBOF() && !cDatabaseTCNumOolTableLimits.IsEOF())
		{
			try
			{
				cDatabaseTCNumOolTableLimits.Delete();
				cDatabaseTCNumOolTableLimits.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCNumOolTables.Close();
				cDatabaseTCNumOolTableLimits.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nLimit = 0, nLimits = (INT)pDatabaseTCNumOolTable->GetSize(); nLimit < nLimits; nLimit++)
		{
			if ((pDatabaseTCNumOolLimit = pDatabaseTCNumOolTable->GetAt(nLimit)))
			{
				try
				{
					cDatabaseTCNumOolTableLimits.AddNew();
					cDatabaseTCNumOolTableLimits.Translate(pDatabaseTCNumOolTable, pDatabaseTCNumOolLimit);
					cDatabaseTCNumOolTableLimits.Update();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseTCNumOolTables.Close();
					cDatabaseTCNumOolTableLimits.Close();
					CloseDBMS();
					return FALSE;
				}
			}
		}
		if ((pTable = GetTCNumOolTables()->GetAt(GetTCNumOolTables()->Find(pDatabaseTCNumOolTable->GetName()))))
		{
			pTable->Copy(pDatabaseTCNumOolTable);
			cDatabaseTCNumOolTables.Close();
			cDatabaseTCNumOolTableLimits.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pTable = new CDatabaseTCNumOolTable))
		{
			for (pTable->Copy(pDatabaseTCNumOolTable); GetTCNumOolTables()->Add(pTable) >= 0; )
			{
				cDatabaseTCNumOolTables.Close();
				cDatabaseTCNumOolTableLimits.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pTable;
		}
		cDatabaseTCNumOolTables.Close();
		cDatabaseTCNumOolTableLimits.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTCTxtOolTable *pDatabaseTCTxtOolTable)
{
	INT  nLimit;
	INT  nLimits;
	CString  szQuery;
	CDatabaseTCTxtOolTable  *pTable;
	CDatabaseTCTxtOolLimit  *pDatabaseTCTxtOolLimit;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCTxtOolTablesRecordset  cDatabaseTCTxtOolTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_FXF_SQLFINDSET), (LPCTSTR)pDatabaseTCTxtOolTable->GetName());
			cDatabaseTCTxtOolTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTCTxtOolTables.IsBOF() || cDatabaseTCTxtOolTables.IsEOF())
		{
			try
			{
				cDatabaseTCTxtOolTables.AddNew();
				cDatabaseTCTxtOolTables.Translate(pDatabaseTCTxtOolTable);
				cDatabaseTCTxtOolTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCTxtOolTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTCTxtOolTables.Edit();
				cDatabaseTCTxtOolTables.Translate(pDatabaseTCTxtOolTable);
				cDatabaseTCTxtOolTables.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCTxtOolTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCTxtOolTableLimitsRecordset  cDatabaseTCTxtOolTableLimits(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_FXFP_SQLFINDSET), (LPCTSTR)pDatabaseTCTxtOolTable->GetName());
			cDatabaseTCTxtOolTableLimits.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCTxtOolTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCTxtOolTableLimits.IsBOF() && !cDatabaseTCTxtOolTableLimits.IsEOF())
		{
			try
			{
				cDatabaseTCTxtOolTableLimits.Delete();
				cDatabaseTCTxtOolTableLimits.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCTxtOolTables.Close();
				cDatabaseTCTxtOolTableLimits.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nLimit = 0, nLimits = (INT)pDatabaseTCTxtOolTable->GetSize(); nLimit < nLimits; nLimit++)
		{
			if ((pDatabaseTCTxtOolLimit = pDatabaseTCTxtOolTable->GetAt(nLimit)))
			{
				try
				{
					cDatabaseTCTxtOolTableLimits.AddNew();
					cDatabaseTCTxtOolTableLimits.Translate(pDatabaseTCTxtOolTable, pDatabaseTCTxtOolLimit);
					cDatabaseTCTxtOolTableLimits.Update();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseTCTxtOolTables.Close();
					cDatabaseTCTxtOolTableLimits.Close();
					CloseDBMS();
					return FALSE;
				}
			}
		}
		if ((pTable = GetTCTxtOolTables()->GetAt(GetTCTxtOolTables()->Find(pDatabaseTCTxtOolTable->GetName()))))
		{
			pTable->Copy(pDatabaseTCTxtOolTable);
			cDatabaseTCTxtOolTables.Close();
			cDatabaseTCTxtOolTableLimits.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pTable = new CDatabaseTCTxtOolTable))
		{
			for (pTable->Copy(pDatabaseTCTxtOolTable); GetTCTxtOolTables()->Add(pTable) >= 0; )
			{
				cDatabaseTCTxtOolTables.Close();
				cDatabaseTCTxtOolTableLimits.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pTable;
		}
		cDatabaseTCTxtOolTables.Close();
		cDatabaseTCTxtOolTableLimits.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTCPreExeGroup *pDatabaseTCPreExeGroup)
{
	INT  nParameter;
	INT  nParameters;
	CString  szQuery;
	CDatabaseTCPreExeGroup  *pGroup;
	CDatabaseTCPreExeGroupParameter  *pDatabaseTCPreExeGroupParameter;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCPreExeGroupsRecordset  cDatabaseTCPreExeGroups(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PVP_SQLFINDSET), (LPCTSTR)pDatabaseTCPreExeGroup->GetID());
			cDatabaseTCPreExeGroups.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTCPreExeGroups.IsBOF() || cDatabaseTCPreExeGroups.IsEOF())
		{
			try
			{
				cDatabaseTCPreExeGroups.AddNew();
				cDatabaseTCPreExeGroups.Translate(pDatabaseTCPreExeGroup);
				cDatabaseTCPreExeGroups.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCPreExeGroups.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTCPreExeGroups.Edit();
				cDatabaseTCPreExeGroups.Translate(pDatabaseTCPreExeGroup);
				cDatabaseTCPreExeGroups.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCPreExeGroups.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCPreExeGroupParametersRecordset  cDatabaseTCPreExeGroupParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PEV_SQLFINDSET), (LPCTSTR)pDatabaseTCPreExeGroup->GetID());
			cDatabaseTCPreExeGroupParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCPreExeGroups.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCPreExeGroupParameters.IsBOF() && !cDatabaseTCPreExeGroupParameters.IsEOF())
		{
			try
			{
				cDatabaseTCPreExeGroupParameters.Delete();
				cDatabaseTCPreExeGroupParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCPreExeGroups.Close();
				cDatabaseTCPreExeGroupParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nParameter = 0, nParameters = (INT)pDatabaseTCPreExeGroup->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTCPreExeGroupParameter = pDatabaseTCPreExeGroup->GetAt(nParameter)))
			{
				try
				{
					cDatabaseTCPreExeGroupParameters.AddNew();
					cDatabaseTCPreExeGroupParameters.Translate(pDatabaseTCPreExeGroup, pDatabaseTCPreExeGroupParameter);
					cDatabaseTCPreExeGroupParameters.Update();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseTCPreExeGroups.Close();
					cDatabaseTCPreExeGroupParameters.Close();
					CloseDBMS();
					return FALSE;
				}
			}
		}
		if ((pGroup = GetTCPreExeGroups()->GetAt(GetTCPreExeGroups()->Find(pDatabaseTCPreExeGroup->GetID()))))
		{
			pGroup->Copy(pDatabaseTCPreExeGroup);
			cDatabaseTCPreExeGroups.Close();
			cDatabaseTCPreExeGroupParameters.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pGroup = new CDatabaseTCPreExeGroup))
		{
			for (pGroup->Copy(pDatabaseTCPreExeGroup); GetTCPreExeGroups()->Add(pGroup) >= 0; )
			{
				cDatabaseTCPreExeGroups.Close();
				cDatabaseTCPreExeGroupParameters.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pGroup;
		}
		cDatabaseTCPreExeGroups.Close();
		cDatabaseTCPreExeGroupParameters.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTCExeVerGroup *pDatabaseTCExeVerGroup)
{
	INT  nParameter;
	INT  nParameters;
	CString  szQuery;
	CDatabaseTCExeVerGroup  *pGroup;
	CDatabaseTCExeVerGroupParameter  *pDatabaseTCExeVerGroupParameter;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCExeVerGroupsRecordset  cDatabaseTCExeVerGroups(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CVP_SQLFINDSET), (LPCTSTR)pDatabaseTCExeVerGroup->GetID());
			cDatabaseTCExeVerGroups.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTCExeVerGroups.IsBOF() || cDatabaseTCExeVerGroups.IsEOF())
		{
			try
			{
				cDatabaseTCExeVerGroups.AddNew();
				cDatabaseTCExeVerGroups.Translate(pDatabaseTCExeVerGroup);
				cDatabaseTCExeVerGroups.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCExeVerGroups.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTCExeVerGroups.Edit();
				cDatabaseTCExeVerGroups.Translate(pDatabaseTCExeVerGroup);
				cDatabaseTCExeVerGroups.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCExeVerGroups.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCExeVerGroupParametersRecordset  cDatabaseTCExeVerGroupParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CEV_SQLFINDSET), (LPCTSTR)pDatabaseTCExeVerGroup->GetID());
			cDatabaseTCExeVerGroupParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCExeVerGroups.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCExeVerGroupParameters.IsBOF() && !cDatabaseTCExeVerGroupParameters.IsEOF())
		{
			try
			{
				cDatabaseTCExeVerGroupParameters.Delete();
				cDatabaseTCExeVerGroupParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCExeVerGroups.Close();
				cDatabaseTCExeVerGroupParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nParameter = 0, nParameters = (INT)pDatabaseTCExeVerGroup->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTCExeVerGroupParameter = pDatabaseTCExeVerGroup->GetAt(nParameter)))
			{
				try
				{
					cDatabaseTCExeVerGroupParameters.AddNew();
					cDatabaseTCExeVerGroupParameters.Translate(pDatabaseTCExeVerGroup, pDatabaseTCExeVerGroupParameter);
					cDatabaseTCExeVerGroupParameters.Update();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseTCExeVerGroups.Close();
					cDatabaseTCExeVerGroupParameters.Close();
					CloseDBMS();
					return FALSE;
				}
			}
		}
		if ((pGroup = GetTCExeVerGroups()->GetAt(GetTCExeVerGroups()->Find(pDatabaseTCExeVerGroup->GetID()))))
		{
			pGroup->Copy(pDatabaseTCExeVerGroup);
			cDatabaseTCExeVerGroups.Close();
			cDatabaseTCExeVerGroupParameters.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pGroup = new CDatabaseTCExeVerGroup))
		{
			for (pGroup->Copy(pDatabaseTCExeVerGroup); GetTCExeVerGroups()->Add(pGroup) >= 0; )
			{
				cDatabaseTCExeVerGroups.Close();
				cDatabaseTCExeVerGroupParameters.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pGroup;
		}
		cDatabaseTCExeVerGroups.Close();
		cDatabaseTCExeVerGroupParameters.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTMPacketHeader *pDatabaseTMPacketHeader)
{
	CString  szQuery;
	CDatabaseTMPacketHeader  *pHeader;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMPacketHeadersRecordset  cDatabaseTMPacketHeaders(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_DFH_SQLFINDSET), (LPCTSTR)pDatabaseTMPacketHeader->GetName());
			cDatabaseTMPacketHeaders.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTMPacketHeaders.IsBOF() || cDatabaseTMPacketHeaders.IsEOF())
		{
			try
			{
				cDatabaseTMPacketHeaders.AddNew();
				cDatabaseTMPacketHeaders.Translate(pDatabaseTMPacketHeader);
				cDatabaseTMPacketHeaders.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMPacketHeaders.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTMPacketHeaders.Edit();
				cDatabaseTMPacketHeaders.Translate(pDatabaseTMPacketHeader);
				cDatabaseTMPacketHeaders.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMPacketHeaders.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pHeader = GetTMPacketHeaders()->GetAt(GetTMPacketHeaders()->Find(pDatabaseTMPacketHeader->GetName()))))
		{
			pHeader->Copy(pDatabaseTMPacketHeader);
			cDatabaseTMPacketHeaders.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pHeader = new CDatabaseTMPacketHeader))
		{
			for (pHeader->Copy(pDatabaseTMPacketHeader); GetTMPacketHeaders()->Add(pHeader) >= 0; )
			{
				cDatabaseTMPacketHeaders.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pHeader;
		}
		cDatabaseTMPacketHeaders.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTMPacketStream *pDatabaseTMPacketStream)
{
	CString  szQuery;
	CDatabaseTMPacketStream  *pStream;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMPacketStreamsRecordset  cDatabaseTMPacketStreams(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_STR_SQLFINDSET), (LPCTSTR)pDatabaseTMPacketStream->GetName());
			cDatabaseTMPacketStreams.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTMPacketStreams.IsBOF() || cDatabaseTMPacketStreams.IsEOF())
		{
			try
			{
				cDatabaseTMPacketStreams.AddNew();
				cDatabaseTMPacketStreams.Translate(pDatabaseTMPacketStream);
				cDatabaseTMPacketStreams.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMPacketStreams.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTMPacketStreams.Edit();
				cDatabaseTMPacketStreams.Translate(pDatabaseTMPacketStream);
				cDatabaseTMPacketStreams.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMPacketStreams.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pStream = GetTMPacketStreams()->GetAt(GetTMPacketStreams()->Find(pDatabaseTMPacketStream->GetName()))))
		{
			pStream->Copy(pDatabaseTMPacketStream);
			cDatabaseTMPacketStreams.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pStream = new CDatabaseTMPacketStream))
		{
			for (pStream->Copy(pDatabaseTMPacketStream); GetTMPacketStreams()->Add(pStream) >= 0; )
			{
				cDatabaseTMPacketStreams.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pStream;
		}
		cDatabaseTMPacketStreams.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTCParameterSet *pDatabaseTCParameterSet)
{
	INT  nItem;
	INT  nItems;
	CString  szQuery;
	CDatabaseTCParameterSet  *pSet;
	CDatabaseTCFunctionElement  *pDatabaseTCParameterSetItem;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCParameterSetsRecordset  cDatabaseTCParameterSets(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CPS_SQLFINDSET), (LPCTSTR)pDatabaseTCParameterSet->GetName());
			cDatabaseTCParameterSets.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseTCParameterSets.IsBOF() || cDatabaseTCParameterSets.IsEOF())
		{
			try
			{
				cDatabaseTCParameterSets.AddNew();
				cDatabaseTCParameterSets.Translate(pDatabaseTCParameterSet);
				cDatabaseTCParameterSets.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCParameterSets.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseTCParameterSets.Edit();
				cDatabaseTCParameterSets.Translate(pDatabaseTCParameterSet);
				cDatabaseTCParameterSets.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCParameterSets.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCParameterSetItemsRecordset  cDatabaseTCParameterSetItems(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CPSP_SQLFINDSET), (LPCTSTR)pDatabaseTCParameterSet->GetName());
			cDatabaseTCParameterSetItems.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCParameterSets.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCParameterSetItems.IsBOF() && !cDatabaseTCParameterSetItems.IsEOF())
		{
			try
			{
				cDatabaseTCParameterSetItems.Delete();
				cDatabaseTCParameterSetItems.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCParameterSets.Close();
				cDatabaseTCParameterSetItems.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nItem = 0, nItems = (INT)pDatabaseTCParameterSet->GetSize(); nItem < nItems; nItem++)
		{
			if ((pDatabaseTCParameterSetItem = pDatabaseTCParameterSet->GetAt(nItem)) != (CDatabaseTCFunctionElement *)NULL)
			{
				if (cDatabaseTCParameterSetItems.Translate(pDatabaseTCParameterSet, pDatabaseTCParameterSetItem))
				{
					try
					{
						cDatabaseTCParameterSetItems.AddNew();
						cDatabaseTCParameterSetItems.Translate(pDatabaseTCParameterSet, pDatabaseTCParameterSetItem);
						cDatabaseTCParameterSetItems.Update();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseTCParameterSets.Close();
						cDatabaseTCParameterSetItems.Close();
						CloseDBMS();
						return FALSE;
					}
				}
			}
		}
		if ((pSet = GetTCParameterSets()->GetAt(GetTCParameterSets()->Find(pDatabaseTCParameterSet->GetName()))))
		{
			pSet->Copy(pDatabaseTCParameterSet);
			cDatabaseTCParameterSets.Close();
			cDatabaseTCParameterSetItems.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pSet = new CDatabaseTCParameterSet))
		{
			for (pSet->Copy(pDatabaseTCParameterSet); GetTCParameterSets()->Add(pSet) >= 0; )
			{
				cDatabaseTCParameterSets.Close();
				cDatabaseTCParameterSetItems.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pSet;
		}
		cDatabaseTCParameterSets.Close();
		cDatabaseTCParameterSetItems.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseTCFunctionBlock *pDatabaseTCFunctionBlock)
{
	INT  nElement;
	INT  nElements;
	UINT  nType[2];
	CString  szQuery;
	CDatabaseTCFunctionBlock  *pBlock;
	CDatabaseTCFunctionBlockElement  *pDatabaseTCFunctionBlockElement;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCFunctionBlocksRecordset  cDatabaseTCFunctionBlocks(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_BCF_SQLFINDSET), (LPCTSTR)pDatabaseTCFunctionBlock->GetName());
			cDatabaseTCFunctionBlocks.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCFunctionBlocks.IsBOF() && !cDatabaseTCFunctionBlocks.IsEOF())
		{
			try
			{
				cDatabaseTCFunctionBlocks.Delete();
				cDatabaseTCFunctionBlocks.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCFunctionBlocks.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		try
		{
			for (nType[0] = min(min(min(min(min(TCFUNCTIONBLOCK_TYPE_LI, TCFUNCTIONBLOCK_TYPE_LTT), TCFUNCTIONBLOCK_TYPE_L2S), TCFUNCTIONBLOCK_TYPE_NI), TCFUNCTIONBLOCK_TYPE_NTT), TCFUNCTIONBLOCK_TYPE_N2S), nType[1] = max(max(max(max(max(TCFUNCTIONBLOCK_TYPE_LI, TCFUNCTIONBLOCK_TYPE_LTT), TCFUNCTIONBLOCK_TYPE_L2S), TCFUNCTIONBLOCK_TYPE_NI), TCFUNCTIONBLOCK_TYPE_NTT), TCFUNCTIONBLOCK_TYPE_N2S); nType[0] <= nType[1]; nType[0] <<= 1)
			{
				if ((pDatabaseTCFunctionBlock->GetAttributes() & nType[0]) == nType[0])
				{
					if (cDatabaseTCFunctionBlocks.Translate(pDatabaseTCFunctionBlock, nType[0]))
					{
						cDatabaseTCFunctionBlocks.AddNew();
						cDatabaseTCFunctionBlocks.Translate(pDatabaseTCFunctionBlock, nType[0]);
						cDatabaseTCFunctionBlocks.Update();
					}
				}
			}
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCFunctionBlocks.Close();
			CloseDBMS();
			return FALSE;
		}
		CALTELDatabaseTCFunctionBlockElementsRecordset  cDatabaseTCFunctionBlockElements(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_BCCF_SQLFINDSET), (LPCTSTR)pDatabaseTCFunctionBlock->GetName());
			cDatabaseTCFunctionBlockElements.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCFunctionBlocks.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCFunctionBlockElements.IsBOF() && !cDatabaseTCFunctionBlockElements.IsEOF())
		{
			try
			{
				cDatabaseTCFunctionBlockElements.Delete();
				cDatabaseTCFunctionBlockElements.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCFunctionBlocks.Close();
				cDatabaseTCFunctionBlockElements.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nElement = 0, nElements = (INT)pDatabaseTCFunctionBlock->GetSize(); nElement < nElements; nElement++)
		{
			if ((pDatabaseTCFunctionBlockElement = pDatabaseTCFunctionBlock->GetAt(nElement)) != (CDatabaseTCFunctionBlockElement *)NULL)
			{
				if (cDatabaseTCFunctionBlockElements.Translate(pDatabaseTCFunctionBlock, pDatabaseTCFunctionBlockElement))
				{
					try
					{
						cDatabaseTCFunctionBlockElements.AddNew();
						cDatabaseTCFunctionBlockElements.Translate(pDatabaseTCFunctionBlock, pDatabaseTCFunctionBlockElement);
						cDatabaseTCFunctionBlockElements.Update();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseTCFunctionBlocks.Close();
						cDatabaseTCFunctionBlockElements.Close();
						CloseDBMS();
						return FALSE;
					}
				}
			}
		}
		if ((pBlock = GetTCFunctionBlocks()->GetAt(GetTCFunctionBlocks()->Find(pDatabaseTCFunctionBlock->GetName()))))
		{
			pBlock->Copy(pDatabaseTCFunctionBlock);
			cDatabaseTCFunctionBlocks.Close();
			cDatabaseTCFunctionBlockElements.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pBlock = new CDatabaseTCFunctionBlock))
		{
			for (pBlock->Copy(pDatabaseTCFunctionBlock); GetTCFunctionBlocks()->Add(pBlock) >= 0; )
			{
				cDatabaseTCFunctionBlocks.Close();
				cDatabaseTCFunctionBlockElements.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pBlock;
		}
		cDatabaseTCFunctionBlocks.Close();
		cDatabaseTCFunctionBlockElements.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CDatabaseOBProcessorMemoryImage *pDatabaseOBProcessorMemoryImage)
{
	INT  nImage;
	INT  nImages;
	CString  szQuery;
	CDatabaseOBProcessorMemoryImage  *pImage;
	CDatabaseOBProcessorMemoryImageBlock  *pDatabaseOBProcessorMemoryImageBlock;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseOBProcessorMemoryImagesRecordset  cDatabaseOBProcessorMemoryImages(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_IMG_SQLFINDSET), (LPCTSTR)pDatabaseOBProcessorMemoryImage->GetName());
			cDatabaseOBProcessorMemoryImages.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseOBProcessorMemoryImages.IsBOF() && !cDatabaseOBProcessorMemoryImages.IsEOF())
		{
			try
			{
				cDatabaseOBProcessorMemoryImages.Delete();
				cDatabaseOBProcessorMemoryImages.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseOBProcessorMemoryImages.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nImage = 0, nImages = (INT)pDatabaseOBProcessorMemoryImage->GetSize(); nImage < nImages; nImage++)
		{
			if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nImage)))
			{
				try
				{
					cDatabaseOBProcessorMemoryImages.AddNew();
					cDatabaseOBProcessorMemoryImages.Translate(pDatabaseOBProcessorMemoryImage, pDatabaseOBProcessorMemoryImageBlock);
					cDatabaseOBProcessorMemoryImages.Update();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseOBProcessorMemoryImages.Close();
					CloseDBMS();
					return FALSE;
				}
			}
		}
		if ((pImage = GetOBProcessorMemoryImages()->GetAt(GetOBProcessorMemoryImages()->Find(pDatabaseOBProcessorMemoryImage->GetName()))))
		{
			pImage->Copy(pDatabaseOBProcessorMemoryImage);
			cDatabaseOBProcessorMemoryImages.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pImage = new CDatabaseOBProcessorMemoryImage))
		{
			for (pImage->Copy(pDatabaseOBProcessorMemoryImage); GetOBProcessorMemoryImages()->Add(pImage) >= 0; )
			{
				cDatabaseOBProcessorMemoryImages.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pImage;
		}
		cDatabaseOBProcessorMemoryImages.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CANDLayout *pANDLayout)
{
	INT  nParameter;
	INT  nParameters;
	CString  szQuery;
	CANDLayout  *pLayout;
	CANDLayoutParameter  *pParameter;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseANDDirectoryRecordset  cDatabaseANDDirectory(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_DPF_SQLFINDSET), (LPCTSTR)pANDLayout->GetName());
			cDatabaseANDDirectory.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseANDDirectory.IsBOF() || cDatabaseANDDirectory.IsEOF())
		{
			try
			{
				cDatabaseANDDirectory.AddNew();
				cDatabaseANDDirectory.Translate(pANDLayout);
				cDatabaseANDDirectory.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseANDDirectory.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseANDDirectory.Edit();
				cDatabaseANDDirectory.Translate(pANDLayout);
				cDatabaseANDDirectory.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseANDDirectory.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseANDParametersRecordset  cDatabaseANDParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_DPFP_SQLFINDSET), (LPCTSTR)pANDLayout->GetName());
			cDatabaseANDParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseANDDirectory.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseANDParameters.IsBOF() && !cDatabaseANDParameters.IsEOF())
		{
			try
			{
				cDatabaseANDParameters.Delete();
				cDatabaseANDParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseANDDirectory.Close();
				cDatabaseANDParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nParameter = 0, nParameters = (INT)pANDLayout->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pParameter = pANDLayout->GetAt(nParameter)) != (CANDLayoutParameter *)NULL)
			{
				if (cDatabaseANDParameters.Translate(pANDLayout, pParameter))
				{
					try
					{
						cDatabaseANDParameters.AddNew();
						cDatabaseANDParameters.Translate(pANDLayout, pParameter);
						cDatabaseANDParameters.Update();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseANDDirectory.Close();
						cDatabaseANDParameters.Close();
						CloseDBMS();
						return FALSE;
					}
				}
			}
		}
		if ((pLayout = GetANDs()->GetAt(GetANDs()->Find(pANDLayout->GetName()))))
		{
			pLayout->Copy(pANDLayout);
			cDatabaseANDDirectory.Close();
			cDatabaseANDParameters.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pLayout = new CANDLayout))
		{
			for (pLayout->Copy(pANDLayout); GetANDs()->Add(pLayout) >= 0; )
			{
				cDatabaseANDDirectory.Close();
				cDatabaseANDParameters.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pLayout;
		}
		cDatabaseANDDirectory.Close();
		cDatabaseANDParameters.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CGRDLayout *pGRDLayout)
{
	INT  nParameter;
	INT  nParameters;
	CString  szQuery;
	CGRDLayout  *pLayout;
	CGRDLayoutParameter  *pParameter;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseGRDDirectoryRecordset  cDatabaseGRDDirectory(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_GPF_SQLFINDSET), (LPCTSTR)pGRDLayout->GetName());
			cDatabaseGRDDirectory.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabaseGRDDirectory.IsBOF() || cDatabaseGRDDirectory.IsEOF())
		{
			try
			{
				cDatabaseGRDDirectory.AddNew();
				cDatabaseGRDDirectory.Translate(pGRDLayout);
				cDatabaseGRDDirectory.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseGRDDirectory.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabaseGRDDirectory.Edit();
				cDatabaseGRDDirectory.Translate(pGRDLayout);
				cDatabaseGRDDirectory.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseGRDDirectory.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseGRDParametersRecordset  cDatabaseGRDParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_GPFP_SQLFINDSET), (LPCTSTR)pGRDLayout->GetName());
			cDatabaseGRDParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseGRDDirectory.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseGRDParameters.IsBOF() && !cDatabaseGRDParameters.IsEOF())
		{
			try
			{
				cDatabaseGRDParameters.Delete();
				cDatabaseGRDParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseGRDDirectory.Close();
				cDatabaseGRDParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		for (nParameter = 0, nParameters = (INT)pGRDLayout->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pParameter = pGRDLayout->GetAt(nParameter)) != (CGRDLayoutParameter *)NULL)
			{
				if (cDatabaseGRDParameters.Translate(pGRDLayout, pParameter))
				{
					try
					{
						cDatabaseGRDParameters.AddNew();
						cDatabaseGRDParameters.Translate(pGRDLayout, pParameter);
						cDatabaseGRDParameters.Update();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseGRDDirectory.Close();
						cDatabaseGRDParameters.Close();
						CloseDBMS();
						return FALSE;
					}
				}
			}
		}
		if ((pLayout = GetGRDs()->GetAt(GetGRDs()->Find(pGRDLayout->GetName()))))
		{
			pLayout->Copy(pGRDLayout);
			cDatabaseGRDDirectory.Close();
			cDatabaseGRDParameters.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pLayout = new CGRDLayout))
		{
			for (pLayout->Copy(pGRDLayout); GetGRDs()->Add(pLayout) >= 0; )
			{
				cDatabaseGRDDirectory.Close();
				cDatabaseGRDParameters.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pLayout;
		}
		cDatabaseGRDDirectory.Close();
		cDatabaseGRDParameters.Close();
		CloseDBMS();
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::Save(CONST CPODLayout *pPODLayout)
{
	CString  szQuery;
	CPODLayout  *pLayout;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabasePODDirectoryRecordset  cDatabasePODDirectory(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PPF_SQLFINDSET), (LPCTSTR)pPODLayout->GetName());
			cDatabasePODDirectory.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (cDatabasePODDirectory.IsBOF() || cDatabasePODDirectory.IsEOF())
		{
			try
			{
				cDatabasePODDirectory.AddNew();
				cDatabasePODDirectory.Translate(pPODLayout);
				cDatabasePODDirectory.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabasePODDirectory.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		else
		{
			try
			{
				cDatabasePODDirectory.Edit();
				cDatabasePODDirectory.Translate(pPODLayout);
				cDatabasePODDirectory.Update();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabasePODDirectory.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pLayout = GetPODs()->GetAt(GetPODs()->Find(pPODLayout->GetName()))))
		{
			pLayout->Copy(pPODLayout);
			cDatabasePODDirectory.Close();
			CloseDBMS();
			return TRUE;
		}
		if ((pLayout = new CPODLayout))
		{
			for (pLayout->Copy(pPODLayout); GetPODs()->Add(pLayout) >= 0; )
			{
				cDatabasePODDirectory.Close();
				CloseDBMS();
				return TRUE;
			}
			delete pLayout;
		}
		cDatabasePODDirectory.Close();
		CloseDBMS();
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::Flush(CONST CDatabaseOBProcessor *pDatabaseOBProcessor, CONST CDatabaseOBProcessorMemoryImage *pDatabaseOBProcessorMemoryImage, BOOL bDelete)
{
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	BOOL  bMemoryImage;
	CString  szQuery;
	CString  szVersion;
	CDatabaseOBProcessorMemoryArea  *pDatabaseOBProcessorMemoryArea;
	CDatabaseOBProcessorMemoryImageBlock  *pDatabaseOBProcessorMemoryImageBlock;
	CDatabaseOBProcessorMemoryAreaCatalogue  *pDatabaseOBProcessorMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pDatabaseOBProcessorMemoryAreaCatalogueEntry;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		for (nMemoryBlock = 0, nMemoryBlocks = (INT)pDatabaseOBProcessorMemoryImage->GetSize(), bMemoryImage = TRUE, szVersion.Empty(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
		{
			if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nMemoryBlock)) && pDatabaseOBProcessorMemoryImageBlock->GetVersion().Compare(szVersion))
			{
				CALTELDatabaseOBProcessorMemoryImagesRecordset  cDatabaseOBProcessorMemoryImages(this);
				try
				{
					szQuery.Format(STRING(IDS_DATABASE_TABLE_IMG_SQLFINDSETBYREF), (LPCTSTR)pDatabaseOBProcessorMemoryImage->GetName(), (LPCTSTR)pDatabaseOBProcessorMemoryImageBlock->GetVersion());
					cDatabaseOBProcessorMemoryImages.Open(CRecordset::dynamic, szQuery, CRecordset::none);
				}
				catch (CDBException *e)
				{
					szVersion = pDatabaseOBProcessorMemoryImageBlock->GetVersion();
					bMemoryImage = FALSE;
					e->Delete();
					continue;
				}
				catch (CMemoryException *e)
				{
					szVersion = pDatabaseOBProcessorMemoryImageBlock->GetVersion();
					bMemoryImage = FALSE;
					e->Delete();
					continue;
				}
				while (!cDatabaseOBProcessorMemoryImages.IsBOF() && !cDatabaseOBProcessorMemoryImages.IsEOF())
				{
					try
					{
						cDatabaseOBProcessorMemoryImages.Delete();
						cDatabaseOBProcessorMemoryImages.MoveNext();
					}
					catch (CDBException *e)
					{
						e->Delete();
						break;
					}
					catch (CMemoryException *e)
					{
						e->Delete();
						break;
					}
				}
				if (!cDatabaseOBProcessorMemoryImages.IsBOF() && !cDatabaseOBProcessorMemoryImages.IsEOF())
				{
					szVersion = pDatabaseOBProcessorMemoryImageBlock->GetVersion();
					cDatabaseOBProcessorMemoryImages.Close();
					bMemoryImage = FALSE;
					continue;
				}
				for (szVersion = pDatabaseOBProcessorMemoryImageBlock->GetVersion(); !bDelete; nMemoryBlock++)
				{
					try
					{
						cDatabaseOBProcessorMemoryImages.AddNew();
						cDatabaseOBProcessorMemoryImages.Translate(pDatabaseOBProcessorMemoryImage, pDatabaseOBProcessorMemoryImageBlock);
						cDatabaseOBProcessorMemoryImages.Update();
					}
					catch (CDBException *e)
					{
						szVersion = pDatabaseOBProcessorMemoryImageBlock->GetVersion();
						bMemoryImage = FALSE;
						e->Delete();
						break;
					}
					if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nMemoryBlock + 1)) && pDatabaseOBProcessorMemoryImageBlock->GetVersion() == szVersion) continue;
					break;
				}
				while ((pDatabaseOBProcessorMemoryArea = (bMemoryImage) ? pDatabaseOBProcessor->GetAt(pDatabaseOBProcessor->Find(pDatabaseOBProcessorMemoryImage->GetName())) : (CDatabaseOBProcessorMemoryArea *)NULL) || bDelete)
				{
					CALTELDatabaseOBProcessorMemoryAreasRecordset  cDatabaseOBProcessorMemoryAreas(this);
					try
					{
						szQuery.Format(STRING(IDS_DATABASE_TABLE_MAD_SQLFINDSETBYREF), (LPCTSTR)pDatabaseOBProcessor->GetName(), (LPCTSTR)pDatabaseOBProcessorMemoryImage->GetName());
						cDatabaseOBProcessorMemoryAreas.Open(CRecordset::dynamic, szQuery, CRecordset::none);
					}
					catch (CDBException *e)
					{
						bMemoryImage = FALSE;
						e->Delete();
						break;
					}
					catch (CMemoryException *e)
					{
						bMemoryImage = FALSE;
						e->Delete();
						break;
					}
					CALTELDatabaseOBProcessorMemoryAreaCataloguesRecordset  cDatabaseOBProcessorMemoryAreaCatalogues(this);
					try
					{
						szQuery.Format(STRING(IDS_DATABASE_TABLE_CAT_SQLFINDSETBYREF), (LPCTSTR)pDatabaseOBProcessorMemoryImage->GetName(), (LPCTSTR)szVersion);
						cDatabaseOBProcessorMemoryAreaCatalogues.Open(CRecordset::dynamic, szQuery, CRecordset::none);
					}
					catch (CDBException *e)
					{
						cDatabaseOBProcessorMemoryAreas.Close();
						bMemoryImage = FALSE;
						e->Delete();
						break;
					}
					catch (CMemoryException *e)
					{
						cDatabaseOBProcessorMemoryAreas.Close();
						bMemoryImage = FALSE;
						e->Delete();
						break;
					}
					if (!bDelete)
					{
						if (!cDatabaseOBProcessorMemoryAreas.GetRecordCount())
						{
							try
							{
								cDatabaseOBProcessorMemoryAreas.AddNew();
								cDatabaseOBProcessorMemoryAreas.Translate(pDatabaseOBProcessor, pDatabaseOBProcessorMemoryArea);
								cDatabaseOBProcessorMemoryAreas.Update();
							}
							catch (CDBException *e)
							{
								cDatabaseOBProcessorMemoryAreaCatalogues.Close();
								cDatabaseOBProcessorMemoryAreas.Close();
								bMemoryImage = FALSE;
								e->Delete();
								break;
							}
						}
						else
						{
							try
							{
								cDatabaseOBProcessorMemoryAreas.Edit();
								cDatabaseOBProcessorMemoryAreas.Translate(pDatabaseOBProcessor, pDatabaseOBProcessorMemoryArea);
								cDatabaseOBProcessorMemoryAreas.Update();
							}
							catch (CDBException *e)
							{
								cDatabaseOBProcessorMemoryAreaCatalogues.Close();
								cDatabaseOBProcessorMemoryAreas.Close();
								bMemoryImage = FALSE;
								e->Delete();
								break;
							}
							catch (CMemoryException *e)
							{
								cDatabaseOBProcessorMemoryAreaCatalogues.Close();
								cDatabaseOBProcessorMemoryAreas.Close();
								bMemoryImage = FALSE;
								e->Delete();
								break;
							}
						}
						if ((pDatabaseOBProcessorMemoryAreaCatalogue = new CDatabaseOBProcessorMemoryAreaCatalogue))
						{
							if ((pDatabaseOBProcessorMemoryAreaCatalogueEntry = (pDatabaseOBProcessorMemoryArea->GetCatalogue(pDatabaseOBProcessorMemoryAreaCatalogue)) ? pDatabaseOBProcessorMemoryAreaCatalogue->GetAt(pDatabaseOBProcessorMemoryAreaCatalogue->Find(szVersion)) : (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)NULL))
							{
								if (!cDatabaseOBProcessorMemoryAreaCatalogues.GetRecordCount())
								{
									try
									{
										cDatabaseOBProcessorMemoryAreaCatalogues.AddNew();
										cDatabaseOBProcessorMemoryAreaCatalogues.Translate(pDatabaseOBProcessorMemoryArea, pDatabaseOBProcessorMemoryAreaCatalogueEntry);
										cDatabaseOBProcessorMemoryAreaCatalogues.Update();
									}
									catch (CDBException *e)
									{
										delete pDatabaseOBProcessorMemoryAreaCatalogue;
										cDatabaseOBProcessorMemoryAreaCatalogues.Close();
										cDatabaseOBProcessorMemoryAreas.Close();
										bMemoryImage = FALSE;
										e->Delete();
										break;
									}
								}
								else
								{
									try
									{
										cDatabaseOBProcessorMemoryAreaCatalogues.Edit();
										cDatabaseOBProcessorMemoryAreaCatalogues.Translate(pDatabaseOBProcessorMemoryArea, pDatabaseOBProcessorMemoryAreaCatalogueEntry);
										cDatabaseOBProcessorMemoryAreaCatalogues.Update();
									}
									catch (CDBException *e)
									{
										delete pDatabaseOBProcessorMemoryAreaCatalogue;
										cDatabaseOBProcessorMemoryAreaCatalogues.Close();
										cDatabaseOBProcessorMemoryAreas.Close();
										bMemoryImage = FALSE;
										e->Delete();
										break;
									}
									catch (CMemoryException *e)
									{
										delete pDatabaseOBProcessorMemoryAreaCatalogue;
										cDatabaseOBProcessorMemoryAreaCatalogues.Close();
										cDatabaseOBProcessorMemoryAreas.Close();
										bMemoryImage = FALSE;
										e->Delete();
										break;
									}
								}
							}
							else  bMemoryImage = FALSE;
							delete pDatabaseOBProcessorMemoryAreaCatalogue;
						}
						else bMemoryImage = FALSE;
					}
					else
					{
						if (cDatabaseOBProcessorMemoryAreaCatalogues.GetRecordCount() > 0)
						{
							try
							{
								cDatabaseOBProcessorMemoryAreaCatalogues.Delete();
							}
							catch (CDBException *e)
							{
								cDatabaseOBProcessorMemoryAreaCatalogues.Close();
								cDatabaseOBProcessorMemoryAreas.Close();
								bMemoryImage = FALSE;
								e->Delete();
								break;
							}
							catch (CMemoryException *e)
							{
								cDatabaseOBProcessorMemoryAreaCatalogues.Close();
								cDatabaseOBProcessorMemoryAreas.Close();
								bMemoryImage = FALSE;
								e->Delete();
								break;
							}
						}
					}
					break;
				}
				cDatabaseOBProcessorMemoryImages.Close();
			}
		}
		while (TRUE)
		{
			CALTELDatabaseOBProcessorMemoryImagesRecordset  cDatabaseOBProcessorMemoryImages(this);
			try
			{
				szQuery.Format(STRING(IDS_DATABASE_TABLE_IMG_SQLFINDSET), (LPCTSTR)pDatabaseOBProcessorMemoryImage->GetName());
				cDatabaseOBProcessorMemoryImages.Open(CRecordset::dynamic, szQuery, CRecordset::none);
			}
			catch (CDBException *e)
			{
				e->Delete();
				break;
			}
			catch (CMemoryException *e)
			{
				e->Delete();
				break;
			}
			if (!cDatabaseOBProcessorMemoryImages.GetRecordCount())
			{
				CALTELDatabaseOBProcessorMemoryAreasRecordset  cDatabaseOBProcessorMemoryAreas(this);
				try
				{
					szQuery.Format(STRING(IDS_DATABASE_TABLE_MAD_SQLFINDSETBYREF), (LPCTSTR)pDatabaseOBProcessor->GetName(), (LPCTSTR)pDatabaseOBProcessorMemoryImage->GetName());
					cDatabaseOBProcessorMemoryAreas.Open(CRecordset::dynamic, szQuery, CRecordset::none);
				}
				catch (CDBException *e)
				{
					cDatabaseOBProcessorMemoryImages.Close();
					bMemoryImage = FALSE;
					e->Delete();
					break;
				}
				catch (CMemoryException *e)
				{
					cDatabaseOBProcessorMemoryImages.Close();
					bMemoryImage = FALSE;
					e->Delete();
					break;
				}
				CALTELDatabaseOBProcessorMemoryAreaCataloguesRecordset  cDatabaseOBProcessorMemoryAreaCatalogues(this);
				try
				{
					szQuery.Format(STRING(IDS_DATABASE_TABLE_CAT_SQLFINDSET), (LPCTSTR)pDatabaseOBProcessorMemoryImage->GetName());
					cDatabaseOBProcessorMemoryAreaCatalogues.Open(CRecordset::dynamic, szQuery, CRecordset::none);
				}
				catch (CDBException *e)
				{
					cDatabaseOBProcessorMemoryImages.Close();
					cDatabaseOBProcessorMemoryAreas.Close();
					bMemoryImage = FALSE;
					e->Delete();
					break;
				}
				catch (CMemoryException *e)
				{
					cDatabaseOBProcessorMemoryImages.Close();
					cDatabaseOBProcessorMemoryAreas.Close();
					bMemoryImage = FALSE;
					e->Delete();
					break;
				}
				while (!cDatabaseOBProcessorMemoryAreas.IsBOF() && !cDatabaseOBProcessorMemoryAreas.IsEOF())
				{
					try
					{
						cDatabaseOBProcessorMemoryAreas.Delete();
						cDatabaseOBProcessorMemoryAreas.MoveNext();
					}
					catch (CDBException *e)
					{
						bMemoryImage = FALSE;
						e->Delete();
						break;
					}
					catch (CMemoryException *e)
					{
						bMemoryImage = FALSE;
						e->Delete();
						break;
					}
				}
				while (!cDatabaseOBProcessorMemoryAreaCatalogues.IsBOF() && !cDatabaseOBProcessorMemoryAreaCatalogues.IsEOF())
				{
					try
					{
						cDatabaseOBProcessorMemoryAreaCatalogues.Delete();
						cDatabaseOBProcessorMemoryAreaCatalogues.MoveNext();
					}
					catch (CDBException *e)
					{
						bMemoryImage = FALSE;
						e->Delete();
						break;
					}
					catch (CMemoryException *e)
					{
						bMemoryImage = FALSE;
						e->Delete();
						break;
					}
				}
				cDatabaseOBProcessorMemoryAreaCatalogues.Close();
				cDatabaseOBProcessorMemoryAreas.Close();
			}
			cDatabaseOBProcessorMemoryImages.Close();
			break;
		}
		CloseDBMS();
		return bMemoryImage;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTMPacket *pDatabaseTMPacket)
{
	return DeleteTMPacket(pDatabaseTMPacket->GetTag());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTCPacket *pDatabaseTCPacket)
{
	return DeleteTCPacket(pDatabaseTCPacket->GetTag());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTCFunction *pDatabaseTCFunction)
{
	return DeleteTCFunction(pDatabaseTCFunction->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTCSequence *pDatabaseTCSequence)
{
	return DeleteTCSequence(pDatabaseTCSequence->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseOBProcessor *pDatabaseOBProcessor)
{
	return DeleteOBProcessor(pDatabaseOBProcessor->GetName());
}
INT CALTELDatabaseEngine::Delete(CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	return DeleteTCProcedure(pDatabaseTCProcedure->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTMParameter *pDatabaseTMParameter)
{
	return DeleteTMParameter(pDatabaseTMParameter->GetTag());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	return DeleteTCParameter(pDatabaseTCParameter->GetTag());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTMNumCalTable *pDatabaseTMNumCalTable)
{
	return DeleteTMNumCalTable(pDatabaseTMNumCalTable->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTMTxtCalTable *pDatabaseTMTxtCalTable)
{
	return DeleteTMTxtCalTable(pDatabaseTMTxtCalTable->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTMNumOolTable *pDatabaseTMNumOolTable)
{
	return DeleteTMNumOolTable(pDatabaseTMNumOolTable->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTMTxtOolTable *pDatabaseTMTxtOolTable)
{
	return DeleteTMTxtOolTable(pDatabaseTMTxtOolTable->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTCNumCalTable *pDatabaseTCNumCalTable)
{
	return DeleteTCNumCalTable(pDatabaseTCNumCalTable->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTCTxtCalTable *pDatabaseTCTxtCalTable)
{
	return DeleteTCTxtCalTable(pDatabaseTCTxtCalTable->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTCNumOolTable *pDatabaseTCNumOolTable)
{
	return DeleteTCNumOolTable(pDatabaseTCNumOolTable->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTCTxtOolTable *pDatabaseTCTxtOolTable)
{
	return DeleteTCTxtOolTable(pDatabaseTCTxtOolTable->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTCPreExeGroup *pDatabaseTCPreExeGroup)
{
	return DeleteTCPreExeGroup(pDatabaseTCPreExeGroup->GetID());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTCExeVerGroup *pDatabaseTCExeVerGroup)
{
	return DeleteTCExeVerGroup(pDatabaseTCExeVerGroup->GetID());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTMPacketHeader *pDatabaseTMPacketHeader)
{
	return DeleteTMPacketHeader(pDatabaseTMPacketHeader->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTMPacketStream *pDatabaseTMPacketStream)
{
	return DeleteTMPacketStream(pDatabaseTMPacketStream->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTCParameterSet *pDatabaseTCParameterSet)
{
	return DeleteTCParameterSet(pDatabaseTCParameterSet->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseTCFunctionBlock *pDatabaseTCFunctionBlock)
{
	return DeleteTCFunctionBlock(pDatabaseTCFunctionBlock->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CDatabaseOBProcessorMemoryImage *pDatabaseOBProcessorMemoryImage)
{
	return DeleteOBProcessorMemoryImage(pDatabaseOBProcessorMemoryImage->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CANDLayout *pANDLayout)
{
	return DeleteAND(pANDLayout->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CGRDLayout *pGRDLayout)
{
	return DeleteGRD(pGRDLayout->GetName());
}
BOOL CALTELDatabaseEngine::Delete(CONST CPODLayout *pPODLayout)
{
	return DeletePOD(pPODLayout->GetName());
}

BOOL CALTELDatabaseEngine::Compare(CONST CDatabaseEngine *pDatabase, DATABASECOMPAREMESSAGESPROC pCompareMessagesProc, ULONGLONG nComponents)
{
	return FALSE;
}

BOOL CALTELDatabaseEngine::IsComparing() CONST
{
	return(m_bDatabaseComparing[0] && !m_bDatabaseComparing[1]);
}

BOOL CALTELDatabaseEngine::StopComparing()
{
	return((m_bDatabaseComparing[1] = m_bDatabaseComparing[0]));
}

BOOL CALTELDatabaseEngine::Compile(CBinaryDatabase *pDatabase, DATABASECOMPILEMESSAGESPROC pCompileMessagesProc, ULONGLONG nComponents)
{
	INT  nTable;
	INT  nTables;
	INT  nGroup;
	INT  nGroups;
	INT  nPacket;
	INT  nPackets;
	INT  nStream;
	INT  nStreams;
	INT  nHeader;
	INT  nHeaders;
	INT  nSubTag;
	INT  nSubTags;
	INT  nFunction;
	INT  nFunctions;
	INT  nProcessor;
	INT  nProcessors;
	INT  nParameter;
	INT  nParameters;
	INT  nMemoryArea;
	INT  nMemoryAreas;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	INT  nPosition[2][3];
	BOOL  bPosition;
	CUIntArray  nSubTagRefs;
	CUIntArray  nCalTableRefs[2];
	CUIntArray  nOolTableRefs[2];
	CStringArray  szCalTables[2];
	CStringArray  szOolTables[2];
	CComputerToken  cComputerToken;
	CLongUIntArray  nCalTableValues;
	CLongUIntArray  nOolTableValues;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseOBProcessor  *pDatabaseOBProcessor;
	CDatabaseTMParameter  *pDatabaseTMParameter[2];
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;
	CDatabaseTMPacketStream  *pDatabaseTMPacketStream;
	CDatabaseTMPacketHeader  *pDatabaseTMPacketHeader;
	CDatabaseTMPacketParameter  *pDatabaseTMPacketParameter;
	CDatabaseOBProcessorMemoryArea  *pDatabaseOBProcessorMemoryArea;
	CDatabaseOBProcessorMemoryAreaBlock  *pDatabaseOBProcessorMemoryAreaBlock;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;
	CDatabaseTCExeVerGroupParameter  *pDatabaseTCExeVerGroupParameter;

	for (cComputerToken.SetComputerName(pDatabase->GetServer()), m_pDatabaseCompileMessagesProc = pCompileMessagesProc, m_bDatabaseCompiling[0] = TRUE, m_bDatabaseCompiling[1] = FALSE, nComponents = (!cComputerToken.IsHost() || !pDatabase->Load()) ? DATABASE_COMPONENTS_ANY : nComponents; nComponents & DATABASE_COMPONENTS_ANY; )
	{
		pDatabase->Reset();
		break;
	}
	if ((nComponents & (DATABASE_COMPONENT_TMPACKET | DATABASE_COMPONENT_TCFUNCTION | DATABASE_COMPONENT_TCSEQUENCE | DATABASE_COMPONENT_OBPROCESSOR | DATABASE_COMPONENT_TMPARAMETER | DATABASE_COMPONENT_TCPARAMETER | DATABASE_COMPONENT_AND | DATABASE_COMPONENT_GRD | DATABASE_COMPONENT_POD)) || nComponents == DATABASE_COMPONENTS_ANY)
	{
		if ((nComponents & DATABASE_COMPONENTS_ANY) != DATABASE_COMPONENTS_ANY)
		{
			for (nPacket = 0, nPackets = (INT)pDatabase->GetTMPackets()->GetSize(); nPacket < nPackets; nPacket++)
			{
				if ((pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt(nPacket)) && !pDatabaseTMPacket->GetDataFieldHeader().IsEmpty())
				{
					for (nHeader = 0, nHeaders = (INT)pDatabase->GetTMPacketHeaders()->GetSize(); nHeader < nHeaders; nHeader++)
					{
						if ((pDatabaseTMPacketHeader = pDatabase->GetTMPacketHeaders()->GetAt(nHeader)) != (CDatabaseTMPacketHeader *)NULL)
						{
							if ((bPosition = pDatabaseTMPacket->GetTMTypePosition(nPosition[0][0], nPosition[0][1], nPosition[0][2])) != pDatabaseTMPacketHeader->GetTMTypePosition(nPosition[1][0], nPosition[1][1], nPosition[1][2]) || (bPosition && (nPosition[0][0] != nPosition[1][0] || nPosition[0][1] != nPosition[1][1] || nPosition[0][2] != nPosition[1][2]))) continue;
							if ((bPosition = pDatabaseTMPacket->GetTMIDPosition(nPosition[0][0], nPosition[0][1], nPosition[0][2])) != pDatabaseTMPacketHeader->GetTMIDPosition(nPosition[1][0], nPosition[1][1], nPosition[1][2]) || (bPosition && (nPosition[0][0] != nPosition[1][0] || nPosition[0][1] != nPosition[1][1] || nPosition[0][2] != nPosition[1][2]))) continue;
							if ((bPosition = pDatabaseTMPacket->Get3DiscPosition(nPosition[0][0], nPosition[0][1], nPosition[0][2])) != pDatabaseTMPacketHeader->Get3DiscPosition(nPosition[1][0], nPosition[1][1], nPosition[1][2]) || (bPosition && (nPosition[0][0] != nPosition[1][0] || nPosition[0][1] != nPosition[1][1] || nPosition[0][2] != nPosition[1][2]))) continue;
							if ((bPosition = pDatabaseTMPacket->GetTimestampPosition(nPosition[0][0], nPosition[0][1], nPosition[0][2])) != pDatabaseTMPacketHeader->GetTimestampPosition(nPosition[1][0], nPosition[1][1], nPosition[1][2]) || (bPosition && (nPosition[0][0] != nPosition[1][0] || nPosition[0][1] != nPosition[1][1] || nPosition[0][2] != nPosition[1][2]))) continue;
							pDatabaseTMPacket->SetDataFieldHeader(pDatabaseTMPacketHeader->GetName());
							break;
						}
					}
					for (pDatabaseTMPacket->SetEventIDParameter(EMPTYSTRING); (pDatabaseTMParameter[0] = pDatabase->GetTMParameters()->GetAt(pDatabaseTMPacket->GetEventIDParameterRef())); )
					{
						pDatabaseTMPacket->SetEventIDParameter(pDatabaseTMParameter[0]->GetTag());
						break;
					}
					for (nParameter = 0, nParameters = (INT)pDatabaseTMPacket->GetSize(); nParameter < nParameters; nParameter++)
					{
						if ((pDatabaseTMPacketParameter = pDatabaseTMPacket->GetAt(nParameter)) != (CDatabaseTMPacketParameter *)NULL)
						{
							if ((pDatabaseTMParameter[0] = pDatabase->GetTMParameters()->GetAt(pDatabaseTMPacketParameter->GetValidityParameterRef())))
							{
								pDatabaseTMPacketParameter->SetValidityParameter(pDatabaseTMParameter[0]->GetTag());
								continue;
							}
							pDatabaseTMPacketParameter->SetValidityParameter(EMPTYSTRING);
						}
					}
				}
			}
			for (nStream = 0, nStreams = (INT)pDatabase->GetTMPacketStreams()->GetSize(); nStream < nStreams; nStream++)
			{
				if ((pDatabaseTMPacketStream = pDatabase->GetTMPacketStreams()->GetAt(nStream)) != (CDatabaseTMPacketStream *)NULL)
				{
					if ((pDatabaseTMParameter[0] = pDatabase->GetTMParameters()->GetAt(pDatabaseTMPacketStream->GetValidityParameterRef())))
					{
						pDatabaseTMPacketStream->SetValidityParameter(pDatabaseTMParameter[0]->GetTag());
						continue;
					}
					pDatabaseTMPacketStream->SetValidityParameter(EMPTYSTRING);
				}
			}
			for (nFunction = 0, nFunctions = (INT)pDatabase->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
			{
				if ((pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
				{
					for (pDatabaseTCFunction->SetTCPacket(EMPTYSTRING); (pDatabaseTCPacket = pDatabase->GetTCPackets()->GetAt(pDatabaseTCFunction->GetTCPacketRef())); )
					{
						pDatabaseTCFunction->SetTCPacket(pDatabaseTCPacket->GetTag());
						break;
					}
					for (pDatabaseTCFunction->SetPreExeGroup(EMPTYSTRING); (pDatabaseTCPreExeGroup = pDatabase->GetTCPreExeGroups()->GetAt(pDatabaseTCFunction->GetPreExeGroupRef())); )
					{
						pDatabaseTCFunction->SetPreExeGroup(pDatabaseTCPreExeGroup->GetID());
						break;
					}
					for (pDatabaseTCFunction->SetExeVerGroup(EMPTYSTRING); (pDatabaseTCExeVerGroup = pDatabase->GetTCExeVerGroups()->GetAt(pDatabaseTCFunction->GetExeVerGroupRef())); )
					{
						pDatabaseTCFunction->SetExeVerGroup(pDatabaseTCExeVerGroup->GetID());
						break;
					}
				}
			}
			for (nGroup = 0, nGroups = (INT)pDatabase->GetTCExeVerGroups()->GetSize(); nGroup < nGroups; nGroup++)
			{
				if ((pDatabaseTCExeVerGroup = pDatabase->GetTCExeVerGroups()->GetAt(nGroup)) != (CDatabaseTCExeVerGroup *)NULL)
				{
					for (nParameter = 0, nParameters = (INT)pDatabaseTCExeVerGroup->GetSize(); nParameter < nParameters; nParameter++)
					{
						if ((pDatabaseTCExeVerGroupParameter = pDatabaseTCExeVerGroup->GetAt(nParameter)) != (CDatabaseTCExeVerGroupParameter *)NULL)
						{
							if ((pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt(pDatabaseTCExeVerGroupParameter->GetEventIDPacketRef())))
							{
								pDatabaseTCExeVerGroupParameter->SetEventIDPacket(pDatabaseTMPacket->GetTag());
								continue;
							}
							pDatabaseTCExeVerGroupParameter->SetEventIDPacket(EMPTYSTRING);
						}
					}
				}
			}
			for (nParameter = 0, nParameters = (INT)pDatabase->GetTMParameters()->GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pDatabaseTMParameter[0] = pDatabase->GetTMParameters()->GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
				{
					for (pDatabaseTMParameter[0]->SetValidityParameter(EMPTYSTRING); (pDatabaseTMParameter[1] = pDatabase->GetTMParameters()->GetAt(pDatabaseTMParameter[0]->GetValidityParameterRef())); )
					{
						pDatabaseTMParameter[0]->SetValidityParameter(pDatabaseTMParameter[1]->GetTag());
						break;
					}
					for (nSubTag = 0, nSubTags = pDatabaseTMParameter[0]->GetSubTagRefs(nSubTagRefs); nSubTag < nSubTags; nSubTag++)
					{
						if ((pDatabaseTMParameter[1] = pDatabase->GetTMParameters()->GetAt(nSubTagRefs.GetAt(nSubTag))))
						{
							pDatabaseTMParameter[1]->SetRelatedParameter(pDatabaseTMParameter[0]->GetTag());
							continue;
						}
					}
					for (nTable = 0, nTables = pDatabaseTMParameter[0]->GetCalTableRefs(nCalTableRefs[0], nCalTableRefs[1]), szCalTables[0].RemoveAll(), szCalTables[1].RemoveAll(), nCalTableValues.RemoveAll(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTMNumCalTable = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? pDatabase->GetTMNumCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable)) : (CDatabaseTMNumCalTable *)NULL))
						{
							if ((pDatabaseTMParameter[1] = pDatabase->GetTMParameters()->GetAt(nCalTableRefs[1].GetAt(nTable))))
							{
								szCalTables[0].Add(pDatabaseTMNumCalTable->GetName());
								szCalTables[1].Add(pDatabaseTMParameter[1]->GetTag());
								nCalTableValues.Add(1);
								continue;
							}
							szCalTables[0].Add(pDatabaseTMNumCalTable->GetName());
							szCalTables[1].Add(EMPTYSTRING);
							nCalTableValues.Add(-1);
							continue;
						}
						if ((pDatabaseTMTxtCalTable = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? pDatabase->GetTMTxtCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable)) : (CDatabaseTMTxtCalTable *)NULL))
						{
							if ((pDatabaseTMParameter[1] = pDatabase->GetTMParameters()->GetAt(nCalTableRefs[1].GetAt(nTable))))
							{
								szCalTables[0].Add(pDatabaseTMTxtCalTable->GetName());
								szCalTables[1].Add(pDatabaseTMParameter[1]->GetTag());
								nCalTableValues.Add(1);
								continue;
							}
							szCalTables[0].Add(pDatabaseTMTxtCalTable->GetName());
							szCalTables[1].Add(EMPTYSTRING);
							nCalTableValues.Add(-1);
						}
					}
					for (nTable = 0, nTables = pDatabaseTMParameter[0]->GetOolTableRefs(nOolTableRefs[0], nOolTableRefs[1]), szOolTables[0].RemoveAll(), szOolTables[1].RemoveAll(), nOolTableValues.RemoveAll(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTMNumOolTable = ((pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_CALIBRATION_NONE) || (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)) ? pDatabase->GetTMNumOolTables()->GetAt(nOolTableRefs[0].GetAt(nTable)) : (CDatabaseTMNumOolTable *)NULL))
						{
							if ((pDatabaseTMParameter[1] = pDatabase->GetTMParameters()->GetAt(nOolTableRefs[1].GetAt(nTable))))
							{
								szOolTables[0].Add(pDatabaseTMNumOolTable->GetName());
								szOolTables[1].Add(pDatabaseTMParameter[1]->GetTag());
								nOolTableValues.Add(1);
								continue;
							}
							szOolTables[0].Add(pDatabaseTMNumOolTable->GetName());
							szOolTables[1].Add(EMPTYSTRING);
							nOolTableValues.Add(-1);
							continue;
						}
						if ((pDatabaseTMTxtOolTable = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? pDatabase->GetTMTxtOolTables()->GetAt(nOolTableRefs[0].GetAt(nTable)) : (CDatabaseTMTxtOolTable *)NULL))
						{
							if ((pDatabaseTMParameter[1] = pDatabase->GetTMParameters()->GetAt(nOolTableRefs[1].GetAt(nTable))))
							{
								szOolTables[0].Add(pDatabaseTMTxtOolTable->GetName());
								szOolTables[1].Add(pDatabaseTMParameter[1]->GetTag());
								nOolTableValues.Add(1);
								continue;
							}
							szOolTables[0].Add(pDatabaseTMTxtOolTable->GetName());
							szOolTables[1].Add(EMPTYSTRING);
							nOolTableValues.Add(-1);
						}
					}
					pDatabaseTMParameter[0]->SetCalTables(szCalTables[0], szCalTables[1], nCalTableValues);
					pDatabaseTMParameter[0]->SetOolTables(szOolTables[0], szOolTables[1], nOolTableValues);
				}
			}
			for (nParameter = 0, nParameters = (INT)pDatabase->GetTCParameters()->GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(nParameter)) != (CDatabaseTCParameter *)NULL)
				{
					for (pDatabaseTCParameter->SetCalTable(EMPTYSTRING); pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL; )
					{
						if ((pDatabaseTCNumCalTable = pDatabase->GetTCNumCalTables()->GetAt(pDatabaseTCParameter->GetCalTableRef()))) pDatabaseTCParameter->SetCalTable(pDatabaseTCNumCalTable->GetName());
						break;
					}
					for (pDatabaseTCParameter->SetOolTable(EMPTYSTRING); pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL); )
					{
						if ((pDatabaseTCNumOolTable = pDatabase->GetTCNumOolTables()->GetAt(pDatabaseTCParameter->GetOolTableRef()))) pDatabaseTCParameter->SetOolTable(pDatabaseTCNumOolTable->GetName());
						break;
					}
					if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
					{
						if ((pDatabaseTCTxtCalTable = pDatabase->GetTCTxtCalTables()->GetAt(pDatabaseTCParameter->GetCalTableRef()))) pDatabaseTCParameter->SetCalTable(pDatabaseTCTxtCalTable->GetName());
						if ((pDatabaseTCTxtOolTable = pDatabase->GetTCTxtOolTables()->GetAt(pDatabaseTCParameter->GetOolTableRef()))) pDatabaseTCParameter->SetOolTable(pDatabaseTCTxtOolTable->GetName());
					}
				}
			}
			for (nProcessor = 0, nProcessors = (INT)pDatabase->GetOBProcessors()->GetSize(); nProcessor < nProcessors; nProcessor++)
			{
				if ((pDatabaseOBProcessor = pDatabase->GetOBProcessors()->GetAt(nProcessor)) != (CDatabaseOBProcessor *)NULL)
				{
					for (pDatabaseOBProcessor->SetPatchCommand(EMPTYSTRING); (pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(pDatabaseOBProcessor->GetPatchCommandRef())); )
					{
						pDatabaseOBProcessor->SetPatchCommand(pDatabaseTCFunction->GetName());
						break;
					}
					for (pDatabaseOBProcessor->SetDumpCommand(EMPTYSTRING); (pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(pDatabaseOBProcessor->GetDumpCommandRef())); )
					{
						pDatabaseOBProcessor->SetDumpCommand(pDatabaseTCFunction->GetName());
						break;
					}
					for (pDatabaseOBProcessor->SetDumpPacket(EMPTYSTRING); (pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt(pDatabaseOBProcessor->GetDumpPacketRef())); )
					{
						pDatabaseOBProcessor->SetDumpPacket(pDatabaseTMPacket->GetTag());
						break;
					}
					for (pDatabaseOBProcessor->SetMasterImage(EMPTYSTRING); (pDatabaseOBProcessorMemoryImage = pDatabase->GetOBProcessorMemoryImages()->GetAt(pDatabaseOBProcessor->GetMasterImageRef())); )
					{
						pDatabaseOBProcessor->SetMasterImage(pDatabaseOBProcessorMemoryImage->GetName());
						break;
					}
					for (nMemoryArea = 0, nMemoryAreas = (INT)pDatabaseOBProcessor->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
					{
						if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nMemoryArea)) != (CDatabaseOBProcessorMemoryArea *)NULL)
						{
							for (pDatabaseOBProcessorMemoryArea->SetPatchCommand(EMPTYSTRING); (pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(pDatabaseOBProcessor->GetPatchCommandRef())); )
							{
								pDatabaseOBProcessorMemoryArea->SetPatchCommand(pDatabaseTCFunction->GetName());
								break;
							}
							for (pDatabaseOBProcessorMemoryArea->SetDumpCommand(EMPTYSTRING); (pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(pDatabaseOBProcessor->GetDumpCommandRef())); )
							{
								pDatabaseOBProcessorMemoryArea->SetDumpCommand(pDatabaseTCFunction->GetName());
								break;
							}
							for (pDatabaseOBProcessorMemoryArea->SetDumpPacket(EMPTYSTRING); (pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt(pDatabaseOBProcessor->GetDumpPacketRef())); )
							{
								pDatabaseOBProcessorMemoryArea->SetDumpPacket(pDatabaseTMPacket->GetTag());
								break;
							}
							for (nMemoryBlock = 0, nMemoryBlocks = (INT)pDatabaseOBProcessorMemoryArea->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
							{
								if ((pDatabaseOBProcessorMemoryAreaBlock = pDatabaseOBProcessorMemoryArea->GetAt(nMemoryBlock)) != (CDatabaseOBProcessorMemoryAreaBlock *)NULL)
								{
									for (pDatabaseOBProcessorMemoryAreaBlock->SetTMParameter(EMPTYSTRING); (pDatabaseTMParameter[0] = pDatabase->GetTMParameters()->GetAt(pDatabaseOBProcessorMemoryAreaBlock->GetTMParameterRef())); )
									{
										pDatabaseOBProcessorMemoryAreaBlock->SetTMParameter(pDatabaseTMParameter[0]->GetTag());
										break;
									}
									for (pDatabaseOBProcessorMemoryAreaBlock->SetTCParameter(EMPTYSTRING); (pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(pDatabaseOBProcessorMemoryAreaBlock->GetTCParameterRef())); )
									{
										pDatabaseOBProcessorMemoryAreaBlock->SetTCParameter(pDatabaseTCParameter->GetTag());
										break;
									}
								}
							}
						}
					}
				}
			}
		}
		if (((nComponents & DATABASE_COMPONENT_TMPACKET) || (nComponents & DATABASE_COMPONENTS_ANY)) && IsCompiling()) CompileTMPackets(pDatabase);
		if ((nComponents & DATABASE_COMPONENT_TCFUNCTION) || (nComponents & DATABASE_COMPONENTS_ANY))
		{
			if (IsCompiling()) CompileTCPackets(pDatabase);
			if (IsCompiling()) CompileTCFunctions(pDatabase);
		}
		if (((nComponents & DATABASE_COMPONENT_TCSEQUENCE) || (nComponents & DATABASE_COMPONENTS_ANY)) && IsCompiling()) CompileTCFunctionBlocks(pDatabase);
		if ((nComponents & DATABASE_COMPONENT_TMPARAMETER) || (nComponents & DATABASE_COMPONENTS_ANY))
		{
			if (IsCompiling()) CompileTMParameters(pDatabase);
			if (IsCompiling()) CompileTMNumCalTables(pDatabase);
			if (IsCompiling()) CompileTMTxtCalTables(pDatabase);
			if (IsCompiling()) CompileTMNumOolTables(pDatabase);
			if (IsCompiling()) CompileTMTxtOolTables(pDatabase);
		}
		if ((nComponents & DATABASE_COMPONENT_TCPARAMETER) || (nComponents & DATABASE_COMPONENTS_ANY))
		{
			if (IsCompiling()) CompileTCParameters(pDatabase);
			if (IsCompiling()) CompileTCNumCalTables(pDatabase);
			if (IsCompiling()) CompileTCTxtCalTables(pDatabase);
			if (IsCompiling()) CompileTCNumOolTables(pDatabase);
			if (IsCompiling()) CompileTCTxtOolTables(pDatabase);
		}
		if (((nComponents & DATABASE_COMPONENT_TMPACKET) || (nComponents & DATABASE_COMPONENT_TMPARAMETER) || (nComponents & DATABASE_COMPONENTS_ANY)) && IsCompiling()) CompileTMPacketParameters(pDatabase);
		if ((nComponents & DATABASE_COMPONENT_TCFUNCTION) || (nComponents & DATABASE_COMPONENT_TCPARAMETER) || (nComponents & DATABASE_COMPONENTS_ANY))
		{
			if (IsCompiling()) CompileTCPacketParameters(pDatabase);
			if (IsCompiling()) CompileTCFunctionElements(pDatabase);
			if (IsCompiling()) CompileTCParameterSets(pDatabase);
		}
		if ((nComponents & DATABASE_COMPONENT_TCFUNCTION) || (nComponents & DATABASE_COMPONENT_TMPARAMETER) || (nComponents & DATABASE_COMPONENTS_ANY))
		{
			if (IsCompiling()) CompileTCPreExeGroups(pDatabase);
			if (IsCompiling()) CompileTCExeVerGroups(pDatabase);
		}
		if (((nComponents & DATABASE_COMPONENT_TCSEQUENCE) || (nComponents & DATABASE_COMPONENTS_ANY)) && IsCompiling()) CompileTCFunctionBlockElements(pDatabase);
		if (((nComponents & DATABASE_COMPONENT_TCSEQUENCE) || (nComponents & DATABASE_COMPONENTS_ANY)) && IsCompiling()) CompileTCSequences(pDatabase);
		if (((nComponents & DATABASE_COMPONENT_OBPROCESSOR) || (nComponents & DATABASE_COMPONENTS_ANY)) && IsCompiling()) CompileOBProcessors(pDatabase);
		if ((nComponents & DATABASE_COMPONENT_TCSEQUENCE) || (nComponents & DATABASE_COMPONENT_TCPARAMETER) || (nComponents & DATABASE_COMPONENTS_ANY))
		{
			if (IsCompiling()) CompileTCSequenceParameters(pDatabase);
			if (IsCompiling()) CompileTCSequenceEntryParameters(pDatabase);
		}
		if (((nComponents & DATABASE_COMPONENT_AND) || (nComponents & DATABASE_COMPONENTS_ANY)) && IsCompiling()) CompileANDs(pDatabase);
		if (((nComponents & DATABASE_COMPONENT_GRD) || (nComponents & DATABASE_COMPONENTS_ANY)) && IsCompiling()) CompileGRDs(pDatabase);
		if (((nComponents & DATABASE_COMPONENT_POD) || (nComponents & DATABASE_COMPONENTS_ANY)) && IsCompiling()) CompilePODs(pDatabase);
		m_bDatabaseCompiling[0] = FALSE;
		m_bDatabaseCompiling[1] = FALSE;
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::IsCompiling() CONST
{
	return(m_bDatabaseCompiling[0] && !m_bDatabaseCompiling[1]);
}

BOOL CALTELDatabaseEngine::StopCompiling()
{
	return((m_bDatabaseCompiling[1] = m_bDatabaseCompiling[0]));
}

BOOL CALTELDatabaseEngine::LoadLibrary(CStringArray &szErrors)
{
	return CBinaryDatabase::LoadLibrary(szErrors);
}

HINSTANCE CALTELDatabaseEngine::GetLibrary() CONST
{
	return CBinaryDatabase::GetLibrary();
}

VOID CALTELDatabaseEngine::FreeLibrary()
{
	CBinaryDatabase::FreeLibrary();
}

BOOL CALTELDatabaseEngine::IsInitialized() CONST
{
	return CBinaryDatabase::IsInitialized();
}

BOOL CALTELDatabaseEngine::IsValid() CONST
{
	CStringArray  szUsers;

	return((((GetType() & (DATABASE_TYPE_GLOBAL | DATABASE_TYPE_LOCAL)) == DATABASE_TYPE_GLOBAL || (GetType() & (DATABASE_TYPE_GLOBAL | DATABASE_TYPE_LOCAL)) == DATABASE_TYPE_LOCAL) && (GetType() & (DATABASE_TYPE_STANDARD_PCM | DATABASE_TYPE_STANDARD_CCSDS)) == DATABASE_TYPE_STANDARD_CCSDS && (GetType() & (DATABASE_TYPE_IMPLEMENTATION_SCOS | DATABASE_TYPE_IMPLEMENTATION_ALTEL)) == DATABASE_TYPE_IMPLEMENTATION_ALTEL  &&  !GetName().IsEmpty() && !GetServer().IsEmpty() && !GetSpacecraft().IsEmpty() && !GetFileName().IsEmpty() && GetUsers(szUsers) >= 0 && GetCreationTime() > 0) ? TRUE : FALSE);
}

VOID CALTELDatabaseEngine::Reset()
{
	CBinaryDatabase::Reset();
}

INT CALTELDatabaseEngine::EnumANDs(CANDLayouts &pLayouts, ULONGLONG nSubcomponent, BOOL bDirectory) CONST
{
	return CBinaryDatabase::EnumANDs(pLayouts, nSubcomponent, bDirectory);
}

INT CALTELDatabaseEngine::EnumGRDs(CGRDLayouts &pLayouts, BOOL bDirectory) CONST
{
	return CBinaryDatabase::EnumGRDs(pLayouts, bDirectory);
}

INT CALTELDatabaseEngine::EnumMMDs(CMMDLayouts &pLayouts, BOOL bDirectory) CONST
{
	return CBinaryDatabase::EnumMMDs(pLayouts, bDirectory);
}

INT CALTELDatabaseEngine::EnumPODs(CPODLayouts &pLayouts, BOOL bDirectory) CONST
{
	return CBinaryDatabase::EnumPODs(pLayouts, bDirectory);
}

INT CALTELDatabaseEngine::EnumScripts(CAutomationScripts &pScripts, BOOL bDirectory) CONST
{
	return CBinaryDatabase::EnumScripts(pScripts, bDirectory);
}

INT CALTELDatabaseEngine::EnumProcedures(CDatabaseTCProcedures &pProcedures) CONST
{
	return CBinaryDatabase::EnumProcedures(pProcedures);
}

INT CALTELDatabaseEngine::SaveAND(CONST CANDLayout &cLayout, ULONGLONG nSubcomponent)
{
	return CBinaryDatabase::SaveAND(cLayout, nSubcomponent);
}

INT CALTELDatabaseEngine::SaveGRD(CONST CGRDLayout &cLayout)
{
	return CBinaryDatabase::SaveGRD(cLayout);
}

INT CALTELDatabaseEngine::SaveMMD(CONST CMMDLayout &cLayout)
{
	return CBinaryDatabase::SaveMMD(cLayout);
}

INT CALTELDatabaseEngine::SavePOD(CONST CPODLayout &cLayout)
{
	return CBinaryDatabase::SavePOD(cLayout);
}

INT CALTELDatabaseEngine::SaveScript(CONST CAutomationScript &cScript)
{
	return CBinaryDatabase::SaveScript(cScript);
}

BOOL CALTELDatabaseEngine::LoadAND(LPCTSTR pszName, CANDLayout &cLayout, ULONGLONG nSubcomponent) CONST
{
	return CBinaryDatabase::LoadAND(pszName, cLayout, nSubcomponent);
}

BOOL CALTELDatabaseEngine::LoadGRD(LPCTSTR pszName, CGRDLayout &cLayout) CONST
{
	return CBinaryDatabase::LoadGRD(pszName, cLayout);
}

BOOL CALTELDatabaseEngine::LoadMMD(LPCTSTR pszName, CMMDLayout &cLayout) CONST
{
	return CBinaryDatabase::LoadMMD(pszName, cLayout);
}

BOOL CALTELDatabaseEngine::LoadPOD(LPCTSTR pszName, CPODLayout &cLayout) CONST
{
	return CBinaryDatabase::LoadPOD(pszName, cLayout);
}

BOOL CALTELDatabaseEngine::LoadScript(LPCTSTR pszName, CAutomationScript &cScript) CONST
{
	return CBinaryDatabase::LoadScript(pszName, cScript);
}

INT CALTELDatabaseEngine::DeleteAND(CONST CANDLayout &cLayout, ULONGLONG nSubcomponent)
{
	return CBinaryDatabase::DeleteAND(cLayout, nSubcomponent);
}

INT CALTELDatabaseEngine::DeleteGRD(CONST CGRDLayout &cLayout)
{
	return CBinaryDatabase::DeleteGRD(cLayout);
}

INT CALTELDatabaseEngine::DeleteMMD(CONST CMMDLayout &cLayout)
{
	return CBinaryDatabase::DeleteMMD(cLayout);
}

INT CALTELDatabaseEngine::DeletePOD(CONST CPODLayout &cLayout)
{
	return CBinaryDatabase::DeletePOD(cLayout);
}

INT CALTELDatabaseEngine::DeleteScript(CONST CAutomationScript &cScript)
{
	return CBinaryDatabase::DeleteScript(cScript);
}

CDatabaseTMPackets *CALTELDatabaseEngine::GetTMPackets() CONST
{
	return CBinaryDatabase::GetTMPackets();
}

CDatabaseTCPackets *CALTELDatabaseEngine::GetTCPackets() CONST
{
	return CBinaryDatabase::GetTCPackets();
}

CDatabaseTCFunctions *CALTELDatabaseEngine::GetTCFunctions() CONST
{
	return CBinaryDatabase::GetTCFunctions();
}

CDatabaseTCSequences *CALTELDatabaseEngine::GetTCSequences() CONST
{
	return CBinaryDatabase::GetTCSequences();
}

CDatabaseTCProcedures *CALTELDatabaseEngine::GetTCProcedures() CONST
{
	return CBinaryDatabase::GetTCProcedures();
}

CDatabaseOBProcessors *CALTELDatabaseEngine::GetOBProcessors() CONST
{
	return CBinaryDatabase::GetOBProcessors();
}

CDatabaseTMParameters *CALTELDatabaseEngine::GetTMParameters() CONST
{
	return CBinaryDatabase::GetTMParameters();
}

CDatabaseTCParameters *CALTELDatabaseEngine::GetTCParameters() CONST
{
	return CBinaryDatabase::GetTCParameters();
}

CDatabaseTMNumCalTables *CALTELDatabaseEngine::GetTMNumCalTables() CONST
{
	return CBinaryDatabase::GetTMNumCalTables();
}

CDatabaseTMTxtCalTables *CALTELDatabaseEngine::GetTMTxtCalTables() CONST
{
	return CBinaryDatabase::GetTMTxtCalTables();
}

CDatabaseTMNumOolTables *CALTELDatabaseEngine::GetTMNumOolTables() CONST
{
	return CBinaryDatabase::GetTMNumOolTables();
}

CDatabaseTMTxtOolTables *CALTELDatabaseEngine::GetTMTxtOolTables() CONST
{
	return CBinaryDatabase::GetTMTxtOolTables();
}

CDatabaseTCNumCalTables *CALTELDatabaseEngine::GetTCNumCalTables() CONST
{
	return CBinaryDatabase::GetTCNumCalTables();
}

CDatabaseTCTxtCalTables *CALTELDatabaseEngine::GetTCTxtCalTables() CONST
{
	return CBinaryDatabase::GetTCTxtCalTables();
}

CDatabaseTCNumOolTables *CALTELDatabaseEngine::GetTCNumOolTables() CONST
{
	return CBinaryDatabase::GetTCNumOolTables();
}

CDatabaseTCTxtOolTables *CALTELDatabaseEngine::GetTCTxtOolTables() CONST
{
	return CBinaryDatabase::GetTCTxtOolTables();
}

CDatabaseTCPreExeGroups *CALTELDatabaseEngine::GetTCPreExeGroups() CONST
{
	return CBinaryDatabase::GetTCPreExeGroups();
}

CDatabaseTCExeVerGroups *CALTELDatabaseEngine::GetTCExeVerGroups() CONST
{
	return CBinaryDatabase::GetTCExeVerGroups();
}

CDatabaseTMPacketHeaders *CALTELDatabaseEngine::GetTMPacketHeaders() CONST
{
	return CBinaryDatabase::GetTMPacketHeaders();
}

CDatabaseTMPacketStreams *CALTELDatabaseEngine::GetTMPacketStreams() CONST
{
	return CBinaryDatabase::GetTMPacketStreams();
}

CDatabaseTCParameterSets *CALTELDatabaseEngine::GetTCParameterSets() CONST
{
	return CBinaryDatabase::GetTCParameterSets();
}

CDatabaseTCFunctionBlocks *CALTELDatabaseEngine::GetTCFunctionBlocks() CONST
{
	return CBinaryDatabase::GetTCFunctionBlocks();
}

CDatabaseOBProcessorMemoryImages *CALTELDatabaseEngine::GetOBProcessorMemoryImages() CONST
{
	return CBinaryDatabase::GetOBProcessorMemoryImages();
}

CDatabaseTMPacket *CALTELDatabaseEngine::GetTMPacketSubTags() CONST
{
	return CBinaryDatabase::GetTMPacketSubTags();
}

CANDLayouts *CALTELDatabaseEngine::GetANDs(ULONGLONG nSubcomponent) CONST
{
	return CBinaryDatabase::GetANDs(nSubcomponent);
}

CGRDLayouts *CALTELDatabaseEngine::GetGRDs() CONST
{
	return CBinaryDatabase::GetGRDs();
}

CMMDLayouts *CALTELDatabaseEngine::GetMMDs() CONST
{
	return CBinaryDatabase::GetMMDs();
}

CPODLayouts *CALTELDatabaseEngine::GetPODs() CONST
{
	return CBinaryDatabase::GetPODs();
}

CAutomationScripts *CALTELDatabaseEngine::GetScripts() CONST
{
	return CBinaryDatabase::GetScripts();
}

BOOL CALTELDatabaseEngine::DeleteTMPacket(LPCTSTR pszTag)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTMPacket  *pDatabaseTMPacket;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMPacketsRecordset  cDatabaseTMPackets(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PMF_SQLFINDSET), pszTag);
			cDatabaseTMPackets.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTMPackets.IsBOF() && !cDatabaseTMPackets.IsEOF())
		{
			try
			{
				cDatabaseTMPackets.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMPackets.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMPacketParametersRecordset  cDatabaseTMPacketParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PLF_SQLFINDSET), pszTag);
			cDatabaseTMPacketParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMPackets.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMPacketParameters.IsBOF() && !cDatabaseTMPacketParameters.IsEOF())
		{
			try
			{
				cDatabaseTMPacketParameters.Delete();
				cDatabaseTMPacketParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMPackets.Close();
				cDatabaseTMPacketParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTMPacket = GetTMPackets()->GetAt((nIndex = GetTMPackets()->Find(pszTag)))))
		{
			GetTMPackets()->RemoveAt(nIndex);
			delete pDatabaseTMPacket;
		}
		cDatabaseTMPackets.Close();
		cDatabaseTMPacketParameters.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTCPacket(LPCTSTR pszTag)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTCPacket  *pDatabaseTCPacket;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCPacketsRecordset  cDatabaseTCPackets(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_TCP_SQLFINDSET), pszTag);
			cDatabaseTCPackets.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTCPackets.IsBOF() && !cDatabaseTCPackets.IsEOF())
		{
			try
			{
				cDatabaseTCPackets.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCPackets.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCPacketParametersRecordset  cDatabaseTCPacketParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PCDF_SQLFINDSET), pszTag);
			cDatabaseTCPacketParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCPackets.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCPacketParameters.IsBOF() && !cDatabaseTCPacketParameters.IsEOF())
		{
			try
			{
				cDatabaseTCPacketParameters.Delete();
				cDatabaseTCPacketParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCPackets.Close();
				cDatabaseTCPacketParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTCPacket = GetTCPackets()->GetAt((nIndex = GetTCPackets()->Find(pszTag)))))
		{
			GetTCPackets()->RemoveAt(nIndex);
			delete pDatabaseTCPacket;
		}
		cDatabaseTCPackets.Close();
		cDatabaseTCPacketParameters.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTCFunction(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTCFunction  *pDatabaseTCFunction;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCFunctionsRecordset  cDatabaseTCFunctions(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CCF_SQLFINDSET), pszName);
			cDatabaseTCFunctions.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTCFunctions.IsBOF() && !cDatabaseTCFunctions.IsEOF())
		{
			try
			{
				cDatabaseTCFunctions.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCFunctions.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCFunctionElementsRecordset  cDatabaseTCFunctionElements(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CDF_SQLFINDSET), pszName);
			cDatabaseTCFunctionElements.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCFunctions.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCFunctionElements.IsBOF() && !cDatabaseTCFunctionElements.IsEOF())
		{
			try
			{
				cDatabaseTCFunctionElements.Delete();
				cDatabaseTCFunctionElements.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCFunctions.Close();
				cDatabaseTCFunctionElements.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCParameterSetAssociationsRecordset  cDatabaseTCParameterSetAssociations(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PCPS_SQLFINDSETBYREF), pszName);
			cDatabaseTCParameterSetAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCFunctions.Close();
			cDatabaseTCFunctionElements.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCParameterSetAssociations.IsBOF() && !cDatabaseTCParameterSetAssociations.IsEOF())
		{
			try
			{
				cDatabaseTCParameterSetAssociations.Delete();
				cDatabaseTCParameterSetAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCFunctions.Close();
				cDatabaseTCFunctionElements.Close();
				cDatabaseTCParameterSetAssociations.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTCFunction = GetTCFunctions()->GetAt((nIndex = GetTCFunctions()->Find(pszName)))))
		{
			GetTCFunctions()->RemoveAt(nIndex);
			delete pDatabaseTCFunction;
		}
		cDatabaseTCFunctions.Close();
		cDatabaseTCFunctionElements.Close();
		cDatabaseTCParameterSetAssociations.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTCSequence(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTCSequence  *pDatabaseTCSequence;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCSequencesRecordset  cDatabaseTCSequences(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CSF_SQLFINDSET), pszName);
			cDatabaseTCSequences.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTCSequences.IsBOF() && !cDatabaseTCSequences.IsEOF())
		{
			try
			{
				cDatabaseTCSequences.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCSequences.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCSequenceEntriesRecordset  cDatabaseTCSequenceEntries(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CSS_SQLFINDSET), pszName);
			cDatabaseTCSequenceEntries.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCSequences.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCSequenceEntries.IsBOF() && !cDatabaseTCSequenceEntries.IsEOF())
		{
			try
			{
				cDatabaseTCSequenceEntries.Delete();
				cDatabaseTCSequenceEntries.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCSequences.Close();
				cDatabaseTCSequenceEntries.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCSequenceParametersRecordset  cDatabaseTCSequenceParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CSP_SQLFINDSET), pszName);
			cDatabaseTCSequenceParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCSequences.Close();
			cDatabaseTCSequenceEntries.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCSequenceParameters.IsBOF() && !cDatabaseTCSequenceParameters.IsEOF())
		{
			try
			{
				cDatabaseTCSequenceParameters.Delete();
				cDatabaseTCSequenceParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCSequences.Close();
				cDatabaseTCSequenceEntries.Close();
				cDatabaseTCSequenceParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCSequenceEntryParametersRecordset  cDatabaseTCSequenceEntryParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_SDF_SQLFINDSET), pszName);
			cDatabaseTCSequenceEntryParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCSequences.Close();
			cDatabaseTCSequenceEntries.Close();
			cDatabaseTCSequenceParameters.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCSequenceEntryParameters.IsBOF() && !cDatabaseTCSequenceEntryParameters.IsEOF())
		{
			try
			{
				cDatabaseTCSequenceEntryParameters.Delete();
				cDatabaseTCSequenceEntryParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCSequences.Close();
				cDatabaseTCSequenceEntries.Close();
				cDatabaseTCSequenceParameters.Close();
				cDatabaseTCSequenceEntryParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTCSequence = GetTCSequences()->GetAt((nIndex = GetTCSequences()->Find(pszName)))))
		{
			GetTCSequences()->RemoveAt(nIndex);
			delete pDatabaseTCSequence;
		}
		cDatabaseTCSequences.Close();
		cDatabaseTCSequenceEntries.Close();
		cDatabaseTCSequenceParameters.Close();
		cDatabaseTCSequenceEntryParameters.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteOBProcessor(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseOBProcessor  *pDatabaseOBProcessor;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseOBProcessorsRecordset  cDatabaseOBProcessors(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_GEN_SQLFINDSET), pszName);
			cDatabaseOBProcessors.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseOBProcessors.IsBOF() && !cDatabaseOBProcessors.IsEOF())
		{
			try
			{
				cDatabaseOBProcessors.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseOBProcessors.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseOBProcessorMemoryAreasRecordset  cDatabaseOBProcessorMemoryAreas(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_MAD_SQLFINDSET), pszName);
			cDatabaseOBProcessorMemoryAreas.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseOBProcessors.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseOBProcessorMemoryAreas.IsBOF() && !cDatabaseOBProcessorMemoryAreas.IsEOF())
		{
			CALTELDatabaseOBProcessorMemoryAreaBlocksRecordset  cDatabaseOBProcessorMemoryAreaBlocks(this);
			try
			{
				szQuery.Format(STRING(IDS_DATABASE_TABLE_MEM_SQLFINDSET), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetName());
				cDatabaseOBProcessorMemoryAreaBlocks.Open(CRecordset::dynamic, szQuery, CRecordset::none);
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseOBProcessorMemoryAreas.Close();
				cDatabaseOBProcessors.Close();
				CloseDBMS();
				return FALSE;
			}
			while (!cDatabaseOBProcessorMemoryAreaBlocks.IsBOF() && !cDatabaseOBProcessorMemoryAreaBlocks.IsEOF())
			{
				try
				{
					cDatabaseOBProcessorMemoryAreaBlocks.Delete();
					cDatabaseOBProcessorMemoryAreaBlocks.MoveNext();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseOBProcessorMemoryAreaBlocks.Close();
					cDatabaseOBProcessorMemoryAreas.Close();
					cDatabaseOBProcessors.Close();
					CloseDBMS();
					return FALSE;
				}
			}
			CALTELDatabaseOBProcessorMemoryAreaCataloguesRecordset  cDatabaseOBProcessorMemoryAreaCatalogues(this);
			try
			{
				szQuery.Format(STRING(IDS_DATABASE_TABLE_CAT_SQLFINDSET), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetName());
				cDatabaseOBProcessorMemoryAreaCatalogues.Open(CRecordset::dynamic, szQuery, CRecordset::none);
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseOBProcessorMemoryAreaBlocks.Close();
				cDatabaseOBProcessorMemoryAreas.Close();
				cDatabaseOBProcessors.Close();
				CloseDBMS();
				return FALSE;
			}
			while (!cDatabaseOBProcessorMemoryAreaCatalogues.IsBOF() && !cDatabaseOBProcessorMemoryAreaCatalogues.IsEOF())
			{
				try
				{
					cDatabaseOBProcessorMemoryAreaCatalogues.Delete();
					cDatabaseOBProcessorMemoryAreaCatalogues.MoveNext();
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseOBProcessorMemoryAreaCatalogues.Close();
					cDatabaseOBProcessorMemoryAreaBlocks.Close();
					cDatabaseOBProcessorMemoryAreas.Close();
					cDatabaseOBProcessors.Close();
					CloseDBMS();
					return FALSE;
				}
			}
			try
			{
				cDatabaseOBProcessorMemoryAreas.Delete();
				cDatabaseOBProcessorMemoryAreas.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseOBProcessorMemoryAreaCatalogues.Close();
				cDatabaseOBProcessorMemoryAreaBlocks.Close();
				cDatabaseOBProcessorMemoryAreas.Close();
				cDatabaseOBProcessors.Close();
				CloseDBMS();
				return FALSE;
			}
			cDatabaseOBProcessorMemoryAreaCatalogues.Close();
			cDatabaseOBProcessorMemoryAreaBlocks.Close();
		}
		CALTELDatabaseOBProcessorMemoryAreaCheckSumsRecordset  cDatabaseOBProcessorMemoryAreaCheckSums(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CRC_SQLFINDSET), pszName);
			cDatabaseOBProcessorMemoryAreaCheckSums.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseOBProcessorMemoryAreas.Close();
			cDatabaseOBProcessors.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseOBProcessorMemoryAreaCheckSums.IsBOF() && !cDatabaseOBProcessorMemoryAreaCheckSums.IsEOF())
		{
			try
			{
				cDatabaseOBProcessorMemoryAreaCheckSums.Delete();
				cDatabaseOBProcessorMemoryAreaCheckSums.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseOBProcessorMemoryAreaCheckSums.Close();
				cDatabaseOBProcessorMemoryAreas.Close();
				cDatabaseOBProcessors.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseOBProcessor = GetOBProcessors()->GetAt((nIndex = GetOBProcessors()->Find(pszName)))))
		{
			GetOBProcessors()->RemoveAt(nIndex);
			delete pDatabaseOBProcessor;
		}
		cDatabaseOBProcessorMemoryAreaCheckSums.Close();
		cDatabaseOBProcessorMemoryAreas.Close();
		cDatabaseOBProcessors.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

INT CALTELDatabaseEngine::DeleteTCProcedure(LPCTSTR pszName)
{
	INT  nIndex;
	CDatabaseTCProcedure  *pDatabaseTCProcedure;

	if ((pDatabaseTCProcedure = GetTCProcedures()->GetAt((nIndex = GetTCProcedures()->Find(pszName)))))
	{
		for (GetTCProcedures()->RemoveAt(nIndex); CBinaryDatabase::Save(DATABASE_COMPONENT_TCPROCEDURE); )
		{
			delete pDatabaseTCProcedure;
			return nIndex;
		}
		delete pDatabaseTCProcedure;
	}
	return -1;
}

BOOL CALTELDatabaseEngine::DeleteTMParameter(LPCTSTR pszTag)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMParametersRecordset  cDatabaseTMParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PCF_SQLFINDSET), pszTag);
			cDatabaseTMParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTMParameters.IsBOF() && !cDatabaseTMParameters.IsEOF())
		{
			try
			{
				cDatabaseTMParameters.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTMParameter = GetTMParameters()->GetAt((nIndex = GetTMParameters()->Find(pszTag)))))
		{
			if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) == TMPARAMETER_CALIBRATION_NUMERICAL)
			{
				CALTELDatabaseTMNumCalTableAssociationsRecordset  cDatabaseTMNumCalTableAssociations(this);
				try
				{
					szQuery.Format(STRING(IDS_DATABASE_TABLE_PCAL_SQLFINDSETBYREF), pszTag);
					cDatabaseTMNumCalTableAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseTMParameters.Close();
					CloseDBMS();
					return FALSE;
				}
				while (!cDatabaseTMNumCalTableAssociations.IsBOF() && !cDatabaseTMNumCalTableAssociations.IsEOF())
				{
					try
					{
						cDatabaseTMNumCalTableAssociations.Delete();
						cDatabaseTMNumCalTableAssociations.MoveNext();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseTMParameters.Close();
						cDatabaseTMNumCalTableAssociations.Close();
						CloseDBMS();
						return FALSE;
					}
				}
				cDatabaseTMNumCalTableAssociations.Close();
				CALTELDatabaseTMNumOolTableAssociationsRecordset  cDatabaseTMNumOolTableAssociations(this);
				try
				{
					szQuery.Format(STRING(IDS_DATABASE_TABLE_POCF_SQLFINDSETBYREF), pszTag);
					cDatabaseTMNumOolTableAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseTMParameters.Close();
					CloseDBMS();
					return FALSE;
				}
				while (!cDatabaseTMNumOolTableAssociations.IsBOF() && !cDatabaseTMNumOolTableAssociations.IsEOF())
				{
					try
					{
						cDatabaseTMNumOolTableAssociations.Delete();
						cDatabaseTMNumOolTableAssociations.MoveNext();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseTMParameters.Close();
						cDatabaseTMNumOolTableAssociations.Close();
						CloseDBMS();
						return FALSE;
					}
				}
				cDatabaseTMNumOolTableAssociations.Close();
			}
			if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS)
			{
				CALTELDatabaseTMTxtCalTableAssociationsRecordset  cDatabaseTMTxtCalTableAssociations(this);
				try
				{
					szQuery.Format(STRING(IDS_DATABASE_TABLE_PTXF_SQLFINDSETBYREF), pszTag);
					cDatabaseTMTxtCalTableAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseTMParameters.Close();
					CloseDBMS();
					return FALSE;
				}
				while (!cDatabaseTMTxtCalTableAssociations.IsBOF() && !cDatabaseTMTxtCalTableAssociations.IsEOF())
				{
					try
					{
						cDatabaseTMTxtCalTableAssociations.Delete();
						cDatabaseTMTxtCalTableAssociations.MoveNext();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseTMParameters.Close();
						cDatabaseTMTxtCalTableAssociations.Close();
						CloseDBMS();
						return FALSE;
					}
				}
				cDatabaseTMTxtCalTableAssociations.Close();
				CALTELDatabaseTMTxtOolTableAssociationsRecordset  cDatabaseTMTxtOolTableAssociations(this);
				try
				{
					szQuery.Format(STRING(IDS_DATABASE_TABLE_PFXF_SQLFINDSETBYREF), pszTag);
					cDatabaseTMTxtOolTableAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
				}
				catch (CException *pException)
				{
					pException->Delete();
					cDatabaseTMParameters.Close();
					CloseDBMS();
					return FALSE;
				}
				while (!cDatabaseTMTxtOolTableAssociations.IsBOF() && !cDatabaseTMTxtOolTableAssociations.IsEOF())
				{
					try
					{
						cDatabaseTMTxtOolTableAssociations.Delete();
						cDatabaseTMTxtOolTableAssociations.MoveNext();
					}
					catch (CException *pException)
					{
						pException->Delete();
						cDatabaseTMParameters.Close();
						cDatabaseTMTxtOolTableAssociations.Close();
						CloseDBMS();
						return FALSE;
					}
				}
				cDatabaseTMTxtOolTableAssociations.Close();
			}
			GetTMParameters()->RemoveAt(nIndex);
			delete pDatabaseTMParameter;
		}
		cDatabaseTMParameters.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTMNumCalTable(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMNumCalTablesRecordset  cDatabaseTMNumCalTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CAL_SQLFINDSET), pszName);
			cDatabaseTMNumCalTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTMNumCalTables.IsBOF() && !cDatabaseTMNumCalTables.IsEOF())
		{
			try
			{
				cDatabaseTMNumCalTables.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMNumCalTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMNumCalTablePointsRecordset  cDatabaseTMNumCalTablePoints(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CALP_SQLFINDSET), pszName);
			cDatabaseTMNumCalTablePoints.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMNumCalTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMNumCalTablePoints.IsBOF() && !cDatabaseTMNumCalTablePoints.IsEOF())
		{
			try
			{
				cDatabaseTMNumCalTablePoints.Delete();
				cDatabaseTMNumCalTablePoints.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMNumCalTables.Close();
				cDatabaseTMNumCalTablePoints.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMNumCalTableAssociationsRecordset  cDatabaseTMNumCalTableAssociations(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PCAL_SQLFINDSET), pszName);
			cDatabaseTMNumCalTableAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMNumCalTables.Close();
			cDatabaseTMNumCalTablePoints.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMNumCalTableAssociations.IsBOF() && !cDatabaseTMNumCalTableAssociations.IsEOF())
		{
			try
			{
				cDatabaseTMNumCalTableAssociations.Delete();
				cDatabaseTMNumCalTableAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMNumCalTables.Close();
				cDatabaseTMNumCalTablePoints.Close();
				cDatabaseTMNumCalTableAssociations.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTMNumCalTable = GetTMNumCalTables()->GetAt((nIndex = GetTMNumCalTables()->Find(pszName)))))
		{
			GetTMNumCalTables()->RemoveAt(nIndex);
			delete pDatabaseTMNumCalTable;
		}
		if ((pDatabaseTCNumCalTable = GetTCNumCalTables()->GetAt((nIndex = GetTCNumCalTables()->Find(pszName)))))
		{
			GetTCNumCalTables()->RemoveAt(nIndex);
			delete pDatabaseTCNumCalTable;
		}
		cDatabaseTMNumCalTables.Close();
		cDatabaseTMNumCalTablePoints.Close();
		cDatabaseTMNumCalTableAssociations.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTMTxtCalTable(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMTxtCalTablesRecordset  cDatabaseTMTxtCalTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_TXF_SQLFINDSET), pszName);
			cDatabaseTMTxtCalTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTMTxtCalTables.IsBOF() && !cDatabaseTMTxtCalTables.IsEOF())
		{
			try
			{
				cDatabaseTMTxtCalTables.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMTxtCalTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMTxtCalTablePointsRecordset  cDatabaseTMTxtCalTablePoints(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_TXFP_SQLFINDSET), pszName);
			cDatabaseTMTxtCalTablePoints.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMTxtCalTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMTxtCalTablePoints.IsBOF() && !cDatabaseTMTxtCalTablePoints.IsEOF())
		{
			try
			{
				cDatabaseTMTxtCalTablePoints.Delete();
				cDatabaseTMTxtCalTablePoints.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMTxtCalTables.Close();
				cDatabaseTMTxtCalTablePoints.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMTxtCalTableAssociationsRecordset  cDatabaseTMTxtCalTableAssociations(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PTXF_SQLFINDSET), pszName);
			cDatabaseTMTxtCalTableAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMTxtCalTables.Close();
			cDatabaseTMTxtCalTablePoints.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMTxtCalTableAssociations.IsBOF() && !cDatabaseTMTxtCalTableAssociations.IsEOF())
		{
			try
			{
				cDatabaseTMTxtCalTableAssociations.Delete();
				cDatabaseTMTxtCalTableAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMTxtCalTables.Close();
				cDatabaseTMTxtCalTablePoints.Close();
				cDatabaseTMTxtCalTableAssociations.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTMTxtCalTable = GetTMTxtCalTables()->GetAt((nIndex = GetTMTxtCalTables()->Find(pszName)))))
		{
			GetTMTxtCalTables()->RemoveAt(nIndex);
			delete pDatabaseTMTxtCalTable;
		}
		if ((pDatabaseTCTxtCalTable = GetTCTxtCalTables()->GetAt((nIndex = GetTCTxtCalTables()->Find(pszName)))))
		{
			GetTCTxtCalTables()->RemoveAt(nIndex);
			delete pDatabaseTCTxtCalTable;
		}
		cDatabaseTMTxtCalTables.Close();
		cDatabaseTMTxtCalTablePoints.Close();
		cDatabaseTMTxtCalTableAssociations.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTMNumOolTable(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMNumOolTablesRecordset  cDatabaseTMNumOolTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_OCF_SQLFINDSET), pszName);
			cDatabaseTMNumOolTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTMNumOolTables.IsBOF() && !cDatabaseTMNumOolTables.IsEOF())
		{
			try
			{
				cDatabaseTMNumOolTables.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMNumOolTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMNumOolTableLimitsRecordset  cDatabaseTMNumOolTableLimits(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_OCFP_SQLFINDSET), pszName);
			cDatabaseTMNumOolTableLimits.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMNumOolTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMNumOolTableLimits.IsBOF() && !cDatabaseTMNumOolTableLimits.IsEOF())
		{
			try
			{
				cDatabaseTMNumOolTableLimits.Delete();
				cDatabaseTMNumOolTableLimits.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMNumOolTables.Close();
				cDatabaseTMNumOolTableLimits.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMNumOolTableAssociationsRecordset  cDatabaseTMNumOolTableAssociations(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_POCF_SQLFINDSET), pszName);
			cDatabaseTMNumOolTableAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMNumOolTables.Close();
			cDatabaseTMNumOolTableLimits.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMNumOolTableAssociations.IsBOF() && !cDatabaseTMNumOolTableAssociations.IsEOF())
		{
			try
			{
				cDatabaseTMNumOolTableAssociations.Delete();
				cDatabaseTMNumOolTableAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMNumOolTables.Close();
				cDatabaseTMNumOolTableLimits.Close();
				cDatabaseTMNumOolTableAssociations.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTMNumOolTable = GetTMNumOolTables()->GetAt((nIndex = GetTMNumOolTables()->Find(pszName)))))
		{
			GetTMNumOolTables()->RemoveAt(nIndex);
			delete pDatabaseTMNumOolTable;
		}
		cDatabaseTMNumOolTables.Close();
		cDatabaseTMNumOolTableLimits.Close();
		cDatabaseTMNumOolTableAssociations.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTMTxtOolTable(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMTxtOolTablesRecordset  cDatabaseTMTxtOolTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_FXF_SQLFINDSET), pszName);
			cDatabaseTMTxtOolTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTMTxtOolTables.IsBOF() && !cDatabaseTMTxtOolTables.IsEOF())
		{
			try
			{
				cDatabaseTMTxtOolTables.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMTxtOolTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMTxtOolTableLimitsRecordset  cDatabaseTMTxtOolTableLimits(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_FXFP_SQLFINDSET), pszName);
			cDatabaseTMTxtOolTableLimits.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMTxtOolTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMTxtOolTableLimits.IsBOF() && !cDatabaseTMTxtOolTableLimits.IsEOF())
		{
			try
			{
				cDatabaseTMTxtOolTableLimits.Delete();
				cDatabaseTMTxtOolTableLimits.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMTxtOolTables.Close();
				cDatabaseTMTxtOolTableLimits.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMTxtOolTableAssociationsRecordset  cDatabaseTMTxtOolTableAssociations(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PFXF_SQLFINDSET), pszName);
			cDatabaseTMTxtOolTableAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTMTxtOolTables.Close();
			cDatabaseTMTxtOolTableLimits.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMTxtOolTableAssociations.IsBOF() && !cDatabaseTMTxtOolTableAssociations.IsEOF())
		{
			try
			{
				cDatabaseTMTxtOolTableAssociations.Delete();
				cDatabaseTMTxtOolTableAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMTxtOolTables.Close();
				cDatabaseTMTxtOolTableLimits.Close();
				cDatabaseTMTxtOolTableAssociations.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTMTxtOolTable = GetTMTxtOolTables()->GetAt((nIndex = GetTMTxtOolTables()->Find(pszName)))))
		{
			GetTMTxtOolTables()->RemoveAt(nIndex);
			delete pDatabaseTMTxtOolTable;
		}
		cDatabaseTMTxtOolTables.Close();
		cDatabaseTMTxtOolTableLimits.Close();
		cDatabaseTMTxtOolTableAssociations.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTCParameter(LPCTSTR pszTag)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTCParameter  *pDatabaseTCParameter;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCParametersRecordset  cDatabaseTCParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CPC_SQLFINDSET), pszTag);
			cDatabaseTCParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTCParameters.IsBOF() && !cDatabaseTCParameters.IsEOF())
		{
			try
			{
				cDatabaseTCParameters.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTCParameter = GetTCParameters()->GetAt((nIndex = GetTCParameters()->Find(pszTag)))))
		{
			GetTCParameters()->RemoveAt(nIndex);
			delete pDatabaseTCParameter;
		}
		cDatabaseTCParameters.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTCNumCalTable(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCNumCalTablesRecordset  cDatabaseTCNumCalTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CAL_SQLFINDSET), pszName);
			cDatabaseTCNumCalTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTCNumCalTables.IsBOF() && !cDatabaseTCNumCalTables.IsEOF())
		{
			try
			{
				cDatabaseTCNumCalTables.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCNumCalTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCNumCalTablePointsRecordset  cDatabaseTCNumCalTablePoints(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CALP_SQLFINDSET), pszName);
			cDatabaseTCNumCalTablePoints.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCNumCalTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCNumCalTablePoints.IsBOF() && !cDatabaseTCNumCalTablePoints.IsEOF())
		{
			try
			{
				cDatabaseTCNumCalTablePoints.Delete();
				cDatabaseTCNumCalTablePoints.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCNumCalTables.Close();
				cDatabaseTCNumCalTablePoints.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMNumCalTableAssociationsRecordset  cDatabaseTMNumCalTableAssociations(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PCAL_SQLFINDSET), pszName);
			cDatabaseTMNumCalTableAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCNumCalTables.Close();
			cDatabaseTCNumCalTablePoints.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMNumCalTableAssociations.IsBOF() && !cDatabaseTMNumCalTableAssociations.IsEOF())
		{
			try
			{
				cDatabaseTMNumCalTableAssociations.Delete();
				cDatabaseTMNumCalTableAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCNumCalTables.Close();
				cDatabaseTCNumCalTablePoints.Close();
				cDatabaseTMNumCalTableAssociations.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTMNumCalTable = GetTMNumCalTables()->GetAt((nIndex = GetTMNumCalTables()->Find(pszName)))))
		{
			GetTMNumCalTables()->RemoveAt(nIndex);
			delete pDatabaseTMNumCalTable;
		}
		if ((pDatabaseTCNumCalTable = GetTCNumCalTables()->GetAt((nIndex = GetTCNumCalTables()->Find(pszName)))))
		{
			GetTCNumCalTables()->RemoveAt(nIndex);
			delete pDatabaseTCNumCalTable;
		}
		cDatabaseTCNumCalTables.Close();
		cDatabaseTCNumCalTablePoints.Close();
		cDatabaseTMNumCalTableAssociations.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTCTxtCalTable(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCTxtCalTablesRecordset  cDatabaseTCTxtCalTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_TXF_SQLFINDSET), pszName);
			cDatabaseTCTxtCalTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTCTxtCalTables.IsBOF() && !cDatabaseTCTxtCalTables.IsEOF())
		{
			try
			{
				cDatabaseTCTxtCalTables.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCTxtCalTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCTxtCalTablePointsRecordset  cDatabaseTCTxtCalTablePoints(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_TXFP_SQLFINDSET), pszName);
			cDatabaseTCTxtCalTablePoints.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCTxtCalTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCTxtCalTablePoints.IsBOF() && !cDatabaseTCTxtCalTablePoints.IsEOF())
		{
			try
			{
				cDatabaseTCTxtCalTablePoints.Delete();
				cDatabaseTCTxtCalTablePoints.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCTxtCalTables.Close();
				cDatabaseTCTxtCalTablePoints.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTMTxtCalTableAssociationsRecordset  cDatabaseTMTxtCalTableAssociations(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PTXF_SQLFINDSET), pszName);
			cDatabaseTMTxtCalTableAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCTxtCalTables.Close();
			cDatabaseTCTxtCalTablePoints.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTMTxtCalTableAssociations.IsBOF() && !cDatabaseTMTxtCalTableAssociations.IsEOF())
		{
			try
			{
				cDatabaseTMTxtCalTableAssociations.Delete();
				cDatabaseTMTxtCalTableAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCTxtCalTables.Close();
				cDatabaseTCTxtCalTablePoints.Close();
				cDatabaseTMTxtCalTableAssociations.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTMTxtCalTable = GetTMTxtCalTables()->GetAt((nIndex = GetTMTxtCalTables()->Find(pszName)))))
		{
			GetTMTxtCalTables()->RemoveAt(nIndex);
			delete pDatabaseTMTxtCalTable;
		}
		if ((pDatabaseTCTxtCalTable = GetTCTxtCalTables()->GetAt((nIndex = GetTCTxtCalTables()->Find(pszName)))))
		{
			GetTCTxtCalTables()->RemoveAt(nIndex);
			delete pDatabaseTCTxtCalTable;
		}
		cDatabaseTCTxtCalTables.Close();
		cDatabaseTCTxtCalTablePoints.Close();
		cDatabaseTMTxtCalTableAssociations.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTCNumOolTable(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCNumOolTablesRecordset  cDatabaseTCNumOolTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_OCF_SQLFINDSET), pszName);
			cDatabaseTCNumOolTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTCNumOolTables.IsBOF() && !cDatabaseTCNumOolTables.IsEOF())
		{
			try
			{
				cDatabaseTCNumOolTables.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCNumOolTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCNumOolTableLimitsRecordset  cDatabaseTCNumOolTableLimits(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_OCFP_SQLFINDSET), pszName);
			cDatabaseTCNumOolTableLimits.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCNumOolTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCNumOolTableLimits.IsBOF() && !cDatabaseTCNumOolTableLimits.IsEOF())
		{
			try
			{
				cDatabaseTCNumOolTableLimits.Delete();
				cDatabaseTCNumOolTableLimits.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCNumOolTables.Close();
				cDatabaseTCNumOolTableLimits.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTCNumOolTable = GetTCNumOolTables()->GetAt((nIndex = GetTCNumOolTables()->Find(pszName)))))
		{
			GetTCNumOolTables()->RemoveAt(nIndex);
			delete pDatabaseTCNumOolTable;
		}
		cDatabaseTCNumOolTables.Close();
		cDatabaseTCNumOolTableLimits.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTCTxtOolTable(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCTxtOolTablesRecordset  cDatabaseTCTxtOolTables(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_FXF_SQLFINDSET), pszName);
			cDatabaseTCTxtOolTables.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTCTxtOolTables.IsBOF() && !cDatabaseTCTxtOolTables.IsEOF())
		{
			try
			{
				cDatabaseTCTxtOolTables.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCTxtOolTables.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCTxtOolTableLimitsRecordset  cDatabaseTCTxtOolTableLimits(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_FXFP_SQLFINDSET), pszName);
			cDatabaseTCTxtOolTableLimits.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCTxtOolTables.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCTxtOolTableLimits.IsBOF() && !cDatabaseTCTxtOolTableLimits.IsEOF())
		{
			try
			{
				cDatabaseTCTxtOolTableLimits.Delete();
				cDatabaseTCTxtOolTableLimits.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCTxtOolTables.Close();
				cDatabaseTCTxtOolTableLimits.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTCTxtOolTable = GetTCTxtOolTables()->GetAt((nIndex = GetTCTxtOolTables()->Find(pszName)))))
		{
			GetTCTxtOolTables()->RemoveAt(nIndex);
			delete pDatabaseTCTxtOolTable;
		}
		cDatabaseTCTxtOolTables.Close();
		cDatabaseTCTxtOolTableLimits.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTCPreExeGroup(LPCTSTR pszID)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCPreExeGroupsRecordset  cDatabaseTCPreExeGroups(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PVP_SQLFINDSET), pszID);
			cDatabaseTCPreExeGroups.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTCPreExeGroups.IsBOF() && !cDatabaseTCPreExeGroups.IsEOF())
		{
			try
			{
				cDatabaseTCPreExeGroups.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCPreExeGroups.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCPreExeGroupParametersRecordset  cDatabaseTCPreExeGroupParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PEV_SQLFINDSET), pszID);
			cDatabaseTCPreExeGroupParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCPreExeGroups.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCPreExeGroupParameters.IsBOF() && !cDatabaseTCPreExeGroupParameters.IsEOF())
		{
			try
			{
				cDatabaseTCPreExeGroupParameters.Delete();
				cDatabaseTCPreExeGroupParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCPreExeGroups.Close();
				cDatabaseTCPreExeGroupParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTCPreExeGroup = GetTCPreExeGroups()->GetAt((nIndex = GetTCPreExeGroups()->Find(pszID)))))
		{
			GetTCPreExeGroups()->RemoveAt(nIndex);
			delete pDatabaseTCPreExeGroup;
		}
		cDatabaseTCPreExeGroups.Close();
		cDatabaseTCPreExeGroupParameters.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTCExeVerGroup(LPCTSTR pszID)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCExeVerGroupsRecordset  cDatabaseTCExeVerGroups(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CVP_SQLFINDSET), pszID);
			cDatabaseTCExeVerGroups.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTCExeVerGroups.IsBOF() && !cDatabaseTCExeVerGroups.IsEOF())
		{
			try
			{
				cDatabaseTCExeVerGroups.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCExeVerGroups.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCExeVerGroupParametersRecordset  cDatabaseTCExeVerGroupParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CEV_SQLFINDSET), pszID);
			cDatabaseTCExeVerGroupParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCExeVerGroups.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCExeVerGroupParameters.IsBOF() && !cDatabaseTCExeVerGroupParameters.IsEOF())
		{
			try
			{
				cDatabaseTCExeVerGroupParameters.Delete();
				cDatabaseTCExeVerGroupParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCExeVerGroups.Close();
				cDatabaseTCExeVerGroupParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTCExeVerGroup = GetTCExeVerGroups()->GetAt((nIndex = GetTCExeVerGroups()->Find(pszID)))))
		{
			GetTCExeVerGroups()->RemoveAt(nIndex);
			delete pDatabaseTCExeVerGroup;
		}
		cDatabaseTCExeVerGroups.Close();
		cDatabaseTCExeVerGroupParameters.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTMPacketHeader(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTMPacketHeader  *pDatabaseTMPacketHeader;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMPacketHeadersRecordset  cDatabaseTMPacketHeaders(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_DFH_SQLFINDSET), pszName);
			cDatabaseTMPacketHeaders.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTMPacketHeaders.IsBOF() && !cDatabaseTMPacketHeaders.IsEOF())
		{
			try
			{
				cDatabaseTMPacketHeaders.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMPacketHeaders.Close();
				CloseDBMS();
				return FALSE;
			}
			if ((pDatabaseTMPacketHeader = GetTMPacketHeaders()->GetAt((nIndex = GetTMPacketHeaders()->Find(pszName)))))
			{
				GetTMPacketHeaders()->RemoveAt(nIndex);
				delete pDatabaseTMPacketHeader;
			}
			cDatabaseTMPacketHeaders.Close();
			CloseDBMS();
			return TRUE;
		}
		cDatabaseTMPacketHeaders.Close();
		CloseDBMS();
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTMPacketStream(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTMPacketStream  *pDatabaseTMPacketStream;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTMPacketStreamsRecordset  cDatabaseTMPacketStreams(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_STR_SQLFINDSET), pszName);
			cDatabaseTMPacketStreams.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTMPacketStreams.IsBOF() && !cDatabaseTMPacketStreams.IsEOF())
		{
			try
			{
				cDatabaseTMPacketStreams.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTMPacketStreams.Close();
				CloseDBMS();
				return FALSE;
			}
			if ((pDatabaseTMPacketStream = GetTMPacketStreams()->GetAt((nIndex = GetTMPacketStreams()->Find(pszName)))))
			{
				GetTMPacketStreams()->RemoveAt(nIndex);
				delete pDatabaseTMPacketStream;
			}
			cDatabaseTMPacketStreams.Close();
			CloseDBMS();
			return TRUE;
		}
		cDatabaseTMPacketStreams.Close();
		CloseDBMS();
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTCParameterSet(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCParameterSetsRecordset  cDatabaseTCParameterSets(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CPS_SQLFINDSET), pszName);
			cDatabaseTCParameterSets.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseTCParameterSets.IsBOF() && !cDatabaseTCParameterSets.IsEOF())
		{
			try
			{
				cDatabaseTCParameterSets.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCParameterSets.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCParameterSetItemsRecordset  cDatabaseTCParameterSetItems(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_CPSP_SQLFINDSET), pszName);
			cDatabaseTCParameterSetItems.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCParameterSets.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCParameterSetItems.IsBOF() && !cDatabaseTCParameterSetItems.IsEOF())
		{
			try
			{
				cDatabaseTCParameterSetItems.Delete();
				cDatabaseTCParameterSetItems.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCParameterSets.Close();
				cDatabaseTCParameterSetItems.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCParameterSetAssociationsRecordset  cDatabaseTCParameterSetAssociations(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PCPS_SQLFINDSET), pszName);
			cDatabaseTCParameterSetAssociations.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCParameterSets.Close();
			cDatabaseTCParameterSetItems.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCParameterSetAssociations.IsBOF() && !cDatabaseTCParameterSetAssociations.IsEOF())
		{
			try
			{
				cDatabaseTCParameterSetAssociations.Delete();
				cDatabaseTCParameterSetAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCParameterSets.Close();
				cDatabaseTCParameterSetItems.Close();
				cDatabaseTCParameterSetAssociations.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTCParameterSet = GetTCParameterSets()->GetAt((nIndex = GetTCParameterSets()->Find(pszName)))))
		{
			GetTCParameterSets()->RemoveAt(nIndex);
			delete pDatabaseTCParameterSet;
		}
		cDatabaseTCParameterSets.Close();
		cDatabaseTCParameterSetItems.Close();
		cDatabaseTCParameterSetAssociations.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTCFunctionBlock(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseTCFunctionBlocksRecordset  cDatabaseTCFunctionBlocks(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_BCF_SQLFINDSET), pszName);
			cDatabaseTCFunctionBlocks.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCFunctionBlocks.IsBOF() && !cDatabaseTCFunctionBlocks.IsEOF())
		{
			try
			{
				cDatabaseTCFunctionBlocks.Delete();
				cDatabaseTCFunctionBlocks.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCFunctionBlocks.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseTCFunctionBlockElementsRecordset  cDatabaseTCFunctionBlockElements(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_BCCF_SQLFINDSET), pszName);
			cDatabaseTCFunctionBlockElements.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseTCFunctionBlocks.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseTCFunctionBlockElements.IsBOF() && !cDatabaseTCFunctionBlockElements.IsEOF())
		{
			try
			{
				cDatabaseTCFunctionBlockElements.Delete();
				cDatabaseTCFunctionBlockElements.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseTCFunctionBlocks.Close();
				cDatabaseTCFunctionBlockElements.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseTCFunctionBlock = GetTCFunctionBlocks()->GetAt((nIndex = GetTCFunctionBlocks()->Find(pszName)))))
		{
			GetTCFunctionBlocks()->RemoveAt(nIndex);
			delete pDatabaseTCFunctionBlock;
		}
		cDatabaseTCFunctionBlocks.Close();
		cDatabaseTCFunctionBlockElements.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteOBProcessorMemoryImage(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseOBProcessorMemoryImagesRecordset  cDatabaseOBProcessorMemoryImages(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_IMG_SQLFINDSET), pszName);
			cDatabaseOBProcessorMemoryImages.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseOBProcessorMemoryImages.IsBOF() && !cDatabaseOBProcessorMemoryImages.IsEOF())
		{
			try
			{
				cDatabaseOBProcessorMemoryImages.Delete();
				cDatabaseOBProcessorMemoryImages.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseOBProcessorMemoryImages.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pDatabaseOBProcessorMemoryImage = GetOBProcessorMemoryImages()->GetAt((nIndex = GetOBProcessorMemoryImages()->Find(pszName)))))
		{
			GetOBProcessorMemoryImages()->RemoveAt(nIndex);
			delete pDatabaseOBProcessorMemoryImage;
		}
		cDatabaseOBProcessorMemoryImages.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteAND(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CANDLayout  *pANDLayout;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseANDDirectoryRecordset  cDatabaseANDDirectory(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_DPF_SQLFINDSET), pszName);
			cDatabaseANDDirectory.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseANDDirectory.IsBOF() && !cDatabaseANDDirectory.IsEOF())
		{
			try
			{
				cDatabaseANDDirectory.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseANDDirectory.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseANDParametersRecordset  cDatabaseANDParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_DPFP_SQLFINDSET), pszName);
			cDatabaseANDParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseANDDirectory.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseANDParameters.IsBOF() && !cDatabaseANDParameters.IsEOF())
		{
			try
			{
				cDatabaseANDParameters.Delete();
				cDatabaseANDParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseANDDirectory.Close();
				cDatabaseANDParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pANDLayout = GetANDs()->GetAt((nIndex = GetANDs()->Find(pszName)))))
		{
			GetANDs()->RemoveAt(nIndex);
			delete pANDLayout;
		}
		cDatabaseANDDirectory.Close();
		cDatabaseANDParameters.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteGRD(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CGRDLayout  *pGRDLayout;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabaseGRDDirectoryRecordset  cDatabaseGRDDirectory(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_GPF_SQLFINDSET), pszName);
			cDatabaseGRDDirectory.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabaseGRDDirectory.IsBOF() && !cDatabaseGRDDirectory.IsEOF())
		{
			try
			{
				cDatabaseGRDDirectory.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseGRDDirectory.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		CALTELDatabaseGRDParametersRecordset  cDatabaseGRDParameters(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_GPFP_SQLFINDSET), pszName);
			cDatabaseGRDParameters.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			cDatabaseGRDDirectory.Close();
			CloseDBMS();
			return FALSE;
		}
		while (!cDatabaseGRDParameters.IsBOF() && !cDatabaseGRDParameters.IsEOF())
		{
			try
			{
				cDatabaseGRDParameters.Delete();
				cDatabaseGRDParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabaseGRDDirectory.Close();
				cDatabaseGRDParameters.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pGRDLayout = GetGRDs()->GetAt((nIndex = GetGRDs()->Find(pszName)))))
		{
			GetGRDs()->RemoveAt(nIndex);
			delete pGRDLayout;
		}
		cDatabaseGRDDirectory.Close();
		cDatabaseGRDParameters.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeletePOD(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szQuery;
	CPODLayout  *pPODLayout;

	if (OpenDBMS(CDatabase::noOdbcDialog))
	{
		CALTELDatabasePODDirectoryRecordset  cDatabasePODDirectory(this);
		try
		{
			szQuery.Format(STRING(IDS_DATABASE_TABLE_PPF_SQLFINDSET), pszName);
			cDatabasePODDirectory.Open(CRecordset::dynamic, szQuery, CRecordset::none);
		}
		catch (CException *pException)
		{
			pException->Delete();
			CloseDBMS();
			return FALSE;
		}
		if (!cDatabasePODDirectory.IsBOF() && !cDatabasePODDirectory.IsEOF())
		{
			try
			{
				cDatabasePODDirectory.Delete();
			}
			catch (CException *pException)
			{
				pException->Delete();
				cDatabasePODDirectory.Close();
				CloseDBMS();
				return FALSE;
			}
		}
		if ((pPODLayout = GetPODs()->GetAt((nIndex = GetPODs()->Find(pszName)))))
		{
			GetPODs()->RemoveAt(nIndex);
			delete pPODLayout;
		}
		cDatabasePODDirectory.Close();
		CloseDBMS();
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::SaveTMPackets()
{
	INT  nPacket;
	INT  nPackets;
	INT  nPacketHeader;
	INT  nPacketHeaders;
	INT  nPacketStream;
	INT  nPacketStreams;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTMPacketHeader  *pDatabaseTMPacketHeader;
	CDatabaseTMPacketStream  *pDatabaseTMPacketStream;

	for (nPacket = 0, nPackets = (INT)GetTMPackets()->GetSize(); nPacket < nPackets; nPacket++)
	{
		if ((pDatabaseTMPacket = GetTMPackets()->GetAt(nPacket)) && !Save(pDatabaseTMPacket)) break;
		continue;
	}
	for (nPacketHeader = 0, nPacketHeaders = (INT)GetTMPacketHeaders()->GetSize(); nPacketHeader < nPacketHeaders; nPacketHeader++)
	{
		if ((pDatabaseTMPacketHeader = GetTMPacketHeaders()->GetAt(nPacketHeader)) && !Save(pDatabaseTMPacketHeader)) break;
		continue;
	}
	for (nPacketStream = 0, nPacketStreams = (INT)GetTMPacketStreams()->GetSize(); nPacketStream < nPacketStreams; nPacketStream++)
	{
		if ((pDatabaseTMPacketStream = GetTMPacketStreams()->GetAt(nPacketStream)) && !Save(pDatabaseTMPacketStream)) break;
		continue;
	}
	return((nPacket == nPackets  &&  nPacketHeader == nPacketHeaders  &&  nPacketStream == nPacketStreams) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::SaveTCPackets()
{
	INT  nPacket;
	INT  nPackets;
	CDatabaseTCPacket  *pDatabaseTCPacket;

	for (nPacket = 0, nPackets = (INT)GetTCPackets()->GetSize(); nPacket < nPackets; nPacket++)
	{
		if ((pDatabaseTCPacket = GetTCPackets()->GetAt(nPacket)) && !Save(pDatabaseTCPacket)) break;
		continue;
	}
	return((nPacket == nPackets) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::SaveTCFunctions()
{
	INT  nFunction;
	INT  nFunctions;
	CDatabaseTCFunction  *pDatabaseTCFunction;

	for (nFunction = 0, nFunctions = (INT)GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
	{
		if ((pDatabaseTCFunction = GetTCFunctions()->GetAt(nFunction)) && !Save(pDatabaseTCFunction)) break;
		continue;
	}
	return((nFunction == nFunctions) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::SaveTCSequences()
{
	INT  nSequence;
	INT  nSequences;
	CDatabaseTCSequence  *pDatabaseTCSequence;

	for (nSequence = 0, nSequences = (INT)GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
	{
		if ((pDatabaseTCSequence = GetTCSequences()->GetAt(nSequence)) && !Save(pDatabaseTCSequence)) break;
		continue;
	}
	return((nSequence == nSequences) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::SaveOBProcessors()
{
	INT  nProcessor;
	INT  nProcessors;
	CDatabaseOBProcessor  *pDatabaseOBProcessor;

	for (nProcessor = 0, nProcessors = (INT)GetOBProcessors()->GetSize(); nProcessor < nProcessors; nProcessor++)
	{
		if ((pDatabaseOBProcessor = GetOBProcessors()->GetAt(nProcessor)) && !Save(pDatabaseOBProcessor)) break;
		continue;
	}
	return((nProcessor == nProcessors) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::SaveTCProcedures()
{
	INT  nProcedure;
	INT  nProcedures;
	CDatabaseTCProcedure  *pDatabaseTCProcedure;

	for (nProcedure = 0, nProcedures = (INT)GetTCProcedures()->GetSize(); nProcedure < nProcedures; nProcedure++)
	{
		if ((pDatabaseTCProcedure = GetTCProcedures()->GetAt(nProcedure)) && !Save(pDatabaseTCProcedure)) break;
		continue;
	}
	return((nProcedure == nProcedures) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::SaveTMParameters()
{
	INT  nTable[4];
	INT  nTables[4];
	INT  nGroup[2];
	INT  nGroups[2];
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;

	for (nParameter = 0, nParameters = (INT)GetTMParameters()->GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter = GetTMParameters()->GetAt(nParameter)) && !Save(pDatabaseTMParameter)) break;
		continue;
	}
	for (nTable[0] = 0, nTables[0] = (INT)GetTMNumCalTables()->GetSize(); nTable[0] < nTables[0]; nTable[0]++)
	{
		if ((pDatabaseTMNumCalTable = GetTMNumCalTables()->GetAt(nTable[0])) && !Save(pDatabaseTMNumCalTable)) break;
		continue;
	}
	for (nTable[1] = 0, nTables[1] = (INT)GetTMTxtCalTables()->GetSize(); nTable[1] < nTables[1]; nTable[1]++)
	{
		if ((pDatabaseTMTxtCalTable = GetTMTxtCalTables()->GetAt(nTable[1])) && !Save(pDatabaseTMTxtCalTable)) break;
		continue;
	}
	for (nTable[2] = 0, nTables[2] = (INT)GetTMNumOolTables()->GetSize(); nTable[2] < nTables[2]; nTable[2]++)
	{
		if ((pDatabaseTMNumOolTable = GetTMNumOolTables()->GetAt(nTable[2])) && !Save(pDatabaseTMNumOolTable)) break;
		continue;
	}
	for (nTable[3] = 0, nTables[3] = (INT)GetTMTxtOolTables()->GetSize(); nTable[3] < nTables[3]; nTable[3]++)
	{
		if ((pDatabaseTMTxtOolTable = GetTMTxtOolTables()->GetAt(nTable[3])) && !Save(pDatabaseTMTxtOolTable)) break;
		continue;
	}
	for (nGroup[0] = 0, nGroups[0] = (INT)GetTCPreExeGroups()->GetSize(); nGroup[0] < nGroups[0]; nGroup[0]++)
	{
		if ((pDatabaseTCPreExeGroup = GetTCPreExeGroups()->GetAt(nGroup[0])) && !Save(pDatabaseTCPreExeGroup)) break;
		continue;
	}
	for (nGroup[1] = 0, nGroups[1] = (INT)GetTCExeVerGroups()->GetSize(); nGroup[1] < nGroups[1]; nGroup[1]++)
	{
		if ((pDatabaseTCExeVerGroup = GetTCExeVerGroups()->GetAt(nGroup[1])) && !Save(pDatabaseTCExeVerGroup)) break;
		continue;
	}
	return((nParameter == nParameters  &&  nTable[0] == nTables[0] && nTable[1] == nTables[1] && nTable[2] == nTables[2] && nTable[3] == nTables[3] && nGroup[0] == nGroups[0] && nGroup[1] == nGroups[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::SaveTCParameters()
{
	INT  nTable[4];
	INT  nTables[4];
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;

	for (nParameter = 0, nParameters = (INT)GetTCParameters()->GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter = GetTCParameters()->GetAt(nParameter)) && !Save(pDatabaseTCParameter)) break;
		continue;
	}
	for (nTable[0] = 0, nTables[0] = (INT)GetTCNumCalTables()->GetSize(); nTable[0] < nTables[0]; nTable[0]++)
	{
		if ((pDatabaseTCNumCalTable = GetTCNumCalTables()->GetAt(nTable[0])) && !Save(pDatabaseTCNumCalTable)) break;
		continue;
	}
	for (nTable[1] = 0, nTables[1] = (INT)GetTCTxtCalTables()->GetSize(); nTable[1] < nTables[1]; nTable[1]++)
	{
		if ((pDatabaseTCTxtCalTable = GetTCTxtCalTables()->GetAt(nTable[1])) && !Save(pDatabaseTCTxtCalTable)) break;
		continue;
	}
	for (nTable[2] = 0, nTables[2] = (INT)GetTCNumOolTables()->GetSize(); nTable[2] < nTables[2]; nTable[2]++)
	{
		if ((pDatabaseTCNumOolTable = GetTCNumOolTables()->GetAt(nTable[2])) && !Save(pDatabaseTCNumOolTable)) break;
		continue;
	}
	for (nTable[3] = 0, nTables[3] = (INT)GetTCTxtOolTables()->GetSize(); nTable[3] < nTables[3]; nTable[3]++)
	{
		if ((pDatabaseTCTxtOolTable = GetTCTxtOolTables()->GetAt(nTable[3])) && !Save(pDatabaseTCTxtOolTable)) break;
		continue;
	}
	return((nParameter == nParameters  &&  nTable[0] == nTables[0] && nTable[1] == nTables[1] && nTable[2] == nTables[2] && nTable[3] == nTables[3]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::SaveANDs()
{
	INT  nLayout;
	INT  nLayouts;
	CANDLayout  *pLayout;

	for (nLayout = 0, nLayouts = (INT)GetANDs()->GetSize(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = GetANDs()->GetAt(nLayout)) && !Save(pLayout)) break;
		continue;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::SaveGRDs()
{
	INT  nLayout;
	INT  nLayouts;
	CGRDLayout  *pLayout;

	for (nLayout = 0, nLayouts = (INT)GetGRDs()->GetSize(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = GetGRDs()->GetAt(nLayout)) && !Save(pLayout)) break;
		continue;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::SaveMMDs()
{
	INT  nLayout;
	INT  nLayouts;
	CMMDLayout  cLayout;

	for (nLayout = 0, nLayouts = (INT)GetMMDs()->GetSize(); nLayout < nLayouts; nLayout++)
	{
		if (cLayout.Copy(GetMMDs()->GetAt(nLayout)) && !CBinaryDatabase::SaveMMD(cLayout)) break;
		continue;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::SavePODs()
{
	INT  nLayout;
	INT  nLayouts;
	CPODLayout  *pLayout;

	for (nLayout = 0, nLayouts = (INT)GetPODs()->GetSize(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = GetPODs()->GetAt(nLayout)) && !Save(pLayout)) break;
		continue;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::SaveScripts()
{
	INT  nLayout;
	INT  nLayouts;
	CAutomationScript  cScript;

	for (nLayout = 0, nLayouts = (INT)GetScripts()->GetSize(); nLayout < nLayouts; nLayout++)
	{
		if (cScript.Copy(GetScripts()->GetAt(nLayout)) && !CBinaryDatabase::SaveScript(cScript)) break;
		continue;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::LoadTMPackets()
{
	INT  nBit;
	INT  nByte;
	INT  nLength;
	BOOL  bSuccess;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTMPacketHeader  *pDatabaseTMPacketHeader;
	CDatabaseTMPacketStream  *pDatabaseTMPacketStream;
	CALTELDatabaseTMPacketsRecordset  cDatabaseTMPackets(this);
	CALTELDatabaseTMPacketHeadersRecordset  cDatabaseTMPacketHeaders(this);
	CALTELDatabaseTMPacketStreamsRecordset  cDatabaseTMPacketStreams(this);

	try
	{
		bSuccess = cDatabaseTMPacketHeaders.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_DFH_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMPacketHeaders.IsOpen())
	{
		for (GetTMPacketHeaders()->RemoveAll(); !cDatabaseTMPacketHeaders.IsBOF() && !cDatabaseTMPacketHeaders.IsEOF(); )
		{
			if ((pDatabaseTMPacketHeader = new CDatabaseTMPacketHeader))
			{
				pDatabaseTMPacketHeader->SetName(cDatabaseTMPacketHeaders.GetName());
				cDatabaseTMPacketHeaders.GetTMTypePosition(nByte, nBit, nLength);
				pDatabaseTMPacketHeader->SetTMTypePosition(nByte, nBit, nLength);
				cDatabaseTMPacketHeaders.GetTMIDPosition(nByte, nBit, nLength);
				pDatabaseTMPacketHeader->SetTMIDPosition(nByte, nBit, nLength);
				cDatabaseTMPacketHeaders.Get3DiscPosition(nByte, nBit, nLength);
				pDatabaseTMPacketHeader->Set3DiscPosition(nByte, nBit, nLength);
				cDatabaseTMPacketHeaders.GetTimestampPosition(nByte, nBit, nLength);
				pDatabaseTMPacketHeader->SetTimestampPosition(nByte, nBit, nLength);
				if (GetTMPacketHeaders()->Find(cDatabaseTMPacketHeaders.GetName()) < 0)
				{
					if (GetTMPacketHeaders()->Add(pDatabaseTMPacketHeader) >= 0)
					{
						try
						{
							cDatabaseTMPacketHeaders.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseTMPacketHeader;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTMPacketHeaders.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMPacketHeaders.Close();
	}
	try
	{
		bSuccess &= cDatabaseTMPackets.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PMF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMPackets.IsOpen())
	{
		for (GetTMPackets()->RemoveAll(); !cDatabaseTMPackets.IsBOF() && !cDatabaseTMPackets.IsEOF(); )
		{
			if ((pDatabaseTMPacket = new CDatabaseTMPacket))
			{
				pDatabaseTMPacket->SetTag(cDatabaseTMPackets.GetTag());
				pDatabaseTMPacket->SetDescription(cDatabaseTMPackets.GetDescription());
				pDatabaseTMPacket->SetDetails(cDatabaseTMPackets.GetDetails());
				pDatabaseTMPacket->SetDataFieldHeader(cDatabaseTMPackets.GetDataFieldHeader());
				pDatabaseTMPacket->SetAPID(cDatabaseTMPackets.GetAPID());
				pDatabaseTMPacket->SetTMID(cDatabaseTMPackets.GetTMID());
				pDatabaseTMPacket->SetTMType(cDatabaseTMPackets.GetTMType());
				pDatabaseTMPacket->Set3Disc(cDatabaseTMPackets.Get3Disc());
				pDatabaseTMPacket->SetDataSize(cDatabaseTMPackets.GetDataSize());
				pDatabaseTMPacket->SetTransmissionRate(cDatabaseTMPackets.GetTransmissionRate());
				pDatabaseTMPacket->SetTransmissionRetries(cDatabaseTMPackets.GetTransmissionRetries());
				pDatabaseTMPacket->SetVirtualChannel(cDatabaseTMPackets.GetVirtualChannel());
				pDatabaseTMPacket->SetEventIDParameter(cDatabaseTMPackets.GetEventIDParameter());
				pDatabaseTMPacket->SetStatus(cDatabaseTMPackets.GetStatus());
				if ((pDatabaseTMPacketHeader = GetTMPacketHeaders()->GetAt(GetTMPacketHeaders()->Find(cDatabaseTMPackets.GetDataFieldHeader()))))
				{
					pDatabaseTMPacketHeader->GetTMTypePosition(nByte, nBit, nLength);
					pDatabaseTMPacket->SetTMTypePosition(nByte, nBit, nLength);
					pDatabaseTMPacketHeader->GetTMIDPosition(nByte, nBit, nLength);
					pDatabaseTMPacket->SetTMIDPosition(nByte, nBit, nLength);
					pDatabaseTMPacketHeader->Get3DiscPosition(nByte, nBit, nLength);
					pDatabaseTMPacket->Set3DiscPosition(nByte, nBit, nLength);
					pDatabaseTMPacketHeader->GetTimestampPosition(nByte, nBit, nLength);
					pDatabaseTMPacket->SetTimestampPosition(nByte, nBit, nLength);
				}
				if (GetTMPackets()->Find(cDatabaseTMPackets.GetTag()) < 0)
				{
					if (GetTMPackets()->Add(pDatabaseTMPacket) >= 0)
					{
						try
						{
							cDatabaseTMPackets.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseTMPacket;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTMPackets.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMPackets.Close();
	}
	try
	{
		bSuccess &= cDatabaseTMPacketStreams.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_STR_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMPacketStreams.IsOpen())
	{
		for (GetTMPacketStreams()->RemoveAll(); !cDatabaseTMPacketStreams.IsBOF() && !cDatabaseTMPacketStreams.IsEOF(); )
		{
			if ((pDatabaseTMPacketStream = new CDatabaseTMPacketStream))
			{
				pDatabaseTMPacketStream->SetName(cDatabaseTMPacketStreams.GetName());
				pDatabaseTMPacketStream->SetAPID(cDatabaseTMPacketStreams.GetAPID());
				pDatabaseTMPacketStream->SetTMID(cDatabaseTMPacketStreams.GetTMID());
				pDatabaseTMPacketStream->SetPeriod(cDatabaseTMPacketStreams.GetPeriod());
				pDatabaseTMPacketStream->SetTimeout(cDatabaseTMPacketStreams.GetTimeout());
				pDatabaseTMPacketStream->SetValidityParameter(cDatabaseTMPacketStreams.GetValidityParameter());
				pDatabaseTMPacketStream->SetValidityValue((!cDatabaseTMPacketStreams.GetValidityParameter().IsEmpty()) ? 1 : -1);
				if (GetTMPacketStreams()->Find(cDatabaseTMPacketStreams.GetName()) < 0)
				{
					if (GetTMPacketStreams()->Add(pDatabaseTMPacketStream) >= 0)
					{
						try
						{
							cDatabaseTMPacketStreams.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseTMPacketStream;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTMPacketStreams.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMPacketStreams.Close();
	}
	return bSuccess;
}

BOOL CALTELDatabaseEngine::LoadTCPackets()
{
	BOOL  bSuccess;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CALTELDatabaseTCPacketsRecordset  cDatabaseTCPackets(this);

	try
	{
		bSuccess = cDatabaseTCPackets.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_TCP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCPackets.IsOpen())
	{
		for (GetTCPackets()->RemoveAll(); !cDatabaseTCPackets.IsBOF() && !cDatabaseTCPackets.IsEOF(); )
		{
			if ((pDatabaseTCPacket = new CDatabaseTCPacket))
			{
				pDatabaseTCPacket->SetTag(cDatabaseTCPackets.GetTag());
				pDatabaseTCPacket->SetDescription(cDatabaseTCPackets.GetDescription());
				pDatabaseTCPacket->SetDetails(cDatabaseTCPackets.GetDetails());
				pDatabaseTCPacket->SetAPID(cDatabaseTCPackets.GetAPID());
				pDatabaseTCPacket->SetDataSize(cDatabaseTCPackets.GetDataSize());
				pDatabaseTCPacket->SetDataFieldHeaderFlag(cDatabaseTCPackets.GetDataFieldHeaderFlag());
				pDatabaseTCPacket->SetStatus(cDatabaseTCPackets.GetStatus());
				if (GetTCPackets()->Find(cDatabaseTCPackets.GetTag()) < 0)
				{
					if (GetTCPackets()->Add(pDatabaseTCPacket) >= 0)
					{
						try
						{
							cDatabaseTCPackets.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseTCPacket;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTCPackets.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCPackets.Close();
	}
	return bSuccess;
}

BOOL CALTELDatabaseEngine::LoadTCFunctions()
{
	BOOL  bSuccess;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock;
	CDatabaseTCFunctionBlockElement  *pDatabaseTCFunctionBlockElement;
	CALTELDatabaseTCFunctionsRecordset  cDatabaseTCFunctions(this);
	CALTELDatabaseTCFunctionBlocksRecordset  cDatabaseTCFunctionBlocks(this);
	CALTELDatabaseTCFunctionBlockElementsRecordset  cDatabaseTCFunctionBlockElements(this);

	try
	{
		bSuccess = cDatabaseTCFunctions.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CCF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCFunctions.IsOpen())
	{
		for (GetTCFunctions()->RemoveAll(); !cDatabaseTCFunctions.IsBOF() && !cDatabaseTCFunctions.IsEOF(); )
		{
			if ((pDatabaseTCFunction = new CDatabaseTCFunction))
			{
				pDatabaseTCFunction->SetName(cDatabaseTCFunctions.GetName());
				pDatabaseTCFunction->SetDescription(cDatabaseTCFunctions.GetDescription());
				pDatabaseTCFunction->SetExtendedDescription(cDatabaseTCFunctions.GetExtendedDescription());
				pDatabaseTCFunction->SetDetails(cDatabaseTCFunctions.GetDetails());
				pDatabaseTCFunction->SetAttributes(cDatabaseTCFunctions.GetAttributes());
				pDatabaseTCFunction->SetTCPacket(cDatabaseTCFunctions.GetTCPacket());
				pDatabaseTCFunction->SetTCID(cDatabaseTCFunctions.GetTCID());
				pDatabaseTCFunction->SetDestinationSubSystem(cDatabaseTCFunctions.GetDestinationSubSystem());
				pDatabaseTCFunction->SetDestinationEquipment(cDatabaseTCFunctions.GetDestinationEquipment());
				pDatabaseTCFunction->SetRouterSubSystem(cDatabaseTCFunctions.GetRouterSubSystem());
				pDatabaseTCFunction->SetRouterEquipment(cDatabaseTCFunctions.GetRouterEquipment());
				pDatabaseTCFunction->SetOperationalInfo(cDatabaseTCFunctions.GetOperationalInfo());
				pDatabaseTCFunction->SetValidityConditions(cDatabaseTCFunctions.GetValidityConditions());
				pDatabaseTCFunction->SetAssociatedTelecommands(cDatabaseTCFunctions.GetAssociatedTelecommands());
				pDatabaseTCFunction->SetComplementaryTelecommands(cDatabaseTCFunctions.GetComplementaryTelecommands());
				pDatabaseTCFunction->SetDestinationSubSchedule(cDatabaseTCFunctions.GetDestinationSubSchedule());
				pDatabaseTCFunction->SetMissionPlannerEvent(cDatabaseTCFunctions.GetMissionPlannerEvent());
				pDatabaseTCFunction->SetPreExeGroup(cDatabaseTCFunctions.GetPreExeGroup());
				pDatabaseTCFunction->SetExeVerGroup(cDatabaseTCFunctions.GetExeVerGroup());
				pDatabaseTCFunction->SetStatus(cDatabaseTCFunctions.GetStatus());
				if (GetTCFunctions()->Find(cDatabaseTCFunctions.GetName()) < 0)
				{
					if (GetTCFunctions()->Add(pDatabaseTCFunction) >= 0)
					{
						try
						{
							cDatabaseTCFunctions.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseTCFunction;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTCFunctions.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCFunctions.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCFunctionBlocks.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_BCF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCFunctionBlocks.IsOpen())
	{
		for (GetTCFunctionBlocks()->RemoveAll(); !cDatabaseTCFunctionBlocks.IsBOF() && !cDatabaseTCFunctionBlocks.IsEOF(); )
		{
			if ((pDatabaseTCFunctionBlock = (GetTCFunctionBlocks()->Find(cDatabaseTCFunctionBlocks.GetName()) >= 0) ? GetTCFunctionBlocks()->GetAt(GetTCFunctionBlocks()->Find(cDatabaseTCFunctionBlocks.GetName())) : new CDatabaseTCFunctionBlock))
			{
				for (pDatabaseTCFunctionBlock->SetName(cDatabaseTCFunctionBlocks.GetName()), pDatabaseTCFunctionBlock->SetLocation(cDatabaseTCFunctionBlocks.GetAttributes(), cDatabaseTCFunctionBlocks.GetByteOffset(), cDatabaseTCFunctionBlocks.GetMaxLength()), pDatabaseTCFunctionBlock->SetStatus(cDatabaseTCFunctionBlocks.GetStatus()); GetTCFunctionBlocks()->Find(cDatabaseTCFunctionBlocks.GetName()) < 0 && GetTCFunctionBlocks()->Add(pDatabaseTCFunctionBlock) < 0; )
				{
					delete pDatabaseTCFunctionBlock;
					break;
				}
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTCFunctionBlocks.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCFunctionBlocks.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCFunctionBlockElements.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_BCCF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCFunctionBlockElements.IsOpen())
	{
		while (!cDatabaseTCFunctionBlockElements.IsBOF() && !cDatabaseTCFunctionBlockElements.IsEOF())
		{
			if ((pDatabaseTCFunctionBlock = GetTCFunctionBlocks()->GetAt(GetTCFunctionBlocks()->Find(cDatabaseTCFunctionBlockElements.GetFunction()))))
			{
				if ((pDatabaseTCFunctionBlockElement = new CDatabaseTCFunctionBlockElement))
				{
					pDatabaseTCFunctionBlockElement->SetName(cDatabaseTCFunctionBlockElements.GetName());
					pDatabaseTCFunctionBlockElement->SetAttributes(cDatabaseTCFunctionBlockElements.GetAttributes());
					if (pDatabaseTCFunctionBlock->Find(cDatabaseTCFunctionBlockElements.GetName()) < 0)
					{
						if (pDatabaseTCFunctionBlock->Add(pDatabaseTCFunctionBlockElement) >= 0)
						{
							try
							{
								cDatabaseTCFunctionBlockElements.MoveNext();
							}
							catch (CException *pException)
							{
								pException->Delete();
								bSuccess = FALSE;
								break;
							}
							continue;
						}
					}
					delete pDatabaseTCFunctionBlockElement;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTCFunctionBlockElements.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCFunctionBlockElements.Close();
	}
	return bSuccess;
}

BOOL CALTELDatabaseEngine::LoadTCSequences()
{
	INT  nEntry;
	INT  nEntries;
	INT  nSequence;
	INT  nSequences;
	BOOL  bSuccess;
	CDatabaseTCSequence  *pDatabaseTCSequence;
	CDatabaseTCSequenceEntry  *pDatabaseTCSequenceEntry;
	CALTELDatabaseTCSequencesRecordset  cDatabaseTCSequences(this);
	CALTELDatabaseTCSequenceEntriesRecordset  cDatabaseTCSequenceEntries(this);

	try
	{
		bSuccess = cDatabaseTCSequences.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CSF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCSequences.IsOpen())
	{
		for (GetTCSequences()->RemoveAll(); !cDatabaseTCSequences.IsBOF() && !cDatabaseTCSequences.IsEOF(); )
		{
			if ((pDatabaseTCSequence = new CDatabaseTCSequence))
			{
				pDatabaseTCSequence->SetName(cDatabaseTCSequences.GetName());
				pDatabaseTCSequence->SetDescription(cDatabaseTCSequences.GetDescription());
				pDatabaseTCSequence->SetUser(cDatabaseTCSequences.GetUser());
				pDatabaseTCSequence->SetDate(cDatabaseTCSequences.GetDate());
				pDatabaseTCSequence->SetDestinationSubSchedule(cDatabaseTCSequences.GetDestinationSubSchedule());
				pDatabaseTCSequence->SetMissionPlannerEvent(cDatabaseTCSequences.GetMissionPlannerEvent());
				pDatabaseTCSequence->SetDocumentName(cDatabaseTCSequences.GetDocumentName());
				pDatabaseTCSequence->SetDocumentIssue(cDatabaseTCSequences.GetDocumentIssue());
				pDatabaseTCSequence->SetDocumentDate(cDatabaseTCSequences.GetDocumentDate());
				pDatabaseTCSequence->SetStatus(cDatabaseTCSequences.GetStatus());
				if (GetTCSequences()->Find(cDatabaseTCSequences.GetName()) < 0)
				{
					if (GetTCSequences()->Add(pDatabaseTCSequence) >= 0)
					{
						try
						{
							cDatabaseTCSequences.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseTCSequence;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTCSequences.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCSequences.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCSequenceEntries.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CSS_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCSequenceEntries.IsOpen())
	{
		while (!cDatabaseTCSequenceEntries.IsBOF() && !cDatabaseTCSequenceEntries.IsEOF())
		{
			if ((pDatabaseTCSequence = GetTCSequences()->GetAt(GetTCSequences()->Find(cDatabaseTCSequenceEntries.GetSequence()))))
			{
				if ((pDatabaseTCSequenceEntry = new CDatabaseTCSequenceEntry))
				{
					pDatabaseTCSequenceEntry->SetName(cDatabaseTCSequenceEntries.GetName());
					pDatabaseTCSequenceEntry->SetDescription(cDatabaseTCSequenceEntries.GetDescription());
					pDatabaseTCSequenceEntry->SetAttributes(cDatabaseTCSequenceEntries.GetAttributes());
					pDatabaseTCSequenceEntry->SetAssociated1Step(cDatabaseTCSequenceEntries.GetAssociated1Step());
					pDatabaseTCSequenceEntry->SetBlockMembership(cDatabaseTCSequenceEntries.GetBlockMembership());
					pDatabaseTCSequenceEntry->SetReleaseDeltaTime(cDatabaseTCSequenceEntries.GetReleaseDeltaTime());
					pDatabaseTCSequenceEntry->SetExecutionTime(cDatabaseTCSequenceEntries.GetExecutionTime());
					pDatabaseTCSequenceEntry->SetExecutionDeltaTime(cDatabaseTCSequenceEntries.GetExecutionDeltaTime(), cDatabaseTCSequenceEntries.IsEarlierExecutionDeltaTime());
					for (nEntry = cDatabaseTCSequenceEntries.GetEntry(); pDatabaseTCSequence->GetAt(nEntry - 1); )
					{
						delete pDatabaseTCSequence->GetAt(nEntry - 1);
						break;
					}
					pDatabaseTCSequence->SetAtGrow(nEntry - 1, pDatabaseTCSequenceEntry);
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTCSequenceEntries.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCSequenceEntries.Close();
	}
	for (nSequence = 0, nSequences = (INT)GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
	{
		if ((pDatabaseTCSequence = GetTCSequences()->GetAt(nSequence)) != (CDatabaseTCSequence *)NULL)
		{
			for (nEntry = 0, nEntries = (INT)pDatabaseTCSequence->GetSize(); nEntry < nEntries; nEntry++)
			{
				if ((pDatabaseTCSequenceEntry = (!pDatabaseTCSequence->GetAt(nEntry)) ? new CDatabaseTCSequenceEntry : (CDatabaseTCSequenceEntry *)NULL))
				{
					pDatabaseTCSequence->SetAt(nEntry, pDatabaseTCSequenceEntry);
					continue;
				}
			}
		}
	}
	return bSuccess;
}

BOOL CALTELDatabaseEngine::LoadOBProcessors()
{
	INT  nProcessor;
	INT  nProcessors;
	INT  nMemoryArea;
	INT  nMemoryAreas;
	BOOL  bSuccess;
	UINT  nAddress[2][3];
	CDatabaseOBProcessor  *pDatabaseOBProcessor;
	CDatabaseOBProcessorMemoryArea  *pDatabaseOBProcessorMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;
	CDatabaseOBProcessorMemoryAreaBlock  *pDatabaseOBProcessorMemoryAreaBlock;
	CDatabaseOBProcessorMemoryImageBlock  *pDatabaseOBProcessorMemoryImageBlock;
	CDatabaseOBProcessorMemoryAreaCheckSum  *pDatabaseOBProcessorMemoryAreaCheckSum;
	CDatabaseOBProcessorMemoryAreaCatalogue  *pDatabaseOBProcessorMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pDatabaseOBProcessorMemoryAreaCatalogueEntry;
	CALTELDatabaseOBProcessorsRecordset  cDatabaseOBProcessors(this);
	CALTELDatabaseOBProcessorMemoryAreasRecordset  cDatabaseOBProcessorMemoryAreas(this);
	CALTELDatabaseOBProcessorMemoryImagesRecordset  cDatabaseOBProcessorMemoryImages(this);
	CALTELDatabaseOBProcessorMemoryAreaBlocksRecordset  cDatabaseOBProcessorMemoryAreaBlocks(this);
	CALTELDatabaseOBProcessorMemoryAreaCheckSumsRecordset  cDatabaseOBProcessorMemoryAreaCheckSums(this);
	CALTELDatabaseOBProcessorMemoryAreaCataloguesRecordset  cDatabaseOBProcessorMemoryAreaCatalogues(this);

	try
	{
		bSuccess = cDatabaseOBProcessors.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_GEN_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseOBProcessors.IsOpen())
	{
		for (GetOBProcessors()->RemoveAll(); !cDatabaseOBProcessors.IsBOF() && !cDatabaseOBProcessors.IsEOF(); )
		{
			if ((pDatabaseOBProcessor = new CDatabaseOBProcessor))
			{
				pDatabaseOBProcessor->SetName(cDatabaseOBProcessors.GetName());
				pDatabaseOBProcessor->SetPatchCommand(cDatabaseOBProcessors.GetPatchCommand());
				pDatabaseOBProcessor->SetDumpCommand(cDatabaseOBProcessors.GetDumpCommand());
				pDatabaseOBProcessor->SetDumpPacket(cDatabaseOBProcessors.GetDumpPacket());
				pDatabaseOBProcessor->SetDumpInterval(cDatabaseOBProcessors.GetDumpInterval());
				pDatabaseOBProcessor->SetDumpCount(cDatabaseOBProcessors.GetDumpCount());
				pDatabaseOBProcessor->SetMasterImage(cDatabaseOBProcessors.GetMasterImage());
				pDatabaseOBProcessor->SetStatus(cDatabaseOBProcessors.GetStatus());
				if (cDatabaseOBProcessors.GetAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1]))
				{
					pDatabaseOBProcessor->SetAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1]);
					pDatabaseOBProcessor->SetDetails(TranslateOBProcessorAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1]));
				}
				if (GetOBProcessors()->Find(cDatabaseOBProcessors.GetName()) < 0)
				{
					if (GetOBProcessors()->Add(pDatabaseOBProcessor) >= 0)
					{
						try
						{
							cDatabaseOBProcessors.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseOBProcessor;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseOBProcessors.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseOBProcessors.Close();
	}
	try
	{
		bSuccess &= cDatabaseOBProcessorMemoryAreas.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_MAD_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseOBProcessorMemoryAreas.IsOpen())
	{
		while (!cDatabaseOBProcessorMemoryAreas.IsBOF() && !cDatabaseOBProcessorMemoryAreas.IsEOF())
		{
			if ((pDatabaseOBProcessor = GetOBProcessors()->GetAt(GetOBProcessors()->Find(cDatabaseOBProcessorMemoryAreas.GetProcessor()))))
			{
				if ((pDatabaseOBProcessorMemoryArea = new CDatabaseOBProcessorMemoryArea))
				{
					pDatabaseOBProcessorMemoryArea->SetName(cDatabaseOBProcessorMemoryAreas.GetName());
					pDatabaseOBProcessorMemoryArea->SetDescription(cDatabaseOBProcessorMemoryAreas.GetDescription());
					pDatabaseOBProcessorMemoryArea->SetPatchCommand(cDatabaseOBProcessorMemoryAreas.GetPatchCommand());
					pDatabaseOBProcessorMemoryArea->SetDumpCommand(cDatabaseOBProcessorMemoryAreas.GetDumpCommand());
					pDatabaseOBProcessorMemoryArea->SetDumpPacket(cDatabaseOBProcessorMemoryAreas.GetDumpPacket());
					pDatabaseOBProcessorMemoryArea->SetAttributes(cDatabaseOBProcessorMemoryAreas.GetAttributes());
					if ((pDatabaseOBProcessorMemoryAreaCheckSum = new CDatabaseOBProcessorMemoryAreaCheckSum))
					{
						pDatabaseOBProcessorMemoryAreaCheckSum->SetDestination(-1);
						pDatabaseOBProcessorMemoryAreaCheckSum->SetSeed(-1);
						pDatabaseOBProcessorMemoryArea->SetCheckSum(pDatabaseOBProcessorMemoryAreaCheckSum);
						delete pDatabaseOBProcessorMemoryAreaCheckSum;
					}
					if (pDatabaseOBProcessor->Add(pDatabaseOBProcessorMemoryArea) >= 0)
					{
						try
						{
							cDatabaseOBProcessorMemoryAreas.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
					delete pDatabaseOBProcessorMemoryArea;
				}
			}
			try
			{
				cDatabaseOBProcessorMemoryAreas.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseOBProcessorMemoryAreas.Close();
	}
	try
	{
		bSuccess &= cDatabaseOBProcessorMemoryAreaBlocks.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_MEM_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseOBProcessorMemoryAreaBlocks.IsOpen())
	{
		while (!cDatabaseOBProcessorMemoryAreaBlocks.IsBOF() && !cDatabaseOBProcessorMemoryAreaBlocks.IsEOF())
		{
			for (nProcessor = 0, nProcessors = (INT)GetOBProcessors()->GetSize(); nProcessor < nProcessors; nProcessor++)
			{
				if ((pDatabaseOBProcessor = GetOBProcessors()->GetAt(nProcessor)) != (CDatabaseOBProcessor *)NULL)
				{
					if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(pDatabaseOBProcessor->Find(cDatabaseOBProcessorMemoryAreaBlocks.GetName()))))
					{
						if ((pDatabaseOBProcessorMemoryAreaBlock = new CDatabaseOBProcessorMemoryAreaBlock))
						{
							pDatabaseOBProcessorMemoryAreaBlock->SetDescription(cDatabaseOBProcessorMemoryAreaBlocks.GetDescription());
							pDatabaseOBProcessorMemoryAreaBlock->SetTMParameter(cDatabaseOBProcessorMemoryAreaBlocks.GetTMParameter());
							pDatabaseOBProcessorMemoryAreaBlock->SetTCParameter(cDatabaseOBProcessorMemoryAreaBlocks.GetTCParameter());
							for (pDatabaseOBProcessorMemoryAreaBlock->SetBitOffset(cDatabaseOBProcessorMemoryAreaBlocks.GetBitOffset()), pDatabaseOBProcessorMemoryAreaBlock->SetBitWidth(cDatabaseOBProcessorMemoryAreaBlocks.GetBitWidth()); cDatabaseOBProcessorMemoryAreaBlocks.GetAddress(nAddress[0][0], nAddress[0][1]); )
							{
								pDatabaseOBProcessorMemoryAreaBlock->SetAddress(nAddress[0][0], nAddress[0][1]);
								break;
							}
							if (pDatabaseOBProcessorMemoryArea->Add(pDatabaseOBProcessorMemoryAreaBlock) >= 0) continue;
							delete pDatabaseOBProcessorMemoryAreaBlock;
						}
					}
				}
			}
			try
			{
				cDatabaseOBProcessorMemoryAreaBlocks.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseOBProcessorMemoryAreaBlocks.Close();
	}
	try
	{
		bSuccess &= cDatabaseOBProcessorMemoryAreaCheckSums.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CRC_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseOBProcessorMemoryAreaCheckSums.IsOpen())
	{
		while (!cDatabaseOBProcessorMemoryAreaCheckSums.IsBOF() && !cDatabaseOBProcessorMemoryAreaCheckSums.IsEOF())
		{
			for (nProcessor = 0, nProcessors = (INT)GetOBProcessors()->GetSize(); nProcessor < nProcessors; nProcessor++)
			{
				if ((pDatabaseOBProcessor = GetOBProcessors()->GetAt(nProcessor)) != (CDatabaseOBProcessor *)NULL)
				{
					if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(pDatabaseOBProcessor->Find(cDatabaseOBProcessorMemoryAreaCheckSums.GetName()))))
					{
						if ((pDatabaseOBProcessorMemoryAreaCheckSum = new CDatabaseOBProcessorMemoryAreaCheckSum))
						{
							pDatabaseOBProcessorMemoryAreaCheckSum->SetSeed(cDatabaseOBProcessorMemoryAreaCheckSums.GetSeed());
							pDatabaseOBProcessorMemoryAreaCheckSum->SetLength(cDatabaseOBProcessorMemoryAreaCheckSums.GetLength());
							pDatabaseOBProcessorMemoryAreaCheckSum->SetDestination(cDatabaseOBProcessorMemoryAreaCheckSums.GetDestination());
							for (nAddress[0][0] = nAddress[0][1] = nAddress[0][2] = 0; cDatabaseOBProcessorMemoryAreaCheckSums.GetAddressRange(nAddress[0][0], nAddress[0][1], nAddress[0][2]); )
							{
								pDatabaseOBProcessorMemoryAreaCheckSum->SetAddressRange(nAddress[0][0], nAddress[0][1], nAddress[0][2]);
								break;
							}
							pDatabaseOBProcessorMemoryArea->SetCheckSum(pDatabaseOBProcessorMemoryAreaCheckSum);
							delete pDatabaseOBProcessorMemoryAreaCheckSum;
							continue;
						}
					}
				}
			}
			try
			{
				cDatabaseOBProcessorMemoryAreaCheckSums.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseOBProcessorMemoryAreaCheckSums.Close();
	}
	try
	{
		bSuccess &= cDatabaseOBProcessorMemoryAreaCatalogues.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CAT_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseOBProcessorMemoryAreaCatalogues.IsOpen())
	{
		while (!cDatabaseOBProcessorMemoryAreaCatalogues.IsBOF() && !cDatabaseOBProcessorMemoryAreaCatalogues.IsEOF())
		{
			for (nProcessor = 0, nProcessors = (INT)GetOBProcessors()->GetSize(); nProcessor < nProcessors; nProcessor++)
			{
				if ((pDatabaseOBProcessor = GetOBProcessors()->GetAt(nProcessor)) != (CDatabaseOBProcessor *)NULL)
				{
					if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(pDatabaseOBProcessor->Find(cDatabaseOBProcessorMemoryAreaCatalogues.GetName()))))
					{
						if ((pDatabaseOBProcessorMemoryAreaCatalogue = new CDatabaseOBProcessorMemoryAreaCatalogue))
						{
							if (pDatabaseOBProcessorMemoryArea->GetCatalogue(pDatabaseOBProcessorMemoryAreaCatalogue))
							{
								if ((pDatabaseOBProcessorMemoryAreaCatalogueEntry = new CDatabaseOBProcessorMemoryAreaCatalogueEntry))
								{
									pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetName(cDatabaseOBProcessorMemoryAreaCatalogues.GetID());
									pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetDescription(cDatabaseOBProcessorMemoryAreaCatalogues.GetDescription());
									pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetAttributes(cDatabaseOBProcessorMemoryAreaCatalogues.GetAttributes());
									pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetLocation(cDatabaseOBProcessorMemoryAreaCatalogues.GetLocation());
									pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetVersion(cDatabaseOBProcessorMemoryAreaCatalogues.GetVersion());
									pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetDate(cDatabaseOBProcessorMemoryAreaCatalogues.GetDate());
									pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetTime(cDatabaseOBProcessorMemoryAreaCatalogues.GetTime());
									if (pDatabaseOBProcessorMemoryAreaCatalogue->Add(pDatabaseOBProcessorMemoryAreaCatalogueEntry) >= 0)
									{
										pDatabaseOBProcessorMemoryArea->SetCatalogue(pDatabaseOBProcessorMemoryAreaCatalogue);
										delete pDatabaseOBProcessorMemoryAreaCatalogue;
										continue;
									}
									delete pDatabaseOBProcessorMemoryAreaCatalogueEntry;
								}
							}
							delete pDatabaseOBProcessorMemoryAreaCatalogue;
						}
					}
				}
			}
			try
			{
				cDatabaseOBProcessorMemoryAreaCatalogues.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseOBProcessorMemoryAreaCatalogues.Close();
	}
	try
	{
		bSuccess &= cDatabaseOBProcessorMemoryImages.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_IMG_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseOBProcessorMemoryImages.IsOpen())
	{
		while (!cDatabaseOBProcessorMemoryImages.IsBOF() && !cDatabaseOBProcessorMemoryImages.IsEOF())
		{
			if (GetOBProcessorMemoryImages()->Find(cDatabaseOBProcessorMemoryImages.GetName()) < 0)
			{
				if ((pDatabaseOBProcessorMemoryImage = new CDatabaseOBProcessorMemoryImage))
				{
					for (pDatabaseOBProcessorMemoryImage->SetName(cDatabaseOBProcessorMemoryImages.GetName()); GetOBProcessorMemoryImages()->Add(pDatabaseOBProcessorMemoryImage) < 0; )
					{
						delete pDatabaseOBProcessorMemoryImage;
						break;
					}
				}
			}
			if ((pDatabaseOBProcessorMemoryImage = GetOBProcessorMemoryImages()->GetAt(GetOBProcessorMemoryImages()->Find(cDatabaseOBProcessorMemoryImages.GetName()))))
			{
				if ((pDatabaseOBProcessorMemoryImageBlock = new CDatabaseOBProcessorMemoryImageBlock) != (CDatabaseOBProcessorMemoryImageBlock *)NULL)
				{
					for (pDatabaseOBProcessorMemoryImageBlock->SetVersion(cDatabaseOBProcessorMemoryImages.GetVersion()), pDatabaseOBProcessorMemoryImageBlock->SetData(cDatabaseOBProcessorMemoryImages.GetData()); cDatabaseOBProcessorMemoryImages.GetAddress(nAddress[0][0], nAddress[0][1]); )
					{
						pDatabaseOBProcessorMemoryImageBlock->SetAddress(nAddress[0][0], nAddress[0][1]);
						break;
					}
					if (pDatabaseOBProcessorMemoryImage->Add(pDatabaseOBProcessorMemoryImageBlock) >= 0)
					{
						try
						{
							cDatabaseOBProcessorMemoryImages.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
					delete pDatabaseOBProcessorMemoryImageBlock;
				}
			}
			try
			{
				cDatabaseOBProcessorMemoryImages.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		for (nProcessor = 0, nProcessors = (INT)GetOBProcessors()->GetSize(); nProcessor < nProcessors; nProcessor++)
		{
			if ((pDatabaseOBProcessor = GetOBProcessors()->GetAt(nProcessor)) != (CDatabaseOBProcessor *)NULL)
			{
				for (nMemoryArea = 0, nMemoryAreas = (INT)pDatabaseOBProcessor->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
				{
					if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nMemoryArea)) != (CDatabaseOBProcessorMemoryArea *)NULL)
					{
						if ((pDatabaseOBProcessorMemoryImage = (pDatabaseOBProcessorMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_IMAGE) ? GetOBProcessorMemoryImages()->GetAt(GetOBProcessorMemoryImages()->Find(pDatabaseOBProcessorMemoryArea->GetName())) : (CDatabaseOBProcessorMemoryImage *)NULL))
						{
							pDatabaseOBProcessorMemoryArea->SetMemoryImage(pDatabaseOBProcessorMemoryImage);
							continue;
						}
					}
				}
			}
		}
		cDatabaseOBProcessorMemoryImages.Close();
	}
	return bSuccess;
}

BOOL CALTELDatabaseEngine::LoadTCProcedures()
{
	return CBinaryDatabase::Load(DATABASE_COMPONENT_TCPROCEDURE, TRUE);
}

BOOL CALTELDatabaseEngine::LoadTMParameters()
{
	BOOL  bSuccess;
	CStringArray  szCalTables[2];
	CStringArray  szOolTables[2];
	CLongUIntArray  nCalTableValues;
	CLongUIntArray  nOolTableValues;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMNumCalPoint  *pDatabaseTMNumCalPoint;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMNumOolLimit  *pDatabaseTMNumOolLimit;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;
	CDatabaseTMTxtOolLimit  *pDatabaseTMTxtOolLimit;
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;
	CDatabaseTMPacketParameter  *pDatabaseTMPacketParameter;
	CDatabaseTCPreExeGroupParameter  *pDatabaseTCPreExeGroupParameter;
	CDatabaseTCExeVerGroupParameter  *pDatabaseTCExeVerGroupParameter;
	CALTELDatabaseTMParametersRecordset  cDatabaseTMParameters(this);
	CALTELDatabaseTMNumCalTablesRecordset  cDatabaseTMNumCalTables(this);
	CALTELDatabaseTMTxtCalTablesRecordset  cDatabaseTMTxtCalTables(this);
	CALTELDatabaseTMNumOolTablesRecordset  cDatabaseTMNumOolTables(this);
	CALTELDatabaseTMTxtOolTablesRecordset  cDatabaseTMTxtOolTables(this);
	CALTELDatabaseTMNumCalTablePointsRecordset  cDatabaseTMNumCalTablePoints(this);
	CALTELDatabaseTMTxtCalTablePointsRecordset  cDatabaseTMTxtCalTablePoints(this);
	CALTELDatabaseTMNumOolTableLimitsRecordset  cDatabaseTMNumOolTableLimits(this);
	CALTELDatabaseTMTxtOolTableLimitsRecordset  cDatabaseTMTxtOolTableLimits(this);
	CALTELDatabaseTMNumCalTableAssociationsRecordset  cDatabaseTMNumCalTableAssociations(this);
	CALTELDatabaseTMTxtCalTableAssociationsRecordset  cDatabaseTMTxtCalTableAssociations(this);
	CALTELDatabaseTMNumOolTableAssociationsRecordset  cDatabaseTMNumOolTableAssociations(this);
	CALTELDatabaseTMTxtOolTableAssociationsRecordset  cDatabaseTMTxtOolTableAssociations(this);
	CALTELDatabaseTMPacketParametersRecordset  cDatabaseTMPacketParameters(this);
	CALTELDatabaseTCPreExeGroupsRecordset  cDatabaseTCPreExeGroups(this);
	CALTELDatabaseTCExeVerGroupsRecordset  cDatabaseTCExeVerGroups(this);
	CALTELDatabaseTCPreExeGroupParametersRecordset  cDatabaseTCPreExeGroupParameters(this);
	CALTELDatabaseTCExeVerGroupParametersRecordset  cDatabaseTCExeVerGroupParameters(this);

	try
	{
		bSuccess = cDatabaseTMParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PCF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMParameters.IsOpen())
	{
		for (GetTMParameters()->RemoveAll(); !cDatabaseTMParameters.IsBOF() && !cDatabaseTMParameters.IsEOF(); )
		{
			if ((pDatabaseTMParameter = new CDatabaseTMParameter))
			{
				pDatabaseTMParameter->SetTag(cDatabaseTMParameters.GetTag());
				pDatabaseTMParameter->SetDescription(cDatabaseTMParameters.GetDescription());
				pDatabaseTMParameter->SetDetails(cDatabaseTMParameters.GetDetails());
				pDatabaseTMParameter->SetUnit(cDatabaseTMParameters.GetUnit());
				pDatabaseTMParameter->SetWidth(cDatabaseTMParameters.GetBitWidth());
				pDatabaseTMParameter->SetAttributes(cDatabaseTMParameters.GetAttributes());
				pDatabaseTMParameter->SetConstValueAsText(cDatabaseTMParameters.GetConstValue());
				pDatabaseTMParameter->SetRelatedParameter(cDatabaseTMParameters.GetRelatedParameter());
				pDatabaseTMParameter->SetValidityParameter(cDatabaseTMParameters.GetValidityParameter());
				pDatabaseTMParameter->SetValidityValue((!cDatabaseTMParameters.GetValidityParameter().IsEmpty()) ? 1 : -1);
				pDatabaseTMParameter->SetTriggerExpression(cDatabaseTMParameters.GetTriggerExpression());
				pDatabaseTMParameter->SetDerivationExpression(cDatabaseTMParameters.GetDerivationExpression());
				pDatabaseTMParameter->SetSourceSubSystem(cDatabaseTMParameters.GetSourceSubSystem());
				pDatabaseTMParameter->SetSourceEquipment(cDatabaseTMParameters.GetSourceEquipment());
				pDatabaseTMParameter->SetRouterSubSystem(cDatabaseTMParameters.GetRouterSubSystem());
				pDatabaseTMParameter->SetRouterEquipment(cDatabaseTMParameters.GetRouterEquipment());
				pDatabaseTMParameter->SetOperationalInfo(cDatabaseTMParameters.GetOperationalInfo());
				pDatabaseTMParameter->SetDangerConditions(cDatabaseTMParameters.GetDangerConditions());
				pDatabaseTMParameter->SetValidityConditions(cDatabaseTMParameters.GetValidityConditions());
				pDatabaseTMParameter->SetAssociatedTelecommands(cDatabaseTMParameters.GetAssociatedTelecommands());
				pDatabaseTMParameter->SetInterrogationInstruction(cDatabaseTMParameters.GetInterrogationInstruction());
				pDatabaseTMParameter->SetStatus(cDatabaseTMParameters.GetStatus());
				if (GetTMParameters()->Find(cDatabaseTMParameters.GetTag()) < 0)
				{
					if (GetTMParameters()->Add(pDatabaseTMParameter) >= 0)
					{
						try
						{
							cDatabaseTMParameters.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseTMParameter;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTMParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMParameters.Close();
	}
	try
	{
		bSuccess &= cDatabaseTMNumCalTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CAL_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMNumCalTables.IsOpen())
	{
		for (GetTMNumCalTables()->RemoveAll(); !cDatabaseTMNumCalTables.IsBOF() && !cDatabaseTMNumCalTables.IsEOF(); )
		{
			if ((pDatabaseTMNumCalTable = new CDatabaseTMNumCalTable))
			{
				pDatabaseTMNumCalTable->SetName(cDatabaseTMNumCalTables.GetName());
				pDatabaseTMNumCalTable->SetDescription(cDatabaseTMNumCalTables.GetDescription());
				pDatabaseTMNumCalTable->SetUnit(cDatabaseTMNumCalTables.GetUnit());
				pDatabaseTMNumCalTable->SetPoints(cDatabaseTMNumCalTables.GetPoints());
				pDatabaseTMNumCalTable->SetStatus(cDatabaseTMNumCalTables.GetStatus());
				if (GetTMNumCalTables()->Find(cDatabaseTMNumCalTables.GetName()) < 0)
				{
					if (GetTMNumCalTables()->Add(pDatabaseTMNumCalTable) >= 0)
					{
						try
						{
							cDatabaseTMNumCalTables.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseTMNumCalTable;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTMNumCalTables.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMNumCalTables.Close();
	}
	try
	{
		bSuccess &= cDatabaseTMNumCalTablePoints.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CALP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMNumCalTablePoints.IsOpen())
	{
		while (!cDatabaseTMNumCalTablePoints.IsBOF() && !cDatabaseTMNumCalTablePoints.IsEOF())
		{
			if ((pDatabaseTMNumCalTable = GetTMNumCalTables()->GetAt(GetTMNumCalTables()->Find(cDatabaseTMNumCalTablePoints.GetName()))))
			{
				if ((pDatabaseTMNumCalPoint = new CDatabaseTMNumCalPoint) != (CDatabaseTMNumCalPoint *)NULL)
				{
					pDatabaseTMNumCalPoint->SetPoint(cDatabaseTMNumCalTablePoints.GetX(), cDatabaseTMNumCalTablePoints.GetY());
					if (pDatabaseTMNumCalTable->Find(cDatabaseTMNumCalTablePoints.GetX()) < 0)
					{
						if (pDatabaseTMNumCalTable->Add(pDatabaseTMNumCalPoint) >= 0)
						{
							try
							{
								cDatabaseTMNumCalTablePoints.MoveNext();
							}
							catch (CException *pException)
							{
								pException->Delete();
								bSuccess = FALSE;
								break;
							}
							continue;
						}
					}
					delete pDatabaseTMNumCalPoint;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTMNumCalTablePoints.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMNumCalTablePoints.Close();
	}
	try
	{
		bSuccess &= cDatabaseTMNumCalTableAssociations.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PCAL_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMNumCalTableAssociations.IsOpen())
	{
		while (!cDatabaseTMNumCalTableAssociations.IsBOF() && !cDatabaseTMNumCalTableAssociations.IsEOF())
		{
			if ((pDatabaseTMParameter = GetTMParameters()->GetAt(GetTMParameters()->Find(cDatabaseTMNumCalTableAssociations.GetParameter()))))
			{
				if (pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1], nCalTableValues) >= 0)
				{
					szCalTables[0].Add(cDatabaseTMNumCalTableAssociations.GetName());
					szCalTables[1].Add(cDatabaseTMNumCalTableAssociations.GetValidityParameter());
					nCalTableValues.Add((!cDatabaseTMNumCalTableAssociations.GetValidityParameter().IsEmpty()) ? 1 : -1);
					pDatabaseTMParameter->SetCalTables(szCalTables[0], szCalTables[1], nCalTableValues);
				}
			}
			try
			{
				cDatabaseTMNumCalTableAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMNumCalTableAssociations.Close();
	}
	try
	{
		bSuccess &= cDatabaseTMTxtCalTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_TXF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMTxtCalTables.IsOpen())
	{
		for (GetTMTxtCalTables()->RemoveAll(); !cDatabaseTMTxtCalTables.IsBOF() && !cDatabaseTMTxtCalTables.IsEOF(); )
		{
			if ((pDatabaseTMTxtCalTable = new CDatabaseTMTxtCalTable))
			{
				pDatabaseTMTxtCalTable->SetName(cDatabaseTMTxtCalTables.GetName());
				pDatabaseTMTxtCalTable->SetDescription(cDatabaseTMTxtCalTables.GetDescription());
				pDatabaseTMTxtCalTable->SetPoints(cDatabaseTMTxtCalTables.GetPoints());
				pDatabaseTMTxtCalTable->SetStatus(cDatabaseTMTxtCalTables.GetStatus());
				if (GetTMTxtCalTables()->Find(cDatabaseTMTxtCalTables.GetName()) < 0)
				{
					if (GetTMTxtCalTables()->Add(pDatabaseTMTxtCalTable) >= 0)
					{
						try
						{
							cDatabaseTMTxtCalTables.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseTMTxtCalTable;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTMTxtCalTables.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMTxtCalTables.Close();
	}
	try
	{
		bSuccess &= cDatabaseTMTxtCalTablePoints.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_TXFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMTxtCalTablePoints.IsOpen())
	{
		while (!cDatabaseTMTxtCalTablePoints.IsBOF() && !cDatabaseTMTxtCalTablePoints.IsEOF())
		{
			if ((pDatabaseTMTxtCalTable = GetTMTxtCalTables()->GetAt(GetTMTxtCalTables()->Find(cDatabaseTMTxtCalTablePoints.GetName()))))
			{
				if ((pDatabaseTMTxtCalPoint = new CDatabaseTMTxtCalPoint) != (CDatabaseTMTxtCalPoint *)NULL)
				{
					if (cDatabaseTMTxtCalTablePoints.GetX1() == cDatabaseTMTxtCalTablePoints.GetX2()) pDatabaseTMTxtCalPoint->SetPoint(cDatabaseTMTxtCalTablePoints.GetX1(), cDatabaseTMTxtCalTablePoints.GetText());
					if (cDatabaseTMTxtCalTablePoints.GetX1() != cDatabaseTMTxtCalTablePoints.GetX2()) pDatabaseTMTxtCalPoint->SetRange(cDatabaseTMTxtCalTablePoints.GetX1(), cDatabaseTMTxtCalTablePoints.GetX2(), cDatabaseTMTxtCalTablePoints.GetText());
					if (pDatabaseTMTxtCalTable->Find(cDatabaseTMTxtCalTablePoints.GetX1()) < 0)
					{
						if (pDatabaseTMTxtCalTable->Add(pDatabaseTMTxtCalPoint) >= 0)
						{
							try
							{
								cDatabaseTMTxtCalTablePoints.MoveNext();
							}
							catch (CException *pException)
							{
								pException->Delete();
								bSuccess = FALSE;
								break;
							}
							continue;
						}
					}
					delete pDatabaseTMTxtCalPoint;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTMTxtCalTablePoints.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMTxtCalTablePoints.Close();
	}
	try
	{
		bSuccess &= cDatabaseTMTxtCalTableAssociations.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PTXF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMTxtCalTableAssociations.IsOpen())
	{
		while (!cDatabaseTMTxtCalTableAssociations.IsBOF() && !cDatabaseTMTxtCalTableAssociations.IsEOF())
		{
			if ((pDatabaseTMParameter = GetTMParameters()->GetAt(GetTMParameters()->Find(cDatabaseTMTxtCalTableAssociations.GetParameter()))))
			{
				if (pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1], nCalTableValues) >= 0)
				{
					szCalTables[0].Add(cDatabaseTMTxtCalTableAssociations.GetName());
					szCalTables[1].Add(cDatabaseTMTxtCalTableAssociations.GetValidityParameter());
					nCalTableValues.Add((!cDatabaseTMTxtCalTableAssociations.GetValidityParameter().IsEmpty()) ? 1 : -1);
					pDatabaseTMParameter->SetCalTables(szCalTables[0], szCalTables[1], nCalTableValues);
				}
			}
			try
			{
				cDatabaseTMTxtCalTableAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMTxtCalTableAssociations.Close();
	}
	try
	{
		bSuccess &= cDatabaseTMNumOolTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_OCF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMNumOolTables.IsOpen())
	{
		for (GetTMNumOolTables()->RemoveAll(); !cDatabaseTMNumOolTables.IsBOF() && !cDatabaseTMNumOolTables.IsEOF(); )
		{
			if (cDatabaseTMNumOolTables.GetAttributes() & (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CHECK_CALIBRATED))
			{
				if ((pDatabaseTMNumOolTable = new CDatabaseTMNumOolTable))
				{
					pDatabaseTMNumOolTable->SetName(cDatabaseTMNumOolTables.GetName());
					pDatabaseTMNumOolTable->SetAttributes(cDatabaseTMNumOolTables.GetAttributes());
					pDatabaseTMNumOolTable->SetChecks(cDatabaseTMNumOolTables.GetChecks());
					pDatabaseTMNumOolTable->SetStatus(cDatabaseTMNumOolTables.GetStatus());
					if (GetTMNumOolTables()->Find(cDatabaseTMNumOolTables.GetName()) < 0)
					{
						if (GetTMNumOolTables()->Add(pDatabaseTMNumOolTable) >= 0)
						{
							try
							{
								cDatabaseTMNumOolTables.MoveNext();
							}
							catch (CException *pException)
							{
								pException->Delete();
								bSuccess = FALSE;
								break;
							}
							continue;
						}
					}
					delete pDatabaseTMNumOolTable;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTMNumOolTables.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMNumOolTables.Close();
	}
	try
	{
		bSuccess &= cDatabaseTMNumOolTableLimits.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_OCFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMNumOolTableLimits.IsOpen())
	{
		while (!cDatabaseTMNumOolTableLimits.IsBOF() && !cDatabaseTMNumOolTableLimits.IsEOF())
		{
			if ((pDatabaseTMNumOolTable = GetTMNumOolTables()->GetAt(GetTMNumOolTables()->Find(cDatabaseTMNumOolTableLimits.GetName()))))
			{
				if ((pDatabaseTMNumOolLimit = new CDatabaseTMNumOolLimit))
				{
					switch (cDatabaseTMNumOolTableLimits.GetOrder())
					{
					case TMOOLLIMIT_TYPE_SOFT:
					case TMOOLLIMIT_TYPE_HARD:
					{ pDatabaseTMNumOolLimit->SetType(cDatabaseTMNumOolTableLimits.GetOrder());
					break;
					}
					default:
					{ pDatabaseTMNumOolLimit->SetType(TMOOLLIMIT_TYPE_NONE);
					break;
					}
					}
					if (pDatabaseTMNumOolLimit->GetType() != TMOOLLIMIT_TYPE_NONE)
					{
						pDatabaseTMNumOolLimit->SetOrder(cDatabaseTMNumOolTableLimits.GetOrder());
						pDatabaseTMNumOolLimit->SetRange(pDatabaseTMNumOolLimit->GetType(), cDatabaseTMNumOolTableLimits.GetLowLimit(), cDatabaseTMNumOolTableLimits.GetHighLimit());
						if (pDatabaseTMNumOolTable->Add(pDatabaseTMNumOolLimit) >= 0)
						{
							try
							{
								cDatabaseTMNumOolTableLimits.MoveNext();
							}
							catch (CException *pException)
							{
								pException->Delete();
								bSuccess = FALSE;
								break;
							}
							continue;
						}
					}
					delete pDatabaseTMNumOolLimit;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTMNumOolTableLimits.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMNumOolTableLimits.Close();
	}
	try
	{
		bSuccess &= cDatabaseTMNumOolTableAssociations.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_POCF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMNumOolTableAssociations.IsOpen())
	{
		while (!cDatabaseTMNumOolTableAssociations.IsBOF() && !cDatabaseTMNumOolTableAssociations.IsEOF())
		{
			if ((pDatabaseTMParameter = GetTMParameters()->GetAt(GetTMParameters()->Find(cDatabaseTMNumOolTableAssociations.GetParameter()))))
			{
				if (pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1], nOolTableValues) >= 0)
				{
					szOolTables[0].Add(cDatabaseTMNumOolTableAssociations.GetName());
					szOolTables[1].Add(cDatabaseTMNumOolTableAssociations.GetValidityParameter());
					nOolTableValues.Add((!cDatabaseTMNumOolTableAssociations.GetValidityParameter().IsEmpty()) ? 1 : -1);
					pDatabaseTMParameter->SetOolTables(szOolTables[0], szOolTables[1], nOolTableValues);
				}
			}
			try
			{
				cDatabaseTMNumOolTableAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMNumOolTableAssociations.Close();
	}
	try
	{
		bSuccess &= cDatabaseTMTxtOolTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_FXF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMTxtOolTables.IsOpen())
	{
		for (GetTMTxtOolTables()->RemoveAll(); !cDatabaseTMTxtOolTables.IsBOF() && !cDatabaseTMTxtOolTables.IsEOF(); )
		{
			if (cDatabaseTMTxtOolTables.GetAttributes() & (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CHECK_CALIBRATED))
			{
				if ((pDatabaseTMTxtOolTable = new CDatabaseTMTxtOolTable))
				{
					pDatabaseTMTxtOolTable->SetName(cDatabaseTMTxtOolTables.GetName());
					pDatabaseTMTxtOolTable->SetAttributes(cDatabaseTMTxtOolTables.GetAttributes());
					pDatabaseTMTxtOolTable->SetChecks(cDatabaseTMTxtOolTables.GetChecks());
					pDatabaseTMTxtOolTable->SetStatus(cDatabaseTMTxtOolTables.GetStatus());
					if (GetTMTxtOolTables()->Find(cDatabaseTMTxtOolTables.GetName()) < 0)
					{
						if (GetTMTxtOolTables()->Add(pDatabaseTMTxtOolTable) >= 0)
						{
							try
							{
								cDatabaseTMTxtOolTables.MoveNext();
							}
							catch (CException *pException)
							{
								pException->Delete();
								bSuccess = FALSE;
								break;
							}
							continue;
						}
					}
					delete pDatabaseTMTxtOolTable;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTMTxtOolTables.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMTxtOolTables.Close();
	}
	try
	{
		bSuccess &= cDatabaseTMTxtOolTableLimits.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_FXFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMTxtOolTableLimits.IsOpen())
	{
		while (!cDatabaseTMTxtOolTableLimits.IsBOF() && !cDatabaseTMTxtOolTableLimits.IsEOF())
		{
			if ((pDatabaseTMTxtOolTable = GetTMTxtOolTables()->GetAt(GetTMTxtOolTables()->Find(cDatabaseTMTxtOolTableLimits.GetName()))))
			{
				if ((pDatabaseTMTxtOolLimit = new CDatabaseTMTxtOolLimit))
				{
					pDatabaseTMTxtOolLimit->SetType(TMOOLLIMIT_TYPE_HARD);
					if (pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW)
					{
						pDatabaseTMTxtOolLimit->SetOrder(cDatabaseTMTxtOolTableLimits.GetOrder());
						pDatabaseTMTxtOolLimit->SetRange(TranslateTMTxtOolTableLimitValue(pDatabaseTMTxtOolTable->GetAttributes(), cDatabaseTMTxtOolTableLimits.GetLowLimit()), TranslateTMTxtOolTableLimitValue(pDatabaseTMTxtOolTable->GetAttributes(), cDatabaseTMTxtOolTableLimits.GetHighLimit()));
					}
					if (pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_CALIBRATED)
					{
						pDatabaseTMTxtOolLimit->SetOrder(cDatabaseTMTxtOolTableLimits.GetOrder());
						pDatabaseTMTxtOolLimit->SetRange(cDatabaseTMTxtOolTableLimits.GetLowLimit(), cDatabaseTMTxtOolTableLimits.GetHighLimit());
					}
					if (pDatabaseTMTxtOolTable->Add(pDatabaseTMTxtOolLimit) >= 0)
					{
						try
						{
							cDatabaseTMTxtOolTableLimits.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
					delete pDatabaseTMTxtOolLimit;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTMTxtOolTableLimits.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMTxtOolTableLimits.Close();
	}
	try
	{
		bSuccess &= cDatabaseTMTxtOolTableAssociations.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PFXF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMTxtOolTableAssociations.IsOpen())
	{
		while (!cDatabaseTMTxtOolTableAssociations.IsBOF() && !cDatabaseTMTxtOolTableAssociations.IsEOF())
		{
			if ((pDatabaseTMParameter = GetTMParameters()->GetAt(GetTMParameters()->Find(cDatabaseTMTxtOolTableAssociations.GetParameter()))))
			{
				if (pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1], nOolTableValues) >= 0)
				{
					szOolTables[0].Add(cDatabaseTMTxtOolTableAssociations.GetName());
					szOolTables[1].Add(cDatabaseTMTxtOolTableAssociations.GetValidityParameter());
					nOolTableValues.Add((!cDatabaseTMTxtOolTableAssociations.GetValidityParameter().IsEmpty()) ? 1 : -1);
					pDatabaseTMParameter->SetOolTables(szOolTables[0], szOolTables[1], nOolTableValues);
				}
			}
			try
			{
				cDatabaseTMTxtOolTableAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMTxtOolTableAssociations.Close();
	}
	try
	{
		bSuccess &= cDatabaseTMPacketParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PLF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTMPacketParameters.IsOpen())
	{
		while (!cDatabaseTMPacketParameters.IsBOF() && !cDatabaseTMPacketParameters.IsEOF())
		{
			if ((pDatabaseTMPacket = GetTMPackets()->GetAt(GetTMPackets()->Find(cDatabaseTMPacketParameters.GetPacket()))))
			{
				if ((pDatabaseTMPacketParameter = new CDatabaseTMPacketParameter))
				{
					pDatabaseTMPacketParameter->SetTag(cDatabaseTMPacketParameters.GetTag());
					pDatabaseTMPacketParameter->SetBytePos(cDatabaseTMPacketParameters.GetBytePos());
					pDatabaseTMPacketParameter->SetBitPos(cDatabaseTMPacketParameters.GetBitPos());
					pDatabaseTMPacketParameter->SetOccurrenceCount(cDatabaseTMPacketParameters.GetOccurrenceCount());
					pDatabaseTMPacketParameter->SetOccurrenceInterval(cDatabaseTMPacketParameters.GetOccurrenceInterval());
					pDatabaseTMPacketParameter->SetValidityParameter(cDatabaseTMPacketParameters.GetValidityParameter());
					if (pDatabaseTMPacket->Find(cDatabaseTMPacketParameters.GetTag(), cDatabaseTMPacketParameters.GetBytePos(), cDatabaseTMPacketParameters.GetBitPos()) < 0)
					{
						if (pDatabaseTMPacket->Add(pDatabaseTMPacketParameter) >= 0)
						{
							try
							{
								cDatabaseTMPacketParameters.MoveNext();
							}
							catch (CException *pException)
							{
								pException->Delete();
								bSuccess = FALSE;
								break;
							}
							continue;
						}
					}
					delete pDatabaseTMPacketParameter;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTMPacketParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTMPacketParameters.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCPreExeGroups.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PVP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCPreExeGroups.IsOpen())
	{
		for (GetTCPreExeGroups()->RemoveAll(); !cDatabaseTCPreExeGroups.IsBOF() && !cDatabaseTCPreExeGroups.IsEOF(); )
		{
			if ((pDatabaseTCPreExeGroup = new CDatabaseTCPreExeGroup))
			{
				pDatabaseTCPreExeGroup->SetID(cDatabaseTCPreExeGroups.GetID());
				pDatabaseTCPreExeGroup->SetDescription(cDatabaseTCPreExeGroups.GetDescription());
				pDatabaseTCPreExeGroup->SetStatus(cDatabaseTCPreExeGroups.GetStatus());
				if (GetTCPreExeGroups()->Find(cDatabaseTCPreExeGroups.GetID()) < 0)
				{
					if (GetTCPreExeGroups()->Add(pDatabaseTCPreExeGroup) >= 0)
					{
						try
						{
							cDatabaseTCPreExeGroups.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseTCPreExeGroup;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTCPreExeGroups.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCPreExeGroups.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCPreExeGroupParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PEV_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCPreExeGroupParameters.IsOpen())
	{
		while (!cDatabaseTCPreExeGroupParameters.IsBOF() && !cDatabaseTCPreExeGroupParameters.IsEOF())
		{
			if ((pDatabaseTCPreExeGroup = GetTCPreExeGroups()->GetAt(GetTCPreExeGroups()->Find(cDatabaseTCPreExeGroupParameters.GetID()))))
			{
				if ((pDatabaseTCPreExeGroupParameter = new CDatabaseTCPreExeGroupParameter))
				{
					pDatabaseTCPreExeGroupParameter->SetTag(cDatabaseTCPreExeGroupParameters.GetTag());
					pDatabaseTCPreExeGroupParameter->SetAttributes(cDatabaseTCPreExeGroupParameters.GetAttributes());
					pDatabaseTCPreExeGroupParameter->SetValueAsText(cDatabaseTCPreExeGroupParameters.GetValue());
					if (pDatabaseTCPreExeGroup->Find(cDatabaseTCPreExeGroupParameters.GetTag()) < 0)
					{
						if (pDatabaseTCPreExeGroup->Add(pDatabaseTCPreExeGroupParameter) >= 0)
						{
							try
							{
								cDatabaseTCPreExeGroupParameters.MoveNext();
							}
							catch (CException *pException)
							{
								pException->Delete();
								bSuccess = FALSE;
								break;
							}
							continue;
						}
					}
					delete pDatabaseTCPreExeGroupParameter;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTCPreExeGroupParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCPreExeGroupParameters.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCExeVerGroups.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CVP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCExeVerGroups.IsOpen())
	{
		for (GetTCExeVerGroups()->RemoveAll(); !cDatabaseTCExeVerGroups.IsBOF() && !cDatabaseTCExeVerGroups.IsEOF(); )
		{
			if ((pDatabaseTCExeVerGroup = new CDatabaseTCExeVerGroup))
			{
				pDatabaseTCExeVerGroup->SetID(cDatabaseTCExeVerGroups.GetID());
				pDatabaseTCExeVerGroup->SetName(cDatabaseTCExeVerGroups.GetName());
				pDatabaseTCExeVerGroup->SetDescription(cDatabaseTCExeVerGroups.GetDescription());
				pDatabaseTCExeVerGroup->SetStages(cDatabaseTCExeVerGroups.GetStages());
				pDatabaseTCExeVerGroup->SetStatus(cDatabaseTCExeVerGroups.GetStatus());
				if (GetTCExeVerGroups()->Find(cDatabaseTCExeVerGroups.GetID()) < 0)
				{
					if (GetTCExeVerGroups()->Add(pDatabaseTCExeVerGroup) >= 0)
					{
						try
						{
							cDatabaseTCExeVerGroups.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseTCExeVerGroup;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTCExeVerGroups.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCExeVerGroups.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCExeVerGroupParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CEV_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCExeVerGroupParameters.IsOpen())
	{
		while (!cDatabaseTCExeVerGroupParameters.IsBOF() && !cDatabaseTCExeVerGroupParameters.IsEOF())
		{
			if ((pDatabaseTCExeVerGroup = GetTCExeVerGroups()->GetAt(GetTCExeVerGroups()->Find(cDatabaseTCExeVerGroupParameters.GetID()))))
			{
				if ((pDatabaseTCExeVerGroupParameter = new CDatabaseTCExeVerGroupParameter))
				{
					pDatabaseTCExeVerGroupParameter->SetTag(cDatabaseTCExeVerGroupParameters.GetTag());
					pDatabaseTCExeVerGroupParameter->SetStage(MAKETCEXEVERSTAGEFROMID(cDatabaseTCExeVerGroupParameters.GetStage()));
					pDatabaseTCExeVerGroupParameter->SetStep(MAKETCEXEVERSTAGESTEPFROMID(cDatabaseTCExeVerGroupParameters.GetStage()));
					pDatabaseTCExeVerGroupParameter->SetAttributes(cDatabaseTCExeVerGroupParameters.GetAttributes());
					pDatabaseTCExeVerGroupParameter->SetValueAsText(cDatabaseTCExeVerGroupParameters.GetValue());
					pDatabaseTCExeVerGroupParameter->SetTimeWindowInterval(cDatabaseTCExeVerGroupParameters.GetTimeWindowInterval());
					pDatabaseTCExeVerGroupParameter->SetEventIDPacket(cDatabaseTCExeVerGroupParameters.GetEventIDPacket());
					if (pDatabaseTCExeVerGroup->Find(cDatabaseTCExeVerGroupParameters.GetTag(), cDatabaseTCExeVerGroupParameters.GetStage()) < 0)
					{
						if (pDatabaseTCExeVerGroup->Add(pDatabaseTCExeVerGroupParameter) >= 0)
						{
							try
							{
								cDatabaseTCExeVerGroupParameters.MoveNext();
							}
							catch (CException *pException)
							{
								pException->Delete();
								bSuccess = FALSE;
								break;
							}
							continue;
						}
					}
					delete pDatabaseTCExeVerGroupParameter;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTCExeVerGroupParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCExeVerGroupParameters.Close();
	}
	return bSuccess;
}

BOOL CALTELDatabaseEngine::LoadTCParameters()
{
	BOOL  bSuccess;
	CStringArray  szParameterSets;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCSequence  *pDatabaseTCSequence;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCParameters  pDatabaseTCParameters;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;
	CDatabaseTCNumOolLimit  *pDatabaseTCNumOolLimit;
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;
	CDatabaseTCTxtOolLimit  *pDatabaseTCTxtOolLimit;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTCSequenceEntry  *pDatabaseTCSequenceEntry;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CDatabaseTCSequenceEntryParameter  *pDatabaseTCSequenceEntryParameter;
	CALTELDatabaseTCParametersRecordset  cDatabaseTCParameters(this);
	CALTELDatabaseTCNumCalTablesRecordset  cDatabaseTCNumCalTables(this);
	CALTELDatabaseTCTxtCalTablesRecordset  cDatabaseTCTxtCalTables(this);
	CALTELDatabaseTCNumOolTablesRecordset  cDatabaseTCNumOolTables(this);
	CALTELDatabaseTCTxtOolTablesRecordset  cDatabaseTCTxtOolTables(this);
	CALTELDatabaseTCParameterSetsRecordset  cDatabaseTCParameterSets(this);
	CALTELDatabaseTCPacketParametersRecordset  cDatabaseTCPacketParameters(this);
	CALTELDatabaseTCFunctionElementsRecordset  cDatabaseTCFunctionElements(this);
	CALTELDatabaseTCParameterSetItemsRecordset  cDatabaseTCParameterSetItems(this);
	CALTELDatabaseTCNumCalTablePointsRecordset  cDatabaseTCNumCalTablePoints(this);
	CALTELDatabaseTCTxtCalTablePointsRecordset  cDatabaseTCTxtCalTablePoints(this);
	CALTELDatabaseTCNumOolTableLimitsRecordset  cDatabaseTCNumOolTableLimits(this);
	CALTELDatabaseTCTxtOolTableLimitsRecordset  cDatabaseTCTxtOolTableLimits(this);
	CALTELDatabaseTCSequenceParametersRecordset  cDatabaseTCSequenceParameters(this);
	CALTELDatabaseTCSequenceEntryParametersRecordset  cDatabaseTCSequenceEntryParameters(this);
	CALTELDatabaseTCParameterSetAssociationsRecordset  cDatabaseTCParameterSetAssociations(this);

	try
	{
		bSuccess = cDatabaseTCParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CPC_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCParameters.IsOpen())
	{
		for (GetTCParameters()->RemoveAll(); !cDatabaseTCParameters.IsBOF() && !cDatabaseTCParameters.IsEOF(); )
		{
			if ((pDatabaseTCParameter = new CDatabaseTCParameter))
			{
				pDatabaseTCParameter->SetTag(cDatabaseTCParameters.GetTag());
				pDatabaseTCParameter->SetDescription(cDatabaseTCParameters.GetDescription());
				pDatabaseTCParameter->SetUnit(cDatabaseTCParameters.GetUnit());
				pDatabaseTCParameter->SetWidth(cDatabaseTCParameters.GetBitWidth());
				pDatabaseTCParameter->SetAttributes(cDatabaseTCParameters.GetAttributes());
				pDatabaseTCParameter->SetCalTable(cDatabaseTCParameters.GetCalTable());
				pDatabaseTCParameter->SetOolTable(cDatabaseTCParameters.GetOolTable());
				pDatabaseTCParameter->SetStatus(cDatabaseTCParameters.GetStatus());
				if (GetTCParameters()->Find(cDatabaseTCParameters.GetTag()) < 0)
				{
					if (GetTCParameters()->Add(pDatabaseTCParameter) >= 0)
					{
						try
						{
							cDatabaseTCParameters.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseTCParameter;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTCParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCParameters.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCNumCalTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CAL_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCNumCalTables.IsOpen())
	{
		for (GetTCNumCalTables()->RemoveAll(); !cDatabaseTCNumCalTables.IsBOF() && !cDatabaseTCNumCalTables.IsEOF(); )
		{
			if ((pDatabaseTCNumCalTable = new CDatabaseTCNumCalTable))
			{
				pDatabaseTCNumCalTable->SetName(cDatabaseTCNumCalTables.GetName());
				pDatabaseTCNumCalTable->SetDescription(cDatabaseTCNumCalTables.GetDescription());
				pDatabaseTCNumCalTable->SetUnit(cDatabaseTCNumCalTables.GetUnit());
				pDatabaseTCNumCalTable->SetPoints(cDatabaseTCNumCalTables.GetPoints());
				pDatabaseTCNumCalTable->SetStatus(cDatabaseTCNumCalTables.GetStatus());
				if (GetTCNumCalTables()->Find(cDatabaseTCNumCalTables.GetName()) < 0)
				{
					if (GetTCNumCalTables()->Add(pDatabaseTCNumCalTable) >= 0)
					{
						try
						{
							cDatabaseTCNumCalTables.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseTCNumCalTable;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTCNumCalTables.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCNumCalTables.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCNumCalTablePoints.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CALP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCNumCalTablePoints.IsOpen())
	{
		while (!cDatabaseTCNumCalTablePoints.IsBOF() && !cDatabaseTCNumCalTablePoints.IsEOF())
		{
			if ((pDatabaseTCNumCalTable = GetTCNumCalTables()->GetAt(GetTCNumCalTables()->Find(cDatabaseTCNumCalTablePoints.GetName()))))
			{
				if ((pDatabaseTCNumCalPoint = new CDatabaseTCNumCalPoint) != (CDatabaseTCNumCalPoint *)NULL)
				{
					pDatabaseTCNumCalPoint->SetPoint(cDatabaseTCNumCalTablePoints.GetX(), cDatabaseTCNumCalTablePoints.GetY());
					if (pDatabaseTCNumCalTable->Find(cDatabaseTCNumCalTablePoints.GetX()) < 0)
					{
						if (pDatabaseTCNumCalTable->Add(pDatabaseTCNumCalPoint) >= 0)
						{
							try
							{
								cDatabaseTCNumCalTablePoints.MoveNext();
							}
							catch (CException *pException)
							{
								pException->Delete();
								bSuccess = FALSE;
								break;
							}
							continue;
						}
					}
					delete pDatabaseTCNumCalPoint;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTCNumCalTablePoints.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCNumCalTablePoints.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCTxtCalTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_TXF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCTxtCalTables.IsOpen())
	{
		for (GetTCTxtCalTables()->RemoveAll(); !cDatabaseTCTxtCalTables.IsBOF() && !cDatabaseTCTxtCalTables.IsEOF(); )
		{
			if ((pDatabaseTCTxtCalTable = new CDatabaseTCTxtCalTable))
			{
				pDatabaseTCTxtCalTable->SetName(cDatabaseTCTxtCalTables.GetName());
				pDatabaseTCTxtCalTable->SetDescription(cDatabaseTCTxtCalTables.GetDescription());
				pDatabaseTCTxtCalTable->SetPoints(cDatabaseTCTxtCalTables.GetPoints());
				pDatabaseTCTxtCalTable->SetStatus(cDatabaseTCTxtCalTables.GetStatus());
				if (GetTCTxtCalTables()->Find(cDatabaseTCTxtCalTables.GetName()) < 0)
				{
					if (GetTCTxtCalTables()->Add(pDatabaseTCTxtCalTable) >= 0)
					{
						try
						{
							cDatabaseTCTxtCalTables.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseTCTxtCalTable;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTCTxtCalTables.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCTxtCalTables.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCTxtCalTablePoints.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_TXFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCTxtCalTablePoints.IsOpen())
	{
		while (!cDatabaseTCTxtCalTablePoints.IsBOF() && !cDatabaseTCTxtCalTablePoints.IsEOF())
		{
			if ((pDatabaseTCTxtCalTable = GetTCTxtCalTables()->GetAt(GetTCTxtCalTables()->Find(cDatabaseTCTxtCalTablePoints.GetName()))))
			{
				if ((pDatabaseTCTxtCalPoint = new CDatabaseTCTxtCalPoint) != (CDatabaseTCTxtCalPoint *)NULL)
				{
					if (cDatabaseTCTxtCalTablePoints.GetX1() == cDatabaseTCTxtCalTablePoints.GetX2()) pDatabaseTCTxtCalPoint->SetPoint(cDatabaseTCTxtCalTablePoints.GetX1(), cDatabaseTCTxtCalTablePoints.GetText());
					if (cDatabaseTCTxtCalTablePoints.GetX1() != cDatabaseTCTxtCalTablePoints.GetX2()) pDatabaseTCTxtCalPoint->SetRange(cDatabaseTCTxtCalTablePoints.GetX1(), cDatabaseTCTxtCalTablePoints.GetX2(), cDatabaseTCTxtCalTablePoints.GetText());
					if (pDatabaseTCTxtCalTable->Find(cDatabaseTCTxtCalTablePoints.GetX1()) < 0)
					{
						if (pDatabaseTCTxtCalTable->Add(pDatabaseTCTxtCalPoint) >= 0)
						{
							try
							{
								cDatabaseTCTxtCalTablePoints.MoveNext();
							}
							catch (CException *pException)
							{
								pException->Delete();
								bSuccess = FALSE;
								break;
							}
							continue;
						}
					}
					delete pDatabaseTCTxtCalPoint;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTCTxtCalTablePoints.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCTxtCalTablePoints.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCNumOolTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_OCF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCNumOolTables.IsOpen())
	{
		for (GetTCNumOolTables()->RemoveAll(); !cDatabaseTCNumOolTables.IsBOF() && !cDatabaseTCNumOolTables.IsEOF(); )
		{
			if (cDatabaseTCNumOolTables.GetAttributes() & (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CHECK_CALIBRATED))
			{
				if ((pDatabaseTCNumOolTable = new CDatabaseTCNumOolTable))
				{
					pDatabaseTCNumOolTable->SetName(cDatabaseTCNumOolTables.GetName());
					pDatabaseTCNumOolTable->SetAttributes(cDatabaseTCNumOolTables.GetAttributes());
					pDatabaseTCNumOolTable->SetChecks(cDatabaseTCNumOolTables.GetChecks());
					pDatabaseTCNumOolTable->SetStatus(cDatabaseTCNumOolTables.GetStatus());
					if (GetTCNumOolTables()->Find(cDatabaseTCNumOolTables.GetName()) < 0)
					{
						if (GetTCNumOolTables()->Add(pDatabaseTCNumOolTable) >= 0)
						{
							try
							{
								cDatabaseTCNumOolTables.MoveNext();
							}
							catch (CException *pException)
							{
								pException->Delete();
								bSuccess = FALSE;
								break;
							}
							continue;
						}
					}
					delete pDatabaseTCNumOolTable;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTCNumOolTables.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCNumOolTables.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCNumOolTableLimits.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_OCFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCNumOolTableLimits.IsOpen())
	{
		while (!cDatabaseTCNumOolTableLimits.IsBOF() && !cDatabaseTCNumOolTableLimits.IsEOF())
		{
			if ((pDatabaseTCNumOolTable = GetTCNumOolTables()->GetAt(GetTCNumOolTables()->Find(cDatabaseTCNumOolTableLimits.GetName()))))
			{
				if ((pDatabaseTCNumOolLimit = new CDatabaseTCNumOolLimit))
				{
					switch (cDatabaseTCNumOolTableLimits.GetOrder())
					{
					case TCOOLLIMIT_TYPE_SOFT:
					case TCOOLLIMIT_TYPE_HARD:
					{ pDatabaseTCNumOolLimit->SetType(cDatabaseTCNumOolTableLimits.GetOrder());
					break;
					}
					default:
					{ pDatabaseTCNumOolLimit->SetType(TCOOLLIMIT_TYPE_NONE);
					break;
					}
					}
					if (pDatabaseTCNumOolLimit->GetType() != TCOOLLIMIT_TYPE_NONE)
					{
						pDatabaseTCNumOolLimit->SetOrder(cDatabaseTCNumOolTableLimits.GetOrder());
						pDatabaseTCNumOolLimit->SetRange(pDatabaseTCNumOolLimit->GetType(), cDatabaseTCNumOolTableLimits.GetLowLimit(), cDatabaseTCNumOolTableLimits.GetHighLimit());
						if (pDatabaseTCNumOolTable->Add(pDatabaseTCNumOolLimit) >= 0)
						{
							try
							{
								cDatabaseTCNumOolTableLimits.MoveNext();
							}
							catch (CException *pException)
							{
								pException->Delete();
								bSuccess = FALSE;
								break;
							}
							continue;
						}
					}
					delete pDatabaseTCNumOolLimit;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTCNumOolTableLimits.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCNumOolTableLimits.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCTxtOolTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_FXF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCTxtOolTables.IsOpen())
	{
		for (GetTCTxtOolTables()->RemoveAll(); !cDatabaseTCTxtOolTables.IsBOF() && !cDatabaseTCTxtOolTables.IsEOF(); )
		{
			if (cDatabaseTCTxtOolTables.GetAttributes() & (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CHECK_CALIBRATED))
			{
				if ((pDatabaseTCTxtOolTable = new CDatabaseTCTxtOolTable))
				{
					pDatabaseTCTxtOolTable->SetName(cDatabaseTCTxtOolTables.GetName());
					pDatabaseTCTxtOolTable->SetAttributes(cDatabaseTCTxtOolTables.GetAttributes());
					pDatabaseTCTxtOolTable->SetChecks(cDatabaseTCTxtOolTables.GetChecks());
					pDatabaseTCTxtOolTable->SetStatus(cDatabaseTCTxtOolTables.GetStatus());
					if (GetTCTxtOolTables()->Find(cDatabaseTCTxtOolTables.GetName()) < 0)
					{
						if (GetTCTxtOolTables()->Add(pDatabaseTCTxtOolTable) >= 0)
						{
							try
							{
								cDatabaseTCTxtOolTables.MoveNext();
							}
							catch (CException *pException)
							{
								pException->Delete();
								bSuccess = FALSE;
								break;
							}
							continue;
						}
					}
					delete pDatabaseTCTxtOolTable;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTCTxtOolTables.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCTxtOolTables.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCTxtOolTableLimits.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_FXFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCTxtOolTableLimits.IsOpen())
	{
		while (!cDatabaseTCTxtOolTableLimits.IsBOF() && !cDatabaseTCTxtOolTableLimits.IsEOF())
		{
			if ((pDatabaseTCTxtOolTable = GetTCTxtOolTables()->GetAt(GetTCTxtOolTables()->Find(cDatabaseTCTxtOolTableLimits.GetName()))))
			{
				if ((pDatabaseTCTxtOolLimit = new CDatabaseTCTxtOolLimit))
				{
					pDatabaseTCTxtOolLimit->SetType(TCOOLLIMIT_TYPE_HARD);
					if (pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW)
					{
						pDatabaseTCTxtOolLimit->SetOrder(cDatabaseTCTxtOolTableLimits.GetOrder());
						pDatabaseTCTxtOolLimit->SetRange(TranslateTCTxtOolTableLimitValue(pDatabaseTCTxtOolTable->GetAttributes(), cDatabaseTCTxtOolTableLimits.GetLowLimit()), TranslateTCTxtOolTableLimitValue(pDatabaseTCTxtOolTable->GetAttributes(), cDatabaseTCTxtOolTableLimits.GetHighLimit()));
					}
					if (pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_CALIBRATED)
					{
						pDatabaseTCTxtOolLimit->SetOrder(cDatabaseTCTxtOolTableLimits.GetOrder());
						pDatabaseTCTxtOolLimit->SetRange(cDatabaseTCTxtOolTableLimits.GetLowLimit(), cDatabaseTCTxtOolTableLimits.GetHighLimit());
					}
					if (pDatabaseTCTxtOolTable->Add(pDatabaseTCTxtOolLimit) >= 0)
					{
						try
						{
							cDatabaseTCTxtOolTableLimits.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
					delete pDatabaseTCTxtOolLimit;
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTCTxtOolTableLimits.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCTxtOolTableLimits.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCFunctionElements.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CDF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCFunctionElements.IsOpen())
	{
		while (!cDatabaseTCFunctionElements.IsBOF() && !cDatabaseTCFunctionElements.IsEOF())
		{
			if ((pDatabaseTCFunction = GetTCFunctions()->GetAt(GetTCFunctions()->Find(cDatabaseTCFunctionElements.GetFunction()))))
			{
				if ((pDatabaseTCFunctionElement = new CDatabaseTCFunctionElement))
				{
					pDatabaseTCFunctionElement->SetName(cDatabaseTCFunctionElements.GetName());
					pDatabaseTCFunctionElement->SetDescription(cDatabaseTCFunctionElements.GetDescription());
					pDatabaseTCFunctionElement->SetAttributes(cDatabaseTCFunctionElements.GetAttributes());
					pDatabaseTCFunctionElement->SetBytePos(cDatabaseTCFunctionElements.GetBitOffset() / 8);
					pDatabaseTCFunctionElement->SetBitPos(cDatabaseTCFunctionElements.GetBitOffset() % 8);
					pDatabaseTCFunctionElement->SetWidth(cDatabaseTCFunctionElements.GetBitWidth());
					pDatabaseTCFunctionElement->SetConstValueAsText(cDatabaseTCFunctionElements.GetConstValue());
					if ((pDatabaseTCParameter = GetTCParameters()->GetAt(GetTCParameters()->Find(cDatabaseTCFunctionElements.GetName()))))
					{
						pDatabaseTCFunctionElement->SetAttributes(pDatabaseTCFunctionElement->GetAttributes() | (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)));
						pDatabaseTCFunctionElement->SetAttributes((cDatabaseTCFunctionElements.GetAttributes() & (TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED)) ? (pDatabaseTCFunctionElement->GetAttributes() | (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))) : (pDatabaseTCFunctionElement->GetAttributes() | TCPARAMETER_CALIBRATION_NONE));
						pDatabaseTCFunctionElement->SetAttributes((CheckTCFunctionElementConstTimeType(pDatabaseTCFunctionElement->GetName())) ? ((pDatabaseTCFunctionElement->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) | TCPARAMETER_CODING_TIME) : pDatabaseTCFunctionElement->GetAttributes());
					}
					if (pDatabaseTCFunction->Add(pDatabaseTCFunctionElement) >= 0)
					{
						try
						{
							cDatabaseTCFunctionElements.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
					delete pDatabaseTCFunctionElement;
				}
			}
			try
			{
				cDatabaseTCFunctionElements.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCFunctionElements.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCPacketParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PCDF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCPacketParameters.IsOpen())
	{
		while (!cDatabaseTCPacketParameters.IsBOF() && !cDatabaseTCPacketParameters.IsEOF())
		{
			if ((pDatabaseTCPacket = GetTCPackets()->GetAt(GetTCPackets()->Find(cDatabaseTCPacketParameters.GetPacket()))))
			{
				for (; cDatabaseTCPacketParameters.GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE; )
				{
					if (GetTCParameters()->Find(cDatabaseTCPacketParameters.GetTag()) < 0)
					{
						if ((pDatabaseTCParameter = new CDatabaseTCParameter))
						{
							pDatabaseTCParameter->SetTag(cDatabaseTCPacketParameters.GetTag());
							pDatabaseTCParameter->SetDescription(cDatabaseTCPacketParameters.GetDescription());
							pDatabaseTCParameter->SetAttributes(cDatabaseTCPacketParameters.GetAttributes());
							pDatabaseTCParameter->SetWidth(cDatabaseTCPacketParameters.GetBitWidth());
							if (GetTCParameters()->Add(pDatabaseTCParameter) >= 0) break;
							delete pDatabaseTCParameter;
						}
					}
					break;
				}
				if ((pDatabaseTCParameter = GetTCParameters()->GetAt(GetTCParameters()->Find(cDatabaseTCPacketParameters.GetTag()))) || cDatabaseTCPacketParameters.GetTag().IsEmpty())
				{
					if ((pDatabaseTCPacketParameter = new CDatabaseTCPacketParameter))
					{
						pDatabaseTCPacketParameter->SetTag(cDatabaseTCPacketParameters.GetTag());
						pDatabaseTCPacketParameter->SetDescription(cDatabaseTCPacketParameters.GetDescription());
						pDatabaseTCPacketParameter->SetAttributes(cDatabaseTCPacketParameters.GetAttributes());
						pDatabaseTCPacketParameter->SetBytePos(cDatabaseTCPacketParameters.GetBitOffset() / 8);
						pDatabaseTCPacketParameter->SetBitPos(cDatabaseTCPacketParameters.GetBitOffset() % 8);
						pDatabaseTCPacketParameter->SetWidth(cDatabaseTCPacketParameters.GetBitWidth());
						pDatabaseTCPacketParameter->SetConstValueAsText(cDatabaseTCPacketParameters.GetConstValue());
						pDatabaseTCPacketParameter->SetAttributes((pDatabaseTCParameter != (CDatabaseTCParameter *)NULL && (cDatabaseTCPacketParameters.GetAttributes() & (TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED))) ? (pDatabaseTCPacketParameter->GetAttributes() | (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))) : (pDatabaseTCPacketParameter->GetAttributes() | TCPARAMETER_CALIBRATION_NONE));
						pDatabaseTCPacketParameter->SetAttributes((CheckTCPacketParameterConstTimeType(pDatabaseTCPacketParameter->GetTag())) ? ((pDatabaseTCPacketParameter->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) | TCPARAMETER_CODING_TIME) : pDatabaseTCPacketParameter->GetAttributes());
						if (pDatabaseTCPacket->Add(pDatabaseTCPacketParameter) >= 0)
						{
							try
							{
								cDatabaseTCPacketParameters.MoveNext();
							}
							catch (CException *pException)
							{
								pException->Delete();
								bSuccess = FALSE;
								break;
							}
							continue;
						}
						delete pDatabaseTCPacketParameter;
					}
				}
				else
				{
					bSuccess = FALSE;
					break;
				}
			}
			try
			{
				cDatabaseTCPacketParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCPacketParameters.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCParameterSets.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CPS_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCParameterSets.IsOpen())
	{
		for (GetTCParameterSets()->RemoveAll(); !cDatabaseTCParameterSets.IsBOF() && !cDatabaseTCParameterSets.IsEOF(); )
		{
			if ((pDatabaseTCParameterSet = new CDatabaseTCParameterSet))
			{
				pDatabaseTCParameterSet->SetName(cDatabaseTCParameterSets.GetName());
				pDatabaseTCParameterSet->SetDescription(cDatabaseTCParameterSets.GetDescription());
				pDatabaseTCParameterSet->SetStatus(cDatabaseTCParameterSets.GetStatus());
				if (GetTCParameterSets()->Find(cDatabaseTCParameterSets.GetName()) < 0)
				{
					if (GetTCParameterSets()->Add(pDatabaseTCParameterSet) >= 0)
					{
						try
						{
							cDatabaseTCParameterSets.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pDatabaseTCParameterSet;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseTCParameterSets.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCParameterSets.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCParameterSetItems.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CPSP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCParameterSetItems.IsOpen())
	{
		while (!cDatabaseTCParameterSetItems.IsBOF() && !cDatabaseTCParameterSetItems.IsEOF())
		{
			if ((pDatabaseTCParameterSet = GetTCParameterSets()->GetAt(GetTCParameterSets()->Find(cDatabaseTCParameterSetItems.GetParameterSet()))))
			{
				if ((pDatabaseTCFunctionElement = new CDatabaseTCFunctionElement))
				{
					pDatabaseTCFunctionElement->SetName(cDatabaseTCParameterSetItems.GetName());
					pDatabaseTCFunctionElement->SetAttributes(cDatabaseTCParameterSetItems.GetAttributes());
					pDatabaseTCFunctionElement->SetBytePos(cDatabaseTCParameterSetItems.GetBitOffset() / 8);
					pDatabaseTCFunctionElement->SetBitPos(cDatabaseTCParameterSetItems.GetBitOffset() % 8);
					pDatabaseTCFunctionElement->SetConstValueAsText(cDatabaseTCParameterSetItems.GetConstValue());
					if ((pDatabaseTCParameter = GetTCParameters()->GetAt(GetTCParameters()->Find(cDatabaseTCParameterSetItems.GetName()))))
					{
						pDatabaseTCFunctionElement->SetAttributes(pDatabaseTCFunctionElement->GetAttributes() | (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)));
						pDatabaseTCFunctionElement->SetAttributes((pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED)) ? (pDatabaseTCFunctionElement->GetAttributes() | (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : (pDatabaseTCFunctionElement->GetAttributes() | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE));
						pDatabaseTCFunctionElement->SetAttributes((CheckTCParameterSetItemConstTimeType(pDatabaseTCFunctionElement->GetName())) ? ((pDatabaseTCFunctionElement->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) | TCPARAMETER_CODING_TIME) : pDatabaseTCFunctionElement->GetAttributes());
						pDatabaseTCFunctionElement->SetDescription(pDatabaseTCParameter->GetDescription());
						pDatabaseTCFunctionElement->SetWidth(pDatabaseTCParameter->GetWidth());
					}
					if (pDatabaseTCParameterSet->Add(pDatabaseTCFunctionElement) >= 0)
					{
						try
						{
							cDatabaseTCParameterSetItems.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
					delete pDatabaseTCFunctionElement;
				}
			}
			try
			{
				cDatabaseTCParameterSetItems.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCParameterSetItems.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCParameterSetAssociations.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PCPS_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCParameterSetAssociations.IsOpen())
	{
		while (!cDatabaseTCParameterSetAssociations.IsBOF() && !cDatabaseTCParameterSetAssociations.IsEOF())
		{
			if ((pDatabaseTCFunction = GetTCFunctions()->GetAt(GetTCFunctions()->Find(cDatabaseTCParameterSetAssociations.GetFunction()))))
			{
				if (pDatabaseTCFunction->GetParameterSets(szParameterSets) >= 0)
				{
					szParameterSets.Add(cDatabaseTCParameterSetAssociations.GetName());
					pDatabaseTCFunction->SetParameterSets(szParameterSets);
				}
			}
			try
			{
				cDatabaseTCParameterSetAssociations.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCParameterSetAssociations.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCSequenceParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CSP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCSequenceParameters.IsOpen())
	{
		while (!cDatabaseTCSequenceParameters.IsBOF() && !cDatabaseTCSequenceParameters.IsEOF())
		{
			if ((pDatabaseTCSequence = GetTCSequences()->GetAt(GetTCSequences()->Find(cDatabaseTCSequenceParameters.GetSequence()))))
			{
				if ((pDatabaseTCParameter = new CDatabaseTCParameter))
				{
					pDatabaseTCParameter->SetTag(cDatabaseTCSequenceParameters.GetTag());
					pDatabaseTCParameter->SetDescription(cDatabaseTCSequenceParameters.GetDescription());
					pDatabaseTCParameter->SetUnit(cDatabaseTCSequenceParameters.GetUnit());
					pDatabaseTCParameter->SetAttributes(cDatabaseTCSequenceParameters.GetAttributes());
					pDatabaseTCParameter->SetWidth(cDatabaseTCSequenceParameters.GetBitWidth());
					pDatabaseTCParameter->SetCalTable(cDatabaseTCSequenceParameters.GetCalTable());
					pDatabaseTCParameter->SetOolTable(cDatabaseTCSequenceParameters.GetOolTable());
					pDatabaseTCParameter->SetConstValueAsText(cDatabaseTCSequenceParameters.GetConstValue());
					for (pDatabaseTCParameter->SetAttributes((CheckTCSequenceParameterConstTimeType(pDatabaseTCParameter->GetTag())) ? ((pDatabaseTCParameter->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) | TCPARAMETER_CODING_TIME) : pDatabaseTCParameter->GetAttributes()); pDatabaseTCSequence->GetParameters(pDatabaseTCParameters) >= 0; )
					{
						pDatabaseTCParameters.InsertAt(min(max(cDatabaseTCSequenceParameters.GetPosition(), 0), pDatabaseTCParameters.GetSize()), pDatabaseTCParameter);
						pDatabaseTCSequence->SetParameters(pDatabaseTCParameters);
						break;
					}
				}
			}
			try
			{
				cDatabaseTCSequenceParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCSequenceParameters.Close();
	}
	try
	{
		bSuccess &= cDatabaseTCSequenceEntryParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_SDF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseTCSequenceEntryParameters.IsOpen())
	{
		while (!cDatabaseTCSequenceEntryParameters.IsBOF() && !cDatabaseTCSequenceEntryParameters.IsEOF())
		{
			if ((pDatabaseTCSequence = GetTCSequences()->GetAt(GetTCSequences()->Find(cDatabaseTCSequenceEntryParameters.GetSequence()))))
			{
				if ((pDatabaseTCSequenceEntry = pDatabaseTCSequence->GetAt(cDatabaseTCSequenceEntryParameters.GetEntry() - 1)))
				{
					if ((pDatabaseTCSequenceEntryParameter = new CDatabaseTCSequenceEntryParameter))
					{
						pDatabaseTCSequenceEntryParameter->SetTag(cDatabaseTCSequenceEntryParameters.GetTag());
						pDatabaseTCSequenceEntryParameter->SetDescription(cDatabaseTCSequenceEntryParameters.GetDescription());
						pDatabaseTCSequenceEntryParameter->SetAttributes(cDatabaseTCSequenceEntryParameters.GetAttributes());
						pDatabaseTCSequenceEntryParameter->SetBytePos(cDatabaseTCSequenceEntryParameters.GetBitOffset() / 8);
						pDatabaseTCSequenceEntryParameter->SetBitPos(cDatabaseTCSequenceEntryParameters.GetBitOffset() % 8);
						pDatabaseTCSequenceEntryParameter->SetConstValueAsText(cDatabaseTCSequenceEntryParameters.GetConstValue());
						pDatabaseTCSequenceEntryParameter->SetMemoryArea(cDatabaseTCSequenceEntryParameters.GetMemoryAreaName(), cDatabaseTCSequenceEntryParameters.GetMemoryAreaVersion());
						if ((pDatabaseTCFunctionElement = ((pDatabaseTCFunction = GetTCFunctions()->GetAt(GetTCFunctions()->Find(pDatabaseTCSequenceEntry->GetName())))) ? pDatabaseTCFunction->GetAt(pDatabaseTCFunction->Find(cDatabaseTCSequenceEntryParameters.GetTag())) : (CDatabaseTCFunctionElement *)NULL))
						{
							pDatabaseTCSequenceEntryParameter->SetAttributes(pDatabaseTCSequenceEntryParameter->GetAttributes() | (pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)));
							pDatabaseTCSequenceEntryParameter->SetAttributes(((pDatabaseTCParameter = GetTCParameters()->GetAt(GetTCParameters()->Find(cDatabaseTCSequenceEntryParameters.GetTag()))) && (cDatabaseTCSequenceEntryParameters.GetAttributes() & (TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED))) ? (pDatabaseTCSequenceEntryParameter->GetAttributes() | (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))) : (pDatabaseTCSequenceEntryParameter->GetAttributes() | TCPARAMETER_CALIBRATION_NONE));
							pDatabaseTCSequenceEntryParameter->SetAttributes((CheckTCSequenceEntryParameterConstTimeType(pDatabaseTCSequenceEntryParameter->GetTag())) ? ((pDatabaseTCSequenceEntryParameter->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) | TCPARAMETER_CODING_TIME) : pDatabaseTCSequenceEntryParameter->GetAttributes());
							pDatabaseTCSequenceEntryParameter->SetWidth(pDatabaseTCFunctionElement->GetWidth());
						}
						if (pDatabaseTCSequenceEntry->Find(pDatabaseTCSequenceEntryParameter->GetTag(), pDatabaseTCSequenceEntryParameter->GetBytePos(), pDatabaseTCSequenceEntryParameter->GetBitPos()) >= 0 || pDatabaseTCSequenceEntry->Add(pDatabaseTCSequenceEntryParameter) < 0)
						{
							delete pDatabaseTCSequenceEntryParameter;
							break;
						}
					}
				}
			}
			try
			{
				cDatabaseTCSequenceEntryParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseTCSequenceEntryParameters.Close();
	}
	return bSuccess;
}

BOOL CALTELDatabaseEngine::LoadANDs()
{
	INT  nLayout;
	INT  nLayouts;
	INT  nParameter;
	INT  nParameters;
	BOOL  bSuccess;
	CUIntArray  nColumns;
	CANDLayout  *pLayout;
	CANDLayoutParameter  *pParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMPacketParameter  *pDatabaseTMPacketParameter;
	CALTELDatabaseANDDirectoryRecordset  cDatabaseANDDirectory(this);
	CALTELDatabaseANDParametersRecordset  cDatabaseANDParameters(this);

	try
	{
		bSuccess = cDatabaseANDDirectory.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_DPF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseANDDirectory.IsOpen())
	{
		for (GetANDs()->RemoveAll(); !cDatabaseANDDirectory.IsBOF() && !cDatabaseANDDirectory.IsEOF(); )
		{
			if ((pLayout = new CANDLayout) != (CANDLayout *)NULL)
			{
				pLayout->SetName(cDatabaseANDDirectory.GetName());
				pLayout->SetTitle(cDatabaseANDDirectory.GetTitle());
				pLayout->SetStatus(cDatabaseANDDirectory.GetStatus());
				if (GetANDs()->Find(cDatabaseANDDirectory.GetName()) < 0)
				{
					if (GetANDs()->Add(pLayout) >= 0)
					{
						cDatabaseANDDirectory.GetColumns(nColumns);
						pLayout->SetColumns(nColumns);
						try
						{
							cDatabaseANDDirectory.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pLayout;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseANDDirectory.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseANDDirectory.Close();
	}
	try
	{
		bSuccess &= cDatabaseANDParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_DPFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseANDParameters.IsOpen())
	{
		while (!cDatabaseANDParameters.IsBOF() && !cDatabaseANDParameters.IsEOF())
		{
			if ((pLayout = GetANDs()->GetAt(GetANDs()->Find(cDatabaseANDParameters.GetName()))))
			{
				if ((pParameter = new CANDLayoutParameter) != (CANDLayoutParameter *)NULL)
				{
					pParameter->SetName(cDatabaseANDParameters.GetParameter());
					pParameter->SetRow(cDatabaseANDParameters.GetRow());
					pParameter->SetColumn(cDatabaseANDParameters.GetCol());
					pParameter->SetAttributes(cDatabaseANDParameters.GetMode());
					pParameter->SetDigits(cDatabaseANDParameters.GetDigits());
					pParameter->SetComment(cDatabaseANDParameters.GetComment());
					pParameter->SetOccurrence(cDatabaseANDParameters.GetOccurrence());
					pParameter->SetAlignment(cDatabaseANDParameters.GetAlignment());
					pParameter->SetColor((cDatabaseANDParameters.GetColor() != -1) ? (COLORREF)cDatabaseANDParameters.GetColor() : GetANDIDColumnColor());
					if (pLayout->Add(pParameter) >= 0)
					{
						try
						{
							cDatabaseANDParameters.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
					delete pParameter;
				}
			}
			try
			{
				cDatabaseANDParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseANDParameters.Close();
	}
	for (nLayout = 0, nLayouts = (INT)GetTMPackets()->GetSize(), GetANDs(DATABASE_SUBCOMPONENT_AND_GENERIC)->RemoveAll(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = new CANDLayout(GetTMPackets()->GetAt(nLayout)->GetTag())))
		{
			pLayout->SetTitle(GetTMPackets()->GetAt(nLayout)->GetDescription());
			for (nParameter = 0, nParameters = (INT)GetTMPackets()->GetAt(nLayout)->GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pDatabaseTMPacketParameter = GetTMPackets()->GetAt(nLayout)->GetAt(nParameter)) != (CDatabaseTMPacketParameter *)NULL)
				{
					if ((pDatabaseTMParameter = GetTMParameters()->GetAt(GetTMParameters()->Find(pDatabaseTMPacketParameter->GetTag()))))
					{
						if (CheckTMParameterTag(pDatabaseTMPacketParameter->GetTag()) && !CheckTMParameterSpareList(pDatabaseTMPacketParameter->GetTag()))
						{
							if ((pParameter = new CANDLayoutParameter(pDatabaseTMParameter->GetTag())))
							{
								pParameter->SetAttributes(pDatabaseTMParameter->GetAttributes());
								pParameter->SetBytePos(pDatabaseTMPacketParameter->GetBytePos());
								pParameter->SetBitPos(pDatabaseTMPacketParameter->GetBitPos());
								pParameter->SetOccurrence(pDatabaseTMPacketParameter->GetOccurrence());
								if (pLayout->Add(pParameter) >= 0) continue;
								delete pParameter;
							}
						}
					}
				}
			}
			for (pLayout->SetStatus(ANDLAYOUT_RECORDSTATUS_NEW); GetANDs(DATABASE_SUBCOMPONENT_AND_GENERIC)->Add(pLayout) < 0; )
			{
				delete pLayout;
				break;
			}
		}
	}
	return bSuccess;
}

BOOL CALTELDatabaseEngine::LoadGRDs()
{
	INT  nLayout;
	INT  nLayouts;
	INT  nParameter;
	INT  nParameters;
	BOOL  bSuccess;
	CUIntArray  nColumns;
	CGRDLayout  *pLayout;
	CGRDLayoutParameter  *pParameter;
	CALTELDatabaseGRDDirectoryRecordset  cDatabaseGRDDirectory(this);
	CALTELDatabaseGRDParametersRecordset  cDatabaseGRDParameters(this);

	try
	{
		bSuccess = cDatabaseGRDDirectory.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_GPF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseGRDDirectory.IsOpen())
	{
		for (GetGRDs()->RemoveAll(); !cDatabaseGRDDirectory.IsBOF() && !cDatabaseGRDDirectory.IsEOF(); )
		{
			if ((pLayout = new CGRDLayout) != (CGRDLayout *)NULL)
			{
				pLayout->SetName(cDatabaseGRDDirectory.GetName());
				pLayout->SetTitle(cDatabaseGRDDirectory.GetTitle());
				pLayout->SetType(cDatabaseGRDDirectory.GetType());
				pLayout->SetMode(cDatabaseGRDDirectory.GetMode());
				pLayout->SetInterval(SECONDSPERMINUTE*cDatabaseGRDDirectory.GetInterval());
				pLayout->SetUpdateInterval(SECONDSPERMINUTE*cDatabaseGRDDirectory.GetUpdateInterval());
				pLayout->SetDuration(SECONDSPERMINUTE*(MINUTESPERHOUR*(HOURSPERDAY*cDatabaseGRDDirectory.GetDays() + cDatabaseGRDDirectory.GetHours()) + cDatabaseGRDDirectory.GetMinutes()));
				pLayout->SetPlotSize(CSize(cDatabaseGRDDirectory.GetWidth(), cDatabaseGRDDirectory.GetHeight()));
				pLayout->SetGrids(cDatabaseGRDDirectory.GetXGrids(), cDatabaseGRDDirectory.GetYGrids());
				pLayout->SetTicks(cDatabaseGRDDirectory.GetXTicks(), cDatabaseGRDDirectory.GetYTicks());
				pLayout->SetGridsWidth((cDatabaseGRDDirectory.GetGridsWidth() > 0) ? cDatabaseGRDDirectory.GetGridsWidth() : pLayout->GetGridsWidth());
				pLayout->SetTicksWidth((cDatabaseGRDDirectory.GetTicksWidth() > 0) ? cDatabaseGRDDirectory.GetTicksWidth() : pLayout->GetTicksWidth());
				pLayout->SetGridsColor((cDatabaseGRDDirectory.GetGridsColor() != -1) ? (COLORREF)cDatabaseGRDDirectory.GetGridsColor() : pLayout->GetGridsColor());
				pLayout->SetTicksColor((cDatabaseGRDDirectory.GetTicksColor() != -1) ? (COLORREF)cDatabaseGRDDirectory.GetTicksColor() : pLayout->GetTicksColor());
				pLayout->SetLabelColor((cDatabaseGRDDirectory.GetLabelColor() != -1) ? (COLORREF)cDatabaseGRDDirectory.GetLabelColor() : pLayout->GetLabelColor());
				pLayout->SetBackgroundColor((cDatabaseGRDDirectory.GetBkgndColor() != -1) ? (COLORREF)cDatabaseGRDDirectory.GetBkgndColor() : pLayout->GetBackgroundColor());
				pLayout->SetColumns((cDatabaseGRDDirectory.GetColumns(nColumns)) ? nColumns : nColumns);
				pLayout->SetParameters(cDatabaseGRDDirectory.GetParameters());
				pLayout->SetSize(min(max(cDatabaseGRDDirectory.GetParameters(), 0), 10));
				pLayout->SetStatus(cDatabaseGRDDirectory.GetStatus());
				if (GetGRDs()->Find(cDatabaseGRDDirectory.GetName()) < 0)
				{
					if (GetGRDs()->Add(pLayout) >= 0)
					{
						try
						{
							cDatabaseGRDDirectory.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pLayout;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabaseGRDDirectory.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseGRDDirectory.Close();
	}
	try
	{
		bSuccess &= cDatabaseGRDParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_GPFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabaseGRDParameters.IsOpen())
	{
		while (!cDatabaseGRDParameters.IsBOF() && !cDatabaseGRDParameters.IsEOF())
		{
			if ((pLayout = GetGRDs()->GetAt(GetGRDs()->Find(cDatabaseGRDParameters.GetName()))))
			{
				if ((pParameter = new CGRDLayoutParameter) != (CGRDLayoutParameter *)NULL)
				{
					pParameter->SetName(cDatabaseGRDParameters.GetParameter());
					pParameter->SetPosition(cDatabaseGRDParameters.GetPosition());
					pParameter->SetAttributes(cDatabaseGRDParameters.GetMode());
					pParameter->SetRange(cDatabaseGRDParameters.GetMinimum(), cDatabaseGRDParameters.GetMaximum());
					pParameter->SetOccurrence(cDatabaseGRDParameters.GetOccurrence());
					pParameter->SetComment(cDatabaseGRDParameters.GetComment());
					pParameter->SetDigits(cDatabaseGRDParameters.GetDigits());
					pParameter->SetLineStyle(cDatabaseGRDParameters.GetLineStyle());
					pParameter->SetLineSymbol(cDatabaseGRDParameters.GetLineSymbol());
					pParameter->SetLineWidth((cDatabaseGRDParameters.GetLineWidth() > 0) ? cDatabaseGRDParameters.GetLineWidth() : pParameter->GetLineWidth());
					pParameter->SetColor((cDatabaseGRDParameters.GetColor() != -1) ? (COLORREF)cDatabaseGRDParameters.GetColor() : GetGRDIDColumnColor());
					for (nParameter = 0, nParameters = (INT)pLayout->GetSize(); nParameter < nParameters; nParameter++)
					{
						if (pLayout->GetAt(nParameter) == (CGRDLayoutParameter *)NULL)
						{
							pLayout->SetAt(nParameter, pParameter);
							break;
						}
					}
					for (; nParameter == nParameters; )
					{
						if (pLayout->Add(pParameter) >= 0) break;
						delete pParameter;
						break;
					}
				}
			}
			try
			{
				cDatabaseGRDParameters.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabaseGRDParameters.Close();
	}
	for (nLayout = 0, nLayouts = (INT)GetGRDs()->GetSize(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = (CGRDLayout *)GetGRDs()->GetAt(nLayout)) != (CGRDLayout *)NULL)
		{
			for (nParameter = 0, nParameters = (INT)pLayout->GetSize(); nParameter < nParameters; nParameter++)
			{
				if (!pLayout->GetAt(nParameter))
				{
					pLayout->SetSize(nParameter);
					break;
				}
			}
		}
	}
	return bSuccess;
}

BOOL CALTELDatabaseEngine::LoadMMDs()
{
	return CBinaryDatabase::Load(DATABASE_COMPONENT_MMD, TRUE);
}

BOOL CALTELDatabaseEngine::LoadPODs()
{
	INT  nPos[2];
	INT  nExpression;
	INT  nExpressions;
	CHAR  szNumber[32];
	BOOL  bSuccess;
	CString  szParameter;
	CByteArray  bNumbers;
	CByteArray  bFunctions;
	CByteArray  bOperators;
	CByteArray  bParameters;
	CPODLayout  *pLayout;
	CStringArray  szStack;
	CStringArray  szFunctions;
	CStringArray  szParameters;
	CPODLayoutExpression  *pExpression;
	CALTELDatabasePODDirectoryRecordset  cDatabasePODDirectory(this);

	try
	{
		bSuccess = cDatabasePODDirectory.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PPF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
		bSuccess = FALSE;
	}
	if (cDatabasePODDirectory.IsOpen())
	{
		for (GetPODs()->RemoveAll(); !cDatabasePODDirectory.IsBOF() && !cDatabasePODDirectory.IsEOF(); )
		{
			if ((pLayout = new CPODLayout) != (CPODLayout *)NULL)
			{
				pLayout->SetName(cDatabasePODDirectory.GetName());
				pLayout->SetTitle(cDatabasePODDirectory.GetTitle());
				pLayout->SetColumns(cDatabasePODDirectory.GetColumns());
				cDatabasePODDirectory.GetExpressionStack(szStack, bFunctions, bOperators, bParameters, bNumbers);
				cDatabasePODDirectory.GetParameters(szParameters);
				cDatabasePODDirectory.GetFunctions(szFunctions);
				pLayout->SetParameters(szParameters);
				pLayout->SetFunctions(szFunctions);
				pLayout->SetExpressionColor((cDatabasePODDirectory.GetExpressionColor() != -1) ? (COLORREF)cDatabasePODDirectory.GetExpressionColor() : pLayout->GetExpressionColor());
				pLayout->SetParametersColor((cDatabasePODDirectory.GetParametersColor() != -1) ? (COLORREF)cDatabasePODDirectory.GetParametersColor() : pLayout->GetParametersColor());
				pLayout->SetFunctionsColor((cDatabasePODDirectory.GetFunctionsColor() != -1) ? (COLORREF)cDatabasePODDirectory.GetFunctionsColor() : pLayout->GetFunctionsColor());
				pLayout->SetStatus(cDatabasePODDirectory.GetStatus());
				for (nExpression = 0, nExpressions = (INT)szStack.GetSize(); nExpression < nExpressions; nExpression++)
				{
					if ((pExpression = new CPODLayoutExpression))
					{
						if (bFunctions.GetAt(nExpression))
						{
							pExpression->SetFunction(szStack.GetAt(nExpression));
							if (pLayout->Add(pExpression) >= 0) continue;
						}
						if (bOperators.GetAt(nExpression))
						{
							pExpression->SetOperator(szStack.GetAt(nExpression));
							if (pLayout->Add(pExpression) >= 0) continue;
						}
						if (bParameters.GetAt(nExpression))
						{
							for (szParameter.Format(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERFORMAT), EMPTYSTRING, 0, 0); !szParameter.IsEmpty(); )
							{
								nPos[0] = szStack.GetAt(nExpression).Find(szParameter.GetAt(0));
								nPos[1] = szStack.GetAt(nExpression).Find(szParameter.GetAt(szParameter.GetLength() / 2));
								break;
							}
							if (nPos[0] >= 0 && nPos[1] >= 0)
							{
								pExpression->SetParameter(szStack.GetAt(nExpression).Left(nPos[0]), _ttoi(szStack.GetAt(nExpression).Mid(nPos[0] + 1)), (_ttoi(szStack.GetAt(nExpression).Mid(nPos[1] + 1)) > 0) ? TRUE : FALSE);
								if (pLayout->Add(pExpression) >= 0) continue;
							}
						}
						if (bNumbers.GetAt(nExpression))
						{
#ifndef UNICODE
							strcpy_s(szNumber, sizeof(szNumber) / sizeof(CHAR), szStack.GetAt(nExpression));
#else
							WideCharToMultiByte(CP_ACP, 0, szStack.GetAt(nExpression), -1, szNumber, sizeof(szNumber) / sizeof(CHAR), (LPCSTR)NULL, (LPBOOL)NULL);
#endif
							pExpression->SetNumber(atof(szNumber));
							if (pLayout->Add(pExpression) >= 0) continue;
						}
						delete pExpression;
					}
					break;
				}
				if (GetPODs()->Find(cDatabasePODDirectory.GetName()) < 0)
				{
					if (GetPODs()->Add(pLayout) >= 0)
					{
						try
						{
							cDatabasePODDirectory.MoveNext();
						}
						catch (CException *pException)
						{
							pException->Delete();
							bSuccess = FALSE;
							break;
						}
						continue;
					}
				}
				delete pLayout;
			}
			else
			{
				bSuccess = FALSE;
				break;
			}
			try
			{
				cDatabasePODDirectory.MoveNext();
			}
			catch (CException *pException)
			{
				pException->Delete();
				bSuccess = FALSE;
				break;
			}
		}
		cDatabasePODDirectory.Close();
	}
	return bSuccess;
}

BOOL CALTELDatabaseEngine::LoadScripts()
{
	return CBinaryDatabase::Load(DATABASE_COMPONENT_SCRIPT, TRUE);
}

VOID CALTELDatabaseEngine::CompileTMPackets(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nPacket;
	INT  nPackets;
	INT  nStream[2];
	INT  nStreams[2];
	INT  nPosition[3];
	CString  szMessage;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTMPacketHeader  *pDatabaseTMPacketHeader;
	CDatabaseTMPacketStream  *pDatabaseTMPacketStream[2];
	CALTELDatabaseTMPacketsRecordset  cDatabaseTMPackets(this);
	CALTELDatabaseTMPacketHeadersRecordset  cDatabaseTMPacketHeaders(this);
	CALTELDatabaseTMPacketStreamsRecordset  cDatabaseTMPacketStreams(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TMPACKETS));
	try
	{
		cDatabaseTMPacketHeaders.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_DFH_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMPacketHeaders.IsOpen())
	{
		for (pDatabase->GetTMPacketHeaders()->RemoveAll(); !cDatabaseTMPacketHeaders.IsBOF() && !cDatabaseTMPacketHeaders.IsEOF() && IsCompiling(); )
		{
			if ((pDatabaseTMPacketHeader = new CDatabaseTMPacketHeader))
			{
				pDatabaseTMPacketHeader->SetName(cDatabaseTMPacketHeaders.GetName());
				cDatabaseTMPacketHeaders.GetTMTypePosition(nPosition[0], nPosition[1], nPosition[2]);
				pDatabaseTMPacketHeader->SetTMTypePosition(nPosition[0], nPosition[1], nPosition[2]);
				cDatabaseTMPacketHeaders.GetTMIDPosition(nPosition[0], nPosition[1], nPosition[2]);
				pDatabaseTMPacketHeader->SetTMIDPosition(nPosition[0], nPosition[1], nPosition[2]);
				cDatabaseTMPacketHeaders.Get3DiscPosition(nPosition[0], nPosition[1], nPosition[2]);
				pDatabaseTMPacketHeader->Set3DiscPosition(nPosition[0], nPosition[1], nPosition[2]);
				cDatabaseTMPacketHeaders.GetTimestampPosition(nPosition[0], nPosition[1], nPosition[2]);
				pDatabaseTMPacketHeader->SetTimestampPosition(nPosition[0], nPosition[1], nPosition[2]);
				if ((nIndex = pDatabase->GetTMPacketHeaders()->Find(cDatabaseTMPacketHeaders.GetName())) < 0 && pDatabase->GetTMPacketHeaders()->Add(pDatabaseTMPacketHeader) < 0)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETHEADER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMPacketHeaders.GetName());
					cDatabaseTMPacketHeaders.ShowError(szMessage);
					delete pDatabaseTMPacketHeader;
					break;
				}
				if (nIndex >= 0)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETHEADER_DUPLICATENAME), (LPCTSTR)cDatabaseTMPacketHeaders.GetName());
					cDatabaseTMPacketHeaders.ShowError(szMessage);
					delete pDatabaseTMPacketHeader;
				}
				ShowCompileMessages(&cDatabaseTMPacketHeaders);
			}
			else
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETHEADER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMPacketHeaders.GetName());
				cDatabaseTMPacketHeaders.ShowError(szMessage);
				break;
			}
			try
			{
				cDatabaseTMPacketHeaders.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETHEADERS_READ_FAILURE));
				cDatabaseTMPacketHeaders.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETHEADER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMPacketHeaders.GetName());
				cDatabaseTMPacketHeaders.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTMPacketHeaders);
		cDatabaseTMPacketHeaders.Close();
	}
	else
	{
		cDatabaseTMPacketHeaders.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMPACKETHEADERS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMPacketHeaders);
	}
	try
	{
		cDatabaseTMPackets.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PMF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMPackets.IsOpen())
	{
		for (pDatabase->GetTMPackets()->RemoveAll(); !cDatabaseTMPackets.IsBOF() && !cDatabaseTMPackets.IsEOF() && IsCompiling(); )
		{
			if (cDatabaseTMPackets.GetStatus() & TMPACKET_RECORDSTATUS_DEFAULT)
			{
				if ((pDatabaseTMPacket = new CDatabaseTMPacket))
				{
					pDatabaseTMPacket->SetTag(cDatabaseTMPackets.GetTag());
					pDatabaseTMPacket->SetDescription(cDatabaseTMPackets.GetDescription());
					pDatabaseTMPacket->SetDetails(cDatabaseTMPackets.GetDetails());
					pDatabaseTMPacket->SetDataFieldHeader(cDatabaseTMPackets.GetDataFieldHeader());
					pDatabaseTMPacket->SetAPID(cDatabaseTMPackets.GetAPID());
					pDatabaseTMPacket->SetTMID(cDatabaseTMPackets.GetTMID());
					pDatabaseTMPacket->SetTMType(cDatabaseTMPackets.GetTMType());
					pDatabaseTMPacket->Set3Disc(cDatabaseTMPackets.Get3Disc());
					pDatabaseTMPacket->SetDataSize(cDatabaseTMPackets.GetDataSize());
					pDatabaseTMPacket->SetTransmissionRate(cDatabaseTMPackets.GetTransmissionRate());
					pDatabaseTMPacket->SetTransmissionRetries(cDatabaseTMPackets.GetTransmissionRetries());
					pDatabaseTMPacket->SetVirtualChannel(cDatabaseTMPackets.GetVirtualChannel());
					pDatabaseTMPacket->SetEventIDParameter(cDatabaseTMPackets.GetEventIDParameter());
					pDatabaseTMPacket->SetStatus(cDatabaseTMPackets.GetStatus());
					if ((pDatabaseTMPacketHeader = pDatabase->GetTMPacketHeaders()->GetAt(pDatabase->GetTMPacketHeaders()->Find(cDatabaseTMPackets.GetDataFieldHeader()))))
					{
						pDatabaseTMPacketHeader->GetTMTypePosition(nPosition[0], nPosition[1], nPosition[2]);
						pDatabaseTMPacket->SetTMTypePosition(nPosition[0], nPosition[1], nPosition[2]);
						pDatabaseTMPacketHeader->GetTMIDPosition(nPosition[0], nPosition[1], nPosition[2]);
						pDatabaseTMPacket->SetTMIDPosition(nPosition[0], nPosition[1], nPosition[2]);
						pDatabaseTMPacketHeader->Get3DiscPosition(nPosition[0], nPosition[1], nPosition[2]);
						pDatabaseTMPacket->Set3DiscPosition(nPosition[0], nPosition[1], nPosition[2]);
						pDatabaseTMPacketHeader->GetTimestampPosition(nPosition[0], nPosition[1], nPosition[2]);
						pDatabaseTMPacket->SetTimestampPosition(nPosition[0], nPosition[1], nPosition[2]);
					}
					if ((nIndex = pDatabase->GetTMPackets()->Find(cDatabaseTMPackets.GetTag())) < 0 && pDatabase->GetTMPackets()->Add(pDatabaseTMPacket) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKET_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMPackets.GetTag());
						cDatabaseTMPackets.ShowError(szMessage);
						delete pDatabaseTMPacket;
						break;
					}
					if (nIndex < 0)
					{
						if (cDatabaseTMPackets.HasDataFieldHeader() && pDatabase->GetTMPacketHeaders()->Find(cDatabaseTMPackets.GetDataFieldHeader()) < 0)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKET_ILLEGALDATAFIELDHEADERNAME), (LPCTSTR)cDatabaseTMPackets.GetTag());
							cDatabaseTMPackets.ShowError(szMessage);
						}
						for (nPacket = 0, nPackets = (INT)pDatabase->GetTMPackets()->GetSize(); nPacket < nPackets; nPacket++)
						{
							if (pDatabase->GetTMPackets()->GetAt(nPacket)->GetTag() != cDatabaseTMPackets.GetTag() && pDatabase->GetTMPackets()->GetAt(nPacket)->GetAPID() == cDatabaseTMPackets.GetAPID() && cDatabaseTMPackets.GetAPID() >= 0)
							{
								if ((!pDatabase->GetTMPackets()->GetAt(nPacket)->GetDataFieldHeader().IsEmpty() && !cDatabaseTMPackets.HasDataFieldHeader()) || (pDatabase->GetTMPackets()->GetAt(nPacket)->GetDataFieldHeader().IsEmpty() && cDatabaseTMPackets.HasDataFieldHeader()))
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKET_ILLEGALDATAFIELDHEADERFLAG), (LPCTSTR)cDatabaseTMPackets.GetTag());
									cDatabaseTMPackets.ShowError(szMessage);
									break;
								}
								if (!cDatabaseTMPackets.HasDataFieldHeader() || pDatabase->GetTMPacketHeaders()->Find(cDatabaseTMPackets.GetDataFieldHeader()) >= 0)
								{
									if (!pDatabase->GetTMPackets()->GetAt(nPacket)->GetDataFieldHeader().IsEmpty() && pDatabase->GetTMPackets()->GetAt(nPacket)->GetDataFieldHeader() != cDatabaseTMPackets.GetDataFieldHeader())
									{
										szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKET_ILLEGALDATAFIELDHEADERNAME), (LPCTSTR)cDatabaseTMPackets.GetTag());
										cDatabaseTMPackets.ShowError(szMessage);
										break;
									}
								}
							}
						}
						for (nPacket = 0, nPackets = (INT)pDatabase->GetTMPackets()->GetSize(); nPacket < nPackets; nPacket++)
						{
							if (pDatabase->GetTMPackets()->GetAt(nPacket)->GetTag() != cDatabaseTMPackets.GetTag() && pDatabase->GetTMPackets()->GetAt(nPacket)->GetAPID() == cDatabaseTMPackets.GetAPID())
							{
								if (pDatabase->GetTMPackets()->GetAt(nPacket)->GetVirtualChannel() != cDatabaseTMPackets.GetVirtualChannel() && CheckTMPacketVirtualChannel(pDatabase->GetTMPackets()->GetAt(nPacket)->GetAPID(), pDatabase->GetTMPackets()->GetAt(nPacket)->GetVirtualChannel()))
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKET_ILLEGALVIRTUALCHANNEL), (LPCTSTR)cDatabaseTMPackets.GetTag());
									cDatabaseTMPackets.ShowError(szMessage);
									break;
								}
							}
						}
						for (nPacket = 0, nPackets = (INT)pDatabase->GetTMPackets()->GetSize(); nPacket < nPackets; nPacket++)
						{
							if (pDatabase->GetTMPackets()->GetAt(nPacket)->GetTag() != cDatabaseTMPackets.GetTag() && pDatabase->GetTMPackets()->GetAt(nPacket)->GetAPID() == cDatabaseTMPackets.GetAPID() && pDatabase->GetTMPackets()->GetAt(nPacket)->GetTMID() == cDatabaseTMPackets.GetTMID() && pDatabase->GetTMPackets()->GetAt(nPacket)->GetTMType() == cDatabaseTMPackets.GetTMType())
							{
								if (pDatabase->GetTMPackets()->GetAt(nPacket)->Get3Disc() >= 0 && pDatabase->GetTMPackets()->GetAt(nPacket)->Get3Disc() == cDatabaseTMPackets.Get3Disc())
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKET_ILLEGAL3DISC), (LPCTSTR)cDatabaseTMPackets.GetTag());
									cDatabaseTMPackets.ShowError(szMessage);
									break;
								}
							}
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKET_DUPLICATETAG), (LPCTSTR)cDatabaseTMPackets.GetTag());
						cDatabaseTMPackets.ShowError(szMessage);
						delete pDatabaseTMPacket;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKET_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMPackets.GetTag());
					cDatabaseTMPackets.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTMPackets);
			}
			try
			{
				cDatabaseTMPackets.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETS_READ_FAILURE));
				cDatabaseTMPackets.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKET_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMPackets.GetTag());
				cDatabaseTMPackets.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTMPackets);
		cDatabaseTMPackets.Close();
	}
	else
	{
		cDatabaseTMPackets.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMPACKETS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMPackets);
	}
	try
	{
		cDatabaseTMPacketStreams.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_STR_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMPacketStreams.IsOpen())
	{
		for (pDatabase->GetTMPacketStreams()->RemoveAll(); !cDatabaseTMPacketStreams.IsBOF() && !cDatabaseTMPacketStreams.IsEOF() && IsCompiling(); )
		{
			if ((pDatabaseTMPacketStream[0] = new CDatabaseTMPacketStream))
			{
				pDatabaseTMPacketStream[0]->SetName(cDatabaseTMPacketStreams.GetName());
				pDatabaseTMPacketStream[0]->SetAPID(cDatabaseTMPacketStreams.GetAPID());
				pDatabaseTMPacketStream[0]->SetTMID(cDatabaseTMPacketStreams.GetTMID());
				pDatabaseTMPacketStream[0]->SetPeriod(cDatabaseTMPacketStreams.GetPeriod());
				pDatabaseTMPacketStream[0]->SetTimeout(cDatabaseTMPacketStreams.GetTimeout());
				pDatabaseTMPacketStream[0]->SetValidityParameter(cDatabaseTMPacketStreams.GetValidityParameter());
				pDatabaseTMPacketStream[0]->SetValidityValue((!cDatabaseTMPacketStreams.GetValidityParameter().IsEmpty()) ? 1 : -1);
				if ((nIndex = pDatabase->GetTMPacketStreams()->Find(cDatabaseTMPacketStreams.GetName())) < 0 && pDatabase->GetTMPacketStreams()->Add(pDatabaseTMPacketStream[0]) < 0)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETSTREAM_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMPacketStreams.GetName());
					cDatabaseTMPacketStreams.ShowError(szMessage);
					delete pDatabaseTMPacketStream[0];
					break;
				}
				if (nIndex >= 0)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETSTREAM_DUPLICATENAME), (LPCTSTR)cDatabaseTMPacketStreams.GetName());
					cDatabaseTMPacketStreams.ShowError(szMessage);
					delete pDatabaseTMPacketStream[0];
				}
				ShowCompileMessages(&cDatabaseTMPacketStreams);
			}
			else
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETSTREAM_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMPacketStreams.GetName());
				cDatabaseTMPacketStreams.ShowError(szMessage);
				break;
			}
			try
			{
				cDatabaseTMPacketStreams.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETSTREAMS_READ_FAILURE));
				cDatabaseTMPacketStreams.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETSTREAM_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMPacketStreams.GetName());
				cDatabaseTMPacketStreams.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nStream[0] = 0, nStreams[0] = (INT)pDatabase->GetTMPacketStreams()->GetSize(); nStream[0] < nStreams[0]; nStream[0]++)
		{
			if ((pDatabaseTMPacketStream[0] = pDatabase->GetTMPacketStreams()->GetAt(nStream[0])))
			{
				for (nStream[1] = nStream[0] + 1, nStreams[1] = nStreams[0]; nStream[1] < nStreams[1]; nStream[1]++)
				{
					if ((pDatabaseTMPacketStream[1] = pDatabase->GetTMPacketStreams()->GetAt(nStream[1])))
					{
						if (pDatabaseTMPacketStream[0]->GetAPID() == pDatabaseTMPacketStream[1]->GetAPID())
						{
							if ((pDatabaseTMPacketStream[0]->GetTMID() < 0 && pDatabaseTMPacketStream[1]->GetTMID() >= 0) || (pDatabaseTMPacketStream[0]->GetTMID() >= 0 && pDatabaseTMPacketStream[1]->GetTMID() < 0) || (pDatabaseTMPacketStream[0]->GetTMID() == pDatabaseTMPacketStream[1]->GetTMID() && pDatabaseTMPacketStream[0]->GetValidityParameter() == pDatabaseTMPacketStream[1]->GetValidityParameter()) || (pDatabaseTMPacketStream[0]->GetTMID() < 0 && pDatabaseTMPacketStream[1]->GetTMID() < 0 && (pDatabaseTMPacketStream[0]->GetValidityParameter().IsEmpty() || pDatabaseTMPacketStream[1]->GetValidityParameter().IsEmpty())))
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETSTREAM_CONFLICTINGNAME), (LPCTSTR)pDatabaseTMPacketStream[0]->GetName(), (LPCTSTR)pDatabaseTMPacketStream[1]->GetName());
								cDatabaseTMPacketStreams.ShowError(pDatabaseTMPacketStream[0]->GetName(), szMessage);
							}
						}
					}
				}
				for (nPacket = 0, nPackets = (INT)pDatabase->GetTMPackets()->GetSize(); nPacket < nPackets; nPacket++)
				{
					if ((pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt(nPacket)) != (CDatabaseTMPacket *)NULL)
					{
						if (pDatabaseTMPacketStream[0]->GetAPID() == pDatabaseTMPacket->GetAPID()) break;
						continue;
					}
				}
				if (nPacket == nPackets)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETSTREAM_ILLEGALAPID), (LPCTSTR)pDatabaseTMPacketStream[0]->GetName());
					cDatabaseTMPacketStreams.ShowError(pDatabaseTMPacketStream[0]->GetName(), szMessage);
				}
				for (nPacket = 0, nPackets = (pDatabaseTMPacketStream[0]->GetTMID() >= 0) ? (INT)pDatabase->GetTMPackets()->GetSize() : -1; nPacket < nPackets; nPacket++)
				{
					if ((pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt(nPacket)) != (CDatabaseTMPacket *)NULL)
					{
						if (pDatabaseTMPacketStream[0]->GetAPID() != pDatabaseTMPacket->GetAPID()) continue;
						if (pDatabaseTMPacketStream[0]->GetTMID() != pDatabaseTMPacket->GetTMID()) continue;
						break;
					}
				}
				if (nPacket == nPackets)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETSTREAM_ILLEGALTMID), (LPCTSTR)pDatabaseTMPacketStream[0]->GetName());
					cDatabaseTMPacketStreams.ShowError(pDatabaseTMPacketStream[0]->GetName(), szMessage);
				}
			}
		}
		ShowCompileMessages(&cDatabaseTMPacketStreams);
		cDatabaseTMPacketStreams.Close();
	}
	else
	{
		cDatabaseTMPacketStreams.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMPACKETSTREAMS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMPacketStreams);
	}
}

VOID CALTELDatabaseEngine::CompileTCPackets(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nPacket;
	INT  nPackets;
	CString  szMessage;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CALTELDatabaseTCPacketsRecordset  cDatabaseTCPackets(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCPACKETS));
	try
	{
		cDatabaseTCPackets.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_TCP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCPackets.IsOpen())
	{
		for (pDatabase->GetTCPackets()->RemoveAll(); !cDatabaseTCPackets.IsBOF() && !cDatabaseTCPackets.IsEOF() && IsCompiling(); )
		{
			if ((cDatabaseTCPackets.GetStatus() & TCPACKET_RECORDSTATUS_DEFAULT) >= TCPACKET_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTCPacket = new CDatabaseTCPacket))
				{
					pDatabaseTCPacket->SetTag(cDatabaseTCPackets.GetTag());
					pDatabaseTCPacket->SetDescription(cDatabaseTCPackets.GetDescription());
					pDatabaseTCPacket->SetDetails(cDatabaseTCPackets.GetDetails());
					pDatabaseTCPacket->SetAPID(cDatabaseTCPackets.GetAPID());
					pDatabaseTCPacket->SetDataSize(cDatabaseTCPackets.GetDataSize());
					pDatabaseTCPacket->SetDataFieldHeaderFlag(cDatabaseTCPackets.GetDataFieldHeaderFlag());
					pDatabaseTCPacket->SetStatus(cDatabaseTCPackets.GetStatus());
					if ((nIndex = pDatabase->GetTCPackets()->Find(cDatabaseTCPackets.GetTag())) < 0 && pDatabase->GetTCPackets()->Add(pDatabaseTCPacket) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKET_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCPackets.GetTag());
						cDatabaseTCPackets.ShowError(szMessage);
						delete pDatabaseTCPacket;
						break;
					}
					if (nIndex < 0)
					{
						for (nPacket = 0, nPackets = (INT)pDatabase->GetTCPackets()->GetSize(); nPacket < nPackets; nPacket++)
						{
							if (pDatabase->GetTCPackets()->GetAt(nPacket)->GetTag() != cDatabaseTCPackets.GetTag() && pDatabase->GetTCPackets()->GetAt(nPacket)->GetAPID() == cDatabaseTCPackets.GetAPID())
							{
								if (pDatabase->GetTCPackets()->GetAt(nPacket)->GetDataFieldHeaderFlag() != cDatabaseTCPackets.GetDataFieldHeaderFlag())
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKET_ILLEGALDATAFIELDHEADERFLAG), (LPCTSTR)cDatabaseTCPackets.GetTag());
									cDatabaseTCPackets.ShowError(szMessage);
									break;
								}
							}
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKET_DUPLICATETAG), (LPCTSTR)cDatabaseTCPackets.GetTag());
						cDatabaseTCPackets.ShowError(szMessage);
						delete pDatabaseTCPacket;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKET_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCPackets.GetTag());
					cDatabaseTCPackets.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTCPackets);
			}
			try
			{
				cDatabaseTCPackets.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETS_READ_FAILURE));
				cDatabaseTCPackets.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKET_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCPackets.GetTag());
				cDatabaseTCPackets.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTCPackets);
		cDatabaseTCPackets.Close();
	}
	else
	{
		cDatabaseTCPackets.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCPACKETS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCPackets);
	}
}

VOID CALTELDatabaseEngine::CompileTCFunctions(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nFunction;
	INT  nFunctions;
	CString  szMessage;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CALTELDatabaseTCFunctionsRecordset  cDatabaseTCFunctions(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCFUNCTIONS));
	try
	{
		cDatabaseTCFunctions.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CCF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCFunctions.IsOpen())
	{
		for (pDatabase->GetTCFunctions()->RemoveAll(); !cDatabaseTCFunctions.IsBOF() && !cDatabaseTCFunctions.IsEOF() && IsCompiling(); )
		{
			if ((cDatabaseTCFunctions.GetStatus() & TCFUNCTION_RECORDSTATUS_DEFAULT) >= TCFUNCTION_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTCFunction = new CDatabaseTCFunction))
				{
					pDatabaseTCFunction->SetName(cDatabaseTCFunctions.GetName());
					pDatabaseTCFunction->SetDescription(cDatabaseTCFunctions.GetDescription());
					pDatabaseTCFunction->SetExtendedDescription(cDatabaseTCFunctions.GetExtendedDescription());
					pDatabaseTCFunction->SetDetails(cDatabaseTCFunctions.GetDetails());
					pDatabaseTCFunction->SetAttributes(cDatabaseTCFunctions.GetAttributes());
					pDatabaseTCFunction->SetTCPacket(cDatabaseTCFunctions.GetTCPacket());
					pDatabaseTCFunction->SetTCID(cDatabaseTCFunctions.GetTCID());
					pDatabaseTCFunction->SetDestinationSubSystem(cDatabaseTCFunctions.GetDestinationSubSystem());
					pDatabaseTCFunction->SetDestinationEquipment(cDatabaseTCFunctions.GetDestinationEquipment());
					pDatabaseTCFunction->SetRouterSubSystem(cDatabaseTCFunctions.GetRouterSubSystem());
					pDatabaseTCFunction->SetRouterEquipment(cDatabaseTCFunctions.GetRouterEquipment());
					pDatabaseTCFunction->SetOperationalInfo(cDatabaseTCFunctions.GetOperationalInfo());
					pDatabaseTCFunction->SetValidityConditions(cDatabaseTCFunctions.GetValidityConditions());
					pDatabaseTCFunction->SetAssociatedTelecommands(cDatabaseTCFunctions.GetAssociatedTelecommands());
					pDatabaseTCFunction->SetComplementaryTelecommands(cDatabaseTCFunctions.GetComplementaryTelecommands());
					pDatabaseTCFunction->SetDestinationSubSchedule(cDatabaseTCFunctions.GetDestinationSubSchedule());
					pDatabaseTCFunction->SetMissionPlannerEvent(cDatabaseTCFunctions.GetMissionPlannerEvent());
					pDatabaseTCFunction->SetPreExeGroup(cDatabaseTCFunctions.GetPreExeGroup());
					pDatabaseTCFunction->SetExeVerGroup(cDatabaseTCFunctions.GetExeVerGroup());
					pDatabaseTCFunction->SetStatus(cDatabaseTCFunctions.GetStatus());
					if ((nIndex = pDatabase->GetTCFunctions()->Find(cDatabaseTCFunctions.GetName())) < 0 && pDatabase->GetTCFunctions()->Add(pDatabaseTCFunction) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTION_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCFunctions.GetName());
						cDatabaseTCFunctions.ShowError(szMessage);
						delete pDatabaseTCFunction;
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTION_DUPLICATENAME), (LPCTSTR)cDatabaseTCFunctions.GetName());
						cDatabaseTCFunctions.ShowError(szMessage);
						delete pDatabaseTCFunction;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTION_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCFunctions.GetName());
					cDatabaseTCFunctions.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTCFunctions);
			}
			try
			{
				cDatabaseTCFunctions.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONS_READ_FAILURE));
				cDatabaseTCFunctions.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTION_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCFunctions.GetName());
				cDatabaseTCFunctions.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nFunction = 0, nFunctions = (INT)pDatabase->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
		{
			if ((pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
			{
				if ((pDatabaseTCPacket = pDatabase->GetTCPackets()->GetAt((nIndex = pDatabase->GetTCPackets()->Find(pDatabaseTCFunction->GetTCPacket())))))
				{
					if (!CheckTCPacketDataSize(pDatabaseTCFunction->GetAttributes(), (pDatabaseTCPacket->GetDataSize() > 0) ? TCPACKET_LENGTH_FIXED : TCPACKET_LENGTH_VARIABLE, pDatabaseTCPacket->GetDataSize()))
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTION_ILLEGALTCPACKETDATASIZE), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag());
						cDatabaseTCFunctions.ShowError(pDatabaseTCFunction->GetName(), szMessage);
					}
					pDatabaseTCFunction->SetTCPacketRef(nIndex);
					continue;
				}
				if (pDatabaseTCFunction->GetTCPacket().GetLength() > 0)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTION_ILLEGALTCPACKET), (LPCTSTR)pDatabaseTCFunction->GetName());
					cDatabaseTCFunctions.ShowError(pDatabaseTCFunction->GetName(), szMessage);
				}
			}
		}
		ShowCompileMessages(&cDatabaseTCFunctions);
		cDatabaseTCFunctions.Close();
	}
	else
	{
		cDatabaseTCFunctions.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCFunctions);
	}
}

VOID CALTELDatabaseEngine::CompileTCSequences(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nCount;
	INT  nElement;
	INT  nElements;
	INT  nEntry[2];
	INT  nEntries[2];
	INT  nSequence;
	INT  nSequences;
	INT  nMaxLength;
	INT  nByteOffset;
	INT  nBitOffset[2];
	INT  nBlockLength[2];
	DWORD  dwDelta;
	CString  szQuery;
	CString  szBlock;
	CString  szMessage;
	CTimeTag  tExecutionTime;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCSequence  *pDatabaseTCSequence[3];
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock;
	CDatabaseTCSequenceEntry  *pDatabaseTCSequenceEntry[3];
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CDatabaseTCFunctionBlockElement  *pDatabaseTCFunctionBlockElement;
	CALTELDatabaseTCSequencesRecordset  cDatabaseTCSequences(this);
	CALTELDatabaseTCSequenceEntriesRecordset  cDatabaseTCSequenceEntries(this);
	CALTELDatabaseTCSequenceParametersRecordset  cDatabaseTCSequenceParameters(this);
	CALTELDatabaseTCSequenceEntryParametersRecordset  cDatabaseTCSequenceEntryParameters(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCSEQUENCES));
	try
	{
		cDatabaseTCSequences.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CSF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCSequences.IsOpen())
	{
		for (pDatabase->GetTCSequences()->RemoveAll(); !cDatabaseTCSequences.IsBOF() && !cDatabaseTCSequences.IsEOF() && IsCompiling(); )
		{
			if ((cDatabaseTCSequences.GetStatus() & TCSEQUENCE_RECORDSTATUS_DEFAULT) >= TCSEQUENCE_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTCSequence[0] = new CDatabaseTCSequence))
				{
					pDatabaseTCSequence[0]->SetName(cDatabaseTCSequences.GetName());
					pDatabaseTCSequence[0]->SetDescription(cDatabaseTCSequences.GetDescription());
					pDatabaseTCSequence[0]->SetUser(cDatabaseTCSequences.GetUser());
					pDatabaseTCSequence[0]->SetDate(cDatabaseTCSequences.GetDate());
					pDatabaseTCSequence[0]->SetDestinationSubSchedule(cDatabaseTCSequences.GetDestinationSubSchedule());
					pDatabaseTCSequence[0]->SetMissionPlannerEvent(cDatabaseTCSequences.GetMissionPlannerEvent());
					pDatabaseTCSequence[0]->SetDocumentName(cDatabaseTCSequences.GetDocumentName());
					pDatabaseTCSequence[0]->SetDocumentIssue(cDatabaseTCSequences.GetDocumentIssue());
					pDatabaseTCSequence[0]->SetDocumentDate(cDatabaseTCSequences.GetDocumentDate());
					pDatabaseTCSequence[0]->SetStatus(cDatabaseTCSequences.GetStatus());
					if ((nIndex = pDatabase->GetTCSequences()->Find(cDatabaseTCSequences.GetName())) < 0 && pDatabase->GetTCSequences()->Add(pDatabaseTCSequence[0]) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCSequences.GetName());
						cDatabaseTCSequences.ShowError(szMessage);
						delete pDatabaseTCSequence[0];
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCE_DUPLICATENAME), (LPCTSTR)cDatabaseTCSequences.GetName());
						cDatabaseTCSequences.ShowError(szMessage);
						delete pDatabaseTCSequence[0];
					}
					if ((nIndex = pDatabase->GetTCSequences()->Find(cDatabaseTCSequences.GetName())) >= 0)
					{
						try
						{
							cDatabaseTCSequenceEntries.EnableErrors(FALSE);
							cDatabaseTCSequenceEntries.EnableWarnings(FALSE);
							szQuery.Format(STRING(IDS_DATABASE_TABLE_CSS_SQLFINDSET), (LPCTSTR)cDatabaseTCSequences.GetName());
							cDatabaseTCSequenceEntries.Open(CRecordset::snapshot, szQuery, CRecordset::readOnly);
							cDatabaseTCSequenceEntries.EnableWarnings(TRUE);
							cDatabaseTCSequenceEntries.EnableErrors(TRUE);
						}
						catch (CException *pException)
						{
							pException->Delete();
						}
						if (cDatabaseTCSequenceEntries.IsOpen())
						{
							for (nCount = 0; !cDatabaseTCSequenceEntries.IsBOF() && !cDatabaseTCSequenceEntries.IsEOF(); )
							{
								nCount++;
								try
								{
									cDatabaseTCSequenceEntries.MoveNext();
								}
								catch (...)
								{
									break;
								}
							}
							if (nCount != cDatabaseTCSequences.GetEntryCount())
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCSEQUENCE_NONTALLYINGELEMENTS), (LPCTSTR)cDatabaseTCSequences.GetName());
								cDatabaseTCSequences.ShowWarning(szMessage);
							}
							cDatabaseTCSequenceEntries.Close();
						}
						try
						{
							cDatabaseTCSequenceParameters.EnableErrors(FALSE);
							cDatabaseTCSequenceParameters.EnableWarnings(FALSE);
							szQuery.Format(STRING(IDS_DATABASE_TABLE_CSP_SQLFINDSET), (LPCTSTR)cDatabaseTCSequences.GetName());
							cDatabaseTCSequenceParameters.Open(CRecordset::snapshot, szQuery, CRecordset::readOnly);
							cDatabaseTCSequenceParameters.EnableWarnings(TRUE);
							cDatabaseTCSequenceParameters.EnableErrors(TRUE);
						}
						catch (CException *pException)
						{
							pException->Delete();
						}
						if (cDatabaseTCSequenceParameters.IsOpen())
						{
							for (nCount = 0; !cDatabaseTCSequenceParameters.IsBOF() && !cDatabaseTCSequenceParameters.IsEOF(); )
							{
								nCount++;
								try
								{
									cDatabaseTCSequenceParameters.MoveNext();
								}
								catch (...)
								{
									break;
								}
							}
							if (nCount != cDatabaseTCSequences.GetParameterCount())
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCSEQUENCE_NONTALLYINGPARAMETERS), (LPCTSTR)cDatabaseTCSequences.GetName());
								cDatabaseTCSequences.ShowWarning(szMessage);
							}
							cDatabaseTCSequenceParameters.Close();
						}
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCSequences.GetName());
					cDatabaseTCSequences.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTCSequences);
			}
			try
			{
				cDatabaseTCSequences.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCES_READ_FAILURE));
				cDatabaseTCSequences.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCSequences.GetName());
				cDatabaseTCSequences.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTCSequences);
		cDatabaseTCSequences.Close();
	}
	else
	{
		cDatabaseTCSequences.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCES_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCSequences);
	}
	try
	{
		cDatabaseTCSequenceEntries.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CSS_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCSequenceEntries.IsOpen())
	{
		for (nSequence = 0, nSequences = (INT)pDatabase->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
		{
			if ((pDatabaseTCSequence[0] = pDatabase->GetTCSequences()->GetAt(nSequence)))
			{
				pDatabaseTCSequence[0]->RemoveAll();
				continue;
			}
		}
		while (!cDatabaseTCSequenceEntries.IsBOF() && !cDatabaseTCSequenceEntries.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTCSequence[0] = pDatabase->GetTCSequences()->GetAt(pDatabase->GetTCSequences()->Find(cDatabaseTCSequenceEntries.GetSequence()))))
			{
				if ((pDatabaseTCSequenceEntry[0] = new CDatabaseTCSequenceEntry))
				{
					pDatabaseTCSequenceEntry[0]->SetName(cDatabaseTCSequenceEntries.GetName());
					pDatabaseTCSequenceEntry[0]->SetDescription(cDatabaseTCSequenceEntries.GetDescription());
					pDatabaseTCSequenceEntry[0]->SetAttributes(cDatabaseTCSequenceEntries.GetAttributes());
					pDatabaseTCSequenceEntry[0]->SetAssociated1Step(cDatabaseTCSequenceEntries.GetAssociated1Step());
					pDatabaseTCSequenceEntry[0]->SetBlockMembership(cDatabaseTCSequenceEntries.GetBlockMembership());
					pDatabaseTCSequenceEntry[0]->SetReleaseDeltaTime(cDatabaseTCSequenceEntries.GetReleaseDeltaTime());
					pDatabaseTCSequenceEntry[0]->SetExecutionTime(cDatabaseTCSequenceEntries.GetExecutionTime());
					pDatabaseTCSequenceEntry[0]->SetExecutionDeltaTime(cDatabaseTCSequenceEntries.GetExecutionDeltaTime(), cDatabaseTCSequenceEntries.IsEarlierExecutionDeltaTime());
					if ((pDatabaseTCSequenceEntry[1] = pDatabaseTCSequence[0]->GetAt((nIndex = cDatabaseTCSequenceEntries.GetEntry() - 1))) && nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_DUPLICATEENTRYNAME), (LPCTSTR)cDatabaseTCSequenceEntries.GetSequence(), cDatabaseTCSequenceEntries.GetEntry());
						cDatabaseTCSequenceEntries.ShowError(szMessage);
						delete pDatabaseTCSequenceEntry[0];
					}
					if (!pDatabaseTCSequenceEntry[1] && nIndex >= 0)
					{
						try
						{
							cDatabaseTCSequenceEntryParameters.EnableErrors(FALSE);
							cDatabaseTCSequenceEntryParameters.EnableWarnings(FALSE);
							szQuery.Format(STRING(IDS_DATABASE_TABLE_SDF_SQLFINDBYSET), (LPCTSTR)cDatabaseTCSequenceEntries.GetSequence(), cDatabaseTCSequenceEntries.GetEntry());
							cDatabaseTCSequenceEntryParameters.Open(CRecordset::snapshot, szQuery, CRecordset::readOnly);
							cDatabaseTCSequenceEntryParameters.EnableWarnings(TRUE);
							cDatabaseTCSequenceEntryParameters.EnableErrors(TRUE);
						}
						catch (CException *pException)
						{
							pException->Delete();
						}
						if (cDatabaseTCSequenceEntryParameters.IsOpen())
						{
							for (nCount = 0; !cDatabaseTCSequenceEntryParameters.IsBOF() && !cDatabaseTCSequenceEntryParameters.IsEOF(); )
							{
								nCount++;
								try
								{
									cDatabaseTCSequenceEntryParameters.MoveNext();
								}
								catch (...)
								{
									break;
								}
							}
							if (nCount != cDatabaseTCSequenceEntries.GetParameterCount())
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCSEQUENCEENTRY_NONTALLYINGPARAMETERS), (LPCTSTR)cDatabaseTCSequenceEntries.GetSequence(), cDatabaseTCSequenceEntries.GetEntry());
								cDatabaseTCSequenceEntries.ShowWarning(szMessage);
							}
							cDatabaseTCSequenceEntryParameters.Close();
						}
						pDatabaseTCSequence[0]->SetAtGrow(nIndex, pDatabaseTCSequenceEntry[0]);
					}
					else delete pDatabaseTCSequenceEntry[0];
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRIES_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCSequenceEntries.GetSequence(), cDatabaseTCSequenceEntries.GetEntry());
					cDatabaseTCSequenceEntries.ShowError(szMessage);
					break;
				}
			}
			else
			{
				if (pDatabase->GetTCSequences()->GetSize() > 0 || !cDatabaseTCSequenceEntries.GetSequence().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_UNDEFINEDSEQUENCENAME), (LPCTSTR)cDatabaseTCSequenceEntries.GetSequence(), cDatabaseTCSequenceEntries.GetEntry());
					cDatabaseTCSequenceEntries.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCSequenceEntries);
			}
			try
			{
				cDatabaseTCSequenceEntries.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRIES_READ_FAILURE));
				cDatabaseTCSequenceEntries.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRIES_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCSequenceEntries.GetSequence(), cDatabaseTCSequenceEntries.GetEntry());
				cDatabaseTCSequenceEntries.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nSequence = 0, nSequences = (INT)pDatabase->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
		{
			if ((pDatabaseTCSequence[0] = pDatabase->GetTCSequences()->GetAt(nSequence)) != (CDatabaseTCSequence *)NULL)
			{
				for (szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCSEQUENCE_NOENTRIES), (LPCTSTR)pDatabaseTCSequence[0]->GetName()); !pDatabaseTCSequence[0]->GetSize(); )
				{
					cDatabaseTCSequences.ShowWarning(pDatabaseTCSequence[0]->GetName(), szMessage);
					break;
				}
				for (nEntry[0] = 0, nEntries[0] = (INT)pDatabaseTCSequence[0]->GetSize(), nByteOffset = nBlockLength[0] = nBlockLength[1] = nMaxLength = 0; nEntry[0] < nEntries[0]; nEntry[0]++)
				{
					if ((pDatabaseTCSequenceEntry[0] = pDatabaseTCSequence[0]->GetAt(nEntry[0])))
					{
						if ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_FUNCTION) == 0)
						{
							if (pDatabaseTCSequenceEntry[0]->GetAttributes() & (TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP | TCSEQUENCEENTRY_EXETYPE_SECONDSTEP))
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_ILLEGALSUBTYPE), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0] + 1);
								cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
							}
						}
						if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG)
						{
							if ((pDatabaseTCSequenceEntry[0]->GetExecutionTime() == 0 && pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() == 0) || (pDatabaseTCSequenceEntry[0]->GetExecutionTime() > 0 && pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() > 0))
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_ILLEGALEXECUTIONDELTATIME), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0] + 1);
								cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
							}
							if (pDatabaseTCSequenceEntry[0] -> GetExecutionTime() > 0  &&  pDatabaseTCSequenceEntry[0] -> GetExecutionTime() <= tExecutionTime)
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_ILLEGALEXECUTIONTIME),(LPCTSTR) pDatabaseTCSequence[0] -> GetName(),nEntry[0]+1);
								cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0] -> GetName(),szMessage);
							}
						}
						if ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_FLAG_BLOCKMACRO) != TCSEQUENCEENTRY_FLAG_BLOCKMACRO)
						{
							if ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_FUNCTION) && pDatabase->GetTCFunctions()->Find(pDatabaseTCSequenceEntry[0]->GetName()) < 0)
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_UNDEFINEDFUNCTIONNAME), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0] + 1);
								cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
							}
							if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_SEQUENCE)
							{
								if (pDatabase->GetTCSequences()->Find(pDatabaseTCSequenceEntry[0]->GetName()) < 0)
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_UNDEFINEDSEQUENCENAME), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0] + 1);
									cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
								}
								if (!CheckTCSequenceNesting(pDatabase, pDatabaseTCSequence[0]->GetName(), pDatabaseTCSequenceEntry[0]))
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_ILLEGALSEQUENCENAME), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0] + 1);
									cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
								}
							}
							if ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_PROCEDURE) && pDatabase->GetTCProcedures()->Find(pDatabaseTCSequenceEntry[0]->GetName()) < 0)
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_UNDEFINEDPROCEDURENAME), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0] + 1);
								cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
							}
							if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_SECONDSTEP)
							{
								for (nEntry[1] = 0, nEntries[1] = nEntry[0]; nEntry[1] < nEntries[1]; nEntry[1]++)
								{
									if ((pDatabaseTCSequenceEntry[1] = pDatabaseTCSequence[0]->GetAt(nEntry[1])) && (pDatabaseTCSequenceEntry[1]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP) && ((!pDatabaseTCSequenceEntry[0]->GetAssociated1Step().IsEmpty() && pDatabaseTCSequenceEntry[0]->GetAssociated1Step() == pDatabaseTCSequenceEntry[1]->GetName()) || (pDatabaseTCSequenceEntry[0]->GetAssociated1Step().IsEmpty() && pDatabaseTCSequenceEntry[0]->GetName() == pDatabaseTCSequenceEntry[1]->GetName()))) break;
									continue;
								}
								if (nEntry[1] == nEntries[1])
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_MISSINGFIRSTSTEP), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0] + 1);
									cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
								}
							}
						}
						if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_FLAG_BLOCKMACRO)
						{
							if ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_SEQUENCE) || (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_PROCEDURE) || pDatabase->GetTCFunctionBlocks()->Find(pDatabaseTCSequenceEntry[0]->GetName()) < 0)
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_ILLEGALBLOCKNAME), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0] + 1);
								cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
							}
							for (nEntry[1] = nEntry[0] + 1, nEntries[1] = nEntries[0]; nEntry[1] < nEntries[1]; nEntry[1]++)
							{
								if ((pDatabaseTCSequenceEntry[1] = pDatabaseTCSequence[0]->GetAt(nEntry[1])))
								{
									if (pDatabaseTCSequenceEntry[1]->GetBlockMembership() > 0)
									{
										if (pDatabaseTCSequenceEntry[1]->GetBlockMembership() != nEntry[1] - nEntry[0])
										{
											szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_ILLEGALBLOCKMEMBERINDEX), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[1]);
											cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
											break;
										}
										continue;
									}
									break;
								}
							}
						}
						if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_FLAG_BLOCKMEMBER)
						{
							if ((pDatabaseTCFunctionBlock = ((pDatabaseTCSequenceEntry[1] = pDatabaseTCSequence[0]->GetAt(nEntry[0] - pDatabaseTCSequenceEntry[0]->GetBlockMembership()))) ? pDatabase->GetTCFunctionBlocks()->GetAt(pDatabase->GetTCFunctionBlocks()->Find(pDatabaseTCSequenceEntry[1]->GetName())) : (CDatabaseTCFunctionBlock *)NULL))
							{
								for (nElement = 0, nElements = (INT)pDatabaseTCFunctionBlock->GetSize(); nElement < nElements; nElement++)
								{
									if ((pDatabaseTCFunctionBlockElement = pDatabaseTCFunctionBlock->GetAt(nElement)))
									{
										if (pDatabaseTCFunctionBlockElement->GetAttributes() & TCFUNCTIONBLOCKELEMENT_TYPE_FUNCTION)
										{
											if (pDatabaseTCFunctionBlockElement->GetName() == pDatabaseTCSequenceEntry[0]->GetName()) break;
											continue;
										}
										if (pDatabaseTCFunctionBlockElement->GetAttributes() & TCFUNCTIONBLOCKELEMENT_TYPE_PACKET)
										{
											if ((pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(pDatabase->GetTCFunctions()->Find(pDatabaseTCSequenceEntry[0]->GetName()))) && pDatabaseTCFunction->GetTCPacket() == pDatabaseTCFunctionBlockElement->GetName()) break;
											continue;
										}
										if (pDatabaseTCFunctionBlockElement->GetAttributes() & TCFUNCTIONBLOCKELEMENT_TYPE_TCTYPE)
										{
											if ((pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(pDatabase->GetTCFunctions()->Find(pDatabaseTCSequenceEntry[0]->GetName()))) && (pDatabaseTCFunction->GetAttributes() & TranslateTCFunctionType(pDatabaseTCFunctionBlockElement->GetName()))) break;
											continue;
										}
									}
								}
								if ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_SEQUENCE) || (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_PROCEDURE) || nElement == nElements)
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_ILLEGALBLOCKMEMBER), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0] + 1);
									cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
								}
								if (pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime() != pDatabaseTCSequenceEntry[1]->GetReleaseDeltaTime())
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_ILLEGALRELEASEDELTATIME), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0] + 1);
									cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
								}
							}
							if ((pDatabaseTCSequenceEntry[1] = (nEntry[0] > 0) ? pDatabaseTCSequence[0]->GetAt(nEntry[0] - 1) : (CDatabaseTCSequenceEntry *)NULL))
							{
								if (((pDatabaseTCSequenceEntry[1]->GetAttributes() & TCSEQUENCEENTRY_FLAG_BLOCKMACRO) && pDatabaseTCSequenceEntry[1]->GetBlockMembership() != 0) || ((pDatabaseTCSequenceEntry[1]->GetAttributes() & TCSEQUENCEENTRY_FLAG_BLOCKMEMBER) && pDatabaseTCSequenceEntry[0]->GetBlockMembership() != pDatabaseTCSequenceEntry[1]->GetBlockMembership() + 1) || (pDatabaseTCSequenceEntry[1]->GetAttributes() & (TCSEQUENCEENTRY_FLAG_BLOCKMACRO | TCSEQUENCEENTRY_FLAG_BLOCKMEMBER)) == 0)
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_ILLEGALBLOCKSEQUENCE), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0] + 1);
									cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
								}
							}
							else
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_ILLEGALBLOCKSEQUENCE), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0] + 1);
								cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
							}
						}
						if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_FLAG_GROUPMEMBER)
						{
							if ((pDatabaseTCSequenceEntry[1] = (nEntry[0] > 0) ? pDatabaseTCSequence[0]->GetAt(nEntry[0] - 1) : (CDatabaseTCSequenceEntry *)NULL) && pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime() != pDatabaseTCSequenceEntry[1]->GetReleaseDeltaTime())
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_ILLEGALRELEASEDELTATIME), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0] + 1);
								cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
							}
							if ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_SEQUENCE) || (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_PROCEDURE) || !nEntry[0])
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_ILLEGALGROUPFLAG), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0] + 1);
								cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
							}
						}
						if ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_FUNCTION) && (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_FLAG_BLOCKMACRO))
						{
							if ((pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(pDatabase->GetTCFunctions()->Find(pDatabaseTCSequenceEntry[0]->GetName()))))
							{
								if ((pDatabaseTCFunctionBlock = pDatabase->GetTCFunctionBlocks()->GetAt(pDatabase->GetTCFunctionBlocks()->Find(pDatabaseTCFunction->GetName()))))
								{
									for (szBlock = pDatabaseTCFunctionBlock->GetName(); pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_IMMEDIATE; )
									{
										if (pDatabaseTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_LI, nByteOffset, nMaxLength)) break;
										if (pDatabaseTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_NI, nByteOffset, nMaxLength)) break;
										break;
									}
									for (; pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG; )
									{
										if (pDatabaseTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_LTT, nByteOffset, nMaxLength)) break;
										if (pDatabaseTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_NTT, nByteOffset, nMaxLength)) break;
										break;
									}
									for (; pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_SECONDSTEP; )
									{
										if (pDatabaseTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_L2S, nByteOffset, nMaxLength)) break;
										if (pDatabaseTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_N2S, nByteOffset, nMaxLength)) break;
										break;
									}
								}
							}
						}
						if ((pDatabaseTCFunction = ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_FUNCTION) && ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_FLAG_BLOCKMACRO) || (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_FLAG_BLOCKMEMBER))) ? pDatabase->GetTCFunctions()->GetAt(pDatabase->GetTCFunctions()->Find(pDatabaseTCSequenceEntry[0]->GetName())) : (CDatabaseTCFunction *)NULL))
						{
							for (nElement = 0, nElements = (INT)pDatabaseTCFunction->GetSize(), nBitOffset[0] = nBitOffset[1] = 0; nElement < nElements; nElement++)
							{
								if ((pDatabaseTCFunctionElement = pDatabaseTCFunction->GetAt(nElement)) != (CDatabaseTCFunctionElement *)NULL)
								{
									for (; 8 * pDatabaseTCFunctionElement->GetBytePos() + pDatabaseTCFunctionElement->GetBitPos() < nBitOffset[1] || !nBitOffset[1]; )
									{
										nBitOffset[1] = 8 * pDatabaseTCFunctionElement->GetBytePos() + pDatabaseTCFunctionElement->GetBitPos();
										break;
									}
									for (; 8 * pDatabaseTCFunctionElement->GetBytePos() + pDatabaseTCFunctionElement->GetBitPos() + pDatabaseTCFunctionElement->GetWidth() > nBitOffset[0]; )
									{
										nBitOffset[0] = 8 * pDatabaseTCFunctionElement->GetBytePos() + pDatabaseTCFunctionElement->GetBitPos() + pDatabaseTCFunctionElement->GetWidth();
										break;
									}
								}
							}
							if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_FLAG_BLOCKMEMBER)
							{
								nBlockLength[0] += max(nBitOffset[0] - nBitOffset[1], 0);
								nBlockLength[1]++;
							}
							continue;
						}
						if ((pDatabaseTCFunctionBlock = pDatabase->GetTCFunctionBlocks()->GetAt(pDatabase->GetTCFunctionBlocks()->Find(szBlock))))
						{
							if ((pDatabaseTCPacket = ((pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(pDatabase->GetTCFunctions()->Find(szBlock)))) ? pDatabase->GetTCPackets()->GetAt(pDatabase->GetTCPackets()->Find(pDatabaseTCFunction->GetTCPacket())) : (CDatabaseTCPacket *)NULL))
							{
								if (pDatabaseTCPacket->GetDataSize() <= nByteOffset + nBlockLength[0] / 8 || nBlockLength[1] > nMaxLength)
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_ILLEGALBLOCKLENGTH), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0]);
									cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
								}
							}
						}
						szBlock.Empty();
						nByteOffset = 0;
						nBlockLength[0] = 0;
						nBlockLength[1] = 0;
						nMaxLength = 0;
					}
				}
				if ((pDatabaseTCSequence[1] = new CDatabaseTCSequence))
				{
					for (nEntry[0] = 0, nEntries[0] = (pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0])) ? (INT)pDatabaseTCSequence[1]->GetSize() : 0, nIndex = -1, nCount = 0, dwDelta = 0; nEntry[0] < nEntries[0]; nEntry[0]++, nCount = (++nIndex >= nCount) ? ((nIndex = -1) + 1) : nCount)
					{
						if ((pDatabaseTCSequenceEntry[0] = pDatabaseTCSequence[1]->GetAt(nEntry[0])) && (pDatabaseTCSequenceEntry[0]->GetAttributes() & (TCSEQUENCEENTRY_TYPE_FUNCTION | TCSEQUENCEENTRY_TYPE_SEQUENCE | TCSEQUENCEENTRY_TYPE_PROCEDURE)))
						{
							for (; (pDatabaseTCSequenceEntry[0]->GetAttributes() & (TCSEQUENCEENTRY_FLAG_BLOCKMEMBER | TCSEQUENCEENTRY_FLAG_LASTBLOCKMEMBER | TCSEQUENCEENTRY_FLAG_GROUPMEMBER | TCSEQUENCEENTRY_FLAG_LASTGROUPMEMBER)) == 0; )
							{
								if ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS) == 0)
								{
									dwDelta = max(pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime(), dwDelta);
									break;
								}
								pDatabaseTCSequenceEntry[0]->SetAttributes((pDatabaseTCSequenceEntry[0]->GetAttributes() & ~TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS) | TCSEQUENCEENTRY_RELTIME_AFTERBEGIN);
								pDatabaseTCSequenceEntry[0]->SetReleaseDeltaTime((dwDelta = dwDelta + pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime()));
							}
							if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG)
							{
								if (pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime() > 0 && pDatabaseTCSequenceEntry[0]->GetExecutionTime() == 0 && pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() > 0 && pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime() >= pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime())
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_ILLEGALEXECUTIONDELTATIME), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), nEntry[0] + 1);
									cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[1]->GetName(), szMessage);
								}
							}
							if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_SEQUENCE)
							{
								if ((pDatabaseTCSequence[2] = pDatabase->GetTCSequences()->GetAt(pDatabase->GetTCSequences()->Find(pDatabaseTCSequenceEntry[0]->GetName()))))
								{
									for (nEntry[1] = 0, nEntries[1] = (pDatabaseTCSequence[1]->GetName() != pDatabaseTCSequence[2]->GetName()) ? (INT)pDatabaseTCSequence[2]->GetSize() : -1; nEntry[1] < nEntries[1]; nEntry[1]++)
									{
										if ((pDatabaseTCSequenceEntry[1] = pDatabaseTCSequence[2]->GetAt(nEntry[1])))
										{
											if ((pDatabaseTCSequenceEntry[2] = new CDatabaseTCSequenceEntry))
											{
												if (pDatabaseTCSequenceEntry[2]->Copy(pDatabaseTCSequenceEntry[1]))
												{
													for (pDatabaseTCSequenceEntry[2]->SetReleaseDeltaTime(((pDatabaseTCSequenceEntry[2]->GetAttributes() & TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS) == 0 || !nEntry[1]) ? (pDatabaseTCSequenceEntry[2]->GetReleaseDeltaTime() + dwDelta) : pDatabaseTCSequenceEntry[2]->GetReleaseDeltaTime()); (pDatabaseTCSequenceEntry[2]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG) && pDatabaseTCSequenceEntry[2]->GetExecutionTime() == 0; )
													{
														if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG)
														{
															if (pDatabaseTCSequenceEntry[0]->GetExecutionTime().GetTime() == 0)
															{
																pDatabaseTCSequenceEntry[2]->SetExecutionDeltaTime(pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() + pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime());
																break;
															}
															pDatabaseTCSequenceEntry[2]->SetAttributes(pDatabaseTCSequenceEntry[2]->GetAttributes() & ~(TCSEQUENCEENTRY_RELTIME_AFTERBEGIN | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS));
															pDatabaseTCSequenceEntry[2]->SetExecutionTime(pDatabaseTCSequenceEntry[0]->GetExecutionTime().GetTime() + 1000 * (TIMETAG)pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime());
															pDatabaseTCSequenceEntry[2]->SetExecutionDeltaTime(0);
															break;
														}
														pDatabaseTCSequenceEntry[2]->SetExecutionDeltaTime(pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime() + pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime());
														break;
													}
													pDatabaseTCSequence[1]->InsertAt(nEntry[0] + nEntry[1], pDatabaseTCSequenceEntry[2], 1);
													nEntries[0]++;
													nCount++;
													continue;
												}
												delete pDatabaseTCSequenceEntry[2];
											}
										}
										break;
									}
									if (nEntry[1] == nEntries[1])
									{
										pDatabaseTCSequence[1]->RemoveAt(nEntry[0] + nEntries[1]);
										delete pDatabaseTCSequenceEntry[0];
										nEntries[0]--;
										nEntry[0]--;
										nCount--;
									}
								}
							}
							if ((pDatabaseTCSequenceEntry[1] = (pDatabaseTCSequenceEntry[0]->GetAttributes() & (TCSEQUENCEENTRY_FLAG_BLOCKMEMBER | TCSEQUENCEENTRY_FLAG_LASTBLOCKMEMBER | TCSEQUENCEENTRY_FLAG_GROUPMEMBER | TCSEQUENCEENTRY_FLAG_LASTGROUPMEMBER)) ? pDatabaseTCSequence[1]->GetAt(nEntry[0] - 1) : (CDatabaseTCSequenceEntry *)NULL) && pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime() != pDatabaseTCSequenceEntry[1]->GetReleaseDeltaTime())
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRY_ILLEGALRELEASEDELTATIME), (LPCTSTR)pDatabaseTCSequence[0]->GetName(), (nCount > 0) ? (nEntry[0] - nIndex + 1) : (nEntry[0] + 1));
								cDatabaseTCSequenceEntries.ShowError(pDatabaseTCSequence[1]->GetName(), szMessage);
							}
						}
					}
					delete pDatabaseTCSequence[1];
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCE_MEMORY_FAILURE), (LPCTSTR)pDatabaseTCSequence[0]->GetName());
					cDatabaseTCSequences.ShowError(pDatabaseTCSequence[0]->GetName(), szMessage);
					break;
				}
			}
		}
		ShowCompileMessages(&cDatabaseTCSequences);
		ShowCompileMessages(&cDatabaseTCSequenceEntries);
		cDatabaseTCSequenceEntries.Close();
	}
	else
	{
		cDatabaseTCSequenceEntries.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRIES_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCSequenceEntries);
	}
}

VOID CALTELDatabaseEngine::CompileOBProcessors(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nMemoryArea;
	INT  nMemoryAreas;
	INT  nMemoryImage;
	INT  nMemoryImages;
	INT  nMemoryBlock[2];
	INT  nMemoryBlocks[2];
	INT  nProcessor[2];
	INT  nProcessors[2];
	UINT  nRange[2][2];
	UINT  nAddress[3][3];
	UINT  nAddressBytes;
	BOOL  bAddressArea;
	CString  szMessage;
	CString  szImageVersion;
	ULONGLONG  nAddressArea;
	CByteArray  nImageData[2];
	CStringTools  cStringTools;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseOBProcessor  *pDatabaseOBProcessor[2];
	CDatabaseOBProcessorMemoryArea  *pDatabaseOBProcessorMemoryArea[2];
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;
	CDatabaseOBProcessorMemoryAreaBlock  *pDatabaseOBProcessorMemoryAreaBlock;
	CDatabaseOBProcessorMemoryImageBlock  *pDatabaseOBProcessorMemoryImageBlock;
	CDatabaseOBProcessorMemoryAreaCheckSum  *pDatabaseOBProcessorMemoryAreaCheckSum;
	CDatabaseOBProcessorMemoryAreaCatalogue  *pDatabaseOBProcessorMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pDatabaseOBProcessorMemoryAreaCatalogueEntry;
	CALTELDatabaseOBProcessorsRecordset  cDatabaseOBProcessors(this);
	CALTELDatabaseOBProcessorMemoryAreasRecordset  cDatabaseOBProcessorMemoryAreas(this);
	CALTELDatabaseOBProcessorMemoryImagesRecordset  cDatabaseOBProcessorMemoryImages(this);
	CALTELDatabaseOBProcessorMemoryAreaBlocksRecordset  cDatabaseOBProcessorMemoryAreaBlocks(this);
	CALTELDatabaseOBProcessorMemoryAreaCheckSumsRecordset  cDatabaseOBProcessorMemoryAreaCheckSums(this);
	CALTELDatabaseOBProcessorMemoryAreaCataloguesRecordset  cDatabaseOBProcessorMemoryAreaCatalogues(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_OBPROCESSORS));
	try
	{
		cDatabaseOBProcessors.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_GEN_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseOBProcessors.IsOpen())
	{
		for (pDatabase->GetOBProcessors()->RemoveAll(); !cDatabaseOBProcessors.IsBOF() && !cDatabaseOBProcessors.IsEOF() && IsCompiling(); )
		{
			if ((cDatabaseOBProcessors.GetStatus() & OBPROCESSOR_RECORDSTATUS_DEFAULT) >= OBPROCESSOR_RECORDSTATUS_NONE)
			{
				if ((pDatabaseOBProcessor[0] = new CDatabaseOBProcessor))
				{
					pDatabaseOBProcessor[0]->SetName(cDatabaseOBProcessors.GetName());
					pDatabaseOBProcessor[0]->SetPatchCommand(cDatabaseOBProcessors.GetPatchCommand());
					pDatabaseOBProcessor[0]->SetDumpCommand(cDatabaseOBProcessors.GetDumpCommand());
					pDatabaseOBProcessor[0]->SetDumpPacket(cDatabaseOBProcessors.GetDumpPacket());
					pDatabaseOBProcessor[0]->SetDumpInterval(cDatabaseOBProcessors.GetDumpInterval());
					pDatabaseOBProcessor[0]->SetDumpCount(cDatabaseOBProcessors.GetDumpCount());
					pDatabaseOBProcessor[0]->SetMasterImage(cDatabaseOBProcessors.GetMasterImage());
					pDatabaseOBProcessor[0]->SetStatus(cDatabaseOBProcessors.GetStatus());
					for (; cDatabaseOBProcessors.GetAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1]); )
					{
						pDatabaseOBProcessor[0]->SetAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1]);
						break;
					}
					if ((nIndex = pDatabase->GetOBProcessors()->Find(cDatabaseOBProcessors.GetName())) < 0 && pDatabase->GetOBProcessors()->Add(pDatabaseOBProcessor[0]) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSOR_MEMORY_FAILURE), (LPCTSTR)cDatabaseOBProcessors.GetName());
						cDatabaseOBProcessors.ShowError(szMessage);
						delete pDatabaseOBProcessor[0];
						break;
					}
					if (nIndex < 0)
					{
						for (pDatabaseOBProcessor[0]->SetPatchCommandRef(pDatabase->GetTCFunctions()->Find(pDatabaseOBProcessor[0]->GetPatchCommand())); !pDatabaseOBProcessor[0]->GetPatchCommand().IsEmpty() && pDatabaseOBProcessor[0]->GetPatchCommandRef() < 0; )
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSOR_ILLEGALPATCHCOMMAND), (LPCTSTR)cDatabaseOBProcessors.GetName());
							cDatabaseOBProcessors.ShowError(szMessage);
							break;
						}
						for (pDatabaseOBProcessor[0]->SetDumpCommandRef(pDatabase->GetTCFunctions()->Find(pDatabaseOBProcessor[0]->GetDumpCommand())); !pDatabaseOBProcessor[0]->GetDumpCommand().IsEmpty() && pDatabaseOBProcessor[0]->GetDumpCommandRef() < 0; )
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSOR_ILLEGALDUMPCOMMAND), (LPCTSTR)cDatabaseOBProcessors.GetName());
							cDatabaseOBProcessors.ShowError(szMessage);
							break;
						}
						for (pDatabaseOBProcessor[0]->SetDumpPacketRef(pDatabase->GetTMPackets()->Find(pDatabaseOBProcessor[0]->GetDumpPacket())); !pDatabaseOBProcessor[0]->GetDumpPacket().IsEmpty() && pDatabaseOBProcessor[0]->GetDumpPacketRef() < 0; )
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSOR_ILLEGALDUMPPACKET), (LPCTSTR)cDatabaseOBProcessors.GetName());
							cDatabaseOBProcessors.ShowError(szMessage);
							break;
						}
						if (pDatabaseOBProcessor[0]->GetPatchCommandRef() >= 0 && pDatabaseOBProcessor[0]->GetDumpCount() <= 0)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSOR_ILLEGALDUMPCOUNT), (LPCTSTR)cDatabaseOBProcessors.GetName());
							cDatabaseOBProcessors.ShowError(szMessage);
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSOR_DUPLICATENAME), (LPCTSTR)cDatabaseOBProcessors.GetName());
						cDatabaseOBProcessors.ShowError(szMessage);
						delete pDatabaseOBProcessor[0];
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSOR_MEMORY_FAILURE), (LPCTSTR)cDatabaseOBProcessors.GetName());
					cDatabaseOBProcessors.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseOBProcessors);
			}
			try
			{
				cDatabaseOBProcessors.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORS_READ_FAILURE));
				cDatabaseOBProcessors.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSOR_MEMORY_FAILURE), (LPCTSTR)cDatabaseOBProcessors.GetName());
				cDatabaseOBProcessors.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseOBProcessors);
		cDatabaseOBProcessors.Close();
	}
	else
	{
		cDatabaseOBProcessors.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseOBProcessors);
	}
	try
	{
		cDatabaseOBProcessorMemoryAreas.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_MAD_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseOBProcessorMemoryAreas.IsOpen())
	{
		for (nProcessor[0] = 0, nProcessors[0] = (INT)pDatabase->GetOBProcessors()->GetSize(); nProcessor[0] < nProcessors[0]; nProcessor[0]++)
		{
			if ((pDatabaseOBProcessor[0] = pDatabase->GetOBProcessors()->GetAt(nProcessor[0])))
			{
				pDatabaseOBProcessor[0]->RemoveAll();
				continue;
			}
		}
		while (!cDatabaseOBProcessorMemoryAreas.IsBOF() && !cDatabaseOBProcessorMemoryAreas.IsEOF() && IsCompiling())
		{
			if ((pDatabaseOBProcessor[0] = pDatabase->GetOBProcessors()->GetAt(pDatabase->GetOBProcessors()->Find(cDatabaseOBProcessorMemoryAreas.GetProcessor()))))
			{
				if ((pDatabaseOBProcessorMemoryArea[0] = new CDatabaseOBProcessorMemoryArea))
				{
					pDatabaseOBProcessorMemoryArea[0]->SetName(cDatabaseOBProcessorMemoryAreas.GetName());
					pDatabaseOBProcessorMemoryArea[0]->SetDescription(cDatabaseOBProcessorMemoryAreas.GetDescription());
					pDatabaseOBProcessorMemoryArea[0]->SetPatchCommand(cDatabaseOBProcessorMemoryAreas.GetPatchCommand());
					pDatabaseOBProcessorMemoryArea[0]->SetDumpCommand(cDatabaseOBProcessorMemoryAreas.GetDumpCommand());
					pDatabaseOBProcessorMemoryArea[0]->SetDumpPacket(cDatabaseOBProcessorMemoryAreas.GetDumpPacket());
					pDatabaseOBProcessorMemoryArea[0]->SetAttributes(cDatabaseOBProcessorMemoryAreas.GetAttributes());
					if ((nIndex = pDatabaseOBProcessor[0]->Find(cDatabaseOBProcessorMemoryAreas.GetName())) < 0 && pDatabaseOBProcessor[0]->Add(pDatabaseOBProcessorMemoryArea[0]) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREA_MEMORY_FAILURE), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetProcessor(), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetName());
						cDatabaseOBProcessorMemoryAreas.ShowError(szMessage);
						delete pDatabaseOBProcessorMemoryArea[0];
						break;
					}
					if (nIndex < 0)
					{
						for (pDatabaseOBProcessorMemoryArea[0]->SetPatchCommandRef(pDatabase->GetTCFunctions()->Find(pDatabaseOBProcessorMemoryArea[0]->GetPatchCommand())); !pDatabaseOBProcessorMemoryArea[0]->GetPatchCommand().IsEmpty() && pDatabaseOBProcessorMemoryArea[0]->GetPatchCommandRef() < 0; )
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREA_ILLEGALPATCHCOMMAND), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetProcessor(), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetName());
							cDatabaseOBProcessorMemoryAreas.ShowError(szMessage);
							break;
						}
						for (pDatabaseOBProcessorMemoryArea[0]->SetDumpCommandRef(pDatabase->GetTCFunctions()->Find(pDatabaseOBProcessorMemoryArea[0]->GetDumpCommand())); !pDatabaseOBProcessorMemoryArea[0]->GetDumpCommand().IsEmpty() && pDatabaseOBProcessorMemoryArea[0]->GetDumpCommandRef() < 0; )
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREA_ILLEGALDUMPCOMMAND), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetProcessor(), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetName());
							cDatabaseOBProcessorMemoryAreas.ShowError(szMessage);
							break;
						}
						for (pDatabaseOBProcessorMemoryArea[0]->SetDumpPacketRef(pDatabase->GetTMPackets()->Find(pDatabaseOBProcessorMemoryArea[0]->GetDumpPacket())); !pDatabaseOBProcessorMemoryArea[0]->GetDumpPacket().IsEmpty() && pDatabaseOBProcessorMemoryArea[0]->GetDumpPacketRef() < 0; )
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREA_ILLEGALDUMPPACKET), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetProcessor(), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetName());
							cDatabaseOBProcessorMemoryAreas.ShowError(szMessage);
							break;
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREA_DUPLICATENAME), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetProcessor(), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetName());
						cDatabaseOBProcessorMemoryAreas.ShowError(szMessage);
						delete pDatabaseOBProcessorMemoryArea[0];
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREA_MEMORY_FAILURE), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetProcessor(), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetName());
					cDatabaseOBProcessorMemoryAreas.ShowError(szMessage);
					break;
				}
			}
			else
			{
				if (pDatabase->GetOBProcessors()->GetSize() > 0 || !cDatabaseOBProcessorMemoryAreas.GetProcessor().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREA_UNDEFINEDPROCESSORNAME), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetProcessor(), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetName());
					cDatabaseOBProcessorMemoryAreas.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseOBProcessorMemoryAreas);
			}
			try
			{
				cDatabaseOBProcessorMemoryAreas.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREAS_READ_FAILURE));
				cDatabaseOBProcessorMemoryAreas.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREA_MEMORY_FAILURE), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetProcessor(), (LPCTSTR)cDatabaseOBProcessorMemoryAreas.GetName());
				cDatabaseOBProcessorMemoryAreas.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseOBProcessorMemoryAreas);
		cDatabaseOBProcessorMemoryAreas.Close();
	}
	else
	{
		cDatabaseOBProcessorMemoryAreas.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREAS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseOBProcessorMemoryAreas);
	}
	try
	{
		cDatabaseOBProcessorMemoryAreaBlocks.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_MEM_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseOBProcessorMemoryAreaBlocks.IsOpen())
	{
		for (GetOBProcessorMemoryAreaBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nAddressBytes = max(GetOBProcessorMemoryAreaBlockAddressWidth() / 8, 1); !cDatabaseOBProcessorMemoryAreaBlocks.IsBOF() && !cDatabaseOBProcessorMemoryAreaBlocks.IsEOF() && IsCompiling(); )
		{
			for (nProcessor[0] = 0, nProcessors[0] = (INT)pDatabase->GetOBProcessors()->GetSize(); nProcessor[0] < nProcessors[0]; nProcessor[0]++)
			{
				if ((pDatabaseOBProcessor[0] = pDatabase->GetOBProcessors()->GetAt(nProcessor[0])) != (CDatabaseOBProcessor *)NULL)
				{
					if ((pDatabaseOBProcessorMemoryArea[0] = pDatabaseOBProcessor[0]->GetAt(pDatabaseOBProcessor[0]->Find(cDatabaseOBProcessorMemoryAreaBlocks.GetName()))))
					{
						if ((pDatabaseOBProcessorMemoryAreaBlock = new CDatabaseOBProcessorMemoryAreaBlock))
						{
							pDatabaseOBProcessorMemoryAreaBlock->SetDescription(cDatabaseOBProcessorMemoryAreaBlocks.GetDescription());
							pDatabaseOBProcessorMemoryAreaBlock->SetTMParameter(cDatabaseOBProcessorMemoryAreaBlocks.GetTMParameter());
							pDatabaseOBProcessorMemoryAreaBlock->SetTCParameter(cDatabaseOBProcessorMemoryAreaBlocks.GetTCParameter());
							pDatabaseOBProcessorMemoryAreaBlock->SetBitOffset(cDatabaseOBProcessorMemoryAreaBlocks.GetBitOffset());
							pDatabaseOBProcessorMemoryAreaBlock->SetBitWidth(cDatabaseOBProcessorMemoryAreaBlocks.GetBitWidth());
							for (; cDatabaseOBProcessorMemoryAreaBlocks.GetAddress(nAddress[0][0], nAddress[0][1]); )
							{
								pDatabaseOBProcessorMemoryAreaBlock->SetAddress(nAddress[0][0], nAddress[0][1]);
								break;
							}
							for (pDatabaseOBProcessorMemoryAreaBlock->SetTMParameterRef(pDatabase->GetTMParameters()->Find(cDatabaseOBProcessorMemoryAreaBlocks.GetTMParameter())); !cDatabaseOBProcessorMemoryAreaBlocks.GetTMParameter().IsEmpty() && pDatabaseOBProcessorMemoryAreaBlock->GetTMParameterRef() < 0; )
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREABLOCK_UNDEFINEDTMPARAMETER), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryAreaBlocks.GetName(), (cDatabaseOBProcessorMemoryAreaBlocks.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), (cDatabaseOBProcessorMemoryAreaBlocks.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), cDatabaseOBProcessorMemoryAreaBlocks.GetBitOffset());
								cDatabaseOBProcessorMemoryAreaBlocks.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
								break;
							}
							for (pDatabaseOBProcessorMemoryAreaBlock->SetTCParameterRef(pDatabase->GetTCParameters()->Find(cDatabaseOBProcessorMemoryAreaBlocks.GetTCParameter())); !cDatabaseOBProcessorMemoryAreaBlocks.GetTCParameter().IsEmpty() && pDatabaseOBProcessorMemoryAreaBlock->GetTCParameterRef() < 0; )
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREABLOCK_UNDEFINEDTCPARAMETER), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryAreaBlocks.GetName(), (cDatabaseOBProcessorMemoryAreaBlocks.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), (cDatabaseOBProcessorMemoryAreaBlocks.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), cDatabaseOBProcessorMemoryAreaBlocks.GetBitOffset());
								cDatabaseOBProcessorMemoryAreaBlocks.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
								break;
							}
							if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(pDatabaseOBProcessorMemoryAreaBlock->GetTMParameterRef())) && pDatabaseTMParameter->GetWidth() != pDatabaseOBProcessorMemoryAreaBlock->GetBitWidth())
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREABLOCK_ILLEGALBITWIDTH), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryAreaBlocks.GetName(), (cDatabaseOBProcessorMemoryAreaBlocks.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), (cDatabaseOBProcessorMemoryAreaBlocks.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), cDatabaseOBProcessorMemoryAreaBlocks.GetBitOffset());
								cDatabaseOBProcessorMemoryAreaBlocks.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
							}
							if ((pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(pDatabaseOBProcessorMemoryAreaBlock->GetTCParameterRef())) && pDatabaseTCParameter->GetWidth() != pDatabaseOBProcessorMemoryAreaBlock->GetBitWidth())
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREABLOCK_ILLEGALBITWIDTH), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryAreaBlocks.GetName(), (cDatabaseOBProcessorMemoryAreaBlocks.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), (cDatabaseOBProcessorMemoryAreaBlocks.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), cDatabaseOBProcessorMemoryAreaBlocks.GetBitOffset());
								cDatabaseOBProcessorMemoryAreaBlocks.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
							}
							if (pDatabaseOBProcessorMemoryArea[0]->Add(pDatabaseOBProcessorMemoryAreaBlock) < 0)
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREABLOCK_DUPLICATENAME), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryAreaBlocks.GetName(), (cDatabaseOBProcessorMemoryAreaBlocks.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), (cDatabaseOBProcessorMemoryAreaBlocks.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), cDatabaseOBProcessorMemoryAreaBlocks.GetBitOffset());
								cDatabaseOBProcessorMemoryAreaBlocks.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
								delete pDatabaseOBProcessorMemoryAreaBlock;
							}
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREABLOCK_MEMORY_FAILURE), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryAreaBlocks.GetName(), (cDatabaseOBProcessorMemoryAreaBlocks.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), (cDatabaseOBProcessorMemoryAreaBlocks.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), cDatabaseOBProcessorMemoryAreaBlocks.GetBitOffset());
							cDatabaseOBProcessorMemoryAreaBlocks.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
							break;
						}
					}
				}
				ShowCompileMessages(&cDatabaseOBProcessorMemoryAreaBlocks);
			}
			try
			{
				cDatabaseOBProcessorMemoryAreaBlocks.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREABLOCKS_READ_FAILURE));
				cDatabaseOBProcessorMemoryAreaBlocks.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREABLOCKS_READ_FAILURE));
				cDatabaseOBProcessorMemoryAreaBlocks.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
		}
		for (nProcessor[0] = 0, nProcessors[0] = (INT)pDatabase->GetOBProcessors()->GetSize(); nProcessor[0] < nProcessors[0]; nProcessor[0]++)
		{
			if ((pDatabaseOBProcessor[0] = pDatabase->GetOBProcessors()->GetAt(nProcessor[0])) && pDatabaseOBProcessor[0]->GetAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1]))
			{
				for (nMemoryArea = 0, nMemoryAreas = (INT)pDatabaseOBProcessor[0]->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
				{
					if ((pDatabaseOBProcessorMemoryArea[0] = pDatabaseOBProcessor[0]->GetAt(nMemoryArea)) != (CDatabaseOBProcessorMemoryArea *)NULL)
					{
						for (nMemoryBlock[0] = 0, nMemoryBlocks[0] = (INT)pDatabaseOBProcessorMemoryArea[0]->GetSize(), nAddressArea = 0; nMemoryBlock[0] < nMemoryBlocks[0]; nMemoryBlock[0]++)
						{
							if ((pDatabaseOBProcessorMemoryAreaBlock = pDatabaseOBProcessorMemoryArea[0]->GetAt(nMemoryBlock[0])) && pDatabaseOBProcessorMemoryAreaBlock->GetAddress(nAddress[2][0], nAddress[2][1]) && ((ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] < (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][0] || (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] + (pDatabaseOBProcessorMemoryAreaBlock->GetBitOffset() + pDatabaseOBProcessorMemoryAreaBlock->GetBitWidth() - 1) / (8 * nAddressBytes) > (ULONGLONG) nAddress[0][1] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1]))
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREABLOCK_ILLEGALADDRESS), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)pDatabaseOBProcessorMemoryArea[0]->GetName(), (pDatabaseOBProcessorMemoryAreaBlock->GetAddress(nAddress[2][0], nAddress[2][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[2][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), (pDatabaseOBProcessorMemoryAreaBlock->GetAddress(nAddress[2][0], nAddress[2][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[2][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), pDatabaseOBProcessorMemoryAreaBlock->GetBitOffset());
								cDatabaseOBProcessorMemoryAreaBlocks.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
							}
							if ((pDatabaseOBProcessorMemoryAreaBlock = pDatabaseOBProcessorMemoryArea[0]->GetAt(nMemoryBlock[0])) && pDatabaseOBProcessorMemoryAreaBlock->GetAddress(nAddress[2][0], nAddress[2][1]))
							{
								for (szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREABLOCK_NONCONTINGUOUS), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)pDatabaseOBProcessorMemoryArea[0]->GetName(), (pDatabaseOBProcessorMemoryAreaBlock->GetAddress(nAddress[2][0], nAddress[2][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[2][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), (pDatabaseOBProcessorMemoryAreaBlock->GetAddress(nAddress[2][0], nAddress[2][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[2][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_MEM_DATAADDRESS_NONE), pDatabaseOBProcessorMemoryAreaBlock->GetBitOffset()); nMemoryBlock[0] > 0 && (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] != nAddressArea; )
								{
									cDatabaseOBProcessorMemoryAreaBlocks.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
									break;
								}
								nAddressArea = (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] + (pDatabaseOBProcessorMemoryAreaBlock->GetBitOffset() + pDatabaseOBProcessorMemoryAreaBlock->GetBitWidth()) / (8 * nAddressBytes);
							}
						}
					}
				}
			}
		}
		ShowCompileMessages(&cDatabaseOBProcessorMemoryAreaBlocks);
		cDatabaseOBProcessorMemoryAreaBlocks.Close();
	}
	else
	{
		cDatabaseOBProcessorMemoryAreaBlocks.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREABLOCKS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseOBProcessorMemoryAreaBlocks);
	}
	try
	{
		cDatabaseOBProcessorMemoryAreaCheckSums.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CRC_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseOBProcessorMemoryAreaCheckSums.IsOpen())
	{
		while (!cDatabaseOBProcessorMemoryAreaCheckSums.IsBOF() && !cDatabaseOBProcessorMemoryAreaCheckSums.IsEOF() && IsCompiling())
		{
			for (nProcessor[0] = 0, nProcessors[0] = (INT)pDatabase->GetOBProcessors()->GetSize(); nProcessor[0] < nProcessors[0]; nProcessor[0]++)
			{
				if ((pDatabaseOBProcessor[0] = pDatabase->GetOBProcessors()->GetAt(nProcessor[0])) != (CDatabaseOBProcessor *)NULL)
				{
					if ((pDatabaseOBProcessorMemoryArea[0] = pDatabaseOBProcessor[0]->GetAt(pDatabaseOBProcessor[0]->Find(cDatabaseOBProcessorMemoryAreaCheckSums.GetName()))))
					{
						if ((pDatabaseOBProcessorMemoryAreaCheckSum = new CDatabaseOBProcessorMemoryAreaCheckSum))
						{
							pDatabaseOBProcessorMemoryAreaCheckSum->SetSeed(cDatabaseOBProcessorMemoryAreaCheckSums.GetSeed());
							pDatabaseOBProcessorMemoryAreaCheckSum->SetLength(cDatabaseOBProcessorMemoryAreaCheckSums.GetLength());
							pDatabaseOBProcessorMemoryAreaCheckSum->SetDestination(cDatabaseOBProcessorMemoryAreaCheckSums.GetDestination());
							for (nAddress[0][0] = nAddress[0][1] = nAddress[0][2] = 0; cDatabaseOBProcessorMemoryAreaCheckSums.GetAddressRange(nAddress[0][0], nAddress[0][1], nAddress[0][2]); )
							{
								pDatabaseOBProcessorMemoryAreaCheckSum->SetAddressRange(nAddress[0][0], nAddress[0][1], nAddress[0][2]);
								break;
							}
							pDatabaseOBProcessorMemoryArea[0]->SetCheckSum(pDatabaseOBProcessorMemoryAreaCheckSum);
							delete pDatabaseOBProcessorMemoryAreaCheckSum;
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREACHECKSUM_MEMORY_FAILURE), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryAreaCheckSums.GetName());
							cDatabaseOBProcessorMemoryAreaCheckSums.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
							break;
						}
					}
				}
				ShowCompileMessages(&cDatabaseOBProcessorMemoryAreaCheckSums);
			}
			try
			{
				cDatabaseOBProcessorMemoryAreaCheckSums.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREACHECKSUMS_READ_FAILURE));
				cDatabaseOBProcessorMemoryAreaCheckSums.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREACHECKSUMS_READ_FAILURE));
				cDatabaseOBProcessorMemoryAreaCheckSums.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseOBProcessorMemoryAreaCheckSums);
		cDatabaseOBProcessorMemoryAreaCheckSums.Close();
	}
	else
	{
		cDatabaseOBProcessorMemoryAreaCheckSums.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREACHECKSUMS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseOBProcessorMemoryAreaCheckSums);
	}
	try
	{
		cDatabaseOBProcessorMemoryAreaCatalogues.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CAT_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseOBProcessorMemoryAreaCatalogues.IsOpen())
	{
		while (!cDatabaseOBProcessorMemoryAreaCatalogues.IsBOF() && !cDatabaseOBProcessorMemoryAreaCatalogues.IsEOF() && IsCompiling())
		{
			for (nProcessor[0] = 0, nProcessors[0] = (INT)pDatabase->GetOBProcessors()->GetSize(); nProcessor[0] < nProcessors[0]; nProcessor[0]++)
			{
				if ((pDatabaseOBProcessor[0] = pDatabase->GetOBProcessors()->GetAt(nProcessor[0])) != (CDatabaseOBProcessor *)NULL)
				{
					if ((pDatabaseOBProcessorMemoryArea[0] = pDatabaseOBProcessor[0]->GetAt(pDatabaseOBProcessor[0]->Find(cDatabaseOBProcessorMemoryAreaCatalogues.GetName()))))
					{
						if ((pDatabaseOBProcessorMemoryAreaCatalogue = new CDatabaseOBProcessorMemoryAreaCatalogue))
						{
							if (pDatabaseOBProcessorMemoryArea[0]->GetCatalogue(pDatabaseOBProcessorMemoryAreaCatalogue))
							{
								if ((pDatabaseOBProcessorMemoryAreaCatalogueEntry = new CDatabaseOBProcessorMemoryAreaCatalogueEntry))
								{
									pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetName(cDatabaseOBProcessorMemoryAreaCatalogues.GetID());
									pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetDescription(cDatabaseOBProcessorMemoryAreaCatalogues.GetDescription());
									pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetAttributes(cDatabaseOBProcessorMemoryAreaCatalogues.GetAttributes());
									pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetLocation(cDatabaseOBProcessorMemoryAreaCatalogues.GetLocation());
									pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetVersion(cDatabaseOBProcessorMemoryAreaCatalogues.GetVersion());
									pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetDate(cDatabaseOBProcessorMemoryAreaCatalogues.GetDate());
									pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetTime(cDatabaseOBProcessorMemoryAreaCatalogues.GetTime());
									if (pDatabaseOBProcessorMemoryAreaCatalogue->Add(pDatabaseOBProcessorMemoryAreaCatalogueEntry) < 0)
									{
										szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREACATALOGUE_DUPLICATENAME), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryAreaCatalogues.GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryAreaCatalogues.GetVersion());
										cDatabaseOBProcessorMemoryAreaCatalogues.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
										delete pDatabaseOBProcessorMemoryAreaCatalogueEntry;
									}
								}
								else
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREACATALOGUE_MEMORY_FAILURE), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryAreaCatalogues.GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryAreaCatalogues.GetVersion());
									cDatabaseOBProcessorMemoryAreaCatalogues.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
									delete pDatabaseOBProcessorMemoryAreaCatalogue;
									break;
								}
								pDatabaseOBProcessorMemoryArea[0]->SetCatalogue(pDatabaseOBProcessorMemoryAreaCatalogue);
							}
							delete pDatabaseOBProcessorMemoryAreaCatalogue;
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREACATALOGUE_MEMORY_FAILURE), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryAreaCatalogues.GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryAreaCatalogues.GetVersion());
							cDatabaseOBProcessorMemoryAreaCatalogues.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
							break;
						}
					}
				}
				ShowCompileMessages(&cDatabaseOBProcessorMemoryAreaCatalogues);
			}
			try
			{
				cDatabaseOBProcessorMemoryAreaCatalogues.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREACATALOGUES_READ_FAILURE));
				cDatabaseOBProcessorMemoryAreaCatalogues.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREACATALOGUES_READ_FAILURE));
				cDatabaseOBProcessorMemoryAreaCatalogues.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseOBProcessorMemoryAreaCatalogues);
		cDatabaseOBProcessorMemoryAreaCatalogues.Close();
	}
	else
	{
		cDatabaseOBProcessorMemoryAreaCatalogues.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREACATALOGUES_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseOBProcessorMemoryAreaCatalogues);
	}
	try
	{
		cDatabaseOBProcessorMemoryImages.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_IMG_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseOBProcessorMemoryImages.IsOpen())
	{
		for (GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), nAddressBytes = max(GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1), pDatabase->GetOBProcessorMemoryImages()->RemoveAll(); !cDatabaseOBProcessorMemoryImages.IsBOF() && !cDatabaseOBProcessorMemoryImages.IsEOF() && IsCompiling(); )
		{
			if (pDatabase->GetOBProcessorMemoryImages()->Find(cDatabaseOBProcessorMemoryImages.GetName()) < 0)
			{
				if ((pDatabaseOBProcessorMemoryImage = new CDatabaseOBProcessorMemoryImage))
				{
					for (pDatabaseOBProcessorMemoryImage->SetName(cDatabaseOBProcessorMemoryImages.GetName()); (nIndex = pDatabase->GetOBProcessorMemoryImages()->Add(pDatabaseOBProcessorMemoryImage)) < 0; )
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYIMAGE_DUPLICATENAME), (LPCTSTR)cDatabaseOBProcessorMemoryImages.GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryImages.GetVersion(), (cDatabaseOBProcessorMemoryImages.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_IMG_DATAADDRESS_NONE), (cDatabaseOBProcessorMemoryImages.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_IMG_DATAADDRESS_NONE));
						cDatabaseOBProcessorMemoryImages.ShowError(szMessage);
						delete pDatabaseOBProcessorMemoryImage;
						break;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYIMAGE_MEMORY_FAILURE), (LPCTSTR)cDatabaseOBProcessorMemoryImages.GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryImages.GetVersion(), (cDatabaseOBProcessorMemoryImages.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_IMG_DATAADDRESS_NONE), (cDatabaseOBProcessorMemoryImages.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_IMG_DATAADDRESS_NONE));
					cDatabaseOBProcessorMemoryImages.ShowError(szMessage);
					break;
				}
			}
			if ((pDatabaseOBProcessorMemoryImage = pDatabase->GetOBProcessorMemoryImages()->GetAt(pDatabase->GetOBProcessorMemoryImages()->Find(cDatabaseOBProcessorMemoryImages.GetName()))))
			{
				if ((pDatabaseOBProcessorMemoryImageBlock = new CDatabaseOBProcessorMemoryImageBlock) != (CDatabaseOBProcessorMemoryImageBlock *)NULL)
				{
					for (pDatabaseOBProcessorMemoryImageBlock->SetVersion(cDatabaseOBProcessorMemoryImages.GetVersion()); cDatabaseOBProcessorMemoryImages.GetAddress(nAddress[0][0], nAddress[0][1]); )
					{
						pDatabaseOBProcessorMemoryImageBlock->SetAddress(nAddress[0][0], nAddress[0][1]);
						break;
					}
					if (cDatabaseOBProcessorMemoryImages.GetData(nImageData[0], nImageData[1]) >= 0)
					{
						pDatabaseOBProcessorMemoryImageBlock->SetData(nImageData[0]);
						pDatabaseOBProcessorMemoryImageBlock->SetMask(nImageData[1]);
					}
					if (pDatabaseOBProcessorMemoryImage->Add(pDatabaseOBProcessorMemoryImageBlock) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYIMAGE_DUPLICATENAME), (LPCTSTR)cDatabaseOBProcessorMemoryImages.GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryImages.GetVersion(), (cDatabaseOBProcessorMemoryImages.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_IMG_DATAADDRESS_NONE), (cDatabaseOBProcessorMemoryImages.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_IMG_DATAADDRESS_NONE));
						cDatabaseOBProcessorMemoryImages.ShowError(szMessage);
						delete pDatabaseOBProcessorMemoryImageBlock;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYIMAGE_MEMORY_FAILURE), (LPCTSTR)cDatabaseOBProcessorMemoryImages.GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryImages.GetVersion(), (cDatabaseOBProcessorMemoryImages.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_IMG_DATAADDRESS_NONE), (cDatabaseOBProcessorMemoryImages.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_IMG_DATAADDRESS_NONE));
					cDatabaseOBProcessorMemoryImages.ShowError(szMessage);
					break;
				}
			}
			try
			{
				cDatabaseOBProcessorMemoryImages.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYIMAGES_READ_FAILURE));
				cDatabaseOBProcessorMemoryImages.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYIMAGE_MEMORY_FAILURE), (LPCTSTR)cDatabaseOBProcessorMemoryImages.GetName(), (LPCTSTR)cDatabaseOBProcessorMemoryImages.GetVersion(), (cDatabaseOBProcessorMemoryImages.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_IMG_DATAADDRESS_NONE), (cDatabaseOBProcessorMemoryImages.GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_IMG_DATAADDRESS_NONE));
				cDatabaseOBProcessorMemoryImages.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nMemoryImage = 0, nMemoryImages = (INT)pDatabase->GetOBProcessorMemoryImages()->GetSize(); nMemoryImage < nMemoryImages; nMemoryImage++)
		{
			if ((pDatabaseOBProcessorMemoryImage = pDatabase->GetOBProcessorMemoryImages()->GetAt(nMemoryImage)) != (CDatabaseOBProcessorMemoryImage *)NULL)
			{
				for (nMemoryBlock[0] = 0, nMemoryBlocks[0] = (INT)pDatabaseOBProcessorMemoryImage->GetSize(), szImageVersion.Empty(), bAddressArea = FALSE; nMemoryBlock[0] < nMemoryBlocks[0]; nMemoryBlock[0]++)
				{
					if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nMemoryBlock[0])) && pDatabaseOBProcessorMemoryImageBlock->GetAddress(nAddress[0][0], nAddress[0][1]))
					{
						if (!pDatabaseOBProcessorMemoryImageBlock->GetVersion().Compare(szImageVersion) && (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] != nAddressArea  &&  !bAddressArea)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYIMAGE_NONCONTINGUOUS), (LPCTSTR)pDatabaseOBProcessorMemoryImage->GetName(), (LPCTSTR)pDatabaseOBProcessorMemoryImageBlock->GetVersion(), (pDatabaseOBProcessorMemoryImageBlock->GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_IMG_DATAADDRESS_NONE), (pDatabaseOBProcessorMemoryImageBlock->GetAddress(nAddress[0][0], nAddress[0][1])) ? (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : STRING(IDS_DATABASE_TABLE_IMG_DATAADDRESS_NONE));
							cDatabaseOBProcessorMemoryImages.ShowError(pDatabaseOBProcessorMemoryImage->GetName(), szMessage);
						}
						bAddressArea = (!pDatabaseOBProcessorMemoryImageBlock->GetVersion().Compare(szImageVersion) && pDatabaseOBProcessorMemoryImageBlock->GetData(nImageData[0]) > 0) ? bAddressArea : TRUE;
						nAddressArea = (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] + (nImageData[0].GetSize() + nAddressBytes - 1) / nAddressBytes;
						szImageVersion = pDatabaseOBProcessorMemoryImageBlock->GetVersion();
					}
				}
			}
		}
		for (nProcessor[0] = 0, nProcessors[0] = (INT)pDatabase->GetOBProcessors()->GetSize(); nProcessor[0] < nProcessors[0]; nProcessor[0]++)
		{
			if ((pDatabaseOBProcessor[0] = pDatabase->GetOBProcessors()->GetAt(nProcessor[0])) && pDatabaseOBProcessor[0]->GetAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1]))
			{
				for (pDatabaseOBProcessor[0]->SetMasterImageRef(pDatabase->GetOBProcessorMemoryImages()->Find(pDatabaseOBProcessor[0]->GetMasterImage())); !pDatabaseOBProcessor[0]->GetMasterImage().IsEmpty() && pDatabaseOBProcessor[0]->GetMasterImageRef() < 0; )
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSOR_ILLEGALMASTERIMAGE), (LPCTSTR)pDatabaseOBProcessor[0]->GetName());
					cDatabaseOBProcessors.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
					break;
				}
				if ((pDatabaseOBProcessorMemoryImage = pDatabase->GetOBProcessorMemoryImages()->GetAt(pDatabaseOBProcessor[0]->GetMasterImageRef())))
				{
					for (nMemoryBlock[0] = 0, nMemoryBlocks[0] = (INT)pDatabaseOBProcessorMemoryImage->GetSize(); nMemoryBlock[0] < nMemoryBlocks[0]; nMemoryBlock[0]++)
					{
						if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nMemoryBlock[0])) && !pDatabaseOBProcessorMemoryImageBlock->GetVersion().Compare(STRING(IDS_DATABASE_TABLE_GEN_MASTERIMAGE_DEFAULT)) && pDatabaseOBProcessorMemoryImageBlock->GetAddress(nAddress[2][0], nAddress[2][1]) && (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] >= (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][0] && (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] <= (ULONGLONG)nAddress[0][1] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1]) break;
						continue;
					}
					if (nMemoryBlock[0] == nMemoryBlocks[0])
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSOR_ILLEGALMASTERIMAGE), (LPCTSTR)pDatabaseOBProcessor[0]->GetName());
						cDatabaseOBProcessors.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
					}
					for (nMemoryBlock[0] = 0, nMemoryBlocks[0] = (INT)pDatabaseOBProcessorMemoryImage->GetSize(); nMemoryBlock[0] < nMemoryBlocks[0]; nMemoryBlock[0]++)
					{
						if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nMemoryBlock[0])) && pDatabaseOBProcessorMemoryImageBlock->GetAddress(nAddress[2][0], nAddress[2][1]) && ((ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] < (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][0] || (ULONGLONG)nAddress[2][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[2][1] > (ULONGLONG) nAddress[0][1] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1])) break;
						continue;
					}
					if (nMemoryBlock[0] < nMemoryBlocks[0])
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSOR_ILLEGALMASTERIMAGE), (LPCTSTR)pDatabaseOBProcessor[0]->GetName());
						cDatabaseOBProcessors.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
					}
				}
				for (nMemoryArea = 0, nMemoryArea = (INT)pDatabaseOBProcessor[0]->GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
				{
					if ((pDatabaseOBProcessorMemoryArea[0] = pDatabaseOBProcessor[0]->GetAt(nMemoryArea)) != (CDatabaseOBProcessorMemoryArea *)NULL)
					{
						for (nMemoryBlock[0] = 0, nMemoryBlocks[0] = (INT)pDatabaseOBProcessorMemoryArea[0]->GetSize(); nMemoryBlock[0] < nMemoryBlocks[0]; nMemoryBlock[0]++)
						{
							if ((pDatabaseOBProcessorMemoryAreaBlock = pDatabaseOBProcessorMemoryArea[0]->GetAt(nMemoryBlock[0])) && pDatabaseOBProcessorMemoryAreaBlock->GetAddress(nAddress[0][0], nAddress[0][1]))
							{
								for (nMemoryImage = 0, nMemoryImages = (INT)pDatabase->GetOBProcessorMemoryImages()->GetSize(); nMemoryImage < nMemoryImages; nMemoryImage++)
								{
									if ((pDatabaseOBProcessorMemoryImage = pDatabase->GetOBProcessorMemoryImages()->GetAt(nMemoryImage)) != (CDatabaseOBProcessorMemoryImage *)NULL)
									{
										for (nMemoryBlock[1] = 0, nMemoryBlocks[1] = (INT)pDatabaseOBProcessorMemoryImage->GetSize(); nMemoryBlock[1] < nMemoryBlocks[1]; nMemoryBlock[1]++)
										{
											if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nMemoryBlock[1])) && pDatabaseOBProcessorMemoryImageBlock->GetAddress(nAddress[1][0], nAddress[1][1]))
											{
												if (((ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] >= (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1] && (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] <= (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1] + (pDatabaseOBProcessorMemoryImageBlock->GetData(nImageData[0]) + nAddressBytes - 1) / nAddressBytes) || ((ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] + (pDatabaseOBProcessorMemoryAreaBlock->GetBitOffset() + pDatabaseOBProcessorMemoryAreaBlock->GetBitWidth() - 1) / (8 * nAddressBytes) >= (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1] && (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1] + (pDatabaseOBProcessorMemoryAreaBlock->GetBitOffset() + pDatabaseOBProcessorMemoryAreaBlock->GetBitWidth() - 1) / (8 * nAddressBytes) <= (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1] + (pDatabaseOBProcessorMemoryImageBlock->GetData(nImageData[0]) + nAddressBytes - 1) / nAddressBytes))
												{
													for (nProcessor[1] = 0, nProcessors[1] = nProcessors[0]; nProcessor[1] < nProcessors[1]; nProcessor[1]++)
													{
														if ((pDatabaseOBProcessor[1] = pDatabase->GetOBProcessors()->GetAt(nProcessor[1])) != (CDatabaseOBProcessor *)NULL)
														{
															if ((pDatabaseOBProcessorMemoryArea[1] = pDatabaseOBProcessor[1]->GetAt(pDatabaseOBProcessor[1]->Find(pDatabaseOBProcessorMemoryImage->GetName()))))
															{
																if ((pDatabaseOBProcessorMemoryArea[0]->GetAttributes() & (OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE | OBPROCESSORMEMORYAREA_FLAG_PATCHABLE)) != (pDatabaseOBProcessorMemoryArea[1]->GetAttributes() & (OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE | OBPROCESSORMEMORYAREA_FLAG_PATCHABLE)))
																{
																	szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREA_INCONSISTENTPATCHFLAG), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)pDatabaseOBProcessorMemoryArea[0]->GetName(), (LPCTSTR)pDatabaseOBProcessorMemoryArea[1]->GetName());
																	cDatabaseOBProcessorMemoryAreas.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
																}
																if ((pDatabaseOBProcessorMemoryArea[0]->GetAttributes() & (OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE | OBPROCESSORMEMORYAREA_FLAG_DUMPABLE)) != (pDatabaseOBProcessorMemoryArea[1]->GetAttributes() & (OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE | OBPROCESSORMEMORYAREA_FLAG_DUMPABLE)))
																{
																	szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREA_INCONSISTENTDUMPFLAG), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)pDatabaseOBProcessorMemoryArea[0]->GetName(), (LPCTSTR)pDatabaseOBProcessorMemoryArea[1]->GetName());
																	cDatabaseOBProcessorMemoryAreas.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
																}
																if ((pDatabaseOBProcessorMemoryArea[0]->GetAttributes() & (OBPROCESSORMEMORYAREA_FLAG_NOUPDATE | OBPROCESSORMEMORYAREA_FLAG_UPDATE)) != (pDatabaseOBProcessorMemoryArea[1]->GetAttributes() & (OBPROCESSORMEMORYAREA_FLAG_NOUPDATE | OBPROCESSORMEMORYAREA_FLAG_UPDATE)))
																{
																	szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREA_INCONSISTENTUPDATEFLAG), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)pDatabaseOBProcessorMemoryArea[0]->GetName(), (LPCTSTR)pDatabaseOBProcessorMemoryArea[1]->GetName());
																	cDatabaseOBProcessorMemoryAreas.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
																}
																if ((pDatabaseOBProcessorMemoryArea[0]->GetAttributes() & (OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT | OBPROCESSORMEMORYAREA_FLAG_INHIBIT)) != (pDatabaseOBProcessorMemoryArea[1]->GetAttributes() & (OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT | OBPROCESSORMEMORYAREA_FLAG_INHIBIT)))
																{
																	szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREA_INCONSISTENTINHIBITFLAG), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)pDatabaseOBProcessorMemoryArea[0]->GetName(), (LPCTSTR)pDatabaseOBProcessorMemoryArea[1]->GetName());
																	cDatabaseOBProcessorMemoryAreas.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						if ((pDatabaseOBProcessorMemoryAreaCheckSum = new CDatabaseOBProcessorMemoryAreaCheckSum))
						{
							for (pDatabaseOBProcessorMemoryArea[0]->GetCheckSum(pDatabaseOBProcessorMemoryAreaCheckSum); pDatabaseOBProcessorMemoryAreaCheckSum->GetAddressRange(nAddress[0][0], nAddress[0][1], nAddress[0][2]) && (!pDatabaseOBProcessorMemoryArea[0]->GetSize() || ((pDatabaseOBProcessorMemoryAreaBlock = pDatabaseOBProcessorMemoryArea[0]->GetAt(0)) && pDatabaseOBProcessorMemoryAreaBlock->GetAddress(nAddress[1][0], nAddress[1][1]) && (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1] != (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][1]) || ((pDatabaseOBProcessorMemoryAreaBlock = pDatabaseOBProcessorMemoryArea[0]->GetAt((INT)pDatabaseOBProcessorMemoryArea[0]->GetUpperBound() - 1)) && pDatabaseOBProcessorMemoryAreaBlock->GetAddress(nAddress[1][0], nAddress[1][1]) && (ULONGLONG)nAddress[1][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[1][1] + (pDatabaseOBProcessorMemoryAreaBlock->GetBitWidth() + pDatabaseOBProcessorMemoryAreaBlock->GetBitOffset() - 1) / (8 * nAddressBytes) != (ULONGLONG)nAddress[0][0] * (ULONGLONG)(nRange[1][1] - nRange[1][0] + 1) + (ULONGLONG)nAddress[0][2])); )
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYAREACHECKSUM_NONCONGRUENTADDRESSRANGE), (LPCTSTR)pDatabaseOBProcessor[0]->GetName(), (LPCTSTR)pDatabaseOBProcessorMemoryArea[0]->GetName());
								cDatabaseOBProcessorMemoryAreaCheckSums.ShowError(pDatabaseOBProcessor[0]->GetName(), szMessage);
								break;
							}
							delete pDatabaseOBProcessorMemoryAreaCheckSum;
						}
					}
				}
			}
		}
		ShowCompileMessages(&cDatabaseOBProcessorMemoryImages);
		ShowCompileMessages(&cDatabaseOBProcessorMemoryAreas);
		ShowCompileMessages(&cDatabaseOBProcessors);
		cDatabaseOBProcessorMemoryImages.Close();
	}
	else
	{
		cDatabaseOBProcessorMemoryImages.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_OBPROCESSORMEMORYIMAGES_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseOBProcessorMemoryImages);
	}
}

VOID CALTELDatabaseEngine::CompileTMParameters(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nPacket;
	INT  nPackets;
	INT  nStream;
	INT  nStreams;
	INT  nParameter;
	INT  nParameters;
	CString  szPacket;
	CString  szMessage;
	CString  szParameter;
	CString  szExpression;
	CUIntArray  nTriggerRefs[2];
	CUIntArray  nValidityRefs;
	CStringArray  szParameters;
	CStringArray  szExpressionErrors;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTMParameter  *pDatabaseTMParameter[2];
	CDatabaseTMPacketStream  *pDatabaseTMPacketStream;
	CALTELDatabaseTMPacketsRecordset  cDatabaseTMPackets(this);
	CALTELDatabaseTMParametersRecordset  cDatabaseTMParameters(this);
	CALTELDatabaseTMPacketStreamsRecordset  cDatabaseTMPacketStreams(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TMPARAMETERS));
	try
	{
		cDatabaseTMParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PCF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMParameters.IsOpen())
	{
		for (pDatabase->GetTMParameters()->RemoveAll(); !cDatabaseTMParameters.IsBOF() && !cDatabaseTMParameters.IsEOF() && IsCompiling(); )
		{
			if ((cDatabaseTMParameters.GetStatus() & TMPARAMETER_RECORDSTATUS_DEFAULT) >= TMPARAMETER_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTMParameter[0] = new CDatabaseTMParameter))
				{
					pDatabaseTMParameter[0]->SetTag(cDatabaseTMParameters.GetTag());
					pDatabaseTMParameter[0]->SetDescription(cDatabaseTMParameters.GetDescription());
					pDatabaseTMParameter[0]->SetDetails(cDatabaseTMParameters.GetDetails());
					pDatabaseTMParameter[0]->SetUnit(cDatabaseTMParameters.GetUnit());
					pDatabaseTMParameter[0]->SetWidth(cDatabaseTMParameters.GetBitWidth());
					pDatabaseTMParameter[0]->SetAttributes(cDatabaseTMParameters.GetAttributes());
					pDatabaseTMParameter[0]->SetConstValueAsText(cDatabaseTMParameters.GetConstValue());
					pDatabaseTMParameter[0]->SetRelatedParameter(cDatabaseTMParameters.GetRelatedParameter());
					pDatabaseTMParameter[0]->SetValidityParameter(cDatabaseTMParameters.GetValidityParameter());
					pDatabaseTMParameter[0]->SetValidityValue((!cDatabaseTMParameters.GetValidityParameter().IsEmpty()) ? 1 : -1);
					pDatabaseTMParameter[0]->SetTriggerExpression(cDatabaseTMParameters.GetTriggerExpression());
					pDatabaseTMParameter[0]->SetDerivationExpression(cDatabaseTMParameters.GetDerivationExpression());
					pDatabaseTMParameter[0]->SetInterrogationInstruction(cDatabaseTMParameters.GetInterrogationInstruction());
					pDatabaseTMParameter[0]->SetStatus(cDatabaseTMParameters.GetStatus());
					if (pDatabase->GetTMParameters()->Find(cDatabaseTMParameters.GetTag()) < 0)
					{
						if ((nIndex = pDatabase->GetTMParameters()->Add(pDatabaseTMParameter[0])) < 0)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMParameters.GetTag());
							cDatabaseTMParameters.ShowError(szMessage);
							delete pDatabaseTMParameter[0];
							break;
						}
						szParameters.InsertAt(nIndex, pDatabaseTMParameter[0]->GetTag());
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_DUPLICATETAG), (LPCTSTR)cDatabaseTMParameters.GetTag());
						cDatabaseTMParameters.ShowError(szMessage);
						delete pDatabaseTMParameter[0];
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMParameters.GetTag());
					cDatabaseTMParameters.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTMParameters);
			}
			try
			{
				cDatabaseTMParameters.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETERS_READ_FAILURE));
				cDatabaseTMParameters.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMParameters.GetTag());
				cDatabaseTMParameters.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nPacket = 0, nPackets = (INT)pDatabase->GetTMPackets()->GetSize(); nPacket < nPackets; nPacket++)
		{
			if ((pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt(nPacket)) && pDatabaseTMPacket->GetTriggerRefs(nTriggerRefs[0]) > 0)
			{
				nTriggerRefs[0].RemoveAll();
				nTriggerRefs[1].RemoveAll();
				pDatabaseTMPacket->SetTriggerRefs(nTriggerRefs[0]);
			}
		}
		for (nParameter = 0, nParameters = (INT)pDatabase->GetTMParameters()->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTMParameter[0] = pDatabase->GetTMParameters()->GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
			{
				if ((pDatabaseTMParameter[1] = pDatabase->GetTMParameters()->GetAt((nIndex = pDatabase->GetTMParameters()->Find(pDatabaseTMParameter[0]->GetValidityParameter())))))
				{
					if ((pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_NATURE_CONSTANT) || pDatabaseTMParameter[0]->GetTag() == pDatabaseTMParameter[1]->GetTag() || pDatabaseTMParameter[1]->GetWidth() != 1)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALVALIDITYPARAMETER), (LPCTSTR)pDatabaseTMParameter[0]->GetTag());
						cDatabaseTMParameters.ShowError(pDatabaseTMParameter[0]->GetTag(), szMessage);
					}
					for (pDatabaseTMParameter[0]->SetValidityParameterRef(nIndex), pDatabaseTMParameter[0]->SetValidityValue(1); pDatabaseTMParameter[1]->GetValidityRefs(nValidityRefs) >= 0; )
					{
						nValidityRefs.Add(nParameter);
						break;
					}
					pDatabaseTMParameter[1]->SetValidityRefs(nValidityRefs);
				}
				else
				{
					if (pDatabaseTMParameter[0]->GetValidityParameter().GetLength() > 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALVALIDITYPARAMETER), (LPCTSTR)pDatabaseTMParameter[0]->GetTag());
						cDatabaseTMParameters.ShowError(pDatabaseTMParameter[0]->GetTag(), szMessage);
					}
				}
				for (; pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_NATURE_CONSTANT; )
				{
					pDatabaseTMParameter[0]->SetConstValue(TranslateTMParameterConstValue(pDatabaseTMParameter[0]->GetAttributes(), pDatabaseTMParameter[0]->GetWidth(), pDatabaseTMParameter[0]->GetConstValueAsText()));
					break;
				}
				if (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_NATURE_DERIVED)
				{
					if (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_TRIGGERTYPE_PACKET)
					{
						if ((pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt((nIndex = pDatabase->GetTMPackets()->Find(pDatabaseTMParameter[0]->GetTriggerExpression())))) && pDatabaseTMParameter[0]->GetTriggerExpression() != GetTMPacketSubTag() && pDatabaseTMParameter[0]->GetTriggerExpression() != GetTMPacketDummyTag())
						{
							if (pDatabaseTMPacket->GetTriggerRefs(nTriggerRefs[0]) >= 0) nTriggerRefs[0].Add(nParameter);
							pDatabaseTMPacket->SetTriggerRefs(nTriggerRefs[0]);
						}
						else
						{
							if (pDatabase->GetTMPackets()->GetSize() > 0 || !pDatabaseTMParameter[0]->GetTriggerExpression().IsEmpty())
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTRIGGERPACKET), (LPCTSTR)pDatabaseTMParameter[0]->GetTag());
								cDatabaseTMParameters.ShowError(pDatabaseTMParameter[0]->GetTag(), szMessage);
							}
						}
					}
					if (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_TRIGGERTYPE_PARAMETER)
					{
						if (TranslateTMParameterTriggerExpression(pDatabaseTMParameter[0]->GetTriggerExpression(), szParameter, szPacket))
						{
							if ((pDatabaseTMParameter[1] = pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(szParameter))) && pDatabaseTMParameter[0]->GetTag() != szParameter)
							{
								if (pDatabaseTMParameter[1]->GetTriggerRefs(nTriggerRefs[0], nTriggerRefs[1]) >= 0)
								{
									nTriggerRefs[1].Add(pDatabase->GetTMPackets()->Find(szPacket));
									nTriggerRefs[0].Add(nParameter);
								}
								if (!szPacket.IsEmpty() && nTriggerRefs[1].GetAt(nTriggerRefs[1].GetUpperBound()) == (UINT)-1)
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTRIGGERPACKET), (LPCTSTR)pDatabaseTMParameter[0]->GetTag());
									cDatabaseTMParameters.ShowError(pDatabaseTMParameter[0]->GetTag(), szMessage);
								}
								pDatabaseTMParameter[1]->SetTriggerRefs(nTriggerRefs[0], nTriggerRefs[1]);
							}
							else
							{
								if (pDatabase->GetTMParameters()->GetSize() > 0 || !szParameter.IsEmpty())
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTRIGGERPARAMETER), (LPCTSTR)pDatabaseTMParameter[0]->GetTag());
									cDatabaseTMParameters.ShowError(pDatabaseTMParameter[0]->GetTag(), szMessage);
								}
							}
						}
					}
					for (TranslateTMParameterDerivationExpression(pDatabaseTMParameter[0]->GetTag(), pDatabaseTMParameter[0]->GetDerivationExpression(), szParameters, szExpression, szExpressionErrors); szExpressionErrors.GetSize() > 0; )
					{
						cDatabaseTMParameters.ShowError(pDatabaseTMParameter[0]->GetTag(), szExpressionErrors.GetAt(0));
						szExpressionErrors.RemoveAt(0);
					}
					pDatabaseTMParameter[0]->SetDerivationExpression(szExpression);
				}
			}
		}
		for (nPacket = 0, nPackets = (INT)pDatabase->GetTMPackets()->GetSize(); nPacket < nPackets; nPacket++)
		{
			if ((pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt(nPacket)) != (CDatabaseTMPacket *)NULL)
			{
				if ((pDatabaseTMParameter[1] = pDatabase->GetTMParameters()->GetAt((nIndex = pDatabase->GetTMParameters()->Find(pDatabaseTMPacket->GetEventIDParameter())))))
				{
					pDatabaseTMPacket->SetEventIDParameterRef(nIndex);
					continue;
				}
				if (pDatabaseTMPacket->GetEventIDParameter().GetLength() > 0)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKET_ILLEGALEVENTID), (LPCTSTR)pDatabaseTMPacket->GetEventIDParameter());
					cDatabaseTMPackets.ShowError(pDatabaseTMPacket->GetTag(), szMessage);
				}
			}
		}
		for (nStream = 0, nStreams = (INT)pDatabase->GetTMPacketStreams()->GetSize(); nStream < nStreams; nStream++)
		{
			if ((pDatabaseTMPacketStream = pDatabase->GetTMPacketStreams()->GetAt(nStream)) != (CDatabaseTMPacketStream *)NULL)
			{
				for (pDatabaseTMPacketStream->SetValidityParameterRef(pDatabase->GetTMParameters()->Find(pDatabaseTMPacketStream->GetValidityParameter())); !pDatabaseTMPacketStream->GetValidityParameter().IsEmpty() && pDatabaseTMPacketStream->GetValidityParameterRef() < 0; )
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETSTREAM_ILLEGALVALIDITYPARAMETER), (LPCTSTR)pDatabaseTMPacketStream->GetName());
					cDatabaseTMPacketStreams.ShowError(pDatabaseTMPacketStream->GetName(), szMessage);
					break;
				}
				if ((pDatabaseTMParameter[0] = pDatabase->GetTMParameters()->GetAt(pDatabaseTMPacketStream->GetValidityParameterRef())) && pDatabaseTMParameter[0]->GetWidth() != 1)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETSTREAM_ILLEGALVALIDITYPARAMETER), (LPCTSTR)pDatabaseTMPacketStream->GetName());
					cDatabaseTMPacketStreams.ShowError(pDatabaseTMPacketStream->GetName(), szMessage);
				}
			}
		}
		ShowCompileMessages(&cDatabaseTMPacketStreams);
		ShowCompileMessages(&cDatabaseTMParameters);
		ShowCompileMessages(&cDatabaseTMPackets);
		cDatabaseTMParameters.Close();
	}
	else
	{
		cDatabaseTMParameters.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETERS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMParameters);
	}
}

VOID CALTELDatabaseEngine::CompileTCParameters(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	CString  szMessage;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CALTELDatabaseTCParametersRecordset  cDatabaseTCParameters(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCPARAMETERS));
	try
	{
		cDatabaseTCParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CPC_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCParameters.IsOpen())
	{
		for (pDatabase->GetTCParameters()->RemoveAll(); !cDatabaseTCParameters.IsBOF() && !cDatabaseTCParameters.IsEOF() && IsCompiling(); )
		{
			if ((cDatabaseTCParameters.GetStatus() & TCPARAMETER_RECORDSTATUS_DEFAULT) >= TCPARAMETER_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTCParameter = new CDatabaseTCParameter))
				{
					pDatabaseTCParameter->SetTag(cDatabaseTCParameters.GetTag());
					pDatabaseTCParameter->SetDescription(cDatabaseTCParameters.GetDescription());
					pDatabaseTCParameter->SetUnit(cDatabaseTCParameters.GetUnit());
					pDatabaseTCParameter->SetWidth(cDatabaseTCParameters.GetBitWidth());
					pDatabaseTCParameter->SetAttributes(cDatabaseTCParameters.GetAttributes());
					pDatabaseTCParameter->SetCalTable(cDatabaseTCParameters.GetCalTable());
					pDatabaseTCParameter->SetOolTable(cDatabaseTCParameters.GetOolTable());
					pDatabaseTCParameter->SetStatus(cDatabaseTCParameters.GetStatus());
					if (pDatabase->GetTCParameters()->Find(cDatabaseTCParameters.GetTag()) < 0)
					{
						if ((nIndex = pDatabase->GetTCParameters()->Add(pDatabaseTCParameter)) < 0)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCParameters.GetTag());
							cDatabaseTCParameters.ShowError(szMessage);
							delete pDatabaseTCParameter;
							break;
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_DUPLICATETAG), (LPCTSTR)cDatabaseTCParameters.GetTag());
						cDatabaseTCParameters.ShowError(szMessage);
						delete pDatabaseTCParameter;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCParameters.GetTag());
					cDatabaseTCParameters.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTCParameters);
			}
			try
			{
				cDatabaseTCParameters.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERS_READ_FAILURE));
				cDatabaseTCParameters.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCParameters.GetTag());
				cDatabaseTCParameters.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTCParameters);
		cDatabaseTCParameters.Close();
	}
	else
	{
		cDatabaseTCParameters.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCParameters);
	}
}

VOID CALTELDatabaseEngine::CompileTMNumCalTables(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nPoint;
	INT  nPoints;
	INT  nTable[2];
	INT  nTables[2];
	INT  nParameter;
	INT  nParameters;
	CString  szMessage;
	CUIntArray  nCalTableRefs[2];
	CStringArray  szCalTables[2];
	CLongUIntArray  nCalTableValues;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMNumCalPoint  *pDatabaseTMNumCalPoint;
	CALTELDatabaseTMParametersRecordset  cDatabaseTMParameters(this);
	CALTELDatabaseTMNumCalTablesRecordset  cDatabaseTMNumCalTables(this);
	CALTELDatabaseTMNumCalTablePointsRecordset  cDatabaseTMNumCalTablePoints(this);
	CALTELDatabaseTMNumCalTableAssociationsRecordset  cDatabaseTMNumCalTableAssociations(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TMNUMCALTABLES));
	try
	{
		cDatabaseTMNumCalTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CAL_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMNumCalTables.IsOpen())
	{
		for (nParameter = 0, nParameters = (INT)pDatabase->GetTMParameters()->GetSize(), pDatabase->GetTMNumCalTables()->RemoveAll(), szCalTables[0].RemoveAll(), szCalTables[1].RemoveAll(), nCalTableValues.RemoveAll(), nCalTableRefs[0].RemoveAll(), nCalTableRefs[1].RemoveAll(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(nParameter)) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL))
			{
				pDatabaseTMParameter->SetCalTables(szCalTables[0], szCalTables[1], nCalTableValues);
				pDatabaseTMParameter->SetCalTableRefs(nCalTableRefs[0], nCalTableRefs[1]);
			}
		}
		while (!cDatabaseTMNumCalTables.IsBOF() && !cDatabaseTMNumCalTables.IsEOF() && IsCompiling())
		{
			if ((cDatabaseTMNumCalTables.GetStatus() & TMCALTABLE_RECORDSTATUS_DEFAULT) >= TMCALTABLE_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTMNumCalTable = new CDatabaseTMNumCalTable))
				{
					pDatabaseTMNumCalTable->SetName(cDatabaseTMNumCalTables.GetName());
					pDatabaseTMNumCalTable->SetDescription(cDatabaseTMNumCalTables.GetDescription());
					pDatabaseTMNumCalTable->SetUnit(cDatabaseTMNumCalTables.GetUnit());
					pDatabaseTMNumCalTable->SetPoints(cDatabaseTMNumCalTables.GetPoints());
					pDatabaseTMNumCalTable->SetStatus(cDatabaseTMNumCalTables.GetStatus());
					if ((nIndex = pDatabase->GetTMNumCalTables()->Find(cDatabaseTMNumCalTables.GetName())) < 0 && pDatabase->GetTMNumCalTables()->Add(pDatabaseTMNumCalTable) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMNumCalTables.GetName());
						cDatabaseTMNumCalTables.ShowError(szMessage);
						delete pDatabaseTMNumCalTable;
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLE_DUPLICATENAME), (LPCTSTR)cDatabaseTMNumCalTables.GetName());
						cDatabaseTMNumCalTables.ShowError(szMessage);
						delete pDatabaseTMNumCalTable;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMNumCalTables.GetName());
					cDatabaseTMNumCalTables.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTMNumCalTables);
			}
			try
			{
				cDatabaseTMNumCalTables.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLES_READ_FAILURE));
				cDatabaseTMNumCalTables.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMNumCalTables.GetName());
				cDatabaseTMNumCalTables.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTMNumCalTables);
		cDatabaseTMNumCalTables.Close();
	}
	else
	{
		cDatabaseTMNumCalTables.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLES_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMNumCalTables);
	}
	try
	{
		cDatabaseTMNumCalTablePoints.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CALP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMNumCalTablePoints.IsOpen())
	{
		while (!cDatabaseTMNumCalTablePoints.IsBOF() && !cDatabaseTMNumCalTablePoints.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTMNumCalTable = pDatabase->GetTMNumCalTables()->GetAt(pDatabase->GetTMNumCalTables()->Find(cDatabaseTMNumCalTablePoints.GetName()))))
			{
				if ((pDatabaseTMNumCalPoint = new CDatabaseTMNumCalPoint) != (CDatabaseTMNumCalPoint *)NULL)
				{
					pDatabaseTMNumCalPoint->SetPoint(cDatabaseTMNumCalTablePoints.GetX(), cDatabaseTMNumCalTablePoints.GetY());
					if ((nIndex = pDatabaseTMNumCalTable->Find(cDatabaseTMNumCalTablePoints.GetX())) < 0 && pDatabaseTMNumCalTable->Add(pDatabaseTMNumCalPoint) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEPOINT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMNumCalTablePoints.GetName());
						cDatabaseTMNumCalTablePoints.ShowError(szMessage);
						delete pDatabaseTMNumCalPoint;
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEPOINT_IDENTICALPOINT), (LPCTSTR)cDatabaseTMNumCalTablePoints.GetName(), cDatabaseTMNumCalTablePoints.GetX());
						cDatabaseTMNumCalTablePoints.ShowError(szMessage);
						delete pDatabaseTMNumCalPoint;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEPOINT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMNumCalTablePoints.GetName());
					cDatabaseTMNumCalTablePoints.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTMNumCalTablePoints);
			}
			else
			{
				if (pDatabase->GetTMNumCalTables()->GetSize() > 0 || !cDatabaseTMNumCalTablePoints.GetName().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEPOINT_UNDEFINEDNAME), (LPCTSTR)cDatabaseTMNumCalTablePoints.GetName(), cDatabaseTMNumCalTablePoints.GetX());
					cDatabaseTMNumCalTablePoints.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTMNumCalTablePoints);
			}
			try
			{
				cDatabaseTMNumCalTablePoints.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEPOINTS_READ_FAILURE));
				cDatabaseTMNumCalTablePoints.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEPOINT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMNumCalTablePoints.GetName());
				cDatabaseTMNumCalTablePoints.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nTable[0] = 0, nTables[0] = (INT)pDatabase->GetTMNumCalTables()->GetSize(); nTable[0] < nTables[0]; nTable[0]++)
		{
			if ((pDatabaseTMNumCalTable = pDatabase->GetTMNumCalTables()->GetAt(nTable[0])) != (CDatabaseTMNumCalTable *)NULL)
			{
				if (pDatabaseTMNumCalTable->GetPoints() != pDatabaseTMNumCalTable->GetSize() && pDatabaseTMNumCalTable->GetPoints() > 0)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TMNUMCALTABLE_ILLEGALNUMBEROFPOINTS), (LPCTSTR)pDatabaseTMNumCalTable->GetName());
					cDatabaseTMNumCalTables.ShowWarning(pDatabaseTMNumCalTable->GetName(), szMessage);
				}
				if (!pDatabaseTMNumCalTable->GetPoints() && !pDatabaseTMNumCalTable->GetSize())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TMNUMCALTABLE_NOPOINTS), (LPCTSTR)pDatabaseTMNumCalTable->GetName());
					cDatabaseTMNumCalTables.ShowWarning(pDatabaseTMNumCalTable->GetName(), szMessage);
				}
				for (nPoint = 0, nPoints = (INT)pDatabaseTMNumCalTable->GetSize(); nPoint < nPoints - 1; nPoint++)
				{
					if (!CheckTMNumCalTablePointInterval(pDatabaseTMNumCalTable->GetAt(nPoint)->GetX(), pDatabaseTMNumCalTable->GetAt(nPoint + 1)->GetX()))
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEPOINT_EPSPOINT), (LPCTSTR)pDatabaseTMNumCalTable->GetName(), pDatabaseTMNumCalTable->GetAt(nPoint)->GetX());
						cDatabaseTMNumCalTablePoints.ShowError(pDatabaseTMNumCalTable->GetName(), szMessage);
					}
				}
				pDatabaseTMNumCalTable->SetPoints((INT)pDatabaseTMNumCalTable->GetSize());
			}
		}
		ShowCompileMessages(&cDatabaseTMNumCalTables);
		ShowCompileMessages(&cDatabaseTMNumCalTablePoints);
		cDatabaseTMNumCalTablePoints.Close();
	}
	else
	{
		cDatabaseTMNumCalTablePoints.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEPOINTS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMNumCalTablePoints);
	}
	try
	{
		cDatabaseTMNumCalTableAssociations.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PCAL_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMNumCalTableAssociations.IsOpen())
	{
		while (!cDatabaseTMNumCalTableAssociations.IsBOF() && !cDatabaseTMNumCalTableAssociations.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTMNumCalTable = pDatabase->GetTMNumCalTables()->GetAt(pDatabase->GetTMNumCalTables()->Find(cDatabaseTMNumCalTableAssociations.GetName()))))
			{
				if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(cDatabaseTMNumCalTableAssociations.GetParameter()))))
				{
					if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)
					{
						pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1], nCalTableValues);
						pDatabaseTMParameter->GetCalTableRefs(nCalTableRefs[0], nCalTableRefs[1]);
						szCalTables[0].Add(cDatabaseTMNumCalTableAssociations.GetName());
						szCalTables[1].Add(cDatabaseTMNumCalTableAssociations.GetValidityParameter());
						nCalTableRefs[0].Add(pDatabase->GetTMNumCalTables()->Find(cDatabaseTMNumCalTableAssociations.GetName()));
						if (pDatabase->GetTMParameters()->Find(cDatabaseTMNumCalTableAssociations.GetValidityParameter()) < 0 || pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(cDatabaseTMNumCalTableAssociations.GetValidityParameter()))->GetWidth() == 1)
						{
							nCalTableRefs[1].Add(pDatabase->GetTMParameters()->Find(cDatabaseTMNumCalTableAssociations.GetValidityParameter()));
							nCalTableValues.Add((nCalTableRefs[1].GetAt(nCalTableRefs[1].GetUpperBound()) != (UINT)-1) ? 1 : 0);
						}
						else
						{
							if (pDatabase->GetTMParameters()->Find(cDatabaseTMNumCalTableAssociations.GetValidityParameter()) >= 0 || cDatabaseTMNumCalTableAssociations.GetValidityParameter().GetLength() > 0)
							{
								szMessage.Format((pDatabase->GetTMParameters()->Find(cDatabaseTMNumCalTableAssociations.GetValidityParameter()) >= 0) ? STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEASSOCIATION_ILLEGALVALIDITYPARAMETER) : STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEASSOCIATION_UNDEFINEDVALIDITYPARAMETER), (LPCTSTR)cDatabaseTMNumCalTableAssociations.GetName(), (LPCTSTR)cDatabaseTMNumCalTableAssociations.GetParameter());
								cDatabaseTMNumCalTableAssociations.ShowError(szMessage);
							}
							nCalTableRefs[1].Add(-1);
							nCalTableValues.Add(-1);
						}
						pDatabaseTMParameter->SetCalTables(szCalTables[0], szCalTables[1], nCalTableValues);
						pDatabaseTMParameter->SetCalTableRefs(nCalTableRefs[0], nCalTableRefs[1]);
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEASSOCIATION_ILLEGALPARAMETER), (LPCTSTR)cDatabaseTMNumCalTableAssociations.GetName(), (LPCTSTR)cDatabaseTMNumCalTableAssociations.GetParameter());
						cDatabaseTMNumCalTableAssociations.ShowError(szMessage);
					}
				}
				else
				{
					if (pDatabase->GetTMParameters()->GetSize() > 0 || !cDatabaseTMNumCalTableAssociations.GetParameter().IsEmpty())
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEASSOCIATION_UNDEFINEDPARAMETER), (LPCTSTR)cDatabaseTMNumCalTableAssociations.GetName(), (LPCTSTR)cDatabaseTMNumCalTableAssociations.GetParameter());
						cDatabaseTMNumCalTableAssociations.ShowError(szMessage);
					}
				}
				ShowCompileMessages(&cDatabaseTMNumCalTableAssociations);
			}
			else
			{
				if (pDatabase->GetTMNumCalTables()->GetSize() > 0 || !cDatabaseTMNumCalTableAssociations.GetName().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEASSOCIATION_UNDEFINEDNAME), (LPCTSTR)cDatabaseTMNumCalTableAssociations.GetName(), (LPCTSTR)cDatabaseTMNumCalTableAssociations.GetParameter());
					cDatabaseTMNumCalTableAssociations.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTMNumCalTableAssociations);
			}
			try
			{
				cDatabaseTMNumCalTableAssociations.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEASSOCIATIONS_READ_FAILURE));
				cDatabaseTMNumCalTableAssociations.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEASSOCIATION_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMNumCalTableAssociations.GetName());
				cDatabaseTMNumCalTableAssociations.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nParameter = 0, nParameters = (INT)pDatabase->GetTMParameters()->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(nParameter)) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL))
			{
				if ((nTables[0] = nTables[1] = pDatabaseTMParameter->GetCalTableRefs(nCalTableRefs[0], nCalTableRefs[1])) > GetTMParameterNumCalTablesCount() || ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_CONSTANT) && nTables[0] > 1) || !nTables[0])
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMBEROFNUMCALTABLES), (LPCTSTR)pDatabaseTMParameter->GetTag());
					cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
				}
				if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_CONSTANT) && nTables[0] == 1 && nCalTableRefs[1].GetAt(0) != (UINT)-1)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMCALTABLEVALIDITY), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabase->GetTMNumCalTables()->GetAt(nCalTableRefs[0].GetAt(0))->GetName());
					cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
				}
				for (nTable[0] = 0; nTable[0] < nTables[0] - 1; nTable[0]++)
				{
					for (nTable[1] = nTable[0] + 1; nTable[1] < nTables[1]; nTable[1]++)
					{
						if (nCalTableRefs[1].GetAt(nTable[0]) == nCalTableRefs[1].GetAt(nTable[1]) || nCalTableRefs[1].GetAt(nTable[0]) == (UINT)-1 || nCalTableRefs[1].GetAt(nTable[1]) == (UINT)-1) break;
						continue;
					}
					if (nTable[1] < nTables[1]) break;
				}
				if (nTable[0] < nTables[0] - 1)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMCALTABLEVALIDITY), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabase->GetTMNumCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable[0]))->GetName());
					cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
				}
				for (nTable[0] = 0; nTable[0] < nTables[0]; nTable[0]++)
				{
					if ((pDatabaseTMNumCalTable = pDatabase->GetTMNumCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable[0]))))
					{
						for (nPoint = 0, nPoints = (INT)pDatabaseTMNumCalTable->GetSize(); nPoint < nPoints; nPoint++)
						{
							if (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_INVERSEBITPATTERN) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_UNSIGNEDINTEGER)) && (pDatabaseTMNumCalTable->GetAt(nPoint)->GetX() < 0.0 || pDatabaseTMNumCalTable->GetAt(nPoint)->GetX() >= pow(2.0, pDatabaseTMParameter->GetWidth()))) break;
							if (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_COMPLEMENTCOMPLEX)) && (pDatabaseTMNumCalTable->GetAt(nPoint)->GetX() < -pow(2.0, pDatabaseTMParameter->GetWidth() - 1) || pDatabaseTMNumCalTable->GetAt(nPoint)->GetX() >= pow(2.0, pDatabaseTMParameter->GetWidth() - 1))) break;
						}
						if (nPoint < nPoints) break;
					}
				}
				if (nTable[0] < nTables[0])
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMCALTABLEXVALUE), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabase->GetTMNumCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable[0]))->GetName());
					cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
				}
			}
		}
		ShowCompileMessages(&cDatabaseTMNumCalTableAssociations);
		ShowCompileMessages(&cDatabaseTMNumCalTables);
		cDatabaseTMNumCalTableAssociations.Close();
	}
	else
	{
		cDatabaseTMNumCalTableAssociations.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMNUMCALTABLEASSOCIATIONS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMNumCalTableAssociations);
	}
}

VOID CALTELDatabaseEngine::CompileTMTxtCalTables(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nPoint[2];
	INT  nPoints[2];
	INT  nTable[2];
	INT  nTables[2];
	INT  nParameter;
	INT  nParameters;
	double  fX1[2];
	double  fX2[2];
	CString  szText[2];
	CString  szMessage;
	CUIntArray  nCalTableRefs[2];
	CStringArray  szCalTables[2];
	CLongUIntArray  nCalTableValues;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;
	CALTELDatabaseTMParametersRecordset  cDatabaseTMParameters(this);
	CALTELDatabaseTMTxtCalTablesRecordset  cDatabaseTMTxtCalTables(this);
	CALTELDatabaseTMTxtCalTablePointsRecordset  cDatabaseTMTxtCalTablePoints(this);
	CALTELDatabaseTMTxtCalTableAssociationsRecordset  cDatabaseTMTxtCalTableAssociations(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TMTXTCALTABLES));
	try
	{
		cDatabaseTMTxtCalTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_TXF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMTxtCalTables.IsOpen())
	{
		for (nParameter = 0, nParameters = (INT)pDatabase->GetTMParameters()->GetSize(), pDatabase->GetTMTxtCalTables()->RemoveAll(), szCalTables[0].RemoveAll(), szCalTables[1].RemoveAll(), nCalTableValues.RemoveAll(), nCalTableRefs[0].RemoveAll(), nCalTableRefs[1].RemoveAll(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(nParameter)) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS))
			{
				pDatabaseTMParameter->SetCalTables(szCalTables[0], szCalTables[1], nCalTableValues);
				pDatabaseTMParameter->SetCalTableRefs(nCalTableRefs[0], nCalTableRefs[1]);
			}
		}
		while (!cDatabaseTMTxtCalTables.IsBOF() && !cDatabaseTMTxtCalTables.IsEOF() && IsCompiling())
		{
			if ((cDatabaseTMTxtCalTables.GetStatus() & TMCALTABLE_RECORDSTATUS_DEFAULT) >= TMCALTABLE_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTMTxtCalTable = new CDatabaseTMTxtCalTable))
				{
					pDatabaseTMTxtCalTable->SetName(cDatabaseTMTxtCalTables.GetName());
					pDatabaseTMTxtCalTable->SetDescription(cDatabaseTMTxtCalTables.GetDescription());
					pDatabaseTMTxtCalTable->SetPoints(cDatabaseTMTxtCalTables.GetPoints());
					pDatabaseTMTxtCalTable->SetStatus(cDatabaseTMTxtCalTables.GetStatus());
					if ((nIndex = pDatabase->GetTMTxtCalTables()->Find(cDatabaseTMTxtCalTables.GetName())) < 0 && pDatabase->GetTMTxtCalTables()->Add(pDatabaseTMTxtCalTable) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMTxtCalTables.GetName());
						cDatabaseTMTxtCalTables.ShowError(szMessage);
						delete pDatabaseTMTxtCalTable;
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLE_DUPLICATENAME), (LPCTSTR)cDatabaseTMTxtCalTables.GetName());
						cDatabaseTMTxtCalTables.ShowError(szMessage);
						delete pDatabaseTMTxtCalTable;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMTxtCalTables.GetName());
					cDatabaseTMTxtCalTables.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTMTxtCalTables);
			}
			try
			{
				cDatabaseTMTxtCalTables.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLES_READ_FAILURE));
				cDatabaseTMTxtCalTables.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMTxtCalTables.GetName());
				cDatabaseTMTxtCalTables.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTMTxtCalTables);
		cDatabaseTMTxtCalTables.Close();
	}
	else
	{
		cDatabaseTMTxtCalTables.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLES_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMTxtCalTables);
	}
	try
	{
		cDatabaseTMTxtCalTablePoints.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_TXFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMTxtCalTablePoints.IsOpen())
	{
		while (!cDatabaseTMTxtCalTablePoints.IsBOF() && !cDatabaseTMTxtCalTablePoints.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTMTxtCalTable = pDatabase->GetTMTxtCalTables()->GetAt(pDatabase->GetTMTxtCalTables()->Find(cDatabaseTMTxtCalTablePoints.GetName()))))
			{
				if ((pDatabaseTMTxtCalPoint = new CDatabaseTMTxtCalPoint) != (CDatabaseTMTxtCalPoint *)NULL)
				{
					for (; cDatabaseTMTxtCalTablePoints.GetX1() == cDatabaseTMTxtCalTablePoints.GetX2(); )
					{
						pDatabaseTMTxtCalPoint->SetPoint(cDatabaseTMTxtCalTablePoints.GetX1(), cDatabaseTMTxtCalTablePoints.GetText());
						break;
					}
					for (; cDatabaseTMTxtCalTablePoints.GetX1() != cDatabaseTMTxtCalTablePoints.GetX2(); )
					{
						pDatabaseTMTxtCalPoint->SetRange(cDatabaseTMTxtCalTablePoints.GetX1(), cDatabaseTMTxtCalTablePoints.GetX2(), cDatabaseTMTxtCalTablePoints.GetText());
						break;
					}
					if ((nIndex = max(pDatabaseTMTxtCalTable->Find(cDatabaseTMTxtCalTablePoints.GetX1()), pDatabaseTMTxtCalTable->Find(cDatabaseTMTxtCalTablePoints.GetX2()))) < 0 && pDatabaseTMTxtCalTable->Add(pDatabaseTMTxtCalPoint) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEPOINT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMTxtCalTablePoints.GetName());
						cDatabaseTMTxtCalTablePoints.ShowError(szMessage);
						delete pDatabaseTMTxtCalPoint;
						break;
					}
					if (nIndex >= 0)
					{
						if (cDatabaseTMTxtCalTablePoints.GetX1() == cDatabaseTMTxtCalTablePoints.GetX2())
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEPOINT_INTERSECTINGPOINTSBYPOINT), (LPCTSTR)cDatabaseTMTxtCalTablePoints.GetName(), cDatabaseTMTxtCalTablePoints.GetX1(), (LPCTSTR)cDatabaseTMTxtCalTablePoints.GetText());
							cDatabaseTMTxtCalTablePoints.ShowError(szMessage);
						}
						if (cDatabaseTMTxtCalTablePoints.GetX1() != cDatabaseTMTxtCalTablePoints.GetX2())
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEPOINT_INTERSECTINGPOINTSBYRANGE), (LPCTSTR)cDatabaseTMTxtCalTablePoints.GetName(), cDatabaseTMTxtCalTablePoints.GetX1(), cDatabaseTMTxtCalTablePoints.GetX2(), (LPCTSTR)cDatabaseTMTxtCalTablePoints.GetText());
							cDatabaseTMTxtCalTablePoints.ShowError(szMessage);
						}
						delete pDatabaseTMTxtCalPoint;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEPOINT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMTxtCalTablePoints.GetName());
					cDatabaseTMTxtCalTablePoints.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTMTxtCalTablePoints);
			}
			else
			{
				if (pDatabase->GetTMTxtCalTables()->GetSize() > 0 || !cDatabaseTMTxtCalTablePoints.GetName().IsEmpty())
				{
					if (cDatabaseTMTxtCalTablePoints.GetX1() == cDatabaseTMTxtCalTablePoints.GetX2())
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEPOINT_UNDEFINEDNAMEATPOINT), (LPCTSTR)cDatabaseTMTxtCalTablePoints.GetName(), cDatabaseTMTxtCalTablePoints.GetX1(), (LPCTSTR)cDatabaseTMTxtCalTablePoints.GetText());
						cDatabaseTMTxtCalTablePoints.ShowError(szMessage);
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEPOINT_UNDEFINEDNAMEATRANGE), (LPCTSTR)cDatabaseTMTxtCalTablePoints.GetName(), cDatabaseTMTxtCalTablePoints.GetX1(), cDatabaseTMTxtCalTablePoints.GetX2(), (LPCTSTR)cDatabaseTMTxtCalTablePoints.GetText());
						cDatabaseTMTxtCalTablePoints.ShowError(szMessage);
					}
				}
				ShowCompileMessages(&cDatabaseTMTxtCalTablePoints);
			}
			try
			{
				cDatabaseTMTxtCalTablePoints.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEPOINTS_READ_FAILURE));
				cDatabaseTMTxtCalTablePoints.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEPOINT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMTxtCalTablePoints.GetName());
				cDatabaseTMTxtCalTablePoints.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nTable[0] = 0, nTables[0] = (INT)pDatabase->GetTMTxtCalTables()->GetSize(); nTable[0] < nTables[0]; nTable[0]++)
		{
			if ((pDatabaseTMTxtCalTable = pDatabase->GetTMTxtCalTables()->GetAt(nTable[0])) != (CDatabaseTMTxtCalTable *)NULL)
			{
				for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTMTxtCalTable->GetSize(); nPoint[0] < nPoints[0] - 1; nPoint[0]++)
				{
					for (nPoint[1] = nPoint[0] + 1, nPoints[1] = nPoints[0]; nPoint[1] < nPoints[1]; nPoint[1] = nPoint[1] + 1)
					{
						if (pDatabaseTMTxtCalTable->GetAt(nPoint[0])->GetRange(fX1[0], fX2[0], szText[0]) && pDatabaseTMTxtCalTable->GetAt(nPoint[1])->GetRange(fX1[1], fX2[1], szText[1]))
						{
							if (szText[0] == szText[1]) break;
							continue;
						}
					}
					if (nPoint[1] < nPoints[1]) break;
				}
				if (nPoint[0] < nPoints[0] - 1)
				{
					if (fX1[0] == fX2[0])
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TMTXTCALTABLE_DUPLICATETEXTATPOINT), (LPCTSTR)pDatabaseTMTxtCalTable->GetName(), (INT)fX1[0], (LPCTSTR)szText[0]);
						cDatabaseTMTxtCalTables.ShowWarning(pDatabaseTMTxtCalTable->GetName(), szMessage);
					}
					if (fX1[0] != fX2[0])
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TMTXTCALTABLE_DUPLICATETEXTATRANGE), (LPCTSTR)pDatabaseTMTxtCalTable->GetName(), (INT)fX1[0], (INT)fX2[0], (LPCTSTR)szText[0]);
						cDatabaseTMTxtCalTables.ShowWarning(pDatabaseTMTxtCalTable->GetName(), szMessage);
					}
				}
				if (pDatabaseTMTxtCalTable->GetPoints() != pDatabaseTMTxtCalTable->GetSize())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TMTXTCALTABLE_ILLEGALNUMBEROFPOINTS), (LPCTSTR)pDatabaseTMTxtCalTable->GetName());
					cDatabaseTMTxtCalTables.ShowWarning(pDatabaseTMTxtCalTable->GetName(), szMessage);
				}
				if (!pDatabaseTMTxtCalTable->GetPoints() && !pDatabaseTMTxtCalTable->GetSize())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TMTXTCALTABLE_NOPOINTS), (LPCTSTR)pDatabaseTMTxtCalTable->GetName());
					cDatabaseTMTxtCalTables.ShowWarning(pDatabaseTMTxtCalTable->GetName(), szMessage);
				}
				pDatabaseTMTxtCalTable->SetPoints((INT)pDatabaseTMTxtCalTable->GetSize());
			}
		}
		ShowCompileMessages(&cDatabaseTMTxtCalTablePoints);
		ShowCompileMessages(&cDatabaseTMTxtCalTables);
		cDatabaseTMTxtCalTablePoints.Close();
	}
	else
	{
		cDatabaseTMTxtCalTablePoints.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEPOINTS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMTxtCalTablePoints);
	}
	try
	{
		cDatabaseTMTxtCalTableAssociations.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PTXF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMTxtCalTableAssociations.IsOpen())
	{
		while (!cDatabaseTMTxtCalTableAssociations.IsBOF() && !cDatabaseTMTxtCalTableAssociations.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTMTxtCalTable = pDatabase->GetTMTxtCalTables()->GetAt(pDatabase->GetTMTxtCalTables()->Find(cDatabaseTMTxtCalTableAssociations.GetName()))))
			{
				if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(cDatabaseTMTxtCalTableAssociations.GetParameter()))))
				{
					if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS)
					{
						pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1], nCalTableValues);
						pDatabaseTMParameter->GetCalTableRefs(nCalTableRefs[0], nCalTableRefs[1]);
						szCalTables[0].Add(cDatabaseTMTxtCalTableAssociations.GetName());
						szCalTables[1].Add(cDatabaseTMTxtCalTableAssociations.GetValidityParameter());
						nCalTableRefs[0].Add(pDatabase->GetTMTxtCalTables()->Find(cDatabaseTMTxtCalTableAssociations.GetName()));
						if (pDatabase->GetTMParameters()->Find(cDatabaseTMTxtCalTableAssociations.GetValidityParameter()) < 0 || pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(cDatabaseTMTxtCalTableAssociations.GetValidityParameter()))->GetWidth() == 1)
						{
							nCalTableRefs[1].Add(pDatabase->GetTMParameters()->Find(cDatabaseTMTxtCalTableAssociations.GetValidityParameter()));
							nCalTableValues.Add((nCalTableRefs[1].GetAt(nCalTableRefs[1].GetUpperBound()) != (UINT)-1) ? 1 : 0);
						}
						else
						{
							if (pDatabase->GetTMParameters()->Find(cDatabaseTMTxtCalTableAssociations.GetValidityParameter()) >= 0 || cDatabaseTMTxtCalTableAssociations.GetValidityParameter().GetLength() > 0)
							{
								szMessage.Format((pDatabase->GetTMParameters()->Find(cDatabaseTMTxtCalTableAssociations.GetValidityParameter()) >= 0) ? STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEASSOCIATION_ILLEGALVALIDITYPARAMETER) : STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEASSOCIATION_UNDEFINEDVALIDITYPARAMETER), (LPCTSTR)cDatabaseTMTxtCalTableAssociations.GetName(), (LPCTSTR)cDatabaseTMTxtCalTableAssociations.GetParameter());
								cDatabaseTMTxtCalTableAssociations.ShowError(szMessage);
							}
							nCalTableRefs[1].Add(-1);
							nCalTableValues.Add(-1);
						}
						pDatabaseTMParameter->SetCalTables(szCalTables[0], szCalTables[1], nCalTableValues);
						pDatabaseTMParameter->SetCalTableRefs(nCalTableRefs[0], nCalTableRefs[1]);
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEASSOCIATION_ILLEGALPARAMETER), (LPCTSTR)cDatabaseTMTxtCalTableAssociations.GetName(), (LPCTSTR)cDatabaseTMTxtCalTableAssociations.GetParameter());
						cDatabaseTMTxtCalTableAssociations.ShowError(szMessage);
					}
				}
				else
				{
					if (pDatabase->GetTMParameters()->GetSize() > 0 || !cDatabaseTMTxtCalTableAssociations.GetParameter().IsEmpty())
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEASSOCIATION_UNDEFINEDPARAMETER), (LPCTSTR)cDatabaseTMTxtCalTableAssociations.GetName(), (LPCTSTR)cDatabaseTMTxtCalTableAssociations.GetParameter());
						cDatabaseTMTxtCalTableAssociations.ShowError(szMessage);
					}
				}
				ShowCompileMessages(&cDatabaseTMTxtCalTableAssociations);
			}
			else
			{
				if (pDatabase->GetTMTxtCalTables()->GetSize() > 0 || !cDatabaseTMTxtCalTableAssociations.GetName().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEASSOCIATION_UNDEFINEDNAME), (LPCTSTR)cDatabaseTMTxtCalTableAssociations.GetName(), (LPCTSTR)cDatabaseTMTxtCalTableAssociations.GetParameter());
					cDatabaseTMTxtCalTableAssociations.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTMTxtCalTableAssociations);
			}
			try
			{
				cDatabaseTMTxtCalTableAssociations.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEASSOCIATIONS_READ_FAILURE));
				cDatabaseTMTxtCalTableAssociations.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEASSOCIATION_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMTxtCalTableAssociations.GetName());
				cDatabaseTMTxtCalTableAssociations.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nParameter = 0, nParameters = (INT)pDatabase->GetTMParameters()->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(nParameter)) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS))
			{
				if ((nTables[0] = nTables[1] = pDatabaseTMParameter->GetCalTableRefs(nCalTableRefs[0], nCalTableRefs[1])) > GetTMParameterTxtCalTablesCount() || ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_CONSTANT) && nTables[0] > 1) || !nTables[0])
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMBEROFTXTCALTABLES), (LPCTSTR)pDatabaseTMParameter->GetTag());
					cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
				}
				if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_CONSTANT) && nTables[0] == 1 && nCalTableRefs[1].GetAt(0) != (UINT)-1)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTXTCALTABLEVALIDITY), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabase->GetTMTxtCalTables()->GetAt(nCalTableRefs[0].GetAt(0))->GetName());
					cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
				}
				for (nTable[0] = 0; nTable[0] < nTables[0] - 1; nTable[0]++)
				{
					for (nTable[1] = nTable[0] + 1; nTable[1] < nTables[1]; nTable[1]++)
					{
						if (nCalTableRefs[1].GetAt(nTable[0]) == nCalTableRefs[1].GetAt(nTable[1]) || nCalTableRefs[1].GetAt(nTable[0]) == (UINT)-1 || nCalTableRefs[1].GetAt(nTable[1]) == (UINT)-1) break;
						continue;
					}
					if (nTable[1] < nTables[1]) break;
				}
				if (nTable[0] < nTables[0] - 1)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTXTCALTABLEVALIDITY), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabase->GetTMTxtCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable[0]))->GetName());
					cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
				}
				for (nTable[0] = 0; nTable[0] < nTables[0]; nTable[0]++)
				{
					if ((pDatabaseTMTxtCalTable = pDatabase->GetTMTxtCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable[0]))))
					{
						for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTMTxtCalTable->GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
						{
							if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_INVERSEBITPATTERN) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_UNSIGNEDINTEGER))
							{
								if (pDatabaseTMTxtCalTable->GetAt(nPoint[0])->GetPoint(fX1[0], szText[0]) && (fX1[0] < 0.0 || fX1[0] >= pow(2.0, pDatabaseTMParameter->GetWidth()))) break;
								if (pDatabaseTMTxtCalTable->GetAt(nPoint[0])->GetRange(fX1[0], fX2[0], szText[0]) && (fX1[0] < 0.0 || fX2[0] < 0.0 || fX1[0] >= pow(2.0, pDatabaseTMParameter->GetWidth()) || fX2[0] >= pow(2.0, pDatabaseTMParameter->GetWidth()))) break;
							}
							if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_COMPLEMENTCOMPLEX))
							{
								if (pDatabaseTMTxtCalTable->GetAt(nPoint[0])->GetPoint(fX1[0], szText[0]) && (fX1[0] < -pow(2.0, pDatabaseTMParameter->GetWidth() - 1) || fX1[0] >= pow(2.0, pDatabaseTMParameter->GetWidth() - 1))) break;
								if (pDatabaseTMTxtCalTable->GetAt(nPoint[0])->GetRange(fX1[0], fX2[0], szText[0]) && (fX1[0] < -pow(2.0, pDatabaseTMParameter->GetWidth() - 1) || fX1[0] >= pow(2.0, pDatabaseTMParameter->GetWidth() - 1) || fX2[0] < -pow(2.0, pDatabaseTMParameter->GetWidth() - 1) || fX2[0] >= pow(2.0, pDatabaseTMParameter->GetWidth() - 1))) break;
							}
						}
						if (nPoint[0] < nPoints[0]) break;
					}
				}
				if (nTable[0] < nTables[0])
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTXTCALTABLEXVALUE), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabase->GetTMTxtCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable[0]))->GetName());
					cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
				}
			}
		}
		ShowCompileMessages(&cDatabaseTMTxtCalTableAssociations);
		ShowCompileMessages(&cDatabaseTMTxtCalTables);
		ShowCompileMessages(&cDatabaseTMParameters);
		cDatabaseTMTxtCalTableAssociations.Close();
	}
	else
	{
		cDatabaseTMTxtCalTableAssociations.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMTXTCALTABLEASSOCIATIONS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMTxtCalTableAssociations);
	}
}

VOID CALTELDatabaseEngine::CompileTMNumOolTables(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nPoint[2];
	INT  nPoints[2];
	INT  nTable[2];
	INT  nTables[2];
	INT  nParameter;
	INT  nParameters;
	UINT  nLimitType;
	double  fLimits[2][2];
	CString  szMessage;
	CUIntArray  nCalTableRefs[2];
	CUIntArray  nOolTableRefs[2];
	CStringArray  szOolTables[2];
	CLongUIntArray  nOolTableValues;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMNumOolLimit  *pDatabaseTMNumOolLimit;
	CDatabaseTMNumOolTables  pDatabaseTMNumOolTables;
	CALTELDatabaseTMParametersRecordset  cDatabaseTMParameters(this);
	CALTELDatabaseTMNumOolTablesRecordset  cDatabaseTMNumOolTables(this);
	CALTELDatabaseTMNumOolTableLimitsRecordset  cDatabaseTMNumOolTableLimits(this);
	CALTELDatabaseTMNumOolTableAssociationsRecordset  cDatabaseTMNumOolTableAssociations(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TMNUMOOLTABLES));
	try
	{
		cDatabaseTMNumOolTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_OCF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMNumOolTables.IsOpen())
	{
		for (nParameter = 0, nParameters = (INT)pDatabase->GetTMParameters()->GetSize(), pDatabase->GetTMNumOolTables()->RemoveAll(), szOolTables[0].RemoveAll(), szOolTables[1].RemoveAll(), nOolTableValues.RemoveAll(), nOolTableRefs[0].RemoveAll(), nOolTableRefs[1].RemoveAll(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(nParameter)) && ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NONE) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)))
			{
				pDatabaseTMParameter->SetOolTables(szOolTables[0], szOolTables[1], nOolTableValues);
				pDatabaseTMParameter->SetOolTableRefs(nOolTableRefs[0], nOolTableRefs[1]);
			}
		}
		while (!cDatabaseTMNumOolTables.IsBOF() && !cDatabaseTMNumOolTables.IsEOF() && IsCompiling())
		{
			if ((cDatabaseTMNumOolTables.GetStatus() & TMOOLTABLE_RECORDSTATUS_DEFAULT) >= TMOOLTABLE_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTMNumOolTable = new CDatabaseTMNumOolTable))
				{
					pDatabaseTMNumOolTable->SetName(cDatabaseTMNumOolTables.GetName());
					pDatabaseTMNumOolTable->SetAttributes(cDatabaseTMNumOolTables.GetAttributes());
					pDatabaseTMNumOolTable->SetChecks(cDatabaseTMNumOolTables.GetChecks());
					pDatabaseTMNumOolTable->SetStatus(cDatabaseTMNumOolTables.GetStatus());
					if ((nIndex = pDatabase->GetTMNumOolTables()->Find(cDatabaseTMNumOolTables.GetName())) < 0 && pDatabase->GetTMNumOolTables()->Add(pDatabaseTMNumOolTable) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMNumOolTables.GetName());
						cDatabaseTMNumOolTables.ShowError(szMessage);
						delete pDatabaseTMNumOolTable;
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLE_DUPLICATENAME), (LPCTSTR)cDatabaseTMNumOolTables.GetName());
						cDatabaseTMNumOolTables.ShowError(szMessage);
						delete pDatabaseTMNumOolTable;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMNumOolTables.GetName());
					cDatabaseTMNumOolTables.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTMNumOolTables);
			}
			try
			{
				cDatabaseTMNumOolTables.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLES_READ_FAILURE));
				cDatabaseTMNumOolTables.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMNumOolTables.GetName());
				cDatabaseTMNumOolTables.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTMNumOolTables);
		cDatabaseTMNumOolTables.Close();
	}
	else
	{
		cDatabaseTMNumOolTables.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLES_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMNumOolTables);
	}
	try
	{
		cDatabaseTMNumOolTableLimits.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_OCFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMNumOolTableLimits.IsOpen())
	{
		while (!cDatabaseTMNumOolTableLimits.IsBOF() && !cDatabaseTMNumOolTableLimits.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTMNumOolTable = pDatabase->GetTMNumOolTables()->GetAt(pDatabase->GetTMNumOolTables()->Find(cDatabaseTMNumOolTableLimits.GetName()))))
			{
				if ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) || (pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CHECK_CALIBRATED))
				{
					if ((pDatabaseTMNumOolLimit = new CDatabaseTMNumOolLimit))
					{
						switch (cDatabaseTMNumOolTableLimits.GetOrder())
						{
						case TMOOLLIMIT_TYPE_SOFT:
						case TMOOLLIMIT_TYPE_HARD:
						{ pDatabaseTMNumOolLimit->SetType(cDatabaseTMNumOolTableLimits.GetOrder());
						break;
						}
						default:
						{ pDatabaseTMNumOolLimit->SetType(TMOOLLIMIT_TYPE_NONE);
						break;
						}
						}
						if (pDatabaseTMNumOolLimit->GetType() != TMOOLLIMIT_TYPE_NONE)
						{
							pDatabaseTMNumOolLimit->SetOrder(cDatabaseTMNumOolTableLimits.GetOrder());
							pDatabaseTMNumOolLimit->SetRange(pDatabaseTMNumOolLimit->GetType(), (fLimits[0][0] = cDatabaseTMNumOolTableLimits.GetLowLimit()), (fLimits[0][1] = cDatabaseTMNumOolTableLimits.GetHighLimit()));
							for (szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLELIMIT_ILLEGALLOWLIMIT), (LPCTSTR)cDatabaseTMNumOolTableLimits.GetName(), (!isnan(cDatabaseTMNumOolTableLimits.GetLowLimit())) ? (LPCTSTR)TranslateTMNumOolTableLimitValue(cDatabaseTMNumOolTableLimits.GetAttributes(), cDatabaseTMNumOolTableLimits.GetLowLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE), (!isnan(cDatabaseTMNumOolTableLimits.GetHighLimit())) ? (LPCTSTR)TranslateTMNumOolTableLimitValue(cDatabaseTMNumOolTableLimits.GetAttributes(), cDatabaseTMNumOolTableLimits.GetHighLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE)); isnan(cDatabaseTMNumOolTableLimits.GetLowLimit()); )
							{
								cDatabaseTMNumOolTableLimits.ShowError(szMessage);
								break;
							}
							for (szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLELIMIT_ILLEGALHIGHLIMIT), (LPCTSTR)cDatabaseTMNumOolTableLimits.GetName(), (!isnan(cDatabaseTMNumOolTableLimits.GetLowLimit())) ? (LPCTSTR)TranslateTMNumOolTableLimitValue(cDatabaseTMNumOolTableLimits.GetAttributes(), cDatabaseTMNumOolTableLimits.GetLowLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE), (!isnan(cDatabaseTMNumOolTableLimits.GetHighLimit())) ? (LPCTSTR)TranslateTMNumOolTableLimitValue(cDatabaseTMNumOolTableLimits.GetAttributes(), cDatabaseTMNumOolTableLimits.GetHighLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE)); isnan(cDatabaseTMNumOolTableLimits.GetHighLimit()); )
							{
								cDatabaseTMNumOolTableLimits.ShowError(szMessage);
								break;
							}
							if (!isnan(cDatabaseTMNumOolTableLimits.GetLowLimit()) && !isnan(cDatabaseTMNumOolTableLimits.GetHighLimit()))
							{
								if (cDatabaseTMNumOolTableLimits.GetOrder() <= GetTMNumOolTableLimitCount(pDatabaseTMNumOolTable->GetAttributes()))
								{
									if (pDatabaseTMNumOolTable->Find(fLimits[0][0], fLimits[0][1]) >= 0 || fLimits[0][0] > fLimits[0][1] || pDatabaseTMNumOolTable->Add(pDatabaseTMNumOolLimit) < 0)
									{
										szMessage.Format((fLimits[0][0] <= fLimits[0][1]) ? STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLELIMIT_IDENTICALLIMIT) : STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLELIMIT_ILLEGALHIGHLIMIT), (LPCTSTR)cDatabaseTMNumOolTableLimits.GetName(), (!isnan(cDatabaseTMNumOolTableLimits.GetLowLimit())) ? (LPCTSTR)TranslateTMNumOolTableLimitValue(cDatabaseTMNumOolTableLimits.GetAttributes(), cDatabaseTMNumOolTableLimits.GetLowLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE), (!isnan(cDatabaseTMNumOolTableLimits.GetHighLimit())) ? (LPCTSTR)TranslateTMNumOolTableLimitValue(cDatabaseTMNumOolTableLimits.GetAttributes(), cDatabaseTMNumOolTableLimits.GetHighLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE));
										cDatabaseTMNumOolTableLimits.ShowError(szMessage);
										delete pDatabaseTMNumOolLimit;
									}
								}
								else  delete pDatabaseTMNumOolLimit;
							}
							else  delete pDatabaseTMNumOolLimit;
						}
						else
						{
							if (cDatabaseTMNumOolTableLimits.GetOrder() > 0)
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLELIMIT_ILLEGALLIMITORDER), (LPCTSTR)cDatabaseTMNumOolTableLimits.GetName(), (!isnan(cDatabaseTMNumOolTableLimits.GetLowLimit())) ? (LPCTSTR)TranslateTMNumOolTableLimitValue(cDatabaseTMNumOolTableLimits.GetAttributes(), cDatabaseTMNumOolTableLimits.GetLowLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE), (!isnan(cDatabaseTMNumOolTableLimits.GetHighLimit())) ? (LPCTSTR)TranslateTMNumOolTableLimitValue(cDatabaseTMNumOolTableLimits.GetAttributes(), cDatabaseTMNumOolTableLimits.GetHighLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE));
								cDatabaseTMNumOolTableLimits.ShowError(szMessage);
							}
							delete pDatabaseTMNumOolLimit;
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLELIMIT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMNumOolTableLimits.GetName());
						cDatabaseTMNumOolTableLimits.ShowError(szMessage);
						break;
					}
				}
				ShowCompileMessages(&cDatabaseTMNumOolTableLimits);
			}
			else
			{
				if (pDatabase->GetTMNumOolTables()->GetSize() > 0 || !cDatabaseTMNumOolTableLimits.GetName().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLELIMIT_UNDEFINEDNAME), (LPCTSTR)cDatabaseTMNumOolTableLimits.GetName(), (!isnan(cDatabaseTMNumOolTableLimits.GetLowLimit())) ? (LPCTSTR)TranslateTMNumOolTableLimitValue(cDatabaseTMNumOolTableLimits.GetAttributes(), cDatabaseTMNumOolTableLimits.GetLowLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE), (!isnan(cDatabaseTMNumOolTableLimits.GetHighLimit())) ? (LPCTSTR)TranslateTMNumOolTableLimitValue(cDatabaseTMNumOolTableLimits.GetAttributes(), cDatabaseTMNumOolTableLimits.GetHighLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE));
					cDatabaseTMNumOolTableLimits.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTMNumOolTableLimits);
			}
			try
			{
				cDatabaseTMNumOolTableLimits.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLELIMITS_READ_FAILURE));
				cDatabaseTMNumOolTableLimits.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLELIMIT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMNumOolTableLimits.GetName());
				cDatabaseTMNumOolTableLimits.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nTable[0] = 0, nTables[0] = (INT)pDatabase->GetTMNumOolTables()->GetSize(); nTable[0] < nTables[0]; nTable[0]++)
		{
			if ((pDatabaseTMNumOolTable = pDatabase->GetTMNumOolTables()->GetAt(nTable[0])))
			{
				if (pDatabaseTMNumOolTable->GetAttributes() & (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CHECK_CALIBRATED))
				{
					for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTMNumOolTable->GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
					{
						if ((pDatabaseTMNumOolLimit = pDatabaseTMNumOolTable->GetAt(nPoint[0])) && pDatabaseTMNumOolLimit->GetRange(nLimitType, fLimits[0][0], fLimits[0][1]))
						{
							if (nLimitType == TMOOLLIMIT_TYPE_SOFT  &&  nPoint[0] < nPoints[0] - 1 && pDatabaseTMNumOolTable->GetAt(nPoint[0] + 1)->GetRange(nLimitType, fLimits[1][0], fLimits[1][1]) && (fLimits[0][0] < fLimits[1][0] || fLimits[0][1] > fLimits[1][1]))
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLELIMIT_ILLEGALSOFTHARDLIMITS), (LPCTSTR)pDatabaseTMNumOolTable->GetName());
								cDatabaseTMNumOolTableLimits.ShowError(pDatabaseTMNumOolTable->GetName(), szMessage);
								break;
							}
						}
					}
					if (!nPoints[0])
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLELIMIT_NOLIMITS), (LPCTSTR)pDatabaseTMNumOolTable->GetName());
						cDatabaseTMNumOolTableLimits.ShowError(pDatabaseTMNumOolTable->GetName(), szMessage);
					}
				}
			}
		}
		ShowCompileMessages(&cDatabaseTMNumOolTableLimits);
		cDatabaseTMNumOolTableLimits.Close();
	}
	else
	{
		cDatabaseTMNumOolTableLimits.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLELIMITS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMNumOolTableLimits);
	}
	for (nTable[0] = 0, nTables[0] = (pDatabaseTMNumOolTables.Copy(pDatabase->GetTMNumOolTables())) ? (INT)pDatabaseTMNumOolTables.GetSize() : -1; nTable[0] < nTables[0]; nTable[0]++)
	{
		if ((pDatabaseTMNumOolTable = pDatabaseTMNumOolTables.GetAt(nTable[0])) && (pDatabaseTMNumOolTable->GetAttributes() & (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CHECK_CALIBRATED)) == 0)
		{
			pDatabaseTMNumOolTables.RemoveAt(nTable[0]);
			delete pDatabaseTMNumOolTable;
			nTables[0]--;
			nTable[0]--;
		}
	}
	try
	{
		cDatabaseTMNumOolTableAssociations.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_POCF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMNumOolTableAssociations.IsOpen())
	{
		while (!cDatabaseTMNumOolTableAssociations.IsBOF() && !cDatabaseTMNumOolTableAssociations.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTMNumOolTable = pDatabase->GetTMNumOolTables()->GetAt(pDatabase->GetTMNumOolTables()->Find(cDatabaseTMNumOolTableAssociations.GetName()))))
			{
				if ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) || (pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CHECK_CALIBRATED))
				{
					if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(cDatabaseTMNumOolTableAssociations.GetParameter()))))
					{
						if (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NONE) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)) && (((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) && (((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_UNSIGNEDINTEGER) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_UNSIGNEDINTEGER)) || ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_SIGNEDINTEGER) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER)) || ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_FLOATINGPOINT) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT)))) || ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CHECK_CALIBRATED) && pDatabaseTMParameter->GetCalTableRefs(nCalTableRefs[0], nCalTableRefs[1]) > 0)))
						{
							pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1], nOolTableValues);
							pDatabaseTMParameter->GetOolTableRefs(nOolTableRefs[0], nOolTableRefs[1]);
							szOolTables[0].Add(cDatabaseTMNumOolTableAssociations.GetName());
							szOolTables[1].Add(cDatabaseTMNumOolTableAssociations.GetValidityParameter());
							nOolTableRefs[0].Add(pDatabaseTMNumOolTables.Find(cDatabaseTMNumOolTableAssociations.GetName()));
							if (pDatabase->GetTMParameters()->Find(cDatabaseTMNumOolTableAssociations.GetValidityParameter()) < 0 || pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(cDatabaseTMNumOolTableAssociations.GetValidityParameter()))->GetWidth() == 1)
							{
								nOolTableRefs[1].Add(pDatabase->GetTMParameters()->Find(cDatabaseTMNumOolTableAssociations.GetValidityParameter()));
								nOolTableValues.Add((nOolTableRefs[1].GetAt(nOolTableRefs[1].GetUpperBound()) != (UINT)-1) ? 1 : 0);
							}
							else
							{
								if (pDatabase->GetTMParameters()->Find(cDatabaseTMNumOolTableAssociations.GetValidityParameter()) >= 0 || cDatabaseTMNumOolTableAssociations.GetValidityParameter().GetLength() > 0)
								{
									szMessage.Format((pDatabase->GetTMParameters()->Find(cDatabaseTMNumOolTableAssociations.GetValidityParameter()) >= 0) ? STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLEASSOCIATION_ILLEGALVALIDITYPARAMETER) : STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLEASSOCIATION_UNDEFINEDVALIDITYPARAMETER), (LPCTSTR)cDatabaseTMNumOolTableAssociations.GetName(), (LPCTSTR)cDatabaseTMNumOolTableAssociations.GetParameter());
									cDatabaseTMNumOolTableAssociations.ShowError(szMessage);
								}
								nOolTableRefs[1].Add(-1);
								nOolTableValues.Add(-1);
							}
							pDatabaseTMParameter->SetOolTables(szOolTables[0], szOolTables[1], nOolTableValues);
							pDatabaseTMParameter->SetOolTableRefs(nOolTableRefs[0], nOolTableRefs[1]);
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLEASSOCIATION_ILLEGALPARAMETER), (LPCTSTR)cDatabaseTMNumOolTableAssociations.GetName(), (LPCTSTR)cDatabaseTMNumOolTableAssociations.GetParameter());
							cDatabaseTMNumOolTableAssociations.ShowError(szMessage);
						}
					}
					else
					{
						if (pDatabase->GetTMParameters()->GetSize() > 0 || !cDatabaseTMNumOolTableAssociations.GetParameter().IsEmpty())
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLEASSOCIATION_UNDEFINEDPARAMETER), (LPCTSTR)cDatabaseTMNumOolTableAssociations.GetName(), (LPCTSTR)cDatabaseTMNumOolTableAssociations.GetParameter());
							cDatabaseTMNumOolTableAssociations.ShowError(szMessage);
						}
					}
				}
				ShowCompileMessages(&cDatabaseTMNumOolTableAssociations);
			}
			else
			{
				if (pDatabase->GetTMNumOolTables()->GetSize() > 0 || !cDatabaseTMNumOolTableAssociations.GetName().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLEASSOCIATION_UNDEFINEDNAME), (LPCTSTR)cDatabaseTMNumOolTableAssociations.GetName(), (LPCTSTR)cDatabaseTMNumOolTableAssociations.GetParameter());
					cDatabaseTMNumOolTableAssociations.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTMNumOolTableAssociations);
			}
			try
			{
				cDatabaseTMNumOolTableAssociations.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLEASSOCIATIONS_READ_FAILURE));
				cDatabaseTMNumOolTableAssociations.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLEASSOCIATION_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMNumOolTableAssociations.GetName());
				cDatabaseTMNumOolTableAssociations.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nParameter = 0, nParameters = (INT)pDatabase->GetTMParameters()->GetSize(), pDatabase->GetTMNumOolTables()->Copy(&pDatabaseTMNumOolTables); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
			{
				if (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CALIBRATION_NUMERICAL))
				{
					if ((nTables[0] = nTables[1] = pDatabaseTMParameter->GetOolTableRefs(nOolTableRefs[0], nOolTableRefs[1])) > GetTMParameterNumOolTablesCount())
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMBEROFNUMOOLTABLES), (LPCTSTR)pDatabaseTMParameter->GetTag());
						cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
					}
					for (nTable[0] = 0; nTable[0] < nTables[0] - 1; nTable[0]++)
					{
						for (nTable[1] = nTable[0] + 1; nTable[1] < nTables[1]; nTable[1]++)
						{
							if (nOolTableRefs[1].GetAt(nTable[0]) == nOolTableRefs[1].GetAt(nTable[1]) || nOolTableRefs[1].GetAt(nTable[0]) == (UINT)-1 || nOolTableRefs[1].GetAt(nTable[1]) == (UINT)-1) break;
							continue;
						}
						if (nTable[1] < nTables[1]) break;
					}
					if (nTable[0] < nTables[0] - 1)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMOOLTABLEVALIDITY), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabase->GetTMNumOolTables()->GetAt(nOolTableRefs[0].GetAt(nTable[0]))->GetName());
						cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
					}
					for (nTable[0] = 0, nTables[0] = (pDatabaseTMParameter->GetCalTableRefs(nCalTableRefs[0], nCalTableRefs[1]) > 1 && nOolTableRefs[0].GetSize() > 1) ? ((nCalTableRefs[0].GetSize() == nOolTableRefs[1].GetSize()) ? (INT)nOolTableRefs[0].GetSize() : -1) : 0; nTable[0] < nTables[0]; nTable[0]++)
					{
						if (nCalTableRefs[1].GetAt(nTable[0]) == (UINT)-1 || nOolTableRefs[1].GetAt(nTable[0]) == (UINT)-1 || (nCalTableRefs[1].GetAt(nTable[0]) != nOolTableRefs[1].GetAt(nTable[0]) && pDatabase->GetTMParameters()->GetAt(nOolTableRefs[1].GetAt(nTable[0]))->GetDerivationExpression().Find(pDatabase->GetTMParameters()->GetAt(nCalTableRefs[1].GetAt(nTable[0]))->GetTag()) < 0)) break;
						continue;
					}
					if (nTables[0] < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMOOLTABLENOASSOCIATION), (LPCTSTR)pDatabaseTMParameter->GetTag());
						cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
					}
					if (nTable[0] < nTables[0])
					{
						if (nCalTableRefs[1].GetAt(nTable[0]) != (UINT)-1 && nOolTableRefs[1].GetAt(nTable[0]) != (UINT)-1)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMOOLTABLEASSOCIATION), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabase->GetTMNumCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable[0]))->GetName(), (LPCTSTR)pDatabase->GetTMNumOolTables()->GetAt(nOolTableRefs[0].GetAt(nTable[0]))->GetName());
							cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
						}
					}
					if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)
					{
						if (!(pDatabaseTMParameter->GetAttributes() & TMPARAMETER_INTERPRETATION_EXTRAPOLATE))
						{
							for (nTable[0] = 0, nTables[0] = (INT)nOolTableRefs[0].GetSize(); nTable[0] < nTables[0]; nTable[0]++)
							{
								for (nTable[1] = 0, nTables[1] = (INT)nCalTableRefs[0].GetSize(); nTable[1] < nTables[1]; nTable[1]++)
								{
									if ((nTables[0] > 1 && nCalTableRefs[1].GetAt(nTable[1]) != (UINT)-1 && nOolTableRefs[1].GetAt(nTable[0]) != (UINT)-1 && (nCalTableRefs[1].GetAt(nTable[1]) == nOolTableRefs[1].GetAt(nTable[0]) || pDatabase->GetTMParameters()->GetAt(nOolTableRefs[1].GetAt(nTable[0]))->GetDerivationExpression().Find(pDatabase->GetTMParameters()->GetAt(nCalTableRefs[1].GetAt(nTable[1]))->GetTag()) >= 0)) || nTables[0] == 1 || nTables[1] == 1)
									{
										if ((pDatabaseTMNumCalTable = pDatabase->GetTMNumCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable[1]))))
										{
											if ((pDatabaseTMNumOolTable = pDatabase->GetTMNumOolTables()->GetAt(nOolTableRefs[0].GetAt(nTable[0]))))
											{
												for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTMNumCalTable->GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
												{
													if ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) == TMOOLTABLE_CHECK_RAW)
													{
														fLimits[0][0] = (!nPoint[0] || pDatabaseTMNumCalTable->GetAt(nPoint[0])->GetX() < fLimits[0][0]) ? pDatabaseTMNumCalTable->GetAt(nPoint[0])->GetX() : fLimits[0][0];
														fLimits[0][1] = (!nPoint[0] || pDatabaseTMNumCalTable->GetAt(nPoint[0])->GetX() > fLimits[0][1]) ? pDatabaseTMNumCalTable->GetAt(nPoint[0])->GetX() : fLimits[0][1];
														continue;
													}
													fLimits[0][0] = (!nPoint[0] || pDatabaseTMNumCalTable->GetAt(nPoint[0])->GetY() < fLimits[0][0]) ? pDatabaseTMNumCalTable->GetAt(nPoint[0])->GetY() : fLimits[0][0];
													fLimits[0][1] = (!nPoint[0] || pDatabaseTMNumCalTable->GetAt(nPoint[0])->GetY() > fLimits[0][1]) ? pDatabaseTMNumCalTable->GetAt(nPoint[0])->GetY() : fLimits[0][1];
												}
												for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTMNumOolTable->GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
												{
													if (pDatabaseTMNumOolTable->GetAt(nPoint[0])->GetRange(nLimitType, fLimits[1][0], fLimits[1][1]) && (fLimits[0][0] - FLT_EPSILON > fLimits[1][0] || fLimits[0][1] + FLT_EPSILON < fLimits[1][1])) break;
													continue;
												}
												if (nPoint[0] < nPoints[0])
												{
													if (fLimits[0][0] > fLimits[1][0])
													{
														szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMOOLTABLELOWLIMIT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMNumOolTable->GetName(), (LPCTSTR)pDatabaseTMNumCalTable->GetName());
														cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
													}
													if (fLimits[0][1] < fLimits[1][1])
													{
														szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMOOLTABLEHIGHLIMIT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMNumOolTable->GetName(), (LPCTSTR)pDatabaseTMNumCalTable->GetName());
														cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
													}
													break;
												}
											}
										}
									}
								}
							}
						}
					}
					for (nTable[0] = 0, nTables[0] = (INT)nOolTableRefs[0].GetSize(); nTable[0] < nTables[0]; nTable[0]++)
					{
						if ((pDatabaseTMNumOolTable = pDatabase->GetTMNumOolTables()->GetAt(nOolTableRefs[0].GetAt(nTable[0]))))
						{
							if ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) == TMOOLTABLE_CHECK_RAW)
							{
								for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTMNumOolTable->GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
								{
									if (pDatabaseTMNumOolTable->GetAt(nPoint[0])->GetRange(nLimitType, fLimits[0][0], fLimits[0][1]))
									{
										if (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_INVERSEBITPATTERN) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_UNSIGNEDINTEGER)) && (fLimits[0][0] < 0.0 || fLimits[0][1] >= pow(2.0, pDatabaseTMParameter->GetWidth()))) break;
										if (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_COMPLEMENTCOMPLEX)) && (fLimits[0][0] < -pow(2.0, pDatabaseTMParameter->GetWidth() - 1) || fLimits[0][1] >= pow(2.0, pDatabaseTMParameter->GetWidth() - 1))) break;
									}
								}
								if (nPoint[0] < nPoints[0])
								{
									if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_INVERSEBITPATTERN) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_UNSIGNEDINTEGER))
									{
										szMessage.Format((fLimits[0][0] < 0.0) ? STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMOOLTABLERAWLOWLIMIT) : STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMOOLTABLERAWHIGHLIMIT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMNumOolTable->GetName());
										cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
									}
									if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_COMPLEMENTCOMPLEX))
									{
										szMessage.Format((fLimits[0][0] < -pow(2.0, pDatabaseTMParameter->GetWidth() - 1)) ? STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMOOLTABLERAWLOWLIMIT) : STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMOOLTABLERAWHIGHLIMIT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMNumOolTable->GetName());
										cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
									}
								}
							}
						}
					}
				}
			}
		}
		ShowCompileMessages(&cDatabaseTMNumOolTableAssociations);
		ShowCompileMessages(&cDatabaseTMNumOolTables);
		ShowCompileMessages(&cDatabaseTMParameters);
		cDatabaseTMNumOolTableAssociations.Close();
	}
	else
	{
		cDatabaseTMNumOolTableAssociations.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMNUMOOLTABLEASSOCIATIONS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMNumOolTableAssociations);
	}
}

VOID CALTELDatabaseEngine::CompileTMTxtOolTables(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nPoint[2];
	INT  nPoints[2];
	INT  nTable[2];
	INT  nTables[2];
	INT  nParameter;
	INT  nParameters;
	BOOL  bLimits[2];
	double  fX[2];
	double  fLimits[2][2];
	CString  szText;
	CString  szMessage;
	CString  szLimits[2][2];
	CUIntArray  nCalTableRefs[2];
	CUIntArray  nOolTableRefs[2];
	CStringArray  szOolTables[2];
	CLongUIntArray  nOolTableValues;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtOolTable  cDatabaseTMTxtOolTable;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;
	CDatabaseTMTxtOolLimit  *pDatabaseTMTxtOolLimit;
	CDatabaseTMTxtOolTables  pDatabaseTMTxtOolTables;
	CALTELDatabaseTMParametersRecordset  cDatabaseTMParameters(this);
	CALTELDatabaseTMTxtOolTablesRecordset  cDatabaseTMTxtOolTables(this);
	CALTELDatabaseTMTxtOolTableLimitsRecordset  cDatabaseTMTxtOolTableLimits(this);
	CALTELDatabaseTMTxtOolTableAssociationsRecordset  cDatabaseTMTxtOolTableAssociations(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TMTXTOOLTABLES));
	try
	{
		cDatabaseTMTxtOolTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_FXF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMTxtOolTables.IsOpen())
	{
		for (nParameter = 0, nParameters = (INT)pDatabase->GetTMParameters()->GetSize(), pDatabase->GetTMTxtOolTables()->RemoveAll(), szOolTables[0].RemoveAll(), szOolTables[1].RemoveAll(), nOolTableValues.RemoveAll(), nOolTableRefs[0].RemoveAll(), nOolTableRefs[1].RemoveAll(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(nParameter)) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS))
			{
				pDatabaseTMParameter->SetOolTables(szOolTables[0], szOolTables[1], nOolTableValues);
				pDatabaseTMParameter->SetOolTableRefs(nOolTableRefs[0], nOolTableRefs[1]);
			}
		}
		while (!cDatabaseTMTxtOolTables.IsBOF() && !cDatabaseTMTxtOolTables.IsEOF() && IsCompiling())
		{
			if ((cDatabaseTMTxtOolTables.GetStatus() & TMOOLTABLE_RECORDSTATUS_DEFAULT) >= TMOOLTABLE_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTMTxtOolTable = new CDatabaseTMTxtOolTable))
				{
					pDatabaseTMTxtOolTable->SetName(cDatabaseTMTxtOolTables.GetName());
					pDatabaseTMTxtOolTable->SetAttributes(cDatabaseTMTxtOolTables.GetAttributes());
					pDatabaseTMTxtOolTable->SetChecks(cDatabaseTMTxtOolTables.GetChecks());
					pDatabaseTMTxtOolTable->SetStatus(cDatabaseTMTxtOolTables.GetStatus());
					if ((nIndex = pDatabase->GetTMTxtOolTables()->Find(cDatabaseTMTxtOolTables.GetName())) < 0 && pDatabase->GetTMTxtOolTables()->Add(pDatabaseTMTxtOolTable) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMTxtOolTables.GetName());
						cDatabaseTMTxtOolTables.ShowError(szMessage);
						delete pDatabaseTMTxtOolTable;
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLE_DUPLICATENAME), (LPCTSTR)cDatabaseTMTxtOolTables.GetName());
						cDatabaseTMTxtOolTables.ShowError(szMessage);
						delete pDatabaseTMTxtOolTable;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMTxtOolTables.GetName());
					cDatabaseTMTxtOolTables.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTMTxtOolTables);
			}
			try
			{
				cDatabaseTMTxtOolTables.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLES_READ_FAILURE));
				cDatabaseTMTxtOolTables.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMTxtOolTables.GetName());
				cDatabaseTMTxtOolTables.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTMTxtOolTables);
		cDatabaseTMTxtOolTables.Close();
	}
	else
	{
		cDatabaseTMTxtOolTables.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLES_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMTxtOolTables);
	}
	try
	{
		cDatabaseTMTxtOolTableLimits.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_FXFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMTxtOolTableLimits.IsOpen())
	{
		while (!cDatabaseTMTxtOolTableLimits.IsBOF() && !cDatabaseTMTxtOolTableLimits.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTMTxtOolTable = pDatabase->GetTMTxtOolTables()->GetAt(pDatabase->GetTMTxtOolTables()->Find(cDatabaseTMTxtOolTableLimits.GetName()))))
			{
				if ((pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) || (pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_CALIBRATED))
				{
					if ((pDatabaseTMTxtOolLimit = new CDatabaseTMTxtOolLimit))
					{
						pDatabaseTMTxtOolLimit->SetType(TMOOLLIMIT_TYPE_HARD);
						if (pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW)
						{
							pDatabaseTMTxtOolLimit->SetOrder(cDatabaseTMTxtOolTableLimits.GetOrder());
							pDatabaseTMTxtOolLimit->SetRange((fLimits[0][0] = TranslateTMTxtOolTableLimitValue(pDatabaseTMTxtOolTable->GetAttributes(), cDatabaseTMTxtOolTableLimits.GetLowLimit())), (fLimits[0][1] = TranslateTMTxtOolTableLimitValue(pDatabaseTMTxtOolTable->GetAttributes(), cDatabaseTMTxtOolTableLimits.GetHighLimit())));
						}
						if (pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_CALIBRATED)
						{
							pDatabaseTMTxtOolLimit->SetOrder(cDatabaseTMTxtOolTableLimits.GetOrder());
							pDatabaseTMTxtOolLimit->SetRange(cDatabaseTMTxtOolTableLimits.GetLowLimit(), cDatabaseTMTxtOolTableLimits.GetHighLimit());
						}
						if (CheckTMTxtOolTableLimitValue(pDatabaseTMTxtOolTable->GetAttributes(), cDatabaseTMTxtOolTableLimits.GetLowLimit()))
						{
							if (CheckTMTxtOolTableLimitValue(pDatabaseTMTxtOolTable->GetAttributes(), cDatabaseTMTxtOolTableLimits.GetHighLimit()))
							{
								if (pDatabaseTMTxtOolTable->GetSize() < GetTMTxtOolTableLimitCount(pDatabaseTMTxtOolTable->GetAttributes()))
								{
									if (((pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) && (pDatabaseTMTxtOolTable->Find(fLimits[0][0], fLimits[0][1]) >= 0 || fLimits[0][0] > fLimits[0][1])) || pDatabaseTMTxtOolTable->Add(pDatabaseTMTxtOolLimit) < 0)
									{
										szMessage.Format((fLimits[0][0] <= fLimits[0][1]) ? STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLELIMIT_IDENTICALLIMIT) : STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLELIMIT_ILLEGALHIGHLIMIT), (LPCTSTR)cDatabaseTMTxtOolTableLimits.GetName(), (LPCTSTR)cDatabaseTMTxtOolTableLimits.GetLowLimit(), (LPCTSTR)cDatabaseTMTxtOolTableLimits.GetHighLimit());
										cDatabaseTMTxtOolTableLimits.ShowError(szMessage);
										delete pDatabaseTMTxtOolLimit;
									}
								}
								else
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLELIMIT_ILLEGALNUMBEROFLIMITS), (LPCTSTR)pDatabaseTMTxtOolTable->GetName());
									cDatabaseTMTxtOolTableLimits.ShowError(pDatabaseTMTxtOolTable->GetName(), szMessage);
									delete pDatabaseTMTxtOolLimit;
								}
							}
							else
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLELIMIT_ILLEGALHIGHLIMIT), (LPCTSTR)cDatabaseTMTxtOolTableLimits.GetName(), (LPCTSTR)cDatabaseTMTxtOolTableLimits.GetLowLimit(), (LPCTSTR)cDatabaseTMTxtOolTableLimits.GetHighLimit());
								cDatabaseTMTxtOolTableLimits.ShowError(szMessage);
								delete pDatabaseTMTxtOolLimit;
							}
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLELIMIT_ILLEGALLOWLIMIT), (LPCTSTR)cDatabaseTMTxtOolTableLimits.GetName(), (LPCTSTR)cDatabaseTMTxtOolTableLimits.GetLowLimit(), (LPCTSTR)cDatabaseTMTxtOolTableLimits.GetHighLimit());
							cDatabaseTMTxtOolTableLimits.ShowError(szMessage);
							delete pDatabaseTMTxtOolLimit;
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLELIMIT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMTxtOolTableLimits.GetName());
						cDatabaseTMTxtOolTableLimits.ShowError(szMessage);
						break;
					}
				}
				ShowCompileMessages(&cDatabaseTMTxtOolTableLimits);
			}
			else
			{
				if (pDatabase->GetTMTxtOolTables()->GetSize() > 0 || !cDatabaseTMTxtOolTableLimits.GetName().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLELIMIT_UNDEFINEDNAME), (LPCTSTR)cDatabaseTMTxtOolTableLimits.GetName(), (LPCTSTR)cDatabaseTMTxtOolTableLimits.GetLowLimit(), (LPCTSTR)cDatabaseTMTxtOolTableLimits.GetHighLimit());
					cDatabaseTMTxtOolTableLimits.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTMTxtOolTableLimits);
			}
			try
			{
				cDatabaseTMTxtOolTableLimits.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLELIMITS_READ_FAILURE));
				cDatabaseTMTxtOolTableLimits.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLELIMIT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMTxtOolTableLimits.GetName());
				cDatabaseTMTxtOolTableLimits.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nTable[0] = 0, nTables[0] = (INT)pDatabase->GetTMTxtOolTables()->GetSize(); nTable[0] < nTables[0]; nTable[0]++)
		{
			if ((pDatabaseTMTxtOolTable = pDatabase->GetTMTxtOolTables()->GetAt(nTable[0])))
			{
				if (pDatabaseTMTxtOolTable->GetAttributes() & (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CHECK_CALIBRATED))
				{
					for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTMTxtOolTable->GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
					{
						for (nPoint[1] = nPoint[0] + 1, nPoints[1] = nPoints[0]; nPoint[1] < nPoints[1]; nPoint[1]++)
						{
							if ((pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) == TMOOLTABLE_CHECK_RAW)
							{
								if (pDatabaseTMTxtOolTable->GetAt(nPoint[0])->GetRange(fLimits[0][0], fLimits[0][1]) && pDatabaseTMTxtOolTable->GetAt(nPoint[1])->GetRange(fLimits[1][0], fLimits[1][1]) && ((fLimits[1][0] >= fLimits[0][0] && fLimits[1][0] <= fLimits[0][1]) || (fLimits[1][1] >= fLimits[0][0] && fLimits[1][1] <= fLimits[0][1]))) break;
								continue;
							}
							if (pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_CALIBRATED)
							{
								if (pDatabaseTMTxtOolTable->GetAt(nPoint[0])->GetRange(szLimits[0][0], szLimits[0][1]) && pDatabaseTMTxtOolTable->GetAt(nPoint[1])->GetRange(szLimits[1][0], szLimits[1][1]) && (szLimits[0][0] == szLimits[1][0] || szLimits[0][1] == szLimits[1][1])) break;
								continue;
							}
						}
						if (nPoint[1] < nPoints[1]) break;
					}
					if (!nPoints[0])
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLELIMIT_NOLIMITS), (LPCTSTR)pDatabaseTMTxtOolTable->GetName());
						cDatabaseTMTxtOolTableLimits.ShowError(pDatabase->GetTMTxtOolTables()->GetAt(nTable[0])->GetName(), szMessage);
					}
					if (nPoint[0] < nPoints[0])
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLELIMIT_OVERLAPPINGLIMITS), (LPCTSTR)pDatabaseTMTxtOolTable->GetName());
						cDatabaseTMTxtOolTableLimits.ShowError(pDatabase->GetTMTxtOolTables()->GetAt(nTable[0])->GetName(), szMessage);
					}
				}
			}
		}
		ShowCompileMessages(&cDatabaseTMTxtOolTableLimits);
		cDatabaseTMTxtOolTableLimits.Close();
	}
	else
	{
		cDatabaseTMTxtOolTableLimits.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLELIMITS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMTxtOolTableLimits);
	}
	for (nTable[0] = 0, nTables[0] = (pDatabaseTMTxtOolTables.Copy(pDatabase->GetTMTxtOolTables())) ? (INT)pDatabaseTMTxtOolTables.GetSize() : -1; nTable[0] < nTables[0]; nTable[0]++)
	{
		if ((pDatabaseTMTxtOolTable = pDatabaseTMTxtOolTables.GetAt(nTable[0])) && (pDatabaseTMTxtOolTable->GetAttributes() & (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CHECK_CALIBRATED)) == 0)
		{
			pDatabaseTMTxtOolTables.RemoveAt(nTable[0]);
			delete pDatabaseTMTxtOolTable;
			nTables[0]--;
			nTable[0]--;
		}
	}
	try
	{
		cDatabaseTMTxtOolTableAssociations.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PFXF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMTxtOolTableAssociations.IsOpen())
	{
		while (!cDatabaseTMTxtOolTableAssociations.IsBOF() && !cDatabaseTMTxtOolTableAssociations.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTMTxtOolTable = pDatabase->GetTMTxtOolTables()->GetAt(pDatabase->GetTMTxtOolTables()->Find(cDatabaseTMTxtOolTableAssociations.GetName()))))
			{
				if ((pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) || (pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_CALIBRATED))
				{
					if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(cDatabaseTMTxtOolTableAssociations.GetParameter()))))
					{
						if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) && ((pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) || ((pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_CALIBRATED) && pDatabaseTMParameter->GetCalTableRefs(nCalTableRefs[0], nCalTableRefs[1]) > 0)))
						{
							pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1], nOolTableValues);
							pDatabaseTMParameter->GetOolTableRefs(nOolTableRefs[0], nOolTableRefs[1]);
							szOolTables[0].Add(cDatabaseTMTxtOolTableAssociations.GetName());
							szOolTables[1].Add(cDatabaseTMTxtOolTableAssociations.GetValidityParameter());
							nOolTableRefs[0].Add(pDatabaseTMTxtOolTables.Find(cDatabaseTMTxtOolTableAssociations.GetName()));
							if (pDatabase->GetTMParameters()->Find(cDatabaseTMTxtOolTableAssociations.GetValidityParameter()) < 0 || pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(cDatabaseTMTxtOolTableAssociations.GetValidityParameter()))->GetWidth() == 1)
							{
								nOolTableRefs[1].Add(pDatabase->GetTMParameters()->Find(cDatabaseTMTxtOolTableAssociations.GetValidityParameter()));
								nOolTableValues.Add((nOolTableRefs[1].GetAt(nOolTableRefs[1].GetUpperBound()) != (UINT)-1) ? 1 : 0);
							}
							else
							{
								if (pDatabase->GetTMParameters()->Find(cDatabaseTMTxtOolTableAssociations.GetValidityParameter()) >= 0 || cDatabaseTMTxtOolTableAssociations.GetValidityParameter().GetLength() > 0)
								{
									szMessage.Format((pDatabase->GetTMParameters()->Find(cDatabaseTMTxtOolTableAssociations.GetValidityParameter()) >= 0) ? STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLEASSOCIATION_ILLEGALVALIDITYPARAMETER) : STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLEASSOCIATION_UNDEFINEDVALIDITYPARAMETER), (LPCTSTR)cDatabaseTMTxtOolTableAssociations.GetName(), (LPCTSTR)cDatabaseTMTxtOolTableAssociations.GetParameter());
									cDatabaseTMTxtOolTableAssociations.ShowError(szMessage);
								}
								nOolTableRefs[1].Add(-1);
								nOolTableValues.Add(-1);
							}
							pDatabaseTMParameter->SetOolTables(szOolTables[0], szOolTables[1], nOolTableValues);
							pDatabaseTMParameter->SetOolTableRefs(nOolTableRefs[0], nOolTableRefs[1]);
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLEASSOCIATION_ILLEGALPARAMETER), (LPCTSTR)cDatabaseTMTxtOolTableAssociations.GetName(), (LPCTSTR)cDatabaseTMTxtOolTableAssociations.GetParameter());
							cDatabaseTMTxtOolTableAssociations.ShowError(szMessage);
						}
					}
					else
					{
						if (pDatabase->GetTMParameters()->GetSize() > 0 || !cDatabaseTMTxtOolTableAssociations.GetParameter().IsEmpty())
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLEASSOCIATION_UNDEFINEDPARAMETER), (LPCTSTR)cDatabaseTMTxtOolTableAssociations.GetName(), (LPCTSTR)cDatabaseTMTxtOolTableAssociations.GetParameter());
							cDatabaseTMTxtOolTableAssociations.ShowError(szMessage);
						}
					}
				}
				ShowCompileMessages(&cDatabaseTMTxtOolTableAssociations);
			}
			else
			{
				if (pDatabase->GetTMTxtOolTables()->GetSize() > 0 || !cDatabaseTMTxtOolTableAssociations.GetName().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLEASSOCIATION_UNDEFINEDNAME), (LPCTSTR)cDatabaseTMTxtOolTableAssociations.GetName(), (LPCTSTR)cDatabaseTMTxtOolTableAssociations.GetParameter());
					cDatabaseTMTxtOolTableAssociations.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTMTxtOolTableAssociations);
			}
			try
			{
				cDatabaseTMTxtOolTableAssociations.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLEASSOCIATIONS_READ_FAILURE));
				cDatabaseTMTxtOolTableAssociations.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLEASSOCIATION_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMTxtOolTableAssociations.GetName());
				cDatabaseTMTxtOolTableAssociations.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nParameter = 0, nParameters = (INT)pDatabase->GetTMParameters()->GetSize(), pDatabase->GetTMTxtOolTables()->Copy(&pDatabaseTMTxtOolTables); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(nParameter)))
			{
				if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS)
				{
					if ((nTables[0] = nTables[1] = pDatabaseTMParameter->GetOolTableRefs(nOolTableRefs[0], nOolTableRefs[1])) > GetTMParameterTxtOolTablesCount())
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALNUMBEROFTXTOOLTABLES), (LPCTSTR)pDatabaseTMParameter->GetTag());
						cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
					}
					for (nTable[0] = 0; nTable[0] < nTables[0] - 1; nTable[0]++)
					{
						for (nTable[1] = nTable[0] + 1; nTable[1] < nTables[1]; nTable[1]++)
						{
							if (nOolTableRefs[1].GetAt(nTable[0]) == nOolTableRefs[1].GetAt(nTable[1]) || nOolTableRefs[1].GetAt(nTable[0]) == (UINT)-1 || nOolTableRefs[1].GetAt(nTable[1]) == (UINT)-1) break;
							continue;
						}
						if (nTable[1] < nTables[1]) break;
					}
					if (nTable[0] < nTables[0] - 1)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTXTOOLTABLEVALIDITY), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabase->GetTMTxtOolTables()->GetAt(nOolTableRefs[0].GetAt(nTable[0]))->GetName());
						cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
					}
					for (nTable[0] = 0, nTables[0] = (pDatabaseTMParameter->GetCalTableRefs(nCalTableRefs[0], nCalTableRefs[1]) > 1 && nOolTableRefs[0].GetSize() > 1) ? ((nCalTableRefs[0].GetSize() == nOolTableRefs[1].GetSize()) ? (INT)nOolTableRefs[0].GetSize() : -1) : 0; nTable[0] < nTables[0]; nTable[0]++)
					{
						if (nCalTableRefs[1].GetAt(nTable[0]) == (UINT)-1 || nOolTableRefs[1].GetAt(nTable[0]) == (UINT)-1 || (nCalTableRefs[1].GetAt(nTable[0]) != nOolTableRefs[1].GetAt(nTable[0]) && pDatabase->GetTMParameters()->GetAt(nOolTableRefs[1].GetAt(nTable[0]))->GetDerivationExpression().Find(pDatabase->GetTMParameters()->GetAt(nCalTableRefs[1].GetAt(nTable[0]))->GetTag()) < 0)) break;
						continue;
					}
					if (nTables[0] < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTXTOOLTABLENOASSOCIATION), (LPCTSTR)pDatabaseTMParameter->GetTag());
						cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
					}
					if (nTable[0] < nTables[0])
					{
						if (nCalTableRefs[1].GetAt(nTable[0]) != (UINT)-1 && nOolTableRefs[1].GetAt(nTable[0]) != (UINT)-1)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTXTOOLTABLEASSOCIATION), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabase->GetTMTxtCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable[0]))->GetName(), (LPCTSTR)pDatabase->GetTMTxtOolTables()->GetAt(nOolTableRefs[0].GetAt(nTable[0]))->GetName());
							cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
						}
					}
					for (nTable[0] = 0, nTables[0] = (INT)nOolTableRefs[0].GetSize(); nTable[0] < nTables[0]; nTable[0]++)
					{
						if ((pDatabaseTMTxtOolTable = pDatabase->GetTMTxtOolTables()->GetAt(nOolTableRefs[0].GetAt(nTable[0]))))
						{
							if ((pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) && ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_COMPLEMENTCOMPLEX) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT)))
							{
								if ((pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_RADIX_DECIMAL) != TMOOLTABLE_RADIX_DECIMAL)
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLEASSOCIATION_ILLEGALRADIX), (LPCTSTR)pDatabaseTMTxtOolTable->GetName(), (LPCTSTR)pDatabaseTMParameter->GetTag());
									cDatabaseTMTxtOolTableAssociations.ShowError(pDatabaseTMTxtOolTable->GetName(), szMessage);
								}
							}
						}
					}
					for (nTable[0] = 0, nTables[0] = (INT)nOolTableRefs[0].GetSize(); nTable[0] < nTables[0]; nTable[0]++)
					{
						for (nTable[1] = 0, nTables[1] = (INT)nCalTableRefs[0].GetSize(); nTable[1] < nTables[1]; nTable[1]++)
						{
							if ((nTables[0] > 1 && nCalTableRefs[1].GetAt(nTable[1]) != (UINT)-1 && nOolTableRefs[1].GetAt(nTable[0]) != (UINT)-1 && (nCalTableRefs[1].GetAt(nTable[1]) == nOolTableRefs[1].GetAt(nTable[0]) || pDatabase->GetTMParameters()->GetAt(nOolTableRefs[1].GetAt(nTable[0]))->GetDerivationExpression().Find(pDatabase->GetTMParameters()->GetAt(nCalTableRefs[1].GetAt(nTable[1]))->GetTag()) >= 0)) || nTables[0] == 1 || nTables[1] == 1)
							{
								if ((pDatabaseTMTxtCalTable = pDatabase->GetTMTxtCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable[1]))))
								{
									if ((pDatabaseTMTxtOolTable = pDatabase->GetTMTxtOolTables()->GetAt(nOolTableRefs[0].GetAt(nTable[0]))))
									{
										if ((pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) == TMOOLTABLE_CHECK_RAW)
										{
											for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTMTxtOolTable->GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
											{
												for (nPoint[1] = 0, nPoints[1] = (INT)pDatabase->GetTMTxtCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable[1]))->GetSize(); nPoint[1] < nPoints[1]; nPoint[1]++)
												{
													if (pDatabase->GetTMTxtOolTables()->GetAt(nOolTableRefs[0].GetAt(nTable[0]))->GetAt(nPoint[0])->GetRange(fLimits[0][0], fLimits[0][1]) && pDatabase->GetTMTxtCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable[1]))->GetAt(nPoint[1])->GetRange(fX[0], fX[1], szText))
													{
														if (fLimits[0][0] == fX[0] && fLimits[0][1] == fX[1]) break;
														continue;
													}
												}
												if (nPoint[1] == nPoints[1]) break;
											}
											if (nPoint[0] < nPoints[0])
											{
												if (fLimits[0][0] != fX[0])
												{
													szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTXTOOLTABLELOWLIMIT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabase->GetTMTxtOolTables()->GetAt(nOolTableRefs[0].GetAt(nTable[0]))->GetName(), (LPCTSTR)pDatabase->GetTMTxtCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable[1]))->GetName());
													cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
												}
												if (fLimits[0][1] != fX[1])
												{
													szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTXTOOLTABLEHIGHLIMIT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabase->GetTMTxtOolTables()->GetAt(nOolTableRefs[0].GetAt(nTable[0]))->GetName(), (LPCTSTR)pDatabase->GetTMTxtCalTables()->GetAt(nCalTableRefs[0].GetAt(nTable[1]))->GetName());
													cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
												}
												break;
											}
										}
										if (pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_CALIBRATED)
										{
											for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTMTxtOolTable->GetSize(), cDatabaseTMTxtOolTable.RemoveAll(); nPoint[0] < nPoints[0]; nPoint[0]++)
											{
												for (nPoint[1] = 0, nPoints[1] = (INT)pDatabaseTMTxtCalTable->GetSize(), bLimits[0] = bLimits[1] = FALSE; nPoint[1] < nPoints[1] && (!bLimits[0] || !bLimits[1]); nPoint[1]++)
												{
													if (pDatabaseTMTxtOolTable->GetAt(nPoint[0])->GetRange(szLimits[0][0], szLimits[0][1]) && pDatabaseTMTxtCalTable->GetAt(nPoint[1])->GetRange(fX[0], fX[1], szText))
													{
														if (szLimits[0][0] == szLimits[0][1] && szLimits[0][0] == szText)
														{
															fLimits[0][0] = fX[0];
															fLimits[0][1] = fX[1];
															bLimits[0] = TRUE;
															bLimits[1] = TRUE;
															break;
														}
														if (szLimits[0][0] == szText || szLimits[0][1] == szText)
														{
															fLimits[0][0] = (bLimits[0]) ? ((fLimits[0][0] > fX[0]) ? fX[0] : fLimits[0][0]) : fX[0];
															fLimits[0][1] = (bLimits[1]) ? ((fLimits[0][1] < fX[1]) ? fX[1] : fLimits[0][1]) : fX[1];
															bLimits[0] = (szLimits[0][0] == szText) ? TRUE : bLimits[0];
															bLimits[1] = (szLimits[0][1] == szText) ? TRUE : bLimits[1];
														}
													}
												}
												if (bLimits[0] && bLimits[1])
												{
													if ((pDatabaseTMTxtOolLimit = new CDatabaseTMTxtOolLimit(fLimits[0][0], fLimits[0][1])))
													{
														if (cDatabaseTMTxtOolTable.Add(pDatabaseTMTxtOolLimit) >= 0) continue;
														delete pDatabaseTMTxtOolLimit;
													}
													szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLE_MEMORY_FAILURE), (LPCTSTR)pDatabaseTMTxtOolTable->GetName());
													cDatabaseTMTxtOolTables.ShowError(pDatabaseTMTxtOolTable->GetName(), szMessage);
													break;
												}
												if (pDatabaseTMTxtOolTable->GetAt(nPoint[0])->GetRange(szLimits[0][0], szLimits[0][1]))
												{
													szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTXTOOLTABLELIMITRANGE), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)szLimits[0][0], (LPCTSTR)szLimits[0][1], (LPCTSTR)pDatabaseTMTxtOolTable->GetName());
													cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
												}
												break;
											}
											if (nPoint[0] == nPoints[0])
											{
												for (nPoint[0] = 0, nPoints[0] = (INT)cDatabaseTMTxtOolTable.GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
												{
													for (nPoint[1] = nPoint[0] + 1, nPoints[1] = nPoints[0]; nPoint[1] < nPoints[1]; nPoint[1] = nPoint[1] + 1)
													{
														if (cDatabaseTMTxtOolTable.GetAt(nPoint[0])->GetRange(fLimits[0][0], fLimits[0][1]) && cDatabaseTMTxtOolTable.GetAt(nPoint[1])->GetRange(fLimits[1][0], fLimits[1][1]) && ((fLimits[1][0] >= fLimits[0][0] && fLimits[1][0] <= fLimits[0][1]) || (fLimits[1][1] >= fLimits[0][0] && fLimits[1][1] <= fLimits[0][1]))) break;
														continue;
													}
													if (nPoint[1] < nPoints[1]) break;
												}
												if (nPoint[0] < nPoints[0])
												{
													szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLELIMIT_OVERLAPPINGLIMITS), (LPCTSTR)pDatabaseTMTxtOolTable->GetName());
													cDatabaseTMTxtOolTableLimits.ShowError(pDatabaseTMTxtOolTable->GetName(), szMessage);
												}
											}
											else break;
										}
									}
								}
							}
						}
					}
					for (nTable[0] = 0, nTables[0] = (INT)nOolTableRefs[0].GetSize(); nTable[0] < nTables[0]; nTable[0]++)
					{
						if ((pDatabaseTMTxtOolTable = pDatabase->GetTMTxtOolTables()->GetAt(nOolTableRefs[0].GetAt(nTable[0]))))
						{
							if ((pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW) == TMOOLTABLE_CHECK_RAW)
							{
								for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTMTxtOolTable->GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
								{
									if (pDatabaseTMTxtOolTable->GetAt(nPoint[0])->GetRange(fLimits[0][0], fLimits[0][1]))
									{
										if (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_INVERSEBITPATTERN) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_UNSIGNEDINTEGER)) && (fLimits[0][0] < 0.0 || fLimits[0][1] >= pow(2.0, pDatabaseTMParameter->GetWidth()))) break;
										if (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_COMPLEMENTCOMPLEX)) && (fLimits[0][0] < -pow(2.0, pDatabaseTMParameter->GetWidth() - 1) || fLimits[0][1] >= pow(2.0, pDatabaseTMParameter->GetWidth() - 1))) break;
									}
								}
								if (nPoint[0] < nPoints[0])
								{
									if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_INVERSEBITPATTERN) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_UNSIGNEDINTEGER))
									{
										szMessage.Format((fLimits[0][0] < 0.0) ? STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTXTOOLTABLERAWLOWLIMIT) : STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTXTOOLTABLERAWHIGHLIMIT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMTxtOolTable->GetName());
										cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
									}
									if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_COMPLEMENTCOMPLEX))
									{
										szMessage.Format((fLimits[0][0] < -pow(2.0, pDatabaseTMParameter->GetWidth() - 1)) ? STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTXTOOLTABLERAWLOWLIMIT) : STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_ILLEGALTXTOOLTABLERAWHIGHLIMIT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMTxtOolTable->GetName());
										cDatabaseTMParameters.ShowError(pDatabaseTMParameter->GetTag(), szMessage);
									}
								}
							}
						}
					}
				}
			}
		}
		ShowCompileMessages(&cDatabaseTMTxtOolTableAssociations);
		ShowCompileMessages(&cDatabaseTMTxtOolTables);
		ShowCompileMessages(&cDatabaseTMParameters);
		cDatabaseTMTxtOolTableAssociations.Close();
	}
	else
	{
		cDatabaseTMTxtOolTableAssociations.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMTXTOOLTABLEASSOCIATIONS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMTxtOolTableAssociations);
	}
}

VOID CALTELDatabaseEngine::CompileTCNumCalTables(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nTable;
	INT  nTables;
	INT  nPoint;
	INT  nPoints;
	INT  nParameter;
	INT  nParameters;
	CString  szMessage;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint;
	CALTELDatabaseTCParametersRecordset  cDatabaseTCParameters(this);
	CALTELDatabaseTCNumCalTablesRecordset  cDatabaseTCNumCalTables(this);
	CALTELDatabaseTCNumCalTablePointsRecordset  cDatabaseTCNumCalTablePoints(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCNUMCALTABLES));
	try
	{
		cDatabaseTCNumCalTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CAL_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCNumCalTables.IsOpen())
	{
		for (pDatabase->GetTCNumCalTables()->RemoveAll(); !cDatabaseTCNumCalTables.IsBOF() && !cDatabaseTCNumCalTables.IsEOF() && IsCompiling(); )
		{
			if ((cDatabaseTCNumCalTables.GetStatus() & TCCALTABLE_RECORDSTATUS_DEFAULT) >= TCCALTABLE_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTCNumCalTable = new CDatabaseTCNumCalTable))
				{
					pDatabaseTCNumCalTable->SetName(cDatabaseTCNumCalTables.GetName());
					pDatabaseTCNumCalTable->SetDescription(cDatabaseTCNumCalTables.GetDescription());
					pDatabaseTCNumCalTable->SetUnit(cDatabaseTCNumCalTables.GetUnit());
					pDatabaseTCNumCalTable->SetPoints(cDatabaseTCNumCalTables.GetPoints());
					pDatabaseTCNumCalTable->SetStatus(cDatabaseTCNumCalTables.GetStatus());
					if ((nIndex = pDatabase->GetTCNumCalTables()->Find(cDatabaseTCNumCalTables.GetName())) < 0 && pDatabase->GetTCNumCalTables()->Add(pDatabaseTCNumCalTable) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMCALTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCNumCalTables.GetName());
						cDatabaseTCNumCalTables.ShowError(szMessage);
						delete pDatabaseTCNumCalTable;
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMCALTABLE_DUPLICATENAME), (LPCTSTR)cDatabaseTCNumCalTables.GetName());
						cDatabaseTCNumCalTables.ShowError(szMessage);
						delete pDatabaseTCNumCalTable;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMCALTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCNumCalTables.GetName());
					cDatabaseTCNumCalTables.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTCNumCalTables);
			}
			try
			{
				cDatabaseTCNumCalTables.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMCALTABLES_READ_FAILURE));
				cDatabaseTCNumCalTables.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMCALTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCNumCalTables.GetName());
				cDatabaseTCNumCalTables.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTCNumCalTables);
		cDatabaseTCNumCalTables.Close();
	}
	else
	{
		cDatabaseTCNumCalTables.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCNUMCALTABLES_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCNumCalTables);
	}
	try
	{
		cDatabaseTCNumCalTablePoints.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CALP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCNumCalTablePoints.IsOpen())
	{
		while (!cDatabaseTCNumCalTablePoints.IsBOF() && !cDatabaseTCNumCalTablePoints.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTCNumCalTable = pDatabase->GetTCNumCalTables()->GetAt(pDatabase->GetTCNumCalTables()->Find(cDatabaseTCNumCalTablePoints.GetName()))))
			{
				if ((pDatabaseTCNumCalPoint = new CDatabaseTCNumCalPoint) != (CDatabaseTCNumCalPoint *)NULL)
				{
					pDatabaseTCNumCalPoint->SetPoint(cDatabaseTCNumCalTablePoints.GetX(), cDatabaseTCNumCalTablePoints.GetY());
					if ((nIndex = pDatabaseTCNumCalTable->Find(cDatabaseTCNumCalTablePoints.GetX())) < 0 && pDatabaseTCNumCalTable->Add(pDatabaseTCNumCalPoint) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMCALTABLEPOINT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCNumCalTablePoints.GetName());
						cDatabaseTCNumCalTablePoints.ShowError(szMessage);
						delete pDatabaseTCNumCalPoint;
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMCALTABLEPOINT_IDENTICALPOINT), (LPCTSTR)cDatabaseTCNumCalTablePoints.GetName(), cDatabaseTCNumCalTablePoints.GetX());
						cDatabaseTCNumCalTablePoints.ShowError(szMessage);
						delete pDatabaseTCNumCalPoint;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMCALTABLEPOINT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCNumCalTablePoints.GetName());
					cDatabaseTCNumCalTablePoints.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTCNumCalTablePoints);
			}
			else
			{
				if (pDatabase->GetTCNumCalTables()->GetSize() > 0 || !cDatabaseTCNumCalTablePoints.GetName().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMCALTABLEPOINT_UNDEFINEDNAME), (LPCTSTR)cDatabaseTCNumCalTablePoints.GetName(), cDatabaseTCNumCalTablePoints.GetX());
					cDatabaseTCNumCalTablePoints.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCNumCalTablePoints);
			}
			try
			{
				cDatabaseTCNumCalTablePoints.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMCALTABLEPOINTS_READ_FAILURE));
				cDatabaseTCNumCalTablePoints.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMCALTABLEPOINT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCNumCalTablePoints.GetName());
				cDatabaseTCNumCalTablePoints.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nTable = 0, nTables = (INT)pDatabase->GetTCNumCalTables()->GetSize(); nTable < nTables; nTable++)
		{
			if ((pDatabaseTCNumCalTable = pDatabase->GetTCNumCalTables()->GetAt(nTable)) != (CDatabaseTCNumCalTable *)NULL)
			{
				if (pDatabaseTCNumCalTable->GetPoints() != pDatabaseTCNumCalTable->GetSize() && pDatabaseTCNumCalTable->GetPoints() > 0)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCNUMCALTABLE_ILLEGALNUMBEROFPOINTS), (LPCTSTR)pDatabaseTCNumCalTable->GetName());
					cDatabaseTCNumCalTables.ShowWarning(pDatabaseTCNumCalTable->GetName(), szMessage);
				}
				if (!pDatabaseTCNumCalTable->GetPoints() && !pDatabaseTCNumCalTable->GetSize())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCNUMCALTABLE_NOPOINTS), (LPCTSTR)pDatabaseTCNumCalTable->GetName());
					cDatabaseTCNumCalTables.ShowWarning(pDatabaseTCNumCalTable->GetName(), szMessage);
				}
				for (nPoint = 0, nPoints = (INT)pDatabaseTCNumCalTable->GetSize(); nPoint < nPoints - 1; nPoint++)
				{
					if (!CheckTCNumCalTablePointInterval(pDatabaseTCNumCalTable->GetAt(nPoint)->GetX(), pDatabaseTCNumCalTable->GetAt(nPoint + 1)->GetX()))
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMCALTABLEPOINT_EPSPOINT), (LPCTSTR)pDatabaseTCNumCalTable->GetName(), pDatabaseTCNumCalTable->GetAt(nPoint)->GetX());
						cDatabaseTCNumCalTablePoints.ShowError(pDatabaseTCNumCalTable->GetName(), szMessage);
					}
				}
				pDatabaseTCNumCalTable->SetPoints((INT)pDatabaseTCNumCalTable->GetSize());
			}
		}
		ShowCompileMessages(&cDatabaseTCNumCalTables);
		ShowCompileMessages(&cDatabaseTCNumCalTablePoints);
		cDatabaseTCNumCalTablePoints.Close();
	}
	else
	{
		cDatabaseTCNumCalTablePoints.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCNUMCALTABLEPOINTS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCNumCalTablePoints);
	}
	for (nParameter = 0, nParameters = (INT)pDatabase->GetTCParameters()->GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(nParameter)) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL))
		{
			for (pDatabaseTCParameter->SetCalTableRef((nIndex = pDatabase->GetTCNumCalTables()->Find(pDatabaseTCParameter->GetCalTable()))); !pDatabaseTCParameter->GetCalTable().IsEmpty() && nIndex < 0; )
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALCALTABLE), (LPCTSTR)pDatabaseTCParameter->GetTag());
				cDatabaseTCParameters.ShowError(pDatabaseTCParameter->GetTag(), szMessage);
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTCParameters);
	}
}

VOID CALTELDatabaseEngine::CompileTCTxtCalTables(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nTable;
	INT  nTables;
	INT  nPoint[2];
	INT  nPoints[2];
	INT  nParameter;
	INT  nParameters;
	double  fX1[2];
	double  fX2[2];
	CString  szText[2];
	CString  szMessage;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;
	CALTELDatabaseTCParametersRecordset  cDatabaseTCParameters(this);
	CALTELDatabaseTCTxtCalTablesRecordset  cDatabaseTCTxtCalTables(this);
	CALTELDatabaseTCTxtCalTablePointsRecordset  cDatabaseTCTxtCalTablePoints(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCTXTCALTABLES));
	try
	{
		cDatabaseTCTxtCalTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_TXF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCTxtCalTables.IsOpen())
	{
		for (pDatabase->GetTCTxtCalTables()->RemoveAll(); !cDatabaseTCTxtCalTables.IsBOF() && !cDatabaseTCTxtCalTables.IsEOF() && IsCompiling(); )
		{
			if ((cDatabaseTCTxtCalTables.GetStatus() & TCCALTABLE_RECORDSTATUS_DEFAULT) >= TCCALTABLE_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTCTxtCalTable = new CDatabaseTCTxtCalTable))
				{
					pDatabaseTCTxtCalTable->SetName(cDatabaseTCTxtCalTables.GetName());
					pDatabaseTCTxtCalTable->SetDescription(cDatabaseTCTxtCalTables.GetDescription());
					pDatabaseTCTxtCalTable->SetPoints(cDatabaseTCTxtCalTables.GetPoints());
					pDatabaseTCTxtCalTable->SetStatus(cDatabaseTCTxtCalTables.GetStatus());
					if ((nIndex = pDatabase->GetTCTxtCalTables()->Find(cDatabaseTCTxtCalTables.GetName())) < 0 && pDatabase->GetTCTxtCalTables()->Add(pDatabaseTCTxtCalTable) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTCALTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCTxtCalTables.GetName());
						cDatabaseTCTxtCalTables.ShowError(szMessage);
						delete pDatabaseTCTxtCalTable;
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTCALTABLE_DUPLICATENAME), (LPCTSTR)cDatabaseTCTxtCalTables.GetName());
						cDatabaseTCTxtCalTables.ShowError(szMessage);
						delete pDatabaseTCTxtCalTable;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTCALTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCTxtCalTables.GetName());
					cDatabaseTCTxtCalTables.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTCTxtCalTables);
			}
			try
			{
				cDatabaseTCTxtCalTables.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTCALTABLES_READ_FAILURE));
				cDatabaseTCTxtCalTables.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTCALTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCTxtCalTables.GetName());
				cDatabaseTCTxtCalTables.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTCTxtCalTables);
		cDatabaseTCTxtCalTables.Close();
	}
	else
	{
		cDatabaseTCTxtCalTables.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCTXTCALTABLES_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCTxtCalTables);
	}
	try
	{
		cDatabaseTCTxtCalTablePoints.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_TXFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCTxtCalTablePoints.IsOpen())
	{
		while (!cDatabaseTCTxtCalTablePoints.IsBOF() && !cDatabaseTCTxtCalTablePoints.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTCTxtCalTable = pDatabase->GetTCTxtCalTables()->GetAt(pDatabase->GetTCTxtCalTables()->Find(cDatabaseTCTxtCalTablePoints.GetName()))))
			{
				if ((pDatabaseTCTxtCalPoint = new CDatabaseTCTxtCalPoint) != (CDatabaseTCTxtCalPoint *)NULL)
				{
					for (; cDatabaseTCTxtCalTablePoints.GetX1() == cDatabaseTCTxtCalTablePoints.GetX2(); )
					{
						pDatabaseTCTxtCalPoint->SetPoint(cDatabaseTCTxtCalTablePoints.GetX1(), cDatabaseTCTxtCalTablePoints.GetText());
						break;
					}
					for (; cDatabaseTCTxtCalTablePoints.GetX1() != cDatabaseTCTxtCalTablePoints.GetX2(); )
					{
						pDatabaseTCTxtCalPoint->SetRange(cDatabaseTCTxtCalTablePoints.GetX1(), cDatabaseTCTxtCalTablePoints.GetX2(), cDatabaseTCTxtCalTablePoints.GetText());
						break;
					}
					if ((nIndex = max(pDatabaseTCTxtCalTable->Find(cDatabaseTCTxtCalTablePoints.GetX1()), pDatabaseTCTxtCalTable->Find(cDatabaseTCTxtCalTablePoints.GetX2()))) < 0 && pDatabaseTCTxtCalTable->Add(pDatabaseTCTxtCalPoint) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTCALTABLEPOINT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCTxtCalTablePoints.GetName());
						cDatabaseTCTxtCalTablePoints.ShowError(szMessage);
						delete pDatabaseTCTxtCalPoint;
						break;
					}
					if (nIndex >= 0)
					{
						if (cDatabaseTCTxtCalTablePoints.GetX1() == cDatabaseTCTxtCalTablePoints.GetX2())
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTCALTABLEPOINT_INTERSECTINGPOINTSBYPOINT), (LPCTSTR)cDatabaseTCTxtCalTablePoints.GetName(), cDatabaseTCTxtCalTablePoints.GetX1(), (LPCTSTR)cDatabaseTCTxtCalTablePoints.GetText());
							cDatabaseTCTxtCalTablePoints.ShowError(szMessage);
						}
						if (cDatabaseTCTxtCalTablePoints.GetX1() != cDatabaseTCTxtCalTablePoints.GetX2())
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTCALTABLEPOINT_INTERSECTINGPOINTSBYRANGE), (LPCTSTR)cDatabaseTCTxtCalTablePoints.GetName(), cDatabaseTCTxtCalTablePoints.GetX1(), cDatabaseTCTxtCalTablePoints.GetX2(), (LPCTSTR)cDatabaseTCTxtCalTablePoints.GetText());
							cDatabaseTCTxtCalTablePoints.ShowError(szMessage);
						}
						delete pDatabaseTCTxtCalPoint;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTCALTABLEPOINT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCTxtCalTablePoints.GetName());
					cDatabaseTCTxtCalTablePoints.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTCTxtCalTablePoints);
			}
			else
			{
				if (pDatabase->GetTCTxtCalTables()->GetSize() > 0 || !cDatabaseTCTxtCalTablePoints.GetName().IsEmpty())
				{
					if (cDatabaseTCTxtCalTablePoints.GetX1() == cDatabaseTCTxtCalTablePoints.GetX2())
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTCALTABLEPOINT_UNDEFINEDNAMEATPOINT), (LPCTSTR)cDatabaseTCTxtCalTablePoints.GetName(), cDatabaseTCTxtCalTablePoints.GetX1(), (LPCTSTR)cDatabaseTCTxtCalTablePoints.GetText());
						cDatabaseTCTxtCalTablePoints.ShowError(szMessage);
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTCALTABLEPOINT_UNDEFINEDNAMEATRANGE), (LPCTSTR)cDatabaseTCTxtCalTablePoints.GetName(), cDatabaseTCTxtCalTablePoints.GetX1(), cDatabaseTCTxtCalTablePoints.GetX2(), (LPCTSTR)cDatabaseTCTxtCalTablePoints.GetText());
						cDatabaseTCTxtCalTablePoints.ShowError(szMessage);
					}
				}
				ShowCompileMessages(&cDatabaseTCTxtCalTablePoints);
			}
			try
			{
				cDatabaseTCTxtCalTablePoints.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTCALTABLEPOINTS_READ_FAILURE));
				cDatabaseTCTxtCalTablePoints.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTCALTABLEPOINT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCTxtCalTablePoints.GetName());
				cDatabaseTCTxtCalTablePoints.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nTable = 0, nTables = (INT)pDatabase->GetTCTxtCalTables()->GetSize(); nTable < nTables; nTable++)
		{
			if ((pDatabaseTCTxtCalTable = pDatabase->GetTCTxtCalTables()->GetAt(nTable)) != (CDatabaseTCTxtCalTable *)NULL)
			{
				for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTCTxtCalTable->GetSize(); nPoint[0] < nPoints[0] - 1; nPoint[0]++)
				{
					for (nPoint[1] = nPoint[0] + 1, nPoints[1] = nPoints[0]; nPoint[1] < nPoints[1]; nPoint[1] = nPoint[1] + 1)
					{
						if (pDatabaseTCTxtCalTable->GetAt(nPoint[0])->GetRange(fX1[0], fX2[0], szText[0]) && pDatabaseTCTxtCalTable->GetAt(nPoint[1])->GetRange(fX1[1], fX2[1], szText[1]))
						{
							if (szText[0] == szText[1]) break;
							continue;
						}
					}
					if (nPoint[1] < nPoints[1]) break;
				}
				if (nPoint[0] < nPoints[0] - 1)
				{
					if (fX1[0] == fX2[0])
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCTXTCALTABLE_DUPLICATETEXTATPOINT), (LPCTSTR)pDatabaseTCTxtCalTable->GetName(), (INT)fX1[0], (LPCTSTR)szText[0]);
						cDatabaseTCTxtCalTables.ShowWarning(pDatabaseTCTxtCalTable->GetName(), szMessage);
					}
					if (fX1[0] != fX2[0])
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCTXTCALTABLE_DUPLICATETEXTATRANGE), (LPCTSTR)pDatabaseTCTxtCalTable->GetName(), (INT)fX1[0], (INT)fX2[0], (LPCTSTR)szText[0]);
						cDatabaseTCTxtCalTables.ShowWarning(pDatabaseTCTxtCalTable->GetName(), szMessage);
					}
				}
				if (pDatabaseTCTxtCalTable->GetPoints() != pDatabaseTCTxtCalTable->GetSize())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCTXTCALTABLE_ILLEGALNUMBEROFPOINTS), (LPCTSTR)pDatabaseTCTxtCalTable->GetName());
					cDatabaseTCTxtCalTables.ShowWarning(pDatabaseTCTxtCalTable->GetName(), szMessage);
				}
				if (!pDatabaseTCTxtCalTable->GetPoints() && !pDatabaseTCTxtCalTable->GetSize())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCTXTCALTABLE_NOPOINTS), (LPCTSTR)pDatabaseTCTxtCalTable->GetName());
					cDatabaseTCTxtCalTables.ShowWarning(pDatabaseTCTxtCalTable->GetName(), szMessage);
				}
				pDatabaseTCTxtCalTable->SetPoints((INT)pDatabaseTCTxtCalTable->GetSize());
			}
		}
		ShowCompileMessages(&cDatabaseTCTxtCalTablePoints);
		ShowCompileMessages(&cDatabaseTCTxtCalTables);
		cDatabaseTCTxtCalTablePoints.Close();
	}
	else
	{
		cDatabaseTCTxtCalTablePoints.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCTXTCALTABLEPOINTS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCTxtCalTablePoints);
	}
	for (nParameter = 0, nParameters = (INT)pDatabase->GetTMParameters()->GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(nParameter)) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS))
		{
			for (pDatabaseTCParameter->SetCalTableRef((nIndex = pDatabase->GetTCTxtCalTables()->Find(pDatabaseTCParameter->GetCalTable()))); !pDatabaseTCParameter->GetCalTable().IsEmpty() && nIndex < 0; )
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALCALTABLE), (LPCTSTR)pDatabaseTCParameter->GetTag());
				cDatabaseTCParameters.ShowError(pDatabaseTCParameter->GetTag(), szMessage);
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTCParameters);
	}
}

VOID CALTELDatabaseEngine::CompileTCNumOolTables(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nTable;
	INT  nTables;
	INT  nPoint[2];
	INT  nPoints[2];
	INT  nParameter;
	INT  nParameters;
	UINT  nLimitType;
	double  fLimits[2][2];
	CString  szMessage;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;
	CDatabaseTCNumOolLimit  *pDatabaseTCNumOolLimit;
	CALTELDatabaseTCParametersRecordset  cDatabaseTCParameters(this);
	CALTELDatabaseTCNumOolTablesRecordset  cDatabaseTCNumOolTables(this);
	CALTELDatabaseTCNumOolTableLimitsRecordset  cDatabaseTCNumOolTableLimits(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCNUMOOLTABLES));
	try
	{
		cDatabaseTCNumOolTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_OCF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCNumOolTables.IsOpen())
	{
		for (nParameter = 0, nParameters = (INT)pDatabase->GetTCParameters()->GetSize(), pDatabase->GetTCNumOolTables()->RemoveAll(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(nParameter)) && ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)))
			{
				pDatabaseTCParameter->SetOolTableRef(-1);
				continue;
			}
		}
		while (!cDatabaseTCNumOolTables.IsBOF() && !cDatabaseTCNumOolTables.IsEOF() && IsCompiling())
		{
			if ((cDatabaseTCNumOolTables.GetStatus() & TCOOLTABLE_RECORDSTATUS_DEFAULT) >= TCOOLTABLE_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTCNumOolTable = new CDatabaseTCNumOolTable))
				{
					pDatabaseTCNumOolTable->SetName(cDatabaseTCNumOolTables.GetName());
					pDatabaseTCNumOolTable->SetAttributes(cDatabaseTCNumOolTables.GetAttributes());
					pDatabaseTCNumOolTable->SetChecks(cDatabaseTCNumOolTables.GetChecks());
					pDatabaseTCNumOolTable->SetStatus(cDatabaseTCNumOolTables.GetStatus());
					if ((nIndex = pDatabase->GetTCNumOolTables()->Find(cDatabaseTCNumOolTables.GetName())) < 0 && pDatabase->GetTCNumOolTables()->Add(pDatabaseTCNumOolTable) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCNumOolTables.GetName());
						cDatabaseTCNumOolTables.ShowError(szMessage);
						delete pDatabaseTCNumOolTable;
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLE_DUPLICATENAME), (LPCTSTR)cDatabaseTCNumOolTables.GetName());
						cDatabaseTCNumOolTables.ShowError(szMessage);
						delete pDatabaseTCNumOolTable;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCNumOolTables.GetName());
					cDatabaseTCNumOolTables.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTCNumOolTables);
			}
			try
			{
				cDatabaseTCNumOolTables.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLES_READ_FAILURE));
				cDatabaseTCNumOolTables.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCNumOolTables.GetName());
				cDatabaseTCNumOolTables.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTCNumOolTables);
		cDatabaseTCNumOolTables.Close();
	}
	else
	{
		cDatabaseTCNumOolTables.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLES_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCNumOolTables);
	}
	try
	{
		cDatabaseTCNumOolTableLimits.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_OCFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCNumOolTableLimits.IsOpen())
	{
		while (!cDatabaseTCNumOolTableLimits.IsBOF() && !cDatabaseTCNumOolTableLimits.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTCNumOolTable = pDatabase->GetTCNumOolTables()->GetAt(pDatabase->GetTCNumOolTables()->Find(cDatabaseTCNumOolTableLimits.GetName()))))
			{
				if ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) || (pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CHECK_CALIBRATED))
				{
					if ((pDatabaseTCNumOolLimit = new CDatabaseTCNumOolLimit))
					{
						pDatabaseTCNumOolLimit->SetType(TCOOLLIMIT_TYPE_HARD);
						pDatabaseTCNumOolLimit->SetOrder(cDatabaseTCNumOolTableLimits.GetOrder());
						pDatabaseTCNumOolLimit->SetRange(pDatabaseTCNumOolLimit->GetType(), (fLimits[0][0] = cDatabaseTCNumOolTableLimits.GetLowLimit()), (fLimits[0][1] = cDatabaseTCNumOolTableLimits.GetHighLimit()));
						for (szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLELIMIT_ILLEGALLOWLIMIT), (LPCTSTR)cDatabaseTCNumOolTableLimits.GetName(), (!isnan(cDatabaseTCNumOolTableLimits.GetLowLimit())) ? (LPCTSTR)TranslateTCNumOolTableLimitValue(cDatabaseTCNumOolTableLimits.GetAttributes(), cDatabaseTCNumOolTableLimits.GetLowLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE), (!isnan(cDatabaseTCNumOolTableLimits.GetHighLimit())) ? (LPCTSTR)TranslateTCNumOolTableLimitValue(cDatabaseTCNumOolTableLimits.GetAttributes(), cDatabaseTCNumOolTableLimits.GetHighLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE)); isnan(cDatabaseTCNumOolTableLimits.GetLowLimit()); )
						{
							cDatabaseTCNumOolTableLimits.ShowError(szMessage);
							break;
						}
						for (szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLELIMIT_ILLEGALHIGHLIMIT), (LPCTSTR)cDatabaseTCNumOolTableLimits.GetName(), (!isnan(cDatabaseTCNumOolTableLimits.GetLowLimit())) ? (LPCTSTR)TranslateTCNumOolTableLimitValue(cDatabaseTCNumOolTableLimits.GetAttributes(), cDatabaseTCNumOolTableLimits.GetLowLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE), (!isnan(cDatabaseTCNumOolTableLimits.GetHighLimit())) ? (LPCTSTR)TranslateTCNumOolTableLimitValue(cDatabaseTCNumOolTableLimits.GetAttributes(), cDatabaseTCNumOolTableLimits.GetHighLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE)); isnan(cDatabaseTCNumOolTableLimits.GetHighLimit()); )
						{
							cDatabaseTCNumOolTableLimits.ShowError(szMessage);
							break;
						}
						if (!isnan(cDatabaseTCNumOolTableLimits.GetLowLimit()) && !isnan(cDatabaseTCNumOolTableLimits.GetHighLimit()))
						{
							if (pDatabaseTCNumOolTable->GetSize() < GetTCNumOolTableLimitCount(pDatabaseTCNumOolTable->GetAttributes()))
							{
								if (pDatabaseTCNumOolTable->Find(fLimits[0][0], fLimits[0][1]) >= 0 || fLimits[0][0] > fLimits[0][1] || pDatabaseTCNumOolTable->Add(pDatabaseTCNumOolLimit) < 0)
								{
									szMessage.Format((fLimits[0][0] <= fLimits[0][1]) ? STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLELIMIT_IDENTICALLIMIT) : STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLELIMIT_ILLEGALHIGHLIMIT), (LPCTSTR)cDatabaseTCNumOolTableLimits.GetName(), (!isnan(cDatabaseTCNumOolTableLimits.GetLowLimit())) ? (LPCTSTR)TranslateTCNumOolTableLimitValue(cDatabaseTCNumOolTableLimits.GetAttributes(), cDatabaseTCNumOolTableLimits.GetLowLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE), (!isnan(cDatabaseTCNumOolTableLimits.GetHighLimit())) ? (LPCTSTR)TranslateTCNumOolTableLimitValue(cDatabaseTCNumOolTableLimits.GetAttributes(), cDatabaseTCNumOolTableLimits.GetHighLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE));
									cDatabaseTCNumOolTableLimits.ShowError(szMessage);
									delete pDatabaseTCNumOolLimit;
								}
							}
							else
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLELIMIT_ILLEGALNUMBEROFLIMITS), (LPCTSTR)pDatabaseTCNumOolTable->GetName());
								cDatabaseTCNumOolTableLimits.ShowError(pDatabaseTCNumOolTable->GetName(), szMessage);
								delete pDatabaseTCNumOolLimit;
							}
						}
						else  delete pDatabaseTCNumOolLimit;
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLELIMIT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCNumOolTableLimits.GetName());
						cDatabaseTCNumOolTableLimits.ShowError(szMessage);
						break;
					}
				}
				ShowCompileMessages(&cDatabaseTCNumOolTableLimits);
			}
			else
			{
				if (pDatabase->GetTCNumOolTables()->GetSize() > 0 || !cDatabaseTCNumOolTableLimits.GetName().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLELIMIT_UNDEFINEDNAME), (LPCTSTR)cDatabaseTCNumOolTableLimits.GetName(), (!isnan(cDatabaseTCNumOolTableLimits.GetLowLimit())) ? (LPCTSTR)TranslateTCNumOolTableLimitValue(cDatabaseTCNumOolTableLimits.GetAttributes(), cDatabaseTCNumOolTableLimits.GetLowLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE), (!isnan(cDatabaseTCNumOolTableLimits.GetHighLimit())) ? (LPCTSTR)TranslateTCNumOolTableLimitValue(cDatabaseTCNumOolTableLimits.GetAttributes(), cDatabaseTCNumOolTableLimits.GetHighLimit()) : STRING(IDS_DATABASE_TABLE_OCFP_LIMIT_NONE));
					cDatabaseTCNumOolTableLimits.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCNumOolTableLimits);
			}
			try
			{
				cDatabaseTCNumOolTableLimits.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLELIMITS_READ_FAILURE));
				cDatabaseTCNumOolTableLimits.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLELIMIT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCNumOolTableLimits.GetName());
				cDatabaseTCNumOolTableLimits.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nTable = 0, nTables = (INT)pDatabase->GetTCNumOolTables()->GetSize(); nTable < nTables; nTable++)
		{
			if ((pDatabaseTCNumOolTable = pDatabase->GetTCNumOolTables()->GetAt(nTable)))
			{
				if (pDatabaseTCNumOolTable->GetAttributes() & (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CHECK_CALIBRATED))
				{
					for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTCNumOolTable->GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
					{
						for (nPoint[1] = nPoint[0] + 1, nPoints[1] = nPoints[0]; nPoint[1] < nPoints[1]; nPoint[1] = nPoint[1] + 1)
						{
							if (pDatabaseTCNumOolTable->GetAt(nPoint[0])->GetRange(nLimitType, fLimits[0][0], fLimits[0][1]) && pDatabaseTCNumOolTable->GetAt(nPoint[1])->GetRange(nLimitType, fLimits[1][0], fLimits[1][1]))
							{
								if ((fLimits[1][0] >= fLimits[0][0] && fLimits[1][0] <= fLimits[0][1]) || (fLimits[1][1] >= fLimits[0][0] && fLimits[1][1] <= fLimits[0][1]))
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLELIMIT_OVERLAPPINGLIMITS), (LPCTSTR)pDatabaseTCNumOolTable->GetName());
									cDatabaseTCNumOolTableLimits.ShowError(pDatabaseTCNumOolTable->GetName(), szMessage);
									break;
								}
							}
						}
						if (nPoint[1] < nPoints[1]) break;
					}
					if (!nPoints[0])
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLELIMIT_NOLIMITS), (LPCTSTR)pDatabaseTCNumOolTable->GetName());
						cDatabaseTCNumOolTableLimits.ShowError(pDatabaseTCNumOolTable->GetName(), szMessage);
					}
				}
			}
		}
		ShowCompileMessages(&cDatabaseTCNumOolTableLimits);
		cDatabaseTCNumOolTableLimits.Close();
	}
	else
	{
		cDatabaseTCNumOolTableLimits.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCNUMOOLTABLELIMITS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCNumOolTableLimits);
	}
	for (nTable = 0, nTables = (INT)pDatabase->GetTCNumOolTables()->GetSize(); nTable < nTables; nTable++)
	{
		if ((pDatabaseTCNumOolTable = pDatabase->GetTCNumOolTables()->GetAt(nTable)) && (pDatabaseTCNumOolTable->GetAttributes() & (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CHECK_CALIBRATED)) == 0)
		{
			pDatabase->GetTCNumOolTables()->RemoveAt(nTable);
			delete pDatabaseTCNumOolTable;
			nTables--;
			nTable--;
		}
	}
	for (nParameter = 0, nParameters = (INT)pDatabase->GetTCParameters()->GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(nParameter)) != (CDatabaseTCParameter *)NULL)
		{
			if (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL))
			{
				for (pDatabaseTCParameter->SetOolTableRef((nIndex = pDatabase->GetTCNumOolTables()->Find(pDatabaseTCParameter->GetOolTable()))); ((pDatabaseTCNumOolTable = GetTCNumOolTables()->GetAt(nIndex)) && ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) && (((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_UNSIGNEDINTEGER) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) != TCPARAMETER_CODING_UNSIGNEDINTEGER) || ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_SIGNEDINTEGER) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) != TCPARAMETER_CODING_SIGNEDINTEGER) || ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_FLOATINGPOINT) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) != TCPARAMETER_CODING_FLOATINGPOINT)))) || (!pDatabaseTCParameter->GetOolTable().IsEmpty() && nIndex < 0); )
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALOOLTABLE), (LPCTSTR)pDatabaseTCParameter->GetTag());
					cDatabaseTCParameters.ShowError(pDatabaseTCParameter->GetTag(), szMessage);
					break;
				}
				if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)
				{
					if (!(pDatabaseTCParameter->GetAttributes() & TCPARAMETER_INTERPRETATION_EXTRAPOLATE))
					{
						if ((pDatabaseTCNumCalTable = pDatabase->GetTCNumCalTables()->GetAt(pDatabaseTCParameter->GetCalTableRef())))
						{
							if ((pDatabaseTCNumOolTable = pDatabase->GetTCNumOolTables()->GetAt(pDatabaseTCParameter->GetOolTableRef())))
							{
								for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTCNumCalTable->GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
								{
									if ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) == TCOOLTABLE_CHECK_RAW)
									{
										fLimits[0][0] = (!nPoint[0] || pDatabaseTCNumCalTable->GetAt(nPoint[0])->GetX() < fLimits[0][0]) ? pDatabaseTCNumCalTable->GetAt(nPoint[0])->GetX() : fLimits[0][0];
										fLimits[0][1] = (!nPoint[0] || pDatabaseTCNumCalTable->GetAt(nPoint[0])->GetX() > fLimits[0][1]) ? pDatabaseTCNumCalTable->GetAt(nPoint[0])->GetX() : fLimits[0][1];
										continue;
									}
									fLimits[0][0] = (!nPoint[0] || pDatabaseTCNumCalTable->GetAt(nPoint[0])->GetY() < fLimits[0][0]) ? pDatabaseTCNumCalTable->GetAt(nPoint[0])->GetY() : fLimits[0][0];
									fLimits[0][1] = (!nPoint[0] || pDatabaseTCNumCalTable->GetAt(nPoint[0])->GetY() > fLimits[0][1]) ? pDatabaseTCNumCalTable->GetAt(nPoint[0])->GetY() : fLimits[0][1];
								}
								for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTCNumOolTable->GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
								{
									if (pDatabaseTCNumOolTable->GetAt(nPoint[0])->GetRange(nLimitType, fLimits[1][0], fLimits[1][1]) && (fLimits[0][0] - FLT_EPSILON > fLimits[1][0] || fLimits[0][1] + FLT_EPSILON < fLimits[1][1])) break;
									continue;
								}
								if (nPoint[0] < nPoints[0])
								{
									if (fLimits[0][0] > fLimits[1][0])
									{
										szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALNUMOOLTABLELOWLIMIT), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)pDatabaseTCNumOolTable->GetName(), (LPCTSTR)pDatabaseTCNumCalTable->GetName());
										cDatabaseTCParameters.ShowError(pDatabaseTCParameter->GetTag(), szMessage);
									}
									if (fLimits[0][1] < fLimits[1][1])
									{
										szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALNUMOOLTABLEHIGHLIMIT), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)pDatabaseTCNumOolTable->GetName(), (LPCTSTR)pDatabaseTCNumCalTable->GetName());
										cDatabaseTCParameters.ShowError(pDatabaseTCParameter->GetTag(), szMessage);
									}
								}
							}
						}
					}
				}
				if ((pDatabaseTCNumOolTable = pDatabase->GetTCNumOolTables()->GetAt(pDatabaseTCParameter->GetOolTableRef())))
				{
					if ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) == TCOOLTABLE_CHECK_RAW)
					{
						for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTCNumOolTable->GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
						{
							if (pDatabaseTCNumOolTable->GetAt(nPoint[0])->GetRange(nLimitType, fLimits[0][0], fLimits[0][1]))
							{
								if (((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) || (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER)) && (fLimits[0][0] < 0.0 || fLimits[0][1] >= pow(2.0, pDatabaseTCParameter->GetWidth()))) break;
								if ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) && (fLimits[0][0] < -pow(2.0, pDatabaseTCParameter->GetWidth() - 1) || fLimits[0][1] >= pow(2.0, pDatabaseTCParameter->GetWidth() - 1))) break;
							}
						}
						if (nPoint[0] < nPoints[0])
						{
							if ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) || (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER))
							{
								szMessage.Format((fLimits[0][0] < 0.0) ? STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALNUMOOLTABLERAWLOWLIMIT) : STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALNUMOOLTABLERAWHIGHLIMIT), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)pDatabaseTCNumOolTable->GetName());
								cDatabaseTCParameters.ShowError(pDatabaseTCParameter->GetTag(), szMessage);
							}
							if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER)
							{
								szMessage.Format((fLimits[0][0] < -pow(2.0, pDatabaseTCParameter->GetWidth() - 1)) ? STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALNUMOOLTABLERAWLOWLIMIT) : STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALNUMOOLTABLERAWHIGHLIMIT), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)pDatabaseTCNumOolTable->GetName());
								cDatabaseTCParameters.ShowError(pDatabaseTCParameter->GetTag(), szMessage);
							}
						}
					}
				}
			}
			ShowCompileMessages(&cDatabaseTCNumOolTables);
			ShowCompileMessages(&cDatabaseTCNumOolTableLimits);
			ShowCompileMessages(&cDatabaseTCParameters);
		}
	}
}

VOID CALTELDatabaseEngine::CompileTCTxtOolTables(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nTable;
	INT  nTables;
	INT  nPoint[2];
	INT  nPoints[2];
	INT  nParameter;
	INT  nParameters;
	BOOL  bLimits[2];
	double  fX[2];
	double  fLimits[2][2];
	CString  szText;
	CString  szMessage;
	CString  szLimits[2][2];
	CStringArray  szOolTables[2];
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtOolTable  cDatabaseTCTxtOolTable;
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;
	CDatabaseTCTxtOolLimit  *pDatabaseTCTxtOolLimit;
	CALTELDatabaseTCParametersRecordset  cDatabaseTCParameters(this);
	CALTELDatabaseTCTxtOolTablesRecordset  cDatabaseTCTxtOolTables(this);
	CALTELDatabaseTCTxtOolTableLimitsRecordset  cDatabaseTCTxtOolTableLimits(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCTXTOOLTABLES));
	try
	{
		cDatabaseTCTxtOolTables.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_FXF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCTxtOolTables.IsOpen())
	{
		for (nParameter = 0, nParameters = (INT)pDatabase->GetTCParameters()->GetSize(), pDatabase->GetTCTxtOolTables()->RemoveAll(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(nParameter)) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS))
			{
				pDatabaseTCParameter->SetOolTableRef(-1);
				continue;
			}
		}
		while (!cDatabaseTCTxtOolTables.IsBOF() && !cDatabaseTCTxtOolTables.IsEOF() && IsCompiling())
		{
			if ((cDatabaseTCTxtOolTables.GetStatus() & TCOOLTABLE_RECORDSTATUS_DEFAULT) >= TCOOLTABLE_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTCTxtOolTable = new CDatabaseTCTxtOolTable))
				{
					pDatabaseTCTxtOolTable->SetName(cDatabaseTCTxtOolTables.GetName());
					pDatabaseTCTxtOolTable->SetAttributes(cDatabaseTCTxtOolTables.GetAttributes());
					pDatabaseTCTxtOolTable->SetChecks(cDatabaseTCTxtOolTables.GetChecks());
					pDatabaseTCTxtOolTable->SetStatus(cDatabaseTCTxtOolTables.GetStatus());
					if ((nIndex = pDatabase->GetTCTxtOolTables()->Find(cDatabaseTCTxtOolTables.GetName())) < 0 && pDatabase->GetTCTxtOolTables()->Add(pDatabaseTCTxtOolTable) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCTxtOolTables.GetName());
						cDatabaseTCTxtOolTables.ShowError(szMessage);
						delete pDatabaseTCTxtOolTable;
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLE_DUPLICATENAME), (LPCTSTR)cDatabaseTCTxtOolTables.GetName());
						cDatabaseTCTxtOolTables.ShowError(szMessage);
						delete pDatabaseTCTxtOolTable;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCTxtOolTables.GetName());
					cDatabaseTCTxtOolTables.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTCTxtOolTables);
			}
			try
			{
				cDatabaseTCTxtOolTables.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLES_READ_FAILURE));
				cDatabaseTCTxtOolTables.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLE_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCTxtOolTables.GetName());
				cDatabaseTCTxtOolTables.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTCTxtOolTables);
		cDatabaseTCTxtOolTables.Close();
	}
	else
	{
		cDatabaseTCTxtOolTables.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLES_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCTxtOolTables);
	}
	try
	{
		cDatabaseTCTxtOolTableLimits.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_FXFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCTxtOolTableLimits.IsOpen())
	{
		while (!cDatabaseTCTxtOolTableLimits.IsBOF() && !cDatabaseTCTxtOolTableLimits.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTCTxtOolTable = pDatabase->GetTCTxtOolTables()->GetAt(pDatabase->GetTCTxtOolTables()->Find(cDatabaseTCTxtOolTableLimits.GetName()))))
			{
				if ((pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) || (pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_CALIBRATED))
				{
					if ((pDatabaseTCTxtOolLimit = new CDatabaseTCTxtOolLimit))
					{
						pDatabaseTCTxtOolLimit->SetType(TCOOLLIMIT_TYPE_HARD);
						if (pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW)
						{
							pDatabaseTCTxtOolLimit->SetOrder(cDatabaseTCTxtOolTableLimits.GetOrder());
							pDatabaseTCTxtOolLimit->SetRange((fLimits[0][0] = TranslateTCTxtOolTableLimitValue(pDatabaseTCTxtOolTable->GetAttributes(), cDatabaseTCTxtOolTableLimits.GetLowLimit())), (fLimits[0][1] = TranslateTCTxtOolTableLimitValue(pDatabaseTCTxtOolTable->GetAttributes(), cDatabaseTCTxtOolTableLimits.GetHighLimit())));
						}
						if (pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_CALIBRATED)
						{
							pDatabaseTCTxtOolLimit->SetOrder(cDatabaseTCTxtOolTableLimits.GetOrder());
							pDatabaseTCTxtOolLimit->SetRange(cDatabaseTCTxtOolTableLimits.GetLowLimit(), cDatabaseTCTxtOolTableLimits.GetHighLimit());
						}
						if (CheckTCTxtOolTableLimitValue(pDatabaseTCTxtOolTable->GetAttributes(), cDatabaseTCTxtOolTableLimits.GetLowLimit()))
						{
							if (CheckTCTxtOolTableLimitValue(pDatabaseTCTxtOolTable->GetAttributes(), cDatabaseTCTxtOolTableLimits.GetHighLimit()))
							{
								if (pDatabaseTCTxtOolTable->GetSize() < GetTCTxtOolTableLimitCount(pDatabaseTCTxtOolTable->GetAttributes()))
								{
									if (((pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) && (pDatabaseTCTxtOolTable->Find(fLimits[0][0], fLimits[0][1]) >= 0 || fLimits[0][0] > fLimits[0][1])) || pDatabaseTCTxtOolTable->Add(pDatabaseTCTxtOolLimit) < 0)
									{
										szMessage.Format((fLimits[0][0] <= fLimits[0][1]) ? STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLELIMIT_IDENTICALLIMIT) : STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLELIMIT_ILLEGALHIGHLIMIT), (LPCTSTR)cDatabaseTCTxtOolTableLimits.GetName(), (LPCTSTR)cDatabaseTCTxtOolTableLimits.GetLowLimit(), (LPCTSTR)cDatabaseTCTxtOolTableLimits.GetHighLimit());
										cDatabaseTCTxtOolTableLimits.ShowError(szMessage);
										delete pDatabaseTCTxtOolLimit;
									}
								}
								else
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLELIMIT_ILLEGALNUMBEROFLIMITS), (LPCTSTR)pDatabaseTCTxtOolTable->GetName());
									cDatabaseTCTxtOolTableLimits.ShowError(pDatabaseTCTxtOolTable->GetName(), szMessage);
									delete pDatabaseTCTxtOolLimit;
								}
							}
							else
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLELIMIT_ILLEGALHIGHLIMIT), (LPCTSTR)cDatabaseTCTxtOolTableLimits.GetName(), (LPCTSTR)cDatabaseTCTxtOolTableLimits.GetLowLimit(), (LPCTSTR)cDatabaseTCTxtOolTableLimits.GetHighLimit());
								cDatabaseTCTxtOolTableLimits.ShowError(szMessage);
								delete pDatabaseTCTxtOolLimit;
							}
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLELIMIT_ILLEGALLOWLIMIT), (LPCTSTR)cDatabaseTCTxtOolTableLimits.GetName(), (LPCTSTR)cDatabaseTCTxtOolTableLimits.GetLowLimit(), (LPCTSTR)cDatabaseTCTxtOolTableLimits.GetHighLimit());
							cDatabaseTCTxtOolTableLimits.ShowError(szMessage);
							delete pDatabaseTCTxtOolLimit;
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLELIMIT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCTxtOolTableLimits.GetName());
						cDatabaseTCTxtOolTableLimits.ShowError(szMessage);
						break;
					}
				}
				ShowCompileMessages(&cDatabaseTCTxtOolTableLimits);
			}
			else
			{
				if (pDatabase->GetTCTxtOolTables()->GetSize() > 0 || !cDatabaseTCTxtOolTableLimits.GetName().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLELIMIT_UNDEFINEDNAME), (LPCTSTR)cDatabaseTCTxtOolTableLimits.GetName(), (LPCTSTR)cDatabaseTCTxtOolTableLimits.GetLowLimit(), (LPCTSTR)cDatabaseTCTxtOolTableLimits.GetHighLimit());
					cDatabaseTCTxtOolTableLimits.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCTxtOolTableLimits);
			}
			try
			{
				cDatabaseTCTxtOolTableLimits.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLELIMITS_READ_FAILURE));
				cDatabaseTCTxtOolTableLimits.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLELIMIT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCTxtOolTableLimits.GetName());
				cDatabaseTCTxtOolTableLimits.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nTable = 0, nTables = (INT)pDatabase->GetTCTxtOolTables()->GetSize(); nTable < nTables; nTable++)
		{
			if ((pDatabaseTCTxtOolTable = pDatabase->GetTCTxtOolTables()->GetAt(nTable)))
			{
				if (pDatabaseTCTxtOolTable->GetAttributes() & (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CHECK_CALIBRATED))
				{
					for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTCTxtOolTable->GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
					{
						for (nPoint[1] = nPoint[0] + 1, nPoints[1] = nPoints[0]; nPoint[1] < nPoints[1]; nPoint[1]++)
						{
							if ((pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) == TCOOLTABLE_CHECK_RAW)
							{
								if (pDatabaseTCTxtOolTable->GetAt(nPoint[0])->GetRange(fLimits[0][0], fLimits[0][1]) && pDatabaseTCTxtOolTable->GetAt(nPoint[1])->GetRange(fLimits[1][0], fLimits[1][1]) && ((fLimits[1][0] >= fLimits[0][0] && fLimits[1][0] <= fLimits[0][1]) || (fLimits[1][1] >= fLimits[0][0] && fLimits[1][1] <= fLimits[0][1]))) break;
								continue;
							}
							if (pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_CALIBRATED)
							{
								if (pDatabaseTCTxtOolTable->GetAt(nPoint[0])->GetRange(szLimits[0][0], szLimits[0][1]) && pDatabaseTCTxtOolTable->GetAt(nPoint[1])->GetRange(szLimits[1][0], szLimits[1][1]) && (szLimits[0][0] == szLimits[1][0] || szLimits[0][1] == szLimits[1][1])) break;
								continue;
							}
						}
						if (nPoint[1] < nPoints[1]) break;
					}
					if (!nPoints[0])
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLELIMIT_NOLIMITS), (LPCTSTR)pDatabaseTCTxtOolTable->GetName());
						cDatabaseTCTxtOolTableLimits.ShowError(pDatabaseTCTxtOolTable->GetName(), szMessage);
					}
					if (nPoint[0] < nPoints[0])
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLELIMIT_OVERLAPPINGLIMITS), (LPCTSTR)pDatabaseTCTxtOolTable->GetName());
						cDatabaseTCTxtOolTableLimits.ShowError(pDatabaseTCTxtOolTable->GetName(), szMessage);
					}
				}
			}
		}
		ShowCompileMessages(&cDatabaseTCTxtOolTableLimits);
		cDatabaseTCTxtOolTableLimits.Close();
	}
	else
	{
		cDatabaseTCTxtOolTableLimits.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLELIMITS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCTxtOolTableLimits);
	}
	for (nTable = 0, nTables = (INT)pDatabase->GetTCTxtOolTables()->GetSize(); nTable < nTables; nTable++)
	{
		if ((pDatabaseTCTxtOolTable = pDatabase->GetTCTxtOolTables()->GetAt(nTable)) && (pDatabaseTCTxtOolTable->GetAttributes() & (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CHECK_CALIBRATED)) == 0)
		{
			pDatabase->GetTCTxtOolTables()->RemoveAt(nTable);
			delete pDatabaseTCTxtOolTable;
			nTables--;
			nTable--;
		}
	}
	for (nParameter = 0, nParameters = (INT)pDatabase->GetTCParameters()->GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(nParameter)))
		{
			if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
			{
				for (pDatabaseTCParameter->SetOolTableRef((nIndex = pDatabase->GetTCTxtOolTables()->Find(pDatabaseTCParameter->GetOolTable()))); !pDatabaseTCParameter->GetOolTable().IsEmpty() && nIndex < 0; )
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALOOLTABLE), (LPCTSTR)pDatabaseTCParameter->GetTag());
					cDatabaseTCParameters.ShowError(pDatabaseTCParameter->GetTag(), szMessage);
					break;
				}
				if ((pDatabaseTCTxtOolTable = pDatabase->GetTCTxtOolTables()->GetAt(pDatabaseTCParameter->GetOolTableRef())))
				{
					if ((pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) && ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) || (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)))
					{
						if ((pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_RADIX_DECIMAL) != TCOOLTABLE_RADIX_DECIMAL)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLE_ILLEGALRADIX), (LPCTSTR)pDatabaseTCParameter->GetTag());
							cDatabaseTCTxtOolTables.ShowError(pDatabaseTCTxtOolTable->GetName(), szMessage);
						}
					}
				}
				if ((pDatabaseTCTxtCalTable = pDatabase->GetTCTxtCalTables()->GetAt(pDatabaseTCParameter->GetCalTableRef())))
				{
					if ((pDatabaseTCTxtOolTable = pDatabase->GetTCTxtOolTables()->GetAt(pDatabaseTCParameter->GetOolTableRef())))
					{
						if ((pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) == TCOOLTABLE_CHECK_RAW)
						{
							for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTCTxtOolTable->GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
							{
								for (nPoint[1] = 0, nPoints[1] = (INT)pDatabaseTCTxtCalTable->GetSize(); nPoint[1] < nPoints[1]; nPoint[1]++)
								{
									if (pDatabaseTCTxtOolTable->GetAt(nPoint[0])->GetRange(fLimits[0][0], fLimits[0][1]) && pDatabaseTCTxtCalTable->GetAt(nPoint[1])->GetRange(fX[0], fX[1], szText))
									{
										if (fLimits[0][0] == fX[0] && fLimits[0][1] == fX[1]) break;
										continue;
									}
								}
								if (nPoint[1] == nPoints[1]) break;
							}
							if (nPoint[0] < nPoints[0])
							{
								if (fLimits[0][0] != fX[0])
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALTXTOOLTABLELOWLIMIT), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)pDatabaseTCTxtOolTable->GetName(), (LPCTSTR)pDatabaseTCTxtCalTable->GetName());
									cDatabaseTCParameters.ShowError(pDatabaseTCParameter->GetTag(), szMessage);
								}
								if (fLimits[0][1] != fX[1])
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALTXTOOLTABLEHIGHLIMIT), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)pDatabaseTCTxtOolTable->GetName(), (LPCTSTR)pDatabaseTCTxtCalTable->GetName());
									cDatabaseTCParameters.ShowError(pDatabaseTCParameter->GetTag(), szMessage);
								}
								break;
							}
						}
						if (pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_CALIBRATED)
						{
							for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTCTxtOolTable->GetSize(), cDatabaseTCTxtOolTable.RemoveAll(); nPoint[0] < nPoints[0]; nPoint[0]++)
							{
								for (nPoint[1] = 0, nPoints[1] = (INT)pDatabaseTCTxtCalTable->GetSize(), bLimits[0] = bLimits[1] = FALSE; nPoint[1] < nPoints[1] && (!bLimits[0] || !bLimits[1]); nPoint[1]++)
								{
									if (pDatabaseTCTxtOolTable->GetAt(nPoint[0])->GetRange(szLimits[0][0], szLimits[0][1]) && pDatabaseTCTxtCalTable->GetAt(nPoint[1])->GetRange(fX[0], fX[1], szText))
									{
										if (szLimits[0][0] == szLimits[0][1] && szLimits[0][0] == szText)
										{
											fLimits[0][0] = fX[0];
											fLimits[0][1] = fX[1];
											bLimits[0] = TRUE;
											bLimits[1] = TRUE;
											break;
										}
										if (szLimits[0][0] == szText || szLimits[0][1] == szText)
										{
											fLimits[0][0] = (bLimits[0]) ? ((fLimits[0][0] > fX[0]) ? fX[0] : fLimits[0][0]) : fX[0];
											fLimits[0][1] = (bLimits[1]) ? ((fLimits[0][1] < fX[1]) ? fX[1] : fLimits[0][1]) : fX[1];
											bLimits[0] = (szLimits[0][0] == szText) ? TRUE : bLimits[0];
											bLimits[1] = (szLimits[0][1] == szText) ? TRUE : bLimits[1];
										}
									}
								}
								if (bLimits[0] && bLimits[1])
								{
									if ((pDatabaseTCTxtOolLimit = new CDatabaseTCTxtOolLimit(fLimits[0][0], fLimits[0][1])))
									{
										if (cDatabaseTCTxtOolTable.Add(pDatabaseTCTxtOolLimit) >= 0) continue;
										delete pDatabaseTCTxtOolLimit;
									}
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLE_MEMORY_FAILURE), (LPCTSTR)pDatabaseTCTxtOolTable->GetName());
									cDatabaseTCTxtOolTables.ShowError(pDatabaseTCTxtOolTable->GetName(), szMessage);
									break;
								}
								if (pDatabaseTCTxtOolTable->GetAt(nPoint[0])->GetRange(szLimits[0][0], szLimits[0][1]))
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALTXTOOLTABLELIMITRANGE), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)szLimits[0][0], (LPCTSTR)szLimits[0][1], (LPCTSTR)pDatabaseTCTxtOolTable->GetName());
									cDatabaseTCParameters.ShowError(pDatabaseTCParameter->GetTag(), szMessage);
								}
								break;
							}
							if (nPoint[0] == nPoints[0])
							{
								for (nPoint[0] = 0, nPoints[0] = (INT)cDatabaseTCTxtOolTable.GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
								{
									for (nPoint[1] = nPoint[0] + 1, nPoints[1] = nPoints[0]; nPoint[1] < nPoints[1]; nPoint[1] = nPoint[1] + 1)
									{
										if (cDatabaseTCTxtOolTable.GetAt(nPoint[0])->GetRange(fLimits[0][0], fLimits[0][1]) && cDatabaseTCTxtOolTable.GetAt(nPoint[1])->GetRange(fLimits[1][0], fLimits[1][1]) && ((fLimits[1][0] >= fLimits[0][0] && fLimits[1][0] <= fLimits[0][1]) || (fLimits[1][1] >= fLimits[0][0] && fLimits[1][1] <= fLimits[0][1]))) break;
										continue;
									}
									if (nPoint[1] < nPoints[1]) break;
								}
								if (nPoint[0] < nPoints[0])
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCTXTOOLTABLELIMIT_OVERLAPPINGLIMITS), (LPCTSTR)pDatabaseTCTxtOolTable->GetName());
									cDatabaseTCTxtOolTableLimits.ShowError(pDatabaseTCTxtOolTable->GetName(), szMessage);
								}
							}
						}
					}
				}
				if ((pDatabaseTCTxtOolTable = pDatabase->GetTCTxtOolTables()->GetAt(pDatabaseTCParameter->GetOolTableRef())))
				{
					if ((pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) == TCOOLTABLE_CHECK_RAW)
					{
						for (nPoint[0] = 0, nPoints[0] = (INT)pDatabaseTCTxtOolTable->GetSize(); nPoint[0] < nPoints[0]; nPoint[0]++)
						{
							if (pDatabaseTCTxtOolTable->GetAt(nPoint[0])->GetRange(fLimits[0][0], fLimits[0][1]))
							{
								if ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) && (fLimits[0][0] < 0.0 || fLimits[0][1] >= pow(2.0, pDatabaseTCParameter->GetWidth()))) break;
								if ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) && (fLimits[0][0] < -pow(2.0, pDatabaseTCParameter->GetWidth() - 1) || fLimits[0][1] >= pow(2.0, pDatabaseTCParameter->GetWidth() - 1))) break;
							}
						}
						if (nPoint[0] < nPoints[0])
						{
							if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER)
							{
								szMessage.Format((fLimits[0][0] < 0.0) ? STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALTXTOOLTABLERAWLOWLIMIT) : STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALTXTOOLTABLERAWHIGHLIMIT), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)pDatabaseTCTxtOolTable->GetName());
								cDatabaseTCParameters.ShowError(pDatabaseTCParameter->GetTag(), szMessage);
							}
							if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER)
							{
								szMessage.Format((fLimits[0][0] < -pow(2.0, pDatabaseTCParameter->GetWidth() - 1)) ? STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALTXTOOLTABLERAWLOWLIMIT) : STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETER_ILLEGALTXTOOLTABLERAWHIGHLIMIT), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)pDatabaseTCTxtOolTable->GetName());
								cDatabaseTCParameters.ShowError(pDatabaseTCParameter->GetTag(), szMessage);
							}
						}
					}
				}
			}
			ShowCompileMessages(&cDatabaseTCTxtOolTables);
			ShowCompileMessages(&cDatabaseTCTxtOolTableLimits);
			ShowCompileMessages(&cDatabaseTCParameters);
		}
	}
}

VOID CALTELDatabaseEngine::CompileTCPreExeGroups(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nPoint;
	INT  nPoints;
	INT  nFunction;
	INT  nFunctions;
	double  fValue[2];
	CString  szValue;
	CString  szMessage;
	ULONGLONG  nAttributes;
	CStringArray  szTables[2];
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMNumCalPoint  *pDatabaseTMNumCalPoint[2];
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup;
	CDatabaseTCPreExeGroupParameter  *pDatabaseTCPreExeGroupParameter;
	CALTELDatabaseTCFunctionsRecordset  cDatabaseTCFunctions(this);
	CALTELDatabaseTCPreExeGroupsRecordset  cDatabaseTCPreExeGroups(this);
	CALTELDatabaseTCPreExeGroupParametersRecordset  cDatabaseTCPreExeGroupParameters(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCPREEXEGROUPS));
	try
	{
		cDatabaseTCPreExeGroups.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PVP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCPreExeGroups.IsOpen())
	{
		for (pDatabase->GetTCPreExeGroups()->RemoveAll(); !cDatabaseTCPreExeGroups.IsBOF() && !cDatabaseTCPreExeGroups.IsEOF() && IsCompiling(); )
		{
			if ((cDatabaseTCPreExeGroups.GetStatus() & TCPREEXEGROUP_RECORDSTATUS_DEFAULT) >= TCPREEXEGROUP_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTCPreExeGroup = new CDatabaseTCPreExeGroup))
				{
					pDatabaseTCPreExeGroup->SetID(cDatabaseTCPreExeGroups.GetID());
					pDatabaseTCPreExeGroup->SetDescription(cDatabaseTCPreExeGroups.GetDescription());
					pDatabaseTCPreExeGroup->SetStatus(cDatabaseTCPreExeGroups.GetStatus());
					if ((nIndex = pDatabase->GetTCPreExeGroups()->Find(cDatabaseTCPreExeGroups.GetID())) < 0 && pDatabase->GetTCPreExeGroups()->Add(pDatabaseTCPreExeGroup) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUP_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCPreExeGroups.GetID());
						cDatabaseTCPreExeGroups.ShowError(szMessage);
						delete pDatabaseTCPreExeGroup;
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUP_DUPLICATEID), (LPCTSTR)cDatabaseTCPreExeGroups.GetID());
						cDatabaseTCPreExeGroups.ShowError(szMessage);
						delete pDatabaseTCPreExeGroup;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUP_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCPreExeGroups.GetID());
					cDatabaseTCPreExeGroups.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTCPreExeGroups);
			}
			try
			{
				cDatabaseTCPreExeGroups.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUPS_READ_FAILURE));
				cDatabaseTCPreExeGroups.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUP_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCPreExeGroups.GetID());
				cDatabaseTCPreExeGroups.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nFunction = 0, nFunctions = (INT)pDatabase->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
		{
			if ((pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
			{
				if ((pDatabaseTCPreExeGroup = pDatabase->GetTCPreExeGroups()->GetAt((nIndex = pDatabase->GetTCPreExeGroups()->Find(pDatabaseTCFunction->GetPreExeGroup())))))
				{
					pDatabaseTCFunction->SetPreExeGroupRef(nIndex);
					continue;
				}
				if (pDatabaseTCFunction->GetPreExeGroup().GetLength() > 0)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTION_ILLEGALPREEXEGROUP), (LPCTSTR)pDatabaseTCFunction->GetName());
					cDatabaseTCFunctions.ShowError(pDatabaseTCFunction->GetName(), szMessage);
				}
			}
		}
		ShowCompileMessages(&cDatabaseTCPreExeGroups);
		ShowCompileMessages(&cDatabaseTCFunctions);
		cDatabaseTCPreExeGroups.Close();
	}
	else
	{
		cDatabaseTCPreExeGroups.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUPS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCPreExeGroups);
	}
	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCPREEXEGROUPPARAMETERS));
	try
	{
		cDatabaseTCPreExeGroupParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PEV_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCPreExeGroupParameters.IsOpen())
	{
		while (!cDatabaseTCPreExeGroupParameters.IsBOF() && !cDatabaseTCPreExeGroupParameters.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTCPreExeGroup = pDatabase->GetTCPreExeGroups()->GetAt(pDatabase->GetTCPreExeGroups()->Find(cDatabaseTCPreExeGroupParameters.GetID()))))
			{
				if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(cDatabaseTCPreExeGroupParameters.GetTag()))))
				{
					if ((pDatabaseTCPreExeGroupParameter = new CDatabaseTCPreExeGroupParameter))
					{
						pDatabaseTCPreExeGroupParameter->SetTag(cDatabaseTCPreExeGroupParameters.GetTag());
						pDatabaseTCPreExeGroupParameter->SetAttributes(cDatabaseTCPreExeGroupParameters.GetAttributes());
						pDatabaseTCPreExeGroupParameter->SetValueAsText(cDatabaseTCPreExeGroupParameters.GetValue());
						pDatabaseTCPreExeGroupParameter->SetRef(pDatabase->GetTMParameters()->Find(cDatabaseTCPreExeGroupParameters.GetTag()));
						if ((nIndex = pDatabaseTCPreExeGroup->Find(cDatabaseTCPreExeGroupParameters.GetTag())) < 0 && pDatabaseTCPreExeGroup->Add(pDatabaseTCPreExeGroupParameter) < 0)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUPPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetID());
							cDatabaseTCPreExeGroupParameters.ShowError(szMessage);
							delete pDatabaseTCPreExeGroupParameter;
							break;
						}
						if (nIndex < 0)
						{
							if (pDatabaseTCPreExeGroupParameter->GetAttributes() & TCPREEXEGROUPPARAMETER_INTERPRETATION_RAW)
							{
								for (pDatabaseTCPreExeGroupParameter->SetValue(TranslateTCPreExeGroupParameterConstValue((nAttributes = (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_NATURE_CONSTANT), pDatabaseTCPreExeGroupParameter->GetValueAsText())); !CheckTCPreExeGroupParameterConstValue(nAttributes, pDatabaseTCPreExeGroupParameter->GetValueAsText()); )
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUPPARAMETER_ILLEGALVALUE), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetID(), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetTag());
									cDatabaseTCPreExeGroupParameters.ShowError(szMessage);
									break;
								}
							}
							if (pDatabaseTCPreExeGroupParameter->GetAttributes() & TCPREEXEGROUPPARAMETER_INTERPRETATION_CALIBRATED)
							{
								if (pDatabaseTMParameter->GetCalTables(szTables[0], szTables[1]) == 1)
								{
									if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)
									{
										if ((pDatabaseTMNumCalTable = pDatabase->GetTMNumCalTables()->GetAt(pDatabase->GetTMNumCalTables()->Find(szTables[0].GetAt(szTables[0].GetUpperBound())))))
										{
											for (nPoint = 0, nPoints = (INT)pDatabaseTMNumCalTable->GetSize() - 1, fValue[0] = TranslateTCPreExeGroupParameterConstValue((nAttributes = (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_CODING_TEXTSTRING | TMPARAMETER_CODING_TIME | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_NATURE_CONSTANT), pDatabaseTCPreExeGroupParameter->GetValueAsText()); nPoint < nPoints; nPoint++)
											{
												if ((pDatabaseTMNumCalPoint[0] = pDatabaseTMNumCalTable->GetAt(nPoint)))
												{
													if ((pDatabaseTMNumCalPoint[1] = pDatabaseTMNumCalTable->GetAt(nPoint + 1)))
													{
														if ((fValue[0] >= pDatabaseTMNumCalPoint[0]->GetY() && fValue[0] <= pDatabaseTMNumCalPoint[1]->GetY()) || (fValue[0] <= pDatabaseTMNumCalPoint[0]->GetY() && fValue[0] >= pDatabaseTMNumCalPoint[1]->GetY())) break;
														continue;
													}
												}
											}
											if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_INTERPRETATION_FULL) && nPoint == nPoints  &&  nPoints > 0)
											{
												szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCPREEXEGROUPPARAMETER_OUTSIDEVALUE), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetID(), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetTag());
												cDatabaseTCPreExeGroupParameters.ShowWarning(szMessage);
											}
										}
									}
									if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS)
									{
										if ((pDatabaseTMTxtCalTable = pDatabase->GetTMTxtCalTables()->GetAt(pDatabase->GetTMTxtCalTables()->Find(szTables[0].GetAt(szTables[0].GetUpperBound())))))
										{
											for (nPoint = 0, nPoints = (!pDatabaseTCPreExeGroupParameter->GetValueAsText().IsEmpty()) ? (INT)pDatabaseTMTxtCalTable->GetSize() : 0; nPoint < nPoints; nPoint++)
											{
												if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt(nPoint)) && ((pDatabaseTMTxtCalPoint->GetRange(fValue[0], fValue[1], szValue) || pDatabaseTMTxtCalPoint->GetPoint(fValue[0], szValue)) && pDatabaseTCPreExeGroupParameter->GetValueAsText() == szValue)) break;
												continue;
											}
											if (nPoint == nPoints  &&  nPoints > 0)
											{
												szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUPPARAMETER_MISSINGPARAMETERCALIBRATIONVALUE), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetID(), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetTag(), (LPCTSTR)pDatabaseTCPreExeGroupParameter->GetValueAsText(), (LPCTSTR)pDatabaseTMTxtCalTable->GetName());
												cDatabaseTCPreExeGroupParameters.ShowError(szMessage);
											}
										}
									}
								}
								else
								{
									for (szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUPPARAMETER_MISSINGPARAMETERCALIBRATION), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetID(), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetTag()); !szTables[0].GetSize(); )
									{
										cDatabaseTCPreExeGroupParameters.ShowError(szMessage);
										break;
									}
									for (szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUPPARAMETER_TOOMANYPARAMETERCALIBRATION), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetID(), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetTag()); szTables[0].GetSize() > 1; )
									{
										cDatabaseTCPreExeGroupParameters.ShowError(szMessage);
										break;
									}
								}
							}
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUPPARAMETER_DUPLICATEPARAMETER), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetID(), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetTag());
							cDatabaseTCPreExeGroupParameters.ShowError(szMessage);
							delete pDatabaseTCPreExeGroupParameter;
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUPPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetID());
						cDatabaseTCPreExeGroupParameters.ShowError(szMessage);
						break;
					}
				}
				else
				{
					if (pDatabase->GetTMParameters()->GetSize() > 0 || !cDatabaseTCPreExeGroupParameters.GetTag().IsEmpty())
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUPPARAMETER_UNDEFINEDPARAMETER), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetID(), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetTag());
						cDatabaseTCPreExeGroupParameters.ShowError(szMessage);
					}
				}
				ShowCompileMessages(&cDatabaseTCPreExeGroupParameters);
			}
			else
			{
				if (pDatabase->GetTCPreExeGroups()->GetSize() > 0 || !cDatabaseTCPreExeGroupParameters.GetID().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUPPARAMETER_UNDEFINEDID), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetID(), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetTag());
					cDatabaseTCPreExeGroupParameters.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCPreExeGroupParameters);
			}
			try
			{
				cDatabaseTCPreExeGroupParameters.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUPPARAMETERS_READ_FAILURE));
				cDatabaseTCPreExeGroupParameters.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUPPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCPreExeGroupParameters.GetID());
				cDatabaseTCPreExeGroupParameters.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTCPreExeGroupParameters);
		cDatabaseTCPreExeGroupParameters.Close();
	}
	else
	{
		cDatabaseTCPreExeGroupParameters.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCPREEXEGROUPPARAMETERS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCPreExeGroupParameters);
	}
}

VOID CALTELDatabaseEngine::CompileTCExeVerGroups(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nGroup;
	INT  nGroups;
	INT  nPoint;
	INT  nPoints;
	INT  nFunction;
	INT  nFunctions;
	double  fValue[2];
	CString  szValue;
	CString  szMessage;
	ULONGLONG  nAttributes;
	CStringArray  szTables[2];
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMNumCalPoint  *pDatabaseTMNumCalPoint[2];
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;
	CDatabaseTCExeVerGroupParameter  *pDatabaseTCExeVerGroupParameter;
	CALTELDatabaseTCFunctionsRecordset  cDatabaseTCFunctions(this);
	CALTELDatabaseTCExeVerGroupsRecordset  cDatabaseTCExeVerGroups(this);
	CALTELDatabaseTCExeVerGroupParametersRecordset  cDatabaseTCExeVerGroupParameters(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCEXEVERGROUPS));
	try
	{
		cDatabaseTCExeVerGroups.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CVP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCExeVerGroups.IsOpen())
	{
		for (pDatabase->GetTCExeVerGroups()->RemoveAll(); !cDatabaseTCExeVerGroups.IsBOF() && !cDatabaseTCExeVerGroups.IsEOF() && IsCompiling(); )
		{
			if ((cDatabaseTCExeVerGroups.GetStatus() & TCEXEVERGROUP_RECORDSTATUS_DEFAULT) >= TCEXEVERGROUP_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTCExeVerGroup = new CDatabaseTCExeVerGroup))
				{
					pDatabaseTCExeVerGroup->SetID(cDatabaseTCExeVerGroups.GetID());
					pDatabaseTCExeVerGroup->SetName(cDatabaseTCExeVerGroups.GetName());
					pDatabaseTCExeVerGroup->SetDescription(cDatabaseTCExeVerGroups.GetDescription());
					pDatabaseTCExeVerGroup->SetStages(cDatabaseTCExeVerGroups.GetStages());
					pDatabaseTCExeVerGroup->SetStatus(cDatabaseTCExeVerGroups.GetStatus());
					if ((nIndex = pDatabase->GetTCExeVerGroups()->Find(cDatabaseTCExeVerGroups.GetID())) < 0 && pDatabase->GetTCExeVerGroups()->Add(pDatabaseTCExeVerGroup) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUP_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCExeVerGroups.GetID());
						cDatabaseTCExeVerGroups.ShowError(szMessage);
						delete pDatabaseTCExeVerGroup;
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUP_DUPLICATEID), (LPCTSTR)cDatabaseTCExeVerGroups.GetID());
						cDatabaseTCExeVerGroups.ShowError(szMessage);
						delete pDatabaseTCExeVerGroup;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUP_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCExeVerGroups.GetID());
					cDatabaseTCExeVerGroups.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTCExeVerGroups);
			}
			try
			{
				cDatabaseTCExeVerGroups.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPS_READ_FAILURE));
				cDatabaseTCExeVerGroups.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUP_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCExeVerGroups.GetID());
				cDatabaseTCExeVerGroups.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nFunction = 0, nFunctions = (INT)pDatabase->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
		{
			if ((pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
			{
				if ((pDatabaseTCExeVerGroup = pDatabase->GetTCExeVerGroups()->GetAt((nIndex = pDatabase->GetTCExeVerGroups()->Find(pDatabaseTCFunction->GetExeVerGroup())))))
				{
					pDatabaseTCFunction->SetExeVerGroupRef(nIndex);
					continue;
				}
				if (pDatabaseTCFunction->GetExeVerGroup().GetLength() > 0)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTION_ILLEGALEXEVERGROUP), (LPCTSTR)pDatabaseTCFunction->GetName());
					cDatabaseTCFunctions.ShowError(pDatabaseTCFunction->GetName(), szMessage);
				}
			}
		}
		ShowCompileMessages(&cDatabaseTCExeVerGroups);
		ShowCompileMessages(&cDatabaseTCFunctions);
		cDatabaseTCExeVerGroups.Close();
	}
	else
	{
		cDatabaseTCExeVerGroups.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCExeVerGroups);
	}
	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCEXEVERGROUPPARAMETERS));
	try
	{
		cDatabaseTCExeVerGroupParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CEV_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCExeVerGroupParameters.IsOpen())
	{
		while (!cDatabaseTCExeVerGroupParameters.IsBOF() && !cDatabaseTCExeVerGroupParameters.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTCExeVerGroup = pDatabase->GetTCExeVerGroups()->GetAt(pDatabase->GetTCExeVerGroups()->Find(cDatabaseTCExeVerGroupParameters.GetID()))))
			{
				if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(cDatabaseTCExeVerGroupParameters.GetTag()))))
				{
					if ((pDatabaseTCExeVerGroupParameter = new CDatabaseTCExeVerGroupParameter))
					{
						pDatabaseTCExeVerGroupParameter->SetTag(cDatabaseTCExeVerGroupParameters.GetTag());
						pDatabaseTCExeVerGroupParameter->SetStage(MAKETCEXEVERSTAGEFROMID(cDatabaseTCExeVerGroupParameters.GetStage()));
						pDatabaseTCExeVerGroupParameter->SetStep(MAKETCEXEVERSTAGESTEPFROMID(cDatabaseTCExeVerGroupParameters.GetStage()));
						pDatabaseTCExeVerGroupParameter->SetAttributes(cDatabaseTCExeVerGroupParameters.GetAttributes());
						pDatabaseTCExeVerGroupParameter->SetValueAsText(cDatabaseTCExeVerGroupParameters.GetValue());
						pDatabaseTCExeVerGroupParameter->SetTimeWindowInterval(cDatabaseTCExeVerGroupParameters.GetTimeWindowInterval());
						pDatabaseTCExeVerGroupParameter->SetRef(pDatabase->GetTMParameters()->Find(cDatabaseTCExeVerGroupParameters.GetTag()));
						if ((nIndex = pDatabaseTCExeVerGroup->Find(cDatabaseTCExeVerGroupParameters.GetTag(), cDatabaseTCExeVerGroupParameters.GetStage())) < 0 && pDatabaseTCExeVerGroup->Add(pDatabaseTCExeVerGroupParameter) < 0)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID());
							cDatabaseTCExeVerGroupParameters.ShowError(szMessage);
							delete pDatabaseTCExeVerGroupParameter;
							break;
						}
						if (nIndex < 0)
						{
							if ((pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt((nIndex = pDatabase->GetTMPackets()->Find(pDatabaseTCExeVerGroupParameter->GetEventIDPacket())))))
							{
								for (szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETER_FOREIGNPARAMETER), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID(), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetTag(), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetEventIDPacket()); pDatabaseTMPacket->Find(pDatabaseTCExeVerGroupParameter->GetTag()) < 0; )
								{
									cDatabaseTCExeVerGroupParameters.ShowError(szMessage);
									break;
								}
								if (((pDatabaseTCExeVerGroupParameter->GetAttributes() & TCEXEVERGROUPPARAMETER_TYPE_STATUS) && pDatabaseTMPacket->GetTMType() != TMPACKET_TMTYPE_CYCLIC  &&  pDatabaseTMPacket->GetTMType() != TMPACKET_TMTYPE_OVERSAMPLED) || ((pDatabaseTCExeVerGroupParameter->GetAttributes() & TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION) && pDatabaseTMPacket->GetTMType() != TMPACKET_TMTYPE_EXCEPTION) || ((pDatabaseTCExeVerGroupParameter->GetAttributes() & TCEXEVERGROUPPARAMETER_TYPE_REPORT) && pDatabaseTMPacket->GetTMType() != TMPACKET_TMTYPE_REPORT) || ((pDatabaseTCExeVerGroupParameter->GetAttributes() & TCEXEVERGROUPPARAMETER_TYPE_DUMP) && pDatabaseTMPacket->GetTMType() != TMPACKET_TMTYPE_DUMP))
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETER_DIFFERENTTYPE), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID(), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetTag(), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetEventIDPacket());
									cDatabaseTCExeVerGroupParameters.ShowError(szMessage);
								}
								pDatabaseTCExeVerGroupParameter->SetEventIDPacketRef(nIndex);
							}
							else
							{
								if (pDatabaseTCExeVerGroupParameter->GetEventIDPacket().GetLength() > 0)
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETER_ILLEGALEVENTID), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID(), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetTag());
									cDatabaseTCExeVerGroupParameters.ShowError(szMessage);
								}
							}
							if (pDatabaseTCExeVerGroupParameter->GetAttributes() & TCEXEVERGROUPPARAMETER_INTERPRETATION_RAW)
							{
								for (pDatabaseTCExeVerGroupParameter->SetValue(TranslateTCExeVerGroupParameterConstValue((nAttributes = (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_NATURE_CONSTANT), pDatabaseTCExeVerGroupParameter->GetValueAsText())); !CheckTCExeVerGroupParameterConstValue(nAttributes, pDatabaseTCExeVerGroupParameter->GetValueAsText()); )
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETER_ILLEGALVALUE), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID(), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetTag());
									cDatabaseTCExeVerGroupParameters.ShowError(szMessage);
									break;
								}
							}
							if (pDatabaseTCExeVerGroupParameter->GetAttributes() & TCEXEVERGROUPPARAMETER_INTERPRETATION_CALIBRATED)
							{
								if (pDatabaseTMParameter->GetCalTables(szTables[0], szTables[1]) == 1)
								{
									if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)
									{
										if ((pDatabaseTMNumCalTable = pDatabase->GetTMNumCalTables()->GetAt(pDatabase->GetTMNumCalTables()->Find(szTables[0].GetAt(szTables[0].GetUpperBound())))))
										{
											for (nPoint = 0, nPoints = (INT)pDatabaseTMNumCalTable->GetSize() - 1, fValue[0] = TranslateTCExeVerGroupParameterConstValue((nAttributes = (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_CODING_TEXTSTRING | TMPARAMETER_CODING_TIME | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_NATURE_CONSTANT), pDatabaseTCExeVerGroupParameter->GetValueAsText()); nPoint < nPoints; nPoint++)
											{
												if ((pDatabaseTMNumCalPoint[0] = pDatabaseTMNumCalTable->GetAt(nPoint)))
												{
													if ((pDatabaseTMNumCalPoint[1] = pDatabaseTMNumCalTable->GetAt(nPoint + 1)))
													{
														if ((fValue[0] >= pDatabaseTMNumCalPoint[0]->GetY() && fValue[0] <= pDatabaseTMNumCalPoint[1]->GetY()) || (fValue[0] <= pDatabaseTMNumCalPoint[0]->GetY() && fValue[0] >= pDatabaseTMNumCalPoint[1]->GetY())) break;
														continue;
													}
												}
											}
											if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_INTERPRETATION_FULL) && nPoint == nPoints  &&  nPoints > 0)
											{
												szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCEXEVERGROUPPARAMETER_OUTSIDEVALUE), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID(), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetTag());
												cDatabaseTCExeVerGroupParameters.ShowWarning(szMessage);
											}
										}
									}
									if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS)
									{
										if ((pDatabaseTMTxtCalTable = pDatabase->GetTMTxtCalTables()->GetAt(pDatabase->GetTMTxtCalTables()->Find(szTables[0].GetAt(szTables[0].GetUpperBound())))))
										{
											for (nPoint = 0, nPoints = (!pDatabaseTCExeVerGroupParameter->GetValueAsText().IsEmpty()) ? (INT)pDatabaseTMTxtCalTable->GetSize() : 0; nPoint < nPoints; nPoint++)
											{
												if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt(nPoint)) && ((pDatabaseTMTxtCalPoint->GetRange(fValue[0], fValue[1], szValue) || pDatabaseTMTxtCalPoint->GetPoint(fValue[0], szValue)) && pDatabaseTCExeVerGroupParameter->GetValueAsText() == szValue)) break;
												continue;
											}
											if (nPoint == nPoints  &&  nPoints > 0)
											{
												szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETER_MISSINGPARAMETERCALIBRATIONVALUE), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID(), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetTag(), (LPCTSTR)pDatabaseTCExeVerGroupParameter->GetValueAsText(), (LPCTSTR)pDatabaseTMTxtCalTable->GetName());
												cDatabaseTCExeVerGroupParameters.ShowError(szMessage);
											}
										}
									}
								}
								else
								{
									for (szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETER_MISSINGPARAMETERCALIBRATION), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID(), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetTag()); !szTables[0].GetSize(); )
									{
										cDatabaseTCExeVerGroupParameters.ShowError(szMessage);
										break;
									}
									for (szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETER_TOOMANYPARAMETERCALIBRATION), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID(), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetTag()); szTables[0].GetSize() > 1; )
									{
										cDatabaseTCExeVerGroupParameters.ShowError(szMessage);
										break;
									}
								}
							}
							if (pDatabaseTCExeVerGroupParameter->GetAttributes() & TCEXEVERGROUPPARAMETER_INTERPRETATION_ECHOED)
							{
								if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_FLAG_CONSISTENCYCHECKS) == 0)
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETER_ILLEGALTAG), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID(), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetTag());
									cDatabaseTCExeVerGroupParameters.ShowError(szMessage);
								}
								if ((pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(pDatabase->GetTCParameters()->Find(pDatabaseTCExeVerGroupParameter->GetValueAsText()))) && (((pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_UNSIGNEDINTEGER)) && (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER))) || ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER)) || ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)) || ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_TEXTSTRING) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING)) || ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_ABSOLUTETIME) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_ABSOLUTETIME)) || ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_RELATIVETIME) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_RELATIVETIME))))
								{
									pDatabaseTCExeVerGroupParameter->SetValue(0.0);
									pDatabaseTCExeVerGroupParameter->SetValueTolerance(0.0);
								}
								else
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETER_ILLEGALVALUE), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID(), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetTag());
									cDatabaseTCExeVerGroupParameters.ShowError(szMessage);
								}
							}
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETER_ILLEGALSTAGE), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID(), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetTag());
							cDatabaseTCExeVerGroupParameters.ShowError(szMessage);
							delete pDatabaseTCExeVerGroupParameter;
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID());
						cDatabaseTCExeVerGroupParameters.ShowError(szMessage);
						break;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETER_UNDEFINEDPARAMETER), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID(), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetTag());
					cDatabaseTCExeVerGroupParameters.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCExeVerGroupParameters);
			}
			else
			{
				if (pDatabase->GetTCExeVerGroups()->GetSize() > 0 || !cDatabaseTCExeVerGroupParameters.GetID().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETER_UNDEFINEDID), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID(), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetTag());
					cDatabaseTCExeVerGroupParameters.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCExeVerGroupParameters);
			}
			try
			{
				cDatabaseTCExeVerGroupParameters.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETERS_READ_FAILURE));
				cDatabaseTCExeVerGroupParameters.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCExeVerGroupParameters.GetID());
				cDatabaseTCExeVerGroupParameters.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nGroup = 0, nGroups = (INT)pDatabase->GetTCExeVerGroups()->GetSize(); nGroup < nGroups; nGroup++)
		{
			if ((pDatabaseTCExeVerGroup = pDatabase->GetTCExeVerGroups()->GetAt(nGroup)) && pDatabaseTCExeVerGroup->GetStages() != pDatabaseTCExeVerGroup->GetSize())
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUP_ILLEGALSTAGES), (LPCTSTR)pDatabaseTCExeVerGroup->GetID());
				cDatabaseTCExeVerGroups.ShowError(pDatabaseTCExeVerGroup->GetID(), szMessage);
			}
		}
		ShowCompileMessages(&cDatabaseTCExeVerGroupParameters);
		ShowCompileMessages(&cDatabaseTCExeVerGroups);
		cDatabaseTCExeVerGroupParameters.Close();
	}
	else
	{
		cDatabaseTCExeVerGroupParameters.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCEXEVERGROUPPARAMETERS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCExeVerGroupParameters);
	}
}

VOID CALTELDatabaseEngine::CompileTCParameterSets(CBinaryDatabase *pDatabase)
{
	INT  nSet;
	INT  nSets;
	INT  nIndex;
	INT  nItem[2];
	INT  nItems[2];
	CString  szMessage;
	ULONGLONG  nConstValue;
	CStringArray  szParameterSets;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement[2];
	CALTELDatabaseTCParameterSetsRecordset  cDatabaseTCParameterSets(this);
	CALTELDatabaseTCParameterSetItemsRecordset  cDatabaseTCParameterSetItems(this);
	CALTELDatabaseTCParameterSetAssociationsRecordset  cDatabaseTCParameterSetAssociations(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCPARAMETERSETS));
	try
	{
		cDatabaseTCParameterSets.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CPS_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCParameterSets.IsOpen())
	{
		for (pDatabase->GetTCParameterSets()->RemoveAll(); !cDatabaseTCParameterSets.IsBOF() && !cDatabaseTCParameterSets.IsEOF() && IsCompiling(); )
		{
			if ((cDatabaseTCParameterSets.GetStatus() & TCPARAMETERSET_RECORDSTATUS_DEFAULT) >= TCPARAMETERSET_RECORDSTATUS_NONE)
			{
				if ((pDatabaseTCParameterSet = new CDatabaseTCParameterSet))
				{
					pDatabaseTCParameterSet->SetName(cDatabaseTCParameterSets.GetName());
					pDatabaseTCParameterSet->SetDescription(cDatabaseTCParameterSets.GetDescription());
					pDatabaseTCParameterSet->SetStatus(cDatabaseTCParameterSets.GetStatus());
					if (pDatabase->GetTCParameterSets()->Find(cDatabaseTCParameterSets.GetName()) < 0)
					{
						if ((nIndex = pDatabase->GetTCParameterSets()->Add(pDatabaseTCParameterSet)) < 0)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSET_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCParameterSets.GetName());
							cDatabaseTCParameterSets.ShowError(szMessage);
							delete pDatabaseTCParameterSet;
							break;
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSET_DUPLICATENAME), (LPCTSTR)cDatabaseTCParameterSets.GetName());
						cDatabaseTCParameterSets.ShowError(szMessage);
						delete pDatabaseTCParameterSet;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSET_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCParameterSets.GetName());
					cDatabaseTCParameterSets.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTCParameterSets);
			}
			try
			{
				cDatabaseTCParameterSets.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETS_READ_FAILURE));
				cDatabaseTCParameterSets.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSET_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCParameterSets.GetName());
				cDatabaseTCParameterSets.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTCParameterSets);
		cDatabaseTCParameterSets.Close();
	}
	else
	{
		cDatabaseTCParameterSets.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCParameterSets);
	}
	try
	{
		cDatabaseTCParameterSetItems.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CPSP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCParameterSetItems.IsOpen())
	{
		while (!cDatabaseTCParameterSetItems.IsBOF() && !cDatabaseTCParameterSetItems.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTCParameterSet = pDatabase->GetTCParameterSets()->GetAt(pDatabase->GetTCParameterSets()->Find(cDatabaseTCParameterSetItems.GetParameterSet()))))
			{
				if ((pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(pDatabase->GetTCParameters()->Find(cDatabaseTCParameterSetItems.GetName()))))
				{
					if ((pDatabaseTCFunctionElement[0] = new CDatabaseTCFunctionElement))
					{
						pDatabaseTCFunctionElement[0]->SetName(cDatabaseTCParameterSetItems.GetName());
						pDatabaseTCFunctionElement[0]->SetDescription(pDatabaseTCParameter->GetDescription());
						pDatabaseTCFunctionElement[0]->SetAttributes(cDatabaseTCParameterSetItems.GetAttributes());
						pDatabaseTCFunctionElement[0]->SetBytePos(cDatabaseTCParameterSetItems.GetBitOffset() / 8);
						pDatabaseTCFunctionElement[0]->SetBitPos(cDatabaseTCParameterSetItems.GetBitOffset() % 8);
						pDatabaseTCFunctionElement[0]->SetWidth(pDatabaseTCParameter->GetWidth());
						pDatabaseTCFunctionElement[0]->SetConstValueAsText(cDatabaseTCParameterSetItems.GetConstValue());
						pDatabaseTCFunctionElement[0]->SetRef(pDatabase->GetTCParameters()->Find(cDatabaseTCParameterSetItems.GetName()));
						if ((nIndex = pDatabaseTCParameterSet->Find(pDatabaseTCFunctionElement[0]->GetName(), pDatabaseTCFunctionElement[0]->GetBytePos(), pDatabaseTCFunctionElement[0]->GetBitPos())) < 0 && pDatabaseTCParameterSet->Add(pDatabaseTCFunctionElement[0]) < 0)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETITEM_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCParameterSetItems.GetParameterSet(), (LPCTSTR)cDatabaseTCParameterSetItems.GetName());
							cDatabaseTCParameterSetItems.ShowError(szMessage);
							delete pDatabaseTCFunctionElement[0];
							break;
						}
						if (nIndex < 0)
						{
							for (pDatabaseTCFunctionElement[0]->SetAttributes(((!CheckTCParameterSetItemConstTimeType(pDatabaseTCFunctionElement[0]->GetName())) ? (pDatabaseTCFunctionElement[0]->GetAttributes() | (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT))) : (pDatabaseTCFunctionElement[0]->GetAttributes() | TCPARAMETER_CODING_TIME)) | ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) ? (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) : 0)); !pDatabaseTCFunctionElement[0]->GetConstValueAsText().IsEmpty(); )
							{
								if (!ConvertTCParameterConstValue(pDatabaseTCFunctionElement[0]->GetName(), pDatabaseTCFunctionElement[0]->GetAttributes(), pDatabaseTCFunctionElement[0]->GetConstValueAsText(), nConstValue))
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETITEM_ILLEGALCONSTVALUE), (LPCTSTR)cDatabaseTCParameterSetItems.GetParameterSet(), (LPCTSTR)cDatabaseTCParameterSetItems.GetName());
									cDatabaseTCParameterSetItems.ShowError(szMessage);
								}
								else if (pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_TIME)
								{
									if (TranslateTCParameterSetItemConstTime(pDatabaseTCFunctionElement[0]->GetAttributes(), pDatabaseTCFunctionElement[0]->GetConstValueAsText()).GetTimeInSeconds() < CTime::GetCurrentTime().GetTime())
									{
										szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCPARAMETERSETITEM_EXPIREDTIME), (LPCTSTR)cDatabaseTCParameterSetItems.GetParameterSet(), (LPCTSTR)cDatabaseTCParameterSetItems.GetName());
										cDatabaseTCParameterSetItems.ShowWarning(szMessage);
									}
								}
								pDatabaseTCFunctionElement[0]->SetConstValue(nConstValue);
								break;
							}
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETITEM_DUPLICATEPARAMETERTAG), (LPCTSTR)cDatabaseTCParameterSetItems.GetParameterSet(), (LPCTSTR)cDatabaseTCParameterSetItems.GetName());
							cDatabaseTCParameterSetItems.ShowError(szMessage);
							delete pDatabaseTCFunctionElement[0];
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETITEM_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCParameterSetItems.GetParameterSet(), (LPCTSTR)cDatabaseTCParameterSetItems.GetName());
						cDatabaseTCParameterSetItems.ShowError(szMessage);
						break;
					}
				}
				else
				{
					if (pDatabase->GetTCParameters()->GetSize() > 0 || !cDatabaseTCParameterSetItems.GetName().IsEmpty())
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETITEM_UNDEFINEDPARAMETERTAG), (LPCTSTR)cDatabaseTCParameterSetItems.GetParameterSet(), (LPCTSTR)cDatabaseTCParameterSetItems.GetName());
						cDatabaseTCParameterSetItems.ShowError(szMessage);
					}
				}
				ShowCompileMessages(&cDatabaseTCParameterSetItems);
			}
			else
			{
				if (pDatabase->GetTCParameterSets()->GetSize() > 0 || !cDatabaseTCParameterSetItems.GetParameterSet().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETITEM_UNDEFINEDSETNAME), (LPCTSTR)cDatabaseTCParameterSetItems.GetParameterSet(), (LPCTSTR)cDatabaseTCParameterSetItems.GetName());
					cDatabaseTCParameterSetItems.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCParameterSetItems);
			}
			try
			{
				cDatabaseTCParameterSetItems.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETITEMS_READ_FAILURE));
				cDatabaseTCParameterSetItems.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETITEM_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCParameterSetItems.GetParameterSet(), (LPCTSTR)cDatabaseTCParameterSetItems.GetName());
				cDatabaseTCParameterSetItems.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nSet = 0, nSets = (INT)pDatabase->GetTCParameterSets()->GetSize(); nSet < nSets; nSet++)
		{
			if ((pDatabaseTCParameterSet = pDatabase->GetTCParameterSets()->GetAt(nSet)))
			{
				for (nItem[0] = 0, nItems[0] = (INT)pDatabaseTCParameterSet->GetSize(); nItem[0] < nItems[0]; nItem[0]++)
				{
					if ((pDatabaseTCFunctionElement[0] = pDatabaseTCParameterSet->GetAt(nItem[0])))
					{
						for (nItem[1] = nItem[0] + 1, nItems[1] = nItems[0]; nItem[1] < nItems[1]; nItem[1]++)
						{
							if ((pDatabaseTCFunctionElement[1] = pDatabaseTCParameterSet->GetAt(nItem[1])))
							{
								if (8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos() >= 8 * pDatabaseTCFunctionElement[1]->GetBytePos() + pDatabaseTCFunctionElement[1]->GetBitPos() && 8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos() < 8 * pDatabaseTCFunctionElement[1]->GetBytePos() + pDatabaseTCFunctionElement[1]->GetBitPos() + pDatabaseTCFunctionElement[1]->GetWidth())
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETITEM_OVERLAPPINGVALUE), (LPCTSTR)pDatabaseTCParameterSet->GetName(), (LPCTSTR)pDatabaseTCFunctionElement[0]->GetName(), (LPCTSTR)pDatabaseTCFunctionElement[1]->GetName());
									cDatabaseTCParameterSetItems.ShowError(pDatabaseTCParameterSet->GetName(), szMessage);
									continue;
								}
								if (8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos() + pDatabaseTCFunctionElement[0]->GetWidth() > 8 * pDatabaseTCFunctionElement[1]->GetBytePos() + pDatabaseTCFunctionElement[1]->GetBitPos() && 8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos() + pDatabaseTCFunctionElement[0]->GetWidth() <= 8 * pDatabaseTCFunctionElement[1]->GetBytePos() + pDatabaseTCFunctionElement[1]->GetBitPos() + pDatabaseTCFunctionElement[1]->GetWidth())
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETITEM_OVERLAPPINGVALUE), (LPCTSTR)pDatabaseTCParameterSet->GetName(), (LPCTSTR)pDatabaseTCFunctionElement[0]->GetName(), (LPCTSTR)pDatabaseTCFunctionElement[1]->GetName());
									cDatabaseTCParameterSetItems.ShowError(pDatabaseTCParameterSet->GetName(), szMessage);
									continue;
								}
							}
						}
					}
				}
			}
		}
		ShowCompileMessages(&cDatabaseTCParameterSetItems);
		cDatabaseTCParameterSetItems.Close();
	}
	else
	{
		cDatabaseTCParameterSetItems.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETITEMS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCParameterSetItems);
	}
	try
	{
		cDatabaseTCParameterSetAssociations.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PCPS_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCParameterSetAssociations.IsOpen())
	{
		while (!cDatabaseTCParameterSetAssociations.IsBOF() && !cDatabaseTCParameterSetAssociations.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTCParameterSet = pDatabase->GetTCParameterSets()->GetAt(pDatabase->GetTCParameterSets()->Find(cDatabaseTCParameterSetAssociations.GetName()))))
			{
				if ((pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(pDatabase->GetTCFunctions()->Find(cDatabaseTCParameterSetAssociations.GetFunction()))))
				{
					for (nSet = 0, nSets = pDatabaseTCFunction->GetParameterSets(szParameterSets); nSet < nSets; nSet++)
					{
						if (!szParameterSets.GetAt(nSet).CompareNoCase(pDatabaseTCParameterSet->GetName())) break;
						continue;
					}
					if (nSet == nSets)
					{
						szParameterSets.Add(pDatabaseTCParameterSet->GetName());
						pDatabaseTCFunction->SetParameterSets(szParameterSets);
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETASSOCIATION_DUPLICATESET), (LPCTSTR)cDatabaseTCParameterSetAssociations.GetName());
						cDatabaseTCParameterSetAssociations.ShowError(szMessage);
					}
				}
				else
				{
					if (pDatabase->GetTCFunctions()->GetSize() > 0 || !cDatabaseTCParameterSetAssociations.GetFunction().IsEmpty())
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETASSOCIATION_UNDEFINEDNAME), (LPCTSTR)cDatabaseTCParameterSetAssociations.GetName());
						cDatabaseTCParameterSetAssociations.ShowError(szMessage);
					}
				}
				ShowCompileMessages(&cDatabaseTCParameterSetAssociations);
			}
			else
			{
				if (pDatabase->GetTCParameterSets()->GetSize() > 0 || !cDatabaseTCParameterSetAssociations.GetName().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETASSOCIATION_UNDEFINEDSET), (LPCTSTR)cDatabaseTCParameterSetAssociations.GetName());
					cDatabaseTCParameterSetAssociations.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCParameterSetAssociations);
			}
			try
			{
				cDatabaseTCParameterSetAssociations.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETASSOCIATIONS_READ_FAILURE));
				cDatabaseTCParameterSetAssociations.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETASSOCIATION_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCParameterSetAssociations.GetName());
				cDatabaseTCParameterSetAssociations.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTCParameterSetAssociations);
		cDatabaseTCParameterSetAssociations.Close();
	}
	else
	{
		cDatabaseTCParameterSetAssociations.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETASSOCIATIONS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCParameterSetAssociations);
	}
}

VOID CALTELDatabaseEngine::CompileTCFunctionBlocks(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nBlock;
	INT  nBlocks;
	INT  nOffset;
	INT  nLength;
	CString  szMessage;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock;
	CALTELDatabaseTCFunctionBlocksRecordset  cDatabaseTCFunctionBlocks(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCFUNCTIONBLOCKS));
	try
	{
		cDatabaseTCFunctionBlocks.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_BCF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCFunctionBlocks.IsOpen())
	{
		for (pDatabase->GetTCFunctionBlocks()->RemoveAll(); !cDatabaseTCFunctionBlocks.IsBOF() && !cDatabaseTCFunctionBlocks.IsEOF() && IsCompiling(); )
		{
			if ((pDatabaseTCFunctionBlock = pDatabase->GetTCFunctionBlocks()->GetAt(pDatabase->GetTCFunctionBlocks()->Find(cDatabaseTCFunctionBlocks.GetName()))))
			{
				if ((pDatabaseTCFunctionBlock->GetAttributes() & cDatabaseTCFunctionBlocks.GetAttributes()) != cDatabaseTCFunctionBlocks.GetAttributes())
				{
					if (!pDatabaseTCFunctionBlock->SetLocation(cDatabaseTCFunctionBlocks.GetAttributes(), cDatabaseTCFunctionBlocks.GetByteOffset(), cDatabaseTCFunctionBlocks.GetMaxLength()))
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCK_ILLEGALINTERPRETATION), (LPCTSTR)cDatabaseTCFunctionBlocks.GetName(), (LPCTSTR)TranslateTCFunctionBlockInterpretation(cDatabaseTCFunctionBlocks.GetAttributes()));
						cDatabaseTCFunctionBlocks.ShowError(szMessage);
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCK_DUPLICATEINTERPRETATION), (LPCTSTR)cDatabaseTCFunctionBlocks.GetName(), (LPCTSTR)TranslateTCFunctionBlockInterpretation(cDatabaseTCFunctionBlocks.GetAttributes()));
					cDatabaseTCFunctionBlocks.ShowError(szMessage);
				}
			}
			else
			{
				if ((pDatabaseTCFunctionBlock = new CDatabaseTCFunctionBlock))
				{
					if ((cDatabaseTCFunctionBlocks.GetStatus() & TCFUNCTIONBLOCK_RECORDSTATUS_DEFAULT) >= TCFUNCTIONBLOCK_RECORDSTATUS_NONE)
					{
						if ((pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(pDatabase->GetTCFunctions()->Find(cDatabaseTCFunctionBlocks.GetName()))))
						{
							for (pDatabaseTCFunctionBlock->SetName(cDatabaseTCFunctionBlocks.GetName()), pDatabaseTCFunctionBlock->SetLocation(cDatabaseTCFunctionBlocks.GetAttributes(), cDatabaseTCFunctionBlocks.GetByteOffset(), cDatabaseTCFunctionBlocks.GetMaxLength()), pDatabaseTCFunctionBlock->SetStatus(cDatabaseTCFunctionBlocks.GetStatus()); (nIndex = pDatabase->GetTCFunctionBlocks()->Add(pDatabaseTCFunctionBlock)) < 0; )
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCK_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCFunctionBlocks.GetName(), (LPCTSTR)TranslateTCFunctionBlockInterpretation(cDatabaseTCFunctionBlocks.GetAttributes()));
								cDatabaseTCFunctionBlocks.ShowError(szMessage);
								break;
							}
							if (nIndex < 0)
							{
								delete pDatabaseTCFunctionBlock;
								break;
							}
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCK_UNDEFINEDFUNCTIONNAME), (LPCTSTR)cDatabaseTCFunctionBlocks.GetName(), (LPCTSTR)TranslateTCFunctionBlockInterpretation(cDatabaseTCFunctionBlocks.GetAttributes()));
							cDatabaseTCFunctionBlocks.ShowError(szMessage);
							delete pDatabaseTCFunctionBlock;
						}
					}
					else  delete pDatabaseTCFunctionBlock;
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCK_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCFunctionBlocks.GetName(), (LPCTSTR)TranslateTCFunctionBlockInterpretation(cDatabaseTCFunctionBlocks.GetAttributes()));
					cDatabaseTCFunctionBlocks.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCFunctionBlocks);
			}
			try
			{
				cDatabaseTCFunctionBlocks.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCKS_READ_FAILURE));
				cDatabaseTCFunctionBlocks.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCK_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCFunctionBlocks.GetName(), (LPCTSTR)TranslateTCFunctionBlockInterpretation(cDatabaseTCFunctionBlocks.GetAttributes()));
				cDatabaseTCFunctionBlocks.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nBlock = 0, nBlocks = (INT)pDatabase->GetTCFunctionBlocks()->GetSize(); nBlock < nBlocks; nBlock++)
		{
			if ((pDatabaseTCFunctionBlock = pDatabase->GetTCFunctionBlocks()->GetAt(nBlock)) != (CDatabaseTCFunctionBlock *)NULL)
			{
				if ((!pDatabaseTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_LI, nOffset, nLength) || !pDatabaseTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_LTT, nOffset, nLength) || !pDatabaseTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_L2S, nOffset, nLength)) && (!pDatabaseTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_NI, nOffset, nLength) || !pDatabaseTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_NTT, nOffset, nLength) || !pDatabaseTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_N2S, nOffset, nLength)))
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCK_MISSINGINTERPRETATION), (LPCTSTR)pDatabaseTCFunctionBlock->GetName());
					cDatabaseTCFunctionBlocks.ShowError(pDatabaseTCFunctionBlock->GetName(), szMessage);
				}
			}
		}
		ShowCompileMessages(&cDatabaseTCFunctionBlocks);
		cDatabaseTCFunctionBlocks.Close();
	}
	else
	{
		cDatabaseTCFunctionBlocks.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCKS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCFunctionBlocks);
	}
}

VOID CALTELDatabaseEngine::CompileTMPacketParameters(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nPacket;
	INT  nPackets;
	INT  nSubTag;
	INT  nSubTags;
	INT  nSubTagRef;
	INT  nParameter;
	INT  nParameters;
	INT  nOccurrence;
	INT  nOccurrences;
	INT  nPosition[2];
	CString  szMessage;
	CUIntArray  nSubTagRefs[2];
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTMParameter  *pDatabaseTMParameter[2];
	CDatabaseTMPacketParameter  *pDatabaseTMPacketParameter;
	CALTELDatabaseTMPacketsRecordset  cDatabaseTMPackets(this);
	CALTELDatabaseTMParametersRecordset  cDatabaseTMParameters(this);
	CALTELDatabaseTMPacketParametersRecordset  cDatabaseTMPacketParameters(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TMPACKETPARAMETERS));
	try
	{
		cDatabaseTMPacketParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PLF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTMPacketParameters.IsOpen())
	{
		for (nPacket = 0, nPackets = (INT)pDatabase->GetTMPackets()->GetSize(); nPacket < nPackets; nPacket++)
		{
			if ((pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt(nPacket)))
			{
				pDatabaseTMPacket->RemoveAll();
				continue;
			}
		}
		for (nParameter = 0, nParameters = (INT)pDatabase->GetTMParameters()->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTMParameter[0] = pDatabase->GetTMParameters()->GetAt(nParameter)) && pDatabaseTMParameter[0]->GetSubTagRefs(nSubTagRefs[0]) > 0)
			{
				pDatabaseTMParameter[0]->SetSubTagRefs(nSubTagRefs[1]);
				continue;
			}
		}
		while (!cDatabaseTMPacketParameters.IsBOF() && !cDatabaseTMPacketParameters.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt(pDatabase->GetTMPackets()->Find(cDatabaseTMPacketParameters.GetPacket()))))
			{
				if ((pDatabaseTMParameter[0] = pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(cDatabaseTMPacketParameters.GetTag()))))
				{
					for (nOccurrence = 0, nOccurrences = cDatabaseTMPacketParameters.GetOccurrenceCount(); nOccurrence < nOccurrences; nOccurrence++)
					{
						if ((pDatabaseTMPacketParameter = new CDatabaseTMPacketParameter))
						{
							pDatabaseTMPacketParameter->SetTag(cDatabaseTMPacketParameters.GetTag());
							pDatabaseTMPacketParameter->SetWidth(pDatabaseTMParameter[0]->GetWidth());
							pDatabaseTMPacketParameter->SetOccurrence(nOccurrence);
							pDatabaseTMPacketParameter->SetOccurrenceCount(nOccurrences);
							pDatabaseTMPacketParameter->SetOccurrenceInterval(cDatabaseTMPacketParameters.GetOccurrenceInterval());
							pDatabaseTMPacketParameter->SetBytePos((8 * cDatabaseTMPacketParameters.GetBytePos() + cDatabaseTMPacketParameters.GetBitPos() + nOccurrence*cDatabaseTMPacketParameters.GetOccurrenceInterval()) / 8);
							pDatabaseTMPacketParameter->SetBitPos((8 * cDatabaseTMPacketParameters.GetBytePos() + cDatabaseTMPacketParameters.GetBitPos() + nOccurrence*cDatabaseTMPacketParameters.GetOccurrenceInterval()) % 8);
							pDatabaseTMPacketParameter->SetValidityParameter(cDatabaseTMPacketParameters.GetValidityParameter());
							pDatabaseTMPacketParameter->SetRef(pDatabase->GetTMParameters()->Find(cDatabaseTMPacketParameters.GetTag()));
							if ((nIndex = pDatabaseTMPacket->Find(pDatabaseTMPacketParameter->GetTag(), pDatabaseTMPacketParameter->GetBytePos(), pDatabaseTMPacketParameter->GetBitPos())) < 0 && pDatabaseTMPacket->Add(pDatabaseTMPacketParameter) < 0)
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMPacketParameters.GetPacket(), (LPCTSTR)cDatabaseTMPacketParameters.GetTag());
								cDatabaseTMPacketParameters.ShowError(szMessage);
								delete pDatabaseTMPacketParameter;
								break;
							}
							if (nIndex < 0)
							{
								if ((pDatabaseTMParameter[1] = pDatabase->GetTMParameters()->GetAt((nIndex = pDatabase->GetTMParameters()->Find(cDatabaseTMPacketParameters.GetValidityParameter())))))
								{
									if (cDatabaseTMPacketParameters.GetTag() == cDatabaseTMPacketParameters.GetValidityParameter() || pDatabaseTMParameter[1]->GetWidth() != 1)
									{
										szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETER_ILLEGALVALIDITYPARAMETER), (LPCTSTR)cDatabaseTMPacketParameters.GetPacket(), (LPCTSTR)cDatabaseTMPacketParameters.GetTag());
										cDatabaseTMPacketParameters.ShowError(szMessage);
									}
									pDatabaseTMPacketParameter->SetValidityParameterRef(nIndex);
								}
								else
								{
									if (cDatabaseTMPacketParameters.GetValidityParameter().GetLength() > 0)
									{
										szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETER_ILLEGALVALIDITYPARAMETER), (LPCTSTR)cDatabaseTMPacketParameters.GetPacket(), (LPCTSTR)cDatabaseTMPacketParameters.GetTag());
										cDatabaseTMPacketParameters.ShowError(szMessage);
									}
								}
								if (8 * cDatabaseTMPacketParameters.GetBytePos() + cDatabaseTMPacketParameters.GetBitPos() + nOccurrence*cDatabaseTMPacketParameters.GetOccurrenceInterval() + pDatabaseTMParameter[0]->GetWidth() > 8 * (pDatabaseTMPacket->GetDataSize() + 1))
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETER_ILLEGALPOSITION), (LPCTSTR)cDatabaseTMPacketParameters.GetPacket(), (LPCTSTR)cDatabaseTMPacketParameters.GetTag());
									cDatabaseTMPacketParameters.ShowError(szMessage);
								}
								if (cDatabaseTMPacketParameters.GetOccurrenceCount() > 1 && cDatabaseTMPacketParameters.GetOccurrenceInterval() < pDatabaseTMParameter[0]->GetWidth())
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETER_ILLEGALOCCURRENCEINTERVAL), (LPCTSTR)cDatabaseTMPacketParameters.GetPacket(), (LPCTSTR)cDatabaseTMPacketParameters.GetTag());
									cDatabaseTMPacketParameters.ShowError(szMessage);
								}
							}
							else
							{
								if (cDatabaseTMPacketParameters.GetOccurrenceInterval() > 0)
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETER_DUPLICATEPARAMETERTAG), (LPCTSTR)cDatabaseTMPacketParameters.GetPacket(), (LPCTSTR)cDatabaseTMPacketParameters.GetTag());
									cDatabaseTMPacketParameters.ShowError(szMessage);
								}
								else
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETER_ILLEGALOCCURRENCEINTERVAL), (LPCTSTR)cDatabaseTMPacketParameters.GetPacket(), (LPCTSTR)cDatabaseTMPacketParameters.GetTag());
									cDatabaseTMPacketParameters.ShowError(szMessage);
								}
								delete pDatabaseTMPacketParameter;
								nOccurrence = nOccurrences - 1;
							}
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMPacketParameters.GetPacket(), (LPCTSTR)cDatabaseTMPacketParameters.GetTag());
							cDatabaseTMPacketParameters.ShowError(szMessage);
							break;
						}
					}
					if (nOccurrence == nOccurrences)
					{
						if (cDatabaseTMPacketParameters.GetPacket() == GetTMPacketSubTag())
						{
							if ((nIndex = pDatabase->GetTMParameters()->Find(pDatabaseTMParameter[0]->GetRelatedParameter())) >= 0 && pDatabase->GetTMParameters()->GetAt(nIndex)->GetTag() != pDatabaseTMParameter[0]->GetTag() && pDatabase->GetTMParameters()->GetAt(nIndex)->GetWidth() == 16)
							{
								for (nSubTag = 0, nSubTags = pDatabase->GetTMParameters()->GetAt(nIndex)->GetSubTagRefs(nSubTagRefs[0]), nPosition[0] = ((pDatabaseTMPacketParameter = pDatabaseTMPacket->GetAt(pDatabaseTMPacket->Find(pDatabaseTMParameter[0]->GetTag())))) ? (8 * pDatabaseTMPacketParameter->GetBytePos() + pDatabaseTMPacketParameter->GetBitPos()) : -1; nSubTag < nSubTags && nPosition[0] >= 0; nSubTag++)
								{
									if (((nPosition[1] = ((pDatabaseTMPacketParameter = pDatabaseTMPacket->GetAt(pDatabaseTMPacket->Find(pDatabase->GetTMParameters()->GetAt(nSubTagRefs[0].GetAt(nSubTag))->GetTag())))) ? (8 * pDatabaseTMPacketParameter->GetBytePos() + pDatabaseTMPacketParameter->GetBitPos()) : -1) == nPosition[0] && pDatabaseTMParameter[0]->GetTag().Compare(pDatabase->GetTMParameters()->GetAt(nSubTagRefs[0].GetAt(nSubTag))->GetTag()) < 0) || nPosition[1] > nPosition[0])
									{
										nSubTagRefs[0].InsertAt(nSubTag, pDatabase->GetTMParameters()->Find(pDatabaseTMParameter[0]->GetTag()));
										break;
									}
								}
								if (nSubTag == nSubTags)
								{
									nSubTagRef = pDatabase->GetTMParameters()->Find(pDatabaseTMParameter[0]->GetTag());
									nSubTagRefs[0].Add(nSubTagRef);
								}
								pDatabase->GetTMParameters()->GetAt(nIndex)->SetSubTagRefs(nSubTagRefs[0]);
							}
							else
							{
								szMessage.Format((nIndex < 0 || pDatabase->GetTMParameters()->GetAt(nIndex)->GetTag() == pDatabaseTMParameter[0]->GetTag()) ? STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETER_ILLEGALSUBTAGPARAMETER) : STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETER_ILLEGALSUBTAGPARAMETERBITWIDTH), (LPCTSTR)cDatabaseTMPacketParameters.GetPacket(), (LPCTSTR)cDatabaseTMPacketParameters.GetTag());
								cDatabaseTMPacketParameters.ShowError(szMessage);
							}
						}
					}
				}
				else
				{
					if (pDatabase->GetTMParameters()->GetSize() > 0 || !cDatabaseTMPacketParameters.GetTag().IsEmpty())
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETER_UNDEFINEDPARAMETERTAG), (LPCTSTR)cDatabaseTMPacketParameters.GetPacket(), (LPCTSTR)cDatabaseTMPacketParameters.GetTag());
						cDatabaseTMPacketParameters.ShowError(szMessage);
					}
				}
				ShowCompileMessages(&cDatabaseTMPacketParameters);
			}
			else
			{
				if (pDatabase->GetTMPackets()->GetSize() > 0 || !cDatabaseTMPacketParameters.GetPacket().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETER_UNDEFINEDPACKETTAG), (LPCTSTR)cDatabaseTMPacketParameters.GetPacket(), (LPCTSTR)cDatabaseTMPacketParameters.GetTag());
					cDatabaseTMPacketParameters.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTMPacketParameters);
			}
			try
			{
				cDatabaseTMPacketParameters.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETERS_READ_FAILURE));
				cDatabaseTMPacketParameters.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTMPacketParameters.GetPacket(), (LPCTSTR)cDatabaseTMPacketParameters.GetTag());
				cDatabaseTMPacketParameters.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nPacket = 0, nPackets = (INT)pDatabase->GetTMPackets()->GetSize(); nPacket < nPackets; nPacket++)
		{
			if ((pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt(nPacket)) != (CDatabaseTMPacket *)NULL)
			{
				if ((pDatabaseTMParameter[0] = pDatabase->GetTMParameters()->GetAt((nIndex = pDatabase->GetTMParameters()->Find(pDatabaseTMPacket->GetEventIDParameter())))))
				{
					if (pDatabaseTMPacket->Find(pDatabaseTMParameter[0]->GetTag()) < 0 && pDatabaseTMPacket->Find(pDatabase->GetTMParameters()->GetAt(nIndex)->GetRelatedParameter()) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKET_ILLEGALEVENTIDLOCATION), (LPCTSTR)pDatabaseTMPacket->GetTag());
						cDatabaseTMPackets.ShowError(pDatabaseTMPacket->GetTag(), szMessage);
					}
					pDatabaseTMPacket->SetEventIDParameterRef(nIndex);
				}
				else
				{
					if (pDatabase->GetTMParameters()->GetSize() > 0 && !pDatabaseTMPacket->GetEventIDParameter().IsEmpty())
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKET_ILLEGALEVENTID), (LPCTSTR)pDatabaseTMPacket->GetTag());
						cDatabaseTMPackets.ShowError(pDatabaseTMPacket->GetTag(), szMessage);
					}
				}
				for (nParameter = 0, nParameters = (INT)pDatabaseTMPacket->GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTMPacketParameter = pDatabaseTMPacket->GetAt(nParameter)) && pDatabaseTMPacketParameter->GetValidityParameterRef() >= 0 && pDatabaseTMPacket->Find(pDatabase->GetTMParameters()->GetAt(pDatabaseTMPacketParameter->GetValidityParameterRef())->GetTag()) >= 0)
					{
						if ((pDatabaseTMParameter[0] = pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(pDatabaseTMPacketParameter->GetTag()))) != (CDatabaseTMParameter *)NULL)
						{
							if ((8 * pDatabaseTMPacketParameter->GetBytePos() + pDatabaseTMPacketParameter->GetBitPos() <= 8 * pDatabaseTMPacket->GetAt(pDatabaseTMPacket->Find(pDatabase->GetTMParameters()->GetAt(pDatabaseTMPacketParameter->GetValidityParameterRef())->GetTag()))->GetBytePos() + pDatabaseTMPacket->GetAt(pDatabaseTMPacket->Find(pDatabase->GetTMParameters()->GetAt(pDatabaseTMPacketParameter->GetValidityParameterRef())->GetTag()))->GetBitPos() && 8 * pDatabaseTMPacketParameter->GetBytePos() + pDatabaseTMPacketParameter->GetBitPos() + pDatabaseTMParameter[0]->GetWidth() >= 8 * pDatabaseTMPacket->GetAt(pDatabaseTMPacket->Find(pDatabase->GetTMParameters()->GetAt(pDatabaseTMPacketParameter->GetValidityParameterRef())->GetTag()))->GetBytePos() + pDatabaseTMPacket->GetAt(pDatabaseTMPacket->Find(pDatabase->GetTMParameters()->GetAt(pDatabaseTMPacketParameter->GetValidityParameterRef())->GetTag()))->GetBitPos()) || (8 * pDatabaseTMPacketParameter->GetBytePos() + pDatabaseTMPacketParameter->GetBitPos() <= 8 * pDatabaseTMPacket->GetAt(pDatabaseTMPacket->Find(pDatabase->GetTMParameters()->GetAt(pDatabaseTMPacketParameter->GetValidityParameterRef())->GetTag()))->GetBytePos() + pDatabaseTMPacket->GetAt(pDatabaseTMPacket->Find(pDatabase->GetTMParameters()->GetAt(pDatabaseTMPacketParameter->GetValidityParameterRef())->GetTag()))->GetBitPos() + pDatabase->GetTMParameters()->GetAt(pDatabaseTMPacketParameter->GetValidityParameterRef())->GetWidth() && 8 * pDatabaseTMPacketParameter->GetBytePos() + pDatabaseTMPacketParameter->GetBitPos() + pDatabaseTMParameter[0]->GetWidth() >= 8 * pDatabaseTMPacket->GetAt(pDatabaseTMPacket->Find(pDatabase->GetTMParameters()->GetAt(pDatabaseTMPacketParameter->GetValidityParameterRef())->GetTag()))->GetBytePos() + pDatabaseTMPacket->GetAt(pDatabaseTMPacket->Find(pDatabase->GetTMParameters()->GetAt(pDatabaseTMPacketParameter->GetValidityParameterRef())->GetTag()))->GetBitPos() + pDatabase->GetTMParameters()->GetAt(pDatabaseTMPacketParameter->GetValidityParameterRef())->GetWidth()))
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETER_OVERLAPPINGPARAMETER), (LPCTSTR)pDatabaseTMPacket->GetTag(), (LPCTSTR)pDatabaseTMPacketParameter->GetTag());
								cDatabaseTMPacketParameters.ShowError(pDatabaseTMPacket->GetTag(), szMessage);
							}
						}
					}
				}
				for (nParameter = 0, nParameters = (pDatabaseTMPacket->GetTag() == GetTMPacketSubTag()) ? (INT)pDatabaseTMPacket->GetSize() : 0; nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTMParameter[0] = ((pDatabaseTMPacketParameter = pDatabaseTMPacket->GetAt(nParameter))) ? pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(pDatabaseTMPacketParameter->GetTag())) : (CDatabaseTMParameter *)NULL))
					{
						pDatabaseTMParameter[0]->SetRelatedParameterRef(nParameter);
						continue;
					}
				}
			}
		}
		for (nParameter = 0, nParameters = (INT)pDatabase->GetTMParameters()->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTMParameter[0] = pDatabase->GetTMParameters()->GetAt(nParameter)) && (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_NATURE_RAW) && (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_OBS_MONITOR))
			{
				for (nPacket = 0, nPackets = (INT)pDatabase->GetTMPackets()->GetSize(); nPacket < nPackets; nPacket++)
				{
					if ((pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt(nPacket)) != (CDatabaseTMPacket *)NULL)
					{
						if (pDatabaseTMPacket->Find(pDatabaseTMParameter[0]->GetTag()) >= 0) break;
						continue;
					}
				}
				if (nPacket == nPackets)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TMPARAMETER_NOALLOCATION), (LPCTSTR)pDatabaseTMParameter[0]->GetTag());
					cDatabaseTMParameters.ShowWarning(pDatabaseTMParameter[0]->GetTag(), szMessage);
				}
			}
		}
		for (; (pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt((nIndex = pDatabase->GetTMPackets()->Find(GetTMPacketSubTag())))); )
		{
			pDatabase->GetTMPacketSubTags()->Copy(pDatabaseTMPacket);
			break;
		}
		ShowCompileMessages(&cDatabaseTMPacketParameters);
		ShowCompileMessages(&cDatabaseTMParameters);
		ShowCompileMessages(&cDatabaseTMPackets);
		cDatabaseTMPacketParameters.Close();
	}
	else
	{
		cDatabaseTMPacketParameters.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TMPACKETPARAMETERS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTMPacketParameters);
	}
}

VOID CALTELDatabaseEngine::CompileTCPacketParameters(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nPacket;
	INT  nPackets;
	INT  nParameter[2];
	INT  nParameters[2];
	CString  szMessage;
	ULONGLONG  nConstValue;
	CStringTools  cStringTools;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter[2];
	CALTELDatabaseTCPacketParametersRecordset  cDatabaseTCPacketParameters(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCPACKETPARAMETERS));
	try
	{
		cDatabaseTCPacketParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PCDF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCPacketParameters.IsOpen())
	{
		for (nPacket = 0, nPackets = (INT)pDatabase->GetTCPackets()->GetSize(); nPacket < nPackets; nPacket++)
		{
			if ((pDatabaseTCPacket = pDatabase->GetTCPackets()->GetAt(nPacket)))
			{
				pDatabaseTCPacket->RemoveAll();
				continue;
			}
		}
		while (!cDatabaseTCPacketParameters.IsBOF() && !cDatabaseTCPacketParameters.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTCPacket = pDatabase->GetTCPackets()->GetAt(pDatabase->GetTCPackets()->Find(cDatabaseTCPacketParameters.GetPacket()))))
			{
				for (; cDatabaseTCPacketParameters.GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE; )
				{
					if (pDatabase->GetTCParameters()->Find(cDatabaseTCPacketParameters.GetTag()) < 0)
					{
						if (cDatabaseTCPacketParameters.GetTag().GetLength() > 0)
						{
							if ((pDatabaseTCParameter = new CDatabaseTCParameter))
							{
								pDatabaseTCParameter->SetTag(cDatabaseTCPacketParameters.GetTag());
								pDatabaseTCParameter->SetDescription(cDatabaseTCPacketParameters.GetDescription());
								pDatabaseTCParameter->SetAttributes(cDatabaseTCPacketParameters.GetAttributes());
								pDatabaseTCParameter->SetWidth(cDatabaseTCPacketParameters.GetBitWidth());
								if (pDatabase->GetTCParameters()->Add(pDatabaseTCParameter) >= 0) break;
								delete pDatabaseTCParameter;
							}
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCPacketParameters.GetPacket(), (cDatabaseTCPacketParameters.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCPacketParameters.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
							cDatabaseTCPacketParameters.ShowError(szMessage);
						}
					}
					break;
				}
				if ((pDatabaseTCParameter = (cDatabaseTCPacketParameters.GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE) ? pDatabase->GetTCParameters()->GetAt(pDatabase->GetTCParameters()->Find(cDatabaseTCPacketParameters.GetTag())) : (CDatabaseTCParameter *)NULL) || ((cDatabaseTCPacketParameters.GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE) != TCPACKETPARAMETER_TYPE_VARIABLE  &&  cDatabaseTCPacketParameters.GetTag().IsEmpty()))
				{
					if ((pDatabaseTCPacketParameter[0] = new CDatabaseTCPacketParameter))
					{
						pDatabaseTCPacketParameter[0]->SetTag(cDatabaseTCPacketParameters.GetTag());
						pDatabaseTCPacketParameter[0]->SetDescription(cDatabaseTCPacketParameters.GetDescription());
						pDatabaseTCPacketParameter[0]->SetAttributes(cDatabaseTCPacketParameters.GetAttributes());
						pDatabaseTCPacketParameter[0]->SetBytePos(cDatabaseTCPacketParameters.GetBitOffset() / 8);
						pDatabaseTCPacketParameter[0]->SetBitPos(cDatabaseTCPacketParameters.GetBitOffset() % 8);
						pDatabaseTCPacketParameter[0]->SetWidth(cDatabaseTCPacketParameters.GetBitWidth());
						pDatabaseTCPacketParameter[0]->SetConstValueAsText(cDatabaseTCPacketParameters.GetConstValue());
						pDatabaseTCPacketParameter[0]->SetRef(pDatabase->GetTCParameters()->Find(cDatabaseTCPacketParameters.GetTag()));
						if ((nIndex = pDatabaseTCPacket->Find(pDatabaseTCPacketParameter[0]->GetTag(), pDatabaseTCPacketParameter[0]->GetBytePos(), pDatabaseTCPacketParameter[0]->GetBitPos())) < 0 && pDatabaseTCPacket->Add(pDatabaseTCPacketParameter[0]) < 0)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCPacketParameters.GetPacket(), (cDatabaseTCPacketParameters.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCPacketParameters.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
							cDatabaseTCPacketParameters.ShowError(szMessage);
							delete pDatabaseTCPacketParameter[0];
							break;
						}
						if (nIndex < 0)
						{
							if (pDatabaseTCPacketParameter[0]->GetAttributes() & TCPACKETPARAMETER_TYPE_FIXED)
							{
								for (pDatabaseTCPacketParameter[0]->SetAttributes((pDatabaseTCPacketParameter[0]->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) | TCPARAMETER_CODING_UNSIGNEDINTEGER); !ConvertTCParameterConstValue(pDatabaseTCPacketParameter[0]->GetTag(), pDatabaseTCPacketParameter[0]->GetAttributes(), pDatabaseTCPacketParameter[0]->GetConstValueAsText(), nConstValue); )
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_ILLEGALCONSTVALUE), (LPCTSTR)cDatabaseTCPacketParameters.GetPacket(), (cDatabaseTCPacketParameters.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCPacketParameters.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
									cDatabaseTCPacketParameters.ShowError(szMessage);
									break;
								}
								pDatabaseTCPacketParameter[0]->SetConstValue(nConstValue);
							}
							if (pDatabaseTCPacketParameter[0]->GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE)
							{
								for (pDatabaseTCPacketParameter[0]->SetAttributes((CheckTCPacketParameterConstTimeType(pDatabaseTCPacketParameter[0]->GetTag())) ? ((pDatabaseTCPacketParameter[0]->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) | TCPARAMETER_CODING_TIME) : pDatabaseTCPacketParameter[0]->GetAttributes()); !pDatabaseTCPacketParameter[0]->GetConstValueAsText().IsEmpty(); )
								{
									if (!ConvertTCParameterConstValue(pDatabaseTCPacketParameter[0]->GetTag(), pDatabaseTCPacketParameter[0]->GetAttributes(), pDatabaseTCPacketParameter[0]->GetConstValueAsText(), nConstValue))
									{
										szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_ILLEGALCONSTVALUE), (LPCTSTR)cDatabaseTCPacketParameters.GetPacket(), (cDatabaseTCPacketParameters.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCPacketParameters.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
										cDatabaseTCPacketParameters.ShowError(szMessage);
									}
									else if (pDatabaseTCPacketParameter[0]->GetAttributes() & TCPARAMETER_CODING_TIME)
									{
										if (TranslateTCPacketParameterConstTime(pDatabaseTCPacketParameter[0]->GetAttributes(), pDatabaseTCPacketParameter[0]->GetConstValueAsText()).GetTimeInSeconds() < CTime::GetCurrentTime().GetTime())
										{
											szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCPACKETPARAMETER_EXPIREDTIME), (LPCTSTR)cDatabaseTCPacketParameters.GetPacket(), (cDatabaseTCPacketParameters.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCPacketParameters.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
											cDatabaseTCPacketParameters.ShowWarning(szMessage);
										}
									}
									pDatabaseTCPacketParameter[0]->SetConstValue(nConstValue);
									break;
								}
							}
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_DUPLICATEPARAMETERTAG), (LPCTSTR)cDatabaseTCPacketParameters.GetPacket(), (cDatabaseTCPacketParameters.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCPacketParameters.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
							cDatabaseTCPacketParameters.ShowError(szMessage);
							delete pDatabaseTCPacketParameter[0];
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCPacketParameters.GetPacket(), (cDatabaseTCPacketParameters.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCPacketParameters.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
						cDatabaseTCPacketParameters.ShowError(szMessage);
						break;
					}
				}
				else
				{
					if (pDatabase->GetTCParameters()->GetSize() > 0 || !cDatabaseTCPacketParameters.GetTag().IsEmpty())
					{
						szMessage.Format(((cDatabaseTCPacketParameters.GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE) && !cDatabaseTCPacketParameters.GetTag().IsEmpty()) ? STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_UNDEFINEDPARAMETERTAG) : STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_ILLEGALTAG), (LPCTSTR)cDatabaseTCPacketParameters.GetPacket(), (cDatabaseTCPacketParameters.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCPacketParameters.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
						cDatabaseTCPacketParameters.ShowError(szMessage);
					}
				}
				ShowCompileMessages(&cDatabaseTCPacketParameters);
			}
			else
			{
				if (pDatabase->GetTCPackets()->GetSize() > 0 || !cDatabaseTCPacketParameters.GetPacket().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_UNDEFINEDPACKETNAME), (LPCTSTR)cDatabaseTCPacketParameters.GetPacket(), (cDatabaseTCPacketParameters.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCPacketParameters.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
					cDatabaseTCPacketParameters.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCPacketParameters);
			}
			try
			{
				cDatabaseTCPacketParameters.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETERS_READ_FAILURE));
				cDatabaseTCPacketParameters.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCPacketParameters.GetPacket(), (cDatabaseTCPacketParameters.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCPacketParameters.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
				cDatabaseTCPacketParameters.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nPacket = 0, nPackets = (INT)pDatabase->GetTCPackets()->GetSize(); nPacket < nPackets; nPacket++)
		{
			if ((pDatabaseTCPacket = pDatabase->GetTCPackets()->GetAt(nPacket)) != (CDatabaseTCPacket *)NULL)
			{
				for (nParameter[0] = 0, nParameters[0] = (INT)pDatabaseTCPacket->GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
				{
					if ((pDatabaseTCPacketParameter[0] = pDatabaseTCPacket->GetAt(nParameter[0])) != (CDatabaseTCPacketParameter *)NULL)
					{
						if (pDatabaseTCPacket->GetDataSize() > 0 && 8 * pDatabaseTCPacketParameter[0]->GetBytePos() + pDatabaseTCPacketParameter[0]->GetBitPos() + pDatabaseTCPacketParameter[0]->GetWidth() > 8 * (pDatabaseTCPacket->GetDataSize() + 1))
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_ILLEGALBITOFFSET), (LPCTSTR)pDatabaseTCPacket->GetTag(), (pDatabaseTCPacketParameter[0]->GetBytePos() >= 0 && pDatabaseTCPacketParameter[0]->GetBitPos() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(8 * pDatabaseTCPacketParameter[0]->GetBytePos() + pDatabaseTCPacketParameter[0]->GetBitPos()) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
							cDatabaseTCPacketParameters.ShowError(pDatabaseTCPacket->GetTag(), szMessage);
						}
						if ((pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(pDatabase->GetTCParameters()->Find(pDatabaseTCPacketParameter[0]->GetTag()))))
						{
							if ((pDatabaseTCPacketParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE))
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_ILLEGALFLAG), (LPCTSTR)pDatabaseTCPacket->GetTag(), (pDatabaseTCPacketParameter[0]->GetBytePos() >= 0 && pDatabaseTCPacketParameter[0]->GetBitPos() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(8 * pDatabaseTCPacketParameter[0]->GetBytePos() + pDatabaseTCPacketParameter[0]->GetBitPos()) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
								cDatabaseTCPacketParameters.ShowError(pDatabaseTCPacket->GetTag(), szMessage);
							}
							if ((pDatabaseTCPacketParameter[0]->GetAttributes() &  TCPARAMETER_CALIBRATION_NONE) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) && (pDatabaseTCPacketParameter[0]->GetAttributes() &  TCPARAMETER_RADIX_DECIMAL) != TCPARAMETER_RADIX_DECIMAL)
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_ILLEGALRADIX), (LPCTSTR)pDatabaseTCPacket->GetTag(), (pDatabaseTCPacketParameter[0]->GetBytePos() >= 0 && pDatabaseTCPacketParameter[0]->GetBitPos() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(8 * pDatabaseTCPacketParameter[0]->GetBytePos() + pDatabaseTCPacketParameter[0]->GetBitPos()) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
								cDatabaseTCPacketParameters.ShowError(pDatabaseTCPacket->GetTag(), szMessage);
							}
							if (pDatabaseTCParameter->GetWidth() != pDatabaseTCPacketParameter[0]->GetWidth())
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_ILLEGALBITWIDTH), (LPCTSTR)pDatabaseTCPacket->GetTag(), (pDatabaseTCPacketParameter[0]->GetBytePos() >= 0 && pDatabaseTCPacketParameter[0]->GetBitPos() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(8 * pDatabaseTCPacketParameter[0]->GetBytePos() + pDatabaseTCPacketParameter[0]->GetBitPos()) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
								cDatabaseTCPacketParameters.ShowError(pDatabaseTCPacket->GetTag(), szMessage);
							}
						}
						for (nParameter[1] = nParameter[0] + 1, nParameters[1] = nParameters[0]; nParameter[1] < nParameters[1]; nParameter[1]++)
						{
							if ((pDatabaseTCPacketParameter[1] = pDatabaseTCPacket->GetAt(nParameter[1])) != (CDatabaseTCPacketParameter *)NULL)
							{
								if (8 * pDatabaseTCPacketParameter[0]->GetBytePos() + pDatabaseTCPacketParameter[0]->GetBitPos() >= 8 * pDatabaseTCPacketParameter[1]->GetBytePos() + pDatabaseTCPacketParameter[1]->GetBitPos() && 8 * pDatabaseTCPacketParameter[0]->GetBytePos() + pDatabaseTCPacketParameter[0]->GetBitPos() < 8 * pDatabaseTCPacketParameter[1]->GetBytePos() + pDatabaseTCPacketParameter[1]->GetBitPos() + pDatabaseTCPacketParameter[1]->GetWidth())
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_OVERLAPPINGVALUE), (LPCTSTR)pDatabaseTCPacket->GetTag(), (pDatabaseTCPacketParameter[0]->GetBytePos() >= 0 && pDatabaseTCPacketParameter[0]->GetBitPos() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(8 * pDatabaseTCPacketParameter[0]->GetBytePos() + pDatabaseTCPacketParameter[0]->GetBitPos()) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
									cDatabaseTCPacketParameters.ShowError(pDatabaseTCPacket->GetTag(), szMessage);
								}
								if (8 * pDatabaseTCPacketParameter[0]->GetBytePos() + pDatabaseTCPacketParameter[0]->GetBitPos() + pDatabaseTCPacketParameter[0]->GetWidth() > 8 * pDatabaseTCPacketParameter[1]->GetBytePos() + pDatabaseTCPacketParameter[1]->GetBitPos() && 8 * pDatabaseTCPacketParameter[0]->GetBytePos() + pDatabaseTCPacketParameter[0]->GetBitPos() + pDatabaseTCPacketParameter[0]->GetWidth() <= 8 * pDatabaseTCPacketParameter[1]->GetBytePos() + pDatabaseTCPacketParameter[1]->GetBitPos() + pDatabaseTCPacketParameter[1]->GetWidth())
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETER_OVERLAPPINGVALUE), (LPCTSTR)pDatabaseTCPacket->GetTag(), (pDatabaseTCPacketParameter[0]->GetBytePos() >= 0 && pDatabaseTCPacketParameter[0]->GetBitPos() >= 0 && pDatabaseTCPacketParameter[0]->GetWidth() > 0) ? (LPCTSTR)cStringTools.ConvertIntToString(8 * pDatabaseTCPacketParameter[0]->GetBytePos() + pDatabaseTCPacketParameter[0]->GetBitPos() + pDatabaseTCPacketParameter[0]->GetWidth() - 1) : STRING(IDS_DATABASE_TABLE_PCDF_BITOFFSET_UNKNOWN));
									cDatabaseTCPacketParameters.ShowError(pDatabaseTCPacket->GetTag(), szMessage);
								}
							}
						}
					}
				}
			}
		}
		ShowCompileMessages(&cDatabaseTCPacketParameters);
		cDatabaseTCPacketParameters.Close();
	}
	else
	{
		cDatabaseTCPacketParameters.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCPACKETPARAMETERS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCPacketParameters);
	}
}

VOID CALTELDatabaseEngine::CompileTCFunctionElements(CBinaryDatabase *pDatabase)
{
	INT  nSet;
	INT  nSets;
	INT  nIndex;
	INT  nFunction;
	INT  nFunctions;
	INT  nParameter;
	INT  nParameters;
	INT  nElement[2];
	INT  nElements[2];
	CString  szMessage;
	ULONGLONG  nConstValue;
	CStringTools  cStringTools;
	CStringArray  szParameterSets;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement[2];
	CALTELDatabaseTCFunctionElementsRecordset  cDatabaseTCFunctionElements(this);
	CALTELDatabaseTCParameterSetItemsRecordset  cDatabaseTCParameterSetItems(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCFUNCTIONELEMENTS));
	try
	{
		cDatabaseTCFunctionElements.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CDF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCFunctionElements.IsOpen())
	{
		for (nFunction = 0, nFunctions = (INT)pDatabase->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
		{
			if ((pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(nFunction)))
			{
				pDatabaseTCFunction->RemoveAll();
				continue;
			}
		}
		while (!cDatabaseTCFunctionElements.IsBOF() && !cDatabaseTCFunctionElements.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(pDatabase->GetTCFunctions()->Find(cDatabaseTCFunctionElements.GetFunction()))))
			{
				if ((pDatabaseTCParameter = (cDatabaseTCFunctionElements.GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER) ? pDatabase->GetTCParameters()->GetAt(pDatabase->GetTCParameters()->Find(cDatabaseTCFunctionElements.GetName())) : (CDatabaseTCParameter *)NULL) || ((cDatabaseTCFunctionElements.GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER) != TCFUNCTIONELEMENT_TYPE_PARAMETER  &&  cDatabaseTCFunctionElements.GetName().IsEmpty()))
				{
					if ((pDatabaseTCFunctionElement[0] = new CDatabaseTCFunctionElement))
					{
						pDatabaseTCFunctionElement[0]->SetName(cDatabaseTCFunctionElements.GetName());
						pDatabaseTCFunctionElement[0]->SetDescription(cDatabaseTCFunctionElements.GetDescription());
						pDatabaseTCFunctionElement[0]->SetAttributes(cDatabaseTCFunctionElements.GetAttributes());
						pDatabaseTCFunctionElement[0]->SetBytePos(cDatabaseTCFunctionElements.GetBitOffset() / 8);
						pDatabaseTCFunctionElement[0]->SetBitPos(cDatabaseTCFunctionElements.GetBitOffset() % 8);
						pDatabaseTCFunctionElement[0]->SetWidth(cDatabaseTCFunctionElements.GetBitWidth());
						pDatabaseTCFunctionElement[0]->SetConstValueAsText(cDatabaseTCFunctionElements.GetConstValue());
						pDatabaseTCFunctionElement[0]->SetRef((cDatabaseTCFunctionElements.GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER) ? pDatabase->GetTCParameters()->Find(cDatabaseTCFunctionElements.GetName()) : -1);
						if ((nIndex = pDatabaseTCFunction->Find(pDatabaseTCFunctionElement[0]->GetName(), pDatabaseTCFunctionElement[0]->GetBytePos(), pDatabaseTCFunctionElement[0]->GetBitPos())) < 0 && pDatabaseTCFunction->Add(pDatabaseTCFunctionElement[0]) < 0)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCFunctionElements.GetFunction(), (cDatabaseTCFunctionElements.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCFunctionElements.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
							cDatabaseTCFunctionElements.ShowError(szMessage);
							delete pDatabaseTCFunctionElement[0];
							break;
						}
						if (nIndex < 0)
						{
							if (pDatabaseTCFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT)
							{
								for (pDatabaseTCFunctionElement[0]->SetAttributes(pDatabaseTCFunctionElement[0]->GetAttributes() | TCPARAMETER_CODING_UNSIGNEDINTEGER); !ConvertTCParameterConstValue(pDatabaseTCFunctionElement[0]->GetName(), pDatabaseTCFunctionElement[0]->GetAttributes(), pDatabaseTCFunctionElement[0]->GetConstValueAsText(), nConstValue); )
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_ILLEGALCONSTVALUE), (LPCTSTR)cDatabaseTCFunctionElements.GetFunction(), (cDatabaseTCFunctionElements.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCFunctionElements.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
									cDatabaseTCFunctionElements.ShowError(szMessage);
									break;
								}
								pDatabaseTCFunctionElement[0]->SetConstValue(nConstValue);
							}
							if ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER))
							{
								for (pDatabaseTCFunctionElement[0]->SetAttributes(((!CheckTCFunctionElementConstTimeType(pDatabaseTCFunctionElement[0]->GetName())) ? (pDatabaseTCFunctionElement[0]->GetAttributes() | (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT))) : (pDatabaseTCFunctionElement[0]->GetAttributes() | TCPARAMETER_CODING_TIME)) | ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) ? (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) : TCPARAMETER_CALIBRATION_NONE)); !pDatabaseTCFunctionElement[0]->GetConstValueAsText().IsEmpty(); )
								{
									if (!ConvertTCParameterConstValue(pDatabaseTCFunctionElement[0]->GetName(), pDatabaseTCFunctionElement[0]->GetAttributes(), pDatabaseTCFunctionElement[0]->GetConstValueAsText(), nConstValue))
									{
										szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_ILLEGALCONSTVALUE), (LPCTSTR)cDatabaseTCFunctionElements.GetFunction(), (cDatabaseTCFunctionElements.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCFunctionElements.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
										cDatabaseTCFunctionElements.ShowError(szMessage);
									}
									else if (pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_TIME)
									{
										if (TranslateTCFunctionElementConstTime(pDatabaseTCFunctionElement[0]->GetAttributes(), pDatabaseTCFunctionElement[0]->GetConstValueAsText()).GetTimeInSeconds() < CTime::GetCurrentTime().GetTime())
										{
											szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCFUNCTIONELEMENT_EXPIREDTIME), (LPCTSTR)cDatabaseTCFunctionElements.GetFunction(), (cDatabaseTCFunctionElements.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCFunctionElements.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
											cDatabaseTCFunctionElements.ShowWarning(szMessage);
										}
									}
									pDatabaseTCFunctionElement[0]->SetConstValue(nConstValue);
									break;
								}
							}
							if ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0)
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_ILLEGALFLAG), (LPCTSTR)cDatabaseTCFunctionElements.GetFunction(), (cDatabaseTCFunctionElements.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCFunctionElements.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
								cDatabaseTCFunctionElements.ShowError(szMessage);
							}
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_DUPLICATEPARAMETERTAG), (LPCTSTR)cDatabaseTCFunctionElements.GetFunction(), (cDatabaseTCFunctionElements.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCFunctionElements.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
							cDatabaseTCFunctionElements.ShowError(szMessage);
							delete pDatabaseTCFunctionElement[0];
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCFunctionElements.GetFunction(), (cDatabaseTCFunctionElements.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCFunctionElements.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
						cDatabaseTCFunctionElements.ShowError(szMessage);
						break;
					}
				}
				else
				{
					if (pDatabase->GetTCParameters()->GetSize() > 0 || !cDatabaseTCFunctionElements.GetName().IsEmpty())
					{
						szMessage.Format(((cDatabaseTCFunctionElements.GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER) && !cDatabaseTCFunctionElements.GetName().IsEmpty()) ? STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_UNDEFINEDPARAMETERTAG) : STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_ILLEGALNAME), (LPCTSTR)cDatabaseTCFunctionElements.GetFunction(), (cDatabaseTCFunctionElements.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCFunctionElements.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
						cDatabaseTCFunctionElements.ShowError(szMessage);
					}
				}
				ShowCompileMessages(&cDatabaseTCFunctionElements);
			}
			else
			{
				if (pDatabase->GetTCFunctions()->GetSize() > 0 || !cDatabaseTCFunctionElements.GetFunction().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_UNDEFINEDFUNCTIONNAME), (LPCTSTR)cDatabaseTCFunctionElements.GetFunction(), (cDatabaseTCFunctionElements.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCFunctionElements.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
					cDatabaseTCFunctionElements.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCFunctionElements);
			}
			try
			{
				cDatabaseTCFunctionElements.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENTS_READ_FAILURE));
				cDatabaseTCFunctionElements.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCFunctionElements.GetFunction(), (cDatabaseTCFunctionElements.GetBitOffset() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(cDatabaseTCFunctionElements.GetBitOffset()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
				cDatabaseTCFunctionElements.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nFunction = 0, nFunctions = (INT)pDatabase->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
		{
			if ((pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
			{
				for (nElement[0] = 0, nElements[0] = (INT)pDatabaseTCFunction->GetSize(); nElement[0] < nElements[0]; nElement[0]++)
				{
					if ((pDatabaseTCFunctionElement[0] = pDatabaseTCFunction->GetAt(nElement[0])) != (CDatabaseTCFunctionElement *)NULL)
					{
						if ((pDatabaseTCPacket = pDatabase->GetTCPackets()->GetAt(pDatabase->GetTCPackets()->Find(pDatabaseTCFunction->GetTCPacket()))))
						{
							if (pDatabaseTCPacket->GetDataSize() > 0 && 8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos() + pDatabaseTCFunctionElement[0]->GetWidth() > 8 * (pDatabaseTCPacket->GetDataSize() + 1))
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_ILLEGALBITOFFSET), (LPCTSTR)pDatabaseTCFunction->GetName(), (pDatabaseTCFunctionElement[0]->GetBytePos() >= 0 && pDatabaseTCFunctionElement[0]->GetBitPos() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
								cDatabaseTCFunctionElements.ShowError(pDatabaseTCFunction->GetName(), szMessage);
							}
							for (nElement[1] = 0, nElements[1] = (INT)pDatabaseTCPacket->GetSize(); nElement[1] < nElements[1]; nElement[1]++)
							{
								if ((pDatabaseTCPacketParameter = pDatabaseTCPacket->GetAt(nElement[1])) != (CDatabaseTCPacketParameter *)NULL)
								{
									if (8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos() >= 8 * pDatabaseTCPacketParameter->GetBytePos() + pDatabaseTCPacketParameter->GetBitPos() && 8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos() < 8 * pDatabaseTCPacketParameter->GetBytePos() + pDatabaseTCPacketParameter->GetBitPos() + pDatabaseTCPacketParameter->GetWidth())
									{
										szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_OVERLAPPINGVALUE), (LPCTSTR)pDatabaseTCFunction->GetName(), (pDatabaseTCFunctionElement[0]->GetBytePos() >= 0 && pDatabaseTCFunctionElement[0]->GetBitPos() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
										cDatabaseTCFunctionElements.ShowError(pDatabaseTCFunction->GetName(), szMessage);
										continue;
									}
									if (8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos() + pDatabaseTCFunctionElement[0]->GetWidth() > 8 * pDatabaseTCPacketParameter->GetBytePos() + pDatabaseTCPacketParameter->GetBitPos() && 8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos() + pDatabaseTCFunctionElement[0]->GetWidth() <= 8 * pDatabaseTCPacketParameter->GetBytePos() + pDatabaseTCPacketParameter->GetBitPos() + pDatabaseTCPacketParameter->GetWidth())
									{
										szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_OVERLAPPINGVALUE), (LPCTSTR)pDatabaseTCFunction->GetName(), (pDatabaseTCFunctionElement[0]->GetBytePos() >= 0 && pDatabaseTCFunctionElement[0]->GetBitPos() >= 0 && pDatabaseTCFunctionElement[0]->GetWidth() > 0) ? (LPCTSTR)cStringTools.ConvertIntToString(8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos() + pDatabaseTCFunctionElement[0]->GetWidth() - 1) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
										cDatabaseTCFunctionElements.ShowError(pDatabaseTCFunction->GetName(), szMessage);
										continue;
									}
								}
							}
						}
						if ((pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(pDatabase->GetTCParameters()->Find(pDatabaseTCFunctionElement[0]->GetName()))))
						{
							if ((pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE))
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_ILLEGALFLAG), (LPCTSTR)pDatabaseTCFunction->GetName(), (pDatabaseTCFunctionElement[0]->GetBytePos() >= 0 && pDatabaseTCFunctionElement[0]->GetBitPos() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
								cDatabaseTCFunctionElements.ShowError(pDatabaseTCFunction->GetName(), szMessage);
							}
							if ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) && (pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) != TCPARAMETER_RADIX_DECIMAL)
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_ILLEGALRADIX), (LPCTSTR)pDatabaseTCFunction->GetName(), (pDatabaseTCFunctionElement[0]->GetBytePos() >= 0 && pDatabaseTCFunctionElement[0]->GetBitPos() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
								cDatabaseTCFunctionElements.ShowError(pDatabaseTCFunction->GetName(), szMessage);
							}
							if (pDatabaseTCParameter->GetWidth() != pDatabaseTCFunctionElement[0]->GetWidth())
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_ILLEGALBITWIDTH), (LPCTSTR)pDatabaseTCFunction->GetName(), (pDatabaseTCFunctionElement[0]->GetBytePos() >= 0 && pDatabaseTCFunctionElement[0]->GetBitPos() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
								cDatabaseTCFunctionElements.ShowError(pDatabaseTCFunction->GetName(), szMessage);
							}
						}
						for (nElement[1] = nElement[0] + 1, nElements[1] = nElements[0]; nElement[1] < nElements[1]; nElement[1]++)
						{
							if ((pDatabaseTCFunctionElement[1] = pDatabaseTCFunction->GetAt(nElement[1])) != (CDatabaseTCFunctionElement *)NULL)
							{
								if (8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos() >= 8 * pDatabaseTCFunctionElement[1]->GetBytePos() + pDatabaseTCFunctionElement[1]->GetBitPos() && 8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos() < 8 * pDatabaseTCFunctionElement[1]->GetBytePos() + pDatabaseTCFunctionElement[1]->GetBitPos() + pDatabaseTCFunctionElement[1]->GetWidth())
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_OVERLAPPINGVALUE), (LPCTSTR)pDatabaseTCFunction->GetName(), (pDatabaseTCFunctionElement[0]->GetBytePos() >= 0 && pDatabaseTCFunctionElement[0]->GetBitPos() >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos()) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
									cDatabaseTCFunctionElements.ShowError(pDatabaseTCFunction->GetName(), szMessage);
									continue;
								}
								if (8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos() + pDatabaseTCFunctionElement[0]->GetWidth() > 8 * pDatabaseTCFunctionElement[1]->GetBytePos() + pDatabaseTCFunctionElement[1]->GetBitPos() && 8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos() + pDatabaseTCFunctionElement[0]->GetWidth() <= 8 * pDatabaseTCFunctionElement[1]->GetBytePos() + pDatabaseTCFunctionElement[1]->GetBitPos() + pDatabaseTCFunctionElement[1]->GetWidth())
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENT_OVERLAPPINGVALUE), (LPCTSTR)pDatabaseTCFunction->GetName(), (pDatabaseTCFunctionElement[0]->GetBytePos() >= 0 && pDatabaseTCFunctionElement[0]->GetBitPos() >= 0 && pDatabaseTCFunctionElement[0]->GetWidth() > 0) ? (LPCTSTR)cStringTools.ConvertIntToString(8 * pDatabaseTCFunctionElement[0]->GetBytePos() + pDatabaseTCFunctionElement[0]->GetBitPos() + pDatabaseTCFunctionElement[0]->GetWidth() - 1) : STRING(IDS_DATABASE_TABLE_CDF_BITOFFSET_UNKNOWN));
									cDatabaseTCFunctionElements.ShowError(pDatabaseTCFunction->GetName(), szMessage);
									continue;
								}
							}
						}
					}
				}
				for (nSet = 0, nSets = pDatabaseTCFunction->GetParameterSets(szParameterSets); nSet < nSets; nSet++)
				{
					if ((pDatabaseTCParameterSet = pDatabase->GetTCParameterSets()->GetAt(pDatabase->GetTCParameterSets()->Find(szParameterSets.GetAt(nSet)))))
					{
						for (nParameter = 0, nParameters = (INT)pDatabaseTCParameterSet->GetSize(); nParameter < nParameters; nParameter++)
						{
							if ((pDatabaseTCFunctionElement[0] = pDatabaseTCParameterSet->GetAt(nParameter)) != (CDatabaseTCFunctionElement *)NULL)
							{
								if ((pDatabaseTCFunctionElement[1] = pDatabaseTCFunction->GetAt(pDatabaseTCFunction->Find(pDatabaseTCFunctionElement[0]->GetName(), pDatabaseTCFunctionElement[0]->GetBytePos(), pDatabaseTCFunctionElement[0]->GetBitPos()))))
								{
									pDatabaseTCFunctionElement[0]->SetDescription(pDatabaseTCFunctionElement[1]->GetDescription());
									continue;
								}
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCPARAMETERSETITEM_ILLEGALNAME), (LPCTSTR)pDatabaseTCParameterSet->GetName(), (LPCTSTR)pDatabaseTCFunctionElement[0]->GetName());
								cDatabaseTCParameterSetItems.ShowError(pDatabaseTCParameterSet->GetName(), szMessage);
							}
						}
					}
				}
			}
		}
		ShowCompileMessages(&cDatabaseTCParameterSetItems);
		ShowCompileMessages(&cDatabaseTCFunctionElements);
		cDatabaseTCFunctionElements.Close();
	}
	else
	{
		cDatabaseTCFunctionElements.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONELEMENTS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCFunctionElements);
	}
}

VOID CALTELDatabaseEngine::CompileTCFunctionBlockElements(CBinaryDatabase *pDatabase)
{
	INT  nBlock;
	INT  nBlocks;
	INT  nElement;
	INT  nElements;
	CString  szMessage;
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock;
	CDatabaseTCFunctionBlockElement  *pDatabaseTCFunctionBlockElement;
	CALTELDatabaseTCFunctionBlocksRecordset  cDatabaseTCFunctionBlocks(this);
	CALTELDatabaseTCFunctionBlockElementsRecordset  cDatabaseTCFunctionBlockElements(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCFUNCTIONBLOCKELEMENTS));
	try
	{
		cDatabaseTCFunctionBlockElements.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_BCCF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCFunctionBlockElements.IsOpen())
	{
		for (nBlock = 0, nBlocks = (INT)pDatabase->GetTCFunctionBlocks()->GetSize(); nBlock < nBlocks; nBlock++)
		{
			if ((pDatabaseTCFunctionBlock = pDatabase->GetTCFunctionBlocks()->GetAt(nBlock)))
			{
				pDatabaseTCFunctionBlock->RemoveAll();
				continue;
			}
		}
		while (!cDatabaseTCFunctionBlockElements.IsBOF() && !cDatabaseTCFunctionBlockElements.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTCFunctionBlock = pDatabase->GetTCFunctionBlocks()->GetAt(pDatabase->GetTCFunctionBlocks()->Find(cDatabaseTCFunctionBlockElements.GetFunction()))))
			{
				if ((pDatabaseTCFunctionBlockElement = new CDatabaseTCFunctionBlockElement))
				{
					pDatabaseTCFunctionBlockElement->SetName(cDatabaseTCFunctionBlockElements.GetName());
					pDatabaseTCFunctionBlockElement->SetAttributes(cDatabaseTCFunctionBlockElements.GetAttributes());
					if (pDatabaseTCFunctionBlock->Add(pDatabaseTCFunctionBlockElement) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCKELEMENT_DUPLICATENAME), (LPCTSTR)cDatabaseTCFunctionBlockElements.GetFunction(), (LPCTSTR)cDatabaseTCFunctionBlockElements.GetName());
						cDatabaseTCFunctionBlockElements.ShowError(szMessage);
						delete pDatabaseTCFunctionBlockElement;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCKELEMENT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCFunctionBlockElements.GetFunction(), (LPCTSTR)cDatabaseTCFunctionBlockElements.GetName());
					cDatabaseTCFunctionBlockElements.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTCFunctionBlockElements);
			}
			else
			{
				if (pDatabase->GetTCFunctionBlocks()->GetSize() > 0 || !cDatabaseTCFunctionBlockElements.GetFunction().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCKELEMENT_UNDEFINEDFUNCTIONNAME), (LPCTSTR)cDatabaseTCFunctionBlockElements.GetFunction(), (LPCTSTR)cDatabaseTCFunctionBlockElements.GetName());
					cDatabaseTCFunctionBlockElements.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCFunctionBlockElements);
			}
			try
			{
				cDatabaseTCFunctionBlockElements.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCKELEMENTS_READ_FAILURE));
				cDatabaseTCFunctionBlockElements.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCKELEMENT_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCFunctionBlockElements.GetFunction(), (LPCTSTR)cDatabaseTCFunctionBlockElements.GetName());
				cDatabaseTCFunctionBlockElements.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nBlock = 0, nBlocks = (INT)pDatabase->GetTCFunctionBlocks()->GetSize(); nBlock < nBlocks; nBlock++)
		{
			if ((pDatabaseTCFunctionBlock = pDatabase->GetTCFunctionBlocks()->GetAt(nBlock)) && !pDatabaseTCFunctionBlock->GetSize())
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCK_MISSINGELEMENTS), (LPCTSTR)pDatabaseTCFunctionBlock->GetName());
				cDatabaseTCFunctionBlocks.ShowError(pDatabaseTCFunctionBlock->GetName(), szMessage);
			}
			if ((pDatabaseTCFunctionBlock = pDatabase->GetTCFunctionBlocks()->GetAt(nBlock)))
			{
				for (nElement = 0, nElements = (INT)pDatabaseTCFunctionBlock->GetSize(); nElement < nElements; nElement++)
				{
					if ((pDatabaseTCFunctionBlockElement = pDatabaseTCFunctionBlock->GetAt(nElement)) && pDatabaseTCFunctionBlock->GetName() == pDatabaseTCFunctionBlockElement->GetName())
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCKELEMENT_ILLEGALNAME), (LPCTSTR)pDatabaseTCFunctionBlock->GetName(), (LPCTSTR)pDatabaseTCFunctionBlockElement->GetName());
						cDatabaseTCFunctionBlockElements.ShowError(pDatabaseTCFunctionBlock->GetName(), szMessage);
					}
				}
			}
		}
		ShowCompileMessages(&cDatabaseTCFunctionBlockElements);
		ShowCompileMessages(&cDatabaseTCFunctionBlocks);
		cDatabaseTCFunctionBlockElements.Close();
	}
	else
	{
		cDatabaseTCFunctionBlockElements.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCFUNCTIONBLOCKELEMENTS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCFunctionBlockElements);
	}
}

VOID CALTELDatabaseEngine::CompileTCSequenceParameters(CBinaryDatabase *pDatabase)
{
	INT  nPoint;
	INT  nPoints;
	INT  nIndex[2];
	INT  nSequence;
	INT  nSequences;
	INT  nParameter;
	INT  nParameters;
	double  fX[2];
	double  fValue;
	double  fMinimum;
	double  fMaximum;
	LPTSTR  pszValue;
	CString  szY;
	CString  szMessage;
	ULONGLONG  nConstValue;
	CDatabaseTCSequence  *pDatabaseTCSequence;
	CDatabaseTCParameter  *pDatabaseTCParameter[2];
	CDatabaseTCParameters  pDatabaseTCParameters;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;
	CALTELDatabaseTCSequenceParametersRecordset  cDatabaseTCSequenceParameters(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCSEQUENCEPARAMETERS));
	try
	{
		cDatabaseTCSequenceParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_CSP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCSequenceParameters.IsOpen())
	{
		for (nSequence = 0, nSequences = (INT)pDatabase->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
		{
			if ((pDatabaseTCSequence = pDatabase->GetTCSequences()->GetAt(nSequence)))
			{
				pDatabaseTCSequence->SetParameters(pDatabaseTCParameters);
				continue;
			}
		}
		while (!cDatabaseTCSequenceParameters.IsBOF() && !cDatabaseTCSequenceParameters.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTCSequence = pDatabase->GetTCSequences()->GetAt(pDatabase->GetTCSequences()->Find(cDatabaseTCSequenceParameters.GetSequence()))))
			{
				if ((pDatabaseTCParameter[0] = new CDatabaseTCParameter))
				{
					pDatabaseTCParameter[0]->SetTag(cDatabaseTCSequenceParameters.GetTag());
					pDatabaseTCParameter[0]->SetDescription(cDatabaseTCSequenceParameters.GetDescription());
					pDatabaseTCParameter[0]->SetUnit(cDatabaseTCSequenceParameters.GetUnit());
					pDatabaseTCParameter[0]->SetAttributes(cDatabaseTCSequenceParameters.GetAttributes());
					pDatabaseTCParameter[0]->SetWidth(cDatabaseTCSequenceParameters.GetBitWidth());
					pDatabaseTCParameter[0]->SetCalTable(cDatabaseTCSequenceParameters.GetCalTable());
					pDatabaseTCParameter[0]->SetOolTable(cDatabaseTCSequenceParameters.GetOolTable());
					pDatabaseTCParameter[0]->SetConstValueAsText(cDatabaseTCSequenceParameters.GetConstValue());
					for (pDatabaseTCParameter[0]->SetAttributes((CheckTCSequenceParameterConstTimeType(pDatabaseTCParameter[0]->GetTag())) ? ((pDatabaseTCParameter[0]->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) | TCPARAMETER_CODING_TIME) : pDatabaseTCParameter[0]->GetAttributes()), szMessage.Empty(); !ConvertTCParameterConstValue(pDatabaseTCParameter[0], nConstValue); )
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEPARAMETER_ILLEGALCONSTVALUE), (LPCTSTR)cDatabaseTCSequenceParameters.GetSequence(), (LPCTSTR)cDatabaseTCSequenceParameters.GetTag());
						cDatabaseTCSequenceParameters.ShowError(szMessage);
						break;
					}
					if ((pDatabaseTCParameter[0]->GetAttributes() & TCPARAMETER_CODING_TIME) && szMessage.IsEmpty())
					{
						if (TranslateTCSequenceParameterConstTime(pDatabaseTCParameter[0]->GetAttributes(), pDatabaseTCParameter[0]->GetConstValueAsText()).GetTimeInSeconds() < CTime::GetCurrentTime().GetTime())
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCSEQUENCEPARAMETER_EXPIREDTIME), (LPCTSTR)cDatabaseTCSequenceParameters.GetSequence(), (LPCTSTR)cDatabaseTCSequenceParameters.GetTag());
							cDatabaseTCSequenceParameters.ShowWarning(szMessage);
						}
					}
					for (pDatabaseTCParameter[0]->SetConstValue(nConstValue); cDatabaseTCSequenceParameters.GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL; )
					{
						if ((nIndex[0] = pDatabase->GetTCNumCalTables()->Find(cDatabaseTCSequenceParameters.GetCalTable())) < 0 && !cDatabaseTCSequenceParameters.GetCalTable().IsEmpty())
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEPARAMETER_ILLEGALCALTABLE), (LPCTSTR)cDatabaseTCSequenceParameters.GetSequence(), (LPCTSTR)cDatabaseTCSequenceParameters.GetTag());
							cDatabaseTCSequenceParameters.ShowError(szMessage);
						}
						if ((nIndex[1] = pDatabase->GetTCNumOolTables()->Find(cDatabaseTCSequenceParameters.GetOolTable())) < 0 && !cDatabaseTCSequenceParameters.GetOolTable().IsEmpty())
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEPARAMETER_ILLEGALOOLTABLE), (LPCTSTR)cDatabaseTCSequenceParameters.GetSequence(), (LPCTSTR)cDatabaseTCSequenceParameters.GetTag());
							cDatabaseTCSequenceParameters.ShowError(szMessage);
						}
						pDatabaseTCParameter[0]->SetCalTableRef(nIndex[0]);
						pDatabaseTCParameter[0]->SetOolTableRef(nIndex[1]);
						break;
					}
					if (cDatabaseTCSequenceParameters.GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
					{
						if ((nIndex[0] = pDatabase->GetTCTxtCalTables()->Find(cDatabaseTCSequenceParameters.GetCalTable())) < 0 && !cDatabaseTCSequenceParameters.GetCalTable().IsEmpty())
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEPARAMETER_ILLEGALCALTABLE), (LPCTSTR)cDatabaseTCSequenceParameters.GetSequence(), (LPCTSTR)cDatabaseTCSequenceParameters.GetTag());
							cDatabaseTCSequenceParameters.ShowError(szMessage);
						}
						if ((nIndex[1] = pDatabase->GetTCTxtOolTables()->Find(cDatabaseTCSequenceParameters.GetOolTable())) < 0 && !cDatabaseTCSequenceParameters.GetOolTable().IsEmpty())
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEPARAMETER_ILLEGALOOLTABLE), (LPCTSTR)cDatabaseTCSequenceParameters.GetSequence(), (LPCTSTR)cDatabaseTCSequenceParameters.GetTag());
							cDatabaseTCSequenceParameters.ShowError(szMessage);
						}
						pDatabaseTCParameter[0]->SetCalTableRef(nIndex[0]);
						pDatabaseTCParameter[0]->SetOolTableRef(nIndex[1]);
					}
					if (pDatabaseTCParameter[0]->GetAttributes() & TCPARAMETER_VTYPE_CALIBRATED)
					{
						if (pDatabaseTCParameter[0]->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)
						{
							if ((pDatabaseTCNumCalTable = pDatabase->GetTCNumCalTables()->GetAt(pDatabaseTCParameter[0]->GetCalTableRef())))
							{
								for (nPoint = 0, nPoints = (INT)pDatabaseTCNumCalTable->GetSize(); nPoint < nPoints; nPoint++)
								{
									if ((pDatabaseTCNumCalPoint = pDatabaseTCNumCalTable->GetAt(nPoint)))
									{
										fMinimum = (nPoint > 0) ? min(pDatabaseTCNumCalPoint->GetY(), fMinimum) : pDatabaseTCNumCalPoint->GetY();
										fMaximum = (nPoint > 0) ? max(pDatabaseTCNumCalPoint->GetY(), fMaximum) : pDatabaseTCNumCalPoint->GetY();
									}
								}
								if ((fValue = _tcstod(pDatabaseTCParameter[0]->GetConstValueAsText(), &pszValue)) < fMinimum || fValue > fMaximum)
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEPARAMETER_ILLEGALCALRANGE), (LPCTSTR)cDatabaseTCSequenceParameters.GetSequence(), (LPCTSTR)cDatabaseTCSequenceParameters.GetTag(), (LPCTSTR)cDatabaseTCSequenceParameters.GetCalTable());
									cDatabaseTCSequenceParameters.ShowError(szMessage);
								}
							}
						}
						if (pDatabaseTCParameter[0]->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
						{
							if ((pDatabaseTCTxtCalTable = pDatabase->GetTCTxtCalTables()->GetAt(pDatabaseTCParameter[0]->GetCalTableRef())))
							{
								for (nPoint = 0, nPoints = (INT)pDatabaseTCTxtCalTable->GetSize(); nPoint < nPoints; nPoint++)
								{
									if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nPoint)))
									{
										if (pDatabaseTCTxtCalPoint->GetRange(fX[0], fX[1], szY) && szY == pDatabaseTCParameter[0]->GetConstValueAsText()) break;
										continue;
									}
								}
								if (nPoint == nPoints)
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEPARAMETER_ILLEGALCALRANGE), (LPCTSTR)cDatabaseTCSequenceParameters.GetSequence(), (LPCTSTR)cDatabaseTCSequenceParameters.GetTag(), (LPCTSTR)cDatabaseTCSequenceParameters.GetCalTable());
									cDatabaseTCSequenceParameters.ShowError(szMessage);
								}
							}
						}
					}
					for (; pDatabaseTCSequence->GetParameters(pDatabaseTCParameters) >= 0; )
					{
						if (cDatabaseTCSequenceParameters.GetPosition() < pDatabaseTCParameters.GetSize())
						{
							if ((pDatabaseTCParameter[1] = pDatabaseTCParameters.GetAt(cDatabaseTCSequenceParameters.GetPosition())) && pDatabaseTCParameter[1]->GetTag().IsEmpty())
							{
								pDatabaseTCParameters.SetAt(cDatabaseTCSequenceParameters.GetPosition(), pDatabaseTCParameter[0]);
								delete pDatabaseTCParameter[1];
								break;
							}
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEPARAMETER_ILLEGALPOSITION), (LPCTSTR)cDatabaseTCSequenceParameters.GetSequence(), (LPCTSTR)cDatabaseTCSequenceParameters.GetTag());
							cDatabaseTCSequenceParameters.ShowError(szMessage);
							delete pDatabaseTCParameter[0];
							break;
						}
						pDatabaseTCParameters.SetAtGrow(cDatabaseTCSequenceParameters.GetPosition(), pDatabaseTCParameter[0]);
						break;
					}
					for (nParameter = 0, nParameters = (INT)pDatabaseTCParameters.GetSize(); nParameter < nParameters; nParameter++)
					{
						if ((pDatabaseTCParameter[1] = pDatabaseTCParameters.GetAt(nParameter))) continue;
						if ((pDatabaseTCParameter[1] = new CDatabaseTCParameter))
						{
							pDatabaseTCParameters.SetAt(nParameter, pDatabaseTCParameter[1]);
							continue;
						}
						break;
					}
					if (nParameter == nParameters) pDatabaseTCSequence->SetParameters(pDatabaseTCParameters);
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEPARAMETERS_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCSequenceParameters.GetSequence(), (LPCTSTR)cDatabaseTCSequenceParameters.GetTag());
					cDatabaseTCSequenceParameters.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseTCSequenceParameters);
			}
			else
			{
				if (pDatabase->GetTCSequences()->GetSize() > 0 || !cDatabaseTCSequenceParameters.GetSequence().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEPARAMETER_UNDEFINEDSEQUENCENAME), (LPCTSTR)cDatabaseTCSequenceParameters.GetSequence(), (LPCTSTR)cDatabaseTCSequenceParameters.GetTag());
					cDatabaseTCSequenceParameters.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCSequenceParameters);
			}
			try
			{
				cDatabaseTCSequenceParameters.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEPARAMETERS_READ_FAILURE));
				cDatabaseTCSequenceParameters.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEPARAMETERS_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCSequenceParameters.GetSequence(), (LPCTSTR)cDatabaseTCSequenceParameters.GetTag());
				cDatabaseTCSequenceParameters.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		for (nSequence = 0, nSequences = (INT)pDatabase->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
		{
			if ((pDatabaseTCSequence = pDatabase->GetTCSequences()->GetAt(nSequence)) != (CDatabaseTCSequence *)NULL)
			{
				for (nParameter = 0, nParameters = pDatabaseTCSequence->GetParameters(pDatabaseTCParameters); nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTCParameter[0] = pDatabaseTCParameters.GetAt(nParameter)) && pDatabaseTCParameter[0]->GetTag().IsEmpty())
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEPARAMETER_MISSINGTAG), (LPCTSTR)pDatabaseTCSequence->GetName(), nParameter);
						cDatabaseTCSequenceParameters.ShowError(pDatabaseTCSequence->GetName(), szMessage);
					}
				}
			}
		}
		ShowCompileMessages(&cDatabaseTCSequenceParameters);
		cDatabaseTCSequenceParameters.Close();
	}
	else
	{
		cDatabaseTCSequenceParameters.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEPARAMETERS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCSequenceParameters);
	}
}

VOID CALTELDatabaseEngine::CompileTCSequenceEntryParameters(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nPoint;
	INT  nPoints;
	INT  nEntry;
	INT  nEntries;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	INT  nSequence;
	INT  nSequences;
	double  fX[2];
	double  fValue;
	double  fMinimum;
	double  fMaximum;
	LPTSTR  pszValue;
	CString  szY;
	CString  szMessage;
	CString  szMemory[2];
	ULONGLONG  nConstValue;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCSequence  *pDatabaseTCSequence;
	CDatabaseTCParameter  *pDatabaseTCParameter[2];
	CDatabaseTCParameters  pDatabaseTCParameters;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;
	CDatabaseTCSequenceEntry  *pDatabaseTCSequenceEntry;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;
	CDatabaseTCSequenceEntryParameter  *pDatabaseTCSequenceEntryParameter;
	CALTELDatabaseTCSequenceEntryParametersRecordset  cDatabaseTCSequenceEntryParameters(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_TCSEQUENCEENTRYPARAMETERS));
	try
	{
		cDatabaseTCSequenceEntryParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_SDF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseTCSequenceEntryParameters.IsOpen())
	{
		for (nSequence = 0, nSequences = (INT)pDatabase->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
		{
			if ((pDatabaseTCSequence = pDatabase->GetTCSequences()->GetAt(nSequence)))
			{
				for (nEntry = 0, nEntries = (INT)pDatabaseTCSequence->GetSize(); nEntry < nEntries; nEntry++)
				{
					if ((pDatabaseTCSequenceEntry = pDatabaseTCSequence->GetAt(nEntry)))
					{
						pDatabaseTCSequenceEntry->RemoveAll();
						continue;
					}
				}
			}
		}
		while (!cDatabaseTCSequenceEntryParameters.IsBOF() && !cDatabaseTCSequenceEntryParameters.IsEOF() && IsCompiling())
		{
			if ((pDatabaseTCSequence = pDatabase->GetTCSequences()->GetAt(pDatabase->GetTCSequences()->Find(cDatabaseTCSequenceEntryParameters.GetSequence()))))
			{
				if ((pDatabaseTCSequenceEntry = pDatabaseTCSequence->GetAt(cDatabaseTCSequenceEntryParameters.GetEntry() - 1)))
				{
					if ((pDatabaseTCSequenceEntryParameter = new CDatabaseTCSequenceEntryParameter))
					{
						pDatabaseTCSequenceEntryParameter->SetTag(cDatabaseTCSequenceEntryParameters.GetTag());
						pDatabaseTCSequenceEntryParameter->SetDescription(cDatabaseTCSequenceEntryParameters.GetDescription());
						pDatabaseTCSequenceEntryParameter->SetAttributes(cDatabaseTCSequenceEntryParameters.GetAttributes());
						pDatabaseTCSequenceEntryParameter->SetBytePos(((cDatabaseTCSequenceEntryParameters.GetAttributes() & TCSEQUENCEENTRY_TYPE_PROCEDURE) == 0) ? (cDatabaseTCSequenceEntryParameters.GetBitOffset() / 8) : (INT)pDatabaseTCSequenceEntry->GetSize());
						pDatabaseTCSequenceEntryParameter->SetBitPos(((cDatabaseTCSequenceEntryParameters.GetAttributes() & TCSEQUENCEENTRY_TYPE_PROCEDURE) == 0) ? (cDatabaseTCSequenceEntryParameters.GetBitOffset() % 8) : 0);
						pDatabaseTCSequenceEntryParameter->SetConstValueAsText(cDatabaseTCSequenceEntryParameters.GetConstValue());
						pDatabaseTCSequenceEntryParameter->SetMemoryArea(cDatabaseTCSequenceEntryParameters.GetMemoryAreaName(), cDatabaseTCSequenceEntryParameters.GetMemoryAreaVersion());
						pDatabaseTCSequenceEntryParameter->SetRef(pDatabase->GetTCParameters()->Find(cDatabaseTCSequenceEntryParameters.GetTag()));
						if ((nIndex = pDatabaseTCSequenceEntry->Find(pDatabaseTCSequenceEntryParameter->GetTag(), pDatabaseTCSequenceEntryParameter->GetBytePos(), pDatabaseTCSequenceEntryParameter->GetBitPos())) < 0 && pDatabaseTCSequenceEntry->Add(pDatabaseTCSequenceEntryParameter) < 0)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETERS_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
							cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
							delete pDatabaseTCSequenceEntryParameter;
							break;
						}
						if (nIndex < 0)
						{
							if (pDatabaseTCSequenceEntryParameter->GetAttributes() & (TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED))
							{
								if ((pDatabaseTCParameter[0] = pDatabase->GetTCParameters()->GetAt(pDatabase->GetTCParameters()->Find(pDatabaseTCSequenceEntryParameter->GetTag()))))
								{
									for (pDatabaseTCSequenceEntryParameter->SetWidth(pDatabaseTCParameter[0]->GetWidth()); (pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_RAW) && (((pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) && (pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) != TCPARAMETER_RADIX_DECIMAL) || ((pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER)) && (pDatabaseTCSequenceEntryParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0)); )
									{
										szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_ILLEGALVALUERADIX), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
										cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
										break;
									}
									if (pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_RAW)
									{
										for (pDatabaseTCSequenceEntryParameter->SetAttributes((!CheckTCSequenceEntryParameterConstTimeType(pDatabaseTCSequenceEntryParameter->GetTag())) ? (pDatabaseTCSequenceEntryParameter->GetAttributes() | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT))) : (pDatabaseTCSequenceEntryParameter->GetAttributes() | TCPARAMETER_CODING_TIME)), szMessage.Empty(); !ConvertTCParameterConstValue(pDatabaseTCSequenceEntryParameter->GetTag(), pDatabaseTCSequenceEntryParameter->GetAttributes(), pDatabaseTCSequenceEntryParameter->GetConstValueAsText(), nConstValue); )
										{
											szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_ILLEGALCONSTVALUE), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
											cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
											break;
										}
										if ((pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_CODING_TIME) && szMessage.IsEmpty())
										{
											if (TranslateTCSequenceEntryParameterConstTime(pDatabaseTCSequenceEntryParameter->GetAttributes(), pDatabaseTCSequenceEntryParameter->GetConstValueAsText()).GetTimeInSeconds() < CTime::GetCurrentTime().GetTime())
											{
												szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCSEQUENCEENTRYPARAMETER_EXPIREDTIME), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
												cDatabaseTCSequenceEntryParameters.ShowWarning(szMessage);
											}
										}
										pDatabaseTCSequenceEntryParameter->SetConstValue(nConstValue);
									}
									if (pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_CALIBRATED)
									{
										for (pDatabaseTCSequenceEntryParameter->SetAttributes((!CheckTCSequenceEntryParameterConstTimeType(pDatabaseTCSequenceEntryParameter->GetTag())) ? (pDatabaseTCSequenceEntryParameter->GetAttributes() | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))) : (pDatabaseTCSequenceEntryParameter->GetAttributes() | TCPARAMETER_CODING_TIME)), szMessage.Empty(); !ConvertTCParameterConstValue(pDatabaseTCSequenceEntryParameter->GetTag(), pDatabaseTCSequenceEntryParameter->GetAttributes(), pDatabaseTCSequenceEntryParameter->GetConstValueAsText(), nConstValue); )
										{
											szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_ILLEGALCONSTVALUE), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
											cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
											break;
										}
										if ((pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_CODING_TIME) && szMessage.IsEmpty())
										{
											if (TranslateTCSequenceEntryParameterConstTime(pDatabaseTCSequenceEntryParameter->GetAttributes(), pDatabaseTCSequenceEntryParameter->GetConstValueAsText()).GetTimeInSeconds() < CTime::GetCurrentTime().GetTime())
											{
												szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_TCSEQUENCEENTRYPARAMETER_EXPIREDTIME), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
												cDatabaseTCSequenceEntryParameters.ShowWarning(szMessage);
											}
										}
										if (pDatabaseTCParameter[0]->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)
										{
											if ((pDatabaseTCNumCalTable = pDatabase->GetTCNumCalTables()->GetAt(pDatabaseTCParameter[0]->GetCalTableRef())))
											{
												for (nPoint = 0, nPoints = (INT)pDatabaseTCNumCalTable->GetSize(); nPoint < nPoints; nPoint++)
												{
													if ((pDatabaseTCNumCalPoint = pDatabaseTCNumCalTable->GetAt(nPoint)))
													{
														fMinimum = (nPoint > 0) ? min(pDatabaseTCNumCalPoint->GetY(), fMinimum) : pDatabaseTCNumCalPoint->GetY();
														fMaximum = (nPoint > 0) ? max(pDatabaseTCNumCalPoint->GetY(), fMaximum) : pDatabaseTCNumCalPoint->GetY();
													}
												}
												if ((fValue = _tcstod(pDatabaseTCSequenceEntryParameter->GetConstValueAsText(), &pszValue)) < fMinimum || fValue > fMaximum)
												{
													szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_ILLEGALCALRANGE), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag(), (LPCTSTR)pDatabaseTCNumCalTable->GetName());
													cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
												}
											}
											else
											{
												szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_ILLEGALCALTABLE), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
												cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
											}
										}
										if (pDatabaseTCParameter[0]->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
										{
											if ((pDatabaseTCTxtCalTable = pDatabase->GetTCTxtCalTables()->GetAt(pDatabaseTCParameter[0]->GetCalTableRef())))
											{
												for (nPoint = 0, nPoints = (INT)pDatabaseTCTxtCalTable->GetSize(); nPoint < nPoints; nPoint++)
												{
													if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nPoint)))
													{
														if (pDatabaseTCTxtCalPoint->GetRange(fX[0], fX[1], szY) && szY == pDatabaseTCSequenceEntryParameter->GetConstValueAsText()) break;
														continue;
													}
												}
												if (nPoint == nPoints)
												{
													szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_ILLEGALCALRANGE), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag(), (LPCTSTR)pDatabaseTCTxtCalTable->GetName());
													cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
												}
											}
											else
											{
												szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_ILLEGALCALTABLE), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
												cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
											}
										}
										if ((pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0)
										{
											szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_ILLEGALVALUETYPE), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
											cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
										}
										pDatabaseTCSequenceEntryParameter->SetConstValue(nConstValue);
									}
								}
								else
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_UNDEFINEDTAG), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
									cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
								}
							}
							if (pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_FORMAL)
							{
								for (nParameter = 0, nParameters = pDatabaseTCSequence->GetParameters(pDatabaseTCParameters); nParameter < nParameters; nParameter++)
								{
									if ((pDatabaseTCParameter[0] = pDatabaseTCParameters.GetAt(nParameter)) && pDatabaseTCSequenceEntryParameter->GetConstValueAsText() == pDatabaseTCParameter[0]->GetTag())
									{
										if ((pDatabaseTCParameter[1] = pDatabase->GetTCParameters()->GetAt(pDatabase->GetTCParameters()->Find(pDatabaseTCSequenceEntryParameter->GetTag()))))
										{
											if ((pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) != (pDatabaseTCParameter[1]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) || pDatabaseTCParameter[0]->GetWidth() != pDatabaseTCParameter[1]->GetWidth() || pDatabaseTCParameter[0]->GetUnit() != pDatabaseTCParameter[1]->GetUnit() || pDatabaseTCParameter[0]->GetCalTable() != pDatabaseTCParameter[1]->GetCalTable() || pDatabaseTCParameter[0]->GetOolTable() != pDatabaseTCParameter[1]->GetOolTable())
											{
												szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_MISMATCHEDTAG), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)pDatabaseTCParameter[0]->GetTag());
												cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
											}
										}
										pDatabaseTCSequenceEntryParameter->SetConstValue(pDatabaseTCParameter[0]->GetConstValue());
										break;
									}
								}
								if (nParameter == nParameters)
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_UNDEFINEDFORMALTAG), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetConstValue());
									cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
								}
							}
							for (; pDatabaseTCSequenceEntryParameter->GetMemoryArea(szMemory[0], szMemory[1]); )
							{
								if ((pDatabaseOBProcessorMemoryImage = pDatabase->GetOBProcessorMemoryImages()->GetAt(pDatabase->GetOBProcessorMemoryImages()->Find(szMemory[0]))))
								{
									for (szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_ILLEGALMEMORYAREAVERSION), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag()); pDatabaseOBProcessorMemoryImage->Find(szMemory[1]) < 0; )
									{
										cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
										break;
									}
									break;
								}
								if (!szMemory[0].IsEmpty())
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_ILLEGALMEMORYAREANAME), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
									cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
									break;
								}
								if (!szMemory[1].IsEmpty())
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_ILLEGALMEMORYAREAVERSION), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
									cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
								}
								break;
							}
							if (pDatabaseTCSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_TYPE_FUNCTION)
							{
								if ((pDatabaseTCFunction = pDatabase->GetTCFunctions()->GetAt(pDatabase->GetTCFunctions()->Find(pDatabaseTCSequenceEntry->GetName()))))
								{
									for (nElement = 0, nElements = (INT)pDatabaseTCFunction->GetSize(); nElement < nElements; nElement++)
									{
										if ((pDatabaseTCFunctionElement = pDatabaseTCFunction->GetAt(nElement)) && 8 * pDatabaseTCFunctionElement->GetBytePos() + pDatabaseTCFunctionElement->GetBitPos() == 8 * pDatabaseTCSequenceEntryParameter->GetBytePos() + pDatabaseTCSequenceEntryParameter->GetBitPos())
										{
											if ((pDatabaseTCFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER) && pDatabaseTCFunctionElement->GetName() != pDatabaseTCSequenceEntryParameter->GetTag())
											{
												szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_ILLEGALREFERENCEDTAG), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag(), (LPCTSTR)pDatabaseTCFunction->GetName());
												cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
											}
											break;
										}
									}
									if (nElement == nElements)
									{
										szMessage.Format((pDatabaseTCFunction->Find(pDatabaseTCSequenceEntryParameter->GetTag()) < 0) ? STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_ILLEGALTAG) : STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_ILLEGALBITOFFSET), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
										cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
									}
								}
							}
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_DUPLICATETAG), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
							cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
							delete pDatabaseTCSequenceEntryParameter;
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETERS_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
						cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
						break;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_ILLEGALPOSITION), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
					cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCSequenceEntryParameters);
			}
			else
			{
				if (pDatabase->GetTCSequences()->GetSize() > 0 || !cDatabaseTCSequenceEntryParameters.GetSequence().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETER_UNDEFINEDSEQUENCENAME), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
					cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseTCSequenceEntryParameters);
			}
			try
			{
				cDatabaseTCSequenceEntryParameters.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETERS_READ_FAILURE));
				cDatabaseTCSequenceEntryParameters.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETERS_MEMORY_FAILURE), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetSequence(), cDatabaseTCSequenceEntryParameters.GetEntry(), (LPCTSTR)cDatabaseTCSequenceEntryParameters.GetTag());
				cDatabaseTCSequenceEntryParameters.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseTCSequenceEntryParameters);
		cDatabaseTCSequenceEntryParameters.Close();
	}
	else
	{
		cDatabaseTCSequenceEntryParameters.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_TCSEQUENCEENTRYPARAMETERS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseTCSequenceEntryParameters);
	}
}

VOID CALTELDatabaseEngine::CompileANDs(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nLayout;
	INT  nLayouts;
	INT  nParameter;
	INT  nParameters;
	CString  szMessage;
	CUIntArray  nColumns;
	CANDLayout  *pANDLayout;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CANDLayoutParameter  *pANDLayoutParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMPacketParameter  *pDatabaseTMPacketParameter;
	CALTELDatabaseANDDirectoryRecordset  cDatabaseANDDirectory(this);
	CALTELDatabaseANDParametersRecordset  cDatabaseANDParameters(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_NORMALAND));
	try
	{
		cDatabaseANDDirectory.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_DPF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseANDDirectory.IsOpen())
	{
		for (pDatabase->GetANDs()->RemoveAll(); !cDatabaseANDDirectory.IsBOF() && !cDatabaseANDDirectory.IsEOF() && IsCompiling(); )
		{
			if ((cDatabaseANDDirectory.GetStatus() & ANDLAYOUT_RECORDSTATUS_DEFAULT) >= ANDLAYOUT_RECORDSTATUS_NONE)
			{
				if ((pANDLayout = new CANDLayout(cDatabaseANDDirectory.GetName())))
				{
					pANDLayout->SetTitle(cDatabaseANDDirectory.GetTitle());
					pANDLayout->SetStatus(cDatabaseANDDirectory.GetStatus());
					if ((nIndex = pDatabase->GetANDs()->Find(cDatabaseANDDirectory.GetName())) < 0 && pDatabase->GetANDs()->Add(pANDLayout) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_NORMALAND_MEMORY_FAILURE), (LPCTSTR)cDatabaseANDDirectory.GetName());
						cDatabaseANDDirectory.ShowError(szMessage);
						delete pANDLayout;
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_NORMALAND_DUPLICATENAME), (LPCTSTR)cDatabaseANDDirectory.GetName());
						cDatabaseANDDirectory.ShowError(szMessage);
						delete pANDLayout;
					}
					for (cDatabaseANDDirectory.GetColumns(nColumns); nIndex < 0; )
					{
						pANDLayout->SetColumns(nColumns);
						break;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_NORMALAND_MEMORY_FAILURE), (LPCTSTR)cDatabaseANDDirectory.GetName());
					cDatabaseANDDirectory.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseANDDirectory);
			}
			try
			{
				cDatabaseANDDirectory.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_ANDDIRECTORY_READ_FAILURE));
				cDatabaseANDDirectory.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_NORMALAND_MEMORY_FAILURE), (LPCTSTR)cDatabaseANDDirectory.GetName());
				cDatabaseANDDirectory.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseANDDirectory);
		cDatabaseANDDirectory.Close();
	}
	else
	{
		cDatabaseANDDirectory.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_ANDDIRECTORY_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseANDDirectory);
	}
	try
	{
		cDatabaseANDParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_DPFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseANDParameters.IsOpen())
	{
		while (!cDatabaseANDParameters.IsBOF() && !cDatabaseANDParameters.IsEOF() && IsCompiling())
		{
			if ((pANDLayout = pDatabase->GetANDs()->GetAt(pDatabase->GetANDs()->Find(cDatabaseANDParameters.GetName()))))
			{
				if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(cDatabaseANDParameters.GetParameter()))) || cDatabaseANDParameters.GetParameter().IsEmpty())
				{
					if ((pANDLayoutParameter = new CANDLayoutParameter(cDatabaseANDParameters.GetParameter())))
					{
						pANDLayoutParameter->SetRow(cDatabaseANDParameters.GetRow());
						pANDLayoutParameter->SetColumn(cDatabaseANDParameters.GetCol());
						pANDLayoutParameter->SetDigits(cDatabaseANDParameters.GetDigits());
						pANDLayoutParameter->SetComment(cDatabaseANDParameters.GetComment());
						pANDLayoutParameter->SetOccurrence(cDatabaseANDParameters.GetOccurrence());
						pANDLayoutParameter->SetAlignment(cDatabaseANDParameters.GetAlignment());
						pANDLayoutParameter->SetColor((cDatabaseANDParameters.GetColor() != -1) ? (COLORREF)cDatabaseANDParameters.GetColor() : pANDLayoutParameter->GetColor());
						pANDLayoutParameter->SetAttributes((!cDatabaseANDParameters.GetParameter().IsEmpty()) ? TranslateANDParameterAttributes(cDatabaseANDParameters.GetMode(), pDatabaseTMParameter->GetAttributes()) : 0);
						pANDLayoutParameter->SetRef(pDatabase->GetTMParameters()->Find(cDatabaseANDParameters.GetParameter()));
						for (nParameter = 0, nParameters = (INT)pANDLayout->GetSize(); nParameter < nParameters; nParameter++)
						{
							if (pANDLayout->GetAt(nParameter)->GetRow() == pANDLayoutParameter->GetRow() && pANDLayout->GetAt(nParameter)->GetColumn() == pANDLayoutParameter->GetColumn()) break;
							continue;
						}
						if (nParameter == nParameters)
						{
							if (pANDLayout->Add(pANDLayoutParameter) < 0)
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_ANDPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseANDParameters.GetName());
								cDatabaseANDParameters.ShowError(szMessage);
								delete pANDLayoutParameter;
								break;
							}
						}
						else
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_ANDPARAMETER_DUPLICATEPARAMETERPOSITION), (LPCTSTR)cDatabaseANDParameters.GetName(), (!cDatabaseANDParameters.GetParameter().IsEmpty()) ? (LPCTSTR)cDatabaseANDParameters.GetParameter() : (LPCTSTR)cDatabaseANDParameters.GetComment());
							cDatabaseANDParameters.ShowError(szMessage);
							delete pANDLayoutParameter;
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_ANDPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseANDParameters.GetName());
						cDatabaseANDParameters.ShowError(szMessage);
						break;
					}
				}
				else
				{
					if (pDatabase->GetTMParameters()->GetSize() > 0 || !cDatabaseANDParameters.GetParameter().IsEmpty())
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_ANDPARAMETER_UNDEFINEDPARAMETER), (LPCTSTR)cDatabaseANDParameters.GetName(), (LPCTSTR)cDatabaseANDParameters.GetParameter());
						cDatabaseANDParameters.ShowError(szMessage);
					}
				}
				ShowCompileMessages(&cDatabaseANDParameters);
			}
			else
			{
				if (pDatabase->GetANDs()->GetSize() > 0 || !cDatabaseANDParameters.GetName().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_ANDPARAMETER_UNDEFINEDNAME), (LPCTSTR)cDatabaseANDParameters.GetName(), (!cDatabaseANDParameters.GetParameter().IsEmpty()) ? (LPCTSTR)cDatabaseANDParameters.GetParameter() : (LPCTSTR)cDatabaseANDParameters.GetComment());
					cDatabaseANDParameters.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseANDParameters);
			}
			try
			{
				cDatabaseANDParameters.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_ANDPARAMETERS_READ_FAILURE));
				cDatabaseANDParameters.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_ANDPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseANDParameters.GetName());
				cDatabaseANDParameters.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseANDParameters);
		cDatabaseANDParameters.Close();
	}
	else
	{
		cDatabaseANDParameters.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_ANDPARAMETERS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseANDParameters);
	}
	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_GENERICAND));
	for (nLayout = 0, nLayouts = (INT)pDatabase->GetTMPackets()->GetSize(), pDatabase->GetANDs(DATABASE_SUBCOMPONENT_AND_GENERIC)->RemoveAll(); nLayout < nLayouts; nLayout++)
	{
		if ((pDatabaseTMPacket = pDatabase->GetTMPackets()->GetAt(nLayout)))
		{
			if (pDatabaseTMPacket->GetStatus() & TMPACKET_RECORDSTATUS_DEFAULT)
			{
				if ((pANDLayout = new CANDLayout) != (CANDLayout *)NULL)
				{
					pANDLayout->SetName(pDatabaseTMPacket->GetTag());
					pANDLayout->SetTitle(pDatabaseTMPacket->GetDescription());
					pANDLayout->SetStatus(ANDLAYOUT_RECORDSTATUS_NEW);
					for (nParameter = 0, nParameters = (INT)pDatabaseTMPacket->GetSize(); nParameter < nParameters; nParameter++)
					{
						if ((pDatabaseTMPacketParameter = pDatabaseTMPacket->GetAt(nParameter)) != (CDatabaseTMPacketParameter *)NULL)
						{
							if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt((nIndex = pDatabase->GetTMParameters()->Find(pDatabaseTMPacketParameter->GetTag())))))
							{
								if (CheckTMParameterTag(pDatabaseTMPacketParameter->GetTag()) && !CheckTMParameterSpareList(pDatabaseTMPacketParameter->GetTag()))
								{
									if ((pANDLayoutParameter = new CANDLayoutParameter(pDatabaseTMParameter->GetTag())))
									{
										pANDLayoutParameter->SetAttributes(pDatabaseTMParameter->GetAttributes());
										pANDLayoutParameter->SetOccurrence(pDatabaseTMPacketParameter->GetOccurrence());
										pANDLayoutParameter->SetBytePos(pDatabaseTMPacketParameter->GetBytePos());
										pANDLayoutParameter->SetBitPos(pDatabaseTMPacketParameter->GetBitPos());
										pANDLayoutParameter->SetRef(nIndex);
										if (pANDLayout->Add(pANDLayoutParameter) >= 0) continue;
										delete pANDLayoutParameter;
									}
									break;
								}
							}
							else
							{
								if (pDatabase->GetTMParameters()->GetSize() > 0 || !pDatabaseTMPacketParameter->GetTag().IsEmpty())
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GENERICANDPARAMETER_UNDEFINEDPARAMETER), (LPCTSTR)pDatabaseTMPacket->GetTag(), (LPCTSTR)pDatabaseTMPacketParameter->GetTag());
									ShowCompileMessage(EMPTYSTRING, EMPTYSTRING, DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_GENERIC, szMessage, FALSE);
								}
							}
						}
					}
					if (nParameter == nParameters)
					{
						if (pDatabase->GetANDs(DATABASE_SUBCOMPONENT_AND_GENERIC)->Add(pANDLayout) < 0)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GENERICAND_DUPLICATENAME), (LPCTSTR)pDatabaseTMPacket->GetTag());
							ShowCompileMessage(EMPTYSTRING, EMPTYSTRING, DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_GENERIC, szMessage, FALSE);
							delete pANDLayout;
						}
						continue;
					}
					delete pANDLayout;
				}
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GENERICAND_MEMORY_FAILURE), (LPCTSTR)pDatabaseTMPacket->GetTag());
				ShowCompileMessage(EMPTYSTRING, EMPTYSTRING, DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_GENERIC, szMessage, FALSE);
				break;
			}
		}
	}
}

VOID CALTELDatabaseEngine::CompileGRDs(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nLayout;
	INT  nLayouts;
	INT  nParameter;
	INT  nParameters;
	CString  szMessage;
	CUIntArray  nColumns;
	CGRDLayout  *pGRDLayout;
	CGRDLayoutParameter  *pGRDLayoutParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CALTELDatabaseGRDDirectoryRecordset  cDatabaseGRDDirectory(this);
	CALTELDatabaseGRDParametersRecordset  cDatabaseGRDParameters(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_GRD));
	try
	{
		cDatabaseGRDDirectory.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_GPF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseGRDDirectory.IsOpen())
	{
		for (pDatabase->GetGRDs()->RemoveAll(); !cDatabaseGRDDirectory.IsBOF() && !cDatabaseGRDDirectory.IsEOF() && IsCompiling(); )
		{
			if ((cDatabaseGRDDirectory.GetStatus() & GRDLAYOUT_RECORDSTATUS_DEFAULT) >= GRDLAYOUT_RECORDSTATUS_NONE)
			{
				if ((pGRDLayout = new CGRDLayout(cDatabaseGRDDirectory.GetName())))
				{
					pGRDLayout->SetTitle(cDatabaseGRDDirectory.GetTitle());
					pGRDLayout->SetType(cDatabaseGRDDirectory.GetType());
					pGRDLayout->SetMode(cDatabaseGRDDirectory.GetMode());
					pGRDLayout->SetInterval(SECONDSPERMINUTE*cDatabaseGRDDirectory.GetInterval());
					pGRDLayout->SetUpdateInterval(SECONDSPERMINUTE*cDatabaseGRDDirectory.GetUpdateInterval());
					pGRDLayout->SetDuration(SECONDSPERMINUTE*(MINUTESPERHOUR*(HOURSPERDAY*cDatabaseGRDDirectory.GetDays() + cDatabaseGRDDirectory.GetHours()) + cDatabaseGRDDirectory.GetMinutes()));
					pGRDLayout->SetPlotSize(CSize(cDatabaseGRDDirectory.GetWidth(), cDatabaseGRDDirectory.GetHeight()));
					pGRDLayout->SetGrids(cDatabaseGRDDirectory.GetXGrids(), cDatabaseGRDDirectory.GetYGrids());
					pGRDLayout->SetTicks(cDatabaseGRDDirectory.GetXTicks(), cDatabaseGRDDirectory.GetYTicks());
					pGRDLayout->SetGridsWidth((cDatabaseGRDDirectory.GetGridsWidth() > 0) ? cDatabaseGRDDirectory.GetGridsWidth() : pGRDLayout->GetGridsWidth());
					pGRDLayout->SetTicksWidth((cDatabaseGRDDirectory.GetTicksWidth() > 0) ? cDatabaseGRDDirectory.GetTicksWidth() : pGRDLayout->GetTicksWidth());
					pGRDLayout->SetGridsColor((cDatabaseGRDDirectory.GetGridsColor() != -1) ? (COLORREF)cDatabaseGRDDirectory.GetGridsColor() : pGRDLayout->GetGridsColor());
					pGRDLayout->SetTicksColor((cDatabaseGRDDirectory.GetTicksColor() != -1) ? (COLORREF)cDatabaseGRDDirectory.GetTicksColor() : pGRDLayout->GetTicksColor());
					pGRDLayout->SetLabelColor((cDatabaseGRDDirectory.GetLabelColor() != -1) ? (COLORREF)cDatabaseGRDDirectory.GetLabelColor() : pGRDLayout->GetLabelColor());
					pGRDLayout->SetBackgroundColor((cDatabaseGRDDirectory.GetBkgndColor() != -1) ? (COLORREF)cDatabaseGRDDirectory.GetBkgndColor() : pGRDLayout->GetBackgroundColor());
					pGRDLayout->SetSize(min(max(cDatabaseGRDDirectory.GetParameters(), 0), 10));
					pGRDLayout->SetParameters(cDatabaseGRDDirectory.GetParameters());
					pGRDLayout->SetStatus(cDatabaseGRDDirectory.GetStatus());
					if ((nIndex = pDatabase->GetGRDs()->Find(cDatabaseGRDDirectory.GetName())) < 0 && pDatabase->GetGRDs()->Add(pGRDLayout) < 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GRD_MEMORY_FAILURE), (LPCTSTR)cDatabaseGRDDirectory.GetName());
						cDatabaseGRDDirectory.ShowError(szMessage);
						delete pGRDLayout;
						break;
					}
					if (nIndex >= 0)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GRD_DUPLICATENAME), (LPCTSTR)cDatabaseGRDDirectory.GetName());
						cDatabaseGRDDirectory.ShowError(szMessage);
						delete pGRDLayout;
					}
					for (cDatabaseGRDDirectory.GetColumns(nColumns); nIndex < 0; )
					{
						pGRDLayout->SetColumns(nColumns);
						break;
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GRD_MEMORY_FAILURE), (LPCTSTR)cDatabaseGRDDirectory.GetName());
					cDatabaseGRDDirectory.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabaseGRDDirectory);
			}
			try
			{
				cDatabaseGRDDirectory.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GRDDIRECTORY_READ_FAILURE));
				cDatabaseGRDDirectory.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GRD_MEMORY_FAILURE), (LPCTSTR)cDatabaseGRDDirectory.GetName());
				cDatabaseGRDDirectory.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseGRDDirectory);
		cDatabaseGRDDirectory.Close();
	}
	else
	{
		cDatabaseGRDDirectory.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_GRDDIRECTORY_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseGRDDirectory);
	}
	try
	{
		cDatabaseGRDParameters.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_GPFP_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabaseGRDParameters.IsOpen())
	{
		while (!cDatabaseGRDParameters.IsBOF() && !cDatabaseGRDParameters.IsEOF() && IsCompiling())
		{
			if ((pGRDLayout = pDatabase->GetGRDs()->GetAt(pDatabase->GetGRDs()->Find(cDatabaseGRDParameters.GetName()))))
			{
				if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(cDatabaseGRDParameters.GetParameter()))))
				{
					if ((pGRDLayoutParameter = new CGRDLayoutParameter(cDatabaseGRDParameters.GetParameter())))
					{
						pGRDLayoutParameter->SetPosition(cDatabaseGRDParameters.GetPosition());
						pGRDLayoutParameter->SetOccurrence(cDatabaseGRDParameters.GetOccurrence());
						pGRDLayoutParameter->SetComment(cDatabaseGRDParameters.GetComment());
						pGRDLayoutParameter->SetDigits(cDatabaseGRDParameters.GetDigits());
						pGRDLayoutParameter->SetLineStyle(cDatabaseGRDParameters.GetLineStyle());
						pGRDLayoutParameter->SetLineSymbol(cDatabaseGRDParameters.GetLineSymbol());
						pGRDLayoutParameter->SetLineWidth((cDatabaseGRDParameters.GetLineWidth() > 0) ? cDatabaseGRDParameters.GetLineWidth() : pGRDLayoutParameter->GetLineWidth());
						pGRDLayoutParameter->SetColor((cDatabaseGRDParameters.GetColor() != -1) ? (COLORREF)cDatabaseGRDParameters.GetColor() : pGRDLayoutParameter->GetColor());
						pGRDLayoutParameter->SetRange(cDatabaseGRDParameters.GetMinimum(), cDatabaseGRDParameters.GetMaximum());
						pGRDLayoutParameter->SetAttributes(TranslateGRDParameterAttributes(cDatabaseGRDParameters.GetMode(), pDatabaseTMParameter->GetAttributes()));
						pGRDLayoutParameter->SetRef(pDatabase->GetTMParameters()->Find(cDatabaseGRDParameters.GetParameter()));
						if (((pGRDLayoutParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) != TMPARAMETER_CALIBRATION_NUMERICAL && (pGRDLayoutParameter->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) != TMPARAMETER_CODING_SIGNEDINTEGER && (pGRDLayoutParameter->GetAttributes() & TMPARAMETER_CODING_COMPLEMENTCOMPLEX) != TMPARAMETER_CODING_COMPLEMENTCOMPLEX && (pGRDLayoutParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT) != TMPARAMETER_CODING_FLOATINGPOINT && (cDatabaseGRDParameters.GetMinimum() < 0.0 || cDatabaseGRDParameters.GetMaximum() < 0.0)) || !CheckGRDParameterRange(cDatabaseGRDParameters.GetMinimum(), cDatabaseGRDParameters.GetMaximum()))
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GRDPARAMETER_ILLEGALRANGE), (LPCTSTR)cDatabaseGRDParameters.GetName(), (LPCTSTR)cDatabaseGRDParameters.GetParameter());
							delete (CGRDLayoutParameter *)pGRDLayoutParameter;
							pGRDLayoutParameter = (CGRDLayoutParameter *)NULL;
							cDatabaseGRDParameters.ShowError(szMessage);
						}
						if (pGRDLayout->GetType() != GRDLAYOUT_TYPE_STRIPCHART  &&  pGRDLayout->GetSize() > 0)
						{
							if (pGRDLayoutParameter != (CGRDLayoutParameter *)NULL  &&  pGRDLayout->GetAt(pGRDLayoutParameter->GetPosition()))
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GRDPARAMETER_DUPLICATEPARAMETERPOSITION), (LPCTSTR)cDatabaseGRDParameters.GetName(), (LPCTSTR)cDatabaseGRDParameters.GetParameter());
								delete (CGRDLayoutParameter *)pGRDLayoutParameter;
								pGRDLayoutParameter = (CGRDLayoutParameter *)NULL;
								cDatabaseGRDParameters.ShowError(szMessage);
							}
						}
						if (pGRDLayoutParameter != (CGRDLayoutParameter *)NULL  &&  pGRDLayoutParameter->GetPosition() >= pGRDLayout->GetSize() && pGRDLayout->GetSize() > 0)
						{
							if (CheckGRDParameterPosition(pGRDLayoutParameter->GetPosition()))
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GRDPARAMETER_ILLEGALPOSITION), (LPCTSTR)cDatabaseGRDParameters.GetName(), (LPCTSTR)cDatabaseGRDParameters.GetParameter());
								cDatabaseGRDParameters.ShowError(szMessage);
							}
							delete (CGRDLayoutParameter *)pGRDLayoutParameter;
							pGRDLayoutParameter = (CGRDLayoutParameter *)NULL;
						}
						if (pGRDLayoutParameter != (CGRDLayoutParameter *)NULL)
						{
							for (nParameter = 0, nParameters = (INT)pGRDLayout->GetSize(); nParameter < nParameters; nParameter++)
							{
								if (!pGRDLayout->GetAt(nParameter))
								{
									pGRDLayout->SetAt(nParameter, pGRDLayoutParameter);
									break;
								}
							}
							if (nParameter == nParameters  &&  nParameters > 0)
							{
								szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GRD_ILLEGALPARAMETERS), (LPCTSTR)pGRDLayout->GetName());
								cDatabaseGRDDirectory.ShowError(pGRDLayout->GetName(), szMessage);
								delete pGRDLayoutParameter;
							}
						}
					}
					else
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GRDPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseGRDParameters.GetName());
						cDatabaseGRDParameters.ShowError(szMessage);
						break;
					}
				}
				else
				{
					if (pDatabase->GetTMParameters()->GetSize() > 0 || !cDatabaseGRDParameters.GetParameter().IsEmpty())
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GRDPARAMETER_UNDEFINEDPARAMETER), (LPCTSTR)cDatabaseGRDParameters.GetName(), (LPCTSTR)cDatabaseGRDParameters.GetParameter());
						cDatabaseGRDParameters.ShowError(szMessage);
					}
				}
				ShowCompileMessages(&cDatabaseGRDParameters);
			}
			else
			{
				if (pDatabase->GetGRDs()->GetSize() > 0 || !cDatabaseGRDParameters.GetName().IsEmpty())
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GRDPARAMETER_UNDEFINEDNAME), (LPCTSTR)cDatabaseGRDParameters.GetName(), (LPCTSTR)cDatabaseGRDParameters.GetParameter());
					cDatabaseGRDParameters.ShowError(szMessage);
				}
				ShowCompileMessages(&cDatabaseGRDParameters);
			}
			try
			{
				cDatabaseGRDParameters.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GRDPARAMETERS_READ_FAILURE));
				cDatabaseGRDParameters.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GRDPARAMETER_MEMORY_FAILURE), (LPCTSTR)cDatabaseGRDParameters.GetName());
				cDatabaseGRDParameters.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabaseGRDParameters);
		cDatabaseGRDParameters.Close();
	}
	else
	{
		cDatabaseGRDParameters.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_GRDPARAMETERS_OPEN_FAILURE));
		ShowCompileMessages(&cDatabaseGRDParameters);
	}
	for (nLayout = 0, nLayouts = (INT)pDatabase->GetGRDs()->GetSize(); nLayout < nLayouts; nLayout++)
	{
		if ((pGRDLayout = pDatabase->GetGRDs()->GetAt(nLayout)) != (CGRDLayout *)NULL)
		{
			for (nParameter = 0, nParameters = (INT)pGRDLayout->GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pGRDLayoutParameter = pGRDLayout->GetAt(nParameter)) == (CGRDLayoutParameter *)NULL)
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_GRD_ILLEGALPARAMETERS), (LPCTSTR)pGRDLayout->GetName());
					cDatabaseGRDDirectory.ShowError(pGRDLayout->GetName(), szMessage);
					pGRDLayout->SetSize((nParameters = nParameter));
					break;
				}
			}
			if (pGRDLayout->GetType() == GRDLAYOUT_TYPE_DIAGRAM)
			{
				for (nParameter = 0; nParameter < nParameters - 1; nParameter++)
				{
					if (pGRDLayout->GetAt(nParameter)->GetColor() != pGRDLayout->GetAt(nParameter + 1)->GetColor())
					{
						pGRDLayout->GetAt(nParameter + 1)->SetColor(pGRDLayout->GetAt(nParameter)->GetColor());
						szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_GRDPARAMETER_ILLEGALCOLOR), (LPCTSTR)pGRDLayout->GetName(), (LPCTSTR)pGRDLayout->GetAt(nParameter + 1)->GetName());
						cDatabaseGRDParameters.ShowWarning(pGRDLayout->GetName(), szMessage);
					}
					if (pGRDLayout->GetAt(nParameter)->GetLineWidth() != pGRDLayout->GetAt(nParameter + 1)->GetLineWidth())
					{
						pGRDLayout->GetAt(nParameter + 1)->SetLineWidth(pGRDLayout->GetAt(nParameter)->GetLineWidth());
						szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_GRDPARAMETER_ILLEGALLINEWIDTH), (LPCTSTR)pGRDLayout->GetName(), (LPCTSTR)pGRDLayout->GetAt(nParameter + 1)->GetName());
						cDatabaseGRDParameters.ShowWarning(pGRDLayout->GetName(), szMessage);
					}
					if (pGRDLayout->GetAt(nParameter)->GetLineStyle() != pGRDLayout->GetAt(nParameter + 1)->GetLineStyle())
					{
						pGRDLayout->GetAt(nParameter + 1)->SetLineStyle(pGRDLayout->GetAt(nParameter)->GetLineStyle());
						szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_GRDPARAMETER_ILLEGALLINESTYLE), (LPCTSTR)pGRDLayout->GetName(), (LPCTSTR)pGRDLayout->GetAt(nParameter + 1)->GetName());
						cDatabaseGRDParameters.ShowWarning(pGRDLayout->GetName(), szMessage);
					}
					if (pGRDLayout->GetAt(nParameter)->GetLineSymbol() != pGRDLayout->GetAt(nParameter + 1)->GetLineSymbol())
					{
						pGRDLayout->GetAt(nParameter + 1)->SetLineSymbol(pGRDLayout->GetAt(nParameter)->GetLineSymbol());
						szMessage.Format(STRING(IDS_DATABASE_COMPILEWARNING_GRDPARAMETER_ILLEGALLINESYMBOL), (LPCTSTR)pGRDLayout->GetName(), (LPCTSTR)pGRDLayout->GetAt(nParameter + 1)->GetName());
						cDatabaseGRDParameters.ShowWarning(pGRDLayout->GetName(), szMessage);
					}
					nParameter++;
				}
			}
		}
	}
	ShowCompileMessages(&cDatabaseGRDParameters);
}

VOID CALTELDatabaseEngine::CompilePODs(CBinaryDatabase *pDatabase)
{
	INT  nIndex;
	INT  nPos[2];
	INT  nParameter;
	INT  nParameters;
	INT  nExpression;
	INT  nExpressions;
	CHAR  szNumber[64];
	CString  szMessage;
	CString  szParameter;
	CPODLayout  *pPODLayout;
	CByteArray  bFunctions;
	CByteArray  bOperators;
	CByteArray  bParameters;
	CByteArray  bNumbers;
	CStringArray  szStack;
	CStringArray  szFunctions;
	CStringArray  szParameters;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CPODLayoutExpression  *pPODLayoutExpression;
	CALTELDatabasePODDirectoryRecordset  cDatabasePODDirectory(this);

	ShowCompileMessage(STRING(IDS_DATABASE_COMPILING_MESSAGE_POD));
	try
	{
		cDatabasePODDirectory.Open(CRecordset::snapshot, STRING(IDS_DATABASE_TABLE_PPF_SQLQUERY), CRecordset::readOnly);
	}
	catch (CException *pException)
	{
		pException->Delete();
	}
	if (cDatabasePODDirectory.IsOpen())
	{
		for (pDatabase->GetPODs()->RemoveAll(); !cDatabasePODDirectory.IsBOF() && !cDatabasePODDirectory.IsEOF() && IsCompiling(); )
		{
			if ((cDatabasePODDirectory.GetStatus() & PODLAYOUT_RECORDSTATUS_DEFAULT) >= PODLAYOUT_RECORDSTATUS_NONE)
			{
				if ((pPODLayout = new CPODLayout(cDatabasePODDirectory.GetName())))
				{
					pPODLayout->SetTitle(cDatabasePODDirectory.GetTitle());
					pPODLayout->SetColumns(cDatabasePODDirectory.GetColumns());
					pPODLayout->SetStatus(cDatabasePODDirectory.GetStatus());
					for (nExpression = 0, nExpressions = cDatabasePODDirectory.GetExpressionStack(szStack, bFunctions, bOperators, bParameters, bNumbers), cDatabasePODDirectory.GetParameters(szParameters), cDatabasePODDirectory.GetFunctions(szFunctions), pPODLayout->SetParameters(szParameters), pPODLayout->SetFunctions(szFunctions), pPODLayout->SetExpressionColor((cDatabasePODDirectory.GetExpressionColor() != -1) ? (COLORREF)cDatabasePODDirectory.GetExpressionColor() : pPODLayout->GetExpressionColor()), pPODLayout->SetParametersColor((cDatabasePODDirectory.GetParametersColor() != -1) ? (COLORREF)cDatabasePODDirectory.GetParametersColor() : pPODLayout->GetParametersColor()), pPODLayout->SetFunctionsColor((cDatabasePODDirectory.GetFunctionsColor() != -1) ? (COLORREF)cDatabasePODDirectory.GetFunctionsColor() : pPODLayout->GetFunctionsColor()); nExpression < nExpressions; nExpression++)
					{
						if ((pPODLayoutExpression = new CPODLayoutExpression))
						{
							if (bFunctions.GetAt(nExpression))
							{
								pPODLayoutExpression->SetFunction(szStack.GetAt(nExpression));
								if (pPODLayout->Add(pPODLayoutExpression) >= 0) continue;
							}
							if (bOperators.GetAt(nExpression))
							{
								pPODLayoutExpression->SetOperator(szStack.GetAt(nExpression));
								if (pPODLayout->Add(pPODLayoutExpression) >= 0) continue;
							}
							if (bParameters.GetAt(nExpression))
							{
								for (szParameter.Format(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERFORMAT), EMPTYSTRING, 0, 0); !szParameter.IsEmpty(); )
								{
									nPos[0] = szStack.GetAt(nExpression).Find(szParameter.GetAt(0));
									nPos[1] = szStack.GetAt(nExpression).Find(szParameter.GetAt(szParameter.GetLength() / 2));
									break;
								}
								if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(((nIndex = (nPos[0] >= 0 && nPos[1] >= 0)) ? pDatabase->GetTMParameters()->Find(szStack.GetAt(nExpression).Left(nPos[0])) : -1))) && (pDatabaseTMParameter->GetStatus() & TMPARAMETER_RECORDSTATUS_DEFAULT) && CheckPODParameterSample(_ttoi(szStack.GetAt(nExpression).Mid(nPos[0] + 1))))
								{
									pPODLayoutExpression->SetParameter(pDatabaseTMParameter->GetTag(), _ttoi(szStack.GetAt(nExpression).Mid(nPos[0] + 1)), (_ttoi(szStack.GetAt(nExpression).Mid(nPos[1] + 1)) > 0) ? TRUE : FALSE);
									if (pPODLayout->Add(pPODLayoutExpression) >= 0) continue;
								}
								else
								{
									szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_POD_ILLEGALEXPRESSIONSTACK), (LPCTSTR)pPODLayout->GetName());
									cDatabasePODDirectory.ShowError(pPODLayout->GetName(), szMessage);
								}
							}
							if (bNumbers.GetAt(nExpression))
							{
#ifndef UNICODE
								strcpy_s(szNumber, sizeof(szNumber) / sizeof(CHAR), szStack.GetAt(nExpression));
#else
								WideCharToMultiByte(CP_ACP, 0, szStack.GetAt(nExpression), -1, szNumber, sizeof(szNumber) / sizeof(CHAR), (LPCSTR)NULL, (LPBOOL)NULL);
#endif
								pPODLayoutExpression->SetNumber(atof(szNumber));
								if (pPODLayout->Add(pPODLayoutExpression) >= 0) continue;
							}
							delete pPODLayoutExpression;
						}
						break;
					}
					for (nParameter = 0, nParameters = (INT)szParameters.GetSize(); nParameter < nParameters; nParameter++)
					{
						if (!(pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(szParameters.GetAt(nParameter)))))
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_POD_ILLEGALPARAMETERS), (LPCTSTR)pPODLayout->GetName());
							cDatabasePODDirectory.ShowError(pPODLayout->GetName(), szMessage);
							break;
						}
					}
					if (nExpression == nExpressions  &&  nParameter == nParameters)
					{
						if ((nIndex = pDatabase->GetPODs()->Find(cDatabasePODDirectory.GetName())) < 0 && pDatabase->GetPODs()->Add(pPODLayout) < 0)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_POD_MEMORY_FAILURE), (LPCTSTR)cDatabasePODDirectory.GetName());
							cDatabasePODDirectory.ShowError(szMessage);
							delete pPODLayout;
							break;
						}
						if (nIndex >= 0)
						{
							szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_POD_DUPLICATENAME), (LPCTSTR)cDatabasePODDirectory.GetName());
							cDatabasePODDirectory.ShowError(szMessage);
							delete pPODLayout;
						}
					}
					if (nExpression < nExpressions)
					{
						szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_POD_EXPRESSION_FAILURE), (LPCTSTR)cDatabasePODDirectory.GetName());
						cDatabasePODDirectory.ShowError(szMessage);
					}
				}
				else
				{
					szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_POD_MEMORY_FAILURE), (LPCTSTR)cDatabasePODDirectory.GetName());
					cDatabasePODDirectory.ShowError(szMessage);
					break;
				}
				ShowCompileMessages(&cDatabasePODDirectory);
			}
			try
			{
				cDatabasePODDirectory.MoveNext();
			}
			catch (CDBException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_PODDIRECTORY_READ_FAILURE));
				cDatabasePODDirectory.ShowError(EMPTYSTRING, szMessage);
				pException->Delete();
				break;
			}
			catch (CMemoryException *pException)
			{
				szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_POD_MEMORY_FAILURE), (LPCTSTR)cDatabasePODDirectory.GetName());
				cDatabasePODDirectory.ShowError(szMessage);
				pException->Delete();
				break;
			}
		}
		ShowCompileMessages(&cDatabasePODDirectory);
		cDatabasePODDirectory.Close();
	}
	else
	{
		cDatabasePODDirectory.ShowError(EMPTYSTRING, STRING(IDS_DATABASE_COMPILEERROR_PODDIRECTORY_OPEN_FAILURE));
		ShowCompileMessages(&cDatabasePODDirectory);
	}
}

CString CALTELDatabaseEngine::CheckDerivationProcedure(LPCTSTR pszExpression, INT &nPos) CONST
{
	INT  nProcedure;
	INT  nProcedures;

	SkipSpaces(pszExpression, nPos);
	for (nProcedure = 0, nProcedures = MAXDERIVATIONEXPRESSIONPROCEDURE - MINDERIVATIONEXPRESSIONPROCEDURE + 1; nProcedure < nProcedures; nProcedure++)
	{
		if (!_tcsncmp(&pszExpression[nPos], STRING(MINDERIVATIONEXPRESSIONPROCEDURE + nProcedure), lstrlen(STRING(MINDERIVATIONEXPRESSIONPROCEDURE + nProcedure))))
		{
			nPos += lstrlen(STRING(MINDERIVATIONEXPRESSIONPROCEDURE + nProcedure));
			SkipSpaces(pszExpression, nPos);
			break;
		}
	}
	return((nProcedure < nProcedures) ? STRING(MINDERIVATIONEXPRESSIONPROCEDURE + nProcedure) : EMPTYSTRING);
}

CString CALTELDatabaseEngine::CheckDerivationFunction(LPCTSTR pszExpression, INT &nPos) CONST
{
	INT  nFunction;
	INT  nFunctions;

	SkipSpaces(pszExpression, nPos);
	for (nFunction = 0, nFunctions = MAXDERIVATIONEXPRESSIONFUNCTION - MINDERIVATIONEXPRESSIONFUNCTION + 1; nFunction < nFunctions; nFunction++)
	{
		if (!_tcsncmp(&pszExpression[nPos], STRING(MINDERIVATIONEXPRESSIONFUNCTION + nFunction), lstrlen(STRING(MINDERIVATIONEXPRESSIONFUNCTION + nFunction))))
		{
			nPos += lstrlen(STRING(MINDERIVATIONEXPRESSIONFUNCTION + nFunction));
			SkipSpaces(pszExpression, nPos);
			break;
		}
	}
	return((nFunction < nFunctions) ? STRING(MINDERIVATIONEXPRESSIONFUNCTION + nFunction) : EMPTYSTRING);
}

CString CALTELDatabaseEngine::CheckDerivationOperator(LPCTSTR pszExpression, INT &nPos) CONST
{
	INT  nOperator;
	INT  nOperators;

	SkipSpaces(pszExpression, nPos);
	for (nOperator = 0, nOperators = MAXDERIVATIONEXPRESSIONOPERATOR - MINDERIVATIONEXPRESSIONOPERATOR + 1; nOperator < nOperators; nOperator++)
	{
		if (!_tcsnicmp(&pszExpression[nPos], STRING(MINDERIVATIONEXPRESSIONOPERATOR + nOperator), lstrlen(STRING(MINDERIVATIONEXPRESSIONOPERATOR + nOperator))))
		{
			nPos += lstrlen(STRING(MINDERIVATIONEXPRESSIONOPERATOR + nOperator));
			SkipSpaces(pszExpression, nPos);
			break;
		}
	}
	return((nOperator < nOperators) ? STRING(MINDERIVATIONEXPRESSIONOPERATOR + nOperator) : EMPTYSTRING);
}

CString CALTELDatabaseEngine::TranslateDerivationFunction(LPCTSTR pszFunction) CONST
{
	INT  nFunction;
	INT  nFunctions;

	for (nFunction = 0, nFunctions = MAXDERIVATIONEXPRESSIONFUNCTION - MINDERIVATIONEXPRESSIONFUNCTION + 1; nFunction < nFunctions; nFunction++)
	{
		if (!lstrcmp(pszFunction, STRING(MINDERIVATIONEXPRESSIONFUNCTION + nFunction))) break;
		continue;
	}
	return((nFunction < nFunctions) ? STRING(MINDERIVATIONLANGUAGEFUNCTION + nFunction) : EMPTYSTRING);
}

CString CALTELDatabaseEngine::TranslateDerivationOperator(LPCTSTR pszOperator, BOOL bBitwise) CONST
{
	INT  nOperator;
	INT  nOperators;

	for (nOperator = 0, nOperators = MAXDERIVATIONEXPRESSIONOPERATOR - MINDERIVATIONEXPRESSIONOPERATOR + 1; nOperator < nOperators; nOperator++)
	{
		if (!lstrcmp(pszOperator, STRING(MINDERIVATIONEXPRESSIONOPERATOR + nOperator))) break;
		continue;
	}
	return((nOperator < nOperators) ? ((!bBitwise) ? STRING(MINDERIVATIONLANGUAGEOPERATOR + nOperator) : STRING(MINDERIVATIONLANGUAGEBITOPERATOR + nOperator)) : EMPTYSTRING);
}

CString CALTELDatabaseEngine::TranslateDerivationProcedure(LPCTSTR pszTag, CONST CStringArray &pParameters, LPCTSTR pszExpression) CONST
{
	INT  nParameter;
	INT  nParameters;
	CString  szProcedure;
	CString  szDelimiter;

	szProcedure = CString(STRING(IDS_DERIVEDLANGUAGE_KEYWORD_PROCEDURE)) + SPACE + pszTag + CR + EOL;
	for (nParameter = 0, nParameters = (lstrlen(pszExpression) > 0) ? (INT)pParameters.GetSize() : 0; nParameter < nParameters; nParameter++)
	{
		szDelimiter = (nParameter % 10 == 0 && nParameter > 0) ? (CString(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_SEPARATOR)) + CR + EOL + CString(SPACE[0], lstrlen(STRING(IDS_DERIVEDLANGUAGE_KEYWORD_PARAMETERS)) + lstrlen(SPACE))) : STRING(IDS_DERIVEDLANGUAGE_SYMBOL_SEPARATOR);
		szProcedure += (!nParameter) ? (CString(STRING(IDS_DERIVEDLANGUAGE_KEYWORD_PARAMETERS)) + SPACE + pParameters.GetAt(nParameter)) : (szDelimiter + pParameters.GetAt(nParameter));
		szProcedure += (nParameter == nParameters - 1) ? (CString(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_TERMINATOR)) + CR + EOL) : EMPTYSTRING;
	}
	szProcedure += (lstrlen(pszExpression) > 0) ? (CString(STRING(IDS_DERIVEDLANGUAGE_KEYWORD_BEGIN)) + CR + EOL + SPACE + SPACE + CString(pszTag) + SPACE + STRING(IDS_DERIVEDLANGUAGE_OPERATOR_SIMPLEASSIGNMENT) + SPACE + CString(pszExpression) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_TERMINATOR) + CR + EOL + CString(STRING(IDS_DERIVEDLANGUAGE_KEYWORD_END)) + CR + EOL) : (CString(STRING(IDS_DERIVEDLANGUAGE_KEYWORD_BEGIN)) + CR + EOL + CString(STRING(IDS_DERIVEDLANGUAGE_KEYWORD_END)) + CR + EOL);
	return szProcedure;
}

CString CALTELDatabaseEngine::TranslateDerivationStatement(LPCTSTR pszTag, LPCTSTR pszExpression, CONST CStringArray &pParameters, CStringArray &pDerivationExpressionParameters, CStringArray &szErrors) CONST
{
	INT  nExpressionPos;
	CString  szExpressionError;
	CString  szExpressionText[2];
	CStringArray  szExpressionErrors[2];
	CStringArray  pExpressionParameters[2];

	if (TranslateDerivationExpression(pszTag, pszExpression, pParameters, szExpressionText[0], pExpressionParameters[0], (nExpressionPos = 0), szExpressionErrors[0]) && nExpressionPos == lstrlen(pszExpression))
	{
		AppendDerivationParameters(pExpressionParameters[0], pDerivationExpressionParameters);
		return szExpressionText[0];
	}
	if (TranslateDerivationCondition(pszTag, pszExpression, pParameters, szExpressionText[0], pExpressionParameters[1], (nExpressionPos = 0), szExpressionErrors[1]) && nExpressionPos == lstrlen(pszExpression))
	{
		szExpressionText[1].Format(STRING(IDS_DERIVEDLANGUAGE_OPERATOR_CONDITIONALASSIGNMENT), (LPCTSTR)szExpressionText[0]);
		AppendDerivationParameters(pExpressionParameters[1], pDerivationExpressionParameters);
		return szExpressionText[1];
	}
	for (; szExpressionErrors[0].GetSize() > 0; )
	{
		AppendDerivationErrors(szExpressionErrors[0], szErrors);
		break;
	}
	for (; !szExpressionErrors[0].GetSize() && szExpressionErrors[1].GetSize() > 0; )
	{
		AppendDerivationErrors(szExpressionErrors[1], szErrors);
		break;
	}
	if (!szExpressionErrors[0].GetSize() && !szExpressionErrors[1].GetSize())
	{
		szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_ILLEGALEXPRESSION), pszTag);
		szErrors.Add(szExpressionError);
	}
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::TranslateDerivationExpression(LPCTSTR pszTag, LPCTSTR pszExpression, CONST CStringArray &pParameters, CString &szExpression, CStringArray &pDerivationExpressionParameters, INT &nPos, CStringArray &szErrors) CONST
{
	INT  nExpressionPos;
	CString  szExpressionText[2];
	CString  szExpressionOperator[2];
	CStringArray  szExpressionErrors;
	CStringArray  pExpressionParameters;

	for (SkipSpaces(pszExpression, (nExpressionPos = nPos)); (szExpressionOperator[0] = pszExpression[nExpressionPos]) == STRING(IDS_DERIVEDLANGUAGE_OPERATOR_ADDITION) || szExpressionOperator[0] == STRING(IDS_DERIVEDLANGUAGE_OPERATOR_SUBTRACTION); )
	{
		nExpressionPos += lstrlen(szExpressionOperator[0]);
		break;
	}
	for (; szExpressionOperator[0] != STRING(IDS_DERIVEDLANGUAGE_OPERATOR_ADDITION) && szExpressionOperator[0] != STRING(IDS_DERIVEDLANGUAGE_OPERATOR_SUBTRACTION); )
	{
		szExpressionOperator[0].Empty();
		break;
	}
	if (TranslateDerivationTerm(pszTag, pszExpression, pParameters, szExpressionText[0], pExpressionParameters, nExpressionPos, szExpressionErrors))
	{
		for (SkipSpaces(pszExpression, nExpressionPos), szExpressionText[0] = szExpressionOperator[0] + szExpressionText[0]; (szExpressionOperator[1] = pszExpression[nExpressionPos]) == STRING(IDS_DERIVEDLANGUAGE_OPERATOR_ADDITION) || szExpressionOperator[1] == STRING(IDS_DERIVEDLANGUAGE_OPERATOR_SUBTRACTION); SkipSpaces(pszExpression, nExpressionPos))
		{
			if (TranslateDerivationTerm(pszTag, pszExpression, pParameters, szExpressionText[1], pExpressionParameters, (nExpressionPos = nExpressionPos + lstrlen(szExpressionOperator[1])), szExpressionErrors))
			{
				szExpressionText[0] += szExpressionOperator[1] + szExpressionText[1];
				szExpressionText[1].Empty();
				continue;
			}
			break;
		}
		if (szExpressionOperator[1] != STRING(IDS_DERIVEDLANGUAGE_OPERATOR_ADDITION) && szExpressionOperator[1] != STRING(IDS_DERIVEDLANGUAGE_OPERATOR_SUBTRACTION))
		{
			AppendDerivationParameters(pExpressionParameters, pDerivationExpressionParameters);
			szExpression = szExpressionText[0];
			nPos = nExpressionPos;
			return TRUE;
		}
	}
	AppendDerivationErrors(szExpressionErrors, szErrors);
	nPos = nExpressionPos;
	szExpression.Empty();
	return FALSE;
}

BOOL CALTELDatabaseEngine::TranslateDerivationCondition(LPCTSTR pszTag, LPCTSTR pszExpression, CONST CStringArray &pParameters, CString &szExpression, CStringArray &pDerivationExpressionParameters, INT &nPos, CStringArray &szErrors) CONST
{
	INT  nExpressionPos[2];
	CString  szExpressionError;
	CString  szExpressionText[3];
	CString  szExpressionOperator[3];
	CStringArray  szExpressionErrors[2];
	CStringArray  pExpressionParameters[2];

	if (TranslateDerivationExpression(pszTag, pszExpression, pParameters, szExpressionText[0], pExpressionParameters[0], (nExpressionPos[0] = nPos), szExpressionErrors[0]))
	{
		if ((szExpressionOperator[0] = CheckDerivationOperator(pszExpression, (nExpressionPos[1] = SkipSpaces(pszExpression, nExpressionPos[0])))) == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_EQUAL) || szExpressionOperator[0] == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_UNEQUAL) || szExpressionOperator[0] == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_SMALLEREQUAL) || szExpressionOperator[0] == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_SMALLER) || szExpressionOperator[0] == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_BIGGEREQUAL) || szExpressionOperator[0] == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_BIGGER))
		{
			if (TranslateDerivationExpression(pszTag, pszExpression, pParameters, szExpressionText[1], pExpressionParameters[0], (nExpressionPos[0] = nExpressionPos[1]), szExpressionErrors[0]))
			{
				if ((szExpressionOperator[1] = CheckDerivationOperator(pszExpression, (nExpressionPos[1] = SkipSpaces(pszExpression, nExpressionPos[0])))) == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_EQUAL) || szExpressionOperator[1] == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_UNEQUAL) || szExpressionOperator[1] == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_SMALLEREQUAL) || szExpressionOperator[1] == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_SMALLER) || szExpressionOperator[1] == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_BIGGEREQUAL) || szExpressionOperator[1] == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_BIGGER))
				{
					if (TranslateDerivationExpression(pszTag, pszExpression, pParameters, szExpressionText[2], pExpressionParameters[0], (nExpressionPos[0] = nExpressionPos[1]), szExpressionErrors[0]))
					{
						for (SkipSpaces(pszExpression, nExpressionPos[0]), szExpression = szExpressionText[0] + SPACE + TranslateDerivationOperator(szExpressionOperator[0]) + SPACE + szExpressionText[1] + SPACE + STRING(IDS_DERIVATIONLANGUAGE_OPERATOR_AND) + SPACE + szExpressionText[1] + SPACE + TranslateDerivationOperator(szExpressionOperator[1]) + SPACE + szExpressionText[2]; (szExpressionOperator[2] = CheckDerivationOperator(pszExpression, (nExpressionPos[1] = nExpressionPos[0]))) == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_AND) || szExpressionOperator[2] == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_OR); SkipSpaces(pszExpression, nExpressionPos[0]))
						{
							if (TranslateDerivationCondition(pszTag, pszExpression, pParameters, szExpressionText[2], pExpressionParameters[0], (nExpressionPos[0] = nExpressionPos[1]), szExpressionErrors[0]))
							{
								szExpression += SPACE + TranslateDerivationOperator(szExpressionOperator[2]) + SPACE + szExpressionText[2];
								continue;
							}
							break;
						}
						if (szExpressionOperator[2] != STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_AND) && szExpressionOperator[2] != STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_OR))
						{
							AppendDerivationParameters(pExpressionParameters[0], pDerivationExpressionParameters);
							nPos = nExpressionPos[0];
							return TRUE;
						}
					}
					AppendDerivationErrors(szExpressionErrors[0], szErrors);
					nPos = nExpressionPos[0];
					szExpression.Empty();
					return FALSE;
				}
				for (SkipSpaces(pszExpression, nExpressionPos[0]), szExpression = szExpressionText[0] + SPACE + TranslateDerivationOperator(szExpressionOperator[0]) + SPACE + szExpressionText[1]; (szExpressionOperator[2] = CheckDerivationOperator(pszExpression, (nExpressionPos[1] = nExpressionPos[0]))) == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_AND) || szExpressionOperator[2] == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_OR); SkipSpaces(pszExpression, nExpressionPos[0]))
				{
					if (TranslateDerivationCondition(pszTag, pszExpression, pParameters, szExpressionText[2], pExpressionParameters[0], (nExpressionPos[0] = nExpressionPos[1]), szExpressionErrors[0]))
					{
						szExpression += SPACE + TranslateDerivationOperator(szExpressionOperator[2]) + SPACE + szExpressionText[2];
						continue;
					}
					break;
				}
				if (szExpressionOperator[2] != STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_AND) && szExpressionOperator[2] != STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_OR))
				{
					AppendDerivationParameters(pExpressionParameters[0], pDerivationExpressionParameters);
					nPos = nExpressionPos[0];
					return TRUE;
				}
			}
			AppendDerivationErrors(szExpressionErrors[0], szErrors);
			nPos = nExpressionPos[0];
			szExpression.Empty();
			return FALSE;
		}
		for (SkipSpaces(pszExpression, nExpressionPos[0]), szExpression = szExpressionText[0]; (szExpressionOperator[1] = CheckDerivationOperator(pszExpression, (nExpressionPos[1] = nExpressionPos[0]))) == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_AND) || szExpressionOperator[1] == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_OR); SkipSpaces(pszExpression, nExpressionPos[0]))
		{
			if (TranslateDerivationCondition(pszTag, pszExpression, pParameters, szExpressionText[1], pExpressionParameters[0], (nExpressionPos[0] = nExpressionPos[1]), szExpressionErrors[0]))
			{
				szExpression += SPACE + TranslateDerivationOperator(szExpressionOperator[1]) + SPACE + szExpressionText[1];
				continue;
			}
			break;
		}
		if (szExpressionOperator[1] != STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_AND) && szExpressionOperator[1] != STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_OR))
		{
			AppendDerivationParameters(pExpressionParameters[0], pDerivationExpressionParameters);
			nPos = nExpressionPos[0];
			return TRUE;
		}
		AppendDerivationErrors(szExpressionErrors[0], szErrors);
		nPos = nExpressionPos[0];
		szExpression.Empty();
		return FALSE;
	}
	if ((szExpressionOperator[0] = CheckDerivationOperator(pszExpression, (nExpressionPos[0] = SkipSpaces(pszExpression, nPos)))) == STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_NOT))
	{
		if (TranslateDerivationCondition(pszTag, pszExpression, pParameters, szExpressionText[0], pExpressionParameters[1], nExpressionPos[0], szExpressionErrors[1]))
		{
			for (SkipSpaces(pszExpression, nExpressionPos[0]), szExpression = TranslateDerivationOperator(szExpressionOperator[0]) + szExpressionText[0]; (szExpressionOperator[1] = CheckDerivationOperator(pszExpression, (nExpressionPos[1] = nExpressionPos[0]))) == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_AND) || szExpressionOperator[1] == STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_OR); SkipSpaces(pszExpression, nExpressionPos[0]))
			{
				if (TranslateDerivationCondition(pszTag, pszExpression, pParameters, szExpressionText[1], pExpressionParameters[1], (nExpressionPos[0] = nExpressionPos[1]), szExpressionErrors[1]))
				{
					szExpression += SPACE + TranslateDerivationOperator(szExpressionOperator[1]) + SPACE + szExpressionText[1];
					continue;
				}
				break;
			}
			if (szExpressionOperator[1] != STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_AND) && szExpressionOperator[1] != STRING(IDS_DERIVATIONEXPRESSION_OPERATOR_OR))
			{
				AppendDerivationParameters(pExpressionParameters[1], pDerivationExpressionParameters);
				nPos = nExpressionPos[0];
				return TRUE;
			}
		}
		AppendDerivationErrors(szExpressionErrors[1], szErrors);
		nPos = nExpressionPos[0];
		szExpression.Empty();
		return FALSE;
	}
	AppendDerivationErrors(szExpressionErrors[0], szErrors);
	nPos = nExpressionPos[0];
	szExpression.Empty();
	return FALSE;
}

BOOL CALTELDatabaseEngine::TranslateDerivationTerm(LPCTSTR pszTag, LPCTSTR pszExpression, CONST CStringArray &pParameters, CString &szExpression, CStringArray &pDerivationExpressionParameters, INT &nPos, CStringArray &szErrors) CONST
{
	INT  nExpressionPos[2];
	CString  szExpressionText[2];
	CString  szExpressionOperator;
	CString  szExpressionFunction;
	CStringArray  szExpressionErrors;
	CStringArray  pExpressionParameters;

	if (TranslateDerivationFactor(pszTag, pszExpression, pParameters, szExpressionText[0], pExpressionParameters, (nExpressionPos[0] = nPos), szExpressionErrors))
	{
		for (SkipSpaces(pszExpression, nExpressionPos[0]); (szExpressionOperator = pszExpression[nExpressionPos[0]]) == STRING(IDS_DERIVEDLANGUAGE_OPERATOR_MULTIPLICATION) || szExpressionOperator == STRING(IDS_DERIVEDLANGUAGE_OPERATOR_DIVISION) || (szExpressionFunction = CheckDerivationFunction(pszExpression, (nExpressionPos[1] = nExpressionPos[0]))) == STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_MIN) || szExpressionFunction == STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_MAX); SkipSpaces(pszExpression, nExpressionPos[0]))
		{
			if (TranslateDerivationFactor(pszTag, pszExpression, pParameters, szExpressionText[1], pExpressionParameters, (nExpressionPos[0] = (szExpressionFunction.IsEmpty()) ? (nExpressionPos[0] + lstrlen(szExpressionOperator)) : nExpressionPos[1]), szExpressionErrors))
			{
				szExpressionText[0] = (szExpressionFunction.IsEmpty()) ? (szExpressionText[0] + szExpressionOperator + szExpressionText[1]) : (TranslateDerivationFunction(szExpressionFunction) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + szExpressionText[0] + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_SEPARATOR) + szExpressionText[1] + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE));
				szExpressionText[1].Empty();
				szExpressionOperator.Empty();
				szExpressionFunction.Empty();
				continue;
			}
			break;
		}
		if (szExpressionOperator != STRING(IDS_DERIVEDLANGUAGE_OPERATOR_MULTIPLICATION) && szExpressionOperator != STRING(IDS_DERIVEDLANGUAGE_OPERATOR_DIVISION) && szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_MIN) && szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_MAX))
		{
			AppendDerivationParameters(pExpressionParameters, pDerivationExpressionParameters);
			szExpression = szExpressionText[0];
			nPos = nExpressionPos[0];
			return TRUE;
		}
	}
	AppendDerivationErrors(szExpressionErrors, szErrors);
	nPos = nExpressionPos[0];
	szExpression.Empty();
	return FALSE;
}

BOOL CALTELDatabaseEngine::TranslateDerivationFactor(LPCTSTR pszTag, LPCTSTR pszExpression, CONST CStringArray &pParameters, CString &szExpression, CStringArray &pDerivationExpressionParameters, INT &nPos, CStringArray &szErrors) CONST
{
	INT  nExpressionLevel;
	INT  nExpressionPos[3];
	CString  szExpressionFlag;
	CString  szExpressionError;
	CString  szExpressionText[3];
	CString  szExpressionFunction;
	CString  szExpressionProcedure;
	CString  szExpressionSymbol[2];
	CStringArray  szExpressionErrors[3];
	CStringArray  pExpressionParameters[3];

	if (pszExpression[SkipSpaces(pszExpression, (nExpressionPos[0] = nPos))] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE))
	{
		if (TranslateDerivationExpression(pszTag, pszExpression, pParameters, szExpressionText[0], pExpressionParameters[0], (nExpressionPos[1] = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE))), szExpressionErrors[0]))
		{
			if (pszExpression[SkipSpaces(pszExpression, nExpressionPos[1])] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE))
			{
				szExpression = STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + szExpressionText[0] + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE);
				nPos = nExpressionPos[1] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE));
				AppendDerivationParameters(pExpressionParameters[0], pDerivationExpressionParameters);
				return TRUE;
			}
			szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGRIGHTPARANTHESE), pszTag, nExpressionPos[1] + 1);
			szExpressionErrors[0].Add(szExpressionError);
		}
		if (TranslateDerivationCondition(pszTag, pszExpression, pParameters, szExpressionText[0], pExpressionParameters[1], (nExpressionPos[1] = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE))), szExpressionErrors[1]))
		{
			if (pszExpression[SkipSpaces(pszExpression, nExpressionPos[1])] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE))
			{
				szExpression = STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + szExpressionText[0] + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE);
				nPos = nExpressionPos[1] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE));
				AppendDerivationParameters(pExpressionParameters[1], pDerivationExpressionParameters);
				return TRUE;
			}
			szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGRIGHTPARANTHESE), pszTag, nExpressionPos[1] + 1);
			szExpressionErrors[1].Add(szExpressionError);
		}
		AppendDerivationErrors(szExpressionErrors[0], szErrors);
		nPos = nExpressionPos[0];
		szExpression.Empty();
		return FALSE;
	}
	if (pszExpression[nExpressionPos[0]] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_QUOTE))
	{
		if (TranslateDerivationText(pszTag, pszExpression, szExpressionText[0], (nExpressionPos[0] = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_QUOTE))), szExpressionErrors[0]))
		{
			if (pszExpression[nExpressionPos[0]] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_QUOTE))
			{
				szExpression = STRING(IDS_DERIVEDLANGUAGE_KEYWORD_TEXT);
				szExpression += STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE);
				szExpression += STRING(IDS_DERIVEDLANGUAGE_SYMBOL_DOUBLEQUOTE);
				szExpression += szExpressionText[0];
				szExpression += STRING(IDS_DERIVEDLANGUAGE_SYMBOL_DOUBLEQUOTE);
				szExpression += STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE);
				nPos = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_QUOTE));
				return TRUE;
			}
			szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGQUOTE), pszTag, nExpressionPos[0] + 1);
			szExpressionErrors[0].Add(szExpressionError);
		}
		AppendDerivationErrors(szExpressionErrors[0], szErrors);
		nPos = nExpressionPos[0];
		szExpression.Empty();
		return FALSE;
	}
	if ((szExpressionProcedure = CheckDerivationProcedure(pszExpression, nExpressionPos[0])) == STRING(IDS_DERIVATIONEXPRESSION_PROCEDURE_BANDWIDTH))
	{
		szExpression = CString(STRING(IDS_DERIVEDLANGUAGE_MACRO_GETAVAILABLETMBANDWIDTH)) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE);
		nPos = lstrlen(pszExpression);
		return TRUE;
	}
	if (szExpressionProcedure == STRING(IDS_DERIVATIONEXPRESSION_PROCEDURE_LRVSTORE) || szExpressionProcedure == STRING(IDS_DERIVATIONEXPRESSION_PROCEDURE_TIMEDRIFT) || szExpressionProcedure == STRING(IDS_DERIVATIONEXPRESSION_PROCEDURE_GYROORD) || szExpressionProcedure == STRING(IDS_DERIVATIONEXPRESSION_PROCEDURE_OPALE) || szExpressionProcedure == STRING(IDS_DERIVATIONEXPRESSION_PROCEDURE_MATH2) || szExpressionProcedure == STRING(IDS_DERIVATIONEXPRESSION_PROCEDURE_MATH3))
	{
		nPos = lstrlen(pszExpression);
		szExpression.Empty();
		return TRUE;
	}
	if (szExpressionProcedure == STRING(IDS_DERIVATIONEXPRESSION_PROCEDURE_PASTVALUE))
	{
		if (pszExpression[nExpressionPos[0]] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE))
		{
			if (TranslateDerivationParameter(pszTag, pszExpression, pParameters, szExpressionText[0], pExpressionParameters[0], (nExpressionPos[0] = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE))), szExpressionErrors[0]))
			{
				if ((szExpressionSymbol[0] = pszExpression[(nExpressionPos[0] = SkipSpaces(pszExpression, nExpressionPos[0]))]) == STRING(IDS_DERIVEDLANGUAGE_SYMBOL_SEPARATOR) || szExpressionSymbol[0] == STRING(IDS_DERIVEDLANGUAGE_SYMBOL_COLON))
				{
					if (TranslateDerivationNumber(pszTag, pszExpression, pParameters, szExpressionText[1], pExpressionParameters[0], (nExpressionPos[0] = nExpressionPos[0] + lstrlen(szExpressionSymbol[0])), szExpressionErrors[0]))
					{
						if ((szExpressionSymbol[1] = pszExpression[(nExpressionPos[0] = SkipSpaces(pszExpression, nExpressionPos[0]))]) == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_SEPARATOR))
						{
							if (!_tcsnicmp(&pszExpression[(nExpressionPos[0] = SkipSpaces(pszExpression, (nExpressionPos[0] = nExpressionPos[0] + lstrlen(szExpressionSymbol[1]))))], szExpressionFlag, lstrlen((szExpressionFlag = STRING(IDS_DERIVATIONEXPRESSION_ARGUMENT_YES)))) || !_tcsnicmp(&pszExpression[nExpressionPos[0]], szExpressionFlag, lstrlen((szExpressionFlag = STRING(IDS_DERIVATIONEXPRESSION_ARGUMENT_NO)))))
							{
								if (pszExpression[(nExpressionPos[0] = SkipSpaces(pszExpression, (nExpressionPos[0] = nExpressionPos[0] + lstrlen(szExpressionFlag))))] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE))
								{
									szExpression = STRING(IDS_DERIVEDLANGUAGE_MACRO_GETPASTNUMERICALVALUE) + (STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + szExpressionText[0]) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_SEPARATOR) + szExpressionText[1] + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE);
									AppendDerivationParameters(pExpressionParameters[0], pDerivationExpressionParameters);
									nPos = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE));
									return TRUE;
								}
								szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGRIGHTPARANTHESE), pszTag, nExpressionPos[0] + 1);
								szExpressionErrors[0].Add(szExpressionError);
							}
							else
							{
								szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_ILLEGALARGUMENT), pszTag, nExpressionPos[0] + 1);
								szExpressionErrors[0].Add(szExpressionError);
							}
						}
						else
						{
							if (pszExpression[nExpressionPos[0]] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE))
							{
								szExpression = STRING(IDS_DERIVEDLANGUAGE_MACRO_GETPASTNUMERICALVALUE) + (STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + szExpressionText[0]) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_SEPARATOR) + szExpressionText[1] + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE);
								AppendDerivationParameters(pExpressionParameters[0], pDerivationExpressionParameters);
								nPos = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE));
								return TRUE;
							}
							szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGRIGHTPARANTHESE), pszTag, nExpressionPos[0] + 1);
							szExpressionErrors[0].Add(szExpressionError);
						}
					}
				}
				else
				{
					szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGCOMMA), pszTag, nExpressionPos[0] + 1);
					szExpressionErrors[0].Add(szExpressionError);
				}
			}
		}
		else
		{
			szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGLEFTPARANTHESE), pszTag, nExpressionPos[0] + 1);
			szExpressionErrors[0].Add(szExpressionError);
		}
		AppendDerivationErrors(szExpressionErrors[0], szErrors);
		nPos = nExpressionPos[0];
		szExpression.Empty();
		return FALSE;
	}
	if (szExpressionProcedure == STRING(IDS_DERIVATIONEXPRESSION_PROCEDURE_RUNNINGAVERAGE))
	{
		if (pszExpression[nExpressionPos[0]] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE))
		{
			if (TranslateDerivationParameter(pszTag, pszExpression, pParameters, szExpressionText[0], pExpressionParameters[0], (nExpressionPos[0] = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE))), szExpressionErrors[0]))
			{
				if ((szExpressionSymbol[0] = pszExpression[(nExpressionPos[0] = SkipSpaces(pszExpression, nExpressionPos[0]))]) == STRING(IDS_DERIVEDLANGUAGE_SYMBOL_SEPARATOR) || szExpressionSymbol[0] == STRING(IDS_DERIVEDLANGUAGE_SYMBOL_COLON))
				{
					if (TranslateDerivationNumber(pszTag, pszExpression, pParameters, szExpressionText[1], pExpressionParameters[0], (nExpressionPos[0] = nExpressionPos[0] + lstrlen(szExpressionSymbol[0])), szExpressionErrors[0]))
					{
						if (pszExpression[(nExpressionPos[0] = SkipSpaces(pszExpression, nExpressionPos[0]))] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE))
						{
							szExpression = STRING(IDS_DERIVEDLANGUAGE_MACRO_CALCULATEVALUEAVERAGE) + (STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + szExpressionText[0]) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_SEPARATOR) + szExpressionText[1] + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE);
							AppendDerivationParameters(pExpressionParameters[0], pDerivationExpressionParameters);
							nPos = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE));
							return TRUE;
						}
						szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGRIGHTPARANTHESE), pszTag, nExpressionPos[0] + 1);
						szExpressionErrors[0].Add(szExpressionError);
					}
				}
				else
				{
					szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGCOMMA), pszTag, nExpressionPos[0] + 1);
					szExpressionErrors[0].Add(szExpressionError);
				}
			}
		}
		else
		{
			szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGLEFTPARANTHESE), pszTag, nExpressionPos[0] + 1);
			szExpressionErrors[0].Add(szExpressionError);
		}
		AppendDerivationErrors(szExpressionErrors[0], szErrors);
		nPos = nExpressionPos[0];
		szExpression.Empty();
		return FALSE;
	}
	if (szExpressionProcedure == STRING(IDS_DERIVATIONEXPRESSION_PROCEDURE_UNCAL))
	{
		if (pszExpression[nExpressionPos[0]] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE))
		{
			if (TranslateDerivationParameter(pszTag, pszExpression, pParameters, szExpressionText[0], pExpressionParameters[0], (nExpressionPos[0] = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE))), szExpressionErrors[0]))
			{
				if (pszExpression[(nExpressionPos[0] = SkipSpaces(pszExpression, nExpressionPos[0]))] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE))
				{
					szExpression = STRING(IDS_DERIVEDLANGUAGE_MACRO_GETRAWVALUE) + (STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + szExpressionText[0]) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE);
					AppendDerivationParameters(pExpressionParameters[0], pDerivationExpressionParameters);
					nPos = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE));
					return TRUE;
				}
				szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGRIGHTPARANTHESE), pszTag, nExpressionPos[0] + 1);
				szExpressionErrors[0].Add(szExpressionError);
			}
		}
		else
		{
			szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGLEFTPARANTHESE), pszTag, nExpressionPos[0] + 1);
			szExpressionErrors[0].Add(szExpressionError);
		}
		AppendDerivationErrors(szExpressionErrors[0], szErrors);
		nPos = nExpressionPos[0];
		szExpression.Empty();
		return FALSE;
	}
	if (lstrlen((szExpressionFunction = CheckDerivationFunction(pszExpression, nExpressionPos[0]))) > 0)
	{
		if (pszExpression[SkipSpaces(pszExpression, nExpressionPos[0])] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE))
		{
			if (szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_SPACECRAFTORBITLONGITUDE) && szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_SPACECRAFTORBITLATITUDE) && szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_SPACECRAFTORBITALTITUDE) && szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_SPACECRAFTORBITVELOCITY) && szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_SPACECRAFTPOSITION) && szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_SPACECRAFTVELOCITY) && szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_SPACECRAFTPASSSTARTTIME) && szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_SPACECRAFTPASSSTOPTIME) && szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_SPACECRAFTINTERLINKSTARTTIME) && szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_SPACECRAFTINTERLINKSTOPTIME))
			{
				if (TranslateDerivationExpression(pszTag, pszExpression, pParameters, szExpressionText[1], pExpressionParameters[0], (nExpressionPos[0] = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE))), szExpressionErrors[0]))
				{
					if (szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_MIN) && szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_MAX) && pszExpression[SkipSpaces(pszExpression, nExpressionPos[0])] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE))
					{
						szExpression = TranslateDerivationFunction(szExpressionFunction) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + szExpressionText[1] + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE);
						AppendDerivationParameters(pExpressionParameters[0], pDerivationExpressionParameters);
						nPos = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE));
						return TRUE;
					}
					if ((szExpressionFunction == STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_MIN) || szExpressionFunction == STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_MAX)) && pszExpression[SkipSpaces(pszExpression, nExpressionPos[0])] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_SEPARATOR))
					{
						if (TranslateDerivationExpression(pszTag, pszExpression, pParameters, szExpressionText[2], pExpressionParameters[0], (nExpressionPos[0] = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_SEPARATOR))), szExpressionErrors[0]))
						{
							if (pszExpression[SkipSpaces(pszExpression, nExpressionPos[0])] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE))
							{
								szExpression = TranslateDerivationFunction(szExpressionFunction) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + szExpressionText[1] + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_SEPARATOR) + szExpressionText[2] + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE);
								AppendDerivationParameters(pExpressionParameters[0], pDerivationExpressionParameters);
								nPos = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE));
								return TRUE;
							}
							szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGRIGHTPARANTHESE), pszTag, nExpressionPos[0] + 1);
							szExpressionErrors[0].Add(szExpressionError);
						}
					}
					else
					{
						szExpressionError.Format((szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_MIN) && szExpressionFunction != STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_MAX)) ? STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGRIGHTPARANTHESE) : STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGCOMMA), pszTag, nExpressionPos[0] + 1);
						szExpressionErrors[0].Add(szExpressionError);
					}
				}
			}
			else
			{
				for (nExpressionPos[0] += lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE)), nExpressionPos[1] = nExpressionPos[0], nExpressionLevel = 0; nExpressionPos[0] < lstrlen(pszExpression); nExpressionPos[0]++)
				{
					if (!_tcsncmp(&pszExpression[nExpressionPos[0]], STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE), lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE))))
					{
						nExpressionLevel++;
						continue;
					}
					if (!_tcsncmp(&pszExpression[nExpressionPos[0]], STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE), lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE))))
					{
						if (!nExpressionLevel) break;
						nExpressionLevel--;
					}
				}
				if (nExpressionPos[0] < lstrlen(pszExpression))
				{
					if (szExpressionFunction == STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_SPACECRAFTPOSITION) || szExpressionFunction == STRING(IDS_DERIVATIONEXPRESSION_FUNCTION_SPACECRAFTVELOCITY))
					{
						if (CString(pszExpression).Mid(nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE)), lstrlen(STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_X))) == STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_X))
						{
							szExpression = TranslateDerivationFunction(szExpressionFunction) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + CString(pszExpression).Mid(nExpressionPos[1], nExpressionPos[0] - nExpressionPos[1]) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE) + STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_X);
							nPos = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE)) + lstrlen(STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_X));
							return TRUE;
						}
						if (CString(pszExpression).Mid(nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE)), lstrlen(STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Y))) == STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Y))
						{
							szExpression = TranslateDerivationFunction(szExpressionFunction) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + CString(pszExpression).Mid(nExpressionPos[1], nExpressionPos[0] - nExpressionPos[1]) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE) + STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Y);
							nPos = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE)) + lstrlen(STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Y));
							return TRUE;
						}
						if (CString(pszExpression).Mid(nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE)), lstrlen(STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Z))) == STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Z))
						{
							szExpression = TranslateDerivationFunction(szExpressionFunction) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + CString(pszExpression).Mid(nExpressionPos[1], nExpressionPos[0] - nExpressionPos[1]) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE) + STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Z);
							nPos = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE)) + lstrlen(STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Z));
							return TRUE;
						}
						if (CString(pszExpression).Mid(nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE)), lstrlen(STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_X))) == STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_X))
						{
							szExpression = TranslateDerivationFunction(szExpressionFunction) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + CString(pszExpression).Mid(nExpressionPos[1], nExpressionPos[0] - nExpressionPos[1]) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE) + STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_X);
							nPos = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE)) + lstrlen(STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_X));
							return TRUE;
						}
						if (CString(pszExpression).Mid(nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE)), lstrlen(STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Y))) == STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Y))
						{
							szExpression = TranslateDerivationFunction(szExpressionFunction) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + CString(pszExpression).Mid(nExpressionPos[1], nExpressionPos[0] - nExpressionPos[1]) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE) + STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Y);
							nPos = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE)) + lstrlen(STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Y));
							return TRUE;
						}
						if (CString(pszExpression).Mid(nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE)), lstrlen(STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Z))) == STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Z))
						{
							szExpression = TranslateDerivationFunction(szExpressionFunction) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + CString(pszExpression).Mid(nExpressionPos[1], nExpressionPos[0] - nExpressionPos[1]) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE) + STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Z);
							nPos = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE)) + lstrlen(STRING(IDS_DERIVATIONLANGUAGE_DATAMEMBER_Z));
							return TRUE;
						}
					}
					szExpression = TranslateDerivationFunction(szExpressionFunction) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE) + CString(pszExpression).Mid(nExpressionPos[1], nExpressionPos[0] - nExpressionPos[1]) + STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE);
					nPos = nExpressionPos[0] + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE));
					return TRUE;
				}
				else
				{
					szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGRIGHTPARANTHESE), pszTag, nExpressionPos[0] + 1);
					szExpressionErrors[0].Add(szExpressionError);
				}
			}
		}
		else
		{
			szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGLEFTPARANTHESE), pszTag, nExpressionPos[0] + 1);
			szExpressionErrors[0].Add(szExpressionError);
		}
		AppendDerivationErrors(szExpressionErrors[0], szErrors);
		nPos = nExpressionPos[0];
		szExpression.Empty();
		return FALSE;
	}
	if (TranslateDerivationParameter(pszTag, pszExpression, pParameters, szExpressionText[1], pExpressionParameters[1], (nExpressionPos[1] = nExpressionPos[0]), szExpressionErrors[1]))
	{
		AppendDerivationParameters(pExpressionParameters[1], pDerivationExpressionParameters);
		szExpression = szExpressionText[1];
		nPos = nExpressionPos[1];
		return TRUE;
	}
	if (TranslateDerivationNumber(pszTag, pszExpression, pParameters, szExpressionText[2], pExpressionParameters[2], (nExpressionPos[2] = nExpressionPos[0]), szExpressionErrors[2]))
	{
		AppendDerivationParameters(pExpressionParameters[2], pDerivationExpressionParameters);
		szExpression = szExpressionText[2];
		nPos = nExpressionPos[2];
		return TRUE;
	}
	szExpressionError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_ILLEGALPARAMETERORDIGIT), pszTag, nExpressionPos[0] + 1);
	szExpressionErrors[0].Add(szExpressionError);
	AppendDerivationErrors(szExpressionErrors[0], szErrors);
	nPos = nExpressionPos[0];
	szExpression.Empty();
	return FALSE;
}

BOOL CALTELDatabaseEngine::TranslateDerivationParameter(LPCTSTR pszTag, LPCTSTR pszExpression, CONST CStringArray &pParameters, CString &szExpression, CStringArray &pDerivationExpressionParameters, INT &nPos, CStringArray &szErrors) CONST
{
	INT  nParameterPos;
	INT  nParameterLen;
	CString  szParameter;
	CString  szParameterError;
	CStringArray  szParameters;
	CStringArray  szParameterErrors;

	if (pszExpression[SkipSpaces(pszExpression, (nParameterPos = nPos))] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE))
	{
		if (TranslateDerivationParameter(pszTag, pszExpression, pParameters, szParameter, szParameters, (nParameterPos = nParameterPos + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_LEFTPARANTHESE))), szParameterErrors))
		{
			if (pszExpression[SkipSpaces(pszExpression, nParameterPos)] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE))
			{
				AppendDerivationParameters(szParameters, pDerivationExpressionParameters);
				nPos = nParameterPos + lstrlen(STRING(IDS_DERIVEDLANGUAGE_SYMBOL_RIGHTPARANTHESE));
				szExpression = szParameter;
				return TRUE;
			}
			szParameterError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_MISSINGRIGHTPARANTHESE), pszTag, nParameterPos + 1);
			szParameterErrors.Add(szParameterError);
		}
		AppendDerivationErrors(szParameterErrors, szErrors);
		nPos = nParameterPos;
		szExpression.Empty();
		return FALSE;
	}
	for (nParameterLen = 0; nParameterLen <= GetTMParameterTagLength() && nParameterPos < lstrlen(pszExpression); nParameterLen++)
	{
		if (CheckTMParameterTag(szParameter + pszExpression[nParameterPos]))
		{
			szParameter += pszExpression[nParameterPos];
			nParameterPos++;
			continue;
		}
		break;
	}
	if (FindDerivationParameter(pParameters, szParameter, FALSE) >= 0)
	{
		pDerivationExpressionParameters.Add(szParameter);
		szExpression = szParameter;
		nPos = nParameterPos;
		return TRUE;
	}
	szParameterError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_ILLEGALPARAMETER), pszTag, nParameterPos - lstrlen(szParameter) + 1);
	szErrors.Add(szParameterError);
	szExpression.Empty();
	return FALSE;
}

BOOL CALTELDatabaseEngine::TranslateDerivationNumber(LPCTSTR pszTag, LPCTSTR pszExpression, CONST CStringArray &pParameters, CString &szExpression, CStringArray &pDerivationExpressionParameters, INT &nPos, CStringArray &szErrors) CONST
{
	INT  nNumberPos;
	INT  nNumberLen;
	LPTSTR  pszNumberPos;
	CString  szNumberText;
	CString  szNumberSign;
	CString  szNumberError;

	for (SkipSpaces(pszExpression, (nNumberPos = nPos)); pszExpression[nNumberPos] == STRINGCHAR(IDS_DERIVATIONEXPRESSION_PREFIX_POSITIVE) || pszExpression[nNumberPos] == STRINGCHAR(IDS_DERIVATIONEXPRESSION_PREFIX_NEGATIVE); )
	{
		if (pszExpression[nNumberPos] == STRINGCHAR(IDS_DERIVATIONEXPRESSION_PREFIX_POSITIVE))
		{
			nNumberPos += lstrlen(STRING(IDS_DERIVATIONEXPRESSION_PREFIX_POSITIVE));
			break;
		}
		nNumberPos += lstrlen(STRING(IDS_DERIVATIONEXPRESSION_PREFIX_NEGATIVE));
		szNumberSign = pszExpression[nNumberPos];
		break;
	}
	if (pszExpression[nNumberPos] == STRINGCHAR(IDS_DERIVATIONEXPRESSION_PREFIX_HEX))
	{
		for (nNumberPos = nNumberPos + lstrlen(STRING(IDS_DERIVATIONEXPRESSION_PREFIX_HEX)); nNumberPos < lstrlen(pszExpression); nNumberPos++)
		{
			if (_istxdigit(pszExpression[nNumberPos]))
			{
				szNumberText += pszExpression[nNumberPos];
				continue;
			}
			break;
		}
		if (!szNumberText.IsEmpty())
		{
			szExpression = szNumberSign + STRING(IDS_DERIVATIONLANGUAGE_PREFIX_HEX) + szNumberText;
			nPos = nNumberPos;
			return TRUE;
		}
		szNumberError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_ILLEGALHEXDIGIT), pszTag, nNumberPos + 1);
		szErrors.Add(szNumberError);
		szExpression.Empty();
		nPos = nNumberPos;
		return FALSE;
	}
	for (_tcstod(&pszExpression[nNumberPos], &pszNumberPos); (nNumberLen = lstrlen(&pszExpression[nNumberPos]) - lstrlen(pszNumberPos)) > 0; )
	{
		_tcsncpy_s(szExpression.GetBufferSetLength(nNumberLen), nNumberLen + 1, &pszExpression[nNumberPos], nNumberLen);
		nPos = nNumberPos + nNumberLen;
		szExpression.ReleaseBuffer();
		return TRUE;
	}
	szNumberError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_ILLEGALDIGIT), pszTag, nNumberPos + 1);
	szErrors.Add(szNumberError);
	szExpression.Empty();
	nPos = nNumberPos;
	return FALSE;
}

BOOL CALTELDatabaseEngine::TranslateDerivationText(LPCTSTR pszTag, LPCTSTR pszExpression, CString &szExpression, INT &nPos, CStringArray &szErrors) CONST
{
	INT  nTextPos;
	CString  szText;
	CString  szTextError;

	for (nTextPos = nPos; nTextPos < lstrlen(pszExpression); nTextPos++)
	{
		if (pszExpression[nTextPos] != STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_QUOTE))
		{
			szText += pszExpression[nTextPos];
			continue;
		}
		break;
	}
	if (pszExpression[nTextPos] == STRINGCHAR(IDS_DERIVEDLANGUAGE_SYMBOL_QUOTE))
	{
		szExpression = szText;
		nPos = nTextPos;
		return TRUE;
	}
	szTextError.Format(STRING(IDS_DERIVATIONEXPRESSION_ERROR_ILLEGALCHARACTER), pszTag, nTextPos + 1);
	szErrors.Add(szTextError);
	szExpression.Empty();
	nPos = nTextPos;
	return FALSE;
}

VOID CALTELDatabaseEngine::AppendDerivationParameters(CONST CStringArray &szExpressionParameters, CStringArray &szParameters) CONST
{
	INT  nIndex;
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (INT)szExpressionParameters.GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((nIndex = FindDerivationParameter(szParameters, szExpressionParameters.GetAt(nParameter))) >= 0)
		{
			szParameters.InsertAt(nIndex, szExpressionParameters.GetAt(nParameter));
			continue;
		}
	}
}

INT CALTELDatabaseEngine::FindDerivationParameter(CONST CStringArray &szExpressionParameters, LPCTSTR pszTag, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nMinIndex;
	INT  nMaxIndex;

	for (nMinIndex = 0, nMaxIndex = (INT)szExpressionParameters.GetSize(), nIndex = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex = (nMinIndex + nMaxIndex) / 2)
	{
		if (szExpressionParameters.GetAt(nIndex) < pszTag)
		{
			nMinIndex = nIndex + 1;
			continue;
		}
		nMaxIndex = nIndex;
	}
	return(((!bInsert  &&  nIndex < szExpressionParameters.GetSize() && szExpressionParameters.GetAt(nIndex) == pszTag) || (bInsert  &&  nIndex <= szExpressionParameters.GetSize() && (!szExpressionParameters.GetSize() || (szExpressionParameters.GetAt(max(nIndex - 1, 0)) != pszTag  &&  szExpressionParameters.GetAt(min(nIndex, szExpressionParameters.GetUpperBound())) != pszTag  &&  lstrlen(pszTag) > 0)))) ? nIndex : -1);
}

VOID CALTELDatabaseEngine::AppendDerivationErrors(CONST CStringArray &szExpressionErrors, CStringArray &szErrors) CONST
{
	INT  nIndex;
	INT  nError;
	INT  nErrors;

	for (nError = 0, nErrors = (INT)szExpressionErrors.GetSize(); nError < nErrors; nError++)
	{
		if ((nIndex = FindDerivationError(szErrors, szExpressionErrors.GetAt(nError))) >= 0)
		{
			szErrors.InsertAt(nIndex, szExpressionErrors.GetAt(nError));
			continue;
		}
	}
}

INT CALTELDatabaseEngine::FindDerivationError(CONST CStringArray &szExpressionErrors, LPCTSTR pszError, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nMinIndex;
	INT  nMaxIndex;

	for (nMinIndex = 0, nMaxIndex = (INT)szExpressionErrors.GetSize(), nIndex = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex = (nMinIndex + nMaxIndex) / 2)
	{
		if (szExpressionErrors.GetAt(nIndex) < pszError)
		{
			nMinIndex = nIndex + 1;
			continue;
		}
		nMaxIndex = nIndex;
	}
	return(((!bInsert  &&  nIndex < szExpressionErrors.GetSize() && szExpressionErrors.GetAt(nIndex) == pszError) || (bInsert  &&  nIndex <= szExpressionErrors.GetSize() && (!szExpressionErrors.GetSize() || (szExpressionErrors.GetAt(max(nIndex - 1, 0)) != pszError  &&  szExpressionErrors.GetAt(min(nIndex, szExpressionErrors.GetUpperBound())) != pszError  &&  lstrlen(pszError) > 0)))) ? nIndex : -1);
}

BOOL CALTELDatabaseEngine::ConvertTCParameterConstValue(LPCTSTR pszTag, ULONGLONG nAttributes, LPCTSTR pszValue, ULONGLONG &nValue) CONST
{
	return GetTCProcessEngine()->ConvertTCParameterValue(this, pszTag, nAttributes, pszValue, nValue);
}
BOOL CALTELDatabaseEngine::ConvertTCParameterConstValue(CONST CDatabaseTCParameter *pDatabaseTCParameter, ULONGLONG &nValue) CONST
{
	return GetTCProcessEngine()->ConvertTCParameterValue(this, pDatabaseTCParameter, nValue);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceNesting(CBinaryDatabase *pDatabase, LPCTSTR pszName, CONST CDatabaseTCSequenceEntry *pDatabaseTCSequenceEntry) CONST
{
	CStringArray  szNames;

	szNames.Add(pszName);
	return CheckTCSequenceNesting(pDatabase, szNames, pDatabaseTCSequenceEntry);
}
BOOL CALTELDatabaseEngine::CheckTCSequenceNesting(CBinaryDatabase *pDatabase, CStringArray &szNames, CONST CDatabaseTCSequenceEntry *pDatabaseTCSequenceEntry) CONST
{
	INT  nName;
	INT  nNames;
	INT  nEntry;
	INT  nEntries;
	CDatabaseTCSequence  *pDatabaseTCSequence;

	if ((pDatabaseTCSequence = (pDatabaseTCSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_TYPE_SEQUENCE) ? pDatabase->GetTCSequences()->GetAt(pDatabase->GetTCSequences()->Find(pDatabaseTCSequenceEntry->GetName())) : (CDatabaseTCSequence *)NULL))
	{
		for (nName = 0, nNames = (INT)szNames.GetSize(); nName < nNames; nName++)
		{
			if (pDatabaseTCSequence->GetName() == szNames.GetAt(nName)) break;
			continue;
		}
		for (nEntry = 0, nEntries = (nName == nNames) ? (INT)pDatabaseTCSequence->GetSize() : -1; nEntry < nEntries; nEntry++)
		{
			if (pDatabaseTCSequence->GetAt(nEntry)->GetAttributes() & TCSEQUENCEENTRY_TYPE_SEQUENCE)
			{
				szNames.Add(pDatabaseTCSequence->GetName());
				if (!CheckTCSequenceNesting(pDatabase, szNames, pDatabaseTCSequence->GetAt(nEntry))) break;
			}
		}
		return(nEntry == nEntries);
	}
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTag(LPCTSTR pszTag, INT nLength, BOOL bVariable) CONST
{
	return((!bVariable) ? CheckIdentifier(pszTag, nLength, nLength) : CheckIdentifier(pszTag, 1, nLength));
}

BOOL CALTELDatabaseEngine::CheckName(LPCTSTR pszName, INT nLength, BOOL bVariable) CONST
{
	return((!bVariable) ? CheckIdentifier(pszName, nLength, nLength) : CheckIdentifier(pszName, 1, nLength));
}

BOOL CALTELDatabaseEngine::CheckIdentifier(LPCTSTR pszIdentifier, INT nMinLength, INT nMaxLength) CONST
{
	return((lstrlen(pszIdentifier) >= nMinLength  &&  lstrlen(pszIdentifier) <= nMaxLength  &&  _tcsspn(pszIdentifier, (nMaxLength >= 8) ? (CString(STRING(IDS_DATABASE_CHARSET_DEFAULTLETTERS)) + STRING(IDS_DATABASE_CHARSET_SPECIALLETTERS)) : STRING(IDS_DATABASE_CHARSET_DEFAULTLETTERS)) == lstrlen(pszIdentifier)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::SkipSpaces(LPCTSTR pszCode, INT &nPos) CONST
{
	while (nPos >= 0 && nPos < lstrlen(pszCode))
	{
		if (pszCode[nPos] == SPACE[0])
		{
			nPos = nPos + 1;
			continue;
		}
		break;
	}
	return nPos;
}

BOOL CALTELDatabaseEngine::CheckTMPacketTag(LPCTSTR pszTag) CONST
{
	return CheckTag(pszTag, GetTMPacketTagLength(), FALSE);
}

INT CALTELDatabaseEngine::GetTMPacketTagLength() CONST
{
	return 4;
}

CString CALTELDatabaseEngine::GetTMPacketSubTag() CONST
{
	return STRING(IDS_TMPACKET_TAG_DS16);
}

CString CALTELDatabaseEngine::GetTMPacketDummyTag() CONST
{
	return STRING(IDS_TMPACKET_TAG_DUMY);
}

BOOL CALTELDatabaseEngine::CheckTMPacketType(INT nType) CONST
{
	return((nType == TMPACKET_TYPE) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMPacketTypeLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTMPacketType(LPCTSTR pszType) CONST
{
	if (!lstrcmp(pszType, STRING(IDS_TMPACKET_TYPE))) return TMPACKET_TYPE;
	if (!lstrcmp(pszType, STRING(IDS_TCPACKET_TYPE))) return TCPACKET_TYPE;
	return -1;
}
CString CALTELDatabaseEngine::TranslateTMPacketType(INT nType) CONST
{
	if (nType == TMPACKET_TYPE) return STRING(IDS_TMPACKET_TYPE);
	if (nType == TCPACKET_TYPE) return STRING(IDS_TCPACKET_TYPE);
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTMPacketDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) > 0 && lstrlen(pszDescription) <= GetTMPacketDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMPacketDescriptionLength() CONST
{
	return 32;
}

BOOL CALTELDatabaseEngine::CheckTMPacketDetails(LPCTSTR pszDetails) CONST
{
	return((lstrlen(pszDetails) >= 0 && lstrlen(pszDetails) <= GetTMPacketDetailsLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMPacketDetailsLength() CONST
{
	return 254;
}

INT CALTELDatabaseEngine::EnumTMPacketDataFieldHeaderFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	nFlags.RemoveAll();
	szFlags.RemoveAll();
	nFlags.Add(TRUE);
	nFlags.Add(FALSE);
	szFlags.Add(STRING(IDS_TMPACKET_DATAFIELDHEADER_YES));
	szFlags.Add(STRING(IDS_TMPACKET_DATAFIELDHEADER_NO));
	return((INT)szFlags.GetSize());
}

INT CALTELDatabaseEngine::TranslateTMPacketDataFieldHeaderFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKET_DATAFIELDHEADER_DBMS_YES))) return TRUE;
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKET_DATAFIELDHEADER_DBMS_NO))) return FALSE;
	}
	else
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKET_DATAFIELDHEADER_YES))) return TRUE;
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKET_DATAFIELDHEADER_NO))) return FALSE;
	}
	return -1;
}
CString CALTELDatabaseEngine::TranslateTMPacketDataFieldHeaderFlag(INT nFlag, BOOL bDBMS) CONST
{
	if (nFlag == TRUE) return((!bDBMS) ? STRING(IDS_TMPACKET_DATAFIELDHEADER_YES) : STRING(IDS_TMPACKET_DATAFIELDHEADER_DBMS_YES));
	if (nFlag == FALSE) return((!bDBMS) ? STRING(IDS_TMPACKET_DATAFIELDHEADER_NO) : STRING(IDS_TMPACKET_DATAFIELDHEADER_DBMS_NO));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTMPacketDataFieldHeader(INT bPresent) CONST
{
	return((bPresent == 0 || bPresent == 1) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckTMPacketDataFieldHeaderName(LPCTSTR pszName) CONST
{
	return((lstrlen(pszName) > 0) ? CheckTMPacketHeaderName(pszName) : TRUE);
}

INT CALTELDatabaseEngine::GetTMPacketDataFieldHeaderNameLength() CONST
{
	return GetTMPacketHeaderNameLength();
}

INT CALTELDatabaseEngine::EnumTMPacketAPIDs(CStringArray &szAPIDs, CUIntArray &nAPIDs) CONST
{
	INT  nSubSystem;
	INT  nSubSystems;

	for (nSubSystem = 0, nSubSystems = GetTMProcessEngine()->EnumSubSystems(szAPIDs), nAPIDs.RemoveAll(); nSubSystem < nSubSystems; nSubSystem++)
	{
		nAPIDs.Add(GetTMProcessEngine()->TranslateSubSystemToID(szAPIDs.GetAt(nSubSystem)));
		continue;
	}
	return((INT)szAPIDs.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMPacketAPID(LPCTSTR pszTag, INT nAPID) CONST
{
	return(((lstrcmp(pszTag, GetTMPacketSubTag()) && nAPID > 0 && nAPID <= 0xFFF) || (!lstrcmp(pszTag, GetTMPacketSubTag()) && nAPID < 0)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMPacketAPIDLength() CONST
{
	return 3;
}

INT CALTELDatabaseEngine::TranslateTMPacketAPID(LPCTSTR pszAPID, BOOL bDBMS) CONST
{
	INT  i, j;
	INT  nAPID;
	TCHAR  szDigit;
	CString  szNumber[4];
	CStringTools  cStringTools;

	if (bDBMS)
	{
		for (i = 0, j = (lstrlen(pszAPID) == GetTMPacketAPIDLength()) ? GetTMPacketAPIDLength() : -1, nAPID = 0, szNumber[0] = cStringTools.ConvertIntToString(0), szNumber[1] = szNumber[2] = cStringTools.ConvertIntToString(10, 16), szNumber[2].MakeLower(); i < j; i++)
		{
			if (_istdigit((szNumber[3] = szDigit = pszAPID[i]).GetAt(0)))
			{
				nAPID = 16 * nAPID + szDigit - __toascii(szNumber[0][0]);
				continue;
			}
			if (_istxdigit(szDigit))
			{
				nAPID = (_istupper(szDigit)) ? (16 * nAPID + szDigit - __toascii(szNumber[1][0]) + 10) : (16 * nAPID + szDigit - __toascii(szNumber[2][0]) + 10);
				continue;
			}
			if (!_istspace(szDigit) || (!i  &&  _tcsspn(&pszAPID[i], szNumber[3]) == (size_t)(j - i)) || (nAPID != 0 && _tcsspn(&pszAPID[i], szNumber[3]) != (size_t)(j - i))) break;
		}
		return((i == j) ? nAPID : -1);
	}
	return GetTMProcessEngine()->TranslateSubSystemToID(pszAPID);
}
CString CALTELDatabaseEngine::TranslateTMPacketAPID(INT nAPID, BOOL bDBMS) CONST
{
	CStringTools  cStringTools;

	return((!bDBMS) ? GetTMProcessEngine()->TranslateIDToSubSystem(nAPID) : cStringTools.ConvertIntToPaddedString(nAPID, 3, 16));
}

INT CALTELDatabaseEngine::EnumTMPacketTMTypes(CStringArray &szTMTypes, CUIntArray &nTMTypes) CONST
{
	nTMTypes.RemoveAll();
	szTMTypes.RemoveAll();
	nTMTypes.Add(TMPACKET_TMTYPE_CYCLIC);
	nTMTypes.Add(TMPACKET_TMTYPE_EXCEPTION);
	nTMTypes.Add(TMPACKET_TMTYPE_OVERSAMPLED);
	nTMTypes.Add(TMPACKET_TMTYPE_REPORT);
	nTMTypes.Add(TMPACKET_TMTYPE_DUMP);
	szTMTypes.Add(STRING(IDS_TMPACKET_TMTYPE_CYCLIC));
	szTMTypes.Add(STRING(IDS_TMPACKET_TMTYPE_EXCEPTION));
	szTMTypes.Add(STRING(IDS_TMPACKET_TMTYPE_OVERSAMPLED));
	szTMTypes.Add(STRING(IDS_TMPACKET_TMTYPE_REPORT));
	szTMTypes.Add(STRING(IDS_TMPACKET_TMTYPE_DUMP));
	return((INT)szTMTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMPacketTMType(INT nTMType) CONST
{
	return((nTMType == TMPACKET_TMTYPE_CYCLIC || nTMType == TMPACKET_TMTYPE_EXCEPTION || nTMType == TMPACKET_TMTYPE_OVERSAMPLED || nTMType == TMPACKET_TMTYPE_REPORT || nTMType == TMPACKET_TMTYPE_DUMP) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMPacketTMTypeLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTMPacketTMType(LPCTSTR pszTMType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszTMType, STRING(IDS_TMPACKET_TMTYPE_DBMS_CYCLIC))) return TMPACKET_TMTYPE_CYCLIC;
		if (!lstrcmp(pszTMType, STRING(IDS_TMPACKET_TMTYPE_DBMS_EXCEPTION))) return TMPACKET_TMTYPE_EXCEPTION;
		if (!lstrcmp(pszTMType, STRING(IDS_TMPACKET_TMTYPE_DBMS_OVERSAMPLED))) return TMPACKET_TMTYPE_OVERSAMPLED;
		if (!lstrcmp(pszTMType, STRING(IDS_TMPACKET_TMTYPE_DBMS_REPORT))) return TMPACKET_TMTYPE_REPORT;
		if (!lstrcmp(pszTMType, STRING(IDS_TMPACKET_TMTYPE_DBMS_DUMP))) return TMPACKET_TMTYPE_DUMP;
	}
	else
	{
		if (!lstrcmp(pszTMType, STRING(IDS_TMPACKET_TMTYPE_CYCLIC))) return TMPACKET_TMTYPE_CYCLIC;
		if (!lstrcmp(pszTMType, STRING(IDS_TMPACKET_TMTYPE_EXCEPTION))) return TMPACKET_TMTYPE_EXCEPTION;
		if (!lstrcmp(pszTMType, STRING(IDS_TMPACKET_TMTYPE_OVERSAMPLED))) return TMPACKET_TMTYPE_OVERSAMPLED;
		if (!lstrcmp(pszTMType, STRING(IDS_TMPACKET_TMTYPE_REPORT))) return TMPACKET_TMTYPE_REPORT;
		if (!lstrcmp(pszTMType, STRING(IDS_TMPACKET_TMTYPE_DUMP))) return TMPACKET_TMTYPE_DUMP;
	}
	return -1;
}
CString CALTELDatabaseEngine::TranslateTMPacketTMType(INT nTMType, BOOL bDBMS) CONST
{
	if (nTMType == TMPACKET_TMTYPE_CYCLIC) return((!bDBMS) ? STRING(IDS_TMPACKET_TMTYPE_CYCLIC) : STRING(IDS_TMPACKET_TMTYPE_DBMS_CYCLIC));
	if (nTMType == TMPACKET_TMTYPE_EXCEPTION) return((!bDBMS) ? STRING(IDS_TMPACKET_TMTYPE_EXCEPTION) : STRING(IDS_TMPACKET_TMTYPE_DBMS_EXCEPTION));
	if (nTMType == TMPACKET_TMTYPE_OVERSAMPLED) return((!bDBMS) ? STRING(IDS_TMPACKET_TMTYPE_OVERSAMPLED) : STRING(IDS_TMPACKET_TMTYPE_DBMS_OVERSAMPLED));
	if (nTMType == TMPACKET_TMTYPE_REPORT) return((!bDBMS) ? STRING(IDS_TMPACKET_TMTYPE_REPORT) : STRING(IDS_TMPACKET_TMTYPE_DBMS_REPORT));
	if (nTMType == TMPACKET_TMTYPE_DUMP) return((!bDBMS) ? STRING(IDS_TMPACKET_TMTYPE_DUMP) : STRING(IDS_TMPACKET_TMTYPE_DBMS_DUMP));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTMPacketTMID(INT nTMID) CONST
{
	return(((nTMID >= 0x00 && nTMID <= 0xFF) || nTMID < 0) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMPacketTMIDLength() CONST
{
	return 2;
}

BOOL CALTELDatabaseEngine::GetTMPacketTMIDRange(UINT &nLow, UINT &nHigh) CONST
{
	nLow = 0;
	nHigh = 0xFF;
	return TRUE;
}

INT CALTELDatabaseEngine::TranslateTMPacketTMID(LPCTSTR pszTMID, BOOL bDBMS) CONST
{
	INT  i, j;
	INT  nTMID;
	TCHAR  szDigit;
	CString  szNumber[4];
	CStringTools  cStringTools;

	for (i = 0, j = (lstrlen(pszTMID) == GetTMPacketTMIDLength()) ? GetTMPacketTMIDLength() : -1, nTMID = 0, szNumber[0] = cStringTools.ConvertIntToString(0), szNumber[1] = szNumber[2] = cStringTools.ConvertIntToString(10, 16), szNumber[2].MakeLower(); i < j; i++)
	{
		if (_istdigit((szNumber[3] = szDigit = pszTMID[i]).GetAt(0)))
		{
			nTMID = 16 * nTMID + szDigit - __toascii(szNumber[0][0]);
			continue;
		}
		if (_istxdigit(szDigit))
		{
			nTMID = (_istupper(szDigit)) ? (16 * nTMID + szDigit - __toascii(szNumber[1][0]) + 10) : (16 * nTMID + szDigit - __toascii(szNumber[2][0]) + 10);
			continue;
		}
		if (!_istspace(szDigit) || (!i  &&  _tcsspn(&pszTMID[i], szNumber[3]) == (size_t)(j - i)) || (nTMID != 0 && _tcsspn(&pszTMID[i], szNumber[3]) != (size_t)(j - i))) break;
	}
	return((i == j) ? nTMID : -1);
}
CString CALTELDatabaseEngine::TranslateTMPacketTMID(INT nTMID, BOOL bDBMS) CONST
{
	CStringTools  cStringTools;

	return((!bDBMS || nTMID >= 0) ? cStringTools.ConvertIntToPaddedString(nTMID, 2, 16) : CString(SPACE[0], 2));
}

BOOL CALTELDatabaseEngine::CheckTMPacket3Disc(INT n3Disc) CONST
{
	return(((n3Disc >= 0x0000 && n3Disc <= 0xFFFF) || n3Disc == -1) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMPacket3DiscLength() CONST
{
	return 4;
}

BOOL CALTELDatabaseEngine::GetTMPacket3DiscRange(UINT &nLow, UINT &nHigh) CONST
{
	nLow = 0;
	nHigh = 0xFFFF;
	return TRUE;
}

INT CALTELDatabaseEngine::TranslateTMPacket3Disc(LPCTSTR psz3Disc, BOOL bDBMS) CONST
{
	INT  i, j;
	INT  n3Disc;
	TCHAR  szDigit;
	CString  szNumber[4];
	CStringTools  cStringTools;

	for (i = 0, j = (lstrlen(psz3Disc) == GetTMPacket3DiscLength()) ? GetTMPacket3DiscLength() : -1, n3Disc = 0, szNumber[0] = cStringTools.ConvertIntToString(0), szNumber[1] = szNumber[2] = cStringTools.ConvertIntToString(10, 16), szNumber[2].MakeLower(); i < j; i++)
	{
		if (_istdigit((szNumber[3] = szDigit = psz3Disc[i]).GetAt(0)))
		{
			n3Disc = 16 * n3Disc + szDigit - __toascii(szNumber[0][0]);
			continue;
		}
		if (_istxdigit(szDigit))
		{
			n3Disc = (_istupper(szDigit)) ? (16 * n3Disc + szDigit - __toascii(szNumber[1][0]) + 10) : (16 * n3Disc + szDigit - __toascii(szNumber[2][0]) + 10);
			continue;
		}
		if (!_istspace(szDigit) || (!i  &&  _tcsspn(&psz3Disc[i], szNumber[3]) == (size_t)(j - i)) || (n3Disc != 0 && _tcsspn(&psz3Disc[i], szNumber[3]) != (size_t)(j - i))) break;
	}
	return((i == j) ? n3Disc : -1);
}
CString CALTELDatabaseEngine::TranslateTMPacket3Disc(INT n3Disc, BOOL bDBMS) CONST
{
	CStringTools  cStringTools;

	return((n3Disc >= 0) ? (LPCTSTR)cStringTools.ConvertIntToString(min(n3Disc, 0xFFFF), 16) : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTMPacketTransmissionRate(INT nType, INT nInterval) CONST
{
	INT  nRange[2];

	return((GetTMPacketTransmissionRateRange(nRange[0], nRange[1]) && ((nType == TMPACKET_TMTYPE_CYCLIC  &&  nInterval > nRange[0] && nInterval <= nRange[1]) || (nType != TMPACKET_TMTYPE_CYCLIC  &&  nInterval >= nRange[0] && nInterval <= nRange[1]))) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMPacketTransmissionRateRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 256;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTMPacketTransmissionRetries(INT nRetries) CONST
{
	return((nRetries >= 0 && nRetries < 1000000) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMPacketTransmissionRetriesLength() CONST
{
	return 6;
}

BOOL CALTELDatabaseEngine::GetTMPacketTransmissionRetriesRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 100;
	return TRUE;
}

INT CALTELDatabaseEngine::TranslateTMPacketTransmissionRetries(LPCTSTR pszRetries) CONST
{
	INT  i, j;
	INT  nRetries;
	TCHAR  szDigit;
	CString  szNumber[2];
	CStringTools  cStringTools;

	for (i = 0, j = (lstrlen(pszRetries) <= GetTMPacketTransmissionRetriesLength()) ? lstrlen(pszRetries) : -1, nRetries = 0, szNumber[0] = cStringTools.ConvertIntToString(0); i < j; i++)
	{
		if (_istdigit((szNumber[1] = szDigit = pszRetries[i]).GetAt(0)))
		{
			nRetries = 10 * nRetries + szDigit - __toascii(szNumber[0][0]);
			continue;
		}
		if (!_istspace(szDigit) || (nRetries != 0 && _tcsspn(&pszRetries[i], szNumber[1]) != (size_t)(j - i))) break;
	}
	return((i == j) ? nRetries : -1);
}
CString CALTELDatabaseEngine::TranslateTMPacketTransmissionRetries(INT nRetries) CONST
{
	CStringTools  cStringTools;

	return((nRetries > 0) ? (LPCTSTR)cStringTools.ConvertIntToString(nRetries) : CString(SPACE[0], GetTMPacketTransmissionRetriesLength()));
}

BOOL CALTELDatabaseEngine::CheckTMPacketVirtualChannel(INT nAPID, INT nChannelID) CONST
{
	INT  nRange[2];

	return((GetTMPacketVirtualChannelRange(nRange[0], nRange[1]) && (nChannelID == nRange[0] || nChannelID == nRange[1])) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMPacketVirtualChannelRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 1;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTMPacketEventID(LPCTSTR pszEventID) CONST
{
	return((lstrlen(pszEventID)) ? CheckTMParameterTag(pszEventID) : TRUE);
}

INT CALTELDatabaseEngine::GetTMPacketEventIDLength() CONST
{
	return GetTMParameterTagLength();
}

INT CALTELDatabaseEngine::EnumTMPacketDataSizes(CStringArray &szSizes, CUIntArray &nSizes) CONST
{
	nSizes.RemoveAll();
	szSizes.RemoveAll();
	nSizes.Add(TMPACKET_LENGTH_FIXED);
	nSizes.Add(TMPACKET_LENGTH_VARIABLE);
	szSizes.Add(STRING(IDS_TMPACKET_LENGTH_FIXED));
	szSizes.Add(STRING(IDS_TMPACKET_LENGTH_VARIABLE));
	return((INT)szSizes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMPacketDataSize(INT cbData, INT nFlag) CONST
{
	return(((((nFlag == TMPACKET_LENGTH_FIXED  &&  cbData > 0) || (nFlag == TMPACKET_LENGTH_VARIABLE  &&  !cbData)) && cbData >= 0 && cbData < GetTMPacketDataSize()) || (nFlag < 0 && cbData < 0)) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMPacketDataSizeRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 1;
	nHigh = GetTMPacketDataSize();
	return TRUE;
}

INT CALTELDatabaseEngine::TranslateTMPacketDataSize(LPCTSTR pszSize, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszSize, STRING(IDS_TMPACKET_LENGTH_DBMS_FIXED))) return TMPACKET_LENGTH_FIXED;
		if (!lstrcmp(pszSize, STRING(IDS_TMPACKET_LENGTH_DBMS_VARIABLE))) return TMPACKET_LENGTH_VARIABLE;
	}
	else
	{
		if (!lstrcmp(pszSize, STRING(IDS_TMPACKET_LENGTH_FIXED))) return TMPACKET_LENGTH_FIXED;
		if (!lstrcmp(pszSize, STRING(IDS_TMPACKET_LENGTH_VARIABLE))) return TMPACKET_LENGTH_VARIABLE;
	}
	return -1;
}
CString CALTELDatabaseEngine::TranslateTMPacketDataSize(INT nSize, BOOL bDBMS) CONST
{
	if (nSize == TMPACKET_LENGTH_FIXED) return((!bDBMS) ? STRING(IDS_TMPACKET_LENGTH_FIXED) : STRING(IDS_TMPACKET_LENGTH_DBMS_FIXED));
	if (nSize == TMPACKET_LENGTH_VARIABLE) return((!bDBMS) ? STRING(IDS_TMPACKET_LENGTH_VARIABLE) : STRING(IDS_TMPACKET_LENGTH_DBMS_VARIABLE));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

INT CALTELDatabaseEngine::GetTMPacketDataSize() CONST
{
	return 122;
}

INT CALTELDatabaseEngine::GetTMPacketDataFieldHeaderSize() CONST
{
	return 4;
}

INT CALTELDatabaseEngine::GetTMPacketTotalSize() CONST
{
	return(TMPACKET_HEADER_SIZE + GetTMPacketDataSize());
}

INT CALTELDatabaseEngine::EnumTMPacketStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TMPACKET_RECORDSTATUS_NEW);
	nStatus.Add(TMPACKET_RECORDSTATUS_DRAFT);
	nStatus.Add(TMPACKET_RECORDSTATUS_CHANGED);
	nStatus.Add(TMPACKET_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TMPACKET_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TMPACKET_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TMPACKET_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TMPACKET_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMPacketStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TMPACKET_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMPACKET_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMPACKET_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMPACKET_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTMPacketStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMPacketStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTMPacketStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TMPACKET_RECORDSTATUS_DBMS_NEW))) return TMPACKET_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TMPACKET_RECORDSTATUS_DBMS_DRAFT))) return TMPACKET_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TMPACKET_RECORDSTATUS_DBMS_CHANGED))) return TMPACKET_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TMPACKET_RECORDSTATUS_DBMS_DELETED))) return TMPACKET_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TMPACKET_RECORDSTATUS_NEW))) return TMPACKET_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TMPACKET_RECORDSTATUS_DRAFT))) return TMPACKET_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TMPACKET_RECORDSTATUS_CHANGED))) return TMPACKET_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TMPACKET_RECORDSTATUS_DELETED))) return TMPACKET_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTMPacketStatusLength()) ? TMPACKET_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTMPacketStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TMPACKET_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TMPACKET_RECORDSTATUS_NEW) : STRING(IDS_TMPACKET_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TMPACKET_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TMPACKET_RECORDSTATUS_DRAFT) : STRING(IDS_TMPACKET_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TMPACKET_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TMPACKET_RECORDSTATUS_CHANGED) : STRING(IDS_TMPACKET_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TMPACKET_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TMPACKET_RECORDSTATUS_DELETED) : STRING(IDS_TMPACKET_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTMPacketHeaderName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTMPacketHeaderNameLength());
}

INT CALTELDatabaseEngine::GetTMPacketHeaderNameLength() CONST
{
	return 12;
}

INT CALTELDatabaseEngine::EnumTMPacketHeaderTMTypeFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	nFlags.RemoveAll();
	szFlags.RemoveAll();
	nFlags.Add(TRUE);
	nFlags.Add(FALSE);
	szFlags.Add(STRING(IDS_TMPACKETHEADER_TMTYPEFLAG_YES));
	szFlags.Add(STRING(IDS_TMPACKETHEADER_TMTYPEFLAG_NO));
	return((INT)szFlags.GetSize());
}

INT CALTELDatabaseEngine::TranslateTMPacketHeaderTMTypeFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_TMTYPEFLAG_DBMS_YES))) return TRUE;
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_TMTYPEFLAG_DBMS_NO))) return FALSE;
	}
	else
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_TMTYPEFLAG_YES))) return TRUE;
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_TMTYPEFLAG_NO))) return FALSE;
	}
	return -1;
}
CString CALTELDatabaseEngine::TranslateTMPacketHeaderTMTypeFlag(INT nFlag, BOOL bDBMS) CONST
{
	if (nFlag == TRUE) return((!bDBMS) ? STRING(IDS_TMPACKETHEADER_TMTYPEFLAG_YES) : STRING(IDS_TMPACKETHEADER_TMTYPEFLAG_DBMS_YES));
	if (nFlag == FALSE) return((!bDBMS) ? STRING(IDS_TMPACKETHEADER_TMTYPEFLAG_NO) : STRING(IDS_TMPACKETHEADER_TMTYPEFLAG_DBMS_NO));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTMPacketHeaderTMTypePosition(INT nByte, INT nBit, INT nLength) CONST
{
	INT  nRange[2][2];

	return((GetTMPacketHeaderTMTypePositionRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]) && nByte >= 0 && nBit >= 0 && nBit < 8 && 8 * nByte + nBit >= nRange[0][0] && 8 * nByte + nBit <= nRange[0][1] && nLength >= nRange[1][0] && nLength <= nRange[1][1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMPacketHeaderTMTypePositionRange(INT &nOffsetLow, INT &nOffsetHigh, INT &nLengthLow, INT &nLengthHigh) CONST
{
	nOffsetLow = 0;
	nOffsetHigh = 15;
	nLengthLow = 1;
	nLengthHigh = 4;
	return TRUE;
}

INT CALTELDatabaseEngine::EnumTMPacketHeaderTMIDFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	nFlags.RemoveAll();
	szFlags.RemoveAll();
	nFlags.Add(TRUE);
	nFlags.Add(FALSE);
	szFlags.Add(STRING(IDS_TMPACKETHEADER_TMIDFLAG_YES));
	szFlags.Add(STRING(IDS_TMPACKETHEADER_TMIDFLAG_NO));
	return((INT)szFlags.GetSize());
}

INT CALTELDatabaseEngine::TranslateTMPacketHeaderTMIDFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_TMIDFLAG_DBMS_YES))) return TRUE;
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_TMIDFLAG_DBMS_NO))) return FALSE;
	}
	else
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_TMIDFLAG_YES))) return TRUE;
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_TMIDFLAG_NO))) return FALSE;
	}
	return -1;
}
CString CALTELDatabaseEngine::TranslateTMPacketHeaderTMIDFlag(INT nFlag, BOOL bDBMS) CONST
{
	if (nFlag == TRUE) return((!bDBMS) ? STRING(IDS_TMPACKETHEADER_TMIDFLAG_YES) : STRING(IDS_TMPACKETHEADER_TMIDFLAG_DBMS_YES));
	if (nFlag == FALSE) return((!bDBMS) ? STRING(IDS_TMPACKETHEADER_TMIDFLAG_NO) : STRING(IDS_TMPACKETHEADER_TMIDFLAG_DBMS_NO));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTMPacketHeaderTMIDPosition(INT nByte, INT nBit, INT nLength) CONST
{
	INT  nRange[2][2];

	return((GetTMPacketHeaderTMIDPositionRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]) && nByte >= 0 && nBit >= 0 && nBit < 8 && 8 * nByte + nBit >= nRange[0][0] && 8 * nByte + nBit <= nRange[0][1] && nLength >= nRange[1][0] && nLength <= nRange[1][1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMPacketHeaderTMIDPositionRange(INT &nOffsetLow, INT &nOffsetHigh, INT &nLengthLow, INT &nLengthHigh) CONST
{
	nOffsetLow = 0;
	nOffsetHigh = 8 * (TMPACKET_HEADER_SIZE + GetTMPacketDataFieldHeaderSize()) - 1;
	nLengthLow = 1;
	nLengthHigh = 8;
	return TRUE;
}

INT CALTELDatabaseEngine::EnumTMPacketHeader3DiscFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	nFlags.RemoveAll();
	szFlags.RemoveAll();
	nFlags.Add(TRUE);
	nFlags.Add(FALSE);
	szFlags.Add(STRING(IDS_TMPACKETHEADER_3DISCFLAG_YES));
	szFlags.Add(STRING(IDS_TMPACKETHEADER_3DISCFLAG_NO));
	return((INT)szFlags.GetSize());
}

INT CALTELDatabaseEngine::TranslateTMPacketHeader3DiscFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_3DISCFLAG_DBMS_YES))) return TRUE;
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_3DISCFLAG_DBMS_NO))) return FALSE;
	}
	else
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_3DISCFLAG_YES))) return TRUE;
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_3DISCFLAG_NO))) return FALSE;
	}
	return -1;
}
CString CALTELDatabaseEngine::TranslateTMPacketHeader3DiscFlag(INT nFlag, BOOL bDBMS) CONST
{
	if (nFlag == TRUE) return((!bDBMS) ? STRING(IDS_TMPACKETHEADER_3DISCFLAG_YES) : STRING(IDS_TMPACKETHEADER_3DISCFLAG_DBMS_YES));
	if (nFlag == FALSE) return((!bDBMS) ? STRING(IDS_TMPACKETHEADER_3DISCFLAG_NO) : STRING(IDS_TMPACKETHEADER_3DISCFLAG_DBMS_NO));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTMPacketHeader3DiscPosition(INT nByte, INT nBit, INT nLength) CONST
{
	INT  nRange[2][2];

	return((GetTMPacketHeader3DiscPositionRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]) && nByte >= 0 && nBit >= 0 && nBit < 8 && 8 * nByte + nBit >= nRange[0][0] && 8 * nByte + nBit <= nRange[0][1] && nLength >= nRange[1][0] && nLength <= nRange[1][1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMPacketHeader3DiscPositionRange(INT &nOffsetLow, INT &nOffsetHigh, INT &nLengthLow, INT &nLengthHigh) CONST
{
	nOffsetLow = 0;
	nOffsetHigh = 8 * (TMPACKET_HEADER_SIZE + GetTMPacketDataFieldHeaderSize()) - 1;
	nLengthLow = 1;
	nLengthHigh = 16;
	return TRUE;
}

INT CALTELDatabaseEngine::EnumTMPacketHeaderTimestampFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	nFlags.RemoveAll();
	szFlags.RemoveAll();
	nFlags.Add(TRUE);
	nFlags.Add(FALSE);
	szFlags.Add(STRING(IDS_TMPACKETHEADER_TIMESTAMPFLAG_YES));
	szFlags.Add(STRING(IDS_TMPACKETHEADER_TIMESTAMPFLAG_NO));
	return((INT)szFlags.GetSize());
}

INT CALTELDatabaseEngine::TranslateTMPacketHeaderTimestampFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_TIMESTAMPFLAG_DBMS_YES))) return TRUE;
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_TIMESTAMPFLAG_DBMS_NO))) return FALSE;
	}
	else
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_TIMESTAMPFLAG_YES))) return TRUE;
		if (!lstrcmp(pszFlag, STRING(IDS_TMPACKETHEADER_TIMESTAMPFLAG_NO))) return FALSE;
	}
	return -1;
}
CString CALTELDatabaseEngine::TranslateTMPacketHeaderTimestampFlag(INT nFlag, BOOL bDBMS) CONST
{
	if (nFlag == TRUE) return((!bDBMS) ? STRING(IDS_TMPACKETHEADER_TIMESTAMPFLAG_YES) : STRING(IDS_TMPACKETHEADER_TIMESTAMPFLAG_DBMS_YES));
	if (nFlag == FALSE) return((!bDBMS) ? STRING(IDS_TMPACKETHEADER_TIMESTAMPFLAG_NO) : STRING(IDS_TMPACKETHEADER_TIMESTAMPFLAG_DBMS_NO));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTMPacketHeaderTimestampPosition(INT nByte, INT nBit, INT nLength) CONST
{
	INT  nRange[2][2];

	return((GetTMPacketHeaderTimestampPositionRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]) && nByte >= 0 && nBit >= 0 && nBit < 8 && 8 * nByte + nBit >= nRange[0][0] && 8 * nByte + nBit <= nRange[0][1] && nLength >= nRange[1][0] && nLength <= nRange[1][1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMPacketHeaderTimestampPositionRange(INT &nOffsetLow, INT &nOffsetHigh, INT &nLengthLow, INT &nLengthHigh) CONST
{
	nOffsetLow = 0;
	nOffsetHigh = 8 * (TMPACKET_HEADER_SIZE + GetTMPacketDataFieldHeaderSize()) - 1;
	nLengthLow = 1;
	nLengthHigh = 32;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTMPacketParameterTag(LPCTSTR pszTag) CONST
{
	return CheckTMParameterTag(pszTag);
}

INT CALTELDatabaseEngine::GetTMPacketParameterTagLength() CONST
{
	return GetTMParameterTagLength();
}

BOOL CALTELDatabaseEngine::CheckTMPacketParameterBytePosition(INT nByte) CONST
{
	INT  nRange[2];

	return((GetTMPacketParameterBytePositionRange(nRange[0], nRange[1]) && nByte >= nRange[0] && nByte <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMPacketParameterBytePositionRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = GetTMPacketDataSize() - 1;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTMPacketParameterBitPosition(INT nBit) CONST
{
	INT  nRange[2];

	return((GetTMPacketParameterBitPositionRange(nRange[0], nRange[1]) && nBit >= nRange[0] && nBit <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMPacketParameterBitPositionRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 7;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTMPacketParameterOccurrenceCount(INT nCount) CONST
{
	INT  nRange[2];

	return((GetTMPacketParameterOccurrenceCountRange(nRange[0], nRange[1]) && nCount >= nRange[0] && nCount <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMPacketParameterOccurrenceCountRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 1;
	nHigh = 8 * GetTMPacketDataSize();
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTMPacketParameterOccurrenceInterval(INT nOccurrence, INT nInterval) CONST
{
	INT  nRange[2];

	return((GetTMPacketParameterOccurrenceIntervalRange(nRange[0], nRange[1]) && ((nOccurrence > 1 && nInterval >= nRange[0] && nInterval <= nRange[1]) || nOccurrence <= 1)) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMPacketParameterOccurrenceIntervalRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 8 * GetTMPacketDataSize() - 1 - 1;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTMPacketParameterValidity(LPCTSTR pszTag) CONST
{
	return((CheckTMParameterTag(pszTag) || !lstrlen(pszTag)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMPacketParameterValidityLength() CONST
{
	return GetTMParameterTagLength();
}

BOOL CALTELDatabaseEngine::CheckTMPacketStreamName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTMPacketStreamNameLength());
}

INT CALTELDatabaseEngine::GetTMPacketStreamNameLength() CONST
{
	return 6;
}

INT CALTELDatabaseEngine::EnumTMPacketStreamAPIDs(CStringArray &szAPIDs, CUIntArray &nAPIDs) CONST
{
	return EnumTMPacketAPIDs(szAPIDs, nAPIDs);
}

BOOL CALTELDatabaseEngine::CheckTMPacketStreamAPID(INT nAPID) CONST
{
	return CheckTMPacketAPID(EMPTYSTRING, nAPID);
}

INT CALTELDatabaseEngine::GetTMPacketStreamAPIDLength() CONST
{
	return GetTMPacketAPIDLength();
}

INT CALTELDatabaseEngine::TranslateTMPacketStreamAPID(LPCTSTR pszAPID, BOOL bDBMS) CONST
{
	return TranslateTMPacketAPID(pszAPID, bDBMS);
}
CString CALTELDatabaseEngine::TranslateTMPacketStreamAPID(INT nAPID, BOOL bDBMS) CONST
{
	return TranslateTMPacketAPID(nAPID, bDBMS);
}

BOOL CALTELDatabaseEngine::CheckTMPacketStreamTMID(INT nTMID) CONST
{
	return CheckTMPacketTMID(nTMID);
}

INT CALTELDatabaseEngine::GetTMPacketStreamTMIDLength() CONST
{
	return GetTMPacketTMIDLength();
}

BOOL CALTELDatabaseEngine::GetTMPacketStreamTMIDRange(UINT &nLow, UINT &nHigh) CONST
{
	return GetTMPacketTMIDRange(nLow, nHigh);
}

INT CALTELDatabaseEngine::TranslateTMPacketStreamTMID(LPCTSTR pszTMID, BOOL bDBMS) CONST
{
	return TranslateTMPacketTMID(pszTMID, bDBMS);
}
CString CALTELDatabaseEngine::TranslateTMPacketStreamTMID(INT nTMID, BOOL bDBMS) CONST
{
	return TranslateTMPacketTMID(nTMID, bDBMS);
}

BOOL CALTELDatabaseEngine::CheckTMPacketStreamPeriod(INT nPeriod) CONST
{
	INT  nRange[2];

	return((GetTMPacketStreamPeriodRange(nRange[0], nRange[1]) && nPeriod >= nRange[0] && nPeriod <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMPacketStreamPeriodRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 1000 * SECONDSPERHOUR;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTMPacketStreamTimeout(INT nTimeout) CONST
{
	INT  nRange[2];

	return((GetTMPacketStreamTimeoutRange(nRange[0], nRange[1]) && nTimeout >= nRange[0] && nTimeout <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMPacketStreamTimeoutRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 1000 * SECONDSPERHOUR;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTMPacketStreamValidityParameter(LPCTSTR pszTag) CONST
{
	return((CheckTMParameterTag(pszTag) || !lstrlen(pszTag)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMPacketStreamValidityParameterLength() CONST
{
	return GetTMParameterTagLength();
}

BOOL CALTELDatabaseEngine::CheckTCPacketTag(LPCTSTR pszTag) CONST
{
	return CheckTag(pszTag, GetTCPacketTagLength(), FALSE);
}

INT CALTELDatabaseEngine::GetTCPacketTagLength() CONST
{
	return 4;
}

BOOL CALTELDatabaseEngine::CheckTCPacketType(INT nType) CONST
{
	return((nType == TCPACKET_TYPE) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCPacketTypeLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTCPacketType(LPCTSTR pszType) CONST
{
	if (!lstrcmp(pszType, STRING(IDS_TMPACKET_TYPE))) return TMPACKET_TYPE;
	if (!lstrcmp(pszType, STRING(IDS_TCPACKET_TYPE))) return TCPACKET_TYPE;
	return -1;
}
CString CALTELDatabaseEngine::TranslateTCPacketType(INT nType) CONST
{
	if (nType == TMPACKET_TYPE) return STRING(IDS_TMPACKET_TYPE);
	if (nType == TCPACKET_TYPE) return STRING(IDS_TCPACKET_TYPE);
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCPacketDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) > 0 && lstrlen(pszDescription) <= GetTCPacketDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCPacketDescriptionLength() CONST
{
	return 32;
}

BOOL CALTELDatabaseEngine::CheckTCPacketDetails(LPCTSTR pszDetails) CONST
{
	return((lstrlen(pszDetails) >= 0 && lstrlen(pszDetails) <= GetTCPacketDetailsLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCPacketDetailsLength() CONST
{
	return 254;
}

INT CALTELDatabaseEngine::EnumTCPacketDataFieldHeaderFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	nFlags.RemoveAll();
	szFlags.RemoveAll();
	nFlags.Add(TRUE);
	nFlags.Add(FALSE);
	szFlags.Add(STRING(IDS_TCPACKET_DATAFIELDHEADER_YES));
	szFlags.Add(STRING(IDS_TCPACKET_DATAFIELDHEADER_NO));
	return((INT)szFlags.GetSize());
}

INT CALTELDatabaseEngine::TranslateTCPacketDataFieldHeaderFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TCPACKET_DATAFIELDHEADER_DBMS_YES))) return TRUE;
		if (!lstrcmp(pszFlag, STRING(IDS_TCPACKET_DATAFIELDHEADER_DBMS_NO))) return FALSE;
	}
	else
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TCPACKET_DATAFIELDHEADER_YES))) return TRUE;
		if (!lstrcmp(pszFlag, STRING(IDS_TCPACKET_DATAFIELDHEADER_NO))) return FALSE;
	}
	return -1;
}
CString CALTELDatabaseEngine::TranslateTCPacketDataFieldHeaderFlag(INT nFlag, BOOL bDBMS) CONST
{
	if (nFlag == TRUE) return((!bDBMS) ? STRING(IDS_TCPACKET_DATAFIELDHEADER_YES) : STRING(IDS_TCPACKET_DATAFIELDHEADER_DBMS_YES));
	if (nFlag == FALSE) return((!bDBMS) ? STRING(IDS_TCPACKET_DATAFIELDHEADER_NO) : STRING(IDS_TCPACKET_DATAFIELDHEADER_DBMS_NO));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTCPacketDataFieldHeader(INT bPresent) CONST
{
	return((bPresent == 0 || bPresent == 1) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::EnumTCPacketAPIDs(CStringArray &szAPIDs, CUIntArray &nAPIDs) CONST
{
	INT  nSubSystem;
	INT  nSubSystems;

	for (nSubSystem = 0, nSubSystems = GetTCProcessEngine()->EnumSubSystems(szAPIDs), nAPIDs.RemoveAll(); nSubSystem < nSubSystems; nSubSystem++)
	{
		nAPIDs.Add(GetTCProcessEngine()->TranslateSubSystemToID(szAPIDs.GetAt(nSubSystem)));
		continue;
	}
	return((INT)szAPIDs.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCPacketAPID(INT nAPID) CONST
{
	return((nAPID > 0 && nAPID <= 0xFFF) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCPacketAPIDLength() CONST
{
	return 3;
}

INT CALTELDatabaseEngine::TranslateTCPacketAPID(LPCTSTR pszAPID, BOOL bDBMS) CONST
{
	INT  i, j;
	INT  nAPID;
	TCHAR  szDigit;
	CString  szNumber[4];
	CStringTools  cStringTools;

	if (bDBMS)
	{
		for (i = 0, j = (lstrlen(pszAPID) == GetTCPacketAPIDLength()) ? GetTCPacketAPIDLength() : -1, nAPID = 0, szNumber[0] = cStringTools.ConvertIntToString(0), szNumber[1] = szNumber[2] = cStringTools.ConvertIntToString(10, 16), szNumber[2].MakeLower(); i < j; i++)
		{
			if (_istdigit((szNumber[3] = szDigit = pszAPID[i]).GetAt(0)))
			{
				nAPID = 16 * nAPID + szDigit - __toascii(szNumber[0][0]);
				continue;
			}
			if (_istxdigit(szDigit))
			{
				nAPID = (_istupper(szDigit)) ? (16 * nAPID + szDigit - __toascii(szNumber[1][0]) + 10) : (16 * nAPID + szDigit - __toascii(szNumber[2][0]) + 10);
				continue;
			}
			if (!_istspace(szDigit) || (!i  &&  _tcsspn(&pszAPID[i], szNumber[3]) == (size_t)(j - i)) || (nAPID != 0 && _tcsspn(&pszAPID[i], szNumber[3]) != (size_t)(j - i))) break;
		}
		return((i == j) ? nAPID : -1);
	}
	return GetTCProcessEngine()->TranslateSubSystemToID(pszAPID);
}
CString CALTELDatabaseEngine::TranslateTCPacketAPID(INT nAPID, BOOL bDBMS) CONST
{
	CStringTools  cStringTools;

	return((!bDBMS) ? GetTCProcessEngine()->TranslateIDToSubSystem(nAPID) : cStringTools.ConvertIntToPaddedString(nAPID, 3, 16));
}

INT CALTELDatabaseEngine::EnumTCPacketDataSizes(CStringArray &szSizes, CUIntArray &nSizes) CONST
{
	nSizes.RemoveAll();
	szSizes.RemoveAll();
	nSizes.Add(TCPACKET_LENGTH_FIXED);
	nSizes.Add(TCPACKET_LENGTH_VARIABLE);
	szSizes.Add(STRING(IDS_TCPACKET_LENGTH_FIXED));
	szSizes.Add(STRING(IDS_TCPACKET_LENGTH_VARIABLE));
	return((INT)szSizes.GetSize());
}

BOOL CALTELDatabaseEngine::GetTCPacketDataSizeRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 1;
	nHigh = GetTCPacketDataSize();
	return TRUE;
}

INT CALTELDatabaseEngine::TranslateTCPacketDataSize(LPCTSTR pszSize, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszSize, STRING(IDS_TCPACKET_LENGTH_DBMS_FIXED))) return TCPACKET_LENGTH_FIXED;
		if (!lstrcmp(pszSize, STRING(IDS_TCPACKET_LENGTH_DBMS_VARIABLE))) return TCPACKET_LENGTH_VARIABLE;
	}
	else
	{
		if (!lstrcmp(pszSize, STRING(IDS_TCPACKET_LENGTH_FIXED))) return TCPACKET_LENGTH_FIXED;
		if (!lstrcmp(pszSize, STRING(IDS_TCPACKET_LENGTH_VARIABLE))) return TCPACKET_LENGTH_VARIABLE;
	}
	return -1;
}
CString CALTELDatabaseEngine::TranslateTCPacketDataSize(INT nSize, BOOL bDBMS) CONST
{
	if (nSize == TCPACKET_LENGTH_FIXED) return((!bDBMS) ? STRING(IDS_TCPACKET_LENGTH_FIXED) : STRING(IDS_TCPACKET_LENGTH_DBMS_FIXED));
	if (nSize == TCPACKET_LENGTH_VARIABLE) return((!bDBMS) ? STRING(IDS_TCPACKET_LENGTH_VARIABLE) : STRING(IDS_TCPACKET_LENGTH_DBMS_VARIABLE));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTCPacketDataSize(ULONGLONG nAttributes, INT nFlag, INT cbData) CONST
{
	return(((((nFlag == TCPACKET_LENGTH_FIXED  &&  cbData > 0) || (nFlag == TCPACKET_LENGTH_VARIABLE  &&  !cbData)) && cbData >= 0 && cbData < GetTCPacketDataSize() && (nFlag == TCPACKET_LENGTH_VARIABLE || (nAttributes & (TCFUNCTION_EXETYPE_IMMEDIATE | TCFUNCTION_EXETYPE_TIMETAG | TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0 || ((nAttributes & TCFUNCTION_EXETYPE_IMMEDIATE) && cbData <= 241) || ((nAttributes & TCFUNCTION_EXETYPE_TIMETAG) && cbData <= 121) || ((nAttributes & TCFUNCTION_EXETYPE_FIRSTSTEP) && cbData <= 111) || ((nAttributes & TCFUNCTION_EXETYPE_SECONDSTEP) && cbData == 13))) || (nFlag < 0 && cbData < 0)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCPacketDataSize() CONST
{
	return 242;
}

INT CALTELDatabaseEngine::GetTCPacketDataFieldHeaderSize() CONST
{
	return 8;
}

INT CALTELDatabaseEngine::GetTCPacketTotalSize() CONST
{
	return 248;
}

INT CALTELDatabaseEngine::EnumTCPacketStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TCPACKET_RECORDSTATUS_NEW);
	nStatus.Add(TCPACKET_RECORDSTATUS_DRAFT);
	nStatus.Add(TCPACKET_RECORDSTATUS_CHANGED);
	nStatus.Add(TCPACKET_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TCPACKET_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TCPACKET_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TCPACKET_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TCPACKET_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCPacketStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TCPACKET_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCPACKET_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCPACKET_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCPACKET_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCPacketStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCPacketStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTCPacketStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCPACKET_RECORDSTATUS_DBMS_NEW))) return TCPACKET_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPACKET_RECORDSTATUS_DBMS_DRAFT))) return TCPACKET_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPACKET_RECORDSTATUS_DBMS_CHANGED))) return TCPACKET_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPACKET_RECORDSTATUS_DBMS_DELETED))) return TCPACKET_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCPACKET_RECORDSTATUS_NEW))) return TCPACKET_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPACKET_RECORDSTATUS_DRAFT))) return TCPACKET_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPACKET_RECORDSTATUS_CHANGED))) return TCPACKET_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPACKET_RECORDSTATUS_DELETED))) return TCPACKET_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCPacketStatusLength()) ? TCPACKET_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTCPacketStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TCPACKET_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TCPACKET_RECORDSTATUS_NEW) : STRING(IDS_TCPACKET_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TCPACKET_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TCPACKET_RECORDSTATUS_DRAFT) : STRING(IDS_TCPACKET_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TCPACKET_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TCPACKET_RECORDSTATUS_CHANGED) : STRING(IDS_TCPACKET_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TCPACKET_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TCPACKET_RECORDSTATUS_DELETED) : STRING(IDS_TCPACKET_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCPacketParameterTag(LPCTSTR pszTag) CONST
{
	return((lstrlen(pszTag) > 0) ? CheckTCParameterTag(pszTag) : TRUE);
}

INT CALTELDatabaseEngine::GetTCPacketParameterTagLength() CONST
{
	return GetTCParameterTagLength();
}

BOOL CALTELDatabaseEngine::CheckTCPacketParameterDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) >= 0 && lstrlen(pszDescription) <= GetTCPacketParameterDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCPacketParameterDescriptionLength() CONST
{
	return 48;
}

INT CALTELDatabaseEngine::EnumTCPacketParameterTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	nTypes.RemoveAll();
	szTypes.RemoveAll();
	nTypes.Add(TCPACKETPARAMETER_TYPE_FIXED);
	nTypes.Add(TCPACKETPARAMETER_TYPE_VARIABLE);
	szTypes.Add(STRING(IDS_TCPACKETPARAMETER_TYPE_FIXED));
	szTypes.Add(STRING(IDS_TCPACKETPARAMETER_TYPE_VARIABLE));
	return((INT)szTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCPacketParameterType(LPCTSTR pszTag, ULONGLONG nType) CONST
{
	return(((lstrlen(pszTag) > 0 && nType == TCPACKETPARAMETER_TYPE_VARIABLE) || (!lstrlen(pszTag) && nType == TCPACKETPARAMETER_TYPE_FIXED)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCPacketParameterTypeLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCPacketParameterType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszType, STRING(IDS_TCPACKETPARAMETER_TYPE_DBMS_FIXED))) return TCPACKETPARAMETER_TYPE_FIXED;
		if (!lstrcmp(pszType, STRING(IDS_TCPACKETPARAMETER_TYPE_DBMS_VARIABLE))) return TCPACKETPARAMETER_TYPE_VARIABLE;
	}
	else
	{
		if (!lstrcmp(pszType, STRING(IDS_TCPACKETPARAMETER_TYPE_FIXED))) return TCPACKETPARAMETER_TYPE_FIXED;
		if (!lstrcmp(pszType, STRING(IDS_TCPACKETPARAMETER_TYPE_VARIABLE))) return TCPACKETPARAMETER_TYPE_VARIABLE;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCPacketParameterType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCPACKETPARAMETER_TYPE_VARIABLE) return((!bDBMS) ? STRING(IDS_TCPACKETPARAMETER_TYPE_VARIABLE) : STRING(IDS_TCPACKETPARAMETER_TYPE_DBMS_VARIABLE));
	if (nAttributes & TCPACKETPARAMETER_TYPE_FIXED) return((!bDBMS) ? STRING(IDS_TCPACKETPARAMETER_TYPE_FIXED) : STRING(IDS_TCPACKETPARAMETER_TYPE_DBMS_FIXED));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumTCPacketParameterValueInterpretations(CStringArray &szInterpretations, CLongUIntArray &nInterpretations) CONST
{
	nInterpretations.RemoveAll();
	szInterpretations.RemoveAll();
	nInterpretations.Add(TCPARAMETER_CALIBRATION_NONE);
	nInterpretations.Add(TCPARAMETER_CALIBRATION_ENABLED);
	nInterpretations.Add(TCPARAMETER_CALIBRATION_DISABLED);
	szInterpretations.Add(STRING(IDS_TCPARAMETER_CALIBRATION_NONE));
	szInterpretations.Add(STRING(IDS_TCPARAMETER_CALIBRATION_ENABLED));
	szInterpretations.Add(STRING(IDS_TCPARAMETER_CALIBRATION_DISABLED));
	return((INT)szInterpretations.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCPacketParameterValueInterpretation(ULONGLONG nAttributes, ULONGLONG nFlag) CONST
{
	return((nFlag == TCPARAMETER_CALIBRATION_ENABLED || nFlag == TCPARAMETER_CALIBRATION_DISABLED) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCPacketParameterValueInterpretationLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCPacketParameterValueInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_NONE))) return TCPARAMETER_CALIBRATION_NONE;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_ENABLED))) return TCPARAMETER_CALIBRATION_ENABLED;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_DISABLED))) return TCPARAMETER_CALIBRATION_DISABLED;
	}
	else
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPARAMETER_CALIBRATION_NONE))) return TCPARAMETER_CALIBRATION_NONE;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPARAMETER_CALIBRATION_ENABLED))) return TCPARAMETER_CALIBRATION_ENABLED;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPARAMETER_CALIBRATION_DISABLED))) return TCPARAMETER_CALIBRATION_DISABLED;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCPacketParameterValueInterpretation(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if ((nAttributes & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) == TCPARAMETER_CALIBRATION_NONE) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CALIBRATION_NONE) : STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_NONE));
	if (nAttributes & TCPARAMETER_CALIBRATION_ENABLED) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CALIBRATION_ENABLED) : STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_ENABLED));
	if (nAttributes & TCPARAMETER_CALIBRATION_DISABLED) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CALIBRATION_DISABLED) : STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_DISABLED));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumTCPacketParameterValueCodings(CStringArray &szCodings, CLongUIntArray &nCodings) CONST
{
	nCodings.RemoveAll();
	szCodings.RemoveAll();
	nCodings.Add(TCPARAMETER_CODING_BITPATTERN);
	nCodings.Add(TCPARAMETER_CODING_SIGNEDINTEGER);
	nCodings.Add(TCPARAMETER_CODING_UNSIGNEDINTEGER);
	nCodings.Add(TCPARAMETER_CODING_FLOATINGPOINT);
	szCodings.Add(STRING(IDS_TCPARAMETER_CODING_BITPATTERN));
	szCodings.Add(STRING(IDS_TCPARAMETER_CODING_SIGNEDINTEGER));
	szCodings.Add(STRING(IDS_TCPARAMETER_CODING_UNSIGNEDINTEGER));
	szCodings.Add(STRING(IDS_TCPARAMETER_CODING_FLOATINGPOINT));
	return((INT)szCodings.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCPacketParameterValueCoding(ULONGLONG nAttributes, ULONGLONG nCoding) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nCoding & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT))) == TCPARAMETER_CODING_BITPATTERN || nAttribute == TCPARAMETER_CODING_SIGNEDINTEGER || nAttribute == TCPARAMETER_CODING_UNSIGNEDINTEGER || nAttribute == TCPARAMETER_CODING_FLOATINGPOINT || (!nAttribute && (nAttributes & TCPACKETPARAMETER_TYPE_FIXED))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCPacketParameterValueCodingLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCPacketParameterValueCoding(LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_DBMS_BITPATTERN))) return TCPARAMETER_CODING_BITPATTERN;
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_DBMS_SIGNEDINTEGER))) return TCPARAMETER_CODING_SIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_DBMS_UNSIGNEDINTEGER))) return TCPARAMETER_CODING_UNSIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_DBMS_FLOATINGPOINT))) return TCPARAMETER_CODING_FLOATINGPOINT;
	}
	else
	{
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_BITPATTERN))) return TCPARAMETER_CODING_BITPATTERN;
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_SIGNEDINTEGER))) return TCPARAMETER_CODING_SIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_UNSIGNEDINTEGER))) return TCPARAMETER_CODING_UNSIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_FLOATINGPOINT))) return TCPARAMETER_CODING_FLOATINGPOINT;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCPacketParameterValueCoding(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCPARAMETER_CODING_BITPATTERN) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CODING_BITPATTERN) : STRING(IDS_TCPARAMETER_CODING_DBMS_BITPATTERN));
	if (nAttributes & TCPARAMETER_CODING_SIGNEDINTEGER) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CODING_SIGNEDINTEGER) : STRING(IDS_TCPARAMETER_CODING_DBMS_SIGNEDINTEGER));
	if (nAttributes & TCPARAMETER_CODING_UNSIGNEDINTEGER) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CODING_UNSIGNEDINTEGER) : STRING(IDS_TCPARAMETER_CODING_DBMS_UNSIGNEDINTEGER));
	if (nAttributes & TCPARAMETER_CODING_FLOATINGPOINT) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CODING_FLOATINGPOINT) : STRING(IDS_TCPARAMETER_CODING_DBMS_FLOATINGPOINT));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTCPacketParameterValueRadixes(CStringArray &szRadixes, CLongUIntArray &nRadixes) CONST
{
	nRadixes.RemoveAll();
	szRadixes.RemoveAll();
	nRadixes.Add(TCPARAMETER_RADIX_BINARY);
	nRadixes.Add(TCPARAMETER_RADIX_OCTAL);
	nRadixes.Add(TCPARAMETER_RADIX_DECIMAL);
	nRadixes.Add(TCPARAMETER_RADIX_HEXADECIMAL);
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_BINARY));
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_OCTAL));
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_DECIMAL));
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_HEXADECIMAL));
	return((INT)szRadixes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCPacketParameterValueRadix(ULONGLONG nAttributes, ULONGLONG nRadix) CONST
{
	return((((nAttributes & TCPACKETPARAMETER_TYPE_VARIABLE) || (nAttributes & TCPACKETPARAMETER_TYPE_FIXED)) && (nRadix == TCPARAMETER_RADIX_BINARY || nRadix == TCPARAMETER_RADIX_OCTAL || nRadix == TCPARAMETER_RADIX_DECIMAL || nRadix == TCPARAMETER_RADIX_HEXADECIMAL)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCPacketParameterValueRadixLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCPacketParameterValueRadix(LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_BINARY))) return TCPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_OCTAL))) return TCPARAMETER_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_DECIMAL))) return TCPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_HEXADECIMAL))) return TCPARAMETER_RADIX_HEXADECIMAL;
	}
	else
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_BINARY))) return TCPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_OCTAL))) return TCPARAMETER_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DECIMAL))) return TCPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_HEXADECIMAL))) return TCPARAMETER_RADIX_HEXADECIMAL;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCPacketParameterValueRadix(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCPARAMETER_RADIX_BINARY) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_BINARY) : STRING(IDS_TCPARAMETER_RADIX_DBMS_BINARY));
	if (nAttributes & TCPARAMETER_RADIX_OCTAL) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_OCTAL) : STRING(IDS_TCPARAMETER_RADIX_DBMS_OCTAL));
	if (nAttributes & TCPARAMETER_RADIX_DECIMAL) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_DECIMAL) : STRING(IDS_TCPARAMETER_RADIX_DBMS_DECIMAL));
	if (nAttributes & TCPARAMETER_RADIX_HEXADECIMAL) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_HEXADECIMAL) : STRING(IDS_TCPARAMETER_RADIX_DBMS_HEXADECIMAL));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCPacketParameterValueBitWidth(INT nWidth) CONST
{
	INT  nRange[2];

	return((GetTCPacketParameterValueBitWidthRange(nRange[0], nRange[1]) && nWidth >= nRange[0] && nWidth <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCPacketParameterValueBitWidthRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 1;
	nHigh = 48;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTCPacketParameterValueBitOffset(INT nOffset) CONST
{
	INT  nRange[2];

	return((GetTCPacketParameterValueBitOffsetRange(nRange[0], nRange[1]) && nOffset >= nRange[0] && nOffset <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCPacketParameterValueBitOffsetRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 1919;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTCPacketParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszConstValue) CONST
{
	return CheckTCParameterConstValue(nAttributes, pszConstValue);
}

INT CALTELDatabaseEngine::GetTCPacketParameterConstValueLength() CONST
{
	return GetTCParameterConstValueLength();
}

ULONGLONG CALTELDatabaseEngine::TranslateTCPacketParameterConstValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszConstValue) CONST
{
	return TranslateTCParameterConstValue(nAttributes, nWidth, pszConstValue);
}
CString CALTELDatabaseEngine::TranslateTCPacketParameterConstValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nConstValue) CONST
{
	return TranslateTCParameterConstValue(nAttributes, nWidth, nConstValue);
}

BOOL CALTELDatabaseEngine::CheckTCPacketParameterConstTimeType(LPCTSTR pszTag) CONST
{
	return CheckTCParameterConstTimeType(pszTag);
}

BOOL CALTELDatabaseEngine::CheckTCPacketParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return CheckTCParameterConstTime(nAttributes, pszConstTime);
}

CTimeTag CALTELDatabaseEngine::TranslateTCPacketParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return TranslateTCParameterConstTime(nAttributes, pszConstTime);
}

BOOL CALTELDatabaseEngine::CheckTCFunctionName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTCFunctionNameLength());
}

INT CALTELDatabaseEngine::GetTCFunctionNameLength() CONST
{
	return 12;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) > 0 && lstrlen(pszDescription) <= GetTCFunctionDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionDescriptionLength() CONST
{
	return 25;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionExtendedDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) >= 0 && lstrlen(pszDescription) <= GetTCFunctionExtendedDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionExtendedDescriptionLength() CONST
{
	return 255;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionDetails(LPCTSTR pszDetails) CONST
{
	return((lstrlen(pszDetails) >= 0 && lstrlen(pszDetails) <= GetTCFunctionDetailsLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionDetailsLength() CONST
{
	return 48;
}

INT CALTELDatabaseEngine::EnumTCFunctionTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	nTypes.RemoveAll();
	szTypes.RemoveAll();
	nTypes.Add(TCFUNCTION_TYPE_INTGT);
	nTypes.Add(TCFUNCTION_TYPE_INTG);
	nTypes.Add(TCFUNCTION_TYPE_HP1);
	nTypes.Add(TCFUNCTION_TYPE_HP2);
	nTypes.Add(TCFUNCTION_TYPE_HPC2);
	nTypes.Add(TCFUNCTION_TYPE_ICS);
	nTypes.Add(TCFUNCTION_TYPE_RBI);
	nTypes.Add(TCFUNCTION_TYPE_HL);
	nTypes.Add(TCFUNCTION_TYPE_ML);
	nTypes.Add(TCFUNCTION_TYPE_MLP);
	nTypes.Add(TCFUNCTION_TYPE_RM);
	nTypes.Add(TCFUNCTION_TYPE_SC);
	nTypes.Add(TCFUNCTION_TYPE_LSC);
	szTypes.Add(STRING(IDS_TCFUNCTION_TYPE_INTGT));
	szTypes.Add(STRING(IDS_TCFUNCTION_TYPE_INTG));
	szTypes.Add(STRING(IDS_TCFUNCTION_TYPE_HP1));
	szTypes.Add(STRING(IDS_TCFUNCTION_TYPE_HP2));
	szTypes.Add(STRING(IDS_TCFUNCTION_TYPE_HPC2));
	szTypes.Add(STRING(IDS_TCFUNCTION_TYPE_ICS));
	szTypes.Add(STRING(IDS_TCFUNCTION_TYPE_RBI));
	szTypes.Add(STRING(IDS_TCFUNCTION_TYPE_HL));
	szTypes.Add(STRING(IDS_TCFUNCTION_TYPE_ML));
	szTypes.Add(STRING(IDS_TCFUNCTION_TYPE_MLP));
	szTypes.Add(STRING(IDS_TCFUNCTION_TYPE_RM));
	szTypes.Add(STRING(IDS_TCFUNCTION_TYPE_SC));
	szTypes.Add(STRING(IDS_TCFUNCTION_TYPE_LSC));
	return((INT)szTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCFunctionType(ULONGLONG nType) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nType & (TCFUNCTION_TYPE_INTGT | TCFUNCTION_TYPE_INTG | TCFUNCTION_TYPE_HP1 | TCFUNCTION_TYPE_HP2 | TCFUNCTION_TYPE_HPC2 | TCFUNCTION_TYPE_ICS | TCFUNCTION_TYPE_RBI | TCFUNCTION_TYPE_HL | TCFUNCTION_TYPE_ML | TCFUNCTION_TYPE_MLP | TCFUNCTION_TYPE_RM | TCFUNCTION_TYPE_SC | TCFUNCTION_TYPE_LSC))) == TCFUNCTION_TYPE_INTGT || nAttribute == TCFUNCTION_TYPE_INTG || nAttribute == TCFUNCTION_TYPE_HP1 || nAttribute == TCFUNCTION_TYPE_HP2 || nAttribute == TCFUNCTION_TYPE_HPC2 || nAttribute == TCFUNCTION_TYPE_ICS || nAttribute == TCFUNCTION_TYPE_RBI || nAttribute == TCFUNCTION_TYPE_HL || nAttribute == TCFUNCTION_TYPE_ML || nAttribute == TCFUNCTION_TYPE_MLP || nAttribute == TCFUNCTION_TYPE_RM || nAttribute == TCFUNCTION_TYPE_SC || nAttribute == TCFUNCTION_TYPE_LSC) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionTypeLength() CONST
{
	return 5;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCFunctionType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (_tcsstr(pszType, STRING(IDS_TCFUNCTION_TYPE_DBMS_INTGT)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TCFUNCTION_TYPE_DBMS_INTGT)) == (size_t)lstrlen(pszType)) return TCFUNCTION_TYPE_INTGT;
		if (_tcsstr(pszType, STRING(IDS_TCFUNCTION_TYPE_DBMS_INTG)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TCFUNCTION_TYPE_DBMS_INTG)) == (size_t)lstrlen(pszType)) return TCFUNCTION_TYPE_INTG;
		if (_tcsstr(pszType, STRING(IDS_TCFUNCTION_TYPE_DBMS_HP1)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TCFUNCTION_TYPE_DBMS_HP1)) == (size_t)lstrlen(pszType)) return TCFUNCTION_TYPE_HP1;
		if (_tcsstr(pszType, STRING(IDS_TCFUNCTION_TYPE_DBMS_HP2)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TCFUNCTION_TYPE_DBMS_HP2)) == (size_t)lstrlen(pszType)) return TCFUNCTION_TYPE_HP2;
		if (_tcsstr(pszType, STRING(IDS_TCFUNCTION_TYPE_DBMS_HPC2)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TCFUNCTION_TYPE_DBMS_HPC2)) == (size_t)lstrlen(pszType)) return TCFUNCTION_TYPE_HPC2;
		if (_tcsstr(pszType, STRING(IDS_TCFUNCTION_TYPE_DBMS_ICS)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TCFUNCTION_TYPE_DBMS_ICS)) == (size_t)lstrlen(pszType)) return TCFUNCTION_TYPE_ICS;
		if (_tcsstr(pszType, STRING(IDS_TCFUNCTION_TYPE_DBMS_RBI)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TCFUNCTION_TYPE_DBMS_RBI)) == (size_t)lstrlen(pszType)) return TCFUNCTION_TYPE_RBI;
		if (_tcsstr(pszType, STRING(IDS_TCFUNCTION_TYPE_DBMS_HL)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TCFUNCTION_TYPE_DBMS_HL)) == (size_t)lstrlen(pszType)) return TCFUNCTION_TYPE_HL;
		if (_tcsstr(pszType, STRING(IDS_TCFUNCTION_TYPE_DBMS_MLP)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TCFUNCTION_TYPE_DBMS_MLP)) == (size_t)lstrlen(pszType)) return TCFUNCTION_TYPE_MLP;
		if (_tcsstr(pszType, STRING(IDS_TCFUNCTION_TYPE_DBMS_ML)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TCFUNCTION_TYPE_DBMS_ML)) == (size_t)lstrlen(pszType)) return TCFUNCTION_TYPE_ML;
		if (_tcsstr(pszType, STRING(IDS_TCFUNCTION_TYPE_DBMS_RM)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TCFUNCTION_TYPE_DBMS_RM)) == (size_t)lstrlen(pszType)) return TCFUNCTION_TYPE_RM;
		if (_tcsstr(pszType, STRING(IDS_TCFUNCTION_TYPE_DBMS_SC)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TCFUNCTION_TYPE_DBMS_SC)) == (size_t)lstrlen(pszType)) return TCFUNCTION_TYPE_SC;
		if (_tcsstr(pszType, STRING(IDS_TCFUNCTION_TYPE_DBMS_LSC)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TCFUNCTION_TYPE_DBMS_LSC)) == (size_t)lstrlen(pszType)) return TCFUNCTION_TYPE_LSC;
	}
	else
	{
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTION_TYPE_INTGT))) return TCFUNCTION_TYPE_INTGT;
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTION_TYPE_INTG))) return TCFUNCTION_TYPE_INTG;
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTION_TYPE_HP1))) return TCFUNCTION_TYPE_HP1;
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTION_TYPE_HP2))) return TCFUNCTION_TYPE_HP2;
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTION_TYPE_HPC2))) return TCFUNCTION_TYPE_HPC2;
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTION_TYPE_ICS))) return TCFUNCTION_TYPE_ICS;
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTION_TYPE_RBI))) return TCFUNCTION_TYPE_RBI;
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTION_TYPE_HL))) return TCFUNCTION_TYPE_HL;
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTION_TYPE_MLP))) return TCFUNCTION_TYPE_MLP;
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTION_TYPE_ML))) return TCFUNCTION_TYPE_ML;
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTION_TYPE_RM))) return TCFUNCTION_TYPE_RM;
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTION_TYPE_SC))) return TCFUNCTION_TYPE_SC;
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTION_TYPE_LSC))) return TCFUNCTION_TYPE_LSC;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCFunctionType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCFUNCTION_TYPE_INTGT) return((!bDBMS) ? STRING(IDS_TCFUNCTION_TYPE_INTGT) : STRING(IDS_TCFUNCTION_TYPE_DBMS_INTGT));
	if (nAttributes & TCFUNCTION_TYPE_INTG) return((!bDBMS) ? STRING(IDS_TCFUNCTION_TYPE_INTG) : STRING(IDS_TCFUNCTION_TYPE_DBMS_INTG));
	if (nAttributes & TCFUNCTION_TYPE_HP1) return((!bDBMS) ? STRING(IDS_TCFUNCTION_TYPE_HP1) : STRING(IDS_TCFUNCTION_TYPE_DBMS_HP1));
	if (nAttributes & TCFUNCTION_TYPE_HP2) return((!bDBMS) ? STRING(IDS_TCFUNCTION_TYPE_HP2) : STRING(IDS_TCFUNCTION_TYPE_DBMS_HP2));
	if (nAttributes & TCFUNCTION_TYPE_HPC2) return((!bDBMS) ? STRING(IDS_TCFUNCTION_TYPE_HPC2) : STRING(IDS_TCFUNCTION_TYPE_DBMS_HPC2));
	if (nAttributes & TCFUNCTION_TYPE_ICS) return((!bDBMS) ? STRING(IDS_TCFUNCTION_TYPE_ICS) : STRING(IDS_TCFUNCTION_TYPE_DBMS_ICS));
	if (nAttributes & TCFUNCTION_TYPE_RBI) return((!bDBMS) ? STRING(IDS_TCFUNCTION_TYPE_RBI) : STRING(IDS_TCFUNCTION_TYPE_DBMS_RBI));
	if (nAttributes & TCFUNCTION_TYPE_HL) return((!bDBMS) ? STRING(IDS_TCFUNCTION_TYPE_HL) : STRING(IDS_TCFUNCTION_TYPE_DBMS_HL));
	if (nAttributes & TCFUNCTION_TYPE_MLP) return((!bDBMS) ? STRING(IDS_TCFUNCTION_TYPE_MLP) : STRING(IDS_TCFUNCTION_TYPE_DBMS_MLP));
	if (nAttributes & TCFUNCTION_TYPE_ML) return((!bDBMS) ? STRING(IDS_TCFUNCTION_TYPE_ML) : STRING(IDS_TCFUNCTION_TYPE_DBMS_ML));
	if (nAttributes & TCFUNCTION_TYPE_RM) return((!bDBMS) ? STRING(IDS_TCFUNCTION_TYPE_RM) : STRING(IDS_TCFUNCTION_TYPE_DBMS_RM));
	if (nAttributes & TCFUNCTION_TYPE_SC) return((!bDBMS) ? STRING(IDS_TCFUNCTION_TYPE_SC) : STRING(IDS_TCFUNCTION_TYPE_DBMS_SC));
	if (nAttributes & TCFUNCTION_TYPE_LSC) return((!bDBMS) ? STRING(IDS_TCFUNCTION_TYPE_LSC) : STRING(IDS_TCFUNCTION_TYPE_DBMS_LSC));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumTCFunctionTCTypes(CStringArray &szTCTypes, CLongUIntArray &nTCTypes) CONST
{
	nTCTypes.RemoveAll();
	szTCTypes.RemoveAll();
	nTCTypes.Add(TCFUNCTION_EXETYPE_IMMEDIATE);
	nTCTypes.Add(TCFUNCTION_EXETYPE_TIMETAG);
	nTCTypes.Add(TCFUNCTION_EXETYPE_FIRSTSTEP);
	nTCTypes.Add(TCFUNCTION_EXETYPE_SECONDSTEP);
	szTCTypes.Add(STRING(IDS_TCFUNCTION_EXETYPE_IMMEDIATE));
	szTCTypes.Add(STRING(IDS_TCFUNCTION_EXETYPE_TIMETAG));
	szTCTypes.Add(STRING(IDS_TCFUNCTION_EXETYPE_FIRSTSTEP));
	szTCTypes.Add(STRING(IDS_TCFUNCTION_EXETYPE_SECONDSTEP));
	return((INT)szTCTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCFunctionTCType(ULONGLONG nTCType) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nTCType & (TCFUNCTION_EXETYPE_IMMEDIATE | TCFUNCTION_EXETYPE_TIMETAG | TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP))) == TCFUNCTION_EXETYPE_IMMEDIATE || nAttribute == TCFUNCTION_EXETYPE_TIMETAG || nAttribute == TCFUNCTION_EXETYPE_FIRSTSTEP || nAttribute == TCFUNCTION_EXETYPE_SECONDSTEP || !nAttribute) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionTCTypeLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCFunctionTCType(LPCTSTR pszSubType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszSubType, STRING(IDS_TCFUNCTION_EXETYPE_DBMS_IMMEDIATE))) return TCFUNCTION_EXETYPE_IMMEDIATE;
		if (!lstrcmp(pszSubType, STRING(IDS_TCFUNCTION_EXETYPE_DBMS_TIMETAG))) return TCFUNCTION_EXETYPE_TIMETAG;
		if (!lstrcmp(pszSubType, STRING(IDS_TCFUNCTION_EXETYPE_DBMS_FIRSTSTEP))) return TCFUNCTION_EXETYPE_FIRSTSTEP;
		if (!lstrcmp(pszSubType, STRING(IDS_TCFUNCTION_EXETYPE_DBMS_SECONDSTEP))) return TCFUNCTION_EXETYPE_SECONDSTEP;
	}
	else
	{
		if (!lstrcmp(pszSubType, STRING(IDS_TCFUNCTION_EXETYPE_IMMEDIATE))) return TCFUNCTION_EXETYPE_IMMEDIATE;
		if (!lstrcmp(pszSubType, STRING(IDS_TCFUNCTION_EXETYPE_TIMETAG))) return TCFUNCTION_EXETYPE_TIMETAG;
		if (!lstrcmp(pszSubType, STRING(IDS_TCFUNCTION_EXETYPE_FIRSTSTEP))) return TCFUNCTION_EXETYPE_FIRSTSTEP;
		if (!lstrcmp(pszSubType, STRING(IDS_TCFUNCTION_EXETYPE_SECONDSTEP))) return TCFUNCTION_EXETYPE_SECONDSTEP;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCFunctionTCType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCFUNCTION_EXETYPE_IMMEDIATE) return((!bDBMS) ? STRING(IDS_TCFUNCTION_EXETYPE_IMMEDIATE) : STRING(IDS_TCFUNCTION_EXETYPE_DBMS_IMMEDIATE));
	if (nAttributes & TCFUNCTION_EXETYPE_TIMETAG) return((!bDBMS) ? STRING(IDS_TCFUNCTION_EXETYPE_TIMETAG) : STRING(IDS_TCFUNCTION_EXETYPE_DBMS_TIMETAG));
	if (nAttributes & TCFUNCTION_EXETYPE_FIRSTSTEP) return((!bDBMS) ? STRING(IDS_TCFUNCTION_EXETYPE_FIRSTSTEP) : STRING(IDS_TCFUNCTION_EXETYPE_DBMS_FIRSTSTEP));
	if (nAttributes & TCFUNCTION_EXETYPE_SECONDSTEP) return((!bDBMS) ? STRING(IDS_TCFUNCTION_EXETYPE_SECONDSTEP) : STRING(IDS_TCFUNCTION_EXETYPE_DBMS_SECONDSTEP));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionTCID(INT nTCID) CONST
{
	return((nTCID >= 0x00 && nTCID <= 0xFF) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCFunctionTCIDRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 0xFF;
	return TRUE;
}

INT CALTELDatabaseEngine::GetTCFunctionTCIDLength() CONST
{
	return 2;
}

INT CALTELDatabaseEngine::TranslateTCFunctionTCID(LPCTSTR pszTCID) CONST
{
	INT  i, j;
	INT  nTCID;
	TCHAR  szDigit;
	CString  szNumber[4];
	CStringTools  cStringTools;

	for (i = 0, j = (lstrlen(pszTCID) == GetTCFunctionTCIDLength()) ? GetTCFunctionTCIDLength() : -1, nTCID = 0, szNumber[0] = cStringTools.ConvertIntToString(0), szNumber[1] = szNumber[2] = cStringTools.ConvertIntToString(10, 16), szNumber[2].MakeLower(); i < j; i++)
	{
		if (_istdigit((szNumber[3] = szDigit = pszTCID[i]).GetAt(0)))
		{
			nTCID = 16 * nTCID + szDigit - __toascii(szNumber[0][0]);
			continue;
		}
		if (_istxdigit(szDigit))
		{
			nTCID = (_istupper(szDigit)) ? (16 * nTCID + szDigit - __toascii(szNumber[1][0]) + 10) : (16 * nTCID + szDigit - __toascii(szNumber[2][0]) + 10);
			continue;
		}
		if (!_istspace(szDigit) || (!i  &&  _tcsspn(&pszTCID[i], szNumber[3]) == (size_t)(j - i)) || (nTCID != 0 && _tcsspn(&pszTCID[i], szNumber[3]) != (size_t)(j - i))) break;
	}
	return((i == j) ? nTCID : -1);
}
CString CALTELDatabaseEngine::TranslateTCFunctionTCID(INT nTCID) CONST
{
	CStringTools  cStringTools;

	return cStringTools.ConvertIntToPaddedString(nTCID, 2, 16);
}

BOOL CALTELDatabaseEngine::CheckTCFunctionPacketTag(LPCTSTR pszTag) CONST
{
	return CheckTCPacketTag(pszTag);
}

INT CALTELDatabaseEngine::GetTCFunctionPacketTagLength() CONST
{
	return GetTCPacketTagLength();
}

INT CALTELDatabaseEngine::EnumTCFunctionHazardousFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	nFlags.RemoveAll();
	szFlags.RemoveAll();
	nFlags.Add(TCFUNCTION_HAZFLAG_VITAL);
	nFlags.Add(TCFUNCTION_HAZFLAG_HAZARDOUS);
	nFlags.Add(TCFUNCTION_HAZFLAG_NONCRITICAL);
	szFlags.Add(STRING(IDS_TCFUNCTION_HAZFLAG_VITAL));
	szFlags.Add(STRING(IDS_TCFUNCTION_HAZFLAG_HAZARDOUS));
	szFlags.Add(STRING(IDS_TCFUNCTION_HAZFLAG_NONCRITICAL));
	return((INT)szFlags.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCFunctionHazardousFlag(ULONGLONG nFlag) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nFlag & (TCFUNCTION_HAZFLAG_VITAL | TCFUNCTION_HAZFLAG_HAZARDOUS | TCFUNCTION_HAZFLAG_NONCRITICAL))) == TCFUNCTION_HAZFLAG_VITAL || nAttribute == TCFUNCTION_HAZFLAG_HAZARDOUS || nAttribute == TCFUNCTION_HAZFLAG_NONCRITICAL) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionHazardousFlagLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCFunctionHazardousFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TCFUNCTION_HAZFLAG_DBMS_NONCRITICAL))) return TCFUNCTION_HAZFLAG_NONCRITICAL;
		if (!lstrcmp(pszFlag, STRING(IDS_TCFUNCTION_HAZFLAG_DBMS_VITAL))) return TCFUNCTION_HAZFLAG_VITAL;
		if (!lstrcmp(pszFlag, STRING(IDS_TCFUNCTION_HAZFLAG_DBMS_HAZARDOUS))) return TCFUNCTION_HAZFLAG_HAZARDOUS;
	}
	else
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TCFUNCTION_HAZFLAG_NONCRITICAL))) return TCFUNCTION_HAZFLAG_NONCRITICAL;
		if (!lstrcmp(pszFlag, STRING(IDS_TCFUNCTION_HAZFLAG_VITAL))) return TCFUNCTION_HAZFLAG_VITAL;
		if (!lstrcmp(pszFlag, STRING(IDS_TCFUNCTION_HAZFLAG_HAZARDOUS))) return TCFUNCTION_HAZFLAG_HAZARDOUS;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCFunctionHazardousFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCFUNCTION_HAZFLAG_NONCRITICAL) return((!bDBMS) ? STRING(IDS_TCFUNCTION_HAZFLAG_NONCRITICAL) : STRING(IDS_TCFUNCTION_HAZFLAG_DBMS_NONCRITICAL));
	if (nAttributes & TCFUNCTION_HAZFLAG_VITAL) return((!bDBMS) ? STRING(IDS_TCFUNCTION_HAZFLAG_VITAL) : STRING(IDS_TCFUNCTION_HAZFLAG_DBMS_VITAL));
	if (nAttributes & TCFUNCTION_HAZFLAG_HAZARDOUS) return((!bDBMS) ? STRING(IDS_TCFUNCTION_HAZFLAG_HAZARDOUS) : STRING(IDS_TCFUNCTION_HAZFLAG_DBMS_HAZARDOUS));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTCFunctionRouterEquipment(LPCTSTR pszEquipment) CONST
{
	return((lstrlen(pszEquipment) >= 0 && lstrlen(pszEquipment) <= GetTCFunctionRouterEquipmentLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionRouterEquipmentLength() CONST
{
	return 5;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionRouterSubSystem(LPCTSTR pszSubSystem) CONST
{
	return((lstrlen(pszSubSystem) >= 0 && lstrlen(pszSubSystem) <= GetTCFunctionRouterSubSystemLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionRouterSubSystemLength() CONST
{
	return 5;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionDestinationEquipment(LPCTSTR pszEquipment) CONST
{
	return((lstrlen(pszEquipment) >= 0 && lstrlen(pszEquipment) <= GetTCFunctionDestinationEquipmentLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionDestinationEquipmentLength() CONST
{
	return 5;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionDestinationSubSystem(LPCTSTR pszSubSystem) CONST
{
	return((lstrlen(pszSubSystem) >= 0 && lstrlen(pszSubSystem) <= GetTCFunctionDestinationSubSystemLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionDestinationSubSystemLength() CONST
{
	return 5;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionDestinationSubSchedule(LPCTSTR pszSubSchedule) CONST
{
	return((lstrlen(pszSubSchedule) >= 0 && lstrlen(pszSubSchedule) <= GetTCFunctionDestinationSubScheduleLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionDestinationSubScheduleLength() CONST
{
	return 4;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionOperationalInfo(LPCTSTR pszInfo) CONST
{
	return((lstrlen(pszInfo) >= 0 && lstrlen(pszInfo) <= GetTCFunctionOperationalInfoLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionOperationalInfoLength() CONST
{
	return 254;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionValidityConditions(LPCTSTR pszConditions) CONST
{
	return((lstrlen(pszConditions) >= 0 && lstrlen(pszConditions) <= GetTCFunctionValidityConditionsLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionValidityConditionsLength() CONST
{
	return 254;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionAssociatedTelecommands(LPCTSTR pszTelecommands) CONST
{
	return((lstrlen(pszTelecommands) >= 0 && lstrlen(pszTelecommands) <= GetTCFunctionAssociatedTelecommandsLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionAssociatedTelecommandsLength() CONST
{
	return 128;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionComplementaryTelecommands(LPCTSTR pszTelecommands) CONST
{
	return((lstrlen(pszTelecommands) >= 0 && lstrlen(pszTelecommands) <= GetTCFunctionComplementaryTelecommandsLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionComplementaryTelecommandsLength() CONST
{
	return 128;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionMissionPlannerEvent(LPCTSTR pszEvent) CONST
{
	return((lstrlen(pszEvent) >= 0 && lstrlen(pszEvent) <= GetTCFunctionMissionPlannerEventLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionMissionPlannerEventLength() CONST
{
	return 10;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionPreExeGroup(LPCTSTR pszGroup) CONST
{
	return((lstrlen(pszGroup) >= 0 && lstrlen(pszGroup) <= GetTCFunctionPreExeGroupLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionPreExeGroupLength() CONST
{
	return 12;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionExeVerGroup(LPCTSTR pszGroup) CONST
{
	return((lstrlen(pszGroup) >= 0 && lstrlen(pszGroup) <= GetTCFunctionExeVerGroupLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionExeVerGroupLength() CONST
{
	return 12;
}

INT CALTELDatabaseEngine::EnumTCFunctionStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TCFUNCTION_RECORDSTATUS_NEW);
	nStatus.Add(TCFUNCTION_RECORDSTATUS_DRAFT);
	nStatus.Add(TCFUNCTION_RECORDSTATUS_CHANGED);
	nStatus.Add(TCFUNCTION_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TCFUNCTION_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TCFUNCTION_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TCFUNCTION_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TCFUNCTION_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCFunctionStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTION_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTION_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTION_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTION_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCFunctionStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTCFunctionStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTION_RECORDSTATUS_DBMS_NEW))) return TCFUNCTION_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTION_RECORDSTATUS_DBMS_DRAFT))) return TCFUNCTION_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTION_RECORDSTATUS_DBMS_CHANGED))) return TCFUNCTION_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTION_RECORDSTATUS_DBMS_DELETED))) return TCFUNCTION_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTION_RECORDSTATUS_NEW))) return TCFUNCTION_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTION_RECORDSTATUS_DRAFT))) return TCFUNCTION_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTION_RECORDSTATUS_CHANGED))) return TCFUNCTION_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTION_RECORDSTATUS_DELETED))) return TCFUNCTION_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCFunctionStatusLength()) ? TCFUNCTION_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTCFunctionStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TCFUNCTION_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TCFUNCTION_RECORDSTATUS_NEW) : STRING(IDS_TCFUNCTION_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TCFUNCTION_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TCFUNCTION_RECORDSTATUS_DRAFT) : STRING(IDS_TCFUNCTION_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TCFUNCTION_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TCFUNCTION_RECORDSTATUS_CHANGED) : STRING(IDS_TCFUNCTION_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TCFUNCTION_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TCFUNCTION_RECORDSTATUS_DELETED) : STRING(IDS_TCFUNCTION_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionElementName(LPCTSTR pszName) CONST
{
	return((lstrlen(pszName) > 0) ? CheckTCParameterTag(pszName) : TRUE);
}

INT CALTELDatabaseEngine::GetTCFunctionElementNameLength() CONST
{
	return GetTCParameterTagLength();
}

BOOL CALTELDatabaseEngine::CheckTCFunctionElementDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) >= 0 && lstrlen(pszDescription) <= GetTCFunctionElementDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionElementDescriptionLength() CONST
{
	return 48;
}

INT CALTELDatabaseEngine::EnumTCFunctionElementTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	nTypes.RemoveAll();
	szTypes.RemoveAll();
	nTypes.Add(TCFUNCTIONELEMENT_TYPE_PARAMETER);
	nTypes.Add(TCFUNCTIONELEMENT_TYPE_CONSTANT);
	szTypes.Add(STRING(IDS_TCFUNCTIONELEMENT_TYPE_PARAMETER));
	szTypes.Add(STRING(IDS_TCFUNCTIONELEMENT_TYPE_CONSTANT));
	return((INT)szTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCFunctionElementType(LPCTSTR pszName, ULONGLONG nType) CONST
{
	return(((lstrlen(pszName) > 0 && nType == TCFUNCTIONELEMENT_TYPE_PARAMETER) || (!lstrlen(pszName) && nType == TCFUNCTIONELEMENT_TYPE_CONSTANT)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionElementTypeLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCFunctionElementType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTIONELEMENT_TYPE_DBMS_PARAMETER))) return TCFUNCTIONELEMENT_TYPE_PARAMETER;
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTIONELEMENT_TYPE_DBMS_CONSTANT))) return TCFUNCTIONELEMENT_TYPE_CONSTANT;
	}
	else
	{
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTIONELEMENT_TYPE_PARAMETER))) return TCFUNCTIONELEMENT_TYPE_PARAMETER;
		if (!lstrcmp(pszType, STRING(IDS_TCFUNCTIONELEMENT_TYPE_CONSTANT))) return TCFUNCTIONELEMENT_TYPE_CONSTANT;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCFunctionElementType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCFUNCTIONELEMENT_TYPE_PARAMETER) return((!bDBMS) ? STRING(IDS_TCFUNCTIONELEMENT_TYPE_PARAMETER) : STRING(IDS_TCFUNCTIONELEMENT_TYPE_DBMS_PARAMETER));
	if (nAttributes & TCFUNCTIONELEMENT_TYPE_CONSTANT) return((!bDBMS) ? STRING(IDS_TCFUNCTIONELEMENT_TYPE_CONSTANT) : STRING(IDS_TCFUNCTIONELEMENT_TYPE_DBMS_CONSTANT));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumTCFunctionElementValueInterpretations(CStringArray &szInterpretations, CLongUIntArray &nInterpretations) CONST
{
	nInterpretations.RemoveAll();
	szInterpretations.RemoveAll();
	nInterpretations.Add(TCPARAMETER_CALIBRATION_NONE);
	nInterpretations.Add(TCPARAMETER_CALIBRATION_ENABLED);
	nInterpretations.Add(TCPARAMETER_CALIBRATION_DISABLED);
	szInterpretations.Add(STRING(IDS_TCPARAMETER_CALIBRATION_NONE));
	szInterpretations.Add(STRING(IDS_TCPARAMETER_CALIBRATION_ENABLED));
	szInterpretations.Add(STRING(IDS_TCPARAMETER_CALIBRATION_DISABLED));
	return((INT)szInterpretations.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCFunctionElementValueInterpretation(ULONGLONG nAttributes, ULONGLONG nInterpretation) CONST
{
	return((((nAttributes & TCFUNCTIONELEMENT_TYPE_PARAMETER) && nInterpretation == TCPARAMETER_CALIBRATION_ENABLED) || nInterpretation == TCPARAMETER_CALIBRATION_DISABLED) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionElementValueInterpretationLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCFunctionElementValueInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_NONE))) return TCPARAMETER_CALIBRATION_NONE;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_ENABLED))) return TCPARAMETER_CALIBRATION_ENABLED;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_DISABLED))) return TCPARAMETER_CALIBRATION_DISABLED;
	}
	else
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPARAMETER_CALIBRATION_NONE))) return TCPARAMETER_CALIBRATION_NONE;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPARAMETER_CALIBRATION_ENABLED))) return TCPARAMETER_CALIBRATION_ENABLED;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPARAMETER_CALIBRATION_DISABLED))) return TCPARAMETER_CALIBRATION_DISABLED;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCFunctionElementValueInterpretation(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if ((nAttributes & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) == TCPARAMETER_CALIBRATION_NONE) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CALIBRATION_NONE) : STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_NONE));
	if (nAttributes & TCPARAMETER_CALIBRATION_ENABLED) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CALIBRATION_ENABLED) : STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_ENABLED));
	if (nAttributes & TCPARAMETER_CALIBRATION_DISABLED) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CALIBRATION_DISABLED) : STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_DISABLED));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumTCFunctionElementValueRadixes(CStringArray &szRadixes, CLongUIntArray &nRadixes) CONST
{
	nRadixes.RemoveAll();
	szRadixes.RemoveAll();
	nRadixes.Add(TCPARAMETER_RADIX_BINARY);
	nRadixes.Add(TCPARAMETER_RADIX_OCTAL);
	nRadixes.Add(TCPARAMETER_RADIX_DECIMAL);
	nRadixes.Add(TCPARAMETER_RADIX_HEXADECIMAL);
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_BINARY));
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_OCTAL));
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_DECIMAL));
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_HEXADECIMAL));
	return((INT)szRadixes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCFunctionElementValueRadix(ULONGLONG nAttributes, ULONGLONG nRadix) CONST
{
	for (; nAttributes & TCFUNCTIONELEMENT_TYPE_PARAMETER; )
	{
		if (nAttributes & TCPARAMETER_CALIBRATION_DISABLED)
		{
			if ((nAttributes & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) == 0) break;
			if (nAttributes & TCPARAMETER_CODING_FLOATINGPOINT) return((nRadix == TCPARAMETER_RADIX_DECIMAL) ? TRUE : FALSE);
			if (nAttributes & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER)) break;
		}
		return(((nAttributes & TCPARAMETER_CALIBRATION_ENABLED) && (!nRadix || nRadix == TCPARAMETER_RADIX_BINARY || nRadix == TCPARAMETER_RADIX_OCTAL || nRadix == TCPARAMETER_RADIX_DECIMAL || nRadix == TCPARAMETER_RADIX_HEXADECIMAL || !nRadix)) ? TRUE : FALSE);
	}
	return((nRadix == TCPARAMETER_RADIX_BINARY || nRadix == TCPARAMETER_RADIX_OCTAL || nRadix == TCPARAMETER_RADIX_DECIMAL || nRadix == TCPARAMETER_RADIX_HEXADECIMAL) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionElementValueRadixLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCFunctionElementValueRadix(LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_BINARY))) return TCPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_OCTAL))) return TCPARAMETER_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_DECIMAL))) return TCPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_HEXADECIMAL))) return TCPARAMETER_RADIX_HEXADECIMAL;
	}
	else
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_BINARY))) return TCPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_OCTAL))) return TCPARAMETER_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DECIMAL))) return TCPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_HEXADECIMAL))) return TCPARAMETER_RADIX_HEXADECIMAL;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCFunctionElementValueRadix(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCPARAMETER_RADIX_BINARY) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_BINARY) : STRING(IDS_TCPARAMETER_RADIX_DBMS_BINARY));
	if (nAttributes & TCPARAMETER_RADIX_OCTAL) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_OCTAL) : STRING(IDS_TCPARAMETER_RADIX_DBMS_OCTAL));
	if (nAttributes & TCPARAMETER_RADIX_DECIMAL) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_DECIMAL) : STRING(IDS_TCPARAMETER_RADIX_DBMS_DECIMAL));
	if (nAttributes & TCPARAMETER_RADIX_HEXADECIMAL) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_HEXADECIMAL) : STRING(IDS_TCPARAMETER_RADIX_DBMS_HEXADECIMAL));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionElementValueBitWidth(INT nWidth) CONST
{
	INT  nRange[2];

	return((GetTCFunctionElementValueBitWidthRange(nRange[0], nRange[1]) && nWidth >= nRange[0] && nWidth <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCFunctionElementValueBitWidthRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 1;
	nHigh = 48;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionElementValueBitOffset(INT nOffset) CONST
{
	INT  nRange[2];

	return((GetTCFunctionElementValueBitOffsetRange(nRange[0], nRange[1]) && nOffset >= nRange[0] && nOffset <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCFunctionElementValueBitOffsetRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 1919;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionElementConstValue(ULONGLONG nAttributes, LPCTSTR pszConstValue) CONST
{
	return CheckTCParameterConstValue(nAttributes, pszConstValue);
}

INT CALTELDatabaseEngine::GetTCFunctionElementConstValueLength() CONST
{
	return GetTCParameterConstValueLength();
}

ULONGLONG CALTELDatabaseEngine::TranslateTCFunctionElementConstValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszConstValue) CONST
{
	return TranslateTCParameterConstValue(nAttributes, nWidth, pszConstValue);
}
CString CALTELDatabaseEngine::TranslateTCFunctionElementConstValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nConstValue) CONST
{
	return TranslateTCParameterConstValue(nAttributes, nWidth, nConstValue);
}

BOOL CALTELDatabaseEngine::CheckTCFunctionElementConstTimeType(LPCTSTR pszName) CONST
{
	return CheckTCParameterConstTimeType(pszName);
}

BOOL CALTELDatabaseEngine::CheckTCFunctionElementConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return CheckTCParameterConstTime(nAttributes, pszConstTime);
}

CTimeTag CALTELDatabaseEngine::TranslateTCFunctionElementConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return TranslateTCParameterConstTime(nAttributes, pszConstTime);
}

BOOL CALTELDatabaseEngine::CheckTCFunctionBlockName(LPCTSTR pszName) CONST
{
	return CheckTCFunctionName(pszName);
}

INT CALTELDatabaseEngine::GetTCFunctionBlockNameLength() CONST
{
	return GetTCFunctionNameLength();
}

INT CALTELDatabaseEngine::EnumTCFunctionBlockInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	nInterpretations.RemoveAll();
	szInterpretations.RemoveAll();
	nInterpretations.Add(TCFUNCTIONBLOCK_TYPE_LI);
	nInterpretations.Add(TCFUNCTIONBLOCK_TYPE_LTT);
	nInterpretations.Add(TCFUNCTIONBLOCK_TYPE_L2S);
	nInterpretations.Add(TCFUNCTIONBLOCK_TYPE_NI);
	nInterpretations.Add(TCFUNCTIONBLOCK_TYPE_NTT);
	nInterpretations.Add(TCFUNCTIONBLOCK_TYPE_N2S);
	szInterpretations.Add(STRING(IDS_TCFUNCTIONBLOCK_TYPE_LI));
	szInterpretations.Add(STRING(IDS_TCFUNCTIONBLOCK_TYPE_LTT));
	szInterpretations.Add(STRING(IDS_TCFUNCTIONBLOCK_TYPE_L2S));
	szInterpretations.Add(STRING(IDS_TCFUNCTIONBLOCK_TYPE_NI));
	szInterpretations.Add(STRING(IDS_TCFUNCTIONBLOCK_TYPE_NTT));
	szInterpretations.Add(STRING(IDS_TCFUNCTIONBLOCK_TYPE_N2S));
	return((INT)szInterpretations.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCFunctionBlockInterpretation(UINT nInterpretation) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nInterpretation & (TCFUNCTIONBLOCK_TYPE_LI | TCFUNCTIONBLOCK_TYPE_LTT | TCFUNCTIONBLOCK_TYPE_L2S | TCFUNCTIONBLOCK_TYPE_NI | TCFUNCTIONBLOCK_TYPE_NTT | TCFUNCTIONBLOCK_TYPE_N2S))) == TCFUNCTIONBLOCK_TYPE_LI || nAttribute == TCFUNCTIONBLOCK_TYPE_LTT || nAttribute == TCFUNCTIONBLOCK_TYPE_L2S || nAttribute == TCFUNCTIONBLOCK_TYPE_NI || nAttribute == TCFUNCTIONBLOCK_TYPE_NTT || nAttribute == TCFUNCTIONBLOCK_TYPE_N2S) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionBlockInterpretationLength() CONST
{
	return 3;
}

UINT CALTELDatabaseEngine::TranslateTCFunctionBlockInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (_tcsstr(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_LI)) && _tcsspn(pszInterpretation, CString(SPACE) + STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_LI)) == (size_t)lstrlen(pszInterpretation)) return TCFUNCTIONBLOCK_TYPE_LI;
		if (_tcsstr(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_LTT)) && _tcsspn(pszInterpretation, CString(SPACE) + STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_LTT)) == (size_t)lstrlen(pszInterpretation)) return TCFUNCTIONBLOCK_TYPE_LTT;
		if (_tcsstr(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_L2S)) && _tcsspn(pszInterpretation, CString(SPACE) + STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_L2S)) == (size_t)lstrlen(pszInterpretation)) return TCFUNCTIONBLOCK_TYPE_L2S;
		if (_tcsstr(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_NI)) && _tcsspn(pszInterpretation, CString(SPACE) + STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_NI)) == (size_t)lstrlen(pszInterpretation)) return TCFUNCTIONBLOCK_TYPE_NI;
		if (_tcsstr(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_NTT)) && _tcsspn(pszInterpretation, CString(SPACE) + STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_NTT)) == (size_t)lstrlen(pszInterpretation)) return TCFUNCTIONBLOCK_TYPE_NTT;
		if (_tcsstr(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_N2S)) && _tcsspn(pszInterpretation, CString(SPACE) + STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_N2S)) == (size_t)lstrlen(pszInterpretation)) return TCFUNCTIONBLOCK_TYPE_N2S;
	}
	else
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCK_TYPE_LI))) return TCFUNCTIONBLOCK_TYPE_LI;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCK_TYPE_LTT))) return TCFUNCTIONBLOCK_TYPE_LTT;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCK_TYPE_L2S))) return TCFUNCTIONBLOCK_TYPE_L2S;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCK_TYPE_NI))) return TCFUNCTIONBLOCK_TYPE_NI;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCK_TYPE_NTT))) return TCFUNCTIONBLOCK_TYPE_NTT;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCK_TYPE_N2S))) return TCFUNCTIONBLOCK_TYPE_N2S;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCFunctionBlockInterpretation(UINT nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCFUNCTIONBLOCK_TYPE_LI) return((!bDBMS) ? STRING(IDS_TCFUNCTIONBLOCK_TYPE_LI) : STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_LI));
	if (nAttributes & TCFUNCTIONBLOCK_TYPE_LTT) return((!bDBMS) ? STRING(IDS_TCFUNCTIONBLOCK_TYPE_LTT) : STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_LTT));
	if (nAttributes & TCFUNCTIONBLOCK_TYPE_L2S) return((!bDBMS) ? STRING(IDS_TCFUNCTIONBLOCK_TYPE_L2S) : STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_L2S));
	if (nAttributes & TCFUNCTIONBLOCK_TYPE_NI) return((!bDBMS) ? STRING(IDS_TCFUNCTIONBLOCK_TYPE_NI) : STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_NI));
	if (nAttributes & TCFUNCTIONBLOCK_TYPE_NTT) return((!bDBMS) ? STRING(IDS_TCFUNCTIONBLOCK_TYPE_NTT) : STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_NTT));
	if (nAttributes & TCFUNCTIONBLOCK_TYPE_N2S) return((!bDBMS) ? STRING(IDS_TCFUNCTIONBLOCK_TYPE_N2S) : STRING(IDS_TCFUNCTIONBLOCK_TYPE_DBMS_N2S));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTCFunctionBlockByteOffset(INT nOffset) CONST
{
	INT  nRange[2];

	return((GetTCFunctionBlockByteOffsetRange(nRange[0], nRange[1]) && nOffset >= nRange[0] && nOffset <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCFunctionBlockByteOffsetRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 1;
	nHigh = 240;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionBlockMaxLength(INT nLength) CONST
{
	INT  nRange[2];

	return((GetTCFunctionBlockMaxLengthRange(nRange[0], nRange[1]) && nLength >= nRange[0] && nLength <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCFunctionBlockMaxLengthRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 240;
	return TRUE;
}

INT CALTELDatabaseEngine::EnumTCFunctionBlockStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TCFUNCTIONBLOCK_RECORDSTATUS_NEW);
	nStatus.Add(TCFUNCTIONBLOCK_RECORDSTATUS_DRAFT);
	nStatus.Add(TCFUNCTIONBLOCK_RECORDSTATUS_CHANGED);
	nStatus.Add(TCFUNCTIONBLOCK_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCFunctionBlockStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCFunctionBlockStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionBlockStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTCFunctionBlockStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DBMS_NEW))) return TCFUNCTIONBLOCK_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DBMS_DRAFT))) return TCFUNCTIONBLOCK_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DBMS_CHANGED))) return TCFUNCTIONBLOCK_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DBMS_DELETED))) return TCFUNCTIONBLOCK_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_NEW))) return TCFUNCTIONBLOCK_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DRAFT))) return TCFUNCTIONBLOCK_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_CHANGED))) return TCFUNCTIONBLOCK_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DELETED))) return TCFUNCTIONBLOCK_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCFunctionBlockStatusLength()) ? TCFUNCTIONBLOCK_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTCFunctionBlockStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TCFUNCTIONBLOCK_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_NEW) : STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TCFUNCTIONBLOCK_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DRAFT) : STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TCFUNCTIONBLOCK_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_CHANGED) : STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TCFUNCTIONBLOCK_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DELETED) : STRING(IDS_TCFUNCTIONBLOCK_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCFunctionBlockElementName(LPCTSTR pszName) CONST
{
	return CheckTCFunctionName(pszName) || CheckTCPacketTag(pszName) || CheckTCFunctionType(TranslateTCFunctionType(pszName));
}

INT CALTELDatabaseEngine::GetTCFunctionBlockElementNameLength() CONST
{
	return max(GetTCFunctionNameLength(), max(GetTCPacketTagLength(), GetTCFunctionTypeLength()));
}

INT CALTELDatabaseEngine::EnumTCFunctionBlockElementInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	nInterpretations.RemoveAll();
	szInterpretations.RemoveAll();
	nInterpretations.Add(TCFUNCTIONBLOCKELEMENT_TYPE_FUNCTION);
	nInterpretations.Add(TCFUNCTIONBLOCKELEMENT_TYPE_PACKET);
	nInterpretations.Add(TCFUNCTIONBLOCKELEMENT_TYPE_TCTYPE);
	szInterpretations.Add(STRING(IDS_TCFUNCTIONBLOCKELEMENT_TYPE_FUNCTION));
	szInterpretations.Add(STRING(IDS_TCFUNCTIONBLOCKELEMENT_TYPE_PACKET));
	szInterpretations.Add(STRING(IDS_TCFUNCTIONBLOCKELEMENT_TYPE_TCTYPE));
	return((INT)szInterpretations.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCFunctionBlockElementInterpretation(UINT nInterpretation) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nInterpretation & (TCFUNCTIONBLOCKELEMENT_TYPE_FUNCTION | TCFUNCTIONBLOCKELEMENT_TYPE_PACKET | TCFUNCTIONBLOCKELEMENT_TYPE_TCTYPE))) == TCFUNCTIONBLOCKELEMENT_TYPE_FUNCTION || nAttribute == TCFUNCTIONBLOCKELEMENT_TYPE_PACKET || nAttribute == TCFUNCTIONBLOCKELEMENT_TYPE_TCTYPE) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCFunctionBlockElementInterpretationLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateTCFunctionBlockElementInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCKELEMENT_TYPE_DBMS_FUNCTION))) return TCFUNCTIONBLOCKELEMENT_TYPE_FUNCTION;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCKELEMENT_TYPE_DBMS_PACKET))) return TCFUNCTIONBLOCKELEMENT_TYPE_PACKET;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCKELEMENT_TYPE_DBMS_TCTYPE))) return TCFUNCTIONBLOCKELEMENT_TYPE_TCTYPE;
	}
	else
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCKELEMENT_TYPE_FUNCTION))) return TCFUNCTIONBLOCKELEMENT_TYPE_FUNCTION;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCKELEMENT_TYPE_PACKET))) return TCFUNCTIONBLOCKELEMENT_TYPE_PACKET;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCFUNCTIONBLOCKELEMENT_TYPE_TCTYPE))) return TCFUNCTIONBLOCKELEMENT_TYPE_TCTYPE;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCFunctionBlockElementInterpretation(UINT nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCFUNCTIONBLOCKELEMENT_TYPE_FUNCTION) return((!bDBMS) ? STRING(IDS_TCFUNCTIONBLOCKELEMENT_TYPE_FUNCTION) : STRING(IDS_TCFUNCTIONBLOCKELEMENT_TYPE_DBMS_FUNCTION));
	if (nAttributes & TCFUNCTIONBLOCKELEMENT_TYPE_PACKET) return((!bDBMS) ? STRING(IDS_TCFUNCTIONBLOCKELEMENT_TYPE_PACKET) : STRING(IDS_TCFUNCTIONBLOCKELEMENT_TYPE_DBMS_PACKET));
	if (nAttributes & TCFUNCTIONBLOCKELEMENT_TYPE_TCTYPE) return((!bDBMS) ? STRING(IDS_TCFUNCTIONBLOCKELEMENT_TYPE_TCTYPE) : STRING(IDS_TCFUNCTIONBLOCKELEMENT_TYPE_DBMS_TCTYPE));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTCSequenceNameLength());
}

INT CALTELDatabaseEngine::GetTCSequenceNameLength() CONST
{
	return 16;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) >= 0 && lstrlen(pszDescription) <= GetTCSequenceDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceDescriptionLength() CONST
{
	return 64;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceSubScheduleDestination(LPCTSTR pszSubSchedule) CONST
{
	return((lstrlen(pszSubSchedule) >= 0 && lstrlen(pszSubSchedule) <= GetTCSequenceSubScheduleDestinationLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceSubScheduleDestinationLength() CONST
{
	return 4;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceMissionPlannerEvent(LPCTSTR pszEvent) CONST
{
	return((lstrlen(pszEvent) >= 0 && lstrlen(pszEvent) <= GetTCSequenceMissionPlannerEventLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceMissionPlannerEventLength() CONST
{
	return 10;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceUserName(LPCTSTR pszUserName) CONST
{
	return((lstrlen(pszUserName) >= 0 && lstrlen(pszUserName) <= GetTCSequenceUserNameLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceUserNameLength() CONST
{
	return 32;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceDate(LPCTSTR pszDate, LPCTSTR pszFormat) CONST
{
	return(((lstrlen(pszDate) > 0 && lstrlen(pszDate) <= GetTCSequenceDateLength() && CTimeKey(0).ParseGmt(pszDate, pszFormat) != (TIMEKEY)-1) || !lstrlen(pszDate)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceDateLength() CONST
{
	return 32;
}

CTimeKey CALTELDatabaseEngine::TranslateTCSequenceDate(LPCTSTR pszDate, LPCTSTR pszFormat) CONST
{
	TIMEKEY  tDate;

	return(((tDate = CTimeKey(0).ParseGmt(pszDate, pszFormat)) != (TIMEKEY)-1) ? tDate : 0);
}
CString CALTELDatabaseEngine::TranslateTCSequenceDate(CONST CTimeKey &tDate, LPCTSTR pszFormat) CONST
{
	return((tDate > 0) ? tDate.FormatGmt(pszFormat) : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceDocumentName(LPCTSTR pszDocumentName) CONST
{
	return((lstrlen(pszDocumentName) >= 0 && lstrlen(pszDocumentName) <= GetTCSequenceDocumentNameLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceDocumentNameLength() CONST
{
	return 64;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceDocumentIssue(LPCTSTR pszDocumentIssue) CONST
{
	return((lstrlen(pszDocumentIssue) >= 0 && lstrlen(pszDocumentIssue) <= GetTCSequenceDocumentIssueLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceDocumentIssueLength() CONST
{
	return 10;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceDocumentDate(LPCTSTR pszDate, LPCTSTR pszFormat) CONST
{
	return(((lstrlen(pszDate) >= 0 && lstrlen(pszDate) <= GetTCSequenceDocumentDateLength() && CTimeKey(0).ParseGmt(pszDate, pszFormat) != (TIMEKEY)-1) || !lstrlen(pszDate)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceDocumentDateLength() CONST
{
	return 32;
}

CTimeKey CALTELDatabaseEngine::TranslateTCSequenceDocumentDate(LPCTSTR pszDate, LPCTSTR pszFormat) CONST
{
	TIMEKEY  tDate;

	return(((tDate = CTimeKey(0).ParseGmt(pszDate, pszFormat)) != (TIMEKEY)-1) ? tDate : 0);
}
CString CALTELDatabaseEngine::TranslateTCSequenceDocumentDate(CONST CTimeKey &tDate, LPCTSTR pszFormat) CONST
{
	return((tDate > 0) ? tDate.FormatGmt(pszFormat) : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryCount(INT nCount) CONST
{
	INT  nRange[2];

	return((GetTCSequenceEntryCountRange(nRange[0], nRange[1]) && nCount >= nRange[0] && nCount <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCSequenceEntryCountRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 65536;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceParameterCount(INT nCount) CONST
{
	INT  nRange[2];

	return((GetTCSequenceParameterCountRange(nRange[0], nRange[1]) && nCount >= nRange[0] && nCount <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCSequenceParameterCountRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 65536;
	return TRUE;
}

INT CALTELDatabaseEngine::EnumTCSequenceStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TCSEQUENCE_RECORDSTATUS_NEW);
	nStatus.Add(TCSEQUENCE_RECORDSTATUS_DRAFT);
	nStatus.Add(TCSEQUENCE_RECORDSTATUS_CHANGED);
	nStatus.Add(TCSEQUENCE_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TCSEQUENCE_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TCSEQUENCE_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TCSEQUENCE_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TCSEQUENCE_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCSequenceStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TCSEQUENCE_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCSEQUENCE_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCSEQUENCE_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCSEQUENCE_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCSequenceStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTCSequenceStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCSEQUENCE_RECORDSTATUS_DBMS_NEW))) return TCSEQUENCE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCSEQUENCE_RECORDSTATUS_DBMS_DRAFT))) return TCSEQUENCE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCSEQUENCE_RECORDSTATUS_DBMS_CHANGED))) return TCSEQUENCE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCSEQUENCE_RECORDSTATUS_DBMS_DELETED))) return TCSEQUENCE_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCSEQUENCE_RECORDSTATUS_NEW))) return TCSEQUENCE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCSEQUENCE_RECORDSTATUS_DRAFT))) return TCSEQUENCE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCSEQUENCE_RECORDSTATUS_CHANGED))) return TCSEQUENCE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCSEQUENCE_RECORDSTATUS_DELETED))) return TCSEQUENCE_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCSequenceStatusLength()) ? TCSEQUENCE_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTCSequenceStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TCSEQUENCE_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TCSEQUENCE_RECORDSTATUS_NEW) : STRING(IDS_TCSEQUENCE_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TCSEQUENCE_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TCSEQUENCE_RECORDSTATUS_DRAFT) : STRING(IDS_TCSEQUENCE_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TCSEQUENCE_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TCSEQUENCE_RECORDSTATUS_CHANGED) : STRING(IDS_TCSEQUENCE_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TCSEQUENCE_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TCSEQUENCE_RECORDSTATUS_DELETED) : STRING(IDS_TCSEQUENCE_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceParameterTag(LPCTSTR pszTag) CONST
{
	return CheckTag(pszTag, GetTCSequenceParameterTagLength());
}

INT CALTELDatabaseEngine::GetTCSequenceParameterTagLength() CONST
{
	return 11;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceParameterDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) >= 0 && lstrlen(pszDescription) <= GetTCSequenceParameterDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceParameterDescriptionLength() CONST
{
	return 64;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceParameterUnit(LPCTSTR pszUnit) CONST
{
	return((lstrlen(pszUnit) >= 0 && lstrlen(pszUnit) <= GetTCSequenceParameterUnitLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceParameterUnitLength() CONST
{
	return 4;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceParameterPosition(INT nPosition) CONST
{
	INT  nRange[2];

	return((GetTCSequenceParameterPositionRange(nRange[0], nRange[1]) && nPosition >= nRange[0] && nPosition <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCSequenceParameterPositionRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 1023;
	return TRUE;
}

INT CALTELDatabaseEngine::EnumTCSequenceParameterValueTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	nTypes.RemoveAll();
	szTypes.RemoveAll();
	nTypes.Add(TCPARAMETER_VTYPE_CUSTOM);
	nTypes.Add(TCPARAMETER_VTYPE_CALIBRATED);
	szTypes.Add(STRING(IDS_TCPARAMETER_VTYPE_CUSTOM));
	szTypes.Add(STRING(IDS_TCPARAMETER_VTYPE_CALIBRATED));
	return((INT)szTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCSequenceParameterValueType(ULONGLONG nAttributes, ULONGLONG nType) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nType & (TCPARAMETER_VTYPE_CUSTOM | TCPARAMETER_VTYPE_CALIBRATED))) == TCPARAMETER_VTYPE_CUSTOM || nAttribute == TCPARAMETER_VTYPE_CALIBRATED) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceParameterValueTypeLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCSequenceParameterValueType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszType, STRING(IDS_TCPARAMETER_VTYPE_DBMS_CUSTOM))) return(TCPARAMETER_TYPE_NORMAL | TCPARAMETER_VTYPE_CUSTOM);
		if (!lstrcmp(pszType, STRING(IDS_TCPARAMETER_VTYPE_DBMS_CALIBRATED))) return(TCPARAMETER_TYPE_NORMAL | TCPARAMETER_VTYPE_CALIBRATED);
	}
	else
	{
		if (!lstrcmp(pszType, STRING(IDS_TCPARAMETER_VTYPE_CUSTOM))) return(TCPARAMETER_TYPE_NORMAL | TCPARAMETER_VTYPE_CUSTOM);
		if (!lstrcmp(pszType, STRING(IDS_TCPARAMETER_VTYPE_CALIBRATED))) return(TCPARAMETER_TYPE_NORMAL | TCPARAMETER_VTYPE_CALIBRATED);
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCSequenceParameterValueType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCPARAMETER_VTYPE_CUSTOM) return((!bDBMS) ? STRING(IDS_TCPARAMETER_VTYPE_CUSTOM) : STRING(IDS_TCPARAMETER_VTYPE_DBMS_CUSTOM));
	if (nAttributes & TCPARAMETER_VTYPE_CALIBRATED) return((!bDBMS) ? STRING(IDS_TCPARAMETER_VTYPE_CALIBRATED) : STRING(IDS_TCPARAMETER_VTYPE_DBMS_CALIBRATED));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTCSequenceParameterCategories(CStringArray &szCategories, CLongUIntArray &nCategories) CONST
{
	return EnumTCParameterCategories(szCategories, nCategories);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceParameterCategory(ULONGLONG nCategory) CONST
{
	return CheckTCParameterCategory(nCategory);
}

INT CALTELDatabaseEngine::GetTCSequenceParameterCategoryLength() CONST
{
	return GetTCParameterCategoryLength();
}

ULONGLONG CALTELDatabaseEngine::TranslateTCSequenceParameterCategory(LPCTSTR pszCategory, BOOL bDBMS) CONST
{
	return TranslateTCParameterCategory(pszCategory, bDBMS);
}
CString CALTELDatabaseEngine::TranslateTCSequenceParameterCategory(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return TranslateTCParameterCategory(nAttributes, bDBMS);
}

INT CALTELDatabaseEngine::EnumTCSequenceParameterCodings(CStringArray &szCodings, CLongUIntArray &nCodings) CONST
{
	return EnumTCParameterCodings(szCodings, nCodings);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceParameterCoding(ULONGLONG nAttributes, ULONGLONG nCoding) CONST
{
	return CheckTCParameterCoding(nAttributes, nCoding);
}

INT CALTELDatabaseEngine::GetTCSequenceParameterCodingLength() CONST
{
	return GetTCParameterCodingLength();
}

ULONGLONG CALTELDatabaseEngine::TranslateTCSequenceParameterCoding(LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	return TranslateTCParameterCoding(pszCoding, bDBMS);
}
CString CALTELDatabaseEngine::TranslateTCSequenceParameterCoding(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return TranslateTCParameterCoding(nAttributes, bDBMS);
}

INT CALTELDatabaseEngine::EnumTCSequenceParameterValueRadixes(CStringArray &szRadixes, CLongUIntArray &nRadixes) CONST
{
	nRadixes.RemoveAll();
	szRadixes.RemoveAll();
	nRadixes.Add(TCPARAMETER_RADIX_BINARY);
	nRadixes.Add(TCPARAMETER_RADIX_OCTAL);
	nRadixes.Add(TCPARAMETER_RADIX_DECIMAL);
	nRadixes.Add(TCPARAMETER_RADIX_HEXADECIMAL);
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_BINARY));
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_OCTAL));
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_DECIMAL));
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_HEXADECIMAL));
	return((INT)szRadixes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCSequenceParameterValueRadix(ULONGLONG nAttributes, ULONGLONG nRadix) CONST
{
	ULONGLONG  nAttribute;

	return(((((nAttribute = (nRadix & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL))) == TCPARAMETER_RADIX_BINARY || nAttribute == TCPARAMETER_RADIX_OCTAL || nAttribute == TCPARAMETER_RADIX_DECIMAL || nAttribute == TCPARAMETER_RADIX_HEXADECIMAL) && (nAttributes & TCPARAMETER_VTYPE_CUSTOM) && (nAttributes & TCPARAMETER_CALIBRATION_NONE) && ((nAttributes & TCPARAMETER_CODING_BITPATTERN) || (nAttributes & TCPARAMETER_CODING_UNSIGNEDINTEGER))) || (nAttribute == TCPARAMETER_RADIX_DECIMAL && (nAttributes & TCPARAMETER_VTYPE_CUSTOM) && (nAttributes & TCPARAMETER_CALIBRATION_NONE) && ((nAttributes & TCPARAMETER_CODING_SIGNEDINTEGER) || (nAttributes & TCPARAMETER_CODING_FLOATINGPOINT))) || ((!nAttribute || nAttribute == TCPARAMETER_RADIX_DECIMAL) && (nAttributes & TCPARAMETER_VTYPE_CUSTOM) && (nAttributes & TCPARAMETER_CALIBRATION_NUMERICAL)) || (!nAttribute && (nAttributes & TCPARAMETER_VTYPE_CALIBRATED))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceParameterValueRadixLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCSequenceParameterValueRadix(LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_BINARY))) return TCPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_OCTAL))) return TCPARAMETER_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_DECIMAL))) return TCPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_HEXADECIMAL))) return TCPARAMETER_RADIX_HEXADECIMAL;
	}
	else
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_BINARY))) return TCPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_OCTAL))) return TCPARAMETER_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DECIMAL))) return TCPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_HEXADECIMAL))) return TCPARAMETER_RADIX_HEXADECIMAL;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCSequenceParameterValueRadix(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCPARAMETER_RADIX_BINARY) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_BINARY) : STRING(IDS_TCPARAMETER_RADIX_DBMS_BINARY));
	if (nAttributes & TCPARAMETER_RADIX_OCTAL) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_OCTAL) : STRING(IDS_TCPARAMETER_RADIX_DBMS_OCTAL));
	if (nAttributes & TCPARAMETER_RADIX_DECIMAL) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_DECIMAL) : STRING(IDS_TCPARAMETER_RADIX_DBMS_DECIMAL));
	if (nAttributes & TCPARAMETER_RADIX_HEXADECIMAL) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_HEXADECIMAL) : STRING(IDS_TCPARAMETER_RADIX_DBMS_HEXADECIMAL));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceParameterBitWidth(INT nWidth) CONST
{
	INT  nRange[2];

	return((GetTCSequenceParameterBitWidthRange(nRange[0], nRange[1]) && nWidth >= nRange[0] && nWidth <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCSequenceParameterBitWidthRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 1;
	nHigh = 48;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceParameterCalTable(ULONGLONG nAttributes, LPCTSTR pszTable) CONST
{
	return(((((nAttributes & TCPARAMETER_CALIBRATION_NUMERICAL) || (nAttributes & TCPARAMETER_CALIBRATION_STATUS)) && lstrlen(pszTable) > 0 && lstrlen(pszTable) <= GetTCSequenceParameterCalTableLength()) || ((nAttributes & TCPARAMETER_CALIBRATION_NONE) && !lstrlen(pszTable))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceParameterCalTableLength() CONST
{
	return 8;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceParameterOolTable(ULONGLONG nAttributes, LPCTSTR pszTable) CONST
{
	return((lstrlen(pszTable) >= 0 && lstrlen(pszTable) <= GetTCSequenceParameterOolTableLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceParameterOolTableLength() CONST
{
	return 10;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszConstValue) CONST
{
	return CheckTCParameterConstValue(nAttributes, pszConstValue);
}

INT CALTELDatabaseEngine::GetTCSequenceParameterConstValueLength() CONST
{
	return GetTCParameterConstValueLength();
}

ULONGLONG CALTELDatabaseEngine::TranslateTCSequenceParameterConstValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszConstValue) CONST
{
	return TranslateTCParameterConstValue(nAttributes, nWidth, pszConstValue);
}
CString CALTELDatabaseEngine::TranslateTCSequenceParameterConstValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nConstValue) CONST
{
	return TranslateTCParameterConstValue(nAttributes, nWidth, nConstValue);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceParameterConstTimeType(LPCTSTR pszTag) CONST
{
	return CheckTCParameterConstTimeType(pszTag);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return CheckTCParameterConstTime(nAttributes, pszConstTime);
}

CTimeTag CALTELDatabaseEngine::TranslateTCSequenceParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return TranslateTCParameterConstTime(nAttributes, pszConstTime);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTCSequenceEntryNameLength());
}

INT CALTELDatabaseEngine::GetTCSequenceEntryNameLength() CONST
{
	return 12;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) >= 0 && lstrlen(pszDescription) <= GetTCSequenceEntryDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceEntryDescriptionLength() CONST
{
	return 64;
}

INT CALTELDatabaseEngine::EnumTCSequenceEntryTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	nTypes.RemoveAll();
	szTypes.RemoveAll();
	nTypes.Add(TCSEQUENCEENTRY_TYPE_FUNCTION);
	nTypes.Add(TCSEQUENCEENTRY_TYPE_SEQUENCE);
	nTypes.Add(TCSEQUENCEENTRY_TYPE_PROCEDURE);
	szTypes.Add(STRING(IDS_TCSEQUENCEENTRY_TYPE_FUNCTION));
	szTypes.Add(STRING(IDS_TCSEQUENCEENTRY_TYPE_SEQUENCE));
	szTypes.Add(STRING(IDS_TCSEQUENCEENTRY_TYPE_PROCEDURE));
	return((INT)szTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryType(ULONGLONG nType) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nType & (TCSEQUENCEENTRY_TYPE_FUNCTION | TCSEQUENCEENTRY_TYPE_SEQUENCE | TCSEQUENCEENTRY_TYPE_PROCEDURE))) == TCSEQUENCEENTRY_TYPE_FUNCTION || nAttribute == TCSEQUENCEENTRY_TYPE_SEQUENCE || nAttribute == TCSEQUENCEENTRY_TYPE_PROCEDURE) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceEntryTypeLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCSequenceEntryType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszType, STRING(IDS_TCSEQUENCEENTRY_TYPE_DBMS_FUNCTION))) return TCSEQUENCEENTRY_TYPE_FUNCTION;
		if (!lstrcmp(pszType, STRING(IDS_TCSEQUENCEENTRY_TYPE_DBMS_SEQUENCE))) return TCSEQUENCEENTRY_TYPE_SEQUENCE;
		if (!lstrcmp(pszType, STRING(IDS_TCSEQUENCEENTRY_TYPE_DBMS_PROCEDURE))) return TCSEQUENCEENTRY_TYPE_PROCEDURE;
	}
	else
	{
		if (!lstrcmp(pszType, STRING(IDS_TCSEQUENCEENTRY_TYPE_FUNCTION))) return TCSEQUENCEENTRY_TYPE_FUNCTION;
		if (!lstrcmp(pszType, STRING(IDS_TCSEQUENCEENTRY_TYPE_SEQUENCE))) return TCSEQUENCEENTRY_TYPE_SEQUENCE;
		if (!lstrcmp(pszType, STRING(IDS_TCSEQUENCEENTRY_TYPE_PROCEDURE))) return TCSEQUENCEENTRY_TYPE_PROCEDURE;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCSequenceEntryType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCSEQUENCEENTRY_TYPE_FUNCTION) return((!bDBMS) ? STRING(IDS_TCSEQUENCEENTRY_TYPE_FUNCTION) : STRING(IDS_TCSEQUENCEENTRY_TYPE_DBMS_FUNCTION));
	if (nAttributes & TCSEQUENCEENTRY_TYPE_SEQUENCE) return((!bDBMS) ? STRING(IDS_TCSEQUENCEENTRY_TYPE_SEQUENCE) : STRING(IDS_TCSEQUENCEENTRY_TYPE_DBMS_SEQUENCE));
	if (nAttributes & TCSEQUENCEENTRY_TYPE_PROCEDURE) return((!bDBMS) ? STRING(IDS_TCSEQUENCEENTRY_TYPE_PROCEDURE) : STRING(IDS_TCSEQUENCEENTRY_TYPE_DBMS_PROCEDURE));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumTCSequenceEntrySubTypes(CStringArray &szSubTypes, CLongUIntArray &nSubTypes) CONST
{
	nSubTypes.RemoveAll();
	szSubTypes.RemoveAll();
	nSubTypes.Add(TCSEQUENCEENTRY_EXETYPE_IMMEDIATE);
	nSubTypes.Add(TCSEQUENCEENTRY_EXETYPE_TIMETAG);
	nSubTypes.Add(TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP);
	nSubTypes.Add(TCSEQUENCEENTRY_EXETYPE_SECONDSTEP);
	szSubTypes.Add(STRING(IDS_TCSEQUENCEENTRY_EXETYPE_IMMEDIATE));
	szSubTypes.Add(STRING(IDS_TCSEQUENCEENTRY_EXETYPE_TIMETAG));
	szSubTypes.Add(STRING(IDS_TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP));
	szSubTypes.Add(STRING(IDS_TCSEQUENCEENTRY_EXETYPE_SECONDSTEP));
	return((INT)szSubTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntrySubType(ULONGLONG nSubType) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nSubType & (TCSEQUENCEENTRY_EXETYPE_IMMEDIATE | TCSEQUENCEENTRY_EXETYPE_TIMETAG | TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP | TCSEQUENCEENTRY_EXETYPE_SECONDSTEP))) == TCSEQUENCEENTRY_EXETYPE_IMMEDIATE || nAttribute == TCSEQUENCEENTRY_EXETYPE_TIMETAG || nAttribute == TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP || nAttribute == TCSEQUENCEENTRY_EXETYPE_SECONDSTEP) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceEntrySubTypeLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCSequenceEntrySubType(LPCTSTR pszSubType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszSubType, STRING(IDS_TCSEQUENCEENTRY_EXETYPE_DBMS_IMMEDIATE))) return TCSEQUENCEENTRY_EXETYPE_IMMEDIATE;
		if (!lstrcmp(pszSubType, STRING(IDS_TCSEQUENCEENTRY_EXETYPE_DBMS_TIMETAG))) return TCSEQUENCEENTRY_EXETYPE_TIMETAG;
		if (!lstrcmp(pszSubType, STRING(IDS_TCSEQUENCEENTRY_EXETYPE_DBMS_FIRSTSTEP))) return TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP;
		if (!lstrcmp(pszSubType, STRING(IDS_TCSEQUENCEENTRY_EXETYPE_DBMS_SECONDSTEP))) return TCSEQUENCEENTRY_EXETYPE_SECONDSTEP;
	}
	else
	{
		if (!lstrcmp(pszSubType, STRING(IDS_TCSEQUENCEENTRY_EXETYPE_IMMEDIATE))) return TCSEQUENCEENTRY_EXETYPE_IMMEDIATE;
		if (!lstrcmp(pszSubType, STRING(IDS_TCSEQUENCEENTRY_EXETYPE_TIMETAG))) return TCSEQUENCEENTRY_EXETYPE_TIMETAG;
		if (!lstrcmp(pszSubType, STRING(IDS_TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP))) return TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP;
		if (!lstrcmp(pszSubType, STRING(IDS_TCSEQUENCEENTRY_EXETYPE_SECONDSTEP))) return TCSEQUENCEENTRY_EXETYPE_SECONDSTEP;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCSequenceEntrySubType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCSEQUENCEENTRY_EXETYPE_IMMEDIATE) return((!bDBMS) ? STRING(IDS_TCSEQUENCEENTRY_EXETYPE_IMMEDIATE) : STRING(IDS_TCSEQUENCEENTRY_EXETYPE_DBMS_IMMEDIATE));
	if (nAttributes & TCSEQUENCEENTRY_EXETYPE_TIMETAG) return((!bDBMS) ? STRING(IDS_TCSEQUENCEENTRY_EXETYPE_TIMETAG) : STRING(IDS_TCSEQUENCEENTRY_EXETYPE_DBMS_TIMETAG));
	if (nAttributes & TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP) return((!bDBMS) ? STRING(IDS_TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP) : STRING(IDS_TCSEQUENCEENTRY_EXETYPE_DBMS_FIRSTSTEP));
	if (nAttributes & TCSEQUENCEENTRY_EXETYPE_SECONDSTEP) return((!bDBMS) ? STRING(IDS_TCSEQUENCEENTRY_EXETYPE_SECONDSTEP) : STRING(IDS_TCSEQUENCEENTRY_EXETYPE_DBMS_SECONDSTEP));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryIndex(INT nIndex) CONST
{
	INT  nRange[2];

	return((GetTCSequenceEntryIndexRange(nRange[0], nRange[1]) && nIndex >= nRange[0] && nIndex <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCSequenceEntryIndexRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 1;
	nHigh = 65536;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntry1Step(LPCTSTR psz1Step) CONST
{
	return((lstrlen(psz1Step) >= 0 && lstrlen(psz1Step) <= GetTCSequenceEntry1StepLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceEntry1StepLength() CONST
{
	return 12;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryReleaseDeltaTime(ULONGLONG nAttributes, LPCTSTR pszDelta, LPCTSTR pszFormat) CONST
{
	return((lstrlen(pszDelta) >= 0 && lstrlen(pszDelta) <= GetTCSequenceEntryReleaseDeltaTimeLength() && (CTimeTag(0).ParseGmt(pszDelta, pszFormat) != (TIMETAG)-1 || !lstrlen(pszDelta))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceEntryReleaseDeltaTimeLength() CONST
{
	return 21;
}

DWORD CALTELDatabaseEngine::TranslateTCSequenceEntryReleaseDeltaTime(LPCTSTR pszDelta, LPCTSTR pszFormat) CONST
{
	TIMETAG  tTime;

	return(((tTime = CTimeTag(0).ParseGmt(pszDelta, pszFormat)) > 0) ? (DWORD)((1000 * (tTime / 1000000)) % (1000 * SECONDSPERDAY)) : 0);
}
CString CALTELDatabaseEngine::TranslateTCSequenceEntryReleaseDeltaTime(DWORD dwDelta, LPCTSTR pszFormat) CONST
{
	return((dwDelta > 0) ? CTimeTag(1000 * (TIMETAG)dwDelta).FormatGmt(pszFormat) : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryExecutionTime(LPCTSTR pszTime, LPCTSTR pszFormat) CONST
{
	return((lstrlen(pszTime) >= 0 && lstrlen(pszTime) <= GetTCSequenceEntryExecutionTimeLength() && (CTimeTag(0).ParseGmt(pszTime, pszFormat) != (TIMETAG)-1 || !lstrlen(pszTime))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceEntryExecutionTimeLength() CONST
{
	return 24;
}

CTimeTag CALTELDatabaseEngine::TranslateTCSequenceEntryExecutionTime(LPCTSTR pszTime, LPCTSTR pszFormat) CONST
{
	TIMETAG  tTime;

	return(((tTime = CTimeTag(0).ParseGmt(pszTime, pszFormat)) != (TIMETAG)-1) ? tTime : 0);
}
CString CALTELDatabaseEngine::TranslateTCSequenceEntryExecutionTime(CONST CTimeTag &tTime, LPCTSTR pszFormat) CONST
{
	return((tTime > 0) ? tTime.FormatGmt(pszFormat) : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryExecutionDeltaTime(LPCTSTR pszDelta, LPCTSTR pszFormat) CONST
{
	return((lstrlen(pszDelta) >= 0 && lstrlen(pszDelta) <= GetTCSequenceEntryExecutionDeltaTimeLength() && (CTimeTag(0).ParseGmt(pszDelta, pszFormat) != (TIMETAG)-1 || !lstrlen(pszDelta))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceEntryExecutionDeltaTimeLength() CONST
{
	return 21;
}

DWORD CALTELDatabaseEngine::TranslateTCSequenceEntryExecutionDeltaTime(LPCTSTR pszDelta, BOOL &bEarlier, LPCTSTR pszFormat) CONST
{
	TIMETAG  tTime;

	bEarlier = ((tTime = CTimeTag(0).ParseGmt(pszDelta, pszFormat)) < 0) ? TRUE : FALSE;
	return((DWORD)(abs(tTime) / 1000));
}
CString CALTELDatabaseEngine::TranslateTCSequenceEntryExecutionDeltaTime(DWORD dwDelta, BOOL bEarlier, LPCTSTR pszFormat) CONST
{
	return((dwDelta != 0) ? ((bEarlier) ? CTimeTag(-1000 * (TIMETAG)dwDelta).FormatGmt(pszFormat) : CTimeTag(1000 * (TIMETAG)dwDelta).FormatGmt(pszFormat)) : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumTCSequenceEntryGroupFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	nFlags.RemoveAll();
	szFlags.RemoveAll();
	nFlags.Add(TCSEQUENCEENTRY_FLAG_NOGROUPMEMBER);
	nFlags.Add(TCSEQUENCEENTRY_FLAG_GROUPMEMBER);
	szFlags.Add(STRING(IDS_TCSEQUENCEENTRY_FLAG_NOGROUPMEMBER));
	szFlags.Add(STRING(IDS_TCSEQUENCEENTRY_FLAG_GROUPMEMBER));
	return((INT)szFlags.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryGroupFlag(ULONGLONG nAttributes, ULONGLONG nFlag) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nFlag & (TCSEQUENCEENTRY_FLAG_NOGROUPMEMBER | TCSEQUENCEENTRY_FLAG_GROUPMEMBER))) == TCSEQUENCEENTRY_FLAG_NOGROUPMEMBER || nAttribute == TCSEQUENCEENTRY_FLAG_GROUPMEMBER) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceEntryGroupFlagLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCSequenceEntryGroupFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TCSEQUENCEENTRY_FLAG_DBMS_NOGROUPMEMBER)) || !lstrlen(pszFlag)) return TCSEQUENCEENTRY_FLAG_NOGROUPMEMBER;
		if (!lstrcmp(pszFlag, STRING(IDS_TCSEQUENCEENTRY_FLAG_DBMS_GROUPMEMBER))) return TCSEQUENCEENTRY_FLAG_GROUPMEMBER;
	}
	else
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TCSEQUENCEENTRY_FLAG_NOGROUPMEMBER))) return TCSEQUENCEENTRY_FLAG_NOGROUPMEMBER;
		if (!lstrcmp(pszFlag, STRING(IDS_TCSEQUENCEENTRY_FLAG_GROUPMEMBER))) return TCSEQUENCEENTRY_FLAG_GROUPMEMBER;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCSequenceEntryGroupFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCSEQUENCEENTRY_FLAG_NOGROUPMEMBER) return((!bDBMS) ? STRING(IDS_TCSEQUENCEENTRY_FLAG_NOGROUPMEMBER) : STRING(IDS_TCSEQUENCEENTRY_FLAG_DBMS_NOGROUPMEMBER));
	if (nAttributes & TCSEQUENCEENTRY_FLAG_GROUPMEMBER) return((!bDBMS) ? STRING(IDS_TCSEQUENCEENTRY_FLAG_GROUPMEMBER) : STRING(IDS_TCSEQUENCEENTRY_FLAG_DBMS_GROUPMEMBER));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTCSequenceEntryBlockFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	nFlags.RemoveAll();
	szFlags.RemoveAll();
	nFlags.Add(TCSEQUENCEENTRY_FLAG_NOMACRO);
	nFlags.Add(TCSEQUENCEENTRY_FLAG_BLOCKMACRO);
	szFlags.Add(STRING(IDS_TCSEQUENCEENTRY_FLAG_NOMACRO));
	szFlags.Add(STRING(IDS_TCSEQUENCEENTRY_FLAG_BLOCKMACRO));
	return((INT)szFlags.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryBlockFlag(ULONGLONG nAttributes, ULONGLONG nFlag) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nFlag & (TCSEQUENCEENTRY_FLAG_NOMACRO | TCSEQUENCEENTRY_FLAG_BLOCKMACRO))) == TCSEQUENCEENTRY_FLAG_NOMACRO || nAttribute == TCSEQUENCEENTRY_FLAG_BLOCKMACRO) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceEntryBlockFlagLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCSequenceEntryBlockFlag(LPCTSTR pszFlag, LPCTSTR pszMember, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TCSEQUENCEENTRY_FLAG_DBMS_NOMACRO)) || !lstrlen(pszFlag)) return((TranslateTCSequenceEntryBlockMembership(pszMember) > 0) ? (TCSEQUENCEENTRY_FLAG_NOMACRO | TCSEQUENCEENTRY_FLAG_BLOCKMEMBER) : TCSEQUENCEENTRY_FLAG_NOMACRO);
		if (!lstrcmp(pszFlag, STRING(IDS_TCSEQUENCEENTRY_FLAG_DBMS_BLOCKMACRO))) return TCSEQUENCEENTRY_FLAG_BLOCKMACRO;
	}
	else
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TCSEQUENCEENTRY_FLAG_NOMACRO))) return((TranslateTCSequenceEntryBlockMembership(pszMember) > 0) ? (TCSEQUENCEENTRY_FLAG_NOMACRO | TCSEQUENCEENTRY_FLAG_BLOCKMEMBER) : TCSEQUENCEENTRY_FLAG_NOMACRO);
		if (!lstrcmp(pszFlag, STRING(IDS_TCSEQUENCEENTRY_FLAG_BLOCKMACRO))) return TCSEQUENCEENTRY_FLAG_BLOCKMACRO;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCSequenceEntryBlockFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCSEQUENCEENTRY_FLAG_NOMACRO) return((!bDBMS) ? STRING(IDS_TCSEQUENCEENTRY_FLAG_NOMACRO) : STRING(IDS_TCSEQUENCEENTRY_FLAG_DBMS_NOMACRO));
	if (nAttributes & TCSEQUENCEENTRY_FLAG_BLOCKMACRO) return((!bDBMS) ? STRING(IDS_TCSEQUENCEENTRY_FLAG_BLOCKMACRO) : STRING(IDS_TCSEQUENCEENTRY_FLAG_DBMS_BLOCKMACRO));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryBlockMembership(LPCTSTR pszMember) CONST
{
	return((lstrlen(pszMember) > 0 && lstrlen(pszMember) <= GetTCSequenceEntryBlockMembershipLength()) ? !TranslateTCSequenceEntryBlockMembership(TranslateTCSequenceEntryBlockMembership(pszMember)).CompareNoCase(pszMember) : ((!lstrlen(pszMember)) ? TRUE : FALSE));
}

INT CALTELDatabaseEngine::GetTCSequenceEntryBlockMembershipLength() CONST
{
	return 3;
}

INT CALTELDatabaseEngine::TranslateTCSequenceEntryBlockMembership(LPCTSTR pszMember) CONST
{
	INT  nPos;

	for (nPos = 0; nPos < lstrlen(pszMember); nPos++)
	{
		if (_istdigit(pszMember[nPos])) break;
		continue;
	}
	return((nPos < lstrlen(pszMember)) ? _ttoi(&pszMember[nPos]) : 0);
}
CString CALTELDatabaseEngine::TranslateTCSequenceEntryBlockMembership(INT nMember) CONST
{
	CString  szBlock;

	szBlock.Format(STRING(IDS_TCSEQUENCEENTRY_FLAG_BLOCKFORMAT), nMember);
	return((nMember > 0) ? szBlock : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryParameterCount(INT nCount) CONST
{
	INT  nRange[2];

	return((GetTCSequenceEntryParameterCountRange(nRange[0], nRange[1]) && nCount >= nRange[0] && nCount <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCSequenceEntryParameterCountRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 65536;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryParameterTag(LPCTSTR pszTag) CONST
{
	return CheckTCParameterTag(pszTag);
}

INT CALTELDatabaseEngine::GetTCSequenceEntryParameterTagLength() CONST
{
	return GetTCParameterTagLength();
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryParameterComment(LPCTSTR pszComment) CONST
{
	return((lstrlen(pszComment) >= 0 && lstrlen(pszComment) <= GetTCSequenceEntryParameterCommentLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceEntryParameterCommentLength() CONST
{
	return 40;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryParameterPosition(INT nPosition) CONST
{
	INT  nRange[2];

	return((GetTCSequenceEntryParameterPositionRange(nRange[0], nRange[1]) && nPosition >= nRange[0] && nPosition <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCSequenceEntryParameterPositionRange(INT &nLow, INT &nHigh) CONST
{
	return GetTCSequenceEntryIndexRange(nLow, nHigh);
}

INT CALTELDatabaseEngine::EnumTCSequenceEntryParameterValueTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	nTypes.RemoveAll();
	szTypes.RemoveAll();
	nTypes.Add(TCPARAMETER_VTYPE_RAW);
	nTypes.Add(TCPARAMETER_VTYPE_CALIBRATED);
	nTypes.Add(TCPARAMETER_VTYPE_FORMAL);
	szTypes.Add(STRING(IDS_TCPARAMETER_VTYPE_RAW));
	szTypes.Add(STRING(IDS_TCPARAMETER_VTYPE_CALIBRATED));
	szTypes.Add(STRING(IDS_TCPARAMETER_VTYPE_FORMAL));
	return((INT)szTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryParameterValueType(ULONGLONG nType) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nType & (TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_VTYPE_FORMAL))) == TCPARAMETER_VTYPE_RAW || nAttribute == TCPARAMETER_VTYPE_CALIBRATED || nAttribute == TCPARAMETER_VTYPE_FORMAL) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceEntryParameterValueTypeLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCSequenceEntryParameterValueType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszType, STRING(IDS_TCPARAMETER_VTYPE_DBMS_RAW))) return TCPARAMETER_VTYPE_RAW;
		if (!lstrcmp(pszType, STRING(IDS_TCPARAMETER_VTYPE_DBMS_CALIBRATED))) return TCPARAMETER_VTYPE_CALIBRATED;
		if (!lstrcmp(pszType, STRING(IDS_TCPARAMETER_VTYPE_DBMS_FORMAL))) return TCPARAMETER_VTYPE_FORMAL;
	}
	else
	{
		if (!lstrcmp(pszType, STRING(IDS_TCPARAMETER_VTYPE_RAW))) return TCPARAMETER_VTYPE_RAW;
		if (!lstrcmp(pszType, STRING(IDS_TCPARAMETER_VTYPE_CALIBRATED))) return TCPARAMETER_VTYPE_CALIBRATED;
		if (!lstrcmp(pszType, STRING(IDS_TCPARAMETER_VTYPE_FORMAL))) return TCPARAMETER_VTYPE_FORMAL;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCSequenceEntryParameterValueType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCPARAMETER_VTYPE_RAW) return((!bDBMS) ? STRING(IDS_TCPARAMETER_VTYPE_RAW) : STRING(IDS_TCPARAMETER_VTYPE_DBMS_RAW));
	if (nAttributes & TCPARAMETER_VTYPE_CALIBRATED) return((!bDBMS) ? STRING(IDS_TCPARAMETER_VTYPE_CALIBRATED) : STRING(IDS_TCPARAMETER_VTYPE_DBMS_CALIBRATED));
	if (nAttributes & TCPARAMETER_VTYPE_FORMAL) return((!bDBMS) ? STRING(IDS_TCPARAMETER_VTYPE_FORMAL) : STRING(IDS_TCPARAMETER_VTYPE_DBMS_FORMAL));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumTCSequenceEntryParameterValueRadixes(CStringArray &szRadixes, CLongUIntArray &nRadixes) CONST
{
	nRadixes.RemoveAll();
	szRadixes.RemoveAll();
	nRadixes.Add(TCPARAMETER_RADIX_BINARY);
	nRadixes.Add(TCPARAMETER_RADIX_OCTAL);
	nRadixes.Add(TCPARAMETER_RADIX_DECIMAL);
	nRadixes.Add(TCPARAMETER_RADIX_HEXADECIMAL);
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_BINARY));
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_OCTAL));
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_DECIMAL));
	szRadixes.Add(STRING(IDS_TCPARAMETER_RADIX_HEXADECIMAL));
	return((INT)szRadixes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryParameterValueRadix(ULONGLONG nAttributes, ULONGLONG nRadix) CONST
{
	ULONGLONG  nAttribute;

	return(((((nAttribute = (nRadix & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL))) == TCPARAMETER_RADIX_BINARY || nAttribute == TCPARAMETER_RADIX_OCTAL || nAttribute == TCPARAMETER_RADIX_DECIMAL || nAttribute == TCPARAMETER_RADIX_HEXADECIMAL) && (nAttributes & TCPARAMETER_VTYPE_RAW)) || ((!nAttribute || nAttribute == TCPARAMETER_RADIX_DECIMAL) && (nAttributes & TCPARAMETER_VTYPE_CALIBRATED)) || (!nAttribute && (nAttributes & TCPARAMETER_VTYPE_FORMAL))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceEntryParameterValueRadixLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCSequenceEntryParameterValueRadix(LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_BINARY))) return TCPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_OCTAL))) return TCPARAMETER_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_DECIMAL))) return TCPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DBMS_HEXADECIMAL))) return TCPARAMETER_RADIX_HEXADECIMAL;
	}
	else
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_BINARY))) return TCPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_OCTAL))) return TCPARAMETER_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_DECIMAL))) return TCPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCPARAMETER_RADIX_HEXADECIMAL))) return TCPARAMETER_RADIX_HEXADECIMAL;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCSequenceEntryParameterValueRadix(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCPARAMETER_RADIX_BINARY) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_BINARY) : STRING(IDS_TCPARAMETER_RADIX_DBMS_BINARY));
	if (nAttributes & TCPARAMETER_RADIX_OCTAL) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_OCTAL) : STRING(IDS_TCPARAMETER_RADIX_DBMS_OCTAL));
	if (nAttributes & TCPARAMETER_RADIX_DECIMAL) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_DECIMAL) : STRING(IDS_TCPARAMETER_RADIX_DBMS_DECIMAL));
	if (nAttributes & TCPARAMETER_RADIX_HEXADECIMAL) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RADIX_HEXADECIMAL) : STRING(IDS_TCPARAMETER_RADIX_DBMS_HEXADECIMAL));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryParameterBitOffset(INT nOffset) CONST
{
	INT  nRange[2];

	return((GetTCSequenceEntryParameterBitOffsetRange(nRange[0], nRange[1]) && nOffset >= nRange[0] && nOffset <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCSequenceEntryParameterBitOffsetRange(INT &nLow, INT &nHigh) CONST
{
	return GetTCFunctionElementValueBitOffsetRange(nLow, nHigh);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszConstValue) CONST
{
	return CheckTCFunctionElementConstValue(nAttributes, pszConstValue);
}

INT CALTELDatabaseEngine::GetTCSequenceEntryParameterConstValueLength() CONST
{
	return GetTCFunctionElementConstValueLength();
}

ULONGLONG CALTELDatabaseEngine::TranslateTCSequenceEntryParameterConstValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszConstValue) CONST
{
	return TranslateTCFunctionElementConstValue(nAttributes, nWidth, pszConstValue);
}
CString CALTELDatabaseEngine::TranslateTCSequenceEntryParameterConstValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nConstValue) CONST
{
	return TranslateTCFunctionElementConstValue(nAttributes, nWidth, nConstValue);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryParameterConstTimeType(LPCTSTR pszTag) CONST
{
	return CheckTCFunctionElementConstTimeType(pszTag);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return CheckTCFunctionElementConstTime(nAttributes, pszConstTime);
}

CTimeTag CALTELDatabaseEngine::TranslateTCSequenceEntryParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return TranslateTCFunctionElementConstTime(nAttributes, pszConstTime);
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryParameterMemoryAreaName(LPCTSTR pszName) CONST
{
	return((CheckOBProcessorMemoryImageName(pszName) || !lstrlen(pszName)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceEntryParameterMemoryAreaNameLength() CONST
{
	return GetOBProcessorMemoryImageNameLength();
}

BOOL CALTELDatabaseEngine::CheckTCSequenceEntryParameterMemoryAreaVersion(LPCTSTR pszVersion) CONST
{
	return((CheckOBProcessorMemoryImageBlockVersion(pszVersion) || !lstrlen(pszVersion)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCSequenceEntryParameterMemoryAreaVersionLength() CONST
{
	return GetOBProcessorMemoryImageBlockVersionLength();
}

BOOL CALTELDatabaseEngine::CheckTCProcedureName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTCProcedureNameLength());
}

INT CALTELDatabaseEngine::GetTCProcedureNameLength() CONST
{
	return 16;
}

BOOL CALTELDatabaseEngine::CheckTCProcedureDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) > 0 && lstrlen(pszDescription) <= GetTCProcedureDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCProcedureDescriptionLength() CONST
{
	return 32;
}

BOOL CALTELDatabaseEngine::CheckTCProcedureCreationDate(CONST CTimeKey &tDate) CONST
{
	CTimeKey  tTime;

	return((tDate <= tTime) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckTCProcedureModificationDate(CONST CTimeKey &tCreationDate, CONST CTimeKey &tModificationDate) CONST
{
	CTimeKey  tTime;

	return(((tModificationDate <= tTime  &&  tCreationDate <= tModificationDate) || !tModificationDate.GetTime()) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckTCProcedureExecutionMode(UINT nMode) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nMode & (TCPROCEDURE_EXECUTIONMODE_AUTOMATIC | TCPROCEDURE_EXECUTIONMODE_SINGLESTEP | TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS | TCPROCEDURE_EXECUTIONMODE_COMMANDS))) || nAttribute == TCPROCEDURE_EXECUTIONMODE_AUTOMATIC || nAttribute == TCPROCEDURE_EXECUTIONMODE_SINGLESTEP || nAttribute == TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS || nAttribute == TCPROCEDURE_EXECUTIONMODE_COMMANDS || !nAttribute) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckTCProcedureArgumentValue(ULONGLONG nAttributes, LPCTSTR pszValue) CONST
{
	return CheckTCParameterConstValue(nAttributes, pszValue);
}

ULONGLONG CALTELDatabaseEngine::TranslateTCProcedureArgumentValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszValue) CONST
{
	return TranslateTCParameterConstValue(nAttributes, nWidth, pszValue);
}
CString CALTELDatabaseEngine::TranslateTCProcedureArgumentValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nValue) CONST
{
	return TranslateTCParameterConstValue(nAttributes, nWidth, nValue);
}

CTimeTag CALTELDatabaseEngine::TranslateTCProcedureArgumentTime(ULONGLONG nAttributes, LPCTSTR pszTime) CONST
{
	return TranslateTCParameterConstTime(nAttributes, pszTime);
}

BOOL CALTELDatabaseEngine::CheckTCProcedureVariableValue(ULONGLONG nAttributes, LPCTSTR pszValue) CONST
{
	return CheckTCParameterConstValue(nAttributes, pszValue);
}

ULONGLONG CALTELDatabaseEngine::TranslateTCProcedureVariableValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszValue) CONST
{
	return TranslateTCParameterConstValue(nAttributes, nWidth, pszValue);
}
CString CALTELDatabaseEngine::TranslateTCProcedureVariableValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nValue) CONST
{
	return TranslateTCParameterConstValue(nAttributes, nWidth, nValue);
}

CTimeTag CALTELDatabaseEngine::TranslateTCProcedureVariableTime(ULONGLONG nAttributes, LPCTSTR pszTime) CONST
{
	return TranslateTCParameterConstTime(nAttributes, pszTime);
}

BOOL CALTELDatabaseEngine::CheckOBProcessorName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetOBProcessorNameLength());
}

INT CALTELDatabaseEngine::GetOBProcessorNameLength() CONST
{
	return 10;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorPatchCommand(LPCTSTR pszCommand) CONST
{
	return((CheckTCFunctionName(pszCommand) || !lstrlen(pszCommand)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorPatchCommandLength() CONST
{
	return GetTCFunctionNameLength();
}

BOOL CALTELDatabaseEngine::CheckOBProcessorDumpCommand(LPCTSTR pszCommand) CONST
{
	return CheckTCFunctionName(pszCommand);
}

INT CALTELDatabaseEngine::GetOBProcessorDumpCommandLength() CONST
{
	return GetTCFunctionNameLength();
}

BOOL CALTELDatabaseEngine::CheckOBProcessorDumpPacket(LPCTSTR pszPacket) CONST
{
	return CheckTMPacketTag(pszPacket);
}

INT CALTELDatabaseEngine::GetOBProcessorDumpPacketLength() CONST
{
	return GetTMPacketTagLength();
}

BOOL CALTELDatabaseEngine::CheckOBProcessorDumpInterval(CONST CTimeSpan &tInterval) CONST
{
	return((tInterval.GetTotalSeconds() > 0) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetOBProcessorDumpIntervalRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 1;
	nHigh = SECONDSPERDAY;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorDumpCount(INT nCount) CONST
{
	return((nCount >= 0) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetOBProcessorDumpCountRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 1000;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMasterImage(LPCTSTR pszImage) CONST
{
	return CheckOBProcessorMemoryImageName(pszImage);
}

INT CALTELDatabaseEngine::GetOBProcessorMasterImageLength() CONST
{
	return GetOBProcessorMemoryImageNameLength();
}

UINT CALTELDatabaseEngine::GetOBProcessorAddressWidth() CONST
{
	return 16;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorAddressRange(UINT nStartPage, UINT nStartAddress, UINT nEndPage, UINT nEndAddress) CONST
{
	UINT  nRange[2][2];

	return((GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]) && nStartPage >= nRange[0][0] && nStartPage <= nRange[0][1] && nEndPage >= nRange[0][0] && nEndPage <= nRange[0][1] && nStartAddress >= nRange[1][0] && nStartAddress <= nRange[1][1] && nEndAddress >= nRange[1][0] && nEndAddress <= nRange[1][1] && nStartPage * 65536 + nStartAddress <= nEndPage * 65536 + nEndAddress) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetOBProcessorAddressRange(UINT &nPageLow, UINT &nPageHigh, UINT &nAddressLow, UINT &nAddressHigh) CONST
{
	nPageLow = 0;
	nPageHigh = 15;
	nAddressLow = 0;
	nAddressHigh = 65535;
	return TRUE;
}

BOOL CALTELDatabaseEngine::TranslateOBProcessorAddressRange(LPCTSTR pszAddressRange, UINT &nStartPage, UINT &nStartAddress, UINT &nEndPage, UINT &nEndAddress) CONST
{
	INT  nPos;
	INT  nCount;
	INT  nLength;
	CString  szFormat;
	CString  szAddressRange;

	for (szAddressRange = pszAddressRange, nStartPage = nEndPage = 0, nStartAddress = nEndAddress = 0, szFormat.Format(STRING(IDS_OBPROCESSOR_ADDRESSRANGE_FORMAT), EMPTYSTRING, EMPTYSTRING, EMPTYSTRING, EMPTYSTRING), nLength = szFormat.GetLength() / 3, nCount = 0; nCount < szFormat.GetLength(); nCount++)
	{
		if ((nPos = szAddressRange.Find(szFormat.GetAt(nCount))) >= 0)
		{
			nStartPage = (!nCount) ? (UINT)ParseValue(szAddressRange, 16) : nStartPage;
			nStartAddress = (!nCount) ? (UINT)ParseValue(szAddressRange.Mid(nPos + nLength), 16) : nStartAddress;
			nEndPage = (nCount > 1) ? (UINT)ParseValue(szAddressRange, 16) : nEndPage;
			nEndAddress = (nCount > 1) ? (UINT)ParseValue(szAddressRange.Mid(nPos + nLength), 16) : nEndAddress;
			szAddressRange = (nCount == 1) ? szAddressRange.Mid(nPos + nLength) : szAddressRange;
			continue;
		}
		break;
	}
	for (nPos = 0, nLength = (CheckOBProcessorAddressRange(nStartPage, nStartAddress, nEndPage, nEndAddress)) ? (szAddressRange = pszAddressRange).GetLength() : -1; nPos < nLength; nPos++)
	{
		if (!_istxdigit(szAddressRange.GetAt(nPos)) && szFormat.Find(szAddressRange.GetAt(nPos)) < 0) break;
		continue;
	}
	return((nPos == nLength  &&  nCount == szFormat.GetLength()) ? TRUE : FALSE);
}
CString CALTELDatabaseEngine::TranslateOBProcessorAddressRange(UINT nStartPage, UINT nStartAddress, UINT nEndPage, UINT nEndAddress) CONST
{
	UINT  nRange[2][2];
	CString  szRange;
	CStringTools  cStringTools;

	GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]);
	szRange.Format(STRING(IDS_OBPROCESSOR_ADDRESSRANGE_FORMAT), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nStartPage, 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nStartAddress, 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nEndPage, 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nEndAddress, 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16));
	return szRange;
}

INT CALTELDatabaseEngine::EnumOBProcessorStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(OBPROCESSOR_RECORDSTATUS_NEW);
	nStatus.Add(OBPROCESSOR_RECORDSTATUS_DRAFT);
	nStatus.Add(OBPROCESSOR_RECORDSTATUS_CHANGED);
	nStatus.Add(OBPROCESSOR_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_OBPROCESSOR_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_OBPROCESSOR_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_OBPROCESSOR_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_OBPROCESSOR_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckOBProcessorStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_OBPROCESSOR_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_OBPROCESSOR_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_OBPROCESSOR_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_OBPROCESSOR_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetANDStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateOBProcessorStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_OBPROCESSOR_RECORDSTATUS_DBMS_NEW))) return OBPROCESSOR_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_OBPROCESSOR_RECORDSTATUS_DBMS_DRAFT))) return OBPROCESSOR_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_OBPROCESSOR_RECORDSTATUS_DBMS_CHANGED))) return OBPROCESSOR_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_OBPROCESSOR_RECORDSTATUS_DBMS_DELETED))) return OBPROCESSOR_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_OBPROCESSOR_RECORDSTATUS_NEW))) return OBPROCESSOR_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_OBPROCESSOR_RECORDSTATUS_DRAFT))) return OBPROCESSOR_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_OBPROCESSOR_RECORDSTATUS_CHANGED))) return OBPROCESSOR_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_OBPROCESSOR_RECORDSTATUS_DELETED))) return OBPROCESSOR_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetANDStatusLength()) ? OBPROCESSOR_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateOBProcessorStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == OBPROCESSOR_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_OBPROCESSOR_RECORDSTATUS_NEW) : STRING(IDS_OBPROCESSOR_RECORDSTATUS_DBMS_NEW));
	if (nStatus == OBPROCESSOR_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_OBPROCESSOR_RECORDSTATUS_DRAFT) : STRING(IDS_OBPROCESSOR_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == OBPROCESSOR_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_OBPROCESSOR_RECORDSTATUS_CHANGED) : STRING(IDS_OBPROCESSOR_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == OBPROCESSOR_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_OBPROCESSOR_RECORDSTATUS_DELETED) : STRING(IDS_OBPROCESSOR_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetOBProcessorMemoryAreaNameLength());
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaNameLength() CONST
{
	return 9;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) >= 0 && lstrlen(pszDescription) <= GetOBProcessorMemoryAreaDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaDescriptionLength() CONST
{
	return 64;
}

INT CALTELDatabaseEngine::EnumOBProcessorMemoryAreaTypes(CStringArray &szTypes, CUIntArray &nTypes) CONST
{
	nTypes.RemoveAll();
	szTypes.RemoveAll();
	nTypes.Add(OBPROCESSORMEMORYAREA_TYPE_MEMORY);
	nTypes.Add(OBPROCESSORMEMORYAREA_TYPE_IMAGE);
	szTypes.Add(STRING(IDS_OBPROCESSORMEMORYAREA_TYPE_MEMORY));
	szTypes.Add(STRING(IDS_OBPROCESSORMEMORYAREA_TYPE_IMAGE));
	return((INT)szTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaType(UINT nType) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nType & (OBPROCESSORMEMORYAREA_TYPE_MEMORY | OBPROCESSORMEMORYAREA_TYPE_IMAGE))) == OBPROCESSORMEMORYAREA_TYPE_MEMORY || nAttribute == OBPROCESSORMEMORYAREA_TYPE_IMAGE) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaTypeLength() CONST
{
	return 4;
}

UINT CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszType, STRING(IDS_OBPROCESSORMEMORYAREA_TYPE_DBMS_MEMORY))) return OBPROCESSORMEMORYAREA_TYPE_MEMORY;
		if (!lstrcmp(pszType, STRING(IDS_OBPROCESSORMEMORYAREA_TYPE_DBMS_IMAGE))) return OBPROCESSORMEMORYAREA_TYPE_IMAGE;
	}
	else
	{
		if (!lstrcmp(pszType, STRING(IDS_OBPROCESSORMEMORYAREA_TYPE_MEMORY))) return OBPROCESSORMEMORYAREA_TYPE_MEMORY;
		if (!lstrcmp(pszType, STRING(IDS_OBPROCESSORMEMORYAREA_TYPE_IMAGE))) return OBPROCESSORMEMORYAREA_TYPE_IMAGE;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaType(UINT nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & OBPROCESSORMEMORYAREA_TYPE_MEMORY) return((!bDBMS) ? STRING(IDS_OBPROCESSORMEMORYAREA_TYPE_MEMORY) : STRING(IDS_OBPROCESSORMEMORYAREA_TYPE_DBMS_MEMORY));
	if (nAttributes & OBPROCESSORMEMORYAREA_TYPE_IMAGE) return((!bDBMS) ? STRING(IDS_OBPROCESSORMEMORYAREA_TYPE_IMAGE) : STRING(IDS_OBPROCESSORMEMORYAREA_TYPE_DBMS_IMAGE));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaPatchCommand(LPCTSTR pszCommand) CONST
{
	return((CheckTCFunctionName(pszCommand) || !lstrlen(pszCommand)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaPatchCommandLength() CONST
{
	return GetTCFunctionNameLength();
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaDumpCommand(LPCTSTR pszCommand) CONST
{
	return((CheckTCFunctionName(pszCommand) || !lstrlen(pszCommand)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaDumpCommandLength() CONST
{
	return GetTCFunctionNameLength();
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaDumpPacket(LPCTSTR pszPacket) CONST
{
	return((CheckTMPacketTag(pszPacket) || !lstrlen(pszPacket)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaDumpPacketLength() CONST
{
	return GetTMPacketTagLength();
}

INT CALTELDatabaseEngine::EnumOBProcessorMemoryAreaPatchFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	nFlags.RemoveAll();
	szFlags.RemoveAll();
	nFlags.Add(OBPROCESSORMEMORYAREA_FLAG_PATCHABLE);
	nFlags.Add(OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE);
	szFlags.Add(STRING(IDS_OBPROCESSORMEMORYAREA_PATCHFLAG_ENABLED));
	szFlags.Add(STRING(IDS_OBPROCESSORMEMORYAREA_PATCHFLAG_DISABLED));
	return((INT)szFlags.GetSize());
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaPatchFlag(UINT nFlag) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nFlag & (OBPROCESSORMEMORYAREA_FLAG_PATCHABLE | OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE))) == OBPROCESSORMEMORYAREA_FLAG_PATCHABLE || nAttribute == OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaPatchFlagLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaPatchFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_PATCHFLAG_DBMS_ENABLED))) return OBPROCESSORMEMORYAREA_FLAG_PATCHABLE;
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_PATCHFLAG_DBMS_DISABLED))) return OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE;
	}
	else
	{
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_PATCHFLAG_ENABLED))) return OBPROCESSORMEMORYAREA_FLAG_PATCHABLE;
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_PATCHFLAG_DISABLED))) return OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaPatchFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & OBPROCESSORMEMORYAREA_FLAG_PATCHABLE) return((!bDBMS) ? STRING(IDS_OBPROCESSORMEMORYAREA_PATCHFLAG_ENABLED) : STRING(IDS_OBPROCESSORMEMORYAREA_PATCHFLAG_DBMS_ENABLED));
	if (nAttributes & OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE) return((!bDBMS) ? STRING(IDS_OBPROCESSORMEMORYAREA_PATCHFLAG_DISABLED) : STRING(IDS_OBPROCESSORMEMORYAREA_PATCHFLAG_DBMS_DISABLED));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumOBProcessorMemoryAreaDumpFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	nFlags.RemoveAll();
	szFlags.RemoveAll();
	nFlags.Add(OBPROCESSORMEMORYAREA_FLAG_DUMPABLE);
	nFlags.Add(OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE);
	szFlags.Add(STRING(IDS_OBPROCESSORMEMORYAREA_DUMPFLAG_ENABLED));
	szFlags.Add(STRING(IDS_OBPROCESSORMEMORYAREA_DUMPFLAG_DISABLED));
	return((INT)szFlags.GetSize());
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaDumpFlag(UINT nFlag) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nFlag & (OBPROCESSORMEMORYAREA_FLAG_DUMPABLE | OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE))) == OBPROCESSORMEMORYAREA_FLAG_DUMPABLE || nAttribute == OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaDumpFlagLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaDumpFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_DUMPFLAG_DBMS_ENABLED))) return OBPROCESSORMEMORYAREA_FLAG_DUMPABLE;
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_DUMPFLAG_DBMS_DISABLED))) return OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE;
	}
	else
	{
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_DUMPFLAG_ENABLED))) return OBPROCESSORMEMORYAREA_FLAG_DUMPABLE;
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_DUMPFLAG_DISABLED))) return OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaDumpFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & OBPROCESSORMEMORYAREA_FLAG_DUMPABLE) return((!bDBMS) ? STRING(IDS_OBPROCESSORMEMORYAREA_DUMPFLAG_ENABLED) : STRING(IDS_OBPROCESSORMEMORYAREA_DUMPFLAG_DBMS_ENABLED));
	if (nAttributes & OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE) return((!bDBMS) ? STRING(IDS_OBPROCESSORMEMORYAREA_DUMPFLAG_DISABLED) : STRING(IDS_OBPROCESSORMEMORYAREA_DUMPFLAG_DBMS_DISABLED));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumOBProcessorMemoryAreaUpdateFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	nFlags.RemoveAll();
	szFlags.RemoveAll();
	nFlags.Add(OBPROCESSORMEMORYAREA_FLAG_UPDATE);
	nFlags.Add(OBPROCESSORMEMORYAREA_FLAG_NOUPDATE);
	szFlags.Add(STRING(IDS_OBPROCESSORMEMORYAREA_UPDATEFLAG_ENABLED));
	szFlags.Add(STRING(IDS_OBPROCESSORMEMORYAREA_UPDATEFLAG_DISABLED));
	return((INT)szFlags.GetSize());
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaUpdateFlag(UINT nFlag) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nFlag & (OBPROCESSORMEMORYAREA_FLAG_UPDATE | OBPROCESSORMEMORYAREA_FLAG_NOUPDATE))) == OBPROCESSORMEMORYAREA_FLAG_UPDATE || nAttribute == OBPROCESSORMEMORYAREA_FLAG_NOUPDATE) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaUpdateFlagLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaUpdateFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_UPDATEFLAG_DBMS_ENABLED))) return OBPROCESSORMEMORYAREA_FLAG_UPDATE;
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_UPDATEFLAG_DBMS_DISABLED))) return OBPROCESSORMEMORYAREA_FLAG_NOUPDATE;
	}
	else
	{
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_UPDATEFLAG_ENABLED))) return OBPROCESSORMEMORYAREA_FLAG_UPDATE;
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_UPDATEFLAG_DISABLED))) return OBPROCESSORMEMORYAREA_FLAG_NOUPDATE;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaUpdateFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & OBPROCESSORMEMORYAREA_FLAG_UPDATE) return((!bDBMS) ? STRING(IDS_OBPROCESSORMEMORYAREA_UPDATEFLAG_ENABLED) : STRING(IDS_OBPROCESSORMEMORYAREA_UPDATEFLAG_DBMS_ENABLED));
	if (nAttributes & OBPROCESSORMEMORYAREA_FLAG_NOUPDATE) return((!bDBMS) ? STRING(IDS_OBPROCESSORMEMORYAREA_UPDATEFLAG_DISABLED) : STRING(IDS_OBPROCESSORMEMORYAREA_UPDATEFLAG_DBMS_DISABLED));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumOBProcessorMemoryAreaInhibitFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	nFlags.RemoveAll();
	szFlags.RemoveAll();
	nFlags.Add(OBPROCESSORMEMORYAREA_FLAG_INHIBIT);
	nFlags.Add(OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT);
	szFlags.Add(STRING(IDS_OBPROCESSORMEMORYAREA_INHIBITFLAG_ENABLED));
	szFlags.Add(STRING(IDS_OBPROCESSORMEMORYAREA_INHIBITFLAG_DISABLED));
	return((INT)szFlags.GetSize());
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaInhibitFlag(UINT nFlag) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nFlag & (OBPROCESSORMEMORYAREA_FLAG_INHIBIT | OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT))) == OBPROCESSORMEMORYAREA_FLAG_INHIBIT || nAttribute == OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaInhibitFlagLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaInhibitFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_INHIBITFLAG_DBMS_ENABLED))) return OBPROCESSORMEMORYAREA_FLAG_INHIBIT;
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_INHIBITFLAG_DBMS_DISABLED))) return OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT;
	}
	else
	{
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_INHIBITFLAG_ENABLED))) return OBPROCESSORMEMORYAREA_FLAG_INHIBIT;
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREA_INHIBITFLAG_DISABLED))) return OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaInhibitFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & OBPROCESSORMEMORYAREA_FLAG_INHIBIT) return((!bDBMS) ? STRING(IDS_OBPROCESSORMEMORYAREA_INHIBITFLAG_ENABLED) : STRING(IDS_OBPROCESSORMEMORYAREA_INHIBITFLAG_DBMS_ENABLED));
	if (nAttributes & OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT) return((!bDBMS) ? STRING(IDS_OBPROCESSORMEMORYAREA_INHIBITFLAG_DISABLED) : STRING(IDS_OBPROCESSORMEMORYAREA_INHIBITFLAG_DBMS_DISABLED));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaBlockName(LPCTSTR pszName) CONST
{
	return CheckOBProcessorMemoryAreaName(pszName);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaBlockNameLength() CONST
{
	return GetOBProcessorMemoryAreaNameLength();
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaBlockDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) >= 0 && lstrlen(pszDescription) <= GetOBProcessorMemoryAreaBlockDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaBlockDescriptionLength() CONST
{
	return 72;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaBlockTMParameter(LPCTSTR pszTag) CONST
{
	return((lstrlen(pszTag) > 0) ? CheckTMParameterTag(pszTag) : TRUE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaBlockTMParameterLength() CONST
{
	return GetTMParameterTagLength();
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaBlockTCParameter(LPCTSTR pszTag) CONST
{
	return((lstrlen(pszTag) > 0) ? CheckTCParameterTag(pszTag) : TRUE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaBlockTCParameterLength() CONST
{
	return GetTCParameterTagLength();
}

UINT CALTELDatabaseEngine::GetOBProcessorMemoryAreaBlockAddressWidth() CONST
{
	return GetOBProcessorAddressWidth();
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaBlockAddress(UINT nPage, UINT nAddress) CONST
{
	UINT  nRange[2][2];

	return((GetOBProcessorMemoryAreaBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]) && nPage >= nRange[0][0] && nPage <= nRange[0][1] && nAddress >= nRange[1][0] && nAddress <= nRange[1][1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetOBProcessorMemoryAreaBlockAddressRange(UINT &nPageLow, UINT &nPageHigh, UINT &nAddressLow, UINT &nAddressHigh) CONST
{
	nPageLow = 0;
	nPageHigh = 15;
	nAddressLow = 0;
	nAddressHigh = 65535;
	return TRUE;
}

BOOL CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaBlockAddress(LPCTSTR pszAddress, UINT &nPage, UINT &nAddress) CONST
{
	INT  nPos[2];
	INT  nLength;
	CString  szFormat;
	CString  szAddress;

	for (szAddress = pszAddress, nPage = 0, nAddress = 0, szFormat.Format(STRING(IDS_OBPROCESSORMEMORYAREA_ADDRESS_FORMAT), EMPTYSTRING, EMPTYSTRING); (nPos[0] = szAddress.Find(szFormat)) >= 0; )
	{
		for (nPos[1] = 0, nLength = (CheckOBProcessorMemoryAreaBlockAddress((nPage = (UINT)ParseValue(szAddress.Left(nPos[0]), 16)), (nAddress = (UINT)ParseValue(szAddress.Mid(nPos[0] + szFormat.GetLength()), 16)))) ? szAddress.GetLength() : -1; nPos[1] < nLength; nPos[1]++)
		{
			if (!_istxdigit(szAddress.GetAt(nPos[1])) && szFormat.Find(szAddress.GetAt(nPos[1])) < 0) break;
			continue;
		}
		return((nPos[1] == nLength) ? TRUE : FALSE);
	}
	return FALSE;
}
CString CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaBlockAddress(UINT nPage, UINT nAddress) CONST
{
	UINT  nRange[2][2];
	CString  szAddress;
	CStringTools  cStringTools;

	GetOBProcessorMemoryAreaBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]);
	szAddress.Format(STRING(IDS_OBPROCESSORMEMORYAREA_ADDRESS_FORMAT), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nPage, 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress, 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16));
	return szAddress;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaBlockBitOffset(INT nOffset) CONST
{
	INT  nRange[2];

	return((GetOBProcessorMemoryAreaBlockBitOffsetRange(nRange[0], nRange[1]) && nOffset >= nRange[0] && nOffset <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetOBProcessorMemoryAreaBlockBitOffsetRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 15;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaBlockBitWidth(INT nWidth) CONST
{
	INT  nRange[2];

	return((GetOBProcessorMemoryAreaBlockBitWidthRange(nRange[0], nRange[1]) && nWidth >= nRange[0] && nWidth <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetOBProcessorMemoryAreaBlockBitWidthRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 1;
	nHigh = 48;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaCheckSumName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetOBProcessorMemoryAreaCheckSumNameLength());
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaCheckSumNameLength() CONST
{
	return 12;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaCheckSumSeedValue(LPCTSTR pszSeedValue) CONST
{
	INT  nPos;
	INT  nLength;

	for (nPos = 0, nLength = (lstrlen(pszSeedValue) >= 0 && lstrlen(pszSeedValue) <= GetOBProcessorMemoryAreaCheckSumSeedValueLength()) ? lstrlen(pszSeedValue) : -1; nPos < nLength; nPos++)
	{
		if (!_istxdigit(pszSeedValue[nPos])) break;
		continue;
	}
	return((nPos == nLength) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaCheckSumSeedValueLength() CONST
{
	return 8;
}

BOOL CALTELDatabaseEngine::GetOBProcessorMemoryAreaCheckSumSeedValueRange(UINT &nLow, UINT &nHigh) CONST
{
	nLow = 0;
	nHigh = 0xFFFFFFFF;
	return TRUE;
}

UINT CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaCheckSumSeedValue(LPCTSTR pszSeedValue) CONST
{
	INT  nIndex;
	UINT  nValue;
	TCHAR  szDigit;
	CString  szSeedData;
	CString  szBaseDigit[2];
	CStringTools  cStringTools;

	for (szSeedData = pszSeedValue, szSeedData.MakeUpper(), szBaseDigit[0] = cStringTools.ConvertIntToString(0), szBaseDigit[1] = cStringTools.ConvertIntToString(10, 16), nValue = 0; szSeedData.GetLength() > 0; szSeedData = szSeedData.Mid(1))
	{
		if (_istxdigit((szDigit = szSeedData.GetAt(0))))
		{
			nIndex = (!_istdigit(szDigit)) ? 1 : 0;
			nValue = 16 * nValue + __toascii(szDigit) - __toascii(szBaseDigit[nIndex].GetAt(0)) + 10 * nIndex;
			continue;
		}
		break;
	}
	return((szSeedData.IsEmpty()) ? nValue : 0);
}
CString CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaCheckSumSeedValue(UINT nSeedValue) CONST
{
	CStringTools  cStringTools;

	return cStringTools.ConvertUIntToString(nSeedValue, 16);
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaCheckSumLength(INT nLength) CONST
{
	INT  nRange[2];

	return((GetOBProcessorMemoryAreaCheckSumLengthRange(nRange[0], nRange[1]) && (nLength == nRange[0] || nLength == nRange[1])) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetOBProcessorMemoryAreaCheckSumLengthRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 16;
	nHigh = 32;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaCheckSumDestination(UINT nDestination) CONST
{
	UINT  nRange[2];

	return((GetOBProcessorMemoryAreaCheckSumDestinationRange(nRange[0], nRange[1]) && nDestination >= nRange[0] && nDestination <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetOBProcessorMemoryAreaCheckSumDestinationRange(UINT &nLow, UINT &nHigh) CONST
{
	nLow = 0;
	nHigh = 65535;
	return TRUE;
}

UINT CALTELDatabaseEngine::GetOBProcessorMemoryAreaCheckSumAddressWidth() CONST
{
	return GetOBProcessorAddressWidth();
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaCheckSumAddressRange(UINT nPage, UINT nAddressLow, UINT nAddressHigh) CONST
{
	return CheckOBProcessorAddressRange(nPage, nAddressLow, nPage, nAddressHigh);
}

BOOL CALTELDatabaseEngine::GetOBProcessorMemoryAreaCheckSumAddressRange(UINT &nPageLow, UINT &nPageHigh, UINT &nAddressLow, UINT &nAddressHigh) CONST
{
	return GetOBProcessorAddressRange(nPageLow, nPageHigh, nAddressLow, nAddressHigh);
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueName(LPCTSTR pszName) CONST
{
	return CheckOBProcessorMemoryAreaName(pszName);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaCatalogueNameLength() CONST
{
	return GetOBProcessorMemoryAreaNameLength();
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueEntryID(LPCTSTR pszID) CONST
{
	return((CheckName(pszID, GetOBProcessorMemoryAreaCatalogueEntryIDLength()) || !lstrlen(pszID)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaCatalogueEntryIDLength() CONST
{
	return 12;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueEntryDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) >= 0 && lstrlen(pszDescription) <= GetOBProcessorMemoryAreaCatalogueEntryDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaCatalogueEntryDescriptionLength() CONST
{
	return 32;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueEntryVersion(LPCTSTR pszVersion) CONST
{
	return((lstrlen(pszVersion) > 0 && lstrlen(pszVersion) <= GetOBProcessorMemoryAreaCatalogueEntryVersionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaCatalogueEntryVersionLength() CONST
{
	return 10;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueEntryDate(LPCTSTR pszDate) CONST
{
	return((lstrlen(pszDate) >= 0 && lstrlen(pszDate) <= GetOBProcessorMemoryAreaCatalogueEntryDateLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaCatalogueEntryDateLength() CONST
{
	return 32;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueEntryTime(LPCTSTR pszTime) CONST
{
	return((lstrlen(pszTime) >= 0 && lstrlen(pszTime) <= GetOBProcessorMemoryAreaCatalogueEntryTimeLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaCatalogueEntryTimeLength() CONST
{
	return 32;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueEntryLocation(LPCTSTR pszLocation) CONST
{
	return((lstrlen(pszLocation) >= 0 && lstrlen(pszLocation) <= GetOBProcessorMemoryAreaCatalogueEntryLocationLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaCatalogueEntryLocationLength() CONST
{
	return 12;
}

INT CALTELDatabaseEngine::EnumOBProcessorMemoryAreaCatalogueEntryFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	nFlags.RemoveAll();
	szFlags.RemoveAll();
	nFlags.Add(OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE);
	nFlags.Add(OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE);
	szFlags.Add(STRING(IDS_OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE));
	szFlags.Add(STRING(IDS_OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE));
	return((INT)szFlags.GetSize());
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueEntryFlag(UINT nFlag) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nFlag & (OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE | OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE))) == OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE || nAttribute == OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE || !nAttribute) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryAreaCatalogueEntryFlagLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaCatalogueEntryFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_DBMS_COMPLETE))) return OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE;
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_DBMS_INCOMPLETE))) return OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE;
	}
	else
	{
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE))) return OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE;
		if (!lstrcmp(pszFlag, STRING(IDS_OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE))) return OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateOBProcessorMemoryAreaCatalogueEntryFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE) return((!bDBMS) ? STRING(IDS_OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE) : STRING(IDS_OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_DBMS_COMPLETE));
	if (nAttributes & OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE) return((!bDBMS) ? STRING(IDS_OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE) : STRING(IDS_OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_DBMS_INCOMPLETE));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryImageName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetOBProcessorMemoryImageNameLength());
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryImageNameLength() CONST
{
	return 9;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryImageBlockVersion(LPCTSTR pszVersion) CONST
{
	return((lstrlen(pszVersion) > 0 && lstrlen(pszVersion) <= GetOBProcessorMemoryImageBlockVersionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryImageBlockVersionLength() CONST
{
	return 10;
}

UINT CALTELDatabaseEngine::GetOBProcessorMemoryImageBlockAddressWidth() CONST
{
	return GetOBProcessorAddressWidth();
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryImageBlockAddress(UINT nPage, UINT nAddress) CONST
{
	UINT  nRange[2][2];

	return((GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]) && nPage >= nRange[0][0] && nPage <= nRange[0][1] && nAddress >= nRange[1][0] && nAddress <= nRange[1][1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetOBProcessorMemoryImageBlockAddressRange(UINT &nPageLow, UINT &nPageHigh, UINT &nAddressLow, UINT &nAddressHigh) CONST
{
	nPageLow = 0;
	nPageHigh = 15;
	nAddressLow = 0;
	nAddressHigh = 65535;
	return TRUE;
}

BOOL CALTELDatabaseEngine::TranslateOBProcessorMemoryImageBlockAddress(LPCTSTR pszAddress, UINT &nPage, UINT &nAddress) CONST
{
	INT  nPos[2];
	INT  nLength;
	CString  szFormat;
	CString  szAddress;

	for (szAddress = pszAddress, nPage = 0, nAddress = 0, szFormat.Format(STRING(IDS_OBPROCESSORMEMORYIMAGE_ADDRESS_FORMAT), EMPTYSTRING, EMPTYSTRING); (nPos[0] = szAddress.Find(szFormat)) >= 0; )
	{
		for (nPos[1] = 0, nLength = (CheckOBProcessorMemoryImageBlockAddress((nPage = (UINT)ParseValue(szAddress.Left(nPos[0]), 16)), (nAddress = (UINT)ParseValue(szAddress.Mid(nPos[0] + szFormat.GetLength()), 16)))) ? szAddress.GetLength() : -1; nPos[1] < nLength; nPos[1]++)
		{
			if (!_istxdigit(szAddress.GetAt(nPos[1])) && szFormat.Find(szAddress.GetAt(nPos[1])) < 0) break;
			continue;
		}
		return((nPos[1] == nLength) ? TRUE : FALSE);
	}
	return FALSE;
}
CString CALTELDatabaseEngine::TranslateOBProcessorMemoryImageBlockAddress(UINT nPage, UINT nAddress) CONST
{
	UINT  nRange[2][2];
	CString  szAddress;
	CStringTools  cStringTools;

	GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]);
	szAddress.Format(STRING(IDS_OBPROCESSORMEMORYIMAGE_ADDRESS_FORMAT), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nPage, 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16), (LPCTSTR)cStringTools.ConvertUIntToPaddedString(nAddress, 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16));
	return szAddress;
}

BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryImageBlockData(LPCTSTR pszData, BOOL bNumbersOnly) CONST
{
	INT  nPos;
	INT  nLength;

	for (nPos = 0, nLength = (lstrlen(pszData) >= 0 && lstrlen(pszData) <= GetOBProcessorMemoryImageBlockDataLength() && lstrlen(pszData) % 4 == 0) ? lstrlen(pszData) : -1; nPos < nLength; nPos++)
	{
		if (!_istxdigit(pszData[nPos]) && (bNumbersOnly || (pszData[nPos] != STRINGCHAR(IDS_OBPROCESSORMEMORYIMAGE_TEMPLATEDATA_CHARACTERS) && pszData[nPos] != STRINGCHAR(IDS_OBPROCESSORMEMORYIMAGE_ILLEGALDATA_CHARACTERS)))) break;
		continue;
	}
	return((nPos == nLength) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::CheckOBProcessorMemoryImageBlockData(CONST CByteArray &nData, CONST CByteArray &nMask, BOOL bAllowTemplates) CONST
{
	return((nData.GetSize() > 0 && (bAllowTemplates || !memchr(nMask.GetData(), MEMORYDUMP_DATATYPE_TEMPLATE, nMask.GetSize())) && (!nMask.GetSize() || !memchr(nMask.GetData(), MEMORYDUMP_DATATYPE_ILLEGAL, nMask.GetSize()))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetOBProcessorMemoryImageBlockDataLength() CONST
{
	return 2000;
}

INT CALTELDatabaseEngine::TranslateOBProcessorMemoryImageBlockData(LPCTSTR pszData, CByteArray &nData, CByteArray &nMask, BOOL bDBMS) CONST
{
	INT  i[2];
	BYTE  nValue;
	TCHAR  szDigit[2];
	CString  szBlockData;
	CString  szBaseDigit[2];
	CStringTools  cStringTools;

	for (szBlockData = pszData, szBlockData.MakeUpper(), szBaseDigit[0] = cStringTools.ConvertIntToString(0), szBaseDigit[1] = cStringTools.ConvertIntToString(10, 16), nValue = 0, nData.RemoveAll(), nMask.RemoveAll(); szBlockData.GetLength() > 1; szBlockData = szBlockData.Mid(sizeof(i) / sizeof(INT)), szBlockData = (!bDBMS && nData.GetSize() > 0 && nData.GetSize() % 2 == 0 && szBlockData.GetLength() > 0 && _istspace(szBlockData.GetAt(0))) ? szBlockData.Mid(1) : szBlockData, nValue = 0)
	{
		if (_istxdigit((szDigit[0] = szBlockData.GetAt(0))) && _istxdigit((szDigit[1] = szBlockData.GetAt(1))))
		{
			i[0] = (!_istdigit(szDigit[0])) ? 1 : 0;
			i[1] = (!_istdigit(szDigit[1])) ? 1 : 0;
			nValue = __toascii(szDigit[0]) - __toascii(szBaseDigit[i[0]].GetAt(0)) + 10 * i[0];
			nValue = 16 * nValue + (__toascii(szDigit[1]) - __toascii(szBaseDigit[i[1]].GetAt(0)) + 10 * i[1]);
			nMask.Add(MEMORYDUMP_DATATYPE_NORMAL);
			nData.Add(nValue);
			continue;
		}
		if (szBlockData.GetAt(0) == STRINGCHAR(IDS_OBPROCESSORMEMORYIMAGE_TEMPLATEDATA_CHARACTERS) && szBlockData.GetAt(1) == STRINGCHAR(IDS_OBPROCESSORMEMORYIMAGE_TEMPLATEDATA_CHARACTERS))
		{
			nMask.Add(MEMORYDUMP_DATATYPE_TEMPLATE);
			nData.Add(0);
			continue;
		}
		if (szBlockData.GetAt(0) == STRINGCHAR(IDS_OBPROCESSORMEMORYIMAGE_ILLEGALDATA_CHARACTERS) || szBlockData.GetAt(1) == STRINGCHAR(IDS_OBPROCESSORMEMORYIMAGE_ILLEGALDATA_CHARACTERS))
		{
			nMask.Add(MEMORYDUMP_DATATYPE_ILLEGAL);
			nData.Add(0);
			continue;
		}
		nData.RemoveAll();
		nMask.RemoveAll();
		break;
	}
	return((szBlockData.IsEmpty()) ? (INT)nData.GetSize() : -1);
}
CString CALTELDatabaseEngine::TranslateOBProcessorMemoryImageBlockData(CONST CByteArray &nData, CONST CByteArray &nMask, BOOL bDBMS) CONST
{
	INT  nPos;
	INT  nSize;
	CString  szData;
	CStringTools  cStringTools;

	for (nPos = 0, nSize = (INT)nData.GetSize(); nPos < nSize; nPos++)
	{
		szData += (nPos >= nMask.GetSize() || nMask.GetAt(nPos) == MEMORYDUMP_DATATYPE_NORMAL) ? cStringTools.ConvertUIntToPaddedString(nData.GetAt(nPos), 2, 16) : ((nMask.GetAt(nPos) == MEMORYDUMP_DATATYPE_TEMPLATE) ? STRING(IDS_OBPROCESSORMEMORYIMAGE_TEMPLATEDATA_CHARACTERS) : STRING(IDS_OBPROCESSORMEMORYIMAGE_ILLEGALDATA_CHARACTERS));
		szData += (!bDBMS  &&  nPos % 2 && nPos < nSize - 1) ? SPACE : EMPTYSTRING;
	}
	return szData;
}
CString CALTELDatabaseEngine::TranslateOBProcessorMemoryImageBlockData(LPCTSTR pszData, BOOL bDBMS) CONST
{
	INT  nPos;
	INT  nSize;
	CString  szData;

	for (nPos = 0, nSize = lstrlen(pszData); nPos < nSize; nPos++)
	{
		if (!bDBMS  &&  nPos > 0 && nPos % 4 == 0 && nPos < nSize - 1)
		{
			if (!_istspace(pszData[nPos])) szData += SPACE;
			szData += pszData[nPos];
			continue;
		}
		if (!bDBMS || (!_istspace(pszData[nPos]) && pszData[nPos] != CR  &&  pszData[nPos] != EOL))
		{
			szData += pszData[nPos];
			continue;
		}
	}
	return szData;
}

BOOL CALTELDatabaseEngine::CheckTMParameterTag(LPCTSTR pszTag) CONST
{
	return CheckTag(pszTag, GetTMParameterTagLength());
}

INT CALTELDatabaseEngine::GetTMParameterTagLength() CONST
{
	return 6;
}

BOOL CALTELDatabaseEngine::CheckTMParameterDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) <= GetTMParameterDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterDescriptionLength() CONST
{
	return 25;
}

BOOL CALTELDatabaseEngine::CheckTMParameterDetails(LPCTSTR pszDetails) CONST
{
	return((lstrlen(pszDetails) <= GetTMParameterDetailsLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterDetailsLength() CONST
{
	return 48;
}

BOOL CALTELDatabaseEngine::CheckTMParameterUnit(LPCTSTR pszUnit) CONST
{
	return((lstrlen(pszUnit) <= GetTMParameterUnitLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterUnitLength() CONST
{
	return 4;
}

INT CALTELDatabaseEngine::EnumTMParameterTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	nTypes.RemoveAll();
	szTypes.RemoveAll();
	nTypes.Add(TMPARAMETER_TYPE_DS16);
	nTypes.Add(TMPARAMETER_TYPE_DS8);
	nTypes.Add(TMPARAMETER_TYPE_HBIL);
	nTypes.Add(TMPARAMETER_TYPE_BIL);
	nTypes.Add(TMPARAMETER_TYPE_AN);
	nTypes.Add(TMPARAMETER_TYPE_FLOAT);
	szTypes.Add(STRING(IDS_TMPARAMETER_TYPE_DS16));
	szTypes.Add(STRING(IDS_TMPARAMETER_TYPE_DS8));
	szTypes.Add(STRING(IDS_TMPARAMETER_TYPE_HBIL));
	szTypes.Add(STRING(IDS_TMPARAMETER_TYPE_BIL));
	szTypes.Add(STRING(IDS_TMPARAMETER_TYPE_AN));
	szTypes.Add(STRING(IDS_TMPARAMETER_TYPE_FLOAT));
	return((INT)szTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMParameterType(ULONGLONG nType) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nType & (TMPARAMETER_TYPE_DS16 | TMPARAMETER_TYPE_DS8 | TMPARAMETER_TYPE_BIL | TMPARAMETER_TYPE_HBIL | TMPARAMETER_TYPE_AN | TMPARAMETER_TYPE_FLOAT))) == TMPARAMETER_TYPE_DS16 || nAttribute == TMPARAMETER_TYPE_DS8 || nAttribute == TMPARAMETER_TYPE_BIL || nAttribute == TMPARAMETER_TYPE_HBIL || nAttribute == TMPARAMETER_TYPE_AN || nAttribute == TMPARAMETER_TYPE_FLOAT || !nAttribute) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterTypeLength() CONST
{
	return 5;
}

ULONGLONG CALTELDatabaseEngine::TranslateTMParameterType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (_tcsstr(pszType, STRING(IDS_TMPARAMETER_TYPE_DBMS_DS16)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TMPARAMETER_TYPE_DBMS_DS16)) == (size_t)lstrlen(pszType)) return TMPARAMETER_TYPE_DS16;
		if (_tcsstr(pszType, STRING(IDS_TMPARAMETER_TYPE_DBMS_DS8)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TMPARAMETER_TYPE_DBMS_DS8)) == (size_t)lstrlen(pszType)) return TMPARAMETER_TYPE_DS8;
		if (_tcsstr(pszType, STRING(IDS_TMPARAMETER_TYPE_DBMS_HBIL)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TMPARAMETER_TYPE_DBMS_HBIL)) == (size_t)lstrlen(pszType)) return TMPARAMETER_TYPE_HBIL;
		if ((_tcsstr(pszType, STRING(IDS_TMPARAMETER_TYPE_DBMS_BIL)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TMPARAMETER_TYPE_DBMS_BIL)) == (size_t)lstrlen(pszType)) || (_tcsstr(pszType, STRING(IDS_TMPARAMETER_TYPE_DBMS_BIL_I)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TMPARAMETER_TYPE_DBMS_BIL_I)) == (size_t)lstrlen(pszType)) || (_tcsstr(pszType, STRING(IDS_TMPARAMETER_TYPE_DBMS_BIL_II)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TMPARAMETER_TYPE_DBMS_BIL_II)) == (size_t)lstrlen(pszType))) return TMPARAMETER_TYPE_BIL;
		if (_tcsstr(pszType, STRING(IDS_TMPARAMETER_TYPE_DBMS_AN)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TMPARAMETER_TYPE_DBMS_AN)) == (size_t)lstrlen(pszType)) return TMPARAMETER_TYPE_AN;
		if (_tcsstr(pszType, STRING(IDS_TMPARAMETER_TYPE_DBMS_FLOAT)) && _tcsspn(pszType, CString(SPACE) + STRING(IDS_TMPARAMETER_TYPE_DBMS_FLOAT)) == (size_t)lstrlen(pszType)) return TMPARAMETER_TYPE_FLOAT;
	}
	else
	{
		if (!lstrcmp(pszType, STRING(IDS_TMPARAMETER_TYPE_DS16))) return TMPARAMETER_TYPE_DS16;
		if (!lstrcmp(pszType, STRING(IDS_TMPARAMETER_TYPE_DS8))) return TMPARAMETER_TYPE_DS8;
		if (!lstrcmp(pszType, STRING(IDS_TMPARAMETER_TYPE_HBIL))) return TMPARAMETER_TYPE_HBIL;
		if (!lstrcmp(pszType, STRING(IDS_TMPARAMETER_TYPE_BIL))) return TMPARAMETER_TYPE_BIL;
		if (!lstrcmp(pszType, STRING(IDS_TMPARAMETER_TYPE_AN))) return TMPARAMETER_TYPE_AN;
		if (!lstrcmp(pszType, STRING(IDS_TMPARAMETER_TYPE_FLOAT))) return TMPARAMETER_TYPE_FLOAT;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTMParameterType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if ((nAttributes & TMPARAMETER_TYPE_DS16) == TMPARAMETER_TYPE_DS16) return((!bDBMS) ? STRING(IDS_TMPARAMETER_TYPE_DS16) : STRING(IDS_TMPARAMETER_TYPE_DBMS_DS16));
	if ((nAttributes & TMPARAMETER_TYPE_DS8) == TMPARAMETER_TYPE_DS8) return((!bDBMS) ? STRING(IDS_TMPARAMETER_TYPE_DS8) : STRING(IDS_TMPARAMETER_TYPE_DBMS_DS8));
	if ((nAttributes & TMPARAMETER_TYPE_HBIL) == TMPARAMETER_TYPE_HBIL) return((!bDBMS) ? STRING(IDS_TMPARAMETER_TYPE_HBIL) : STRING(IDS_TMPARAMETER_TYPE_DBMS_HBIL));
	if ((nAttributes & TMPARAMETER_TYPE_BIL) == TMPARAMETER_TYPE_BIL) return((!bDBMS) ? STRING(IDS_TMPARAMETER_TYPE_BIL) : STRING(IDS_TMPARAMETER_TYPE_DBMS_BIL));
	if ((nAttributes & TMPARAMETER_TYPE_AN) == TMPARAMETER_TYPE_AN) return((!bDBMS) ? STRING(IDS_TMPARAMETER_TYPE_AN) : STRING(IDS_TMPARAMETER_TYPE_DBMS_AN));
	if ((nAttributes & TMPARAMETER_TYPE_FLOAT) == TMPARAMETER_TYPE_FLOAT) return((!bDBMS) ? STRING(IDS_TMPARAMETER_TYPE_FLOAT) : STRING(IDS_TMPARAMETER_TYPE_DBMS_FLOAT));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumTMParameterCategories(CStringArray &szCategories, CLongUIntArray &nCategories) CONST
{
	nCategories.RemoveAll();
	szCategories.RemoveAll();
	nCategories.Add(TMPARAMETER_CALIBRATION_NONE);
	nCategories.Add(TMPARAMETER_CALIBRATION_NUMERICAL);
	nCategories.Add(TMPARAMETER_CALIBRATION_STATUS);
	szCategories.Add(STRING(IDS_TMPARAMETER_CALIBRATION_NONE));
	szCategories.Add(STRING(IDS_TMPARAMETER_CALIBRATION_NUMERICAL));
	szCategories.Add(STRING(IDS_TMPARAMETER_CALIBRATION_STATUS));
	return((INT)szCategories.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMParameterCategory(ULONGLONG nCategory) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nCategory & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS))) == TMPARAMETER_CALIBRATION_NONE || nAttribute == TMPARAMETER_CALIBRATION_NUMERICAL || nAttribute == TMPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterCategoryLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTMParameterCategory(LPCTSTR pszCategory, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszCategory, STRING(IDS_TMPARAMETER_CALIBRATION_DBMS_NONE))) return TMPARAMETER_CALIBRATION_NONE;
		if (!lstrcmp(pszCategory, STRING(IDS_TMPARAMETER_CALIBRATION_DBMS_NUMERICAL))) return TMPARAMETER_CALIBRATION_NUMERICAL;
		if (!lstrcmp(pszCategory, STRING(IDS_TMPARAMETER_CALIBRATION_DBMS_STATUS))) return TMPARAMETER_CALIBRATION_STATUS;
	}
	else
	{
		if (!lstrcmp(pszCategory, STRING(IDS_TMPARAMETER_CALIBRATION_NONE))) return TMPARAMETER_CALIBRATION_NONE;
		if (!lstrcmp(pszCategory, STRING(IDS_TMPARAMETER_CALIBRATION_NUMERICAL))) return TMPARAMETER_CALIBRATION_NUMERICAL;
		if (!lstrcmp(pszCategory, STRING(IDS_TMPARAMETER_CALIBRATION_STATUS))) return TMPARAMETER_CALIBRATION_STATUS;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTMParameterCategory(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TMPARAMETER_CALIBRATION_NONE) return((!bDBMS) ? STRING(IDS_TMPARAMETER_CALIBRATION_NONE) : STRING(IDS_TMPARAMETER_CALIBRATION_DBMS_NONE));
	if (nAttributes & TMPARAMETER_CALIBRATION_NUMERICAL) return((!bDBMS) ? STRING(IDS_TMPARAMETER_CALIBRATION_NUMERICAL) : STRING(IDS_TMPARAMETER_CALIBRATION_DBMS_NUMERICAL));
	if (nAttributes & TMPARAMETER_CALIBRATION_STATUS) return((!bDBMS) ? STRING(IDS_TMPARAMETER_CALIBRATION_STATUS) : STRING(IDS_TMPARAMETER_CALIBRATION_DBMS_STATUS));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumTMParameterNatures(CStringArray &szNatures, CLongUIntArray &nNatures) CONST
{
	nNatures.RemoveAll();
	szNatures.RemoveAll();
	nNatures.Add(TMPARAMETER_NATURE_RAW);
	nNatures.Add(TMPARAMETER_NATURE_DERIVED);
	nNatures.Add(TMPARAMETER_NATURE_CONSTANT);
	szNatures.Add(STRING(IDS_TMPARAMETER_NATURE_RAW));
	szNatures.Add(STRING(IDS_TMPARAMETER_NATURE_DERIVED));
	szNatures.Add(STRING(IDS_TMPARAMETER_NATURE_CONSTANT));
	return((INT)szNatures.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMParameterNature(ULONGLONG nNature) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nNature & (TMPARAMETER_NATURE_RAW | TMPARAMETER_NATURE_DERIVED | TMPARAMETER_NATURE_CONSTANT))) == TMPARAMETER_NATURE_RAW || nAttribute == TMPARAMETER_NATURE_DERIVED || nAttribute == TMPARAMETER_NATURE_CONSTANT) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterNatureLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTMParameterNature(LPCTSTR pszNature, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszNature, STRING(IDS_TMPARAMETER_NATURE_DBMS_RAW))) return TMPARAMETER_NATURE_RAW;
		if (!lstrcmp(pszNature, STRING(IDS_TMPARAMETER_NATURE_DBMS_DERIVED))) return TMPARAMETER_NATURE_DERIVED;
		if (!lstrcmp(pszNature, STRING(IDS_TMPARAMETER_NATURE_DBMS_CONSTANT))) return TMPARAMETER_NATURE_CONSTANT;
	}
	else
	{
		if (!lstrcmp(pszNature, STRING(IDS_TMPARAMETER_NATURE_RAW))) return TMPARAMETER_NATURE_RAW;
		if (!lstrcmp(pszNature, STRING(IDS_TMPARAMETER_NATURE_DERIVED))) return TMPARAMETER_NATURE_DERIVED;
		if (!lstrcmp(pszNature, STRING(IDS_TMPARAMETER_NATURE_CONSTANT))) return TMPARAMETER_NATURE_CONSTANT;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTMParameterNature(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TMPARAMETER_NATURE_RAW) return((!bDBMS) ? STRING(IDS_TMPARAMETER_NATURE_RAW) : STRING(IDS_TMPARAMETER_NATURE_DBMS_RAW));
	if (nAttributes & TMPARAMETER_NATURE_DERIVED) return((!bDBMS) ? STRING(IDS_TMPARAMETER_NATURE_DERIVED) : STRING(IDS_TMPARAMETER_NATURE_DBMS_DERIVED));
	if (nAttributes & TMPARAMETER_NATURE_CONSTANT) return((!bDBMS) ? STRING(IDS_TMPARAMETER_NATURE_CONSTANT) : STRING(IDS_TMPARAMETER_NATURE_DBMS_CONSTANT));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTMParameterBitWidth(ULONGLONG nAttributes, INT nWidth) CONST
{
	INT  nRange[2];

	return((GetTMParameterBitWidthRange(nRange[0], nRange[1]) && (!(nAttributes & (TMPARAMETER_NATURE_RAW | TMPARAMETER_NATURE_CONSTANT | TMPARAMETER_NATURE_DERIVED)) || ((nAttributes & TMPARAMETER_NATURE_RAW) && (((nAttributes & TMPARAMETER_CODING_FLOATINGPOINT) && (nWidth == nRange[1] || nWidth == 48)) || (!(nAttributes & TMPARAMETER_CODING_FLOATINGPOINT) && nWidth >= nRange[0] && nWidth <= 48))) || ((nAttributes & TMPARAMETER_NATURE_DERIVED) && (nWidth == 1 || nWidth == nRange[1])) || (nAttributes & TMPARAMETER_NATURE_CONSTANT))) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMParameterBitWidthRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 1;
	nHigh = 32;
	return TRUE;
}

INT CALTELDatabaseEngine::EnumTMParameterOBSTypes(CStringArray &szOBSTypes, CLongUIntArray &nOBSTypes) CONST
{
	nOBSTypes.RemoveAll();
	szOBSTypes.RemoveAll();
	nOBSTypes.Add(TMPARAMETER_OBS_ONBOARD);
	nOBSTypes.Add(TMPARAMETER_OBS_MONITOR);
	nOBSTypes.Add(TMPARAMETER_OBS_ONBOARD | TMPARAMETER_OBS_MONITOR);
	szOBSTypes.Add(STRING(IDS_TMPARAMETER_OBS_ONBOARD));
	szOBSTypes.Add(STRING(IDS_TMPARAMETER_OBS_MONITOR));
	szOBSTypes.Add(STRING(IDS_TMPARAMETER_OBS_BOTH));
	return((INT)szOBSTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMParameterOBSType(ULONGLONG nAttributes, ULONGLONG nOBSType) CONST
{
	return(((nOBSType & (TMPARAMETER_OBS_ONBOARD | TMPARAMETER_OBS_MONITOR)) == 0) ? ((nAttributes & (TMPARAMETER_NATURE_RAW | TMPARAMETER_NATURE_CONSTANT | TMPARAMETER_NATURE_DERIVED)) == 0 || (nAttributes & TMPARAMETER_NATURE_CONSTANT) || (nAttributes & TMPARAMETER_NATURE_DERIVED)) : TRUE);
}

INT CALTELDatabaseEngine::GetTMParameterOBSTypeLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTMParameterOBSType(LPCTSTR pszOBSType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszOBSType, STRING(IDS_TMPARAMETER_OBS_DBMS_ONBOARD))) return TMPARAMETER_OBS_ONBOARD;
		if (!lstrcmp(pszOBSType, STRING(IDS_TMPARAMETER_OBS_DBMS_MONITOR))) return TMPARAMETER_OBS_MONITOR;
		if (!lstrcmp(pszOBSType, STRING(IDS_TMPARAMETER_OBS_DBMS_BOTH))) return TMPARAMETER_OBS_ONBOARD | TMPARAMETER_OBS_MONITOR;
	}
	else
	{
		if (!lstrcmp(pszOBSType, STRING(IDS_TMPARAMETER_OBS_ONBOARD))) return TMPARAMETER_OBS_ONBOARD;
		if (!lstrcmp(pszOBSType, STRING(IDS_TMPARAMETER_OBS_MONITOR))) return TMPARAMETER_OBS_MONITOR;
		if (!lstrcmp(pszOBSType, STRING(IDS_TMPARAMETER_OBS_BOTH))) return TMPARAMETER_OBS_ONBOARD | TMPARAMETER_OBS_MONITOR;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTMParameterOBSType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if ((nAttributes & (TMPARAMETER_OBS_ONBOARD | TMPARAMETER_OBS_MONITOR)) == TMPARAMETER_OBS_ONBOARD) return((!bDBMS) ? STRING(IDS_TMPARAMETER_OBS_ONBOARD) : STRING(IDS_TMPARAMETER_OBS_DBMS_ONBOARD));
	if ((nAttributes & (TMPARAMETER_OBS_ONBOARD | TMPARAMETER_OBS_MONITOR)) == TMPARAMETER_OBS_MONITOR) return((!bDBMS) ? STRING(IDS_TMPARAMETER_OBS_MONITOR) : STRING(IDS_TMPARAMETER_OBS_DBMS_MONITOR));
	if ((nAttributes & (TMPARAMETER_OBS_ONBOARD | TMPARAMETER_OBS_MONITOR)) == (TMPARAMETER_OBS_ONBOARD | TMPARAMETER_OBS_MONITOR)) return((!bDBMS) ? STRING(IDS_TMPARAMETER_OBS_BOTH) : STRING(IDS_TMPARAMETER_OBS_DBMS_BOTH));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTMParameterCodings(CStringArray &szCodings, CLongUIntArray &nCodings) CONST
{
	nCodings.RemoveAll();
	szCodings.RemoveAll();
	nCodings.Add(TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY);
	nCodings.Add(TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL);
	nCodings.Add(TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL);
	nCodings.Add(TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_RADIX_DECIMAL);
	nCodings.Add(TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_DECIMAL);
	szCodings.Add(STRING(IDS_TMPARAMETER_CODING_BITPATTERN));
	szCodings.Add(STRING(IDS_TMPARAMETER_CODING_SIGNEDINTEGER));
	szCodings.Add(STRING(IDS_TMPARAMETER_CODING_UNSIGNEDINTEGER));
	szCodings.Add(STRING(IDS_TMPARAMETER_CODING_COMPLEMENTCOMPLEX));
	szCodings.Add(STRING(IDS_TMPARAMETER_CODING_FLOATINGPOINT));
	return((INT)szCodings.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMParameterCoding(ULONGLONG nAttributes, ULONGLONG nCoding) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nCoding & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT))) == TMPARAMETER_CODING_BITPATTERN || nAttribute == TMPARAMETER_CODING_SIGNEDINTEGER || nAttribute == TMPARAMETER_CODING_UNSIGNEDINTEGER || nAttribute == TMPARAMETER_CODING_COMPLEMENTCOMPLEX || nAttribute == TMPARAMETER_CODING_FLOATINGPOINT || (!nAttribute && ((nAttributes & (TMPARAMETER_NATURE_RAW | TMPARAMETER_NATURE_CONSTANT | TMPARAMETER_NATURE_DERIVED)) == 0 || (nAttributes & TMPARAMETER_NATURE_CONSTANT)))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterCodingLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTMParameterCoding(LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszCoding, STRING(IDS_TMPARAMETER_CODING_DBMS_BITPATTERN))) return TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszCoding, STRING(IDS_TMPARAMETER_CODING_DBMS_SIGNEDINTEGER))) return TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszCoding, STRING(IDS_TMPARAMETER_CODING_DBMS_UNSIGNEDINTEGER))) return TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszCoding, STRING(IDS_TMPARAMETER_CODING_DBMS_COMPLEMENTCOMPLEX))) return TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszCoding, STRING(IDS_TMPARAMETER_CODING_DBMS_FLOATINGPOINT))) return TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_DECIMAL;
	}
	else
	{
		if (!lstrcmp(pszCoding, STRING(IDS_TMPARAMETER_CODING_BITPATTERN))) return TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszCoding, STRING(IDS_TMPARAMETER_CODING_SIGNEDINTEGER))) return TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszCoding, STRING(IDS_TMPARAMETER_CODING_UNSIGNEDINTEGER))) return TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszCoding, STRING(IDS_TMPARAMETER_CODING_COMPLEMENTCOMPLEX))) return TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszCoding, STRING(IDS_TMPARAMETER_CODING_FLOATINGPOINT))) return TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_DECIMAL;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTMParameterCoding(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if ((nAttributes & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY)) == (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY)) return((!bDBMS) ? STRING(IDS_TMPARAMETER_CODING_BITPATTERN) : STRING(IDS_TMPARAMETER_CODING_DBMS_BITPATTERN));
	if ((nAttributes & (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL)) == (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL)) return((!bDBMS) ? STRING(IDS_TMPARAMETER_CODING_SIGNEDINTEGER) : STRING(IDS_TMPARAMETER_CODING_DBMS_SIGNEDINTEGER));
	if ((nAttributes & (TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL)) == (TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL)) return((!bDBMS) ? STRING(IDS_TMPARAMETER_CODING_UNSIGNEDINTEGER) : STRING(IDS_TMPARAMETER_CODING_DBMS_UNSIGNEDINTEGER));
	if ((nAttributes & (TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_RADIX_DECIMAL)) == (TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_RADIX_DECIMAL)) return((!bDBMS) ? STRING(IDS_TMPARAMETER_CODING_COMPLEMENTCOMPLEX) : STRING(IDS_TMPARAMETER_CODING_DBMS_COMPLEMENTCOMPLEX));
	if ((nAttributes & (TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_DECIMAL)) == (TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_DECIMAL)) return((!bDBMS) ? STRING(IDS_TMPARAMETER_CODING_FLOATINGPOINT) : STRING(IDS_TMPARAMETER_CODING_DBMS_FLOATINGPOINT));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTMParameterInterpretations(CStringArray &szInterpretations, CLongUIntArray &nInterpretations) CONST
{
	nInterpretations.RemoveAll();
	szInterpretations.RemoveAll();
	nInterpretations.Add(TMPARAMETER_INTERPRETATION_FULL);
	nInterpretations.Add(TMPARAMETER_INTERPRETATION_EXTRAPOLATE);
	szInterpretations.Add(STRING(IDS_TMPARAMETER_INTERPRETATION_FULL));
	szInterpretations.Add(STRING(IDS_TMPARAMETER_INTERPRETATION_EXTRAPOLATE));
	return((INT)szInterpretations.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMParameterInterpretation(ULONGLONG nAttributes, ULONGLONG nInterpretation) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nInterpretation & (TMPARAMETER_INTERPRETATION_FULL | TMPARAMETER_INTERPRETATION_EXTRAPOLATE))) == TMPARAMETER_INTERPRETATION_FULL || nAttribute == TMPARAMETER_INTERPRETATION_EXTRAPOLATE || (!nAttribute && ((nAttributes & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) == 0 || (nAttributes & TMPARAMETER_CALIBRATION_NONE) || (nAttributes & TMPARAMETER_CALIBRATION_STATUS)))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterInterpretationLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTMParameterInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TMPARAMETER_INTERPRETATION_DBMS_FULL))) return TMPARAMETER_INTERPRETATION_FULL;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TMPARAMETER_INTERPRETATION_DBMS_EXTRAPOLATE))) return TMPARAMETER_INTERPRETATION_EXTRAPOLATE;
	}
	else
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TMPARAMETER_INTERPRETATION_FULL))) return TMPARAMETER_INTERPRETATION_FULL;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TMPARAMETER_INTERPRETATION_EXTRAPOLATE))) return TMPARAMETER_INTERPRETATION_EXTRAPOLATE;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTMParameterInterpretation(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TMPARAMETER_INTERPRETATION_FULL) return((!bDBMS) ? STRING(IDS_TMPARAMETER_INTERPRETATION_FULL) : STRING(IDS_TMPARAMETER_INTERPRETATION_DBMS_FULL));
	if (nAttributes & TMPARAMETER_INTERPRETATION_EXTRAPOLATE) return((!bDBMS) ? STRING(IDS_TMPARAMETER_INTERPRETATION_EXTRAPOLATE) : STRING(IDS_TMPARAMETER_INTERPRETATION_DBMS_EXTRAPOLATE));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTMParameterConsistencyChecksFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	nFlags.RemoveAll();
	szFlags.RemoveAll();
	nFlags.Add(TMPARAMETER_FLAG_NOCONSISTENCYCHECKS);
	nFlags.Add(TMPARAMETER_FLAG_CONSISTENCYCHECKS);
	szFlags.Add(STRING(IDS_TMPARAMETER_CONSISTENCYCHECKSFLAG_NO));
	szFlags.Add(STRING(IDS_TMPARAMETER_CONSISTENCYCHECKSFLAG_YES));
	return((INT)szFlags.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMParameterConsistencyChecksFlag(ULONGLONG nFlag) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nFlag & (TMPARAMETER_FLAG_NOCONSISTENCYCHECKS | TMPARAMETER_FLAG_CONSISTENCYCHECKS))) == TMPARAMETER_FLAG_NOCONSISTENCYCHECKS || nAttribute == TMPARAMETER_FLAG_CONSISTENCYCHECKS) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterConsistenceChecksFlagLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTMParameterConsistencyChecksFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TMPARAMETER_CONSISTENCYCHECKSFLAG_DBMS_NO))) return TMPARAMETER_FLAG_NOCONSISTENCYCHECKS;
		if (!lstrcmp(pszFlag, STRING(IDS_TMPARAMETER_CONSISTENCYCHECKSFLAG_DBMS_YES))) return TMPARAMETER_FLAG_CONSISTENCYCHECKS;
	}
	else
	{
		if (!lstrcmp(pszFlag, STRING(IDS_TMPARAMETER_CONSISTENCYCHECKSFLAG_NO))) return TMPARAMETER_FLAG_NOCONSISTENCYCHECKS;
		if (!lstrcmp(pszFlag, STRING(IDS_TMPARAMETER_CONSISTENCYCHECKSFLAG_YES))) return TMPARAMETER_FLAG_CONSISTENCYCHECKS;
	}
	return 0;
}

CString CALTELDatabaseEngine::TranslateTMParameterConsistencyChecksFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TMPARAMETER_FLAG_NOCONSISTENCYCHECKS) return((!bDBMS) ? STRING(IDS_TMPARAMETER_CONSISTENCYCHECKSFLAG_NO) : STRING(IDS_TMPARAMETER_CONSISTENCYCHECKSFLAG_DBMS_NO));
	if (nAttributes & TMPARAMETER_FLAG_CONSISTENCYCHECKS) return((!bDBMS) ? STRING(IDS_TMPARAMETER_CONSISTENCYCHECKSFLAG_YES) : STRING(IDS_TMPARAMETER_CONSISTENCYCHECKSFLAG_DBMS_YES));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTMParameterValidityParameters(CStringArray &szParameters) CONST
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	for (nParameter = 0, nParameters = (INT)GetTMParameters()->GetSize(), szParameters.RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter = GetTMParameters()->GetAt(nParameter)) && pDatabaseTMParameter->GetWidth() == 1)
		{
			szParameters.Add(pDatabaseTMParameter->GetTag());
			continue;
		}
	}
	return((INT)szParameters.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMParameterValidityParameter(LPCTSTR pszTag) CONST
{
	return((CheckTMParameterTag(pszTag) || !lstrlen(pszTag)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterValidityParameterLength() CONST
{
	return GetTMParameterTagLength();
}

BOOL CALTELDatabaseEngine::CheckTMParameterRelatedParameter(LPCTSTR pszTag) CONST
{
	return((!TranslateTMParameterRelatedParameter(pszTag).IsEmpty() || !lstrlen(pszTag)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterRelatedParameterLength() CONST
{
	return GetTMParameterTagLength();
}

CString CALTELDatabaseEngine::TranslateTMParameterRelatedParameter(LPCTSTR pszTag) CONST
{
	INT  nPos;
	CString  szTag;

	for (nPos = 0; nPos < lstrlen(pszTag) && nPos < GetTMParameterRelatedParameterLength(); nPos++)
	{
		if (!CheckTMParameterTag(szTag + pszTag[nPos])) break;
		szTag += pszTag[nPos];
	}
	return szTag;
}

BOOL CALTELDatabaseEngine::CheckTMParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszConstValue) CONST
{
	INT  nDigit;
	INT  nPos[2];
	TCHAR  szChar;
	TCHAR  szDigit;
	LPTSTR  pszNumberPos;
	CString  szDigitChar;
	ULONGLONG  nConstValue;
	CStringTools  cStringTools;

	for (nPos[0] = (INT)_tcscspn(pszConstValue, STRING(IDS_TMPARAMETER_CONSTANTVALUE_QUOTESIGN)), nPos[1] = (nPos[0] < lstrlen(pszConstValue)) ? (nPos[0] + (INT)_tcscspn(&pszConstValue[nPos[0] + 1], STRING(IDS_TMPARAMETER_CONSTANTVALUE_QUOTESIGN)) + 1) : nPos[0]; nPos[0] == lstrlen(pszConstValue) && nPos[1] == lstrlen(pszConstValue); )
	{
		for (SkipSpaces(pszConstValue, (nPos[0] = 0)); (szChar = pszConstValue[nPos[0]]) == STRINGCHAR(IDS_TMPARAMETER_CONSTANTVALUE_POSITIVEPREFIX) || szChar == STRINGCHAR(IDS_TMPARAMETER_CONSTANTVALUE_NEGATIVEPREFIX); )
		{
			nPos[0]++;
			break;
		}
		for (; nPos[0] >= 0 && (szChar = pszConstValue[nPos[0]]) == STRINGCHAR(IDS_TMPARAMETER_CONSTANTVALUE_HEXPREFIX); )
		{
			nPos[0] = (nAttributes & TMPARAMETER_RADIX_HEXADECIMAL) ? SkipSpaces(pszConstValue, ++nPos[0]) : -1;
			break;
		}
		for (szDigit = cStringTools.ConvertIntToString(0).GetAt(0), nConstValue = 0, nPos[1] = 0; nPos[0] >= 0 && nPos[0] < lstrlen(pszConstValue) && pszConstValue[nPos[0]] != SPACE[0] && nConstValue <= UINT_MAX; nPos[0] = (nPos[0] >= 0) ? (nPos[0] + 1) : -1, nPos[1]++)
		{
			for (nDigit = __toascii((szChar = pszConstValue[nPos[0]])) - __toascii(szDigit); (nAttributes & TMPARAMETER_CODING_FLOATINGPOINT) != TMPARAMETER_CODING_FLOATINGPOINT && (nAttributes & TMPARAMETER_CALIBRATION_NUMERICAL) != TMPARAMETER_CALIBRATION_NUMERICAL; )
			{
				if ((nAttributes & TMPARAMETER_RADIX_BINARY) && nDigit >= 0 && nDigit < 2)
				{
					nConstValue = 2 * nConstValue + nDigit;
					break;
				}
				if ((nAttributes & TMPARAMETER_RADIX_OCTAL) && nDigit >= 0 && nDigit < 8)
				{
					nConstValue = 8 * nConstValue + nDigit;
					break;
				}
				if ((nAttributes & (TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_HEXADECIMAL)) == 0 && _istdigit(szChar))
				{
					nConstValue = 10 * nConstValue + nDigit;
					break;
				}
				if ((nAttributes & TMPARAMETER_RADIX_HEXADECIMAL) && _istxdigit(szChar))
				{
					if (!_istdigit(szChar))
					{
						szDigitChar = szChar;
						szDigitChar.MakeUpper();
						nDigit = 10 + __toascii(szDigitChar.GetAt(0)) - __toascii(cStringTools.ConvertUIntToString(10, 16).GetAt(0));
					}
					nConstValue = 16 * nConstValue + nDigit;
					break;
				}
				nPos[0] = -1;
				break;
			}
			if (nAttributes & (TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_CALIBRATION_NUMERICAL))
			{
				for (_tcstod(&pszConstValue[nPos[0]], &pszNumberPos); lstrlen(pszNumberPos) >= 0; )
				{
					nPos[1] = lstrlen(pszConstValue) - lstrlen(pszNumberPos) - nPos[0];
					nPos[0] += nPos[1];
					break;
				}
				break;
			}
		}
		return((((nAttributes & TMPARAMETER_NATURE_CONSTANT) && SkipSpaces(pszConstValue, nPos[0]) == lstrlen(pszConstValue) && nConstValue <= UINT_MAX  &&  nPos[1] > 0) || ((nAttributes & TMPARAMETER_NATURE_CONSTANT) != TMPARAMETER_NATURE_CONSTANT  &&  !lstrlen(pszConstValue))) ? TRUE : FALSE);
	}
	return(((nAttributes & TMPARAMETER_CALIBRATION_STATUS) && nPos[0] < nPos[1] && nPos[1] < lstrlen(pszConstValue)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterConstValueLength() CONST
{
	return 12;
}

ULONGLONG CALTELDatabaseEngine::TranslateTMParameterConstValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszConstValue) CONST
{
	INT  nPos;
	INT  nLength;
	ULONGLONG  nValue;

	for (nPos = 0, nLength = lstrlen(pszConstValue), nValue = 0, SkipSpaces(pszConstValue, nPos); nPos < nLength && pszConstValue[nPos] != STRINGCHAR(IDS_TMPARAMETER_CONSTANTVALUE_QUOTESIGN); )
	{
		if (pszConstValue[nPos] != STRINGCHAR(IDS_TMPARAMETER_CONSTANTVALUE_HEXPREFIX))
		{
			if (nAttributes & (TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_CALIBRATION_NUMERICAL))
			{
				nValue = EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, ParseValue(&pszConstValue[nPos]), FALSE);
				return nValue;
			}
			if (nAttributes & TMPARAMETER_RADIX_BINARY)
			{
				nValue = EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, ParseValue(&pszConstValue[nPos], 2), FALSE);
				return nValue;
			}
			if (nAttributes & TMPARAMETER_RADIX_OCTAL)
			{
				nValue = EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, ParseValue(&pszConstValue[nPos], 8), FALSE);
				return nValue;
			}
			if (nAttributes & TMPARAMETER_RADIX_HEXADECIMAL)
			{
				nValue = EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, ParseValue(&pszConstValue[nPos], 16), FALSE);
				return nValue;
			}
			nValue = EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, ParseValue(&pszConstValue[nPos], 10), FALSE);
			return nValue;
		}
		nValue = (nAttributes & (TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_CALIBRATION_NUMERICAL)) ? EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, (double)ParseValue(&pszConstValue[++nPos], 16), FALSE) : EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, ParseValue(&pszConstValue[++nPos], 16), FALSE);
		break;
	}
	return nValue;
}
CString CALTELDatabaseEngine::TranslateTMParameterConstValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nConstValue) CONST
{
	CString  szValue;
	CStringTools  cStringTools;

	if ((nAttributes & TMPARAMETER_CODING_FLOATINGPOINT) || (nAttributes & TMPARAMETER_CALIBRATION_NUMERICAL))
	{
		szValue = cStringTools.ConvertFloatToString(DecodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nConstValue, FALSE));
		return szValue;
	}
	if (nAttributes & TMPARAMETER_RADIX_BINARY)
	{
		szValue = cStringTools.ConvertLongUIntToString(DecodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, nConstValue, FALSE), 2);
		return szValue;
	}
	if (nAttributes & TMPARAMETER_RADIX_OCTAL)
	{
		szValue = cStringTools.ConvertLongUIntToString(DecodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, nConstValue, FALSE), 8);
		return szValue;
	}
	if (nAttributes & TMPARAMETER_RADIX_HEXADECIMAL)
	{
		szValue = cStringTools.ConvertLongUIntToString(DecodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, nConstValue, FALSE), 16);
		return szValue;
	}
	if ((nAttributes & TMPARAMETER_CODING_SIGNEDINTEGER) || (nAttributes & TMPARAMETER_CODING_COMPLEMENTCOMPLEX))
	{
		szValue = cStringTools.ConvertLongIntToString(DecodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, nConstValue, FALSE));
		return szValue;
	}
	return cStringTools.ConvertLongUIntToString(DecodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, nConstValue, FALSE));
}

BOOL CALTELDatabaseEngine::CheckTMParameterDerivationExpression(LPCTSTR pszExpression) CONST
{
	return((lstrlen(pszExpression) >= 0 && lstrlen(pszExpression) <= GetTMParameterDerivationExpressionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterDerivationExpressionLength() CONST
{
	return 1024;
}

BOOL CALTELDatabaseEngine::TranslateTMParameterDerivationExpression(LPCTSTR pszTag, LPCTSTR pszExpression, CONST CStringArray &pParameters, CString &szProcedure, CStringArray &szErrors) CONST
{
	CStringArray  pDerivationExpressionParameters;

	szProcedure = TranslateDerivationProcedure(pszTag, pDerivationExpressionParameters, TranslateDerivationStatement(pszTag, pszExpression, pParameters, pDerivationExpressionParameters, szErrors));
	return((!szErrors.GetSize()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::EnumTMParameterTriggerTypes(CStringArray &szTriggerTypes, CLongUIntArray &nTriggerTypes) CONST
{
	nTriggerTypes.RemoveAll();
	szTriggerTypes.RemoveAll();
	nTriggerTypes.Add(TMPARAMETER_TRIGGERTYPE_PACKET);
	nTriggerTypes.Add(TMPARAMETER_TRIGGERTYPE_PARAMETER);
	nTriggerTypes.Add(TMPARAMETER_TRIGGERTYPE_CONSTANT);
	szTriggerTypes.Add(STRING(IDS_TMPARAMETER_TRIGGERTYPE_PACKET));
	szTriggerTypes.Add(STRING(IDS_TMPARAMETER_TRIGGERTYPE_PARAMETER));
	szTriggerTypes.Add(STRING(IDS_TMPARAMETER_TRIGGERTYPE_CONSTANT));
	return((INT)szTriggerTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMParameterTriggerType(ULONGLONG nAttributes, ULONGLONG nTriggerType) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nTriggerType & (TMPARAMETER_TRIGGERTYPE_PACKET | TMPARAMETER_TRIGGERTYPE_PARAMETER | TMPARAMETER_TRIGGERTYPE_CONSTANT))) == TMPARAMETER_TRIGGERTYPE_PACKET || nAttribute == TMPARAMETER_TRIGGERTYPE_PARAMETER || nAttribute == TMPARAMETER_TRIGGERTYPE_CONSTANT || (!nAttribute && ((nAttributes & (TMPARAMETER_NATURE_RAW | TMPARAMETER_NATURE_CONSTANT | TMPARAMETER_NATURE_DERIVED)) == 0 || (nAttributes & TMPARAMETER_NATURE_RAW) || (nAttributes & TMPARAMETER_NATURE_CONSTANT)))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterTriggerTypeLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTMParameterTriggerType(LPCTSTR pszTriggerType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszTriggerType, STRING(IDS_TMPARAMETER_TRIGGERTYPE_DBMS_PACKET))) return TMPARAMETER_TRIGGERTYPE_PACKET;
		if (!lstrcmp(pszTriggerType, STRING(IDS_TMPARAMETER_TRIGGERTYPE_DBMS_PARAMETER))) return TMPARAMETER_TRIGGERTYPE_PARAMETER;
		if (!lstrcmp(pszTriggerType, STRING(IDS_TMPARAMETER_TRIGGERTYPE_DBMS_CONSTANT))) return TMPARAMETER_TRIGGERTYPE_CONSTANT;
	}
	else
	{
		if (!lstrcmp(pszTriggerType, STRING(IDS_TMPARAMETER_TRIGGERTYPE_PACKET))) return TMPARAMETER_TRIGGERTYPE_PACKET;
		if (!lstrcmp(pszTriggerType, STRING(IDS_TMPARAMETER_TRIGGERTYPE_PARAMETER))) return TMPARAMETER_TRIGGERTYPE_PARAMETER;
		if (!lstrcmp(pszTriggerType, STRING(IDS_TMPARAMETER_TRIGGERTYPE_CONSTANT))) return TMPARAMETER_TRIGGERTYPE_CONSTANT;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTMParameterTriggerType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TMPARAMETER_TRIGGERTYPE_PACKET) return((!bDBMS) ? STRING(IDS_TMPARAMETER_TRIGGERTYPE_PACKET) : STRING(IDS_TMPARAMETER_TRIGGERTYPE_DBMS_PACKET));
	if (nAttributes & TMPARAMETER_TRIGGERTYPE_PARAMETER) return((!bDBMS) ? STRING(IDS_TMPARAMETER_TRIGGERTYPE_PARAMETER) : STRING(IDS_TMPARAMETER_TRIGGERTYPE_DBMS_PARAMETER));
	if (nAttributes & TMPARAMETER_TRIGGERTYPE_CONSTANT) return((!bDBMS) ? STRING(IDS_TMPARAMETER_TRIGGERTYPE_CONSTANT) : STRING(IDS_TMPARAMETER_TRIGGERTYPE_DBMS_CONSTANT));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTMParameterTriggerExpression(ULONGLONG nNature, ULONGLONG nTriggerType, LPCTSTR pszExpression) CONST
{
	INT  nPos;
	CString  szExpression(pszExpression);

	if (nNature & TMPARAMETER_NATURE_DERIVED)
	{
		if (nTriggerType & TMPARAMETER_TRIGGERTYPE_PACKET) return CheckTMPacketTag(szExpression);
		if (nTriggerType & TMPARAMETER_TRIGGERTYPE_PARAMETER) return(((nPos = szExpression.Find(STRING(IDS_TMPARAMETER_TRIGGEREXPRESSION_SEPARATOR))) >= 0) ? (CheckTMParameterTag(szExpression.Left(nPos)) && CheckTMPacketTag(szExpression.Mid(nPos + 1))) : CheckTMParameterTag(szExpression));
		return((nTriggerType & TMPARAMETER_TRIGGERTYPE_CONSTANT) ? ((!szExpression.GetLength()) ? TRUE : FALSE) : FALSE);
	}
	return((!(nNature & (TMPARAMETER_NATURE_RAW | TMPARAMETER_NATURE_CONSTANT | TMPARAMETER_NATURE_DERIVED)) || !szExpression.GetLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterTriggerExpressionLength() CONST
{
	return 20;
}

CString CALTELDatabaseEngine::TranslateTMParameterTriggerExpression(LPCTSTR pszExpression) CONST
{
	return((lstrlen(pszExpression) <= GetTMParameterTriggerExpressionLength()) ? pszExpression : EMPTYSTRING);
}
BOOL CALTELDatabaseEngine::TranslateTMParameterTriggerExpression(LPCTSTR pszExpression, CString &szParameter, CString &szPacket) CONST
{
	INT  nPos;
	CString  szExpression;

	for (szExpression = pszExpression; szExpression.GetLength() <= GetTMParameterTriggerExpressionLength(); )
	{
		if ((nPos = szExpression.Find(STRING(IDS_TMPARAMETER_TRIGGEREXPRESSION_SEPARATOR))) >= 0)
		{
			szParameter = szExpression.Left(nPos);
			szPacket = szExpression.Mid(nPos + 1);
			return TRUE;
		}
		szParameter = szExpression;
		szPacket.Empty();
		return TRUE;
	}
	szParameter.Empty();
	szPacket.Empty();
	return FALSE;
}

INT CALTELDatabaseEngine::GetTMParameterNumCalTablesCount() CONST
{
	return 8;
}

INT CALTELDatabaseEngine::GetTMParameterTxtCalTablesCount() CONST
{
	return 16;
}

INT CALTELDatabaseEngine::GetTMParameterNumOolTablesCount() CONST
{
	return GetTMParameterNumCalTablesCount();
}

INT CALTELDatabaseEngine::GetTMParameterTxtOolTablesCount() CONST
{
	return GetTMParameterTxtCalTablesCount();
}

BOOL CALTELDatabaseEngine::CheckTMParameterSourceSubSystem(LPCTSTR pszSubSystem) CONST
{
	return((lstrlen(pszSubSystem) >= 0 && lstrlen(pszSubSystem) <= GetTMParameterSourceSubSystemLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterSourceSubSystemLength() CONST
{
	return 5;
}

BOOL CALTELDatabaseEngine::CheckTMParameterSourceEquipment(LPCTSTR pszEquipment) CONST
{
	return((lstrlen(pszEquipment) >= 0 && lstrlen(pszEquipment) <= GetTMParameterSourceEquipmentLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterSourceEquipmentLength() CONST
{
	return 5;
}

BOOL CALTELDatabaseEngine::CheckTMParameterRouterSubSystem(LPCTSTR pszSubSystem) CONST
{
	return((lstrlen(pszSubSystem) >= 0 && lstrlen(pszSubSystem) <= GetTMParameterRouterSubSystemLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterRouterSubSystemLength() CONST
{
	return 5;
}

BOOL CALTELDatabaseEngine::CheckTMParameterRouterEquipment(LPCTSTR pszEquipment) CONST
{
	return((lstrlen(pszEquipment) >= 0 && lstrlen(pszEquipment) <= GetTMParameterRouterEquipmentLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterRouterEquipmentLength() CONST
{
	return 5;
}

BOOL CALTELDatabaseEngine::CheckTMParameterOperationalInfo(LPCTSTR pszInfo) CONST
{
	return((lstrlen(pszInfo) >= 0 && lstrlen(pszInfo) <= GetTMParameterOperationalInfoLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterOperationalInfoLength() CONST
{
	return 254;
}

BOOL CALTELDatabaseEngine::CheckTMParameterDangerConditions(LPCTSTR pszConditions) CONST
{
	return((lstrlen(pszConditions) >= 0 && lstrlen(pszConditions) <= GetTMParameterDangerConditionsLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterDangerConditionsLength() CONST
{
	return 254;
}

BOOL CALTELDatabaseEngine::CheckTMParameterValidityConditions(LPCTSTR pszConditions) CONST
{
	return((lstrlen(pszConditions) >= 0 && lstrlen(pszConditions) <= GetTMParameterValidityConditionsLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterValidityConditionsLength() CONST
{
	return 254;
}

BOOL CALTELDatabaseEngine::CheckTMParameterAlternativeParameters(LPCTSTR pszParameters) CONST
{
	return((lstrlen(pszParameters) >= 0 && lstrlen(pszParameters) <= GetTMParameterAlternativeParametersLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterAlternativeParametersLength() CONST
{
	return 39;
}

BOOL CALTELDatabaseEngine::CheckTMParameterAssociatedTelecommands(LPCTSTR pszTelecommands) CONST
{
	return((lstrlen(pszTelecommands) >= 0 && lstrlen(pszTelecommands) <= GetTMParameterAssociatedTelecommandsLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterAssociatedTelecommandsLength() CONST
{
	return 128;
}

BOOL CALTELDatabaseEngine::CheckTMParameterInterrogationInstruction(LPCTSTR pszInstruction) CONST
{
	UINT  nCode;
	UINT  nRange[2];

	return(((lstrlen(pszInstruction) > 0 && lstrlen(pszInstruction) <= GetTMParameterInterrogationInstructionLength() && GetTMParameterInterrogationInstructionRange(nRange[0], nRange[1]) && (nCode = TranslateTMParameterInterrogationInstruction(pszInstruction)) >= nRange[0] && nCode <= nRange[1]) || !lstrlen(pszInstruction)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterInterrogationInstructionLength() CONST
{
	return 6;
}

BOOL CALTELDatabaseEngine::GetTMParameterInterrogationInstructionRange(UINT &nLow, UINT &nHigh) CONST
{
	nLow = 0;
	nHigh = 0xFFFFFF;
	return TRUE;
}

UINT CALTELDatabaseEngine::TranslateTMParameterInterrogationInstruction(LPCTSTR pszInstruction) CONST
{
	INT  nPos;
	UINT  nCode;
	TCHAR  szChar;
	CString  szDigit[2];
	CString  szInstruction;
	CStringTools  cStringTools;

	for (nPos = 0, nCode = 0, szInstruction = pszInstruction, szInstruction.MakeUpper(), szDigit[0] = cStringTools.ConvertIntToString(0), szDigit[1] = cStringTools.ConvertIntToString(10, 16); nPos < lstrlen(pszInstruction); nPos++)
	{
		if (_istdigit((szChar = szInstruction.GetAt(nPos))))
		{
			nCode = 16 * nCode + __toascii(szChar) - __toascii(szDigit[0].GetAt(0));
			continue;
		}
		if (_istxdigit(szChar))
		{
			nCode = 16 * nCode + __toascii(szChar) - __toascii(szDigit[1].GetAt(0)) + 10;
			continue;
		}
		if (!_istspace(szChar) || nCode > 0) break;
	}
	return((nPos == lstrlen(pszInstruction) && _tcsspn(pszInstruction, SPACE) < (size_t)lstrlen(pszInstruction) && nPos > 0) ? nCode : -1);
}
CString CALTELDatabaseEngine::TranslateTMParameterInterrogationInstruction(UINT nInstruction) CONST
{
	CStringTools  cStringTools;

	return((nInstruction != (UINT)-1) ? cStringTools.ConvertUIntToPaddedString(nInstruction, GetTMParameterInterrogationInstructionLength(), 16) : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTMParameterSpareList(LPCTSTR pszTag) CONST
{
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = MAXTMPARAMETERSPARELIST - MINTMPARAMETERSPARELIST + 1; nParameter < nParameters; nParameter++)
	{
		if (!lstrcmp(pszTag, STRING(MINTMPARAMETERSPARELIST + nParameter))) break;
		continue;
	}
	return((nParameter < nParameters) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::EnumTMParameterStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TMPARAMETER_RECORDSTATUS_NEW);
	nStatus.Add(TMPARAMETER_RECORDSTATUS_DRAFT);
	nStatus.Add(TMPARAMETER_RECORDSTATUS_CHANGED);
	nStatus.Add(TMPARAMETER_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TMPARAMETER_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TMPARAMETER_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TMPARAMETER_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TMPARAMETER_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMParameterStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TMPARAMETER_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMPARAMETER_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMPARAMETER_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMPARAMETER_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTMParameterStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMParameterStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTMParameterStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TMPARAMETER_RECORDSTATUS_DBMS_NEW))) return TMPARAMETER_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TMPARAMETER_RECORDSTATUS_DBMS_DRAFT))) return TMPARAMETER_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TMPARAMETER_RECORDSTATUS_DBMS_CHANGED))) return TMPARAMETER_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TMPARAMETER_RECORDSTATUS_DBMS_DELETED))) return TMPARAMETER_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TMPARAMETER_RECORDSTATUS_NEW))) return TMPARAMETER_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TMPARAMETER_RECORDSTATUS_DRAFT))) return TMPARAMETER_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TMPARAMETER_RECORDSTATUS_CHANGED))) return TMPARAMETER_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TMPARAMETER_RECORDSTATUS_DELETED))) return TMPARAMETER_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTMParameterStatusLength()) ? TMPARAMETER_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTMParameterStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TMPARAMETER_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TMPARAMETER_RECORDSTATUS_NEW) : STRING(IDS_TMPARAMETER_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TMPARAMETER_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TMPARAMETER_RECORDSTATUS_DRAFT) : STRING(IDS_TMPARAMETER_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TMPARAMETER_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TMPARAMETER_RECORDSTATUS_CHANGED) : STRING(IDS_TMPARAMETER_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TMPARAMETER_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TMPARAMETER_RECORDSTATUS_DELETED) : STRING(IDS_TMPARAMETER_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTMNumCalTableName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTMNumCalTableNameLength());
}

INT CALTELDatabaseEngine::GetTMNumCalTableNameLength() CONST
{
	return 8;
}

BOOL CALTELDatabaseEngine::CheckTMNumCalTableDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) > 0 && lstrlen(pszDescription) <= GetTMNumCalTableDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMNumCalTableDescriptionLength() CONST
{
	return 32;
}

BOOL CALTELDatabaseEngine::CheckTMNumCalTableUnit(LPCTSTR pszUnit) CONST
{
	return((lstrlen(pszUnit) <= GetTMNumCalTableUnitLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMNumCalTableUnitLength() CONST
{
	return 12;
}

BOOL CALTELDatabaseEngine::CheckTMNumCalTablePoints(INT nPoints) CONST
{
	INT  nRange[2];

	return((GetTMNumCalTablePointsRange(nRange[0], nRange[1]) && nPoints >= nRange[0] && nPoints <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMNumCalTablePointsRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 16;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTMNumCalTablePointInterval(double X1, double X2) CONST
{
	return((fabs(X2 - X1) > FLT_EPSILON) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::EnumTMNumCalTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TMCALTABLE_RECORDSTATUS_NEW);
	nStatus.Add(TMCALTABLE_RECORDSTATUS_DRAFT);
	nStatus.Add(TMCALTABLE_RECORDSTATUS_CHANGED);
	nStatus.Add(TMCALTABLE_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TMCALTABLE_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TMCALTABLE_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TMCALTABLE_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TMCALTABLE_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMNumCalTableStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTMNumCalTableStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMNumCalTableStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTMNumCalTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_NEW))) return TMCALTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_DRAFT))) return TMCALTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_CHANGED))) return TMCALTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_DELETED))) return TMCALTABLE_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_NEW))) return TMCALTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DRAFT))) return TMCALTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_CHANGED))) return TMCALTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DELETED))) return TMCALTABLE_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTMNumCalTableStatusLength()) ? TMCALTABLE_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTMNumCalTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TMCALTABLE_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TMCALTABLE_RECORDSTATUS_NEW) : STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TMCALTABLE_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TMCALTABLE_RECORDSTATUS_DRAFT) : STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TMCALTABLE_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TMCALTABLE_RECORDSTATUS_CHANGED) : STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TMCALTABLE_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TMCALTABLE_RECORDSTATUS_DELETED) : STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTMTxtCalTableName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTMTxtCalTableNameLength());
}

INT CALTELDatabaseEngine::GetTMTxtCalTableNameLength() CONST
{
	return 8;
}

BOOL CALTELDatabaseEngine::CheckTMTxtCalTableDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) > 0 && lstrlen(pszDescription) <= GetTMTxtCalTableDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMTxtCalTableDescriptionLength() CONST
{
	return 32;
}

BOOL CALTELDatabaseEngine::CheckTMTxtCalTablePoints(INT nPoints) CONST
{
	INT  nRange[2];

	return((GetTMTxtCalTablePointsRange(nRange[0], nRange[1]) && nPoints >= nRange[0] && nPoints <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMTxtCalTablePointsRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 255;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTMTxtCalTablePointInterval(double X1, double X2) CONST
{
	return((X1 <= X2) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckTMTxtCalTablePointText(LPCTSTR pszText) CONST
{
	return((lstrlen(pszText) > 0 && lstrlen(pszText) <= GetTMTxtCalTablePointTextLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMTxtCalTablePointTextLength() CONST
{
	return 12;
}

CString CALTELDatabaseEngine::GetTMTxtCalTablePointOutsideText() CONST
{
	return STRING(IDS_TMCALTABLE_FLAG_EXTRAPOLATED);
}

INT CALTELDatabaseEngine::EnumTMTxtCalTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TMCALTABLE_RECORDSTATUS_NEW);
	nStatus.Add(TMCALTABLE_RECORDSTATUS_DRAFT);
	nStatus.Add(TMCALTABLE_RECORDSTATUS_CHANGED);
	nStatus.Add(TMCALTABLE_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TMCALTABLE_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TMCALTABLE_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TMCALTABLE_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TMCALTABLE_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMTxtCalTableStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTMTxtCalTableStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMTxtCalTableStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTMTxtCalTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_NEW))) return TMCALTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_DRAFT))) return TMCALTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_CHANGED))) return TMCALTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_DELETED))) return TMCALTABLE_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_NEW))) return TMCALTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DRAFT))) return TMCALTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_CHANGED))) return TMCALTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TMCALTABLE_RECORDSTATUS_DELETED))) return TMCALTABLE_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTMTxtCalTableStatusLength()) ? TMCALTABLE_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTMTxtCalTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TMCALTABLE_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TMCALTABLE_RECORDSTATUS_NEW) : STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TMCALTABLE_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TMCALTABLE_RECORDSTATUS_DRAFT) : STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TMCALTABLE_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TMCALTABLE_RECORDSTATUS_CHANGED) : STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TMCALTABLE_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TMCALTABLE_RECORDSTATUS_DELETED) : STRING(IDS_TMCALTABLE_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTMNumOolTableName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTMNumOolTableNameLength());
}

INT CALTELDatabaseEngine::GetTMNumOolTableNameLength() CONST
{
	return 10;
}

BOOL CALTELDatabaseEngine::CheckTMNumOolTableCheckCount(INT nCount) CONST
{
	INT  nRange[2];

	return((GetTMNumOolTableCheckCountRange(nRange[0], nRange[1]) && nCount >= nRange[0] && nCount <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMNumOolTableCheckCountRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 9;
	return TRUE;
}

INT CALTELDatabaseEngine::TranslateTMNumOolTableCheckCount(LPCTSTR pszCount) CONST
{
	return((lstrlen(pszCount) > 0) ? _ttoi(pszCount) : -1);
}
CString CALTELDatabaseEngine::TranslateTMNumOolTableCheckCount(INT nCount) CONST
{
	CStringTools  cStringTools;

	return((nCount >= 0) ? cStringTools.ConvertIntToString(nCount) : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumTMNumOolTableInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	nInterpretations.RemoveAll();
	szInterpretations.RemoveAll();
	nInterpretations.Add(TMOOLTABLE_CHECK_CALIBRATED);
	nInterpretations.Add(TMOOLTABLE_CHECK_RAW);
	szInterpretations.Add(STRING(IDS_TMOOLTABLE_TYPE_CALIBRATED));
	szInterpretations.Add(STRING(IDS_TMOOLTABLE_TYPE_RAW));
	return((INT)szInterpretations.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMNumOolTableInterpretation(UINT nInterpretation) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nInterpretation & (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CHECK_CALIBRATED))) == TMOOLTABLE_CHECK_RAW || nAttribute == TMOOLTABLE_CHECK_CALIBRATED) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMNumOolTableInterpretationLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateTMNumOolTableInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TMOOLTABLE_TYPE_DBMS_CALIBRATED))) return TMOOLTABLE_CHECK_CALIBRATED;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TMOOLTABLE_TYPE_DBMS_RAW))) return TMOOLTABLE_CHECK_RAW;
	}
	else
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TMOOLTABLE_TYPE_CALIBRATED))) return TMOOLTABLE_CHECK_CALIBRATED;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TMOOLTABLE_TYPE_RAW))) return TMOOLTABLE_CHECK_RAW;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTMNumOolTableInterpretation(UINT nInterpretation, BOOL bDBMS) CONST
{
	if (nInterpretation & TMOOLTABLE_CHECK_CALIBRATED) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_TYPE_CALIBRATED) : STRING(IDS_TMOOLTABLE_TYPE_DBMS_CALIBRATED));
	if (nInterpretation & TMOOLTABLE_CHECK_RAW) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_TYPE_RAW) : STRING(IDS_TMOOLTABLE_TYPE_DBMS_RAW));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTMNumOolTableCodings(CStringArray &szCodings, CUIntArray &nCodings) CONST
{
	nCodings.RemoveAll();
	szCodings.RemoveAll();
	nCodings.Add(TMOOLTABLE_CODING_UNSIGNEDINTEGER);
	nCodings.Add(TMOOLTABLE_CODING_SIGNEDINTEGER);
	nCodings.Add(TMOOLTABLE_CODING_FLOATINGPOINT);
	szCodings.Add(STRING(IDS_TMOOLTABLE_CODING_UNSIGNEDINTEGER));
	szCodings.Add(STRING(IDS_TMOOLTABLE_CODING_SIGNEDINTEGER));
	szCodings.Add(STRING(IDS_TMOOLTABLE_CODING_FLOATINGPOINT));
	return((INT)szCodings.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMNumOolTableCoding(UINT nInterpretation, UINT nCoding) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nCoding & (TMOOLTABLE_CODING_UNSIGNEDINTEGER | TMOOLTABLE_CODING_SIGNEDINTEGER | TMOOLTABLE_CODING_FLOATINGPOINT | TMOOLTABLE_CODING_TEXTSTRING))) == TMOOLTABLE_CODING_UNSIGNEDINTEGER || nAttribute == TMOOLTABLE_CODING_SIGNEDINTEGER || nAttribute == TMOOLTABLE_CODING_FLOATINGPOINT || (!nAttribute && (nInterpretation & TMOOLTABLE_CHECK_CALIBRATED))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMNumOolTableCodingLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateTMNumOolTableCoding(UINT nInterpretation, LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszCoding, STRING(IDS_TMOOLTABLE_CODING_DBMS_UNSIGNEDINTEGER))) return TMOOLTABLE_CODING_UNSIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TMOOLTABLE_CODING_DBMS_SIGNEDINTEGER))) return TMOOLTABLE_CODING_SIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TMOOLTABLE_CODING_DBMS_FLOATINGPOINT))) return TMOOLTABLE_CODING_FLOATINGPOINT;
	}
	else
	{
		if (!lstrcmp(pszCoding, STRING(IDS_TMOOLTABLE_CODING_UNSIGNEDINTEGER))) return TMOOLTABLE_CODING_UNSIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TMOOLTABLE_CODING_SIGNEDINTEGER))) return TMOOLTABLE_CODING_SIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TMOOLTABLE_CODING_FLOATINGPOINT))) return TMOOLTABLE_CODING_FLOATINGPOINT;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTMNumOolTableCoding(UINT nCoding, BOOL bDBMS) CONST
{
	if (nCoding & TMOOLTABLE_CODING_UNSIGNEDINTEGER) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_CODING_UNSIGNEDINTEGER) : STRING(IDS_TMOOLTABLE_CODING_DBMS_UNSIGNEDINTEGER));
	if (nCoding & TMOOLTABLE_CODING_SIGNEDINTEGER) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_CODING_SIGNEDINTEGER) : STRING(IDS_TMOOLTABLE_CODING_DBMS_SIGNEDINTEGER));
	if (nCoding & TMOOLTABLE_CODING_FLOATINGPOINT) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_CODING_FLOATINGPOINT) : STRING(IDS_TMOOLTABLE_CODING_DBMS_FLOATINGPOINT));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTMNumOolTableRadixes(CStringArray &szRadixes, CUIntArray &nRadixes) CONST
{
	nRadixes.RemoveAll();
	szRadixes.RemoveAll();
	nRadixes.Add(TMOOLTABLE_RADIX_BINARY);
	nRadixes.Add(TMOOLTABLE_RADIX_OCTAL);
	nRadixes.Add(TMOOLTABLE_RADIX_DECIMAL);
	nRadixes.Add(TMOOLTABLE_RADIX_HEXADECIMAL);
	szRadixes.Add(STRING(IDS_TMOOLTABLE_RADIX_BINARY));
	szRadixes.Add(STRING(IDS_TMOOLTABLE_RADIX_OCTAL));
	szRadixes.Add(STRING(IDS_TMOOLTABLE_RADIX_DECIMAL));
	szRadixes.Add(STRING(IDS_TMOOLTABLE_RADIX_HEXADECIMAL));
	return((INT)szRadixes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMNumOolTableRadix(UINT nInterpretation, UINT nCoding, UINT nRadix) CONST
{
	UINT  nAttribute;

	return(((((nAttribute = (nRadix & (TMOOLTABLE_RADIX_BINARY | TMOOLTABLE_RADIX_OCTAL | TMOOLTABLE_RADIX_DECIMAL | TMOOLTABLE_RADIX_HEXADECIMAL))) == TMOOLTABLE_RADIX_BINARY || nAttribute == TMOOLTABLE_RADIX_OCTAL || nAttribute == TMOOLTABLE_RADIX_HEXADECIMAL) && (nCoding & TMOOLTABLE_CODING_UNSIGNEDINTEGER)) || nAttribute == TMOOLTABLE_RADIX_DECIMAL || (!nAttribute && ((nInterpretation & TMOOLTABLE_CHECK_CALIBRATED) || (nInterpretation & (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CHECK_CALIBRATED)) == 0))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMNumOolTableRadixLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateTMNumOolTableRadix(UINT nInterpretation, LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_DBMS_BINARY))) return TMOOLTABLE_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_DBMS_OCTAL))) return TMOOLTABLE_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_DBMS_DECIMAL))) return TMOOLTABLE_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_DBMS_HEXADECIMAL))) return TMOOLTABLE_RADIX_HEXADECIMAL;
	}
	else
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_BINARY))) return TMOOLTABLE_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_OCTAL))) return TMOOLTABLE_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_DECIMAL))) return TMOOLTABLE_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_HEXADECIMAL))) return TMOOLTABLE_RADIX_HEXADECIMAL;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTMNumOolTableRadix(UINT nRadix, BOOL bDBMS) CONST
{
	if (nRadix & TMOOLTABLE_RADIX_BINARY) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RADIX_BINARY) : STRING(IDS_TMOOLTABLE_RADIX_DBMS_BINARY));
	if (nRadix & TMOOLTABLE_RADIX_OCTAL) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RADIX_OCTAL) : STRING(IDS_TMOOLTABLE_RADIX_DBMS_OCTAL));
	if (nRadix & TMOOLTABLE_RADIX_DECIMAL) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RADIX_DECIMAL) : STRING(IDS_TMOOLTABLE_RADIX_DBMS_DECIMAL));
	if (nRadix & TMOOLTABLE_RADIX_HEXADECIMAL) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RADIX_HEXADECIMAL) : STRING(IDS_TMOOLTABLE_RADIX_DBMS_HEXADECIMAL));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTMNumOolTableLimitTypes(CStringArray &szLimitTypes, CUIntArray &nLimitTypes) CONST
{
	nLimitTypes.RemoveAll();
	szLimitTypes.RemoveAll();
	nLimitTypes.Add(TMOOLLIMIT_TYPE_SOFT);
	nLimitTypes.Add(TMOOLLIMIT_TYPE_HARD);
	szLimitTypes.Add(STRING(IDS_TMOOLTABLE_LIMIT_TYPE_SOFT));
	szLimitTypes.Add(STRING(IDS_TMOOLTABLE_LIMIT_TYPE_HARD));
	return((INT)szLimitTypes.GetSize());
}

INT CALTELDatabaseEngine::TranslateTMNumOolTableLimitType(LPCTSTR pszLimitType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszLimitType, STRING(IDS_TMOOLTABLE_LIMIT_TYPE_DBMS_SOFT))) return TMOOLLIMIT_TYPE_SOFT;
		if (!lstrcmp(pszLimitType, STRING(IDS_TMOOLTABLE_LIMIT_TYPE_DBMS_HARD))) return TMOOLLIMIT_TYPE_HARD;
	}
	else
	{
		if (!lstrcmp(pszLimitType, STRING(IDS_TMOOLTABLE_LIMIT_TYPE_SOFT))) return TMOOLLIMIT_TYPE_SOFT;
		if (!lstrcmp(pszLimitType, STRING(IDS_TMOOLTABLE_LIMIT_TYPE_HARD))) return TMOOLLIMIT_TYPE_HARD;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTMNumOolTableLimitType(INT nLimitType, BOOL bDBMS) CONST
{
	if (nLimitType == TMOOLLIMIT_TYPE_SOFT) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_LIMIT_TYPE_SOFT) : STRING(IDS_TMOOLTABLE_LIMIT_TYPE_DBMS_SOFT));
	if (nLimitType == TMOOLLIMIT_TYPE_HARD) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_LIMIT_TYPE_HARD) : STRING(IDS_TMOOLTABLE_LIMIT_TYPE_DBMS_HARD));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTMNumOolTableLimitOrder(INT nOrder) CONST
{
	return((nOrder > 0) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMNumOolTableLimitCount(UINT nAttributes) CONST
{
	return 2;
}

BOOL CALTELDatabaseEngine::CheckTMNumOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	INT  nPos;
	LPTSTR  pszNumberPos;
	CString  szNumber[1];
	CStringTools  cStringTools;

	if ((nAttributes & (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_RADIX_HEXADECIMAL)) == (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_RADIX_HEXADECIMAL))
	{
		for (SkipSpaces(pszLimit, (nPos = 0)); pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE); )
		{
			nPos += lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE));
			break;
		}
		for (nPos += (pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_HEX)) ? lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_HEX)) : 0; nPos < lstrlen(pszLimit); nPos++)
		{
			if (_istxdigit(pszLimit[nPos])) continue;
			break;
		}
		return((SkipSpaces(pszLimit, nPos) == lstrlen(pszLimit) && lstrlen(pszLimit) > 0) ? TRUE : FALSE);
	}
	if ((nAttributes & (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CODING_FLOATINGPOINT)) == (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CODING_FLOATINGPOINT) || (nAttributes & TMOOLTABLE_CHECK_CALIBRATED))
	{
		_tcstod(pszLimit, &pszNumberPos);
		return((SkipSpaces(pszLimit, (nPos = lstrlen(pszLimit) - lstrlen(pszNumberPos))) == lstrlen(pszLimit) && lstrlen(pszLimit) > 0) ? TRUE : FALSE);
	}
	for (SkipSpaces(pszLimit, (nPos = 0)); pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE) || ((nAttributes & TMOOLTABLE_CODING_SIGNEDINTEGER) && pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE)); )
	{
		nPos += (pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE)) ? lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE)) : lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE));
		break;
	}
	for (szNumber[0] = cStringTools.ConvertIntToString(0); nPos < lstrlen(pszLimit); nPos++)
	{
		if (((nAttributes & TMOOLTABLE_RADIX_BINARY) && pszLimit[nPos] - __toascii(szNumber[0][0]) >= 0 && pszLimit[nPos] - __toascii(szNumber[0][0]) < 2) || ((nAttributes & TMOOLTABLE_RADIX_OCTAL) && pszLimit[nPos] - __toascii(szNumber[0][0]) >= 0 && pszLimit[nPos] - __toascii(szNumber[0][0]) < 8) || ((nAttributes & TMOOLTABLE_RADIX_DECIMAL) && _istdigit(pszLimit[nPos]))) continue;
		break;
	}
	return((SkipSpaces(pszLimit, nPos) == lstrlen(pszLimit) && lstrlen(pszLimit) > 0) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMNumOolTableLimitValueLength() CONST
{
	return 32;
}

double CALTELDatabaseEngine::TranslateTMNumOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	INT  nPos;
	BOOL  bValue;
	TCHAR  szDigit;
	double  fValue;
	LPTSTR  pszNumberPos;
	CString  szNumber[4];
	CStringTools  cStringTools;

	if (nAttributes & TMOOLTABLE_CHECK_RAW)
	{
		if (nAttributes & TMOOLTABLE_RADIX_HEXADECIMAL)
		{
			for (SkipSpaces(pszLimit, (nPos = 0)), bValue = FALSE; pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE) || pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE); )
			{
				if (pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE))
				{
					nPos += lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE));
					break;
				}
				nPos += lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE));
				bValue = TRUE;
				break;
			}
			for (nPos += (pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_HEX)) ? lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_HEX)) : 0, szNumber[0] = cStringTools.ConvertIntToString(0), szNumber[1] = szNumber[2] = cStringTools.ConvertIntToString(10, 16), szNumber[2].MakeLower(), fValue = 0.0; nPos < lstrlen(pszLimit); nPos++)
			{
				if (_istdigit((szNumber[3] = szDigit = pszLimit[nPos]).GetAt(0)))
				{
					fValue = 16.0*fValue + szDigit - __toascii(szNumber[0][0]);
					continue;
				}
				if (_istxdigit(szDigit))
				{
					fValue = (_istupper(szDigit)) ? (16.0*fValue + szDigit - __toascii(szNumber[1][0]) + 10) : (16.0*fValue + szDigit - __toascii(szNumber[2][0]) + 10);
					continue;
				}
				break;
			}
			return((bValue) ? -fValue : fValue);
		}
		if (nAttributes & TMOOLTABLE_RADIX_OCTAL)
		{
			for (SkipSpaces(pszLimit, (nPos = 0)), bValue = FALSE; pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE) || pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE); )
			{
				if (pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE))
				{
					nPos += lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE));
					break;
				}
				nPos += lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE));
				bValue = TRUE;
				break;
			}
			for (szNumber[0] = cStringTools.ConvertIntToString(0), fValue = 0.0; nPos < lstrlen(pszLimit); nPos++)
			{
				if ((szDigit = pszLimit[nPos]) >= szNumber[0][0] && szDigit - __toascii(szNumber[0][0]) < 8)
				{
					fValue = 8.0*fValue + szDigit - __toascii(szNumber[0][0]);
					continue;
				}
				break;
			}
			return((bValue) ? -fValue : fValue);
		}
		if (nAttributes & TMOOLTABLE_RADIX_BINARY)
		{
			for (SkipSpaces(pszLimit, (nPos = 0)), bValue = FALSE; pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE) || pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE); )
			{
				if (pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE))
				{
					nPos += lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE));
					break;
				}
				nPos += lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE));
				bValue = TRUE;
				break;
			}
			for (szNumber[0] = cStringTools.ConvertIntToString(0), fValue = 0.0; nPos < lstrlen(pszLimit); nPos++)
			{
				if ((szDigit = pszLimit[nPos]) >= szNumber[0][0] && szDigit - __toascii(szNumber[0][0]) < 2)
				{
					fValue = 2.0*fValue + szDigit - __toascii(szNumber[0][0]);
					continue;
				}
				break;
			}
			return((bValue) ? -fValue : fValue);
		}
	}
	return _tcstod(pszLimit, &pszNumberPos);
}
CString CALTELDatabaseEngine::TranslateTMNumOolTableLimitValue(UINT nAttributes, double fLimit) CONST
{
	INT  nRadix;
	CStringTools  cStringTools;

	for (nRadix = (nAttributes & TMOOLTABLE_RADIX_HEXADECIMAL) ? 16 : 10, nRadix = (nAttributes & TMOOLTABLE_RADIX_OCTAL) ? 8 : nRadix, nRadix = (nAttributes & TMOOLTABLE_RADIX_BINARY) ? 2 : nRadix; (nAttributes & TMOOLTABLE_CODING_FLOATINGPOINT) || (nAttributes & TMOOLTABLE_CHECK_CALIBRATED); ) return cStringTools.ConvertFloatToString(fLimit);
	if (nAttributes & TMOOLTABLE_CODING_UNSIGNEDINTEGER) return cStringTools.ConvertLongUIntToString((ULONGLONG)fLimit, nRadix);
	if (nAttributes & TMOOLTABLE_CODING_SIGNEDINTEGER) return cStringTools.ConvertLongIntToString((LONGLONG)fLimit, nRadix);
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTMNumOolTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TMOOLTABLE_RECORDSTATUS_NEW);
	nStatus.Add(TMOOLTABLE_RECORDSTATUS_DRAFT);
	nStatus.Add(TMOOLTABLE_RECORDSTATUS_CHANGED);
	nStatus.Add(TMOOLTABLE_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TMOOLTABLE_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TMOOLTABLE_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TMOOLTABLE_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TMOOLTABLE_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMNumOolTableStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTMNumOolTableStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMNumOolTableStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTMNumOolTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_NEW))) return TMOOLTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_DRAFT))) return TMOOLTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_CHANGED))) return TMOOLTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_DELETED))) return TMOOLTABLE_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_NEW))) return TMOOLTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DRAFT))) return TMOOLTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_CHANGED))) return TMOOLTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DELETED))) return TMOOLTABLE_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTMNumOolTableStatusLength()) ? TMOOLTABLE_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTMNumOolTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TMOOLTABLE_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RECORDSTATUS_NEW) : STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TMOOLTABLE_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RECORDSTATUS_DRAFT) : STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TMOOLTABLE_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RECORDSTATUS_CHANGED) : STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TMOOLTABLE_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RECORDSTATUS_DELETED) : STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTMTxtOolTableName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTMTxtOolTableNameLength());
}

INT CALTELDatabaseEngine::GetTMTxtOolTableNameLength() CONST
{
	return 10;
}

BOOL CALTELDatabaseEngine::CheckTMTxtOolTableCheckCount(INT nCount) CONST
{
	INT  nRange[2];

	return((GetTMTxtOolTableCheckCountRange(nRange[0], nRange[1]) && nCount >= nRange[0] && nCount <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTMTxtOolTableCheckCountRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 99;
	return TRUE;
}

INT CALTELDatabaseEngine::TranslateTMTxtOolTableCheckCount(LPCTSTR pszCount) CONST
{
	return((lstrlen(pszCount) > 0) ? _ttoi(pszCount) : -1);
}
CString CALTELDatabaseEngine::TranslateTMTxtOolTableCheckCount(INT nCount) CONST
{
	CStringTools  cStringTools;

	return((nCount >= 0) ? cStringTools.ConvertIntToString(nCount) : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumTMTxtOolTableInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	nInterpretations.RemoveAll();
	szInterpretations.RemoveAll();
	nInterpretations.Add(TMOOLTABLE_CHECK_CALIBRATED);
	nInterpretations.Add(TMOOLTABLE_CHECK_RAW);
	szInterpretations.Add(STRING(IDS_TMOOLTABLE_TYPE_CALIBRATED));
	szInterpretations.Add(STRING(IDS_TMOOLTABLE_TYPE_RAW));
	return((INT)szInterpretations.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMTxtOolTableInterpretation(UINT nInterpretation) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nInterpretation & (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CHECK_CALIBRATED))) == TMOOLTABLE_CHECK_RAW || nAttribute == TMOOLTABLE_CHECK_CALIBRATED) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMTxtOolTableInterpretationLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateTMTxtOolTableInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TMOOLTABLE_TYPE_DBMS_CALIBRATED))) return TMOOLTABLE_CHECK_CALIBRATED;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TMOOLTABLE_TYPE_DBMS_RAW))) return TMOOLTABLE_CHECK_RAW;
	}
	else
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TMOOLTABLE_TYPE_CALIBRATED))) return TMOOLTABLE_CHECK_CALIBRATED;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TMOOLTABLE_TYPE_RAW))) return TMOOLTABLE_CHECK_RAW;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTMTxtOolTableInterpretation(UINT nInterpretation, BOOL bDBMS) CONST
{
	if (nInterpretation & TMOOLTABLE_CHECK_CALIBRATED) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_TYPE_CALIBRATED) : STRING(IDS_TMOOLTABLE_TYPE_DBMS_CALIBRATED));
	if (nInterpretation & TMOOLTABLE_CHECK_RAW) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_TYPE_RAW) : STRING(IDS_TMOOLTABLE_TYPE_DBMS_RAW));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTMTxtOolTableRadixes(CStringArray &szRadixes, CUIntArray &nRadixes) CONST
{
	nRadixes.RemoveAll();
	szRadixes.RemoveAll();
	nRadixes.Add(TMOOLTABLE_RADIX_BINARY);
	nRadixes.Add(TMOOLTABLE_RADIX_OCTAL);
	nRadixes.Add(TMOOLTABLE_RADIX_DECIMAL);
	nRadixes.Add(TMOOLTABLE_RADIX_HEXADECIMAL);
	szRadixes.Add(STRING(IDS_TMOOLTABLE_RADIX_BINARY));
	szRadixes.Add(STRING(IDS_TMOOLTABLE_RADIX_OCTAL));
	szRadixes.Add(STRING(IDS_TMOOLTABLE_RADIX_DECIMAL));
	szRadixes.Add(STRING(IDS_TMOOLTABLE_RADIX_HEXADECIMAL));
	return((INT)szRadixes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMTxtOolTableRadix(UINT nInterpretation, UINT nCoding, UINT nRadix) CONST
{
	UINT  nAttribute;

	return(((((nAttribute = (nRadix & (TMOOLTABLE_RADIX_BINARY | TMOOLTABLE_RADIX_OCTAL | TMOOLTABLE_RADIX_DECIMAL | TMOOLTABLE_RADIX_HEXADECIMAL))) == TMOOLTABLE_RADIX_BINARY || nAttribute == TMOOLTABLE_RADIX_OCTAL || nAttribute == TMOOLTABLE_RADIX_HEXADECIMAL) && (nCoding & TMOOLTABLE_CODING_UNSIGNEDINTEGER)) || nAttribute == TMOOLTABLE_RADIX_DECIMAL || (!nAttribute && ((nInterpretation & TMOOLTABLE_CHECK_CALIBRATED) || (nInterpretation & (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CHECK_CALIBRATED)) == 0))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMTxtOolTableRadixLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateTMTxtOolTableRadix(UINT nInterpretation, LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_DBMS_BINARY))) return TMOOLTABLE_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_DBMS_OCTAL))) return TMOOLTABLE_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_DBMS_DECIMAL))) return TMOOLTABLE_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_DBMS_HEXADECIMAL))) return TMOOLTABLE_RADIX_HEXADECIMAL;
	}
	else
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_BINARY))) return TMOOLTABLE_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_OCTAL))) return TMOOLTABLE_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_DECIMAL))) return TMOOLTABLE_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TMOOLTABLE_RADIX_HEXADECIMAL))) return TMOOLTABLE_RADIX_HEXADECIMAL;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTMTxtOolTableRadix(UINT nRadix, BOOL bDBMS) CONST
{
	if (nRadix & TMOOLTABLE_RADIX_BINARY) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RADIX_BINARY) : STRING(IDS_TMOOLTABLE_RADIX_DBMS_BINARY));
	if (nRadix & TMOOLTABLE_RADIX_OCTAL) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RADIX_OCTAL) : STRING(IDS_TMOOLTABLE_RADIX_DBMS_OCTAL));
	if (nRadix & TMOOLTABLE_RADIX_DECIMAL) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RADIX_DECIMAL) : STRING(IDS_TMOOLTABLE_RADIX_DBMS_DECIMAL));
	if (nRadix & TMOOLTABLE_RADIX_HEXADECIMAL) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RADIX_HEXADECIMAL) : STRING(IDS_TMOOLTABLE_RADIX_DBMS_HEXADECIMAL));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTMTxtOolTableLimitTypes(CStringArray &szLimitTypes, CUIntArray &nLimitTypes) CONST
{
	nLimitTypes.RemoveAll();
	szLimitTypes.RemoveAll();
	nLimitTypes.Add(TMOOLLIMIT_TYPE_HARD);
	szLimitTypes.Add(STRING(IDS_TMOOLTABLE_LIMIT_TYPE_HARD));
	return((INT)szLimitTypes.GetSize());
}

INT CALTELDatabaseEngine::TranslateTMTxtOolTableLimitType(LPCTSTR pszLimitType, BOOL bDBMS) CONST
{
	return(((bDBMS  &&  !lstrcmp(pszLimitType, STRING(IDS_TMOOLTABLE_LIMIT_TYPE_DBMS_HARD))) || (!bDBMS  &&  !lstrcmp(pszLimitType, STRING(IDS_TMOOLTABLE_LIMIT_TYPE_HARD)))) ? TMOOLLIMIT_TYPE_HARD : 0);
}
CString CALTELDatabaseEngine::TranslateTMTxtOolTableLimitType(INT nLimitType, BOOL bDBMS) CONST
{
	return((nLimitType == TMOOLLIMIT_TYPE_HARD) ? ((bDBMS) ? STRING(IDS_TMOOLTABLE_LIMIT_TYPE_DBMS_HARD) : STRING(IDS_TMOOLTABLE_LIMIT_TYPE_HARD)) : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTMTxtOolTableLimitOrder(INT nOrder) CONST
{
	return((nOrder > 0) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMTxtOolTableLimitCount(UINT nAttributes) CONST
{
	return 255;
}

BOOL CALTELDatabaseEngine::CheckTMTxtOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	INT  nPos;
	LPTSTR  pszNumberPos;
	CString  szNumber[1];
	CStringTools  cStringTools;

	if ((nAttributes & (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_RADIX_HEXADECIMAL)) == (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_RADIX_HEXADECIMAL))
	{
		for (SkipSpaces(pszLimit, (nPos = 0)); pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE); )
		{
			nPos += lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE));
			break;
		}
		for (nPos += (pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_HEX)) ? lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_HEX)) : 0; nPos < lstrlen(pszLimit); nPos++)
		{
			if (_istxdigit(pszLimit[nPos])) continue;
			break;
		}
		return((SkipSpaces(pszLimit, nPos) == lstrlen(pszLimit) && lstrlen(pszLimit) > 0) ? TRUE : FALSE);
	}
	if ((nAttributes & (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CODING_FLOATINGPOINT)) == (TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CODING_FLOATINGPOINT))
	{
		_tcstod(pszLimit, &pszNumberPos);
		return((SkipSpaces(pszLimit, (nPos = lstrlen(pszLimit) - lstrlen(pszNumberPos))) == lstrlen(pszLimit) && lstrlen(pszLimit) > 0) ? TRUE : FALSE);
	}
	if (nAttributes & TMOOLTABLE_CHECK_RAW)
	{
		for (SkipSpaces(pszLimit, (nPos = 0)); pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE) || ((nAttributes & TMOOLTABLE_CODING_SIGNEDINTEGER) && pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE)); )
		{
			nPos += (pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE)) ? lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE)) : lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE));
			break;
		}
		for (szNumber[0] = cStringTools.ConvertIntToString(0); nPos < lstrlen(pszLimit); nPos++)
		{
			if (((nAttributes & TMOOLTABLE_RADIX_BINARY) && pszLimit[nPos] - __toascii(szNumber[0][0]) >= 0 && pszLimit[nPos] - __toascii(szNumber[0][0]) < 2) || ((nAttributes & TMOOLTABLE_RADIX_OCTAL) && pszLimit[nPos] - __toascii(szNumber[0][0]) >= 0 && pszLimit[nPos] - __toascii(szNumber[0][0]) < 8) || ((nAttributes & TMOOLTABLE_RADIX_DECIMAL) && _istdigit(pszLimit[nPos]))) continue;
			break;
		}
		return((SkipSpaces(pszLimit, nPos) == lstrlen(pszLimit) && lstrlen(pszLimit) > 0) ? TRUE : FALSE);
	}
	return(((nAttributes & TMOOLTABLE_CHECK_CALIBRATED) && lstrlen(pszLimit) > 0) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMTxtOolTableLimitValueLength() CONST
{
	return 12;
}

double CALTELDatabaseEngine::TranslateTMTxtOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	INT  nPos;
	BOOL  bValue;
	TCHAR  szDigit;
	double  fValue;
	LPTSTR  pszNumberPos;
	CString  szNumber[4];
	CStringTools  cStringTools;

	if (nAttributes & TMOOLTABLE_CHECK_RAW)
	{
		if (nAttributes & TMOOLTABLE_RADIX_HEXADECIMAL)
		{
			for (SkipSpaces(pszLimit, (nPos = 0)), bValue = FALSE; pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE) || pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE); )
			{
				if (pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE))
				{
					nPos += lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE));
					break;
				}
				nPos += lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE));
				bValue = TRUE;
				break;
			}
			for (nPos += (pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_HEX)) ? lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_HEX)) : 0, szNumber[0] = cStringTools.ConvertIntToString(0), szNumber[1] = szNumber[2] = cStringTools.ConvertIntToString(10, 16), szNumber[2].MakeLower(), fValue = 0.0; nPos < lstrlen(pszLimit); nPos++)
			{
				if (_istdigit((szNumber[3] = szDigit = pszLimit[nPos]).GetAt(0)))
				{
					fValue = 16.0*fValue + szDigit - __toascii(szNumber[0][0]);
					continue;
				}
				if (_istxdigit(szDigit))
				{
					fValue = (_istupper(szDigit)) ? (16.0*fValue + szDigit - __toascii(szNumber[1][0]) + 10) : (16.0*fValue + szDigit - __toascii(szNumber[2][0]) + 10);
					continue;
				}
				break;
			}
			return((bValue) ? -fValue : fValue);
		}
		if (nAttributes & TMOOLTABLE_RADIX_OCTAL)
		{
			for (SkipSpaces(pszLimit, (nPos = 0)), bValue = FALSE; pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE) || pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE); )
			{
				if (pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE))
				{
					nPos += lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE));
					break;
				}
				nPos += lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE));
				bValue = TRUE;
				break;
			}
			for (szNumber[0] = cStringTools.ConvertIntToString(0), fValue = 0.0; nPos < lstrlen(pszLimit); nPos++)
			{
				if ((szDigit = pszLimit[nPos]) >= szNumber[0][0] && szDigit - __toascii(szNumber[0][0]) < 8)
				{
					fValue = 8.0*fValue + szDigit - __toascii(szNumber[0][0]);
					continue;
				}
				break;
			}
			return((bValue) ? -fValue : fValue);
		}
		if (nAttributes & TMOOLTABLE_RADIX_BINARY)
		{
			for (SkipSpaces(pszLimit, (nPos = 0)), bValue = FALSE; pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE) || pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE); )
			{
				if (pszLimit[nPos] == STRINGCHAR(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE))
				{
					nPos += lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_POSITIVE));
					break;
				}
				nPos += lstrlen(STRING(IDS_TMOOLTABLE_LIMIT_PREFIX_NEGATIVE));
				bValue = TRUE;
				break;
			}
			for (szNumber[0] = cStringTools.ConvertIntToString(0), fValue = 0.0; nPos < lstrlen(pszLimit); nPos++)
			{
				if ((szDigit = pszLimit[nPos]) >= szNumber[0][0] && szDigit - __toascii(szNumber[0][0]) < 2)
				{
					fValue = 2.0*fValue + szDigit - __toascii(szNumber[0][0]);
					continue;
				}
				break;
			}
			return((bValue) ? -fValue : fValue);
		}
		return _tcstod(pszLimit, &pszNumberPos);
	}
	return 0.0;
}
CString CALTELDatabaseEngine::TranslateTMTxtOolTableLimitValue(UINT nAttributes, double fLimit) CONST
{
	INT  nRadix;
	CStringTools  cStringTools;

	for (nRadix = (nAttributes & TMOOLTABLE_RADIX_HEXADECIMAL) ? 16 : 10, nRadix = (nAttributes & TMOOLTABLE_RADIX_OCTAL) ? 8 : nRadix, nRadix = (nAttributes & TMOOLTABLE_RADIX_BINARY) ? 2 : nRadix; nAttributes & TMOOLTABLE_CHECK_CALIBRATED; ) return cStringTools.ConvertFloatToString(fLimit);
	if (nRadix != 10) return cStringTools.ConvertLongUIntToString((ULONGLONG)fLimit, nRadix);
	return cStringTools.ConvertLongIntToString((LONGLONG)fLimit);
}

INT CALTELDatabaseEngine::EnumTMTxtOolTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TMOOLTABLE_RECORDSTATUS_NEW);
	nStatus.Add(TMOOLTABLE_RECORDSTATUS_DRAFT);
	nStatus.Add(TMOOLTABLE_RECORDSTATUS_CHANGED);
	nStatus.Add(TMOOLTABLE_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TMOOLTABLE_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TMOOLTABLE_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TMOOLTABLE_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TMOOLTABLE_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTMTxtOolTableStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTMTxtOolTableStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTMTxtOolTableStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTMTxtOolTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_NEW))) return TMOOLTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_DRAFT))) return TMOOLTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_CHANGED))) return TMOOLTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_DELETED))) return TMOOLTABLE_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_NEW))) return TMOOLTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DRAFT))) return TMOOLTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_CHANGED))) return TMOOLTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TMOOLTABLE_RECORDSTATUS_DELETED))) return TMOOLTABLE_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTMTxtOolTableStatusLength()) ? TMOOLTABLE_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTMTxtOolTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TMOOLTABLE_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RECORDSTATUS_NEW) : STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TMOOLTABLE_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RECORDSTATUS_DRAFT) : STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TMOOLTABLE_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RECORDSTATUS_CHANGED) : STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TMOOLTABLE_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TMOOLTABLE_RECORDSTATUS_DELETED) : STRING(IDS_TMOOLTABLE_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCParameterTag(LPCTSTR pszTag) CONST
{
	return CheckTag(pszTag, GetTCParameterTagLength());
}

INT CALTELDatabaseEngine::GetTCParameterTagLength() CONST
{
	return 9;
}

BOOL CALTELDatabaseEngine::CheckTCParameterDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) > 0 && lstrlen(pszDescription) <= GetTCParameterDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCParameterDescriptionLength() CONST
{
	return 48;
}

BOOL CALTELDatabaseEngine::CheckTCParameterUnit(LPCTSTR pszUnit) CONST
{
	return((lstrlen(pszUnit) >= 0 && lstrlen(pszUnit) <= GetTCParameterUnitLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCParameterUnitLength() CONST
{
	return 4;
}

INT CALTELDatabaseEngine::EnumTCParameterTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	nTypes.RemoveAll();
	szTypes.RemoveAll();
	nTypes.Add(TCPARAMETER_TYPE_VARIABLE);
	nTypes.Add(TCPARAMETER_TYPE_CONSTANT);
	szTypes.Add(STRING(IDS_TCPARAMETER_TYPE_VARIABLE));
	szTypes.Add(STRING(IDS_TCPARAMETER_TYPE_CONSTANT));
	return((INT)szTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCParameterType(LPCTSTR pszTag, ULONGLONG nType) CONST
{
	return(((lstrlen(pszTag) > 0 && nType == TCPARAMETER_TYPE_VARIABLE) || (!lstrlen(pszTag) && nType == TCPARAMETER_TYPE_CONSTANT)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCParameterTypeLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCParameterType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszType, STRING(IDS_TCPARAMETER_TYPE_DBMS_VARIABLE))) return TCPARAMETER_TYPE_VARIABLE;
		if (!lstrcmp(pszType, STRING(IDS_TCPARAMETER_TYPE_DBMS_CONSTANT))) return TCPARAMETER_TYPE_CONSTANT;
	}
	else
	{
		if (!lstrcmp(pszType, STRING(IDS_TCPARAMETER_TYPE_VARIABLE))) return TCPARAMETER_TYPE_VARIABLE;
		if (!lstrcmp(pszType, STRING(IDS_TCPARAMETER_TYPE_CONSTANT))) return TCPARAMETER_TYPE_CONSTANT;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCParameterType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCPARAMETER_TYPE_VARIABLE) return((!bDBMS) ? STRING(IDS_TCPARAMETER_TYPE_VARIABLE) : STRING(IDS_TCPARAMETER_TYPE_DBMS_VARIABLE));
	if (nAttributes & TCPARAMETER_TYPE_CONSTANT) return((!bDBMS) ? STRING(IDS_TCPARAMETER_TYPE_CONSTANT) : STRING(IDS_TCPARAMETER_TYPE_DBMS_CONSTANT));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTCParameterCategories(CStringArray &szCategories, CLongUIntArray &nCategories) CONST
{
	nCategories.RemoveAll();
	szCategories.RemoveAll();
	nCategories.Add(TCPARAMETER_CALIBRATION_NONE);
	nCategories.Add(TCPARAMETER_CALIBRATION_NUMERICAL);
	nCategories.Add(TCPARAMETER_CALIBRATION_STATUS);
	szCategories.Add(STRING(IDS_TCPARAMETER_CALIBRATION_NONE));
	szCategories.Add(STRING(IDS_TCPARAMETER_CALIBRATION_NUMERICAL));
	szCategories.Add(STRING(IDS_TCPARAMETER_CALIBRATION_STATUS));
	return((INT)szCategories.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCParameterCategory(ULONGLONG nCategory) CONST
{
	ULONGLONG  nAttribute;

	return(((nAttribute = (nCategory & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))) == TCPARAMETER_CALIBRATION_NONE || nAttribute == TCPARAMETER_CALIBRATION_NUMERICAL || nAttribute == TCPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCParameterCategoryLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCParameterCategory(LPCTSTR pszCategory, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszCategory, STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_NONE)) || !lstrlen(pszCategory)) return TCPARAMETER_CALIBRATION_NONE;
		if (!lstrcmp(pszCategory, STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_NUMERICAL))) return TCPARAMETER_CALIBRATION_NUMERICAL;
		if (!lstrcmp(pszCategory, STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_STATUS))) return TCPARAMETER_CALIBRATION_STATUS;
	}
	else
	{
		if (!lstrcmp(pszCategory, STRING(IDS_TCPARAMETER_CALIBRATION_NONE))) return TCPARAMETER_CALIBRATION_NONE;
		if (!lstrcmp(pszCategory, STRING(IDS_TCPARAMETER_CALIBRATION_NUMERICAL))) return TCPARAMETER_CALIBRATION_NUMERICAL;
		if (!lstrcmp(pszCategory, STRING(IDS_TCPARAMETER_CALIBRATION_STATUS))) return TCPARAMETER_CALIBRATION_STATUS;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCParameterCategory(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCPARAMETER_CALIBRATION_NONE) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CALIBRATION_NONE) : STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_NONE));
	if (nAttributes & TCPARAMETER_CALIBRATION_NUMERICAL) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CALIBRATION_NUMERICAL) : STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_NUMERICAL));
	if (nAttributes & TCPARAMETER_CALIBRATION_STATUS) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CALIBRATION_STATUS) : STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_STATUS));
	return((bDBMS) ? STRING(IDS_TCPARAMETER_CALIBRATION_DBMS_NONE) : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTCParameterBitWidth(INT nWidth) CONST
{
	INT  nRange[2];

	return((GetTCParameterBitWidthRange(nRange[0], nRange[1]) && nWidth >= nRange[0] && nWidth <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCParameterBitWidthRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 1;
	nHigh = 48;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTCParameterCalTable(ULONGLONG nAttributes, LPCTSTR pszTable) CONST
{
	return(((((nAttributes & TCPARAMETER_CALIBRATION_NUMERICAL) || (nAttributes & TCPARAMETER_CALIBRATION_STATUS)) && lstrlen(pszTable) > 0 && lstrlen(pszTable) <= GetTCParameterCalTableLength()) || ((nAttributes & TCPARAMETER_CALIBRATION_NONE) && !lstrlen(pszTable))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCParameterCalTableLength() CONST
{
	return 8;
}

BOOL CALTELDatabaseEngine::CheckTCParameterOolTable(ULONGLONG nAttributes, LPCTSTR pszTable) CONST
{
	return((lstrlen(pszTable) >= 0 && lstrlen(pszTable) <= GetTCParameterOolTableLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCParameterOolTableLength() CONST
{
	return 10;
}

INT CALTELDatabaseEngine::EnumTCParameterCodings(CStringArray &szCodings, CLongUIntArray &nCodings) CONST
{
	nCodings.RemoveAll();
	szCodings.RemoveAll();
	nCodings.Add(TCPARAMETER_CODING_BITPATTERN);
	nCodings.Add(TCPARAMETER_CODING_SIGNEDINTEGER);
	nCodings.Add(TCPARAMETER_CODING_UNSIGNEDINTEGER);
	nCodings.Add(TCPARAMETER_CODING_FLOATINGPOINT);
	szCodings.Add(STRING(IDS_TCPARAMETER_CODING_BITPATTERN));
	szCodings.Add(STRING(IDS_TCPARAMETER_CODING_SIGNEDINTEGER));
	szCodings.Add(STRING(IDS_TCPARAMETER_CODING_UNSIGNEDINTEGER));
	szCodings.Add(STRING(IDS_TCPARAMETER_CODING_FLOATINGPOINT));
	return((INT)szCodings.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCParameterCoding(ULONGLONG nAttributes, ULONGLONG nCoding) CONST
{
	return(((nAttributes & TCPARAMETER_TYPE_CONSTANT) || (nCoding & TCPARAMETER_CODING_BITPATTERN) || (nCoding & TCPARAMETER_CODING_SIGNEDINTEGER) || (nCoding & TCPARAMETER_CODING_UNSIGNEDINTEGER) || (nCoding & TCPARAMETER_CODING_FLOATINGPOINT)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCParameterCodingLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCParameterCoding(LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_DBMS_BITPATTERN))) return TCPARAMETER_CODING_BITPATTERN;
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_DBMS_SIGNEDINTEGER))) return TCPARAMETER_CODING_SIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_DBMS_UNSIGNEDINTEGER))) return TCPARAMETER_CODING_UNSIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_DBMS_FLOATINGPOINT))) return TCPARAMETER_CODING_FLOATINGPOINT;
	}
	else
	{
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_BITPATTERN))) return TCPARAMETER_CODING_BITPATTERN;
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_SIGNEDINTEGER))) return TCPARAMETER_CODING_SIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_UNSIGNEDINTEGER))) return TCPARAMETER_CODING_UNSIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TCPARAMETER_CODING_FLOATINGPOINT))) return TCPARAMETER_CODING_FLOATINGPOINT;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCParameterCoding(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCPARAMETER_CODING_BITPATTERN) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CODING_BITPATTERN) : STRING(IDS_TCPARAMETER_CODING_DBMS_BITPATTERN));
	if (nAttributes & TCPARAMETER_CODING_SIGNEDINTEGER) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CODING_SIGNEDINTEGER) : STRING(IDS_TCPARAMETER_CODING_DBMS_SIGNEDINTEGER));
	if (nAttributes & TCPARAMETER_CODING_UNSIGNEDINTEGER) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CODING_UNSIGNEDINTEGER) : STRING(IDS_TCPARAMETER_CODING_DBMS_UNSIGNEDINTEGER));
	if (nAttributes & TCPARAMETER_CODING_FLOATINGPOINT) return((!bDBMS) ? STRING(IDS_TCPARAMETER_CODING_FLOATINGPOINT) : STRING(IDS_TCPARAMETER_CODING_DBMS_FLOATINGPOINT));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszConstValue) CONST
{
	INT  nDigit;
	INT  nPos[2];
	TCHAR  szChar;
	TCHAR  szDigit;
	LPTSTR  pszNumberPos;
	CStringTools  cStringTools;

	for (nPos[0] = (INT)_tcscspn(pszConstValue, STRING(IDS_TCPARAMETER_CONSTANTVALUE_QUOTESIGN)), nPos[1] = (nPos[0] < lstrlen(pszConstValue)) ? (nPos[0] + (INT)_tcscspn(&pszConstValue[nPos[0] + 1], STRING(IDS_TCPARAMETER_CONSTANTVALUE_QUOTESIGN)) + 1) : nPos[0]; (nAttributes & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) && (nAttributes & TCPARAMETER_CALIBRATION_STATUS) != TCPARAMETER_CALIBRATION_STATUS && nPos[0] == lstrlen(pszConstValue) && nPos[1] == lstrlen(pszConstValue); )
	{
		for (SkipSpaces(pszConstValue, (nPos[0] = 0)); (szChar = pszConstValue[nPos[0]]) == STRINGCHAR(IDS_TCPARAMETER_CONSTANTVALUE_POSITIVEPREFIX) || szChar == STRINGCHAR(IDS_TCPARAMETER_CONSTANTVALUE_NEGATIVEPREFIX); )
		{
			SkipSpaces(pszConstValue, (nPos[0] = (szChar == STRINGCHAR(IDS_TCPARAMETER_CONSTANTVALUE_POSITIVEPREFIX) || (nAttributes & TCPARAMETER_CODING_SIGNEDINTEGER) || (nAttributes & TCPARAMETER_CODING_FLOATINGPOINT) || (nAttributes & TCPARAMETER_CALIBRATION_NUMERICAL)) ? (nPos[0] + 1) : -1));
			break;
		}
		for (; nPos[0] >= 0 && (szChar = pszConstValue[nPos[0]]) == STRINGCHAR(IDS_TCPARAMETER_CONSTANTVALUE_HEXPREFIX); )
		{
			nPos[0] = (nAttributes & TCPARAMETER_RADIX_HEXADECIMAL) ? SkipSpaces(pszConstValue, ++nPos[0]) : -1;
			break;
		}
		for (szDigit = cStringTools.ConvertIntToString(0).GetAt(0), nPos[1] = 0; nPos[0] >= 0 && nPos[0] < lstrlen(pszConstValue) && pszConstValue[nPos[0]] != SPACE[0]; nPos[0] = (nPos[0] >= 0) ? (nPos[0] + 1) : -1, nPos[1]++)
		{
			for (nDigit = __toascii((szChar = pszConstValue[nPos[0]])) - __toascii(szDigit); (nAttributes & TCPARAMETER_CODING_FLOATINGPOINT) != TCPARAMETER_CODING_FLOATINGPOINT && (nAttributes & (TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_NUMERICAL)) == 0; )
			{
				nPos[0] = (((nAttributes & TCPARAMETER_RADIX_BINARY) && nDigit >= 0 && nDigit < 2) || ((nAttributes & TCPARAMETER_RADIX_OCTAL) && nDigit >= 0 && nDigit < 8) || ((nAttributes & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0 && _istdigit(szChar)) || ((nAttributes & TCPARAMETER_RADIX_HEXADECIMAL) && _istxdigit(szChar))) ? nPos[0] : -1;
				break;
			}
			if (nAttributes & (TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED))
			{
				for (_tcstod(&pszConstValue[nPos[0]], &pszNumberPos); lstrlen(pszNumberPos) >= 0; )
				{
					nPos[1] = lstrlen(pszConstValue) - lstrlen(pszNumberPos) - nPos[0];
					nPos[0] += nPos[1];
					break;
				}
				break;
			}
		}
		return((SkipSpaces(pszConstValue, nPos[0]) == lstrlen(pszConstValue) && (!lstrlen(pszConstValue) || nPos[1] > 0)) ? TRUE : FALSE);
	}
	return(((nAttributes & TCPARAMETER_CODING_TIME) != TCPARAMETER_CODING_TIME) ? ((((nAttributes & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) == 0 || (nAttributes & TCPARAMETER_CALIBRATION_STATUS)) && ((nPos[0] < nPos[1] && nPos[1] < lstrlen(pszConstValue)) || (nPos[0] == lstrlen(pszConstValue) && nPos[1] == lstrlen(pszConstValue)) || !lstrlen(pszConstValue))) ? TRUE : FALSE) : ((ParseTime(pszConstValue) > 0) ? TRUE : FALSE));
}

INT CALTELDatabaseEngine::GetTCParameterConstValueLength() CONST
{
	return 32;
}

ULONGLONG CALTELDatabaseEngine::TranslateTCParameterConstValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszConstValue) CONST
{
	INT  nPos;
	INT  nLength;
	ULONGLONG  nValue;

	for (nPos = 0, nLength = lstrlen(pszConstValue), nValue = 0, SkipSpaces(pszConstValue, nPos); nPos < nLength && pszConstValue[nPos] != STRINGCHAR(IDS_TCPARAMETER_CONSTANTVALUE_QUOTESIGN); )
	{
		if (pszConstValue[nPos] != STRINGCHAR(IDS_TCPARAMETER_CONSTANTVALUE_HEXPREFIX))
		{
			if (nAttributes & (TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED))
			{
				nValue = EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, ParseValue(&pszConstValue[nPos]));
				return nValue;
			}
			if (nAttributes & TCPARAMETER_CODING_TIME)
			{
				nValue = EncodeTime(ParseTime(&pszConstValue[nPos]));
				return nValue;
			}
			if (nAttributes & TCPARAMETER_RADIX_BINARY)
			{
				nValue = EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, ParseValue(&pszConstValue[nPos], 2));
				return nValue;
			}
			if (nAttributes & TCPARAMETER_RADIX_OCTAL)
			{
				nValue = EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, ParseValue(&pszConstValue[nPos], 8));
				return nValue;
			}
			if (nAttributes & TCPARAMETER_RADIX_HEXADECIMAL)
			{
				nValue = EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, ParseValue(&pszConstValue[nPos], 16));
				return nValue;
			}
			nValue = EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, ParseValue(&pszConstValue[nPos], 10));
			return nValue;
		}
		nValue = (nAttributes & (TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED)) ? EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, (double)ParseValue(&pszConstValue[++nPos], 16)) : EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, ParseValue(&pszConstValue[++nPos], 16));
		break;
	}
	return nValue;
}
CString CALTELDatabaseEngine::TranslateTCParameterConstValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nConstValue) CONST
{
	CString  szValue;
	CStringTools  cStringTools;

	if ((((nAttributes & TCPARAMETER_VTYPE_CALIBRATED) || (nAttributes & TCPARAMETER_CALIBRATION_ENABLED) || (nAttributes & TCPARAMETER_CALIBRATION_NUMERICAL)) && (nAttributes & TCPARAMETER_CALIBRATION_STATUS) != TCPARAMETER_CALIBRATION_STATUS) || (nAttributes & TCPARAMETER_CODING_FLOATINGPOINT))
	{
		szValue = cStringTools.ConvertFloatToString(DecodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nConstValue));
		return szValue;
	}
	if (nAttributes & TCPARAMETER_CODING_TIME)
	{
		szValue = CTimeTag(DecodeTime(nConstValue)).FormatGmt();
		return szValue;
	}
	if (nAttributes & TCPARAMETER_RADIX_BINARY)
	{
		szValue = cStringTools.ConvertLongUIntToString(DecodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, nConstValue), 2);
		return szValue;
	}
	if (nAttributes & TCPARAMETER_RADIX_OCTAL)
	{
		szValue = cStringTools.ConvertLongUIntToString(DecodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, nConstValue), 8);
		return szValue;
	}
	if (nAttributes & TCPARAMETER_RADIX_HEXADECIMAL)
	{
		szValue = cStringTools.ConvertLongUIntToString(DecodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, nConstValue), 16);
		return szValue;
	}
	if (nAttributes & TCPARAMETER_CODING_SIGNEDINTEGER)
	{
		szValue = cStringTools.ConvertLongIntToString(DecodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, nConstValue));
		return szValue;
	}
	return cStringTools.ConvertLongUIntToString(DecodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, nAttributes, nWidth, nConstValue));
}

BOOL CALTELDatabaseEngine::CheckTCParameterConstTimeType(LPCTSTR pszTag) CONST
{
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = MAXTCPARAMETERSTIMELIST - MINTCPARAMETERSTIMELIST + 1; nParameter < nParameters; nParameter++)
	{
		if (!lstrcmp(pszTag, STRING(MINTCPARAMETERSTIMELIST + nParameter))) break;
		continue;
	}
	return((nParameter < nParameters) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckTCParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return(((nAttributes & TCPARAMETER_CODING_TIME) || ((nAttributes & TCPARAMETER_CALIBRATION_STATUS) != TCPARAMETER_CALIBRATION_STATUS && ((nAttributes & TCPARAMETER_RADIX_DECIMAL) || (nAttributes & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0))) ? (ParseTime(pszConstTime) >= 0) : FALSE);
}

CTimeTag CALTELDatabaseEngine::TranslateTCParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return(((nAttributes & TCPARAMETER_CALIBRATION_STATUS) != TCPARAMETER_CALIBRATION_STATUS && ((nAttributes & TCPARAMETER_RADIX_DECIMAL) || (nAttributes & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0)) ? ParseTime(pszConstTime) : 0);
}

INT CALTELDatabaseEngine::EnumTCParameterStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TCPARAMETER_RECORDSTATUS_NEW);
	nStatus.Add(TCPARAMETER_RECORDSTATUS_DRAFT);
	nStatus.Add(TCPARAMETER_RECORDSTATUS_CHANGED);
	nStatus.Add(TCPARAMETER_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TCPARAMETER_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TCPARAMETER_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TCPARAMETER_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TCPARAMETER_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCParameterStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETER_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETER_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETER_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETER_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCParameterStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCParameterStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTCParameterStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETER_RECORDSTATUS_DBMS_NEW))) return TCPARAMETER_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETER_RECORDSTATUS_DBMS_DRAFT))) return TCPARAMETER_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETER_RECORDSTATUS_DBMS_CHANGED))) return TCPARAMETER_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETER_RECORDSTATUS_DBMS_DELETED))) return TCPARAMETER_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETER_RECORDSTATUS_NEW))) return TCPARAMETER_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETER_RECORDSTATUS_DRAFT))) return TCPARAMETER_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETER_RECORDSTATUS_CHANGED))) return TCPARAMETER_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETER_RECORDSTATUS_DELETED))) return TCPARAMETER_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCParameterStatusLength()) ? TCPARAMETER_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTCParameterStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TCPARAMETER_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RECORDSTATUS_NEW) : STRING(IDS_TCPARAMETER_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TCPARAMETER_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RECORDSTATUS_DRAFT) : STRING(IDS_TCPARAMETER_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TCPARAMETER_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RECORDSTATUS_CHANGED) : STRING(IDS_TCPARAMETER_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TCPARAMETER_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TCPARAMETER_RECORDSTATUS_DELETED) : STRING(IDS_TCPARAMETER_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCNumCalTableName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTCNumCalTableNameLength());
}

INT CALTELDatabaseEngine::GetTCNumCalTableNameLength() CONST
{
	return 8;
}

BOOL CALTELDatabaseEngine::CheckTCNumCalTableDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) > 0 && lstrlen(pszDescription) <= GetTCNumCalTableDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCNumCalTableDescriptionLength() CONST
{
	return 32;
}

BOOL CALTELDatabaseEngine::CheckTCNumCalTableUnit(LPCTSTR pszUnit) CONST
{
	return((lstrlen(pszUnit) <= GetTCNumCalTableUnitLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCNumCalTableUnitLength() CONST
{
	return 12;
}

BOOL CALTELDatabaseEngine::CheckTCNumCalTablePoints(INT nPoints) CONST
{
	INT  nRange[2];

	return((GetTCNumCalTablePointsRange(nRange[0], nRange[1]) && nPoints >= nRange[0] && nPoints <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCNumCalTablePointsRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 16;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTCNumCalTablePointInterval(double X1, double X2) CONST
{
	return((fabs(X2 - X1) > FLT_EPSILON) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::EnumTCNumCalTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TCCALTABLE_RECORDSTATUS_NEW);
	nStatus.Add(TCCALTABLE_RECORDSTATUS_DRAFT);
	nStatus.Add(TCCALTABLE_RECORDSTATUS_CHANGED);
	nStatus.Add(TCCALTABLE_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TCCALTABLE_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TCCALTABLE_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TCCALTABLE_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TCCALTABLE_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCNumCalTableStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCNumCalTableStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCNumCalTableStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTCNumCalTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_NEW))) return TCCALTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_DRAFT))) return TCCALTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_CHANGED))) return TCCALTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_DELETED))) return TCCALTABLE_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_NEW))) return TCCALTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DRAFT))) return TCCALTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_CHANGED))) return TCCALTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DELETED))) return TCCALTABLE_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCNumCalTableStatusLength()) ? TCCALTABLE_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTCNumCalTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TCCALTABLE_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TCCALTABLE_RECORDSTATUS_NEW) : STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TCCALTABLE_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TCCALTABLE_RECORDSTATUS_DRAFT) : STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TCCALTABLE_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TCCALTABLE_RECORDSTATUS_CHANGED) : STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TCCALTABLE_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TCCALTABLE_RECORDSTATUS_DELETED) : STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCTxtCalTableName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTCTxtCalTableNameLength());
}

INT CALTELDatabaseEngine::GetTCTxtCalTableNameLength() CONST
{
	return 8;
}

BOOL CALTELDatabaseEngine::CheckTCTxtCalTableDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) > 0 && lstrlen(pszDescription) <= GetTCTxtCalTableDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCTxtCalTableDescriptionLength() CONST
{
	return 32;
}

BOOL CALTELDatabaseEngine::CheckTCTxtCalTablePoints(INT nPoints) CONST
{
	INT  nRange[2];

	return((GetTCTxtCalTablePointsRange(nRange[0], nRange[1]) && nPoints >= nRange[0] && nPoints <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCTxtCalTablePointsRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 255;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTCTxtCalTablePointInterval(double X1, double X2) CONST
{
	return((X1 <= X2) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckTCTxtCalTablePointText(LPCTSTR pszText) CONST
{
	return((lstrlen(pszText) > 0 && lstrlen(pszText) <= GetTCTxtCalTablePointTextLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCTxtCalTablePointTextLength() CONST
{
	return 12;
}

CString CALTELDatabaseEngine::GetTCTxtCalTablePointOutsideText() CONST
{
	return STRING(IDS_TCCALTABLE_FLAG_EXTRAPOLATED);
}

INT CALTELDatabaseEngine::EnumTCTxtCalTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TCCALTABLE_RECORDSTATUS_NEW);
	nStatus.Add(TCCALTABLE_RECORDSTATUS_DRAFT);
	nStatus.Add(TCCALTABLE_RECORDSTATUS_CHANGED);
	nStatus.Add(TCCALTABLE_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TCCALTABLE_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TCCALTABLE_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TCCALTABLE_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TCCALTABLE_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCTxtCalTableStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCTxtCalTableStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCTxtCalTableStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTCTxtCalTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_NEW))) return TCCALTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_DRAFT))) return TCCALTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_CHANGED))) return TCCALTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_DELETED))) return TCCALTABLE_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_NEW))) return TCCALTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DRAFT))) return TCCALTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_CHANGED))) return TCCALTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCCALTABLE_RECORDSTATUS_DELETED))) return TCCALTABLE_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCTxtCalTableStatusLength()) ? TCCALTABLE_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTCTxtCalTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TCCALTABLE_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TCCALTABLE_RECORDSTATUS_NEW) : STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TCCALTABLE_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TCCALTABLE_RECORDSTATUS_DRAFT) : STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TCCALTABLE_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TCCALTABLE_RECORDSTATUS_CHANGED) : STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TCCALTABLE_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TCCALTABLE_RECORDSTATUS_DELETED) : STRING(IDS_TCCALTABLE_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCNumOolTableName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTCNumOolTableNameLength());
}

INT CALTELDatabaseEngine::GetTCNumOolTableNameLength() CONST
{
	return 10;
}

BOOL CALTELDatabaseEngine::CheckTCNumOolTableCheckCount(INT nCount) CONST
{
	return TRUE;
}

BOOL CALTELDatabaseEngine::GetTCNumOolTableCheckCountRange(INT &nLow, INT &nHigh) CONST
{
	nLow = nHigh = 0;
	return TRUE;
}

INT CALTELDatabaseEngine::TranslateTCNumOolTableCheckCount(LPCTSTR pszCount) CONST
{
	return -1;
}
CString CALTELDatabaseEngine::TranslateTCNumOolTableCheckCount(INT nCount) CONST
{
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTCNumOolTableInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	nInterpretations.RemoveAll();
	szInterpretations.RemoveAll();
	nInterpretations.Add(TCOOLTABLE_CHECK_CALIBRATED);
	nInterpretations.Add(TCOOLTABLE_CHECK_RAW);
	szInterpretations.Add(STRING(IDS_TCOOLTABLE_TYPE_CALIBRATED));
	szInterpretations.Add(STRING(IDS_TCOOLTABLE_TYPE_RAW));
	return((INT)szInterpretations.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCNumOolTableInterpretation(UINT nInterpretation) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nInterpretation & (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CHECK_CALIBRATED))) == TCOOLTABLE_CHECK_RAW || nAttribute == TCOOLTABLE_CHECK_CALIBRATED) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCNumOolTableInterpretationLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateTCNumOolTableInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCOOLTABLE_TYPE_DBMS_CALIBRATED))) return TCOOLTABLE_CHECK_CALIBRATED;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCOOLTABLE_TYPE_DBMS_RAW))) return TCOOLTABLE_CHECK_RAW;
	}
	else
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCOOLTABLE_TYPE_CALIBRATED))) return TCOOLTABLE_CHECK_CALIBRATED;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCOOLTABLE_TYPE_RAW))) return TCOOLTABLE_CHECK_RAW;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCNumOolTableInterpretation(UINT nInterpretation, BOOL bDBMS) CONST
{
	if (nInterpretation & TCOOLTABLE_CHECK_CALIBRATED) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_TYPE_CALIBRATED) : STRING(IDS_TCOOLTABLE_TYPE_DBMS_CALIBRATED));
	if (nInterpretation & TCOOLTABLE_CHECK_RAW) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_TYPE_RAW) : STRING(IDS_TCOOLTABLE_TYPE_DBMS_RAW));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTCNumOolTableCodings(CStringArray &szCodings, CUIntArray &nCodings) CONST
{
	nCodings.RemoveAll();
	szCodings.RemoveAll();
	nCodings.Add(TCOOLTABLE_CODING_UNSIGNEDINTEGER);
	nCodings.Add(TCOOLTABLE_CODING_SIGNEDINTEGER);
	nCodings.Add(TCOOLTABLE_CODING_FLOATINGPOINT);
	szCodings.Add(STRING(IDS_TCOOLTABLE_CODING_UNSIGNEDINTEGER));
	szCodings.Add(STRING(IDS_TCOOLTABLE_CODING_SIGNEDINTEGER));
	szCodings.Add(STRING(IDS_TCOOLTABLE_CODING_FLOATINGPOINT));
	return((INT)szCodings.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCNumOolTableCoding(UINT nInterpretation, UINT nCoding) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nCoding & (TCOOLTABLE_CODING_UNSIGNEDINTEGER | TCOOLTABLE_CODING_SIGNEDINTEGER | TCOOLTABLE_CODING_FLOATINGPOINT | TCOOLTABLE_CODING_TEXTSTRING))) == TCOOLTABLE_CODING_UNSIGNEDINTEGER || nAttribute == TCOOLTABLE_CODING_SIGNEDINTEGER || nAttribute == TCOOLTABLE_CODING_FLOATINGPOINT || ((nInterpretation & TCOOLTABLE_CHECK_CALIBRATED) && !nAttribute)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCNumOolTableCodingLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateTCNumOolTableCoding(UINT nInterpretation, LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszCoding, STRING(IDS_TCOOLTABLE_CODING_DBMS_UNSIGNEDINTEGER))) return TCOOLTABLE_CODING_UNSIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TCOOLTABLE_CODING_DBMS_SIGNEDINTEGER))) return TCOOLTABLE_CODING_SIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TCOOLTABLE_CODING_DBMS_FLOATINGPOINT))) return TCOOLTABLE_CODING_FLOATINGPOINT;
	}
	else
	{
		if (!lstrcmp(pszCoding, STRING(IDS_TCOOLTABLE_CODING_UNSIGNEDINTEGER))) return TCOOLTABLE_CODING_UNSIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TCOOLTABLE_CODING_SIGNEDINTEGER))) return TCOOLTABLE_CODING_SIGNEDINTEGER;
		if (!lstrcmp(pszCoding, STRING(IDS_TCOOLTABLE_CODING_FLOATINGPOINT))) return TCOOLTABLE_CODING_FLOATINGPOINT;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCNumOolTableCoding(UINT nCoding, BOOL bDBMS) CONST
{
	if (nCoding & TCOOLTABLE_CODING_UNSIGNEDINTEGER) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_CODING_UNSIGNEDINTEGER) : STRING(IDS_TCOOLTABLE_CODING_DBMS_UNSIGNEDINTEGER));
	if (nCoding & TCOOLTABLE_CODING_SIGNEDINTEGER) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_CODING_SIGNEDINTEGER) : STRING(IDS_TCOOLTABLE_CODING_DBMS_SIGNEDINTEGER));
	if (nCoding & TCOOLTABLE_CODING_FLOATINGPOINT) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_CODING_FLOATINGPOINT) : STRING(IDS_TCOOLTABLE_CODING_DBMS_FLOATINGPOINT));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTCNumOolTableRadixes(CStringArray &szRadixes, CUIntArray &nRadixes) CONST
{
	nRadixes.RemoveAll();
	szRadixes.RemoveAll();
	nRadixes.Add(TCOOLTABLE_RADIX_BINARY);
	nRadixes.Add(TCOOLTABLE_RADIX_OCTAL);
	nRadixes.Add(TCOOLTABLE_RADIX_DECIMAL);
	nRadixes.Add(TCOOLTABLE_RADIX_HEXADECIMAL);
	szRadixes.Add(STRING(IDS_TCOOLTABLE_RADIX_BINARY));
	szRadixes.Add(STRING(IDS_TCOOLTABLE_RADIX_OCTAL));
	szRadixes.Add(STRING(IDS_TCOOLTABLE_RADIX_DECIMAL));
	szRadixes.Add(STRING(IDS_TCOOLTABLE_RADIX_HEXADECIMAL));
	return((INT)szRadixes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCNumOolTableRadix(UINT nInterpretation, UINT nCoding, UINT nRadix) CONST
{
	UINT  nAttribute;

	return(((((nAttribute = (nRadix & (TCOOLTABLE_RADIX_BINARY | TCOOLTABLE_RADIX_OCTAL | TCOOLTABLE_RADIX_DECIMAL | TCOOLTABLE_RADIX_HEXADECIMAL))) == TCOOLTABLE_RADIX_BINARY || nAttribute == TCOOLTABLE_RADIX_OCTAL || nAttribute == TCOOLTABLE_RADIX_HEXADECIMAL) && (nCoding & TCOOLTABLE_CODING_UNSIGNEDINTEGER)) || nAttribute == TCOOLTABLE_RADIX_DECIMAL || (((nInterpretation & TCOOLTABLE_CHECK_CALIBRATED) || (nInterpretation & (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CHECK_CALIBRATED)) == 0) && !nAttribute)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCNumOolTableRadixLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateTCNumOolTableRadix(UINT nInterpretation, LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_DBMS_BINARY))) return TCOOLTABLE_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_DBMS_OCTAL))) return TCOOLTABLE_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_DBMS_DECIMAL))) return TCOOLTABLE_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_DBMS_HEXADECIMAL))) return TCOOLTABLE_RADIX_HEXADECIMAL;
	}
	else
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_BINARY))) return TCOOLTABLE_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_OCTAL))) return TCOOLTABLE_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_DECIMAL))) return TCOOLTABLE_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_HEXADECIMAL))) return TCOOLTABLE_RADIX_HEXADECIMAL;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCNumOolTableRadix(UINT nRadix, BOOL bDBMS) CONST
{
	if (nRadix & TCOOLTABLE_RADIX_BINARY) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RADIX_BINARY) : STRING(IDS_TCOOLTABLE_RADIX_DBMS_BINARY));
	if (nRadix & TCOOLTABLE_RADIX_OCTAL) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RADIX_OCTAL) : STRING(IDS_TCOOLTABLE_RADIX_DBMS_OCTAL));
	if (nRadix & TCOOLTABLE_RADIX_DECIMAL) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RADIX_DECIMAL) : STRING(IDS_TCOOLTABLE_RADIX_DBMS_DECIMAL));
	if (nRadix & TCOOLTABLE_RADIX_HEXADECIMAL) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RADIX_HEXADECIMAL) : STRING(IDS_TCOOLTABLE_RADIX_DBMS_HEXADECIMAL));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTCNumOolTableLimitTypes(CStringArray &szLimitTypes, CUIntArray &nLimitTypes) CONST
{
	nLimitTypes.RemoveAll();
	szLimitTypes.RemoveAll();
	nLimitTypes.Add(TCOOLLIMIT_TYPE_SOFT);
	nLimitTypes.Add(TCOOLLIMIT_TYPE_HARD);
	szLimitTypes.Add(STRING(IDS_TCOOLTABLE_LIMIT_TYPE_SOFT));
	szLimitTypes.Add(STRING(IDS_TCOOLTABLE_LIMIT_TYPE_HARD));
	return((INT)szLimitTypes.GetSize());
}

INT CALTELDatabaseEngine::TranslateTCNumOolTableLimitType(LPCTSTR pszLimitType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszLimitType, STRING(IDS_TCOOLTABLE_LIMIT_TYPE_DBMS_SOFT))) return TCOOLLIMIT_TYPE_SOFT;
		if (!lstrcmp(pszLimitType, STRING(IDS_TCOOLTABLE_LIMIT_TYPE_DBMS_HARD))) return TCOOLLIMIT_TYPE_HARD;
	}
	else
	{
		if (!lstrcmp(pszLimitType, STRING(IDS_TCOOLTABLE_LIMIT_TYPE_SOFT))) return TCOOLLIMIT_TYPE_SOFT;
		if (!lstrcmp(pszLimitType, STRING(IDS_TCOOLTABLE_LIMIT_TYPE_HARD))) return TCOOLLIMIT_TYPE_HARD;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCNumOolTableLimitType(INT nLimitType, BOOL bDBMS) CONST
{
	if (nLimitType == TCOOLLIMIT_TYPE_SOFT) return((bDBMS) ? STRING(IDS_TCOOLTABLE_LIMIT_TYPE_DBMS_SOFT) : STRING(IDS_TCOOLTABLE_LIMIT_TYPE_SOFT));
	if (nLimitType == TCOOLLIMIT_TYPE_HARD) return((bDBMS) ? STRING(IDS_TCOOLTABLE_LIMIT_TYPE_DBMS_HARD) : STRING(IDS_TCOOLTABLE_LIMIT_TYPE_HARD));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCNumOolTableLimitOrder(INT nOrder) CONST
{
	return((nOrder > 0) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCNumOolTableLimitCount(UINT nAttributes) CONST
{
	return 16;
}

BOOL CALTELDatabaseEngine::CheckTCNumOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	INT  nPos;
	LPTSTR  pszNumberPos;
	CString  szNumber[1];
	CStringTools  cStringTools;

	if ((nAttributes & (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_RADIX_HEXADECIMAL)) == (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_RADIX_HEXADECIMAL))
	{
		for (SkipSpaces(pszLimit, (nPos = 0)); pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE); )
		{
			nPos += lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE));
			break;
		}
		for (nPos += (pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_HEX)) ? lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_HEX)) : 0; nPos < lstrlen(pszLimit); nPos++)
		{
			if (_istxdigit(pszLimit[nPos])) continue;
			break;
		}
		return((SkipSpaces(pszLimit, nPos) == lstrlen(pszLimit) && lstrlen(pszLimit) > 0) ? TRUE : FALSE);
	}
	if ((nAttributes & (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CODING_FLOATINGPOINT)) == (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CODING_FLOATINGPOINT) || (nAttributes & TCOOLTABLE_CHECK_CALIBRATED))
	{
		_tcstod(pszLimit, &pszNumberPos);
		return((SkipSpaces(pszLimit, (nPos = lstrlen(pszLimit) - lstrlen(pszNumberPos))) == lstrlen(pszLimit) && lstrlen(pszLimit) > 0) ? TRUE : FALSE);
	}
	for (SkipSpaces(pszLimit, (nPos = 0)); pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE) || ((nAttributes & TCOOLTABLE_CODING_SIGNEDINTEGER) && pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE)); )
	{
		nPos += (pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE)) ? lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE)) : lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE));
		break;
	}
	for (szNumber[0] = cStringTools.ConvertIntToString(0); nPos < lstrlen(pszLimit); nPos++)
	{
		if (((nAttributes & TCOOLTABLE_RADIX_BINARY) && pszLimit[nPos] - __toascii(szNumber[0][0]) >= 0 && pszLimit[nPos] - __toascii(szNumber[0][0]) < 2) || ((nAttributes & TCOOLTABLE_RADIX_OCTAL) && pszLimit[nPos] - __toascii(szNumber[0][0]) >= 0 && pszLimit[nPos] - __toascii(szNumber[0][0]) < 8) || ((nAttributes & TCOOLTABLE_RADIX_DECIMAL) && _istdigit(pszLimit[nPos]))) continue;
		break;
	}
	return((SkipSpaces(pszLimit, nPos) == lstrlen(pszLimit) && lstrlen(pszLimit) > 0) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCNumOolTableLimitValueLength() CONST
{
	return 32;
}

double CALTELDatabaseEngine::TranslateTCNumOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	INT  nPos;
	BOOL  bValue;
	TCHAR  szDigit;
	double  fValue;
	LPTSTR  pszNumberPos;
	CString  szNumber[4];
	CStringTools  cStringTools;

	if (nAttributes & TCOOLTABLE_CHECK_RAW)
	{
		if (nAttributes & TCOOLTABLE_RADIX_HEXADECIMAL)
		{
			for (SkipSpaces(pszLimit, (nPos = 0)), bValue = FALSE; pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE) || pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE); )
			{
				if (pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE))
				{
					nPos += lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE));
					break;
				}
				nPos += lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE));
				bValue = TRUE;
				break;
			}
			for (nPos += (pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_HEX)) ? lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_HEX)) : 0, szNumber[0] = cStringTools.ConvertIntToString(0), szNumber[1] = szNumber[2] = cStringTools.ConvertIntToString(10, 16), szNumber[2].MakeLower(), fValue = 0.0; nPos < lstrlen(pszLimit); nPos++)
			{
				if (_istdigit((szNumber[3] = szDigit = pszLimit[nPos]).GetAt(0)))
				{
					fValue = 16.0*fValue + szDigit - __toascii(szNumber[0][0]);
					continue;
				}
				if (_istxdigit(szDigit))
				{
					fValue = (_istupper(szDigit)) ? (16.0*fValue + szDigit - __toascii(szNumber[1][0]) + 10) : (16.0*fValue + szDigit - __toascii(szNumber[2][0]) + 10);
					continue;
				}
				break;
			}
			return((bValue) ? -fValue : fValue);
		}
		if (nAttributes & TCOOLTABLE_RADIX_OCTAL)
		{
			for (SkipSpaces(pszLimit, (nPos = 0)), bValue = FALSE; pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE) || pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE); )
			{
				if (pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE))
				{
					nPos += lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE));
					break;
				}
				nPos += lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE));
				bValue = TRUE;
				break;
			}
			for (szNumber[0] = cStringTools.ConvertIntToString(0), fValue = 0.0; nPos < lstrlen(pszLimit); nPos++)
			{
				if ((szDigit = pszLimit[nPos]) >= szNumber[0][0] && szDigit - __toascii(szNumber[0][0]) < 8)
				{
					fValue = 8.0*fValue + szDigit - __toascii(szNumber[0][0]);
					continue;
				}
				break;
			}
			return((bValue) ? -fValue : fValue);
		}
		if (nAttributes & TCOOLTABLE_RADIX_BINARY)
		{
			for (SkipSpaces(pszLimit, (nPos = 0)), bValue = FALSE; pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE) || pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE); )
			{
				if (pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE))
				{
					nPos += lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE));
					break;
				}
				nPos += lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE));
				bValue = TRUE;
				break;
			}
			for (szNumber[0] = cStringTools.ConvertIntToString(0), fValue = 0.0; nPos < lstrlen(pszLimit); nPos++)
			{
				if ((szDigit = pszLimit[nPos]) >= szNumber[0][0] && szDigit - __toascii(szNumber[0][0]) < 2)
				{
					fValue = 2.0*fValue + szDigit - __toascii(szNumber[0][0]);
					continue;
				}
				break;
			}
			return((bValue) ? -fValue : fValue);
		}
	}
	return _tcstod(pszLimit, &pszNumberPos);
}
CString CALTELDatabaseEngine::TranslateTCNumOolTableLimitValue(UINT nAttributes, double fLimit) CONST
{
	INT  nRadix;
	CStringTools  cStringTools;

	for (nRadix = (nAttributes & TCOOLTABLE_RADIX_HEXADECIMAL) ? 16 : 10, nRadix = (nAttributes & TCOOLTABLE_RADIX_OCTAL) ? 8 : nRadix, nRadix = (nAttributes & TCOOLTABLE_RADIX_BINARY) ? 2 : nRadix; (nAttributes & TCOOLTABLE_CODING_FLOATINGPOINT) || (nAttributes & TCOOLTABLE_CHECK_CALIBRATED); ) return cStringTools.ConvertFloatToString(fLimit);
	if (nAttributes & TCOOLTABLE_CODING_UNSIGNEDINTEGER) return cStringTools.ConvertLongUIntToString((ULONGLONG)fLimit, nRadix);
	if (nAttributes & TCOOLTABLE_CODING_SIGNEDINTEGER) return cStringTools.ConvertLongIntToString((LONGLONG)fLimit, nRadix);
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTCNumOolTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TCOOLTABLE_RECORDSTATUS_NEW);
	nStatus.Add(TCOOLTABLE_RECORDSTATUS_DRAFT);
	nStatus.Add(TCOOLTABLE_RECORDSTATUS_CHANGED);
	nStatus.Add(TCOOLTABLE_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TCOOLTABLE_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TCOOLTABLE_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TCOOLTABLE_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TCOOLTABLE_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCNumOolTableStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCNumOolTableStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCNumOolTableStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTCNumOolTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_NEW))) return TCOOLTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_DRAFT))) return TCOOLTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_CHANGED))) return TCOOLTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_DELETED))) return TCOOLTABLE_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_NEW))) return TCOOLTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DRAFT))) return TCOOLTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_CHANGED))) return TCOOLTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DELETED))) return TCOOLTABLE_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCNumOolTableStatusLength()) ? TCOOLTABLE_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTCNumOolTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TCOOLTABLE_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RECORDSTATUS_NEW) : STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TCOOLTABLE_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RECORDSTATUS_DRAFT) : STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TCOOLTABLE_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RECORDSTATUS_CHANGED) : STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TCOOLTABLE_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RECORDSTATUS_DELETED) : STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCTxtOolTableName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTCTxtOolTableNameLength());
}

INT CALTELDatabaseEngine::GetTCTxtOolTableNameLength() CONST
{
	return 10;
}

BOOL CALTELDatabaseEngine::CheckTCTxtOolTableCheckCount(INT nCount) CONST
{
	return TRUE;
}

BOOL CALTELDatabaseEngine::GetTCTxtOolTableCheckCountRange(INT &nLow, INT &nHigh) CONST
{
	nLow = nHigh = 0;
	return TRUE;
}

INT CALTELDatabaseEngine::TranslateTCTxtOolTableCheckCount(LPCTSTR pszCount) CONST
{
	return -1;
}
CString CALTELDatabaseEngine::TranslateTCTxtOolTableCheckCount(INT nCount) CONST
{
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTCTxtOolTableInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	nInterpretations.RemoveAll();
	szInterpretations.RemoveAll();
	nInterpretations.Add(TCOOLTABLE_CHECK_CALIBRATED);
	nInterpretations.Add(TCOOLTABLE_CHECK_RAW);
	szInterpretations.Add(STRING(IDS_TCOOLTABLE_TYPE_CALIBRATED));
	szInterpretations.Add(STRING(IDS_TCOOLTABLE_TYPE_RAW));
	return((INT)szInterpretations.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCTxtOolTableInterpretation(UINT nInterpretation) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nInterpretation & (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CHECK_CALIBRATED))) == TCOOLTABLE_CHECK_RAW || nAttribute == TCOOLTABLE_CHECK_CALIBRATED) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCTxtOolTableInterpretationLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateTCTxtOolTableInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCOOLTABLE_TYPE_DBMS_CALIBRATED))) return TCOOLTABLE_CHECK_CALIBRATED;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCOOLTABLE_TYPE_DBMS_RAW))) return TCOOLTABLE_CHECK_RAW;
	}
	else
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCOOLTABLE_TYPE_CALIBRATED))) return TCOOLTABLE_CHECK_CALIBRATED;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCOOLTABLE_TYPE_RAW))) return TCOOLTABLE_CHECK_RAW;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCTxtOolTableInterpretation(UINT nInterpretation, BOOL bDBMS) CONST
{
	if (nInterpretation & TCOOLTABLE_CHECK_CALIBRATED) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_TYPE_CALIBRATED) : STRING(IDS_TCOOLTABLE_TYPE_DBMS_CALIBRATED));
	if (nInterpretation & TCOOLTABLE_CHECK_RAW) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_TYPE_RAW) : STRING(IDS_TCOOLTABLE_TYPE_DBMS_RAW));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTCTxtOolTableRadixes(CStringArray &szRadixes, CUIntArray &nRadixes) CONST
{
	nRadixes.RemoveAll();
	szRadixes.RemoveAll();
	nRadixes.Add(TCOOLTABLE_RADIX_BINARY);
	nRadixes.Add(TCOOLTABLE_RADIX_OCTAL);
	nRadixes.Add(TCOOLTABLE_RADIX_DECIMAL);
	nRadixes.Add(TCOOLTABLE_RADIX_HEXADECIMAL);
	szRadixes.Add(STRING(IDS_TCOOLTABLE_RADIX_BINARY));
	szRadixes.Add(STRING(IDS_TCOOLTABLE_RADIX_OCTAL));
	szRadixes.Add(STRING(IDS_TCOOLTABLE_RADIX_DECIMAL));
	szRadixes.Add(STRING(IDS_TCOOLTABLE_RADIX_HEXADECIMAL));
	return((INT)szRadixes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCTxtOolTableRadix(UINT nInterpretation, UINT nCoding, UINT nRadix) CONST
{
	UINT  nAttribute;

	return(((((nAttribute = (nRadix & (TCOOLTABLE_RADIX_BINARY | TCOOLTABLE_RADIX_OCTAL | TCOOLTABLE_RADIX_DECIMAL | TCOOLTABLE_RADIX_HEXADECIMAL))) == TCOOLTABLE_RADIX_BINARY || nAttribute == TCOOLTABLE_RADIX_OCTAL || nAttribute == TCOOLTABLE_RADIX_HEXADECIMAL) && (nCoding & TCOOLTABLE_CODING_UNSIGNEDINTEGER)) || nAttribute == TCOOLTABLE_RADIX_DECIMAL || (((nInterpretation & TCOOLTABLE_CHECK_CALIBRATED) || (nInterpretation & (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CHECK_CALIBRATED)) == 0) && !nAttribute)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCTxtOolTableRadixLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateTCTxtOolTableRadix(UINT nInterpretation, LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_DBMS_BINARY))) return TCOOLTABLE_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_DBMS_OCTAL))) return TCOOLTABLE_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_DBMS_DECIMAL))) return TCOOLTABLE_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_DBMS_HEXADECIMAL))) return TCOOLTABLE_RADIX_HEXADECIMAL;
	}
	else
	{
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_BINARY))) return TCOOLTABLE_RADIX_BINARY;
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_OCTAL))) return TCOOLTABLE_RADIX_OCTAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_DECIMAL))) return TCOOLTABLE_RADIX_DECIMAL;
		if (!lstrcmp(pszRadix, STRING(IDS_TCOOLTABLE_RADIX_HEXADECIMAL))) return TCOOLTABLE_RADIX_HEXADECIMAL;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCTxtOolTableRadix(UINT nRadix, BOOL bDBMS) CONST
{
	if (nRadix & TCOOLTABLE_RADIX_BINARY) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RADIX_BINARY) : STRING(IDS_TCOOLTABLE_RADIX_DBMS_BINARY));
	if (nRadix & TCOOLTABLE_RADIX_OCTAL) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RADIX_OCTAL) : STRING(IDS_TCOOLTABLE_RADIX_DBMS_OCTAL));
	if (nRadix & TCOOLTABLE_RADIX_DECIMAL) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RADIX_DECIMAL) : STRING(IDS_TCOOLTABLE_RADIX_DBMS_DECIMAL));
	if (nRadix & TCOOLTABLE_RADIX_HEXADECIMAL) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RADIX_HEXADECIMAL) : STRING(IDS_TCOOLTABLE_RADIX_DBMS_HEXADECIMAL));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTCTxtOolTableLimitTypes(CStringArray &szLimitTypes, CUIntArray &nLimitTypes) CONST
{
	nLimitTypes.RemoveAll();
	szLimitTypes.RemoveAll();
	nLimitTypes.Add(TCOOLLIMIT_TYPE_HARD);
	szLimitTypes.Add(STRING(IDS_TCOOLTABLE_LIMIT_TYPE_HARD));
	return((INT)szLimitTypes.GetSize());
}

INT CALTELDatabaseEngine::TranslateTCTxtOolTableLimitType(LPCTSTR pszLimitType, BOOL bDBMS) CONST
{
	return(((bDBMS  &&  !lstrcmp(pszLimitType, STRING(IDS_TCOOLTABLE_LIMIT_TYPE_DBMS_HARD))) || (!bDBMS  &&  !lstrcmp(pszLimitType, STRING(IDS_TCOOLTABLE_LIMIT_TYPE_HARD)))) ? TCOOLLIMIT_TYPE_HARD : 0);
}
CString CALTELDatabaseEngine::TranslateTCTxtOolTableLimitType(INT nLimitType, BOOL bDBMS) CONST
{
	return((nLimitType == TMOOLLIMIT_TYPE_HARD) ? ((bDBMS) ? STRING(IDS_TMOOLTABLE_LIMIT_TYPE_DBMS_HARD) : STRING(IDS_TMOOLTABLE_LIMIT_TYPE_HARD)) : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTCTxtOolTableLimitOrder(INT nOrder) CONST
{
	return((nOrder > 0) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCTxtOolTableLimitCount(UINT nAttributes) CONST
{
	return 16;
}

BOOL CALTELDatabaseEngine::CheckTCTxtOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	INT  nPos;
	LPTSTR  pszNumberPos;
	CString  szNumber[1];
	CStringTools  cStringTools;

	if ((nAttributes & (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_RADIX_HEXADECIMAL)) == (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_RADIX_HEXADECIMAL))
	{
		for (SkipSpaces(pszLimit, (nPos = 0)); pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE); )
		{
			nPos += lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE));
			break;
		}
		for (nPos += (pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_HEX)) ? lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_HEX)) : 0; nPos < lstrlen(pszLimit); nPos++)
		{
			if (_istxdigit(pszLimit[nPos])) continue;
			break;
		}
		return((SkipSpaces(pszLimit, nPos) == lstrlen(pszLimit) && lstrlen(pszLimit) > 0) ? TRUE : FALSE);
	}
	if ((nAttributes & (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CODING_FLOATINGPOINT)) == (TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CODING_FLOATINGPOINT))
	{
		_tcstod(pszLimit, &pszNumberPos);
		return((SkipSpaces(pszLimit, (nPos = lstrlen(pszLimit) - lstrlen(pszNumberPos))) == lstrlen(pszLimit) && lstrlen(pszLimit) > 0) ? TRUE : FALSE);
	}
	if (nAttributes & TCOOLTABLE_CHECK_RAW)
	{
		for (SkipSpaces(pszLimit, (nPos = 0)); pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE) || ((nAttributes & TCOOLTABLE_CODING_SIGNEDINTEGER) && pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE)); )
		{
			nPos += (pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE)) ? lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE)) : lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE));
			break;
		}
		for (szNumber[0] = cStringTools.ConvertIntToString(0); nPos < lstrlen(pszLimit); nPos++)
		{
			if (((nAttributes & TCOOLTABLE_RADIX_BINARY) && pszLimit[nPos] - __toascii(szNumber[0][0]) >= 0 && pszLimit[nPos] - __toascii(szNumber[0][0]) < 2) || ((nAttributes & TCOOLTABLE_RADIX_OCTAL) && pszLimit[nPos] - __toascii(szNumber[0][0]) >= 0 && pszLimit[nPos] - __toascii(szNumber[0][0]) < 8) || ((nAttributes & TCOOLTABLE_RADIX_DECIMAL) && _istdigit(pszLimit[nPos]))) continue;
			break;
		}
		return((SkipSpaces(pszLimit, nPos) == lstrlen(pszLimit) && lstrlen(pszLimit) > 0) ? TRUE : FALSE);
	}
	return(((nAttributes & TCOOLTABLE_CHECK_CALIBRATED) && lstrlen(pszLimit) > 0) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCTxtOolTableLimitValueLength() CONST
{
	return 12;
}

double CALTELDatabaseEngine::TranslateTCTxtOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	INT  nPos;
	BOOL  bValue;
	TCHAR  szDigit;
	double  fValue;
	LPTSTR  pszNumberPos;
	CString  szNumber[4];
	CStringTools  cStringTools;

	if (nAttributes & TCOOLTABLE_CHECK_RAW)
	{
		if (nAttributes & TCOOLTABLE_RADIX_HEXADECIMAL)
		{
			for (SkipSpaces(pszLimit, (nPos = 0)), bValue = FALSE; pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE) || pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE); )
			{
				if (pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE))
				{
					nPos += lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE));
					break;
				}
				nPos += lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE));
				bValue = TRUE;
				break;
			}
			for (nPos += (pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_HEX)) ? lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_HEX)) : 0, szNumber[0] = cStringTools.ConvertIntToString(0), szNumber[1] = szNumber[2] = cStringTools.ConvertIntToString(10, 16), szNumber[2].MakeLower(), fValue = 0.0; nPos < lstrlen(pszLimit); nPos++)
			{
				if (_istdigit((szNumber[3] = szDigit = pszLimit[nPos]).GetAt(0)))
				{
					fValue = 16.0*fValue + szDigit - __toascii(szNumber[0][0]);
					continue;
				}
				if (_istxdigit(szDigit))
				{
					fValue = (_istupper(szDigit)) ? (16.0*fValue + szDigit - __toascii(szNumber[1][0]) + 10) : (16.0*fValue + szDigit - __toascii(szNumber[2][0]) + 10);
					continue;
				}
				break;
			}
			return((bValue) ? -fValue : fValue);
		}
		if (nAttributes & TCOOLTABLE_RADIX_OCTAL)
		{
			for (SkipSpaces(pszLimit, (nPos = 0)), bValue = FALSE; pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE) || pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE); )
			{
				if (pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE))
				{
					nPos += lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE));
					break;
				}
				nPos += lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE));
				bValue = TRUE;
				break;
			}
			for (szNumber[0] = cStringTools.ConvertIntToString(0), fValue = 0.0; nPos < lstrlen(pszLimit); nPos++)
			{
				if ((szDigit = pszLimit[nPos]) >= szNumber[0][0] && szDigit - __toascii(szNumber[0][0]) < 8)
				{
					fValue = 8.0*fValue + szDigit - __toascii(szNumber[0][0]);
					continue;
				}
				break;
			}
			return((bValue) ? -fValue : fValue);
		}
		if (nAttributes & TCOOLTABLE_RADIX_BINARY)
		{
			for (SkipSpaces(pszLimit, (nPos = 0)), bValue = FALSE; pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE) || pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE); )
			{
				if (pszLimit[nPos] == STRINGCHAR(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE))
				{
					nPos += lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_POSITIVE));
					break;
				}
				nPos += lstrlen(STRING(IDS_TCOOLTABLE_LIMIT_PREFIX_NEGATIVE));
				bValue = TRUE;
				break;
			}
			for (szNumber[0] = cStringTools.ConvertIntToString(0), fValue = 0.0; nPos < lstrlen(pszLimit); nPos++)
			{
				if ((szDigit = pszLimit[nPos]) >= szNumber[0][0] && szDigit - __toascii(szNumber[0][0]) < 2)
				{
					fValue = 2.0*fValue + szDigit - __toascii(szNumber[0][0]);
					continue;
				}
				break;
			}
			return((bValue) ? -fValue : fValue);
		}
		return _tcstod(pszLimit, &pszNumberPos);
	}
	return 0.0;
}
CString CALTELDatabaseEngine::TranslateTCTxtOolTableLimitValue(UINT nAttributes, double fLimit) CONST
{
	INT  nRadix;
	CStringTools  cStringTools;

	for (nRadix = (nAttributes & TCOOLTABLE_RADIX_HEXADECIMAL) ? 16 : 10, nRadix = (nAttributes & TCOOLTABLE_RADIX_OCTAL) ? 8 : nRadix, nRadix = (nAttributes & TCOOLTABLE_RADIX_BINARY) ? 2 : nRadix; nAttributes & TCOOLTABLE_CHECK_CALIBRATED; ) return cStringTools.ConvertFloatToString(fLimit);
	if (nRadix != 10) return cStringTools.ConvertLongUIntToString((ULONGLONG)fLimit, nRadix);
	return cStringTools.ConvertLongIntToString((LONGLONG)fLimit);
}

INT CALTELDatabaseEngine::EnumTCTxtOolTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TCOOLTABLE_RECORDSTATUS_NEW);
	nStatus.Add(TCOOLTABLE_RECORDSTATUS_DRAFT);
	nStatus.Add(TCOOLTABLE_RECORDSTATUS_CHANGED);
	nStatus.Add(TCOOLTABLE_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TCOOLTABLE_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TCOOLTABLE_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TCOOLTABLE_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TCOOLTABLE_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCTxtOolTableStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCTxtOolTableStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCTxtOolTableStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTCTxtOolTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_NEW))) return TCOOLTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_DRAFT))) return TCOOLTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_CHANGED))) return TCOOLTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_DELETED))) return TCOOLTABLE_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_NEW))) return TCOOLTABLE_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DRAFT))) return TCOOLTABLE_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_CHANGED))) return TCOOLTABLE_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCOOLTABLE_RECORDSTATUS_DELETED))) return TCOOLTABLE_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCTxtOolTableStatusLength()) ? TCOOLTABLE_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTCTxtOolTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TCOOLTABLE_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RECORDSTATUS_NEW) : STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TCOOLTABLE_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RECORDSTATUS_DRAFT) : STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TCOOLTABLE_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RECORDSTATUS_CHANGED) : STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TCOOLTABLE_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TCOOLTABLE_RECORDSTATUS_DELETED) : STRING(IDS_TCOOLTABLE_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCPreExeGroupID(LPCTSTR pszID) CONST
{
	return CheckTag(pszID, GetTCPreExeGroupIDLength());
}

INT CALTELDatabaseEngine::GetTCPreExeGroupIDLength() CONST
{
	return 12;
}

BOOL CALTELDatabaseEngine::CheckTCPreExeGroupDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) >= 0 && lstrlen(pszDescription) <= GetTCPreExeGroupDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCPreExeGroupDescriptionLength() CONST
{
	return 255;
}

INT CALTELDatabaseEngine::EnumTCPreExeGroupStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TCPREEXEGROUP_RECORDSTATUS_NEW);
	nStatus.Add(TCPREEXEGROUP_RECORDSTATUS_DRAFT);
	nStatus.Add(TCPREEXEGROUP_RECORDSTATUS_CHANGED);
	nStatus.Add(TCPREEXEGROUP_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCPreExeGroupStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCPreExeGroupStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCPreExeGroupStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTCPreExeGroupStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DBMS_NEW))) return TCPREEXEGROUP_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DBMS_DRAFT))) return TCPREEXEGROUP_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DBMS_CHANGED))) return TCPREEXEGROUP_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DBMS_DELETED))) return TCPREEXEGROUP_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_NEW))) return TCPREEXEGROUP_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DRAFT))) return TCPREEXEGROUP_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_CHANGED))) return TCPREEXEGROUP_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DELETED))) return TCPREEXEGROUP_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCPreExeGroupStatusLength()) ? TCPREEXEGROUP_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTCPreExeGroupStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TCPREEXEGROUP_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_NEW) : STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TCPREEXEGROUP_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DRAFT) : STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TCPREEXEGROUP_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_CHANGED) : STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TCPREEXEGROUP_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DELETED) : STRING(IDS_TCPREEXEGROUP_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCPreExeGroupParameterTag(LPCTSTR pszTag) CONST
{
	return CheckTMParameterTag(pszTag);
}

INT CALTELDatabaseEngine::GetTCPreExeGroupParameterTagLength() CONST
{
	return GetTMParameterTagLength();
}

INT CALTELDatabaseEngine::EnumTCPreExeGroupParameterInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	nInterpretations.RemoveAll();
	szInterpretations.RemoveAll();
	nInterpretations.Add(TCPREEXEGROUPPARAMETER_INTERPRETATION_RAW);
	nInterpretations.Add(TCPREEXEGROUPPARAMETER_INTERPRETATION_CALIBRATED);
	szInterpretations.Add(STRING(IDS_TCPREEXEGROUPPARAMETER_INTERPRETATION_RAW));
	szInterpretations.Add(STRING(IDS_TCPREEXEGROUPPARAMETER_INTERPRETATION_CALIBRATED));
	return((INT)szInterpretations.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCPreExeGroupParameterInterpretation(UINT nInterpretation) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nInterpretation & (TCPREEXEGROUPPARAMETER_INTERPRETATION_RAW | TCPREEXEGROUPPARAMETER_INTERPRETATION_CALIBRATED))) == TCPREEXEGROUPPARAMETER_INTERPRETATION_RAW || nAttribute == TCPREEXEGROUPPARAMETER_INTERPRETATION_CALIBRATED) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCPreExeGroupParameterInterpretationLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateTCPreExeGroupParameterInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPREEXEGROUPPARAMETER_INTERPRETATION_DBMS_RAW)) || !lstrlen(pszInterpretation)) return TCPREEXEGROUPPARAMETER_INTERPRETATION_RAW;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPREEXEGROUPPARAMETER_INTERPRETATION_DBMS_CALIBRATED))) return TCPREEXEGROUPPARAMETER_INTERPRETATION_CALIBRATED;
	}
	else
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPREEXEGROUPPARAMETER_INTERPRETATION_RAW))) return TCPREEXEGROUPPARAMETER_INTERPRETATION_RAW;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCPREEXEGROUPPARAMETER_INTERPRETATION_CALIBRATED))) return TCPREEXEGROUPPARAMETER_INTERPRETATION_CALIBRATED;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCPreExeGroupParameterInterpretation(UINT nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCPREEXEGROUPPARAMETER_INTERPRETATION_RAW) return((!bDBMS) ? STRING(IDS_TCPREEXEGROUPPARAMETER_INTERPRETATION_RAW) : STRING(IDS_TCPREEXEGROUPPARAMETER_INTERPRETATION_DBMS_RAW));
	if (nAttributes & TCPREEXEGROUPPARAMETER_INTERPRETATION_CALIBRATED) return((!bDBMS) ? STRING(IDS_TCPREEXEGROUPPARAMETER_INTERPRETATION_CALIBRATED) : STRING(IDS_TCPREEXEGROUPPARAMETER_INTERPRETATION_DBMS_CALIBRATED));
	return((bDBMS) ? STRING(IDS_TCPREEXEGROUPPARAMETER_INTERPRETATION_DBMS_RAW) : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckTCPreExeGroupParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszValue) CONST
{
	BOOL  bSign;
	double  fValue;
	ULONGLONG  nValue;

	if ((nAttributes & (TMPARAMETER_CODING_TEXTSTRING | TMPARAMETER_CALIBRATION_STATUS)) == 0)
	{
		if ((nAttributes & TMPARAMETER_CALIBRATION_NUMERICAL) == 0)
		{
			if (nAttributes & TMPARAMETER_CODING_UNSIGNEDINTEGER)
			{
				if (nAttributes & TMPARAMETER_RADIX_BINARY) return(ParseValue(pszValue, 2, nValue, bSign) && !bSign);
				if (nAttributes & TMPARAMETER_RADIX_OCTAL) return(ParseValue(pszValue, 8, nValue, bSign) && !bSign);
				if (nAttributes & TMPARAMETER_RADIX_HEXADECIMAL) return(ParseValue(pszValue, 16, nValue, bSign) && !bSign);
				return(ParseValue(pszValue, 10, nValue, bSign) && !bSign);
			}
			if (nAttributes & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN)) return(ParseValue(pszValue, 2, nValue, bSign) && !bSign);
			if (nAttributes & (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX)) return ParseValue(pszValue, 10, nValue, bSign);
		}
		return((nAttributes & (TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_CALIBRATION_NUMERICAL)) ? ParseValue(pszValue, fValue) : FALSE);
	}
	return TRUE;
}

INT CALTELDatabaseEngine::GetTCPreExeGroupParameterConstValueLength() CONST
{
	return 17;
}

double CALTELDatabaseEngine::TranslateTCPreExeGroupParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszValue) CONST
{
	BOOL  bSign;
	double  fValue;
	ULONGLONG  nValue;

	if ((nAttributes & (TMPARAMETER_CODING_TEXTSTRING | TMPARAMETER_CALIBRATION_STATUS)) == 0)
	{
		if ((nAttributes & TMPARAMETER_CALIBRATION_NUMERICAL) == 0)
		{
			if (nAttributes & TMPARAMETER_CODING_UNSIGNEDINTEGER)
			{
				if (nAttributes & TMPARAMETER_RADIX_BINARY) return((ParseValue(pszValue, 2, nValue, bSign)) ? ((bSign) ? -(double)nValue : (double)nValue) : 0.0);
				if (nAttributes & TMPARAMETER_RADIX_OCTAL) return((ParseValue(pszValue, 8, nValue, bSign)) ? ((bSign) ? -(double)nValue : (double)nValue) : 0.0);
				if (nAttributes & TMPARAMETER_RADIX_HEXADECIMAL) return((ParseValue(pszValue, 16, nValue, bSign)) ? ((bSign) ? -(double)nValue : (double)nValue) : 0.0);
				return((ParseValue(pszValue, 10, nValue, bSign)) ? ((bSign) ? -(double)nValue : (double)nValue) : 0.0);
			}
			if (nAttributes & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN)) return((ParseValue(pszValue, 2, nValue, bSign)) ? ((bSign) ? -(double)nValue : (double)nValue) : 0.0);
			if (nAttributes & (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX)) return((ParseValue(pszValue, 10, nValue, bSign)) ? ((bSign) ? -(double)nValue : (double)nValue) : 0.0);
		}
		return((nAttributes & (TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_CALIBRATION_NUMERICAL)) ? ((ParseValue(pszValue, fValue)) ? fValue : 0.0) : 0.0);
	}
	return 0.0;
}
CString CALTELDatabaseEngine::TranslateTCPreExeGroupParameterConstValue(ULONGLONG nAttributes, double fValue) CONST
{
	CStringTools  cStringTools;

	if ((nAttributes & (TMPARAMETER_CODING_TEXTSTRING | TMPARAMETER_CALIBRATION_STATUS)) == 0)
	{
		if ((nAttributes & TMPARAMETER_CALIBRATION_NUMERICAL) == 0)
		{
			if (nAttributes & TMPARAMETER_CODING_UNSIGNEDINTEGER)
			{
				if (nAttributes & TMPARAMETER_RADIX_BINARY) return cStringTools.ConvertLongUIntToString((ULONGLONG)fValue, 2);
				if (nAttributes & TMPARAMETER_RADIX_OCTAL) return cStringTools.ConvertLongUIntToString((ULONGLONG)fValue, 8);
				if (nAttributes & TMPARAMETER_RADIX_HEXADECIMAL) return cStringTools.ConvertLongUIntToString((ULONGLONG)fValue, 16);
				return cStringTools.ConvertLongUIntToString((ULONGLONG)fValue);
			}
			if (nAttributes & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN)) return cStringTools.ConvertLongUIntToString((ULONGLONG)fValue, 2);
			if (nAttributes & (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX)) return cStringTools.ConvertLongIntToString((LONGLONG)fValue);
		}
		return((nAttributes & (TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_CALIBRATION_NUMERICAL)) ? cStringTools.ConvertFloatToString(fValue) : EMPTYSTRING);
	}
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCExeVerGroupID(LPCTSTR pszID) CONST
{
	return CheckTag(pszID, GetTCExeVerGroupIDLength());
}

INT CALTELDatabaseEngine::GetTCExeVerGroupIDLength() CONST
{
	return 12;
}

BOOL CALTELDatabaseEngine::CheckTCExeVerGroupName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTCExeVerGroupNameLength());
}

INT CALTELDatabaseEngine::GetTCExeVerGroupNameLength() CONST
{
	return 32;
}

BOOL CALTELDatabaseEngine::CheckTCExeVerGroupDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) >= 0 && lstrlen(pszDescription) <= GetTCExeVerGroupDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCExeVerGroupDescriptionLength() CONST
{
	return 255;
}

BOOL CALTELDatabaseEngine::CheckTCExeVerGroupStages(INT nStages) CONST
{
	INT  nRange[2];

	return((GetTCExeVerGroupStagesRange(nRange[0], nRange[1]) && nStages >= nRange[0] && nStages <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCExeVerGroupStagesRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 1;
	nHigh = 256;
	return TRUE;
}

INT CALTELDatabaseEngine::EnumTCExeVerGroupStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TCEXEVERGROUP_RECORDSTATUS_NEW);
	nStatus.Add(TCEXEVERGROUP_RECORDSTATUS_DRAFT);
	nStatus.Add(TCEXEVERGROUP_RECORDSTATUS_CHANGED);
	nStatus.Add(TCEXEVERGROUP_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCExeVerGroupStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCExeVerGroupStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCExeVerGroupStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTCExeVerGroupStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DBMS_NEW))) return TCEXEVERGROUP_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DBMS_DRAFT))) return TCEXEVERGROUP_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DBMS_CHANGED))) return TCEXEVERGROUP_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DBMS_DELETED))) return TCEXEVERGROUP_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_NEW))) return TCEXEVERGROUP_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DRAFT))) return TCEXEVERGROUP_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_CHANGED))) return TCEXEVERGROUP_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DELETED))) return TCEXEVERGROUP_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCExeVerGroupStatusLength()) ? TCEXEVERGROUP_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTCExeVerGroupStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TCEXEVERGROUP_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_NEW) : STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TCEXEVERGROUP_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DRAFT) : STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TCEXEVERGROUP_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_CHANGED) : STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TCEXEVERGROUP_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DELETED) : STRING(IDS_TCEXEVERGROUP_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCExeVerGroupParameterTag(LPCTSTR pszTag) CONST
{
	return CheckTMParameterTag(pszTag);
}

INT CALTELDatabaseEngine::GetTCExeVerGroupParameterTagLength() CONST
{
	return GetTMParameterTagLength();
}

INT CALTELDatabaseEngine::EnumTCExeVerGroupParameterStages(CStringArray &szStageIDs, CUIntArray &nStageIDs) CONST
{
	nStageIDs.RemoveAll();
	szStageIDs.RemoveAll();
	nStageIDs.Add(MAKETCEXEVERSTAGEID(TCEXEVERGROUPPARAMETER_STAGE_ACCEPTANCE, 0));
	nStageIDs.Add(MAKETCEXEVERSTAGEID(TCEXEVERGROUPPARAMETER_STAGE_COMPLETION, 0));
	szStageIDs.Add(STRING(IDS_TCEXEVERGROUPPARAMETER_STAGE_ACCEPTANCE));
	szStageIDs.Add(STRING(IDS_TCEXEVERGROUPPARAMETER_STAGE_COMPLETION));
	return((INT)szStageIDs.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCExeVerGroupParameterStage(UINT nStageID) CONST
{
	return((nStageID == MAKETCEXEVERSTAGEID(TCEXEVERGROUPPARAMETER_STAGE_ACCEPTANCE, 0) || nStageID == MAKETCEXEVERSTAGEID(TCEXEVERGROUPPARAMETER_STAGE_COMPLETION, 0)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCExeVerGroupParameterStageLength() CONST
{
	return 6;
}

UINT CALTELDatabaseEngine::TranslateTCExeVerGroupParameterStage(LPCTSTR pszStageID, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStageID, STRING(IDS_TCEXEVERGROUPPARAMETER_STAGE_DBMS_ACCEPTANCE))) return MAKETCEXEVERSTAGEID(TCEXEVERGROUPPARAMETER_STAGE_ACCEPTANCE, 0);
		if (!lstrcmp(pszStageID, STRING(IDS_TCEXEVERGROUPPARAMETER_STAGE_DBMS_COMPLETION))) return MAKETCEXEVERSTAGEID(TCEXEVERGROUPPARAMETER_STAGE_COMPLETION, 0);
	}
	else
	{
		if (!lstrcmp(pszStageID, STRING(IDS_TCEXEVERGROUPPARAMETER_STAGE_ACCEPTANCE))) return MAKETCEXEVERSTAGEID(TCEXEVERGROUPPARAMETER_STAGE_ACCEPTANCE, 0);
		if (!lstrcmp(pszStageID, STRING(IDS_TCEXEVERGROUPPARAMETER_STAGE_COMPLETION))) return MAKETCEXEVERSTAGEID(TCEXEVERGROUPPARAMETER_STAGE_COMPLETION, 0);
	}
	return 0;
}

CString CALTELDatabaseEngine::TranslateTCExeVerGroupParameterStage(UINT nStageID, BOOL bDBMS) CONST
{
	if (nStageID == MAKETCEXEVERSTAGEID(TCEXEVERGROUPPARAMETER_STAGE_ACCEPTANCE, 0)) return((!bDBMS) ? STRING(IDS_TCEXEVERGROUPPARAMETER_STAGE_ACCEPTANCE) : STRING(IDS_TCEXEVERGROUPPARAMETER_STAGE_DBMS_ACCEPTANCE));
	if (nStageID == MAKETCEXEVERSTAGEID(TCEXEVERGROUPPARAMETER_STAGE_COMPLETION, 0)) return((!bDBMS) ? STRING(IDS_TCEXEVERGROUPPARAMETER_STAGE_COMPLETION) : STRING(IDS_TCEXEVERGROUPPARAMETER_STAGE_DBMS_COMPLETION));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumTCExeVerGroupParameterTypes(CStringArray &szTypes, CUIntArray &nTypes) CONST
{
	nTypes.RemoveAll();
	szTypes.RemoveAll();
	nTypes.Add(TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION);
	nTypes.Add(TCEXEVERGROUPPARAMETER_TYPE_REPORT);
	nTypes.Add(TCEXEVERGROUPPARAMETER_TYPE_DUMP);
	nTypes.Add(TCEXEVERGROUPPARAMETER_TYPE_STATUS);
	szTypes.Add(STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION));
	szTypes.Add(STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_REPORT));
	szTypes.Add(STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_DUMP));
	szTypes.Add(STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_STATUS));
	return((INT)szTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCExeVerGroupParameterType(UINT nType) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nType & (TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION | TCEXEVERGROUPPARAMETER_TYPE_REPORT | TCEXEVERGROUPPARAMETER_TYPE_DUMP | TCEXEVERGROUPPARAMETER_TYPE_STATUS))) == TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION || nAttribute == TCEXEVERGROUPPARAMETER_TYPE_REPORT || nAttribute == TCEXEVERGROUPPARAMETER_TYPE_DUMP || nAttribute == TCEXEVERGROUPPARAMETER_TYPE_STATUS) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCExeVerGroupParameterTypeLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateTCExeVerGroupParameterType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszType, STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_DBMS_EXCEPTION))) return TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION;
		if (!lstrcmp(pszType, STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_DBMS_REPORT))) return TCEXEVERGROUPPARAMETER_TYPE_REPORT;
		if (!lstrcmp(pszType, STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_DBMS_DUMP))) return TCEXEVERGROUPPARAMETER_TYPE_DUMP;
		if (!lstrcmp(pszType, STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_DBMS_STATUS))) return TCEXEVERGROUPPARAMETER_TYPE_STATUS;
	}
	else
	{
		if (!lstrcmp(pszType, STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION))) return TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION;
		if (!lstrcmp(pszType, STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_REPORT))) return TCEXEVERGROUPPARAMETER_TYPE_REPORT;
		if (!lstrcmp(pszType, STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_DUMP))) return TCEXEVERGROUPPARAMETER_TYPE_DUMP;
		if (!lstrcmp(pszType, STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_STATUS))) return TCEXEVERGROUPPARAMETER_TYPE_STATUS;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCExeVerGroupParameterType(UINT nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION) return((!bDBMS) ? STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION) : STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_DBMS_EXCEPTION));
	if (nAttributes & TCEXEVERGROUPPARAMETER_TYPE_REPORT) return((!bDBMS) ? STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_REPORT) : STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_DBMS_REPORT));
	if (nAttributes & TCEXEVERGROUPPARAMETER_TYPE_DUMP) return((!bDBMS) ? STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_DUMP) : STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_DBMS_DUMP));
	if (nAttributes & TCEXEVERGROUPPARAMETER_TYPE_STATUS) return((!bDBMS) ? STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_STATUS) : STRING(IDS_TCEXEVERGROUPPARAMETER_TYPE_DBMS_STATUS));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumTCExeVerGroupParameterInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	nInterpretations.RemoveAll();
	szInterpretations.RemoveAll();
	nInterpretations.Add(TCEXEVERGROUPPARAMETER_INTERPRETATION_RAW);
	nInterpretations.Add(TCEXEVERGROUPPARAMETER_INTERPRETATION_CALIBRATED);
	nInterpretations.Add(TCEXEVERGROUPPARAMETER_INTERPRETATION_ECHOED);
	szInterpretations.Add(STRING(IDS_TCEXEVERGROUPPARAMETER_INTERPRETATION_RAW));
	szInterpretations.Add(STRING(IDS_TCEXEVERGROUPPARAMETER_INTERPRETATION_CALIBRATED));
	szInterpretations.Add(STRING(IDS_TCEXEVERGROUPPARAMETER_INTERPRETATION_ECHOED));
	return((INT)szInterpretations.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCExeVerGroupParameterInterpretation(UINT nInterpretation) CONST
{
	UINT  nAttribute;

	return(((nAttribute = (nInterpretation & (TCEXEVERGROUPPARAMETER_INTERPRETATION_RAW | TCEXEVERGROUPPARAMETER_INTERPRETATION_CALIBRATED | TCEXEVERGROUPPARAMETER_INTERPRETATION_ECHOED))) == TCEXEVERGROUPPARAMETER_INTERPRETATION_RAW || nAttribute == TCEXEVERGROUPPARAMETER_INTERPRETATION_CALIBRATED || nAttribute == TCEXEVERGROUPPARAMETER_INTERPRETATION_ECHOED) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCExeVerGroupParameterInterpretationLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateTCExeVerGroupParameterInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCEXEVERGROUPPARAMETER_INTERPRETATION_DBMS_RAW))) return TCEXEVERGROUPPARAMETER_INTERPRETATION_RAW;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCEXEVERGROUPPARAMETER_INTERPRETATION_DBMS_CALIBRATED))) return TCEXEVERGROUPPARAMETER_INTERPRETATION_CALIBRATED;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCEXEVERGROUPPARAMETER_INTERPRETATION_DBMS_ECHOED))) return TCEXEVERGROUPPARAMETER_INTERPRETATION_ECHOED;
	}
	else
	{
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCEXEVERGROUPPARAMETER_INTERPRETATION_RAW))) return TCEXEVERGROUPPARAMETER_INTERPRETATION_RAW;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCEXEVERGROUPPARAMETER_INTERPRETATION_CALIBRATED))) return TCEXEVERGROUPPARAMETER_INTERPRETATION_CALIBRATED;
		if (!lstrcmp(pszInterpretation, STRING(IDS_TCEXEVERGROUPPARAMETER_INTERPRETATION_ECHOED))) return TCEXEVERGROUPPARAMETER_INTERPRETATION_ECHOED;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateTCExeVerGroupParameterInterpretation(UINT nAttributes, BOOL bDBMS) CONST
{
	if (nAttributes & TCEXEVERGROUPPARAMETER_INTERPRETATION_RAW) return((!bDBMS) ? STRING(IDS_TCEXEVERGROUPPARAMETER_INTERPRETATION_RAW) : STRING(IDS_TCEXEVERGROUPPARAMETER_INTERPRETATION_DBMS_RAW));
	if (nAttributes & TCEXEVERGROUPPARAMETER_INTERPRETATION_CALIBRATED) return((!bDBMS) ? STRING(IDS_TCEXEVERGROUPPARAMETER_INTERPRETATION_CALIBRATED) : STRING(IDS_TCEXEVERGROUPPARAMETER_INTERPRETATION_DBMS_CALIBRATED));
	if (nAttributes & TCEXEVERGROUPPARAMETER_INTERPRETATION_ECHOED) return((!bDBMS) ? STRING(IDS_TCEXEVERGROUPPARAMETER_INTERPRETATION_ECHOED) : STRING(IDS_TCEXEVERGROUPPARAMETER_INTERPRETATION_DBMS_ECHOED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCExeVerGroupParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszValue) CONST
{
	BOOL  bSign;
	double  fValue;
	ULONGLONG  nValue;

	if ((nAttributes & (TMPARAMETER_CODING_TEXTSTRING | TMPARAMETER_CALIBRATION_STATUS)) == 0)
	{
		if ((nAttributes & TMPARAMETER_CALIBRATION_NUMERICAL) == 0)
		{
			if (nAttributes & TMPARAMETER_CODING_UNSIGNEDINTEGER)
			{
				if (nAttributes & TMPARAMETER_RADIX_BINARY) return(ParseValue(pszValue, 2, nValue, bSign) && !bSign);
				if (nAttributes & TMPARAMETER_RADIX_OCTAL) return(ParseValue(pszValue, 8, nValue, bSign) && !bSign);
				if (nAttributes & TMPARAMETER_RADIX_HEXADECIMAL) return(ParseValue(pszValue, 16, nValue, bSign) && !bSign);
				return(ParseValue(pszValue, 10, nValue, bSign) && !bSign);
			}
			if (nAttributes & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN)) return(ParseValue(pszValue, 2, nValue, bSign) && !bSign);
			if (nAttributes & (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX)) return ParseValue(pszValue, 10, nValue, bSign);
		}
		return((nAttributes & (TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_CALIBRATION_NUMERICAL)) ? ParseValue(pszValue, fValue) : FALSE);
	}
	return TRUE;
}

INT CALTELDatabaseEngine::GetTCExeVerGroupParameterConstValueLength() CONST
{
	return 17;
}

double CALTELDatabaseEngine::TranslateTCExeVerGroupParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszValue) CONST
{
	BOOL  bSign;
	double  fValue;
	ULONGLONG  nValue;

	if ((nAttributes & (TMPARAMETER_CODING_TEXTSTRING | TMPARAMETER_CALIBRATION_STATUS)) == 0)
	{
		if ((nAttributes & TMPARAMETER_CALIBRATION_NUMERICAL) == 0)
		{
			if (nAttributes & TMPARAMETER_CODING_UNSIGNEDINTEGER)
			{
				if (nAttributes & TMPARAMETER_RADIX_BINARY) return((ParseValue(pszValue, 2, nValue, bSign)) ? ((bSign) ? -(double)nValue : (double)nValue) : 0.0);
				if (nAttributes & TMPARAMETER_RADIX_OCTAL) return((ParseValue(pszValue, 8, nValue, bSign)) ? ((bSign) ? -(double)nValue : (double)nValue) : 0.0);
				if (nAttributes & TMPARAMETER_RADIX_HEXADECIMAL) return((ParseValue(pszValue, 16, nValue, bSign)) ? ((bSign) ? -(double)nValue : (double)nValue) : 0.0);
				return((ParseValue(pszValue, 10, nValue, bSign)) ? ((bSign) ? -(double)nValue : (double)nValue) : 0.0);
			}
			if (nAttributes & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN)) return((ParseValue(pszValue, 2, nValue, bSign)) ? ((bSign) ? -(double)nValue : (double)nValue) : 0.0);
			if (nAttributes & (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX)) return((ParseValue(pszValue, 10, nValue, bSign)) ? ((bSign) ? -(double)nValue : (double)nValue) : 0.0);
		}
		return((nAttributes & (TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_CALIBRATION_NUMERICAL)) ? ((ParseValue(pszValue, fValue)) ? fValue : 0.0) : 0.0);
	}
	return 0.0;
}
CString CALTELDatabaseEngine::TranslateTCExeVerGroupParameterConstValue(ULONGLONG nAttributes, double fValue) CONST
{
	CStringTools  cStringTools;

	if ((nAttributes & (TMPARAMETER_CODING_TEXTSTRING | TMPARAMETER_CALIBRATION_STATUS)) == 0)
	{
		if ((nAttributes & TMPARAMETER_CALIBRATION_NUMERICAL) == 0)
		{
			if (nAttributes & TMPARAMETER_CODING_UNSIGNEDINTEGER)
			{
				if (nAttributes & TMPARAMETER_RADIX_BINARY) return cStringTools.ConvertLongUIntToString((ULONGLONG)fValue, 2);
				if (nAttributes & TMPARAMETER_RADIX_OCTAL) return cStringTools.ConvertLongUIntToString((ULONGLONG)fValue, 8);
				if (nAttributes & TMPARAMETER_RADIX_HEXADECIMAL) return cStringTools.ConvertLongUIntToString((ULONGLONG)fValue, 16);
				return cStringTools.ConvertLongUIntToString((ULONGLONG)fValue);
			}
			if (nAttributes & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN)) return cStringTools.ConvertLongUIntToString((ULONGLONG)fValue, 2);
			if (nAttributes & (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX)) return cStringTools.ConvertLongIntToString((LONGLONG)fValue);
		}
		return((nAttributes & (TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_CALIBRATION_NUMERICAL)) ? cStringTools.ConvertFloatToString(fValue) : EMPTYSTRING);
	}
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCExeVerGroupParameterTimeWindowInterval(CONST CTimeSpan &tInterval) CONST
{
	UINT  nRange[2];

	return((GetTCExeVerGroupParameterTimeWindowIntervalRange(nRange[0], nRange[1]) && tInterval.GetTotalSeconds() >= nRange[0] && tInterval.GetTotalSeconds() <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetTCExeVerGroupParameterTimeWindowIntervalRange(UINT &nLow, UINT &nHigh) CONST
{
	nLow = 1;
	nHigh = SECONDSPERDAY;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTCExeVerGroupParameterEventID(LPCTSTR pszEventID) CONST
{
	return((lstrlen(pszEventID) > 0) ? CheckTMPacketTag(pszEventID) : TRUE);
}

INT CALTELDatabaseEngine::GetTCExeVerGroupParameterEventIDLength() CONST
{
	return GetTMPacketTagLength();
}

BOOL CALTELDatabaseEngine::CheckTCParameterSetName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetTCParameterSetNameLength());
}

INT CALTELDatabaseEngine::GetTCParameterSetNameLength() CONST
{
	return 9;
}

BOOL CALTELDatabaseEngine::CheckTCParameterSetDescription(LPCTSTR pszDescription) CONST
{
	return((lstrlen(pszDescription) >= 0 && lstrlen(pszDescription) <= GetTCParameterSetDescriptionLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCParameterSetDescriptionLength() CONST
{
	return 32;
}

INT CALTELDatabaseEngine::EnumTCParameterSetStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(TCPARAMETERSET_RECORDSTATUS_NEW);
	nStatus.Add(TCPARAMETERSET_RECORDSTATUS_DRAFT);
	nStatus.Add(TCPARAMETERSET_RECORDSTATUS_CHANGED);
	nStatus.Add(TCPARAMETERSET_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_TCPARAMETERSET_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_TCPARAMETERSET_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckTCParameterSetStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCParameterSetStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetTCParameterSetStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateTCParameterSetStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DBMS_NEW))) return TCPARAMETERSET_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DBMS_DRAFT))) return TCPARAMETERSET_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DBMS_CHANGED))) return TCPARAMETERSET_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DBMS_DELETED))) return TCPARAMETERSET_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETERSET_RECORDSTATUS_NEW))) return TCPARAMETERSET_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DRAFT))) return TCPARAMETERSET_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETERSET_RECORDSTATUS_CHANGED))) return TCPARAMETERSET_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DELETED))) return TCPARAMETERSET_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetTCParameterSetStatusLength()) ? TCPARAMETERSET_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateTCParameterSetStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == TCPARAMETERSET_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_TCPARAMETERSET_RECORDSTATUS_NEW) : STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DBMS_NEW));
	if (nStatus == TCPARAMETERSET_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DRAFT) : STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == TCPARAMETERSET_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_TCPARAMETERSET_RECORDSTATUS_CHANGED) : STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == TCPARAMETERSET_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DELETED) : STRING(IDS_TCPARAMETERSET_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckTCParameterSetItemName(LPCTSTR pszName) CONST
{
	return CheckTCParameterTag(pszName);
}

INT CALTELDatabaseEngine::GetTCParameterSetItemNameLength() CONST
{
	return GetTCParameterTagLength();
}

INT CALTELDatabaseEngine::EnumTCParameterSetItemValueInterpretations(CStringArray &szInterpretations, CLongUIntArray &nInterpretations) CONST
{
	return EnumTCFunctionElementValueInterpretations(szInterpretations, nInterpretations);
}

BOOL CALTELDatabaseEngine::CheckTCParameterSetItemValueInterpretation(ULONGLONG nAttributes, ULONGLONG nFlag) CONST
{
	return CheckTCFunctionElementValueInterpretation(nAttributes, nFlag);
}

INT CALTELDatabaseEngine::GetTCParameterSetItemValueInterpretationLength() CONST
{
	return GetTCFunctionElementValueInterpretationLength();
}

ULONGLONG CALTELDatabaseEngine::TranslateTCParameterSetItemValueInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	return TranslateTCFunctionElementValueInterpretation(pszInterpretation, bDBMS);
}
CString CALTELDatabaseEngine::TranslateTCParameterSetItemValueInterpretation(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return TranslateTCFunctionElementValueInterpretation(nAttributes, bDBMS);
}

INT CALTELDatabaseEngine::EnumTCParameterSetItemValueRadixes(CStringArray &szRadixes, CLongUIntArray &nRadixes) CONST
{
	return EnumTCFunctionElementValueRadixes(szRadixes, nRadixes);
}

BOOL CALTELDatabaseEngine::CheckTCParameterSetItemValueRadix(ULONGLONG nAttributes, ULONGLONG nRadix) CONST
{
	return CheckTCFunctionElementValueRadix(nAttributes, nRadix);
}

INT CALTELDatabaseEngine::GetTCParameterSetItemValueRadixLength() CONST
{
	return GetTCFunctionElementValueRadixLength();
}

ULONGLONG CALTELDatabaseEngine::TranslateTCParameterSetItemValueRadix(LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	return TranslateTCFunctionElementValueRadix(pszRadix, bDBMS);
}
CString CALTELDatabaseEngine::TranslateTCParameterSetItemValueRadix(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return TranslateTCFunctionElementValueRadix(nAttributes, bDBMS);
}

BOOL CALTELDatabaseEngine::CheckTCParameterSetItemValueBitOffset(INT nOffset) CONST
{
	return CheckTCFunctionElementValueBitOffset(nOffset);
}

BOOL CALTELDatabaseEngine::GetTCParameterSetItemValueBitOffsetRange(INT &nLow, INT &nHigh) CONST
{
	return GetTCFunctionElementValueBitOffsetRange(nLow, nHigh);
}

BOOL CALTELDatabaseEngine::CheckTCParameterSetItemConstValue(ULONGLONG nAttributes, LPCTSTR pszConstValue) CONST
{
	return CheckTCFunctionElementConstValue(nAttributes, pszConstValue);
}

INT CALTELDatabaseEngine::GetTCParameterSetItemConstValueLength() CONST
{
	return GetTCFunctionElementConstValueLength();
}

ULONGLONG CALTELDatabaseEngine::TranslateTCParameterSetItemConstValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszConstValue) CONST
{
	return TranslateTCFunctionElementConstValue(nAttributes, nWidth, pszConstValue);
}
CString CALTELDatabaseEngine::TranslateTCParameterSetItemConstValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nConstValue) CONST
{
	return TranslateTCFunctionElementConstValue(nAttributes, nWidth, nConstValue);
}

BOOL CALTELDatabaseEngine::CheckTCParameterSetItemConstTimeType(LPCTSTR pszName) CONST
{
	return CheckTCFunctionElementConstTimeType(pszName);
}

BOOL CALTELDatabaseEngine::CheckTCParameterSetItemConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return CheckTCFunctionElementConstTime(nAttributes, pszConstTime);
}

CTimeTag CALTELDatabaseEngine::TranslateTCParameterSetItemConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return TranslateTCFunctionElementConstTime(nAttributes, pszConstTime);
}

BOOL CALTELDatabaseEngine::CheckANDName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetANDNameLength());
}

INT CALTELDatabaseEngine::GetANDNameLength() CONST
{
	return 6;
}

BOOL CALTELDatabaseEngine::CheckANDTitle(LPCTSTR pszTitle) CONST
{
	return((lstrlen(pszTitle) > 0 && lstrlen(pszTitle) <= GetANDTitleLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetANDTitleLength() CONST
{
	return 32;
}

INT CALTELDatabaseEngine::EnumANDColumns(CStringArray &szColumns, CUIntArray &nColumns) CONST
{
	nColumns.RemoveAll();
	szColumns.RemoveAll();
	nColumns.Add(ANDLAYOUT_TITLEITEM_ID);
	nColumns.Add(ANDLAYOUT_TITLEITEM_DESCRIPTION);
	nColumns.Add(ANDLAYOUT_TITLEITEM_VALUE);
	nColumns.Add(ANDLAYOUT_TITLEITEM_UNIT);
	nColumns.Add(ANDLAYOUT_TITLEITEM_CHANGETMUNIT);
	nColumns.Add(ANDLAYOUT_TITLEITEM_CHANGETIME);
	nColumns.Add(ANDLAYOUT_TITLEITEM_UPDATETMUNIT);
	nColumns.Add(ANDLAYOUT_TITLEITEM_UPDATETIME);
	nColumns.Add(ANDLAYOUT_TITLEITEM_EXPECTEDVALUES);
	szColumns.Add(STRING(IDS_AND_LAYOUT_TITLEITEM_ID));
	szColumns.Add(STRING(IDS_AND_LAYOUT_TITLEITEM_DESCRIPTION));
	szColumns.Add(STRING(IDS_AND_LAYOUT_TITLEITEM_VALUE));
	szColumns.Add(STRING(IDS_AND_LAYOUT_TITLEITEM_UNIT));
	szColumns.Add(STRING(IDS_AND_LAYOUT_TITLEITEM_CHANGETMUNIT));
	szColumns.Add(STRING(IDS_AND_LAYOUT_TITLEITEM_CHANGETIME));
	szColumns.Add(STRING(IDS_AND_LAYOUT_TITLEITEM_UPDATETMUNIT));
	szColumns.Add(STRING(IDS_AND_LAYOUT_TITLEITEM_UPDATETIME));
	szColumns.Add(STRING(IDS_AND_LAYOUT_TITLEITEM_EXPECTEDVALUES));
	return((INT)szColumns.GetSize());
}

BOOL CALTELDatabaseEngine::CheckANDColumns(LPCTSTR pszColumns) CONST
{
	INT  nPos;
	INT  nColumn;
	INT  nColumns;
	LPTSTR  pszPos;
	double  fColumn;

	if (lstrlen(pszColumns) > 0 && lstrlen(pszColumns) <= GetANDColumnsLength())
	{
		for (SkipSpaces(pszColumns, (nPos = 0)), nColumns = 0; nPos < lstrlen(pszColumns); SkipSpaces(pszColumns, (nPos = nPos + lstrlen(STRING(IDS_AND_LAYOUT_TITLEITEM_SEPARATOR)))))
		{
			for (nColumn = (INT)(fColumn = _tcstod(&pszColumns[nPos], &pszPos)); SkipSpaces(pszColumns, (nPos = (INT)(pszPos - pszColumns))) >= 0; )
			{
				nColumns = ((fColumn == floor(fColumn) && nColumn < ANDLAYOUT_TITLEITEM_UNKNOWN  &&  nColumn % 2 == 1) || nColumn == -1) ? (nColumns + 1) : -1;
				break;
			}
			if (pszColumns[nPos] != STRINGCHAR(IDS_AND_LAYOUT_TITLEITEM_SEPARATOR) || nColumns < 0) break;
		}
		return((nColumns > 0 && nPos == lstrlen(pszColumns)) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CALTELDatabaseEngine::GetANDColumnsLength() CONST
{
	return 256;
}

BOOL CALTELDatabaseEngine::TranslateANDColumns(LPCTSTR pszColumns, CUIntArray &nColumns, BOOL bDBMS) CONST
{
	INT  nPos;
	UINT  nColumn;
	BOOL  bColumn;
	LPTSTR  pszPos;
	double  fColumn;
	CString  szColumns;

	for (SkipSpaces(pszColumns, (nPos = 0)), nColumns.RemoveAll(); bDBMS && nPos < lstrlen(pszColumns); SkipSpaces(pszColumns, (nPos = nPos + lstrlen(STRING(IDS_AND_LAYOUT_TITLEITEM_SEPARATOR)))))
	{
		for (nColumn = (UINT)(fColumn = _tcstod(&pszColumns[nPos], &pszPos)), bColumn = FALSE; SkipSpaces(pszColumns, (nPos = (INT)(pszPos - pszColumns))) >= 0; )
		{
			if ((fColumn == floor(fColumn) && nColumn < ANDLAYOUT_TITLEITEM_UNKNOWN  &&  nColumn % 2 == 1) || nColumn == (UINT)-1)
			{
				nColumns.Add(nColumn);
				bColumn = TRUE;
			}
			break;
		}
		if (pszColumns[nPos] != STRINGCHAR(IDS_AND_LAYOUT_TITLEITEM_SEPARATOR) || !bColumn) break;
	}
	for (szColumns = pszColumns; !bDBMS && !szColumns.IsEmpty(); szColumns = (nPos >= 0) ? szColumns.Mid(nPos + 1) : EMPTYSTRING)
	{
		if ((nColumn = ((nPos = szColumns.Find(TAB)) > 0) ? TranslateANDColumn(szColumns.Left(nPos), bDBMS) : TranslateANDColumn(szColumns, bDBMS)) != (UINT)-1) nColumns.Add(nColumn);
		continue;
	}
	return((((bDBMS  &&  nPos == lstrlen(pszColumns)) || (!bDBMS  &&  szColumns.IsEmpty())) && nColumns.GetSize() > 0) ? TRUE : FALSE);
}
CString CALTELDatabaseEngine::TranslateANDColumns(CONST CUIntArray &nColumns, BOOL bDBMS) CONST
{
	INT  nCol;
	INT  nCols;
	UINT  nFormat;
	CString  szColumns;
	CStringTools  cStringTools;

	for (nCol = 0, nCols = (INT)nColumns.GetSize(); nCol < nCols; nCol++)
	{
		for (nFormat = 1; !bDBMS && nFormat <= max(ANDLAYOUT_TITLEITEMS_ALL, ANDLAYOUT_TITLEITEM_UNKNOWN); nFormat <<= 1)
		{
			if (nColumns.GetAt(nCol) & nFormat) szColumns += (!szColumns.IsEmpty()) ? (TAB + TranslateANDColumn(nFormat, bDBMS)) : TranslateANDColumn(nFormat, bDBMS);
			continue;
		}
		szColumns += (bDBMS) ? ((!szColumns.IsEmpty()) ? (STRING(IDS_AND_LAYOUT_TITLEITEM_SEPARATOR) + cStringTools.ConvertUIntToString(nColumns.GetAt(nCol))) : cStringTools.ConvertUIntToString(nColumns.GetAt(nCol))) : EMPTYSTRING;
	}
	return szColumns;
}

UINT CALTELDatabaseEngine::TranslateANDColumn(LPCTSTR pszColumn, BOOL bDBMS) CONST
{
	if ((bDBMS  &&  _ttoi(pszColumn) == ANDLAYOUT_TITLEITEM_ID) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_AND_LAYOUT_TITLEITEM_ID)))) return ANDLAYOUT_TITLEITEM_ID;
	if ((bDBMS  &&  _ttoi(pszColumn) == ANDLAYOUT_TITLEITEM_DESCRIPTION) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_AND_LAYOUT_TITLEITEM_DESCRIPTION)))) return ANDLAYOUT_TITLEITEM_DESCRIPTION;
	if ((bDBMS  &&  _ttoi(pszColumn) == ANDLAYOUT_TITLEITEM_VALUE) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_AND_LAYOUT_TITLEITEM_VALUE)))) return ANDLAYOUT_TITLEITEM_VALUE;
	if ((bDBMS  &&  _ttoi(pszColumn) == ANDLAYOUT_TITLEITEM_UNIT) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_AND_LAYOUT_TITLEITEM_UNIT)))) return ANDLAYOUT_TITLEITEM_UNIT;
	if ((bDBMS  &&  _ttoi(pszColumn) == ANDLAYOUT_TITLEITEM_CHANGETMUNIT) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_AND_LAYOUT_TITLEITEM_CHANGETMUNIT)))) return ANDLAYOUT_TITLEITEM_CHANGETMUNIT;
	if ((bDBMS  &&  _ttoi(pszColumn) == ANDLAYOUT_TITLEITEM_CHANGETIME) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_AND_LAYOUT_TITLEITEM_CHANGETIME)))) return ANDLAYOUT_TITLEITEM_CHANGETIME;
	if ((bDBMS  &&  _ttoi(pszColumn) == ANDLAYOUT_TITLEITEM_UPDATETMUNIT) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_AND_LAYOUT_TITLEITEM_UPDATETMUNIT)))) return ANDLAYOUT_TITLEITEM_UPDATETMUNIT;
	if ((bDBMS  &&  _ttoi(pszColumn) == ANDLAYOUT_TITLEITEM_UPDATETIME) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_AND_LAYOUT_TITLEITEM_UPDATETIME)))) return ANDLAYOUT_TITLEITEM_UPDATETIME;
	if ((bDBMS  &&  _ttoi(pszColumn) == ANDLAYOUT_TITLEITEM_EXPECTEDVALUES) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_AND_LAYOUT_TITLEITEM_EXPECTEDVALUES)))) return ANDLAYOUT_TITLEITEM_EXPECTEDVALUES;
	return -1;
}
CString CALTELDatabaseEngine::TranslateANDColumn(UINT nColumn, BOOL bDBMS) CONST
{
	CStringTools  cStringTools;

	if (nColumn == ANDLAYOUT_TITLEITEM_ID) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_AND_LAYOUT_TITLEITEM_ID));
	if (nColumn == ANDLAYOUT_TITLEITEM_DESCRIPTION) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_AND_LAYOUT_TITLEITEM_DESCRIPTION));
	if (nColumn == ANDLAYOUT_TITLEITEM_VALUE) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_AND_LAYOUT_TITLEITEM_VALUE));
	if (nColumn == ANDLAYOUT_TITLEITEM_UNIT) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_AND_LAYOUT_TITLEITEM_UNIT));
	if (nColumn == ANDLAYOUT_TITLEITEM_CHANGETMUNIT) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_AND_LAYOUT_TITLEITEM_CHANGETMUNIT));
	if (nColumn == ANDLAYOUT_TITLEITEM_CHANGETIME) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_AND_LAYOUT_TITLEITEM_CHANGETIME));
	if (nColumn == ANDLAYOUT_TITLEITEM_UPDATETMUNIT) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_AND_LAYOUT_TITLEITEM_UPDATETMUNIT));
	if (nColumn == ANDLAYOUT_TITLEITEM_UPDATETIME) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_AND_LAYOUT_TITLEITEM_UPDATETIME));
	if (nColumn == ANDLAYOUT_TITLEITEM_EXPECTEDVALUES) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_AND_LAYOUT_TITLEITEM_EXPECTEDVALUES));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumANDStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(ANDLAYOUT_RECORDSTATUS_NEW);
	nStatus.Add(ANDLAYOUT_RECORDSTATUS_DRAFT);
	nStatus.Add(ANDLAYOUT_RECORDSTATUS_CHANGED);
	nStatus.Add(ANDLAYOUT_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_AND_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_AND_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_AND_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_AND_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckANDStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_AND_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_AND_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_AND_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_AND_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetANDStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetANDStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateANDStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_AND_RECORDSTATUS_DBMS_NEW))) return ANDLAYOUT_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_AND_RECORDSTATUS_DBMS_DRAFT))) return ANDLAYOUT_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_AND_RECORDSTATUS_DBMS_CHANGED))) return ANDLAYOUT_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_AND_RECORDSTATUS_DBMS_DELETED))) return ANDLAYOUT_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_AND_RECORDSTATUS_NEW))) return ANDLAYOUT_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_AND_RECORDSTATUS_DRAFT))) return ANDLAYOUT_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_AND_RECORDSTATUS_CHANGED))) return ANDLAYOUT_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_AND_RECORDSTATUS_DELETED))) return ANDLAYOUT_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetANDStatusLength()) ? ANDLAYOUT_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateANDStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == ANDLAYOUT_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_AND_RECORDSTATUS_NEW) : STRING(IDS_AND_RECORDSTATUS_DBMS_NEW));
	if (nStatus == ANDLAYOUT_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_AND_RECORDSTATUS_DRAFT) : STRING(IDS_AND_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == ANDLAYOUT_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_AND_RECORDSTATUS_CHANGED) : STRING(IDS_AND_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == ANDLAYOUT_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_AND_RECORDSTATUS_DELETED) : STRING(IDS_AND_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckANDParameterTag(LPCTSTR pszTag) CONST
{
	return((CheckTMParameterTag(pszTag) || !lstrlen(pszTag)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetANDParameterTagLength() CONST
{
	return GetTMParameterTagLength();
}

BOOL CALTELDatabaseEngine::CheckANDParameterComment(LPCTSTR pszComment) CONST
{
	return((lstrlen(pszComment) >= 0 && lstrlen(pszComment) <= GetANDParameterCommentLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetANDParameterCommentLength() CONST
{
	return 32;
}

CString CALTELDatabaseEngine::TranslateANDParameterComment(LPCTSTR pszComment, BOOL bDBMS) CONST
{
	INT  nPos[3];
	CString  szComment;

	for (nPos[0] = (INT)_tcscspn(pszComment, CString(EOL)), nPos[1] = (INT)_tcscspn(pszComment, STRING(IDS_AND_LAYOUT_COMMENT_START)), nPos[2] = (nPos[1] < lstrlen(pszComment)) ? (nPos[1] + (INT)_tcscspn(&pszComment[nPos[1] + 1], STRING(IDS_AND_LAYOUT_COMMENT_END)) + 1) : nPos[1], szComment = pszComment; !bDBMS && nPos[0] < lstrlen(pszComment); )
	{
		szComment = szComment.Left(nPos[0]) + STRING(IDS_AND_LAYOUT_COMMENT_START) + szComment.Mid(nPos[0] + 1) + STRING(IDS_AND_LAYOUT_COMMENT_END);
		return szComment;
	}
	for (; bDBMS && nPos[1] < nPos[2] && nPos[2] < lstrlen(pszComment); )
	{
		szComment = szComment.Left(nPos[1]) + EOL + szComment.Mid(nPos[1] + 1, nPos[2] - nPos[1] - 1);
		break;
	}
	return szComment;
}

BOOL CALTELDatabaseEngine::CheckANDParameterRow(INT nRow) CONST
{
	INT  nRange[2];

	return((GetANDParameterRowRange(nRange[0], nRange[1]) && nRow >= nRange[0] && nRow <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetANDParameterRowRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 1024;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckANDParameterCol(INT nCol) CONST
{
	INT  nRange[2];

	return((GetANDParameterColRange(nRange[0], nRange[1]) && nCol >= nRange[0] && nCol <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetANDParameterColRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 8;
	return TRUE;
}

INT CALTELDatabaseEngine::EnumANDParameterModes(CStringArray &szModes, CLongUIntArray &nModes) CONST
{
	nModes.RemoveAll();
	szModes.RemoveAll();
	nModes.Add(~TMPARAMETER_CALIBRATION_NONE);
	nModes.Add(~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS));
	nModes.Add(TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY);
	nModes.Add(TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_RADIX_BINARY);
	nModes.Add(TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_OCTAL);
	nModes.Add(TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_DECIMAL);
	nModes.Add(TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL);
	szModes.Add(STRING(IDS_AND_PARAMETERMODE_DEFAULT));
	szModes.Add(STRING(IDS_AND_PARAMETERMODE_RAWCODED));
	szModes.Add(STRING(IDS_AND_PARAMETERMODE_RAWBINARY));
	szModes.Add(STRING(IDS_AND_PARAMETERMODE_RAWINVERSEBINARY));
	szModes.Add(STRING(IDS_AND_PARAMETERMODE_RAWOCTAL));
	szModes.Add(STRING(IDS_AND_PARAMETERMODE_RAWDECIMAL));
	szModes.Add(STRING(IDS_AND_PARAMETERMODE_RAWHEXADECIMAL));
	return((INT)szModes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckANDParameterMode(LPCTSTR pszParameter, LPCTSTR pszMode) CONST
{
	return(((lstrlen(pszParameter) > 0 && (!lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DBMS_DEFAULT)) || !lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DBMS_RAWCODED)) || !lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DBMS_RAWBINARY)) || !lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DBMS_RAWINVERSEBINARY)) || !lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DBMS_RAWOCTAL)) || !lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DBMS_RAWDECIMAL)) || !lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DBMS_RAWHEXADECIMAL)))) || (!lstrlen(pszParameter) && !lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DBMS_DEFAULT)))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetANDParameterModeLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateANDParameterMode(LPCTSTR pszMode, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DBMS_DEFAULT)) || !lstrlen(pszMode)) return(~TMPARAMETER_CALIBRATION_NONE);
		if (!lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DBMS_RAWCODED))) return(~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS));
		if (!lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DBMS_RAWBINARY))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DBMS_RAWINVERSEBINARY))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DBMS_RAWOCTAL))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_OCTAL;
		if (!lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DBMS_RAWDECIMAL))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DBMS_RAWHEXADECIMAL))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL;
	}
	else
	{
		if (!lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_DEFAULT)) || !lstrlen(pszMode)) return(~TMPARAMETER_CALIBRATION_NONE);
		if (!lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_RAWCODED))) return(~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS));
		if (!lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_RAWBINARY))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_RAWINVERSEBINARY))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_RAWOCTAL))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_OCTAL;
		if (!lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_RAWDECIMAL))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszMode, STRING(IDS_AND_PARAMETERMODE_RAWHEXADECIMAL))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateANDParameterMode(ULONGLONG nMode, BOOL bDBMS) CONST
{
	if (nMode == ~TMPARAMETER_CALIBRATION_NONE || !nMode) return((!bDBMS) ? STRING(IDS_AND_PARAMETERMODE_DEFAULT) : STRING(IDS_AND_PARAMETERMODE_DBMS_DEFAULT));
	if (nMode == ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) return((!bDBMS) ? STRING(IDS_AND_PARAMETERMODE_RAWCODED) : STRING(IDS_AND_PARAMETERMODE_DBMS_RAWCODED));
	if ((nMode & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY)) == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY)) return((!bDBMS) ? STRING(IDS_AND_PARAMETERMODE_RAWBINARY) : STRING(IDS_AND_PARAMETERMODE_DBMS_RAWBINARY));
	if ((nMode & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_RADIX_BINARY)) == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_RADIX_BINARY)) return((!bDBMS) ? STRING(IDS_AND_PARAMETERMODE_RAWINVERSEBINARY) : STRING(IDS_AND_PARAMETERMODE_DBMS_RAWINVERSEBINARY));
	if ((nMode & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_OCTAL)) == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_OCTAL)) return((!bDBMS) ? STRING(IDS_AND_PARAMETERMODE_RAWOCTAL) : STRING(IDS_AND_PARAMETERMODE_DBMS_RAWOCTAL));
	if ((nMode & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_DECIMAL)) == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_DECIMAL)) return((!bDBMS) ? STRING(IDS_AND_PARAMETERMODE_RAWDECIMAL) : STRING(IDS_AND_PARAMETERMODE_DBMS_RAWDECIMAL));
	if ((nMode & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL)) == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL)) return((!bDBMS) ? STRING(IDS_AND_PARAMETERMODE_RAWHEXADECIMAL) : STRING(IDS_AND_PARAMETERMODE_DBMS_RAWHEXADECIMAL));
	return((bDBMS) ? STRING(IDS_AND_PARAMETERMODE_DBMS_DEFAULT) : EMPTYSTRING);
}

ULONGLONG CALTELDatabaseEngine::TranslateANDParameterAttributes(ULONGLONG nMode, ULONGLONG nAttributes) CONST
{
	if (nMode == ~TMPARAMETER_CALIBRATION_NONE || !nMode) return nAttributes;
	if (nMode == ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) return((nAttributes & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) | TMPARAMETER_CALIBRATION_NONE);
	if (nMode == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY)) return((nAttributes & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY);
	if (nMode == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_RADIX_BINARY)) return((nAttributes & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_RADIX_BINARY);
	if (nMode == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_OCTAL)) return((nAttributes & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_OCTAL);
	if (nMode == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_DECIMAL)) return((nAttributes & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_DECIMAL);
	if (nMode == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL)) return((nAttributes & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL);
	return nAttributes;
}

BOOL CALTELDatabaseEngine::CheckANDParameterOccurrence(LPCTSTR pszParameter, INT nOccurrence) CONST
{
	INT  nRange[2];

	return((GetANDParameterOccurrenceRange(nRange[0], nRange[1]) && ((lstrlen(pszParameter) > 0 && nOccurrence >= nRange[0] && nOccurrence <= nRange[1]) || (!lstrlen(pszParameter) && !nOccurrence))) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetANDParameterOccurrenceRange(INT &nLow, INT &nHigh) CONST
{
	nLow = -1024;
	nHigh = 1024;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckANDParameterColor(INT nColor) CONST
{
	return(((nColor >= 0 && nColor < 256 * 256 * 256) || (nColor >= PALETTEINDEX(MINCOLORPALETTEINDEX) && nColor <= PALETTEINDEX(MAXCOLORPALETTEINDEX)) || nColor == -1) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckANDParameterDigits(LPCTSTR pszParameter, INT nDigits) CONST
{
	INT  nRange[2];

	return((GetANDParameterDigitsRange(nRange[0], nRange[1]) && ((lstrlen(pszParameter) > 0 && nDigits >= nRange[0] && nDigits <= nRange[1]) || (!lstrlen(pszParameter) && !nDigits))) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetANDParameterDigitsRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 32;
	return TRUE;
}

INT CALTELDatabaseEngine::EnumANDParameterAlignments(CStringArray &szAlignments, CUIntArray &nAlignments) CONST
{
	nAlignments.RemoveAll();
	szAlignments.RemoveAll();
	nAlignments.Add(DT_LEFT);
	nAlignments.Add(DT_CENTER);
	nAlignments.Add(DT_RIGHT);
	szAlignments.Add(STRING(IDS_AND_PARAMETERALIGNMENT_LEFT));
	szAlignments.Add(STRING(IDS_AND_PARAMETERALIGNMENT_CENTER));
	szAlignments.Add(STRING(IDS_AND_PARAMETERALIGNMENT_RIGHT));
	return((INT)szAlignments.GetSize());
}

BOOL CALTELDatabaseEngine::CheckANDParameterAlignment(LPCTSTR pszAlignment) CONST
{
	return((lstrlen(pszAlignment) == GetANDParameterAlignmentLength() && (!lstrcmp(pszAlignment, STRING(IDS_AND_PARAMETERALIGNMENT_DBMS_LEFT)) || !lstrcmp(pszAlignment, STRING(IDS_AND_PARAMETERALIGNMENT_DBMS_CENTER)) || !lstrcmp(pszAlignment, STRING(IDS_AND_PARAMETERALIGNMENT_DBMS_RIGHT)))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetANDParameterAlignmentLength() CONST
{
	return 1;
}

UINT CALTELDatabaseEngine::TranslateANDParameterAlignment(LPCTSTR pszAlignment, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszAlignment, STRING(IDS_AND_PARAMETERALIGNMENT_DBMS_LEFT))) return DT_LEFT;
		if (!lstrcmp(pszAlignment, STRING(IDS_AND_PARAMETERALIGNMENT_DBMS_CENTER))) return DT_CENTER;
		if (!lstrcmp(pszAlignment, STRING(IDS_AND_PARAMETERALIGNMENT_DBMS_RIGHT))) return DT_RIGHT;
	}
	else
	{
		if (!lstrcmp(pszAlignment, STRING(IDS_AND_PARAMETERALIGNMENT_LEFT))) return DT_LEFT;
		if (!lstrcmp(pszAlignment, STRING(IDS_AND_PARAMETERALIGNMENT_CENTER))) return DT_CENTER;
		if (!lstrcmp(pszAlignment, STRING(IDS_AND_PARAMETERALIGNMENT_RIGHT))) return DT_RIGHT;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateANDParameterAlignment(UINT nAlignment, BOOL bDBMS) CONST
{
	if (nAlignment == DT_LEFT) return((!bDBMS) ? STRING(IDS_AND_PARAMETERALIGNMENT_LEFT) : STRING(IDS_AND_PARAMETERALIGNMENT_DBMS_LEFT));
	if (nAlignment == DT_CENTER) return((!bDBMS) ? STRING(IDS_AND_PARAMETERALIGNMENT_CENTER) : STRING(IDS_AND_PARAMETERALIGNMENT_DBMS_CENTER));
	if (nAlignment == DT_RIGHT) return((!bDBMS) ? STRING(IDS_AND_PARAMETERALIGNMENT_RIGHT) : STRING(IDS_AND_PARAMETERALIGNMENT_DBMS_RIGHT));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckGRDName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetGRDNameLength());
}

INT CALTELDatabaseEngine::GetGRDNameLength() CONST
{
	return 6;
}

BOOL CALTELDatabaseEngine::CheckGRDTitle(LPCTSTR pszTitle) CONST
{
	return((lstrlen(pszTitle) > 0 && lstrlen(pszTitle) <= GetGRDTitleLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetGRDTitleLength() CONST
{
	return 32;
}

INT CALTELDatabaseEngine::EnumGRDColumns(CStringArray &szColumns, CUIntArray &nColumns) CONST
{
	nColumns.RemoveAll();
	szColumns.RemoveAll();
	nColumns.Add(GRDLAYOUT_TITLEITEM_ID);
	nColumns.Add(GRDLAYOUT_TITLEITEM_DESCRIPTION);
	nColumns.Add(GRDLAYOUT_TITLEITEM_VALUE);
	nColumns.Add(GRDLAYOUT_TITLEITEM_UNIT);
	nColumns.Add(GRDLAYOUT_TITLEITEM_RANGE);
	nColumns.Add(GRDLAYOUT_TITLEITEM_LINE);
	nColumns.Add(GRDLAYOUT_TITLEITEM_CHANGETMUNIT);
	nColumns.Add(GRDLAYOUT_TITLEITEM_CHANGETIME);
	nColumns.Add(GRDLAYOUT_TITLEITEM_UPDATETMUNIT);
	nColumns.Add(GRDLAYOUT_TITLEITEM_UPDATETIME);
	szColumns.Add(STRING(IDS_GRD_LAYOUT_TITLEITEM_ID));
	szColumns.Add(STRING(IDS_GRD_LAYOUT_TITLEITEM_DESCRIPTION));
	szColumns.Add(STRING(IDS_GRD_LAYOUT_TITLEITEM_VALUE));
	szColumns.Add(STRING(IDS_GRD_LAYOUT_TITLEITEM_UNIT));
	szColumns.Add(STRING(IDS_GRD_LAYOUT_TITLEITEM_RANGE));
	szColumns.Add(STRING(IDS_GRD_LAYOUT_TITLEITEM_LINE));
	szColumns.Add(STRING(IDS_GRD_LAYOUT_TITLEITEM_CHANGETMUNIT));
	szColumns.Add(STRING(IDS_GRD_LAYOUT_TITLEITEM_CHANGETIME));
	szColumns.Add(STRING(IDS_GRD_LAYOUT_TITLEITEM_UPDATETMUNIT));
	szColumns.Add(STRING(IDS_GRD_LAYOUT_TITLEITEM_UPDATETIME));
	return((INT)szColumns.GetSize());
}

BOOL CALTELDatabaseEngine::CheckGRDColumns(INT nColumns) CONST
{
	return(((nColumns >= GRDLAYOUT_TITLEITEM_ID  &&  nColumns < GRDLAYOUT_TITLEITEM_UNKNOWN  &&  nColumns % 2 == 1) || nColumns == -1) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::TranslateGRDColumns(LPCTSTR pszColumns, CUIntArray &nColumns, BOOL bDBMS) CONST
{
	INT  nPos;
	UINT  nFormat[2];
	CString  szColumns;

	for (nColumns.RemoveAll(); bDBMS; )
	{
		nColumns.Add((_ttoi(pszColumns) < 0) ? GRDLAYOUT_TITLEITEMS_DEFAULT : _ttoi(pszColumns));
		return TRUE;
	}
	for (szColumns = pszColumns; !szColumns.IsEmpty(); szColumns = (nPos >= 0) ? szColumns.Mid(nPos + 1) : EMPTYSTRING)
	{
		if ((nFormat[0] = TranslateGRDColumn(((nPos = szColumns.Find(TAB)) >= 0) ? szColumns.Left(nPos) : szColumns, bDBMS)) != (UINT)-1)
		{
			for (nFormat[1] = 1; bDBMS && nFormat[0] >= nFormat[1]; nFormat[1] <<= 1)
			{
				if (nFormat[0] & nFormat[1])
				{
					nColumns.Add(nFormat[1]);
					continue;
				}
			}
			nColumns.Add(nFormat[0]);
			continue;
		}
		break;
	}
	return szColumns.IsEmpty();
}
CString CALTELDatabaseEngine::TranslateGRDColumns(CONST CUIntArray &nColumns, BOOL bDBMS) CONST
{
	INT  nCol;
	INT  nCols;
	UINT  nFormat;
	CString  szColumns;
	CStringTools  cStringTools;

	for (nCol = 0, nCols = (INT)nColumns.GetSize(); nCol < nCols; nCol++)
	{
		for (nFormat = 1; !bDBMS && nFormat <= max(GRDLAYOUT_TITLEITEMS_ALL, GRDLAYOUT_TITLEITEM_UNKNOWN); nFormat <<= 1)
		{
			if (nColumns.GetAt(nCol) & nFormat) szColumns += (!szColumns.IsEmpty()) ? (TAB + TranslateGRDColumn(nFormat, bDBMS)) : TranslateGRDColumn(nFormat, bDBMS);
			continue;
		}
		szColumns += (bDBMS) ? cStringTools.ConvertUIntToString(nColumns.GetAt(nCol)) : EMPTYSTRING;
	}
	return szColumns;
}

UINT CALTELDatabaseEngine::TranslateGRDColumn(LPCTSTR pszColumn, BOOL bDBMS) CONST
{
	if ((bDBMS  &&  _ttoi(pszColumn) == GRDLAYOUT_TITLEITEM_ID) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_GRD_LAYOUT_TITLEITEM_ID)))) return GRDLAYOUT_TITLEITEM_ID;
	if ((bDBMS  &&  _ttoi(pszColumn) == GRDLAYOUT_TITLEITEM_DESCRIPTION) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_GRD_LAYOUT_TITLEITEM_DESCRIPTION)))) return GRDLAYOUT_TITLEITEM_DESCRIPTION;
	if ((bDBMS  &&  _ttoi(pszColumn) == GRDLAYOUT_TITLEITEM_VALUE) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_GRD_LAYOUT_TITLEITEM_VALUE)))) return GRDLAYOUT_TITLEITEM_VALUE;
	if ((bDBMS  &&  _ttoi(pszColumn) == GRDLAYOUT_TITLEITEM_UNIT) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_GRD_LAYOUT_TITLEITEM_UNIT)))) return GRDLAYOUT_TITLEITEM_UNIT;
	if ((bDBMS  &&  _ttoi(pszColumn) == GRDLAYOUT_TITLEITEM_RANGE) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_GRD_LAYOUT_TITLEITEM_RANGE)))) return GRDLAYOUT_TITLEITEM_RANGE;
	if ((bDBMS  &&  _ttoi(pszColumn) == GRDLAYOUT_TITLEITEM_LINE) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_GRD_LAYOUT_TITLEITEM_LINE)))) return GRDLAYOUT_TITLEITEM_LINE;
	if ((bDBMS  &&  _ttoi(pszColumn) == GRDLAYOUT_TITLEITEM_CHANGETMUNIT) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_GRD_LAYOUT_TITLEITEM_CHANGETMUNIT)))) return GRDLAYOUT_TITLEITEM_CHANGETMUNIT;
	if ((bDBMS  &&  _ttoi(pszColumn) == GRDLAYOUT_TITLEITEM_CHANGETIME) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_GRD_LAYOUT_TITLEITEM_CHANGETIME)))) return GRDLAYOUT_TITLEITEM_CHANGETIME;
	if ((bDBMS  &&  _ttoi(pszColumn) == GRDLAYOUT_TITLEITEM_UPDATETMUNIT) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_GRD_LAYOUT_TITLEITEM_UPDATETMUNIT)))) return GRDLAYOUT_TITLEITEM_UPDATETMUNIT;
	if ((bDBMS  &&  _ttoi(pszColumn) == GRDLAYOUT_TITLEITEM_UPDATETIME) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_GRD_LAYOUT_TITLEITEM_UPDATETIME)))) return GRDLAYOUT_TITLEITEM_UPDATETIME;
	return -1;
}
CString CALTELDatabaseEngine::TranslateGRDColumn(UINT nColumn, BOOL bDBMS) CONST
{
	CStringTools  cStringTools;

	if (nColumn == GRDLAYOUT_TITLEITEM_ID) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_GRD_LAYOUT_TITLEITEM_ID));
	if (nColumn == GRDLAYOUT_TITLEITEM_DESCRIPTION) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_GRD_LAYOUT_TITLEITEM_DESCRIPTION));
	if (nColumn == GRDLAYOUT_TITLEITEM_VALUE) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_GRD_LAYOUT_TITLEITEM_VALUE));
	if (nColumn == GRDLAYOUT_TITLEITEM_UNIT) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_GRD_LAYOUT_TITLEITEM_UNIT));
	if (nColumn == GRDLAYOUT_TITLEITEM_RANGE) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_GRD_LAYOUT_TITLEITEM_RANGE));
	if (nColumn == GRDLAYOUT_TITLEITEM_LINE) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_GRD_LAYOUT_TITLEITEM_LINE));
	if (nColumn == GRDLAYOUT_TITLEITEM_CHANGETMUNIT) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_GRD_LAYOUT_TITLEITEM_CHANGETMUNIT));
	if (nColumn == GRDLAYOUT_TITLEITEM_CHANGETIME) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_GRD_LAYOUT_TITLEITEM_CHANGETIME));
	if (nColumn == GRDLAYOUT_TITLEITEM_UPDATETMUNIT) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_GRD_LAYOUT_TITLEITEM_UPDATETMUNIT));
	if (nColumn == GRDLAYOUT_TITLEITEM_UPDATETIME) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_GRD_LAYOUT_TITLEITEM_UPDATETIME));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumGRDTypes(CStringArray &szTypes, CUIntArray &nTypes) CONST
{
	nTypes.RemoveAll();
	szTypes.RemoveAll();
	nTypes.Add(GRDLAYOUT_TYPE_NORMAL);
	nTypes.Add(GRDLAYOUT_TYPE_STRIPCHART);
	nTypes.Add(GRDLAYOUT_TYPE_STACKCHART);
	nTypes.Add(GRDLAYOUT_TYPE_DIAGRAM);
	szTypes.Add(STRING(IDS_GRD_LAYOUT_TYPE_NORMAL));
	szTypes.Add(STRING(IDS_GRD_LAYOUT_TYPE_STRIPCHART));
	szTypes.Add(STRING(IDS_GRD_LAYOUT_TYPE_STACKCHART));
	szTypes.Add(STRING(IDS_GRD_LAYOUT_TYPE_DIAGRAM));
	return((INT)szTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckGRDType(LPCTSTR pszType) CONST
{
	return((!lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_DBMS_NORMAL)) || !lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_DBMS_STRIPCHART)) || !lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_DBMS_STACKCHART)) || !lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_DBMS_DIAGRAM))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetGRDTypeLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateGRDType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_DBMS_NORMAL))) return GRDLAYOUT_TYPE_NORMAL;
		if (!lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_DBMS_STRIPCHART))) return GRDLAYOUT_TYPE_STRIPCHART;
		if (!lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_DBMS_STACKCHART))) return GRDLAYOUT_TYPE_STACKCHART;
		if (!lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_DBMS_DIAGRAM))) return GRDLAYOUT_TYPE_DIAGRAM;
	}
	else
	{
		if (!lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_NORMAL))) return GRDLAYOUT_TYPE_NORMAL;
		if (!lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_STRIPCHART))) return GRDLAYOUT_TYPE_STRIPCHART;
		if (!lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_STACKCHART))) return GRDLAYOUT_TYPE_STACKCHART;
		if (!lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_DIAGRAM))) return GRDLAYOUT_TYPE_DIAGRAM;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateGRDType(INT nType, BOOL bDBMS) CONST
{
	if (nType == GRDLAYOUT_TYPE_NORMAL) return((!bDBMS) ? STRING(IDS_GRD_LAYOUT_TYPE_NORMAL) : STRING(IDS_GRD_LAYOUT_TYPE_DBMS_NORMAL));
	if (nType == GRDLAYOUT_TYPE_STRIPCHART) return((!bDBMS) ? STRING(IDS_GRD_LAYOUT_TYPE_STRIPCHART) : STRING(IDS_GRD_LAYOUT_TYPE_DBMS_STRIPCHART));
	if (nType == GRDLAYOUT_TYPE_STACKCHART) return((!bDBMS) ? STRING(IDS_GRD_LAYOUT_TYPE_STACKCHART) : STRING(IDS_GRD_LAYOUT_TYPE_DBMS_STACKCHART));
	if (nType == GRDLAYOUT_TYPE_DIAGRAM) return((!bDBMS) ? STRING(IDS_GRD_LAYOUT_TYPE_DIAGRAM) : STRING(IDS_GRD_LAYOUT_TYPE_DBMS_DIAGRAM));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumGRDPlotTypes(CStringArray &szTypes, CUIntArray &nTypes) CONST
{
	nTypes.RemoveAll();
	szTypes.RemoveAll();
	nTypes.Add(GRDLAYOUT_MODE_NORMAL);
	nTypes.Add(GRDLAYOUT_MODE_AREA);
	szTypes.Add(STRING(IDS_GRD_PLOT_TYPE_NORMAL));
	szTypes.Add(STRING(IDS_GRD_PLOT_TYPE_AREA));
	return((INT)szTypes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckGRDPlotType(LPCTSTR pszType, LPCTSTR pszPlotType) CONST
{
	return(((!lstrcmp(pszPlotType, STRING(IDS_GRD_PLOT_TYPE_DBMS_NORMAL)) || !lstrcmp(pszPlotType, STRING(IDS_GRD_PLOT_TYPE_DBMS_AREA))) && (lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_DBMS_DIAGRAM)) || !lstrcmp(pszPlotType, STRING(IDS_GRD_PLOT_TYPE_DBMS_NORMAL)))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetGRDPlotTypeLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateGRDPlotType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszType, STRING(IDS_GRD_PLOT_TYPE_DBMS_NORMAL))) return GRDLAYOUT_MODE_NORMAL;
		if (!lstrcmp(pszType, STRING(IDS_GRD_PLOT_TYPE_DBMS_AREA))) return GRDLAYOUT_MODE_AREA;
	}
	else
	{
		if (!lstrcmp(pszType, STRING(IDS_GRD_PLOT_TYPE_NORMAL))) return GRDLAYOUT_MODE_NORMAL;
		if (!lstrcmp(pszType, STRING(IDS_GRD_PLOT_TYPE_AREA))) return GRDLAYOUT_MODE_AREA;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateGRDPlotType(INT nType, BOOL bDBMS) CONST
{
	if (nType & GRDLAYOUT_MODE_NORMAL) return((!bDBMS) ? STRING(IDS_GRD_PLOT_TYPE_NORMAL) : STRING(IDS_GRD_PLOT_TYPE_DBMS_NORMAL));
	if (nType & GRDLAYOUT_MODE_AREA) return((!bDBMS) ? STRING(IDS_GRD_PLOT_TYPE_AREA) : STRING(IDS_GRD_PLOT_TYPE_DBMS_AREA));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumGRDPlotModes(CStringArray &szModes, CUIntArray &nModes) CONST
{
	nModes.RemoveAll();
	szModes.RemoveAll();
	nModes.Add(GRDLAYOUT_MODE_SCROLL);
	nModes.Add(GRDLAYOUT_MODE_OVERWRITE);
	nModes.Add(GRDLAYOUT_MODE_RESTART);
	szModes.Add(STRING(IDS_GRD_PLOT_MODE_SCROLL));
	szModes.Add(STRING(IDS_GRD_PLOT_MODE_OVERWRITE));
	szModes.Add(STRING(IDS_GRD_PLOT_MODE_RESTART));
	return((INT)szModes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckGRDPlotMode(LPCTSTR pszType, LPCTSTR pszMode) CONST
{
	return(((!lstrcmp(pszMode, STRING(IDS_GRD_PLOT_MODE_DBMS_SCROLL)) || !lstrcmp(pszMode, STRING(IDS_GRD_PLOT_MODE_DBMS_OVERWRITE)) || !lstrcmp(pszMode, STRING(IDS_GRD_PLOT_MODE_DBMS_RESTART))) && (lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_DBMS_DIAGRAM)) || !lstrcmp(pszMode, STRING(IDS_GRD_PLOT_MODE_DBMS_RESTART)))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetGRDPlotModeLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateGRDPlotMode(LPCTSTR pszMode, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PLOT_MODE_DBMS_SCROLL))) return GRDLAYOUT_MODE_SCROLL;
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PLOT_MODE_DBMS_OVERWRITE))) return GRDLAYOUT_MODE_OVERWRITE;
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PLOT_MODE_DBMS_RESTART))) return GRDLAYOUT_MODE_RESTART;
	}
	else
	{
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PLOT_MODE_SCROLL))) return GRDLAYOUT_MODE_SCROLL;
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PLOT_MODE_OVERWRITE))) return GRDLAYOUT_MODE_OVERWRITE;
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PLOT_MODE_RESTART))) return GRDLAYOUT_MODE_RESTART;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateGRDPlotMode(INT nMode, BOOL bDBMS) CONST
{
	if (nMode & GRDLAYOUT_MODE_SCROLL) return((!bDBMS) ? STRING(IDS_GRD_PLOT_MODE_SCROLL) : STRING(IDS_GRD_PLOT_MODE_DBMS_SCROLL));
	if (nMode & GRDLAYOUT_MODE_OVERWRITE) return((!bDBMS) ? STRING(IDS_GRD_PLOT_MODE_OVERWRITE) : STRING(IDS_GRD_PLOT_MODE_DBMS_OVERWRITE));
	if (nMode & GRDLAYOUT_MODE_RESTART) return((!bDBMS) ? STRING(IDS_GRD_PLOT_MODE_RESTART) : STRING(IDS_GRD_PLOT_MODE_DBMS_RESTART));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckGRDPlotWidth(INT nWidth) CONST
{
	INT  nRange[2];

	return((GetGRDPlotWidthRange(nRange[0], nRange[1]) && nWidth >= nRange[0] && nWidth <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDPlotWidthRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = INT_MAX;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckGRDPlotHeight(INT nHeight) CONST
{
	INT  nRange[2];

	return((GetGRDPlotHeightRange(nRange[0], nRange[1]) && nHeight >= nRange[0] && nHeight <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDPlotHeightRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = INT_MAX;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckGRDXGrids(LPCTSTR pszType, INT nXGrids) CONST
{
	INT  nRange[2];

	return((GetGRDXGridsRange(nRange[0], nRange[1]) && nXGrids >= nRange[0] && nXGrids <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDXGridsRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 100;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckGRDYGrids(LPCTSTR pszType, INT nYGrids) CONST
{
	INT  nRange[2];

	return((GetGRDYGridsRange(nRange[0], nRange[1]) && ((lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_DBMS_STRIPCHART)) && nYGrids >= nRange[0] && nYGrids <= nRange[1]) || (!lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_DBMS_STRIPCHART)) && !nYGrids))) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDYGridsRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 100;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckGRDXTicks(INT nXTicks) CONST
{
	INT  nRange[2];

	return((GetGRDXTicksRange(nRange[0], nRange[1]) && nXTicks >= nRange[0] && nXTicks <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDXTicksRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 100;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckGRDYTicks(INT nYTicks) CONST
{
	INT  nRange[2];

	return((GetGRDYTicksRange(nRange[0], nRange[1]) && nYTicks >= nRange[0] && nYTicks <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDYTicksRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 100;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckGRDGridsWidth(INT nWidth) CONST
{
	INT  nRange[2];

	return((GetGRDGridsWidthRange(nRange[0], nRange[1]) && nWidth >= nRange[0] && nWidth <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDGridsWidthRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 4;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckGRDTicksWidth(INT nWidth) CONST
{
	INT  nRange[2];

	return((GetGRDTicksWidthRange(nRange[0], nRange[1]) && nWidth >= nRange[0] && nWidth <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDTicksWidthRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 4;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckGRDGridsColor(INT nGridsColor) CONST
{
	return(((nGridsColor >= 0 && nGridsColor < 256 * 256 * 256) || (nGridsColor >= PALETTEINDEX(MINCOLORPALETTEINDEX) && nGridsColor <= PALETTEINDEX(MAXCOLORPALETTEINDEX)) || nGridsColor == -1) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckGRDTicksColor(INT nTicksColor) CONST
{
	return(((nTicksColor >= 0 && nTicksColor < 256 * 256 * 256) || (nTicksColor >= PALETTEINDEX(MINCOLORPALETTEINDEX) && nTicksColor <= PALETTEINDEX(MAXCOLORPALETTEINDEX)) || nTicksColor == -1) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckGRDBackgroundColor(INT nBackgroundColor) CONST
{
	return(((nBackgroundColor >= 0 && nBackgroundColor < 256 * 256 * 256) || (nBackgroundColor >= PALETTEINDEX(MINCOLORPALETTEINDEX) && nBackgroundColor <= PALETTEINDEX(MAXCOLORPALETTEINDEX)) || nBackgroundColor == -1) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckGRDLabelColor(INT nLabelColor) CONST
{
	return(((nLabelColor >= 0 && nLabelColor < 256 * 256 * 256) || (nLabelColor >= PALETTEINDEX(MINCOLORPALETTEINDEX) && nLabelColor <= PALETTEINDEX(MAXCOLORPALETTEINDEX)) || nLabelColor == -1) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckGRDDurationDays(INT nDays, INT nHours, INT nMinutes) CONST
{
	INT  nRange[2];

	return((GetGRDDurationDaysRange(nRange[0], nRange[1]) && (nDays > 0 || nHours > 0 || nMinutes > 0) && nDays >= nRange[0] && nDays <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDDurationDaysRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 99;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckGRDDurationHours(INT nDays, INT nHours, INT nMinutes) CONST
{
	INT  nRange[2];

	return((GetGRDDurationHoursRange(nRange[0], nRange[1]) && (nDays > 0 || nHours > 0 || nMinutes > 0) && nHours >= nRange[0] && nHours <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDDurationHoursRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = HOURSPERDAY - 1;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckGRDDurationMinutes(INT nDays, INT nHours, INT nMinutes) CONST
{
	INT  nRange[2];

	return((GetGRDDurationMinutesRange(nRange[0], nRange[1]) && (nDays > 0 || nHours > 0 || nMinutes > 0) && nMinutes >= nRange[0] && nMinutes <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDDurationMinutesRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = MINUTESPERHOUR - 1;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckGRDInterval(LPCTSTR pszMode, INT nDays, INT nHours, INT nMinutes, INT nInterval) CONST
{
	return(((!lstrcmp(pszMode, STRING(IDS_GRD_PLOT_MODE_DBMS_SCROLL)) && nInterval >= 0 && nInterval <= MINUTESPERHOUR*(HOURSPERDAY*nDays + nHours) + nMinutes) || (lstrcmp(pszMode, STRING(IDS_GRD_PLOT_MODE_DBMS_SCROLL)) && !nInterval)) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDIntervalRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 100 * HOURSPERDAY*MINUTESPERHOUR - 1;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckGRDUpdateInterval(INT nDays, INT nHours, INT nMinutes, INT nInterval) CONST
{
	return((nInterval >= 0 && nInterval <= min(MINUTESPERHOUR*(HOURSPERDAY*nDays + nHours) + nMinutes, MINUTESPERDAY)) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDUpdateIntervalRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = HOURSPERDAY*MINUTESPERHOUR;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckGRDParameters(LPCTSTR pszType, INT nParameters) CONST
{
	INT  nRange[2];

	return((GetGRDParametersRange(nRange[0], nRange[1]) && (lstrcmp(pszType, STRING(IDS_GRD_LAYOUT_TYPE_DBMS_DIAGRAM)) || nParameters % 2 == 0) && nParameters >= nRange[0] && nParameters <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDParametersRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 10;
	return TRUE;
}

INT CALTELDatabaseEngine::EnumGRDStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(GRDLAYOUT_RECORDSTATUS_NEW);
	nStatus.Add(GRDLAYOUT_RECORDSTATUS_DRAFT);
	nStatus.Add(GRDLAYOUT_RECORDSTATUS_CHANGED);
	nStatus.Add(GRDLAYOUT_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_GRD_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_GRD_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_GRD_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_GRD_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckGRDStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_GRD_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_GRD_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_GRD_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_GRD_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetGRDStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetGRDStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateGRDStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_GRD_RECORDSTATUS_DBMS_NEW))) return GRDLAYOUT_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_GRD_RECORDSTATUS_DBMS_DRAFT))) return GRDLAYOUT_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_GRD_RECORDSTATUS_DBMS_CHANGED))) return GRDLAYOUT_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_GRD_RECORDSTATUS_DBMS_DELETED))) return GRDLAYOUT_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_GRD_RECORDSTATUS_NEW))) return GRDLAYOUT_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_GRD_RECORDSTATUS_DRAFT))) return GRDLAYOUT_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_GRD_RECORDSTATUS_CHANGED))) return GRDLAYOUT_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_GRD_RECORDSTATUS_DELETED))) return GRDLAYOUT_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetGRDStatusLength()) ? GRDLAYOUT_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslateGRDStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == GRDLAYOUT_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_GRD_RECORDSTATUS_NEW) : STRING(IDS_GRD_RECORDSTATUS_DBMS_NEW));
	if (nStatus == GRDLAYOUT_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_GRD_RECORDSTATUS_DRAFT) : STRING(IDS_GRD_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == GRDLAYOUT_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_GRD_RECORDSTATUS_CHANGED) : STRING(IDS_GRD_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == GRDLAYOUT_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_GRD_RECORDSTATUS_DELETED) : STRING(IDS_GRD_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

BOOL CALTELDatabaseEngine::CheckGRDParameterTag(LPCTSTR pszTag) CONST
{
	return((CheckTMParameterTag(pszTag) || !lstrlen(pszTag)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetGRDParameterTagLength() CONST
{
	return GetTMParameterTagLength();
}

BOOL CALTELDatabaseEngine::CheckGRDParameterComment(LPCTSTR pszComment) CONST
{
	return((lstrlen(pszComment) >= 0 && lstrlen(pszComment) <= GetGRDParameterCommentLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetGRDParameterCommentLength() CONST
{
	return 32;
}

BOOL CALTELDatabaseEngine::CheckGRDParameterPosition(INT nPosition) CONST
{
	INT  nRange[2];

	return((GetGRDParameterPositionRange(nRange[0], nRange[1]) && nPosition >= nRange[0] && nPosition <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDParameterPositionRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 9;
	return TRUE;
}

INT CALTELDatabaseEngine::EnumGRDParameterModes(CStringArray &szModes, CLongUIntArray &nModes) CONST
{
	nModes.RemoveAll();
	szModes.RemoveAll();
	nModes.Add(~TMPARAMETER_CALIBRATION_NONE);
	nModes.Add(~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS));
	nModes.Add(TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY);
	nModes.Add(TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_RADIX_BINARY);
	nModes.Add(TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_OCTAL);
	nModes.Add(TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_DECIMAL);
	nModes.Add(TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL);
	szModes.Add(STRING(IDS_GRD_PARAMETERMODE_DEFAULT));
	szModes.Add(STRING(IDS_GRD_PARAMETERMODE_RAWCODED));
	szModes.Add(STRING(IDS_GRD_PARAMETERMODE_RAWBINARY));
	szModes.Add(STRING(IDS_GRD_PARAMETERMODE_RAWINVERSEBINARY));
	szModes.Add(STRING(IDS_GRD_PARAMETERMODE_RAWOCTAL));
	szModes.Add(STRING(IDS_GRD_PARAMETERMODE_RAWDECIMAL));
	szModes.Add(STRING(IDS_GRD_PARAMETERMODE_RAWHEXADECIMAL));
	return((INT)szModes.GetSize());
}

BOOL CALTELDatabaseEngine::CheckGRDParameterMode(LPCTSTR pszMode) CONST
{
	return((!lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_DBMS_DEFAULT)) || !lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWCODED)) || !lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWBINARY)) || !lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWINVERSEBINARY)) || !lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWOCTAL)) || !lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWDECIMAL)) || !lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWHEXADECIMAL))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetGRDParameterModeLength() CONST
{
	return 1;
}

ULONGLONG CALTELDatabaseEngine::TranslateGRDParameterMode(LPCTSTR pszMode, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_DBMS_DEFAULT))) return(~TMPARAMETER_CALIBRATION_NONE);
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWCODED))) return(~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS));
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWBINARY))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWINVERSEBINARY))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWOCTAL))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_OCTAL;
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWDECIMAL))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWHEXADECIMAL))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL;
	}
	else
	{
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_DEFAULT))) return(~TMPARAMETER_CALIBRATION_NONE);
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_RAWCODED))) return(~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS));
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_RAWBINARY))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_RAWINVERSEBINARY))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_RADIX_BINARY;
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_RAWOCTAL))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_OCTAL;
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_RAWDECIMAL))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_DECIMAL;
		if (!lstrcmp(pszMode, STRING(IDS_GRD_PARAMETERMODE_RAWHEXADECIMAL))) return TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL;
	}
	return 0;
}
CString CALTELDatabaseEngine::TranslateGRDParameterMode(ULONGLONG nMode, BOOL bDBMS) CONST
{
	if (nMode == ~TMPARAMETER_CALIBRATION_NONE) return((!bDBMS) ? STRING(IDS_GRD_PARAMETERMODE_DEFAULT) : STRING(IDS_GRD_PARAMETERMODE_DBMS_DEFAULT));
	if (nMode == ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS))  return((!bDBMS) ? STRING(IDS_GRD_PARAMETERMODE_RAWCODED) : STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWCODED));
	if ((nMode & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY)) == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY)) return((!bDBMS) ? STRING(IDS_GRD_PARAMETERMODE_RAWBINARY) : STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWBINARY));
	if ((nMode & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_RADIX_BINARY)) == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_RADIX_BINARY)) return((!bDBMS) ? STRING(IDS_GRD_PARAMETERMODE_RAWINVERSEBINARY) : STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWINVERSEBINARY));
	if ((nMode & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_OCTAL)) == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_OCTAL)) return((!bDBMS) ? STRING(IDS_GRD_PARAMETERMODE_RAWOCTAL) : STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWOCTAL));
	if ((nMode & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_DECIMAL)) == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_DECIMAL)) return((!bDBMS) ? STRING(IDS_GRD_PARAMETERMODE_RAWDECIMAL) : STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWDECIMAL));
	if ((nMode & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL)) == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL)) return((!bDBMS) ? STRING(IDS_GRD_PARAMETERMODE_RAWHEXADECIMAL) : STRING(IDS_GRD_PARAMETERMODE_DBMS_RAWHEXADECIMAL));
	return((bDBMS) ? SPACE : EMPTYSTRING);
}

ULONGLONG CALTELDatabaseEngine::TranslateGRDParameterAttributes(ULONGLONG nMode, ULONGLONG nAttributes) CONST
{
	if (nMode == ~TMPARAMETER_CALIBRATION_NONE) return nAttributes;
	if (nMode == ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) return((nAttributes & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) | TMPARAMETER_CALIBRATION_NONE);
	if (nMode == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY)) return((nAttributes & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY);
	if (nMode == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_RADIX_BINARY)) return((nAttributes & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_RADIX_BINARY);
	if (nMode == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_OCTAL)) return((nAttributes & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_OCTAL);
	if (nMode == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_DECIMAL)) return((nAttributes & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_DECIMAL);
	if (nMode == (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL)) return((nAttributes & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL)) | TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_HEXADECIMAL);
	return nAttributes;
}

BOOL CALTELDatabaseEngine::CheckGRDParameterOccurrence(INT nOccurrence) CONST
{
	INT  nRange[2];

	return((GetGRDParameterOccurrenceRange(nRange[0], nRange[1]) && nOccurrence >= nRange[0] && nOccurrence <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDParameterOccurrenceRange(INT &nLow, INT &nHigh) CONST
{
	nLow = -1;
	nHigh = 1024;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckGRDParameterColor(INT nColor) CONST
{
	return(((nColor >= 0 && nColor < 256 * 256 * 256) || (nColor >= PALETTEINDEX(MINCOLORPALETTEINDEX) && nColor <= PALETTEINDEX(MAXCOLORPALETTEINDEX)) || nColor == -1) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckGRDParameterDigits(INT nDigits) CONST
{
	INT  nRange[2];

	return((GetGRDParameterDigitsRange(nRange[0], nRange[1]) && nDigits >= nRange[0] && nDigits <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDParameterDigitsRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 32;
	return TRUE;
}

INT CALTELDatabaseEngine::EnumGRDParameterLineStyles(CStringArray &szStyles, CUIntArray &nStyles) CONST
{
	nStyles.RemoveAll();
	szStyles.RemoveAll();
	nStyles.Add(GRDLAYOUTPARAMETER_LINESTYLE_SOLID);
	nStyles.Add(GRDLAYOUTPARAMETER_LINESTYLE_DOTTED);
	nStyles.Add(GRDLAYOUTPARAMETER_LINESTYLE_DASHED);
	szStyles.Add(STRING(IDS_GRD_PARAMETERLINESTYLE_SOLID));
	szStyles.Add(STRING(IDS_GRD_PARAMETERLINESTYLE_DOTTED));
	szStyles.Add(STRING(IDS_GRD_PARAMETERLINESTYLE_DASHED));
	return((INT)szStyles.GetSize());
}

BOOL CALTELDatabaseEngine::CheckGRDParameterLineStyle(LPCTSTR pszStyle) CONST
{
	return((!lstrcmp(pszStyle, STRING(IDS_GRD_PARAMETERLINESTYLE_DBMS_SOLID)) || !lstrcmp(pszStyle, STRING(IDS_GRD_PARAMETERLINESTYLE_DBMS_DOTTED)) || !lstrcmp(pszStyle, STRING(IDS_GRD_PARAMETERLINESTYLE_DBMS_DASHED))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetGRDParameterLineStyleLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateGRDParameterLineStyle(LPCTSTR pszStyle, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStyle, STRING(IDS_GRD_PARAMETERLINESTYLE_DBMS_SOLID)) || !lstrlen(pszStyle)) return GRDLAYOUTPARAMETER_LINESTYLE_SOLID;
		if (!lstrcmp(pszStyle, STRING(IDS_GRD_PARAMETERLINESTYLE_DBMS_DOTTED))) return GRDLAYOUTPARAMETER_LINESTYLE_DOTTED;
		if (!lstrcmp(pszStyle, STRING(IDS_GRD_PARAMETERLINESTYLE_DBMS_DASHED))) return GRDLAYOUTPARAMETER_LINESTYLE_DASHED;
	}
	else
	{
		if (!lstrcmp(pszStyle, STRING(IDS_GRD_PARAMETERLINESTYLE_SOLID))) return GRDLAYOUTPARAMETER_LINESTYLE_SOLID;
		if (!lstrcmp(pszStyle, STRING(IDS_GRD_PARAMETERLINESTYLE_DOTTED))) return GRDLAYOUTPARAMETER_LINESTYLE_DOTTED;
		if (!lstrcmp(pszStyle, STRING(IDS_GRD_PARAMETERLINESTYLE_DASHED))) return GRDLAYOUTPARAMETER_LINESTYLE_DASHED;
	}
	return -1;
}
CString CALTELDatabaseEngine::TranslateGRDParameterLineStyle(INT nStyle, BOOL bDBMS) CONST
{
	if (nStyle == GRDLAYOUTPARAMETER_LINESTYLE_SOLID) return((!bDBMS) ? STRING(IDS_GRD_PARAMETERLINESTYLE_SOLID) : STRING(IDS_GRD_PARAMETERLINESTYLE_DBMS_SOLID));
	if (nStyle == GRDLAYOUTPARAMETER_LINESTYLE_DOTTED) return((!bDBMS) ? STRING(IDS_GRD_PARAMETERLINESTYLE_DOTTED) : STRING(IDS_GRD_PARAMETERLINESTYLE_DBMS_DOTTED));
	if (nStyle == GRDLAYOUTPARAMETER_LINESTYLE_DASHED) return((!bDBMS) ? STRING(IDS_GRD_PARAMETERLINESTYLE_DASHED) : STRING(IDS_GRD_PARAMETERLINESTYLE_DBMS_DASHED));
	return((bDBMS) ? STRING(IDS_GRD_PARAMETERLINESTYLE_DBMS_SOLID) : EMPTYSTRING);
}

INT CALTELDatabaseEngine::EnumGRDParameterLineSymbols(CStringArray &szSymbols, CUIntArray &nSymbols) CONST
{
	nSymbols.RemoveAll();
	szSymbols.RemoveAll();
	nSymbols.Add(GRDLAYOUTPARAMETER_LINESYMBOL_NONE);
	nSymbols.Add(GRDLAYOUTPARAMETER_LINESYMBOL_POINT);
	nSymbols.Add(GRDLAYOUTPARAMETER_LINESYMBOL_STROKE);
	nSymbols.Add(GRDLAYOUTPARAMETER_LINESYMBOL_CROSS);
	nSymbols.Add(GRDLAYOUTPARAMETER_LINESYMBOL_SQUARE);
	szSymbols.Add(STRING(IDS_GRD_PARAMETERLINESYMBOL_NONE));
	szSymbols.Add(STRING(IDS_GRD_PARAMETERLINESYMBOL_POINT));
	szSymbols.Add(STRING(IDS_GRD_PARAMETERLINESYMBOL_STROKE));
	szSymbols.Add(STRING(IDS_GRD_PARAMETERLINESYMBOL_CROSS));
	szSymbols.Add(STRING(IDS_GRD_PARAMETERLINESYMBOL_SQUARE));
	return((INT)szSymbols.GetSize());
}

BOOL CALTELDatabaseEngine::CheckGRDParameterLineSymbol(LPCTSTR pszSymbol) CONST
{
	return((!lstrcmp(pszSymbol, STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_NONE)) || !lstrcmp(pszSymbol, STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_POINT)) || !lstrcmp(pszSymbol, STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_STROKE)) || !lstrcmp(pszSymbol, STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_CROSS)) || !lstrcmp(pszSymbol, STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_SQUARE))) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetGRDParameterLineSymbolLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslateGRDParameterLineSymbol(LPCTSTR pszSymbol, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszSymbol, STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_NONE)) || !lstrlen(pszSymbol)) return GRDLAYOUTPARAMETER_LINESYMBOL_NONE;
		if (!lstrcmp(pszSymbol, STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_POINT))) return GRDLAYOUTPARAMETER_LINESYMBOL_POINT;
		if (!lstrcmp(pszSymbol, STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_STROKE))) return GRDLAYOUTPARAMETER_LINESYMBOL_STROKE;
		if (!lstrcmp(pszSymbol, STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_CROSS))) return GRDLAYOUTPARAMETER_LINESYMBOL_CROSS;
		if (!lstrcmp(pszSymbol, STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_SQUARE))) return GRDLAYOUTPARAMETER_LINESYMBOL_SQUARE;
	}
	else
	{
		if (!lstrcmp(pszSymbol, STRING(IDS_GRD_PARAMETERLINESYMBOL_NONE))) return GRDLAYOUTPARAMETER_LINESYMBOL_NONE;
		if (!lstrcmp(pszSymbol, STRING(IDS_GRD_PARAMETERLINESYMBOL_POINT))) return GRDLAYOUTPARAMETER_LINESYMBOL_POINT;
		if (!lstrcmp(pszSymbol, STRING(IDS_GRD_PARAMETERLINESYMBOL_STROKE))) return GRDLAYOUTPARAMETER_LINESYMBOL_STROKE;
		if (!lstrcmp(pszSymbol, STRING(IDS_GRD_PARAMETERLINESYMBOL_CROSS))) return GRDLAYOUTPARAMETER_LINESYMBOL_CROSS;
		if (!lstrcmp(pszSymbol, STRING(IDS_GRD_PARAMETERLINESYMBOL_SQUARE))) return GRDLAYOUTPARAMETER_LINESYMBOL_SQUARE;
	}
	return -1;
}
CString CALTELDatabaseEngine::TranslateGRDParameterLineSymbol(INT nSymbol, BOOL bDBMS) CONST
{
	if (nSymbol == GRDLAYOUTPARAMETER_LINESYMBOL_NONE) return((!bDBMS) ? STRING(IDS_GRD_PARAMETERLINESYMBOL_NONE) : STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_NONE));
	if (nSymbol == GRDLAYOUTPARAMETER_LINESYMBOL_POINT) return((!bDBMS) ? STRING(IDS_GRD_PARAMETERLINESYMBOL_POINT) : STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_POINT));
	if (nSymbol == GRDLAYOUTPARAMETER_LINESYMBOL_STROKE) return((!bDBMS) ? STRING(IDS_GRD_PARAMETERLINESYMBOL_STROKE) : STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_STROKE));
	if (nSymbol == GRDLAYOUTPARAMETER_LINESYMBOL_CROSS) return((!bDBMS) ? STRING(IDS_GRD_PARAMETERLINESYMBOL_CROSS) : STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_CROSS));
	if (nSymbol == GRDLAYOUTPARAMETER_LINESYMBOL_SQUARE) return((!bDBMS) ? STRING(IDS_GRD_PARAMETERLINESYMBOL_SQUARE) : STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_SQUARE));
	return((bDBMS) ? STRING(IDS_GRD_PARAMETERLINESYMBOL_DBMS_NONE) : EMPTYSTRING);
}

BOOL CALTELDatabaseEngine::CheckGRDParameterLineWidth(INT nWidth) CONST
{
	INT  nRange[2];

	return((GetGRDParameterLineWidthRange(nRange[0], nRange[1]) && nWidth >= nRange[0] && nWidth <= nRange[1]) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::GetGRDParameterLineWidthRange(INT &nLow, INT &nHigh) CONST
{
	nLow = 0;
	nHigh = 4;
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckGRDParameterMinimum(double fMinimum) CONST
{
	return !isnan(fMinimum);
}

BOOL CALTELDatabaseEngine::CheckGRDParameterMaximum(double fMaximum) CONST
{
	return !isnan(fMaximum);
}

BOOL CALTELDatabaseEngine::CheckGRDParameterRange(double fMinimum, double fMaximum) CONST
{
	return((fMinimum < fMaximum  &&  fMaximum - fMinimum > FLT_EPSILON) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckPODName(LPCTSTR pszName) CONST
{
	return CheckName(pszName, GetPODNameLength());
}

INT CALTELDatabaseEngine::GetPODNameLength() CONST
{
	return 6;
}

BOOL CALTELDatabaseEngine::CheckPODTitle(LPCTSTR pszTitle) CONST
{
	return((lstrlen(pszTitle) > 0 && lstrlen(pszTitle) <= GetPODTitleLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetPODTitleLength() CONST
{
	return 32;
}

INT CALTELDatabaseEngine::EnumPODColumns(CStringArray &szColumns, CUIntArray &nColumns) CONST
{
	nColumns.RemoveAll();
	szColumns.RemoveAll();
	nColumns.Add(PODLAYOUT_TITLEITEM_TIME);
	nColumns.Add(PODLAYOUT_TITLEITEM_VALUE);
	nColumns.Add(PODLAYOUT_TITLEITEM_STATUS);
	nColumns.Add(PODLAYOUT_TITLEITEM_QUALITY);
	szColumns.Add(STRING(IDS_POD_LAYOUT_TITLEITEM_TIME));
	szColumns.Add(STRING(IDS_POD_LAYOUT_TITLEITEM_VALUE));
	szColumns.Add(STRING(IDS_POD_LAYOUT_TITLEITEM_STATUS));
	szColumns.Add(STRING(IDS_POD_LAYOUT_TITLEITEM_QUALITY));
	return((INT)szColumns.GetSize());
}

BOOL CALTELDatabaseEngine::CheckPODColumns(INT nColumns) CONST
{
	return(((nColumns >= PODLAYOUT_TITLEITEM_TIME  &&  nColumns < PODLAYOUT_TITLEITEM_UNKNOWN) || nColumns == -1) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::TranslatePODColumns(LPCTSTR pszColumns, CUIntArray &nColumns, BOOL bDBMS) CONST
{
	INT  nPos;
	UINT  nFormat[2];
	CString  szColumns;

	for (szColumns = pszColumns, nColumns.RemoveAll(); !szColumns.IsEmpty(); szColumns = (nPos >= 0) ? szColumns.Mid(nPos + 1) : EMPTYSTRING)
	{
		if ((nFormat[0] = ((nPos = (!bDBMS) ? szColumns.Find(TAB) : -1) > 0) ? TranslatePODColumn(szColumns.Left(nPos), bDBMS) : TranslatePODColumn(szColumns, bDBMS)) != (UINT)-1)
		{
			for (nFormat[1] = 1; bDBMS && nFormat[0] >= nFormat[1]; nFormat[1] <<= 1)
			{
				if (nFormat[0] & nFormat[1])
				{
					nColumns.Add(nFormat[1]);
					continue;
				}
			}
			if (!bDBMS) nColumns.Add(nFormat[0]);
			continue;
		}
		break;
	}
	return(((bDBMS  &&  nColumns.GetSize() > 0) || (!bDBMS  &&  szColumns.IsEmpty())) ? TRUE : FALSE);
}
CString CALTELDatabaseEngine::TranslatePODColumns(CONST CUIntArray &nColumns, BOOL bDBMS) CONST
{
	INT  nCol;
	INT  nCols;
	UINT  nFormat;
	CString  szColumns;
	CStringTools  cStringTools;

	for (nCol = 0, nCols = (INT)nColumns.GetSize(); nCol < nCols; nCol++)
	{
		for (nFormat = 1; !bDBMS && nFormat <= max(PODLAYOUT_TITLEITEMS_ALL, PODLAYOUT_TITLEITEM_UNKNOWN); nFormat <<= 1)
		{
			if (nColumns.GetAt(nCol) & nFormat) szColumns += (!szColumns.IsEmpty()) ? (TAB + TranslatePODColumn(nFormat, bDBMS)) : TranslatePODColumn(nFormat, bDBMS);
			continue;
		}
		szColumns += (bDBMS) ? cStringTools.ConvertUIntToString(nColumns.GetAt(nCol)) : EMPTYSTRING;
	}
	return szColumns;
}

UINT CALTELDatabaseEngine::TranslatePODColumn(LPCTSTR pszColumn, BOOL bDBMS) CONST
{
	if ((bDBMS  &&  _ttoi(pszColumn) == PODLAYOUT_TITLEITEM_TIME) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_POD_LAYOUT_TITLEITEM_TIME)))) return PODLAYOUT_TITLEITEM_TIME;
	if ((bDBMS  &&  _ttoi(pszColumn) == PODLAYOUT_TITLEITEM_VALUE) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_POD_LAYOUT_TITLEITEM_VALUE)))) return PODLAYOUT_TITLEITEM_VALUE;
	if ((bDBMS  &&  _ttoi(pszColumn) == PODLAYOUT_TITLEITEM_STATUS) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_POD_LAYOUT_TITLEITEM_STATUS)))) return PODLAYOUT_TITLEITEM_STATUS;
	if ((bDBMS  &&  _ttoi(pszColumn) == PODLAYOUT_TITLEITEM_QUALITY) || (!bDBMS  &&  !_tcscmp(pszColumn, STRING(IDS_POD_LAYOUT_TITLEITEM_QUALITY)))) return PODLAYOUT_TITLEITEM_QUALITY;
	return -1;
}
CString CALTELDatabaseEngine::TranslatePODColumn(UINT nColumn, BOOL bDBMS) CONST
{
	CStringTools  cStringTools;

	if (nColumn == PODLAYOUT_TITLEITEM_TIME) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_POD_LAYOUT_TITLEITEM_TIME));
	if (nColumn == PODLAYOUT_TITLEITEM_VALUE) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_POD_LAYOUT_TITLEITEM_VALUE));
	if (nColumn == PODLAYOUT_TITLEITEM_STATUS) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_POD_LAYOUT_TITLEITEM_STATUS));
	if (nColumn == PODLAYOUT_TITLEITEM_QUALITY) return((bDBMS) ? cStringTools.ConvertUIntToString(nColumn) : STRING(IDS_POD_LAYOUT_TITLEITEM_QUALITY));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::EnumPODExpressionStack(CStringArray &szExpressions, CUIntArray &nExpressions) CONST
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = 0, nCount = MAXDATABASEPPFSTACKELEMENTS - MINDATABASEPPFSTACKELEMENTS, szExpressions.RemoveAll(), nExpressions.RemoveAll(); nIndex <= nCount; nIndex++)
	{
		szExpressions.Add(STRING(MINDATABASEPPFSTACKELEMENTS + nIndex));
		nExpressions.Add(MINDATABASEPPFSTACKELEMENTS + nIndex);
	}
	return((INT)szExpressions.GetSize());
}

BOOL CALTELDatabaseEngine::CheckPODExpressionStack(LPCTSTR pszStack) CONST
{
	CByteArray  bNumbers;
	CByteArray  bFunctions;
	CByteArray  bOperators;
	CByteArray  bParameters;
	CStringArray  szStack;

	return((TranslatePODExpressionStack(pszStack, szStack, bFunctions, bOperators, bParameters, bNumbers) >= 0) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetPODExpressionStackLength() CONST
{
	return 256;
}

INT CALTELDatabaseEngine::TranslatePODExpressionStack(LPCTSTR pszStack, CStringArray &szStack, CByteArray &bFunctions, CByteArray &bOperators, CByteArray &bParameters, CByteArray &bNumbers) CONST
{
	INT  nPos;
	INT  nIndex;
	INT  nCount;
	INT  nOperands;
	INT  nParameters;
	LPTSTR  pPoint;
	LPCTSTR  pPos[2];
	CString  szNumber;
	CString  szParameter[3];

	for (nPos = 0, szStack.RemoveAll(), bFunctions.RemoveAll(), bOperators.RemoveAll(), bParameters.RemoveAll(), bNumbers.RemoveAll(), nOperands = 0, nParameters = 0; nPos < lstrlen(pszStack); nPos++)
	{
		for (nIndex = 0, nCount = (SkipSpaces(pszStack, nPos) < lstrlen(pszStack)) ? (MAXPODEXPRESSIONSTACKCONSTANT - MINPODEXPRESSIONSTACKCONSTANT + 1) : 0; nIndex < nCount; nIndex++)
		{
			if (!_tcsncmp(&pszStack[nPos], (szNumber = STRING(MINPODEXPRESSIONSTACKCONSTANT + nIndex)), lstrlen(STRING(MINPODEXPRESSIONSTACKCONSTANT + nIndex))))
			{
				szStack.Add(STRING(MINPODEXPRESSIONSTACKCONSTANTNUMBER + nIndex));
				bNumbers.SetAtGrow(szStack.GetUpperBound(), TRUE);
				nPos += lstrlen(szNumber);
				nOperands++;
				break;
			}
		}
		if (nIndex == nCount)
		{
			if (_tcstod((szNumber = ((pPos[0] = _tcsstr(&pszStack[nPos], STRING(IDS_POD_EXPRESSIONSTACK_SEPARATOR)))) ? CString(pszStack).Mid(nPos, lstrlen(pszStack) - lstrlen(pPos[0]) - nPos) : CString(pszStack).Mid(nPos)), &pPoint) != 0.0 || szNumber.GetLength() > lstrlen(pPoint))
			{
				szStack.Add((szNumber = szNumber.Left(szNumber.GetLength() - lstrlen(pPos[1]))));
				bNumbers.SetAtGrow(szStack.GetUpperBound(), TRUE);
				nPos += lstrlen(szNumber);
				nOperands++;
				nIndex--;
			}
		}
		if (nIndex == nCount)
		{
			for (nIndex = 0, nCount = (nPos < lstrlen(pszStack)) ? (INT)(MAXPODEXPRESSIONSTACKOPERATOR - MINPODEXPRESSIONSTACKOPERATOR + 1) : 0; nIndex < nCount; nIndex++)
			{
				if (!_tcsncmp(&pszStack[nPos], STRING(MINPODEXPRESSIONSTACKOPERATOR + nIndex), lstrlen(STRING(MINPODEXPRESSIONSTACKOPERATOR + nIndex))))
				{
					szStack.Add(STRING(MINPODEXPRESSIONSTACKOPERATOR + nIndex));
					bOperators.SetAtGrow(szStack.GetUpperBound(), TRUE);
					nPos += lstrlen(STRING(MINPODEXPRESSIONSTACKOPERATOR + nIndex));
					nOperands = (lstrcmp(STRING(MINPODEXPRESSIONSTACKOPERATOR + nIndex), STRING(IDS_POD_EXPRESSIONSTACKOPERATOR_SIGNCHANGE))) ? (nOperands - 1) : nOperands;
					break;
				}
			}
		}
		if (nIndex == nCount)
		{
			for (nIndex = 0, nCount = (nPos < lstrlen(pszStack)) ? (INT)(MAXPODEXPRESSIONSTACKFUNCTION - MINPODEXPRESSIONSTACKFUNCTION + 1) : 0; nIndex < nCount; nIndex++)
			{
				if (!_tcsncmp(&pszStack[nPos], STRING(MINPODEXPRESSIONSTACKFUNCTION + nIndex), lstrlen(STRING(MINPODEXPRESSIONSTACKFUNCTION + nIndex))))
				{
					szStack.Add(STRING(MINPODEXPRESSIONSTACKFUNCTION + nIndex));
					bFunctions.SetAtGrow(szStack.GetUpperBound(), TRUE);
					nPos += lstrlen(STRING(MINPODEXPRESSIONSTACKFUNCTION + nIndex));
					nOperands = (!lstrcmp(STRING(MINPODEXPRESSIONSTACKFUNCTION + nIndex), STRING(IDS_POD_EXPRESSIONSTACKFUNCTION_POWY))) ? (nOperands - 1) : nOperands;
					break;
				}
			}
		}
		if (nIndex == nCount)
		{
			for (szParameter[0].Format(STRING(IDS_POD_EXPRESSIONSTACK_PARAMETERFORMAT), EMPTYSTRING, 0, 0), szParameter[1] = ((pPos[0] = _tcsstr(&pszStack[nPos], STRING(IDS_POD_EXPRESSIONSTACK_SEPARATOR)))) ? CString(pszStack).Mid(nPos, lstrlen(pszStack) - lstrlen(pPos[0]) - nPos) : CString(pszStack).Mid(nPos), szParameter[2] = ((pPos[1] = _tcsstr(szParameter[1], szParameter[0].Left(1)))) ? szParameter[1].Left(szParameter[1].GetLength() - lstrlen(pPos[1])) : szParameter[1]; CheckTMParameterTag(szParameter[2]); )
			{
				szStack.Add(szParameter[1].Left(szParameter[1].GetLength()));
				bParameters.SetAtGrow(szStack.GetUpperBound(), TRUE);
				nPos += lstrlen(szParameter[1]);
				nParameters++;
				nOperands++;
				nIndex--;
				break;
			}
		}
		if ((nPos = (nIndex < nCount) ? SkipSpaces(pszStack, nPos) : -1) < lstrlen(pszStack) && nPos >= 0 && pszStack[nPos] == STRINGCHAR(IDS_POD_EXPRESSIONSTACK_SEPARATOR) && _tcsspn(&pszStack[nPos], CString(SPACE) + STRING(IDS_POD_EXPRESSIONSTACK_SEPARATOR)) < (size_t)lstrlen(&pszStack[nPos])) continue;
		break;
	}
	bNumbers.SetSize(szStack.GetSize());
	bFunctions.SetSize(szStack.GetSize());
	bOperators.SetSize(szStack.GetSize());
	bParameters.SetSize(szStack.GetSize());
	return((nPos == lstrlen(pszStack) && ((nOperands == 1 && (bNumbers.GetAt(bNumbers.GetUpperBound()) || bParameters.GetAt(bParameters.GetUpperBound()))) || nOperands == nParameters || (!nOperands  &&  !szStack.GetSize()))) ? (INT)szStack.GetSize() : -1);
}
CString CALTELDatabaseEngine::TranslatePODExpressionStack(CONST CStringArray &szStack) CONST
{
	INT  nIndex;
	INT  nCount;
	CString  szText;

	for (nIndex = 0, nCount = (INT)szStack.GetSize(); nIndex < nCount; nIndex++)
	{
		szText += (nIndex > 0) ? (STRING(IDS_POD_EXPRESSIONSTACK_SEPARATOR) + szStack.GetAt(nIndex)) : szStack.GetAt(nIndex);
		continue;
	}
	return szText;
}

BOOL CALTELDatabaseEngine::TranslatePODExpressionStackElement(LPCTSTR pszElement, CPODLayoutExpression *pElement) CONST
{
	INT  nPos;
	INT  nItem;
	INT  nItems;
	INT  nSample;
	BOOL  bSign;
	BOOL  bCoded;
	double  fItem;
	LPTSTR  pszItem;
	CString  szItem;
	CString  szZero;
	CString  szSign;
	CString  szFormat;
	CString  szParameter;
	CStringTools  cStringTools;

	for (nItem = 0, nItems = MAXDATABASEPPFMATHFUNCTIONS - MINDATABASEPPFMATHFUNCTIONS + 1; nItem < nItems; nItem++)
	{
		if (!lstrcmp(pszElement, STRING(MINDATABASEPPFMATHFUNCTIONS + nItem)))
		{
			pElement->SetFunction(pszElement);
			return TRUE;
		}
	}
	for (nItem = 0, nItems = MAXDATABASEPPFOPERATORS - MINDATABASEPPFOPERATORS + 1; nItem < nItems; nItem++)
	{
		if (!lstrcmp(pszElement, STRING(MINDATABASEPPFOPERATORS + nItem)))
		{
			pElement->SetOperator(pszElement);
			return TRUE;
		}
	}
	for (fItem = _tcstod(pszElement, &pszItem); _tcsspn(pszItem, SPACE) == lstrlen(pszItem) && _tcsspn(pszItem, SPACE) < (size_t)lstrlen(pszElement); )
	{
		pElement->SetNumber(fItem);
		return TRUE;
	}
	for (szItem = pszElement, szFormat.Format(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERFORMAT), EMPTYSTRING, 0, 0), szParameter.Empty(), nSample = 0, bSign = FALSE, bCoded = FALSE, nPos = 0; nPos < szItem.GetLength(); nPos++)
	{
		if (!_istspace(szItem.GetAt(nPos))) break;
		continue;
	}
	for (; nPos < szItem.GetLength(); nPos++)
	{
		if (!CheckTMParameterTag(szParameter + szItem.GetAt(nPos))) break;
		szParameter += szItem.GetAt(nPos);
	}
	for (; nPos < szItem.GetLength(); nPos++)
	{
		if (!_istspace(szItem.GetAt(nPos))) break;
		continue;
	}
	if (nPos < szItem.GetLength() && szItem.GetAt(nPos) == szFormat.GetAt(0))
	{
		for (nPos++; nPos < szItem.GetLength(); nPos++)
		{
			if (!_istspace(szItem.GetAt(nPos))) break;
			continue;
		}
		for (szZero = cStringTools.ConvertIntToString(0), szSign = cStringTools.ConvertIntToString(-1); nPos < szItem.GetLength(); nPos++)
		{
			if (_istdigit(szItem.GetAt(nPos)) && !nSample)
			{
				nSample = __toascii(szItem.GetAt(nPos));
				nSample -= __toascii(szZero.GetAt(0));
				continue;
			}
			if (_istdigit(szItem.GetAt(nPos)))
			{
				nSample = 10 * nSample + __toascii(szItem.GetAt(nPos)) - __toascii(szZero.GetAt(0));
				continue;
			}
			if (szItem.GetAt(nPos) == szSign.GetAt(0) && !nSample)
			{
				bSign = TRUE;
				continue;
			}
			break;
		}
		for (nSample = (bSign) ? -nSample : nSample; nPos < szItem.GetLength(); nPos++)
		{
			if (!_istspace(szItem.GetAt(nPos))) break;
			continue;
		}
		if (nPos < szItem.GetLength())
		{
			if (szItem.GetAt(nPos) == szFormat.GetAt(szFormat.GetLength() / 2))
			{
				for (nPos++; nPos < szItem.GetLength(); nPos++)
				{
					if (!_istspace(szItem.GetAt(nPos))) break;
					continue;
				}
				if (nPos < szItem.GetLength())
				{
					if (__toascii(szItem.GetAt(nPos)) == __toascii(szZero.GetAt(0)) || __toascii(szItem.GetAt(nPos)) == __toascii(szZero.GetAt(0)) + 1)
					{
						bCoded = (__toascii(szItem.GetAt(nPos)) - __toascii(szZero.GetAt(0)) > 0) ? TRUE : FALSE;
						nPos++;
					}
					for (; nPos < szItem.GetLength(); nPos++)
					{
						if (!_istspace(szItem.GetAt(nPos))) break;
						continue;
					}
					if (nPos < szItem.GetLength() && szItem.GetAt(nPos) == szFormat.GetAt(szFormat.GetLength() - 1))
					{
						for (nPos++; nPos < szItem.GetLength(); nPos++)
						{
							if (!_istspace(szItem.GetAt(nPos))) break;
							continue;
						}
					}
					else  nPos = -1;
				}
				else  nPos = -1;
			}
			else if (szItem.GetAt(nPos) == szFormat.GetAt(szFormat.GetLength() - 1))
			{
				for (nPos++; nPos < szItem.GetLength(); nPos++)
				{
					if (!_istspace(szItem.GetAt(nPos))) break;
					continue;
				}
			}
		}
		else  nPos = -1;
	}
	else
	{
		for (; nPos < szItem.GetLength(); nPos++)
		{
			if (!_istspace(szItem.GetAt(nPos))) break;
			continue;
		}
	}
	pElement->SetParameter(szParameter, nSample, bCoded);
	return((GetTMParameters()->Find(szParameter) >= 0 && nPos == szItem.GetLength()) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckPODExpressionStackElementColor(INT nColor) CONST
{
	return(((nColor >= 0 && nColor < 256 * 256 * 256) || (nColor >= PALETTEINDEX(MINCOLORPALETTEINDEX) && nColor <= PALETTEINDEX(MAXCOLORPALETTEINDEX)) || nColor == -1) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckPODParameters(LPCTSTR pszParameters) CONST
{
	CStringArray  szParameters;

	return((TranslatePODParameters(pszParameters, szParameters) >= 0) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetPODParametersListLength() CONST
{
	return 256;
}

INT CALTELDatabaseEngine::GetPODParameterTagLength() CONST
{
	return GetTMParameterTagLength();
}

INT CALTELDatabaseEngine::TranslatePODParameters(LPCTSTR pszParameters, CStringArray &szParameters) CONST
{
	INT  nPos;
	LPCTSTR  pPos;
	CString  szParameter;

	for (nPos = 0, szParameters.RemoveAll(); nPos < lstrlen(pszParameters); nPos++)
	{
		if ((nPos = SkipSpaces(pszParameters, nPos)) < lstrlen(pszParameters))
		{
			if (CheckTMParameterTag((szParameter = ((pPos = _tcsstr(&pszParameters[nPos], STRING(IDS_POD_EXPRESSIONSTACK_SEPARATOR)))) ? CString(pszParameters).Mid(nPos, lstrlen(pszParameters) - lstrlen(pPos) - nPos) : CString(pszParameters).Mid(nPos))))
			{
				for (szParameters.Add(szParameter), nPos += lstrlen(szParameter); nPos < lstrlen(pszParameters); nPos++)
				{
					if (!_istspace(pszParameters[nPos])) break;
					continue;
				}
				if (nPos < lstrlen(pszParameters) && pszParameters[nPos] == STRINGCHAR(IDS_POD_EXPRESSIONSTACK_SEPARATOR) && _tcsspn(&pszParameters[nPos], CString(SPACE) + STRING(IDS_POD_EXPRESSIONSTACK_SEPARATOR)) < (size_t)lstrlen(&pszParameters[nPos])) continue;
			}
		}
		break;
	}
	return((nPos == lstrlen(pszParameters)) ? (INT)szParameters.GetSize() : -1);
}
CString CALTELDatabaseEngine::TranslatePODParameters(CONST CStringArray &szParameters) CONST
{
	INT  nIndex;
	INT  nCount;
	CString  szText;

	for (nIndex = 0, nCount = (INT)szParameters.GetSize(); nIndex < nCount; nIndex++)
	{
		szText += (nIndex > 0) ? (STRING(IDS_POD_PARAMETERS_SEPARATOR) + szParameters.GetAt(nIndex)) : szParameters.GetAt(nIndex);
		continue;
	}
	return szText;
}

BOOL CALTELDatabaseEngine::CheckPODParameterSample(INT nSample) CONST
{
	return((nSample >= -100 && nSample <= 100) ? TRUE : FALSE);
}

BOOL CALTELDatabaseEngine::CheckPODParametersColor(INT nColor) CONST
{
	return(((nColor >= 0 && nColor < 256 * 256 * 256) || (nColor >= PALETTEINDEX(MINCOLORPALETTEINDEX) && nColor <= PALETTEINDEX(MAXCOLORPALETTEINDEX)) || nColor == -1) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::EnumPODFunctions(CStringArray &szFunctions, CUIntArray &nFunctions) CONST
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = 0, nCount = MAXDATABASEPPFFUNCTIONS - MINDATABASEPPFFUNCTIONS, szFunctions.RemoveAll(), nFunctions.RemoveAll(); nIndex <= nCount; nIndex++)
	{
		szFunctions.Add(STRING(MINDATABASEPPFFUNCTIONS + nIndex));
		nFunctions.Add(MINDATABASEPPFFUNCTIONS + nIndex);
	}
	return((INT)szFunctions.GetSize());
}

BOOL CALTELDatabaseEngine::CheckPODFunctions(LPCTSTR pszFunctions) CONST
{
	CStringArray  szFunctions;

	return((TranslatePODFunctions(pszFunctions, szFunctions) >= 0) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetPODFunctionsListLength() CONST
{
	return 256;
}

INT CALTELDatabaseEngine::GetPODFunctionLength() CONST
{
	return 16;
}

INT CALTELDatabaseEngine::TranslatePODFunctions(LPCTSTR pszFunctions, CStringArray &szFunctions) CONST
{
	INT  nPos;
	INT  nIndex;
	INT  nCount;

	for (nPos = 0, szFunctions.RemoveAll(); nPos < lstrlen(pszFunctions); nPos++)
	{
		for (nIndex = 0, nCount = (SkipSpaces(pszFunctions, nPos) < lstrlen(pszFunctions)) ? (MAXPODSTATISTICALFUNCTION - MINPODSTATISTICALFUNCTION + 1) : 0; nIndex < nCount; nIndex++)
		{
			if (!_tcsncmp(&pszFunctions[nPos], STRING(MINPODSTATISTICALFUNCTION + nIndex), lstrlen(STRING(MINPODSTATISTICALFUNCTION + nIndex))))
			{
				szFunctions.Add(STRING(MINPODSTATISTICALFUNCTIONLABEL + nIndex));
				nPos += lstrlen(STRING(MINPODSTATISTICALFUNCTION + nIndex));
				break;
			}
		}
		if ((nPos = (nIndex < nCount) ? SkipSpaces(pszFunctions, nPos) : -1) < lstrlen(pszFunctions) && nPos >= 0 && pszFunctions[nPos] == STRINGCHAR(IDS_POD_FUNCTIONS_SEPARATOR) && _tcsspn(&pszFunctions[nPos], CString(SPACE) + STRING(IDS_POD_FUNCTIONS_SEPARATOR)) < (size_t)lstrlen(&pszFunctions[nPos])) continue;
		break;
	}
	return((nPos == lstrlen(pszFunctions)) ? (INT)szFunctions.GetSize() : -1);
}
CString CALTELDatabaseEngine::TranslatePODFunctions(CONST CStringArray &szFunctions) CONST
{
	INT  nIndex[2];
	INT  nCount[2];
	CString  szText;
	CStringArray  szList;

	for (nIndex[0] = 0, nCount[0] = (INT)szFunctions.GetSize(), szList.Copy(szFunctions); nIndex[0] < nCount[0]; nIndex[0]++)
	{
		for (nIndex[1] = 0, nCount[1] = MAXPODSTATISTICALFUNCTIONLABEL - MINPODSTATISTICALFUNCTIONLABEL + 1; nIndex[1] < nCount[1]; nIndex[1]++)
		{
			if (!_tcsncmp(szFunctions.GetAt(nIndex[0]), STRING(MINPODSTATISTICALFUNCTIONLABEL + nIndex[1]), lstrlen(STRING(MINPODSTATISTICALFUNCTIONLABEL + nIndex[1]))))
			{
				szList.SetAt(nIndex[0], STRING(MINPODSTATISTICALFUNCTION + nIndex[1]));
				break;
			}
		}
	}
	for (nIndex[0] = 0, nCount[0] = (INT)szList.GetSize(); nIndex[0] < nCount[0]; nIndex[0]++)
	{
		szText += (nIndex[0] > 0) ? (STRING(IDS_POD_FUNCTIONS_SEPARATOR) + szList.GetAt(nIndex[0])) : szList.GetAt(nIndex[0]);
		continue;
	}
	return szText;
}

BOOL CALTELDatabaseEngine::CheckPODFunctionsColor(INT nColor) CONST
{
	return(((nColor >= 0 && nColor < 256 * 256 * 256) || (nColor >= PALETTEINDEX(MINCOLORPALETTEINDEX) && nColor <= PALETTEINDEX(MAXCOLORPALETTEINDEX)) || nColor == -1) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::EnumPODStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	nStatus.RemoveAll();
	szStatus.RemoveAll();
	nStatus.Add(PODLAYOUT_RECORDSTATUS_NEW);
	nStatus.Add(PODLAYOUT_RECORDSTATUS_DRAFT);
	nStatus.Add(PODLAYOUT_RECORDSTATUS_CHANGED);
	nStatus.Add(PODLAYOUT_RECORDSTATUS_DELETED);
	szStatus.Add(STRING(IDS_POD_RECORDSTATUS_NEW));
	szStatus.Add(STRING(IDS_POD_RECORDSTATUS_DRAFT));
	szStatus.Add(STRING(IDS_POD_RECORDSTATUS_CHANGED));
	szStatus.Add(STRING(IDS_POD_RECORDSTATUS_DELETED));
	return((INT)szStatus.GetSize());
}

BOOL CALTELDatabaseEngine::CheckPODStatus(LPCTSTR pszStatus) CONST
{
	if (!lstrcmp(pszStatus, STRING(IDS_POD_RECORDSTATUS_DBMS_NEW))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_POD_RECORDSTATUS_DBMS_DRAFT))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_POD_RECORDSTATUS_DBMS_CHANGED))) return TRUE;
	if (!lstrcmp(pszStatus, STRING(IDS_POD_RECORDSTATUS_DBMS_DELETED))) return TRUE;
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetPODStatusLength()) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::GetPODStatusLength() CONST
{
	return 1;
}

INT CALTELDatabaseEngine::TranslatePODStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	if (bDBMS)
	{
		if (!lstrcmp(pszStatus, STRING(IDS_POD_RECORDSTATUS_DBMS_NEW))) return PODLAYOUT_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_POD_RECORDSTATUS_DBMS_DRAFT))) return PODLAYOUT_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_POD_RECORDSTATUS_DBMS_CHANGED))) return PODLAYOUT_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_POD_RECORDSTATUS_DBMS_DELETED))) return PODLAYOUT_RECORDSTATUS_DELETED;
	}
	else
	{
		if (!lstrcmp(pszStatus, STRING(IDS_POD_RECORDSTATUS_NEW))) return PODLAYOUT_RECORDSTATUS_NEW;
		if (!lstrcmp(pszStatus, STRING(IDS_POD_RECORDSTATUS_DRAFT))) return PODLAYOUT_RECORDSTATUS_DRAFT;
		if (!lstrcmp(pszStatus, STRING(IDS_POD_RECORDSTATUS_CHANGED))) return PODLAYOUT_RECORDSTATUS_CHANGED;
		if (!lstrcmp(pszStatus, STRING(IDS_POD_RECORDSTATUS_DELETED))) return PODLAYOUT_RECORDSTATUS_DELETED;
	}
	return((lstrlen(pszStatus) >= 0 && lstrlen(pszStatus) <= GetPODStatusLength()) ? PODLAYOUT_RECORDSTATUS_NONE : 0);
}
CString CALTELDatabaseEngine::TranslatePODStatus(INT nStatus, BOOL bDBMS) CONST
{
	if (nStatus == PODLAYOUT_RECORDSTATUS_NEW) return((!bDBMS) ? STRING(IDS_POD_RECORDSTATUS_NEW) : STRING(IDS_POD_RECORDSTATUS_DBMS_NEW));
	if (nStatus == PODLAYOUT_RECORDSTATUS_DRAFT) return((!bDBMS) ? STRING(IDS_POD_RECORDSTATUS_DRAFT) : STRING(IDS_POD_RECORDSTATUS_DBMS_DRAFT));
	if (nStatus == PODLAYOUT_RECORDSTATUS_CHANGED) return((!bDBMS) ? STRING(IDS_POD_RECORDSTATUS_CHANGED) : STRING(IDS_POD_RECORDSTATUS_DBMS_CHANGED));
	if (nStatus == PODLAYOUT_RECORDSTATUS_DELETED) return((!bDBMS) ? STRING(IDS_POD_RECORDSTATUS_DELETED) : STRING(IDS_POD_RECORDSTATUS_DBMS_DELETED));
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::GetANDIDColumnCharWidth() CONST
{
	return GetTMParameterTagLength();
}

COLORREF CALTELDatabaseEngine::GetANDIDColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetANDDescriptionColumnCharWidth() CONST
{
	return GetTMParameterDescriptionLength();
}

COLORREF CALTELDatabaseEngine::GetANDDescriptionColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetANDValueColumnCharWidth() CONST
{
	return 16;
}

COLORREF CALTELDatabaseEngine::GetANDValueColumnColor() CONST
{
	return VGA_COLOR_GRAY;
}

INT CALTELDatabaseEngine::GetANDUnitColumnCharWidth() CONST
{
	return GetTMParameterUnitLength();
}

COLORREF CALTELDatabaseEngine::GetANDUnitColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetANDChangeTMUnitColumnCharWidth() CONST
{
	return GetTMPacketTagLength();
}

COLORREF CALTELDatabaseEngine::GetANDChangeTMUnitColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetANDUpdateTMUnitColumnCharWidth() CONST
{
	return GetTMPacketTagLength();
}

COLORREF CALTELDatabaseEngine::GetANDUpdateTMUnitColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetANDChangeTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetANDChangeTimeColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetANDUpdateTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetANDUpdateTimeColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetANDExpectedValuesColumnCharWidth() CONST
{
	return 2 * GetANDValueColumnCharWidth();
}

COLORREF CALTELDatabaseEngine::GetANDExpectedValuesColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetGRDIDColumnCharWidth() CONST
{
	return GetTMParameterTagLength();
}

COLORREF CALTELDatabaseEngine::GetGRDIDColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetGRDDescriptionColumnCharWidth() CONST
{
	return GetTMParameterDescriptionLength();
}

COLORREF CALTELDatabaseEngine::GetGRDDescriptionColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetGRDValueColumnCharWidth() CONST
{
	return 16;
}

COLORREF CALTELDatabaseEngine::GetGRDValueColumnColor() CONST
{
	return VGA_COLOR_GRAY;
}

INT CALTELDatabaseEngine::GetGRDUnitColumnCharWidth() CONST
{
	return GetTMParameterUnitLength();
}

COLORREF CALTELDatabaseEngine::GetGRDUnitColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetGRDRangeColumnCharWidth() CONST
{
	return 16;
}

COLORREF CALTELDatabaseEngine::GetGRDRangeColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetGRDLineColumnCharWidth() CONST
{
	return 16;
}

INT CALTELDatabaseEngine::GetGRDChangeTMUnitColumnCharWidth() CONST
{
	return GetTMPacketTagLength();
}

COLORREF CALTELDatabaseEngine::GetGRDChangeTMUnitColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetGRDUpdateTMUnitColumnCharWidth() CONST
{
	return GetTMPacketTagLength();
}

COLORREF CALTELDatabaseEngine::GetGRDUpdateTMUnitColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetGRDChangeTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetGRDChangeTimeColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetGRDUpdateTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetGRDUpdateTimeColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetOOLIDColumnCharWidth() CONST
{
	return GetTMParameterTagLength();
}

INT CALTELDatabaseEngine::GetOOLDescriptionColumnCharWidth() CONST
{
	return GetTMParameterDescriptionLength();
}

INT CALTELDatabaseEngine::GetOOLValueColumnCharWidth() CONST
{
	return 16;
}

INT CALTELDatabaseEngine::GetOOLLimitColumnCharWidth() CONST
{
	return 24;
}

INT CALTELDatabaseEngine::GetOOLUnitColumnCharWidth() CONST
{
	return GetTMParameterUnitLength();
}

INT CALTELDatabaseEngine::GetOOLTypeColumnCharWidth() CONST
{
	return 8;
}

INT CALTELDatabaseEngine::GetOOLTMTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

INT CALTELDatabaseEngine::GetOOLTMUnitColumnCharWidth() CONST
{
	return GetTMPacketTagLength();
}

INT CALTELDatabaseEngine::GetPODIDColumnCharWidth() CONST
{
	return GetTMParameterTagLength();
}

INT CALTELDatabaseEngine::GetPODDescriptionColumnCharWidth() CONST
{
	return GetTMParameterDescriptionLength();
}

INT CALTELDatabaseEngine::GetPODValueColumnCharWidth() CONST
{
	return 16;
}

INT CALTELDatabaseEngine::GetPODUnitColumnCharWidth() CONST
{
	return GetTMParameterUnitLength();
}

INT CALTELDatabaseEngine::GetPODTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetPODFunctionsColor() CONST
{
	return VGA_COLOR_BLACK;
}

COLORREF CALTELDatabaseEngine::GetPODParametersColor() CONST
{
	return VGA_COLOR_BLUE;
}

COLORREF CALTELDatabaseEngine::GetPODExpressionColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTPEPIDColumnCharWidth() CONST
{
	return GetTMParameterTagLength();
}

COLORREF CALTELDatabaseEngine::GetTPEPIDColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetTPEPDescriptionColumnCharWidth() CONST
{
	return GetTMParameterDescriptionLength();
}

COLORREF CALTELDatabaseEngine::GetTPEPDescriptionColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetTPEPValueColumnCharWidth() CONST
{
	return 16;
}

COLORREF CALTELDatabaseEngine::GetTPEPValueColumnColor() CONST
{
	return VGA_COLOR_GRAY;
}

INT CALTELDatabaseEngine::GetTPEPUnitColumnCharWidth() CONST
{
	return GetTMParameterUnitLength();
}

COLORREF CALTELDatabaseEngine::GetTPEPUnitColumnColor() CONST
{
	return VGA_COLOR_BLUE;
}

INT CALTELDatabaseEngine::GetTPEPChangeTMUnitColumnCharWidth() CONST
{
	return GetTMPacketTagLength();
}

COLORREF CALTELDatabaseEngine::GetTPEPChangeTMUnitColumnColor() CONST
{
	return VGA_COLOR_GRAY;
}

INT CALTELDatabaseEngine::GetTPEPUpdateTMUnitColumnCharWidth() CONST
{
	return GetTMPacketTagLength();
}

COLORREF CALTELDatabaseEngine::GetTPEPUpdateTMUnitColumnColor() CONST
{
	return VGA_COLOR_GRAY;
}

INT CALTELDatabaseEngine::GetTPEPChangeTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTPEPChangeTimeColumnColor() CONST
{
	return VGA_COLOR_GRAY;
}

INT CALTELDatabaseEngine::GetTPEPUpdateTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTPEPUpdateTimeColumnColor() CONST
{
	return VGA_COLOR_GRAY;
}

INT CALTELDatabaseEngine::GetTCManualStackNumberColumnCharWidth() CONST
{
	return 6;
}

COLORREF CALTELDatabaseEngine::GetTCManualStackNumberColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackNameColumnCharWidth() CONST
{
	return GetTCFunctionNameLength();
}

COLORREF CALTELDatabaseEngine::GetTCManualStackNameColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackDescriptionColumnCharWidth() CONST
{
	return GetTCFunctionDescriptionLength();
}

COLORREF CALTELDatabaseEngine::GetTCManualStackDescriptionColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackCategoryColumnCharWidth() CONST
{
	INT  nFlag;
	INT  nFlags;
	INT  nLength;
	CStringArray  szHazFlags;
	CLongUIntArray  nHazFlags;

	for (nFlag = 0, nFlags = EnumTCFunctionHazardousFlags(szHazFlags, nHazFlags), nLength = 0; nFlag < nFlags; nFlag++)
	{
		nLength = max(szHazFlags.GetAt(nFlag).GetLength(), nLength);
		continue;
	}
	return nLength;
}

COLORREF CALTELDatabaseEngine::GetTCManualStackCategoryColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackSubSystemColumnCharWidth() CONST
{
	return GetTCFunctionDestinationSubSystemLength() + GetTCPacketAPIDLength();
}

COLORREF CALTELDatabaseEngine::GetTCManualStackSubSystemColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackArgumentsColumnCharWidth() CONST
{
	return 48;
}

COLORREF CALTELDatabaseEngine::GetTCManualStackArgumentsColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackFlagsColumnCharWidth() CONST
{
	return 10;
}

COLORREF CALTELDatabaseEngine::GetTCManualStackFlagsColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackTCPacketColumnCharWidth() CONST
{
	return GetTCPacketTagLength() + GetTCPacketAPIDLength();
}

COLORREF CALTELDatabaseEngine::GetTCManualStackTCPacketColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackDispatchTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCManualStackDispatchTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackReleaseTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCManualStackReleaseTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackReleaseTimeOffsetColumnCharWidth() CONST
{
	return GetTCSequenceEntryReleaseDeltaTimeLength();
}

COLORREF CALTELDatabaseEngine::GetTCManualStackReleaseTimeOffsetColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackExecutionTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCManualStackExcutionTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackExecutionTimeOffsetColumnCharWidth() CONST
{
	return GetTCSequenceEntryExecutionDeltaTimeLength();
}

COLORREF CALTELDatabaseEngine::GetTCManualStackExcutionTimeOffsetColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackAuthorizationColumnCharWidth() CONST
{
	return 16;
}

COLORREF CALTELDatabaseEngine::GetTCManualStackAuthorizationColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackPTVTimeWindowColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return 3 * tTimeTag.Format().GetLength() / 2;
}

COLORREF CALTELDatabaseEngine::GetTCManualStackPTVTimeWindowColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackPTVChecksColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCManualStackPTVChecksColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackPTVResultColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCManualStackPTVResultColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackPEVChecksColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCManualStackPEVChecksColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackPEVResultColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCManualStackPEVResultColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackCEVTimeWindowColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return 3 * tTimeTag.Format().GetLength() / 2;
}

COLORREF CALTELDatabaseEngine::GetTCManualStackCEVTimeWindowColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackCEVChecksColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCManualStackCEVChecksColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCManualStackStatusColumnCharWidth() CONST
{
	return 16;
}

COLORREF CALTELDatabaseEngine::GetTCManualStackStatusColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackNumberColumnCharWidth() CONST
{
	return 6;
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackNumberColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackNameColumnCharWidth() CONST
{
	return GetTCFunctionNameLength();
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackNameColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackDescriptionColumnCharWidth() CONST
{
	return GetTCFunctionDescriptionLength();
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackDescriptionColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackCategoryColumnCharWidth() CONST
{
	INT  nFlag;
	INT  nFlags;
	INT  nLength;
	CStringArray  szHazFlags;
	CLongUIntArray  nHazFlags;

	for (nFlag = 0, nFlags = EnumTCFunctionHazardousFlags(szHazFlags, nHazFlags), nLength = 0; nFlag < nFlags; nFlag++)
	{
		nLength = max(szHazFlags.GetAt(nFlag).GetLength(), nLength);
		continue;
	}
	return nLength;
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackCategoryColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackSubSystemColumnCharWidth() CONST
{
	return GetTCFunctionDestinationSubSystemLength() + GetTCPacketAPIDLength();
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackSubSystemColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackArgumentsColumnCharWidth() CONST
{
	return 48;
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackArgumentsColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackFlagsColumnCharWidth() CONST
{
	return 10;
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackFlagsColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackTCPacketColumnCharWidth() CONST
{
	return GetTCPacketTagLength() + GetTCPacketAPIDLength();
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackTCPacketColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackDispatchTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackDispatchTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackReleaseTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackReleaseTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackReleaseTimeOffsetColumnCharWidth() CONST
{
	return GetTCSequenceEntryReleaseDeltaTimeLength();
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackReleaseTimeOffsetColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackTransmissionTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackTransmissionTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackExecutionTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackExcutionTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackExecutionTimeOffsetColumnCharWidth() CONST
{
	return GetTCSequenceEntryExecutionDeltaTimeLength();
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackExcutionTimeOffsetColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackAuthorizationColumnCharWidth() CONST
{
	return 16;
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackAuthorizationColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackPTVTimeWindowColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return 3 * tTimeTag.Format().GetLength() / 2;
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackPTVTimeWindowColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackPTVChecksColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackPTVChecksColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackPTVResultColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackPTVResultColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackPEVChecksColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackPEVChecksColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackPEVResultColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackPEVResultColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackCEVTimeWindowColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return 3 * tTimeTag.Format().GetLength() / 2;
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackCEVTimeWindowColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackCEVChecksColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackCEVChecksColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackCEVResultColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackCEVResultColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCAutomaticStackStatusColumnCharWidth() CONST
{
	return 24;
}

COLORREF CALTELDatabaseEngine::GetTCAutomaticStackStatusColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorNameColumnCharWidth() CONST
{
	return GetTCProcedureNameLength();
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorNameColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorDescriptionColumnCharWidth() CONST
{
	return GetTCProcedureDescriptionLength();
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorDescriptionColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorCommentsColumnCharWidth() CONST
{
	return 32;
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorCommentsColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorAuthorColumnCharWidth() CONST
{
	return 12;
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorAuthorColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorCreationTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorCreationTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorModificationTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorModificationTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorVerificationStatusColumnCharWidth() CONST
{
	return 12;
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorVerificationStatusColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorNumberOfThreadsColumnCharWidth() CONST
{
	return 3;
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorNumberOfThreadsColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorArgumentsColumnCharWidth() CONST
{
	return 48;
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorArgumentsColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorTriggerTypeColumnCharWidth() CONST
{
	return 24;
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorTriggerTypeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorExecutionModeColumnCharWidth() CONST
{
	return 16;
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorExecutionModeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorExecutionCountColumnCharWidth() CONST
{
	return 10;
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorExecutionCountColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorRunningStateColumnCharWidth() CONST
{
	return 16;
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorRunningStateColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorAcknowledgeRequestColumnCharWidth() CONST
{
	return 32;
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorAcknowledgeRequestColumnColor() CONST
{
	return VGA_COLOR_LTRED;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorAckRequestTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorAckRequestTimeColumnColor() CONST
{
	return VGA_COLOR_LTRED;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorPEVChecksColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorPEVChecksColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorCEVChecksColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorCEVChecksColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorStartTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorStartTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCProceduresMonitorEndTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCProceduresMonitorEndTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersNumberCharWidth() CONST
{
	return 6;
}

COLORREF CALTELDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersNumberColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersTimeCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersValueCharWidth() CONST
{
	return 16;
}

COLORREF CALTELDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersValueColumnColor() CONST
{
	return VGA_COLOR_GRAY;
}

INT CALTELDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersUnitCharWidth() CONST
{
	return GetTMParameterUnitLength();
}

COLORREF CALTELDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersUnitColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCDiagnosticsOversamplingDumpRawDataNumberCharWidth() CONST
{
	return 6;
}

COLORREF CALTELDatabaseEngine::GetTCDiagnosticsOversamplingDumpRawDataNumberColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCDiagnosticsOversamplingDumpRawDataTimeCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCDiagnosticsOversamplingDumpRawDataTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCDiagnosticsOversamplingDumpRawDataContentsCharWidth() CONST
{
	return 64;
}

COLORREF CALTELDatabaseEngine::GetTCDiagnosticsOversamplingDumpRawDataContentsColumnColor() CONST
{
	return VGA_COLOR_GRAY;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesSummaryNameColumnCharWidth() CONST
{
	return 16;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesSummaryNameColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesSummaryAPIDColumnCharWidth() CONST
{
	return 8;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesSummaryAPIDColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesSummarySubScheduleIDColumnCharWidth() CONST
{
	return 8;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesSummarySubScheduleIDColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesSummaryLimitColumnCharWidth() CONST
{
	return 12;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesSummaryLimitColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesSummaryCountColumnCharWidth() CONST
{
	return 12;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesSummaryCountColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesSummaryUpdateTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesSummaryUpdateTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesSummaryStatusColumnCharWidth() CONST
{
	return 24;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesSummaryStatusColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsNumberColumnCharWidth() CONST
{
	return 6;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsNumberColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsNameColumnCharWidth() CONST
{
	return GetTCFunctionNameLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsNameColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsComputerColumnCharWidth() CONST
{
	return 16;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsComputerColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCommandSourceColumnCharWidth() CONST
{
	return 24;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCommandSourceColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsDescriptionColumnCharWidth() CONST
{
	return GetTCFunctionDescriptionLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsDescriptionColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCategoryColumnCharWidth() CONST
{
	INT  nFlag;
	INT  nFlags;
	INT  nLength;
	CStringArray  szHazFlags;
	CLongUIntArray  nHazFlags;

	for (nFlag = 0, nFlags = EnumTCFunctionHazardousFlags(szHazFlags, nHazFlags), nLength = 0; nFlag < nFlags; nFlag++)
	{
		nLength = max(szHazFlags.GetAt(nFlag).GetLength(), nLength);
		continue;
	}
	return nLength;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCategoryColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsSubSystemColumnCharWidth() CONST
{
	return GetTCFunctionDestinationSubSystemLength() + GetTCPacketAPIDLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsSubSystemColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsArgumentsColumnCharWidth() CONST
{
	return 48;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsArgumentsColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsFlagsColumnCharWidth() CONST
{
	return 10;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsFlagsColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsTCPacketColumnCharWidth() CONST
{
	return GetTCPacketTagLength() + GetTCPacketAPIDLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsTCPacketColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPSCColumnCharWidth() CONST
{
	return 8;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPSCColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsDispatchTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsDispatchTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsReleaseTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsReleaseTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsReleaseTimeOffsetColumnCharWidth() CONST
{
	return GetTCSequenceEntryReleaseDeltaTimeLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsReleaseTimeOffsetColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsTransmissionTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsTransmissionTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsExecutionTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsExcutionTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsExecutionTimeOffsetColumnCharWidth() CONST
{
	return GetTCSequenceEntryExecutionDeltaTimeLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsExcutionTimeOffsetColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsAuthorizationColumnCharWidth() CONST
{
	return 16;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsAuthorizationColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPTVTimeWindowColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return 3 * tTimeTag.Format().GetLength() / 2;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPTVTimeWindowColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPTVChecksColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPTVChecksColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPTVResultColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPTVResultColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPEVChecksColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPEVChecksColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPEVResultColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPEVResultColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCEVTimeWindowColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return 3 * tTimeTag.Format().GetLength() / 2;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCEVTimeWindowColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCEVChecksColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCEVChecksColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCEVResultColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCEVResultColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsStatusColumnCharWidth() CONST
{
	return 24;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardBufferQueuesDetailsStatusColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardMemoryImagesProcessorColumnCharWidth() CONST
{
	return GetOBProcessorNameLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardMemoryImagesProcessorColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardMemoryImagesAddressRangeColumnCharWidth() CONST
{
	return 24;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardMemoryImagesAddressRangeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardMemoryImagesSizeColumnCharWidth() CONST
{
	return 12;
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardMemoryImagesSizeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardMemoryImagesPatchTCColumnCharWidth() CONST
{
	return GetOBProcessorPatchCommandLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardMemoryImagesPatchTCColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardMemoryImagesLastPatchTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardMemoryImagesLastPatchTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardMemoryImagesDumpTCColumnCharWidth() CONST
{
	return GetOBProcessorDumpCommandLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardMemoryImagesDumpTCColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardMemoryImagesDumpTMColumnCharWidth() CONST
{
	return GetOBProcessorDumpPacketLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardMemoryImagesDumpTMColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCOnBoardMemoryImagesLastDumpTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCOnBoardMemoryImagesLastDumpTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryNumberColumnCharWidth() CONST
{
	return 6;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryNumberColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryNameColumnCharWidth() CONST
{
	return GetTCFunctionNameLength();
}

COLORREF CALTELDatabaseEngine::GetTCHistoryNameColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryComputerColumnCharWidth() CONST
{
	return 16;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryComputerColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryCommandSourceColumnCharWidth() CONST
{
	return 24;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryCommandSourceColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryDescriptionColumnCharWidth() CONST
{
	return GetTCFunctionDescriptionLength();
}

COLORREF CALTELDatabaseEngine::GetTCHistoryDescriptionColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryCategoryColumnCharWidth() CONST
{
	INT  nFlag;
	INT  nFlags;
	INT  nLength;
	CStringArray  szHazFlags;
	CLongUIntArray  nHazFlags;

	for (nFlag = 0, nFlags = EnumTCFunctionHazardousFlags(szHazFlags, nHazFlags), nLength = 0; nFlag < nFlags; nFlag++)
	{
		nLength = max(szHazFlags.GetAt(nFlag).GetLength(), nLength);
		continue;
	}
	return nLength;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryCategoryColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistorySubSystemColumnCharWidth() CONST
{
	return GetTCFunctionDestinationSubSystemLength() + GetTCPacketAPIDLength();
}

COLORREF CALTELDatabaseEngine::GetTCHistorySubSystemColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryArgumentsColumnCharWidth() CONST
{
	return 48;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryArgumentsColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryFlagsColumnCharWidth() CONST
{
	return 10;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryFlagsColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryTCPacketColumnCharWidth() CONST
{
	return GetTCPacketTagLength() + GetTCPacketAPIDLength();
}

COLORREF CALTELDatabaseEngine::GetTCHistoryTCPacketColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryDispatchTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCHistoryDispatchTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryReleaseTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCHistoryReleaseTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryReleaseTimeOffsetColumnCharWidth() CONST
{
	return GetTCSequenceEntryReleaseDeltaTimeLength();
}

COLORREF CALTELDatabaseEngine::GetTCHistoryReleaseTimeOffsetColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryTransmissionTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCHistoryTransmissionTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryExecutionTimeColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return tTimeTag.Format().GetLength();
}

COLORREF CALTELDatabaseEngine::GetTCHistoryExcutionTimeColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryExecutionTimeOffsetColumnCharWidth() CONST
{
	return GetTCSequenceEntryExecutionDeltaTimeLength();
}

COLORREF CALTELDatabaseEngine::GetTCHistoryExcutionTimeOffsetColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryAuthorizationColumnCharWidth() CONST
{
	return 16;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryAuthorizationColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryPTVTimeWindowColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return 3 * tTimeTag.Format().GetLength() / 2;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryPTVTimeWindowColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryPTVChecksColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryPTVChecksColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryPTVResultColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryPTVResultColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryPEVChecksColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryPEVChecksColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryPEVResultColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryPEVResultColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryCEVTimeWindowColumnCharWidth() CONST
{
	CTimeTag  tTimeTag;

	return 3 * tTimeTag.Format().GetLength() / 2;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryCEVTimeWindowColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryCEVChecksColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryCEVChecksColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryCEVResultColumnCharWidth() CONST
{
	return 4;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryCEVResultColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

INT CALTELDatabaseEngine::GetTCHistoryStatusColumnCharWidth() CONST
{
	return 24;
}

COLORREF CALTELDatabaseEngine::GetTCHistoryStatusColumnColor() CONST
{
	return VGA_COLOR_BLACK;
}

BOOL CALTELDatabaseEngine::CreateTables(CDatabaseTableView *pView, ULONGLONG nComponent)
{
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPACKET)
	{
		pView->m_pDatabaseTMPackets[0].Copy(GetTMPackets());
		pView->m_pDatabaseTMPackets[1].Copy(GetTMPackets());
		pView->m_pDatabaseTMPacketHeaders[0].Copy(GetTMPacketHeaders());
		pView->m_pDatabaseTMPacketHeaders[1].Copy(GetTMPacketHeaders());
		pView->m_pDatabaseTMPacketStreams[0].Copy(GetTMPacketStreams());
		pView->m_pDatabaseTMPacketStreams[1].Copy(GetTMPacketStreams());
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCFUNCTION)
	{
		pView->m_pDatabaseTCFunctions[0].Copy(GetTCFunctions());
		pView->m_pDatabaseTCFunctions[1].Copy(GetTCFunctions());
		pView->m_pDatabaseTCPackets[0].Copy(GetTCPackets());
		pView->m_pDatabaseTCPackets[1].Copy(GetTCPackets());
		pView->m_pDatabaseTCPreExeGroups[0].Copy(GetTCPreExeGroups());
		pView->m_pDatabaseTCPreExeGroups[1].Copy(GetTCPreExeGroups());
		pView->m_pDatabaseTCExeVerGroups[0].Copy(GetTCExeVerGroups());
		pView->m_pDatabaseTCExeVerGroups[1].Copy(GetTCExeVerGroups());
		pView->m_pDatabaseTCParameterSets[0].Copy(GetTCParameterSets());
		pView->m_pDatabaseTCParameterSets[1].Copy(GetTCParameterSets());
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		pView->m_pDatabaseTCSequences[0].Copy(GetTCSequences());
		pView->m_pDatabaseTCSequences[1].Copy(GetTCSequences());
		pView->m_pDatabaseTCFunctionBlocks[0].Copy(GetTCFunctionBlocks());
		pView->m_pDatabaseTCFunctionBlocks[1].Copy(GetTCFunctionBlocks());
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		pView->m_pDatabaseOBProcessors[0].Copy(GetOBProcessors());
		pView->m_pDatabaseOBProcessors[1].Copy(GetOBProcessors());
		pView->m_pDatabaseOBProcessorMemoryImages[0].Copy(GetOBProcessorMemoryImages());
		pView->m_pDatabaseOBProcessorMemoryImages[1].Copy(GetOBProcessorMemoryImages());
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPARAMETER)
	{
		pView->m_pDatabaseTMParameters[0].Copy(GetTMParameters());
		pView->m_pDatabaseTMParameters[1].Copy(GetTMParameters());
		pView->m_pDatabaseTMNumCalTables[0].Copy(GetTMNumCalTables());
		pView->m_pDatabaseTMNumCalTables[1].Copy(GetTMNumCalTables());
		pView->m_pDatabaseTMTxtCalTables[0].Copy(GetTMTxtCalTables());
		pView->m_pDatabaseTMTxtCalTables[1].Copy(GetTMTxtCalTables());
		pView->m_pDatabaseTMNumOolTables[0].Copy(GetTMNumOolTables());
		pView->m_pDatabaseTMNumOolTables[1].Copy(GetTMNumOolTables());
		pView->m_pDatabaseTMTxtOolTables[0].Copy(GetTMTxtOolTables());
		pView->m_pDatabaseTMTxtOolTables[1].Copy(GetTMTxtOolTables());
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCPARAMETER)
	{
		pView->m_pDatabaseTCParameters[0].Copy(GetTCParameters());
		pView->m_pDatabaseTCParameters[1].Copy(GetTCParameters());
		pView->m_pDatabaseTCNumCalTables[0].Copy(GetTCNumCalTables());
		pView->m_pDatabaseTCNumCalTables[1].Copy(GetTCNumCalTables());
		pView->m_pDatabaseTCTxtCalTables[0].Copy(GetTCTxtCalTables());
		pView->m_pDatabaseTCTxtCalTables[1].Copy(GetTCTxtCalTables());
		pView->m_pDatabaseTCNumOolTables[0].Copy(GetTCNumOolTables());
		pView->m_pDatabaseTCNumOolTables[1].Copy(GetTCNumOolTables());
		pView->m_pDatabaseTCTxtOolTables[0].Copy(GetTCTxtOolTables());
		pView->m_pDatabaseTCTxtOolTables[1].Copy(GetTCTxtOolTables());
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_AND)
	{
		pView->m_pANDLayouts[0].Copy(GetANDs());
		pView->m_pANDLayouts[1].Copy(GetANDs());
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_GRD)
	{
		pView->m_pGRDLayouts[0].Copy(GetGRDs());
		pView->m_pGRDLayouts[1].Copy(GetGRDs());
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_POD)
	{
		pView->m_pPODLayouts[0].Copy(GetPODs());
		pView->m_pPODLayouts[1].Copy(GetPODs());
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::SaveTables(CDatabaseTableView *pView, ULONGLONG nComponent, BOOL bAll, BOOL bPrompt)
{
	INT  nSet;
	INT  nSets;
	INT  nTable;
	INT  nTables;
	INT  nGroup;
	INT  nGroups;
	INT  nBlock;
	INT  nBlocks;
	INT  nImage;
	INT  nImages;
	INT  nPacket;
	INT  nPackets;
	INT  nLayout;
	INT  nLayouts;
	INT  nIndex[2];
	INT  nFunction;
	INT  nFunctions;
	INT  nSequence;
	INT  nSequences;
	INT  nProcessor;
	INT  nProcessors;
	INT  nParameter;
	INT  nParameters;
	CString  szError;
	CString  szMessage;
	CUIntArray  nTypes;
	CStringArray  szTables;
	CVersionInfo  cVersionInfo;
	CTableViewObject  *pTable;
	CDatabaseTMPacket  *pDatabaseTMPacket[2];
	CDatabaseTCPacket  *pDatabaseTCPacket[2];
	CDatabaseTCFunction  *pDatabaseTCFunction[2];
	CDatabaseTCSequence  *pDatabaseTCSequence[2];
	CDatabaseOBProcessor  *pDatabaseOBProcessor[2];
	CDatabaseTMParameter  *pDatabaseTMParameter[2];
	CDatabaseTCParameter  *pDatabaseTCParameter[2];
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable[2];
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable[2];
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable[2];
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable[2];
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable[2];
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable[2];
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable[2];
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable[2];
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup[2];
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup[2];
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet[2];
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock[2];
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage[2];
	CANDLayout  *pANDLayout[2];
	CGRDLayout  *pGRDLayout[2];
	CPODLayout  *pPODLayout[2];

	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPACKET)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseTMPacket[0] = pView->m_pDatabaseTMPackets[0].GetAt((nIndex[0] = pView->m_pDatabaseTMPackets[0].Find(pView->GetName())))) && CanSaveTables(pView, nComponent) && TransferTableData(pView, pDatabaseTMPacket[0]))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TMPACKET_SAVE_QUESTION), (LPCTSTR)pDatabaseTMPacket[0]->GetTag()), szError.Format(STRING(IDS_DATABASE_TABLE_TMPACKET_SAVE_FAILURE), (LPCTSTR)pDatabaseTMPacket[0]->GetTag()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pDatabaseTMPacket[1] = pView->m_pDatabaseTMPackets[1].GetAt(pView->m_pDatabaseTMPackets[1].Find(pDatabaseTMPacket[0]->GetTag()))))
					{
						if ((pDatabaseTMPacket[0]->Compare(pDatabaseTMPacket[1]) || Save(pDatabaseTMPacket[0])) && pDatabaseTMPacket[1]->Copy(pDatabaseTMPacket[0]))
						{
							pView->UpdateTableForms(pDatabaseTMPacket[0], ++nIndex[0]);
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseTMPacket[1] = new CDatabaseTMPacket))
					{
						if (pDatabaseTMPacket[1]->Copy(pDatabaseTMPacket[0]))
						{
							if ((nIndex[1] = pView->m_pDatabaseTMPackets[1].Add(pDatabaseTMPacket[1])) >= 0)
							{
								if (Save(pDatabaseTMPacket[0]))
								{
									pView->UpdateTableForms(pDatabaseTMPacket[0], ++nIndex[0]);
									break;
								}
								pView->m_pDatabaseTMPackets[1].RemoveAt(nIndex[1]);
							}
						}
						delete pDatabaseTMPacket[1];
					}
					ShowMessage(szError);
					return FALSE;
				}
			}
			if ((pDatabaseTMPacket[0] = (nIndex[0] < 0 && CanSaveTables(pView, nComponent)) ? pView->m_pDatabaseTMPackets[0].GetAt((nIndex[0] = InsertTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pView->GetName()))) : (CDatabaseTMPacket *)NULL))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TMPACKET_DISCARD_QUESTION), (LPCTSTR)pView->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TMPACKET_SAVE_FAILURE), (LPCTSTR)pView->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pDatabaseTMPacket[1] = pView->m_pDatabaseTMPackets[1].GetAt(pView->m_pDatabaseTMPackets[1].Find(pDatabaseTMPacket[0]->GetTag()))))
					{
						if ((pDatabaseTMPacket[0]->Compare(pDatabaseTMPacket[1]) || Save(pDatabaseTMPacket[0])) && pDatabaseTMPacket[1]->Copy(pDatabaseTMPacket[0]))
						{
							pView->UpdateTableForms(pDatabaseTMPacket[0], (nIndex[0] = -nIndex[0] - 1));
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseTMPacket[1] = pView->m_pDatabaseTMPackets[1].GetAt(pView->m_pDatabaseTMPackets[1].Find(pDatabaseTMPacket[0]->GetTag()))))
					{
						if (Save(pDatabaseTMPacket[0]))
						{
							pView->UpdateTableForms(pDatabaseTMPacket[0], (nIndex[0] = -nIndex[0] - 1));
							break;
						}
						DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseTMPacket[1] = new CDatabaseTMPacket))
					{
						if (pDatabaseTMPacket[1]->Copy(pDatabaseTMPacket[0]))
						{
							if ((nIndex[1] = pView->m_pDatabaseTMPackets[1].Add(pDatabaseTMPacket[1])) >= 0)
							{
								if (Save(pDatabaseTMPacket[0]))
								{
									pView->UpdateTableForms(pDatabaseTMPacket[0], (nIndex[0] = -nIndex[0] - 1));
									break;
								}
								pView->m_pDatabaseTMPackets[1].RemoveAt(nIndex[1]);
							}
						}
						delete pDatabaseTMPacket[1];
					}
					DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
					ShowMessage(szError);
					return FALSE;
				}
			}
			for (nTable = 0, nTables = EnumTables(pView, szTables, nTypes, TRUE)*bAll; nTable < nTables; nTable++)
			{
				if (TranslateTableNameToComponent(pView, szTables.GetAt(nTable)) & (DATABASE_SUBCOMPONENT_TMPACKETHEADER | DATABASE_SUBCOMPONENT_TMPACKETSTREAM))
				{
					if (CanSaveTables(pView, TranslateTableNameToComponent(pView, szTables.GetAt(nTable))))
					{
						SaveTableFieldData(pView, szTables.GetAt(nTable), TRUE);
						continue;
					}
				}
			}
			for (nPacket = 0, nPackets = (INT)(pView->m_pDatabaseTMPackets[0].GetSize()*bAll); nPacket < nPackets; nPacket++)
			{
				if ((pDatabaseTMPacket[0] = pView->m_pDatabaseTMPackets[0].GetAt(nPacket)) && pDatabaseTMPacket[0]->GetTag() != pView->GetName() && CheckTableData(pView, pDatabaseTMPacket[0]) && CheckTableData(pView, pDatabaseTMPacket[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TMPACKET_SAVE_QUESTION), (LPCTSTR)pDatabaseTMPacket[0]->GetTag()), szError.Format(STRING(IDS_DATABASE_TABLE_TMPACKET_SAVE_FAILURE), (LPCTSTR)pDatabaseTMPacket[0]->GetTag()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTMPacket[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTMPacket[1] = (pView->m_pDatabaseTMPackets[1].Find(pDatabaseTMPacket[0]->GetTag()) < 0 && !szError.IsEmpty()) ? new CDatabaseTMPacket : (CDatabaseTMPacket *)NULL))
					{
						if (pDatabaseTMPacket[1]->Copy(pDatabaseTMPacket[0]) && pView->m_pDatabaseTMPackets[1].Add(pDatabaseTMPacket[1]) >= 0) continue;
						delete pDatabaseTMPacket[1];
					}
				}
			}
			return(!bAll || !bPrompt || DestroyTables(pView, nComponent));
		}
		return(((pTable = pView->GetActiveTable()) && pTable->GetName() == TranslateComponentToTableName(pView, nComponent)) ? SaveTableFieldData(pView, pTable->GetName(), bPrompt) : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseTCFunction[0] = pView->m_pDatabaseTCFunctions[0].GetAt((nIndex[0] = pView->m_pDatabaseTCFunctions[0].Find(pView->GetName())))) && CanSaveTables(pView, nComponent) && TransferTableData(pView, pDatabaseTCFunction[0]))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTION_SAVE_QUESTION), (LPCTSTR)pDatabaseTCFunction[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTION_SAVE_FAILURE), (LPCTSTR)pDatabaseTCFunction[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pDatabaseTCFunction[1] = pView->m_pDatabaseTCFunctions[1].GetAt(pView->m_pDatabaseTCFunctions[1].Find(pDatabaseTCFunction[0]->GetName()))))
					{
						if ((pDatabaseTCFunction[0]->Compare(pDatabaseTCFunction[1]) || Save(pDatabaseTCFunction[0])) && pDatabaseTCFunction[1]->Copy(pDatabaseTCFunction[0]))
						{
							pView->UpdateTableForms(pDatabaseTCFunction[0], ++nIndex[0]);
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseTCFunction[1] = new CDatabaseTCFunction))
					{
						if (pDatabaseTCFunction[1]->Copy(pDatabaseTCFunction[0]))
						{
							if ((nIndex[1] = pView->m_pDatabaseTCFunctions[1].Add(pDatabaseTCFunction[1])) >= 0)
							{
								if (Save(pDatabaseTCFunction[0]))
								{
									pView->UpdateTableForms(pDatabaseTCFunction[0], ++nIndex[0]);
									break;
								}
								pView->m_pDatabaseTCFunctions[1].RemoveAt(nIndex[1]);
							}
						}
						delete pDatabaseTCFunction[1];
					}
					ShowMessage(szError);
					return FALSE;
				}
			}
			if ((pDatabaseTCFunction[0] = (nIndex[0] < 0 && CanSaveTables(pView, nComponent)) ? pView->m_pDatabaseTCFunctions[0].GetAt((nIndex[0] = InsertTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pView->GetName()))) : (CDatabaseTCFunction *)NULL))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTION_DISCARD_QUESTION), (LPCTSTR)pView->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTION_SAVE_FAILURE), (LPCTSTR)pView->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pDatabaseTCFunction[1] = pView->m_pDatabaseTCFunctions[1].GetAt(pView->m_pDatabaseTCFunctions[1].Find(pDatabaseTCFunction[0]->GetName()))))
					{
						if ((pDatabaseTCFunction[0]->Compare(pDatabaseTCFunction[1]) || Save(pDatabaseTCFunction[0])) && pDatabaseTCFunction[1]->Copy(pDatabaseTCFunction[0]))
						{
							pView->UpdateTableForms(pDatabaseTCFunction[0], (nIndex[0] = -nIndex[0] - 1));
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseTCFunction[1] = pView->m_pDatabaseTCFunctions[1].GetAt(pView->m_pDatabaseTCFunctions[1].Find(pDatabaseTCFunction[0]->GetName()))))
					{
						if (Save(pDatabaseTCFunction[0]))
						{
							pView->UpdateTableForms(pDatabaseTCFunction[0], (nIndex[0] = -nIndex[0] - 1));
							break;
						}
						DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseTCFunction[1] = new CDatabaseTCFunction))
					{
						if (pDatabaseTCFunction[1]->Copy(pDatabaseTCFunction[0]))
						{
							if ((nIndex[1] = pView->m_pDatabaseTCFunctions[1].Add(pDatabaseTCFunction[1])) >= 0)
							{
								if (Save(pDatabaseTCFunction[0]))
								{
									pView->UpdateTableForms(pDatabaseTCFunction[0], (nIndex[0] = -nIndex[0] - 1));
									break;
								}
								pView->m_pDatabaseTCFunctions[1].RemoveAt(nIndex[1]);
							}
						}
						delete pDatabaseTCFunction[1];
					}
					DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
					ShowMessage(szError);
					return FALSE;
				}
			}
			for (nTable = 0, nTables = EnumTables(pView, szTables, nTypes, TRUE)*bAll; nTable < nTables; nTable++)
			{
				if (TranslateTableNameToComponent(pView, szTables.GetAt(nTable)) & (DATABASE_SUBCOMPONENT_TCFUNCTIONPACKET | DATABASE_SUBCOMPONENT_TCFUNCTIONPREEXEGROUP | DATABASE_SUBCOMPONENT_TCFUNCTIONEXEVERGROUP | DATABASE_SUBCOMPONENT_TCPARAMETERSET))
				{
					if (CanSaveTables(pView, TranslateTableNameToComponent(pView, szTables.GetAt(nTable))))
					{
						SaveTableFieldData(pView, szTables.GetAt(nTable), TRUE);
						continue;
					}
				}
			}
			for (nFunction = 0, nFunctions = (INT)(pView->m_pDatabaseTCFunctions[0].GetSize()*bAll); nFunction < nFunctions; nFunction++)
			{
				if ((pDatabaseTCFunction[0] = pView->m_pDatabaseTCFunctions[0].GetAt(nFunction)) && pDatabaseTCFunction[0]->GetName() != pView->GetName() && CheckTableData(pView, pDatabaseTCFunction[0]) && CheckTableData(pView, pDatabaseTCFunction[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTION_SAVE_QUESTION), (LPCTSTR)pDatabaseTCFunction[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTION_SAVE_FAILURE), (LPCTSTR)pDatabaseTCFunction[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTCFunction[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTCFunction[1] = (pView->m_pDatabaseTCFunctions[1].Find(pDatabaseTCFunction[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CDatabaseTCFunction : (CDatabaseTCFunction *)NULL))
					{
						if (pDatabaseTCFunction[1]->Copy(pDatabaseTCFunction[0]) && pView->m_pDatabaseTCFunctions[1].Add(pDatabaseTCFunction[1]) >= 0) continue;
						delete pDatabaseTCFunction[1];
					}
				}
			}
			for (nPacket = 0, nPackets = (!pView->m_pDatabaseTCPackets[0].Compare(&pView->m_pDatabaseTCPackets[1])) ? (INT)(pView->m_pDatabaseTCPackets[0].GetSize()*bAll) : 0; nPacket < nPackets; nPacket++)
			{
				if ((pDatabaseTCPacket[0] = pView->m_pDatabaseTCPackets[0].GetAt(nPacket)) && CheckTableData(pView, pDatabaseTCPacket[0]) && CheckTableData(pView, pDatabaseTCPacket[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPACKET_SAVE_QUESTION), (LPCTSTR)pDatabaseTCPacket[0]->GetTag()), szError.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPACKET_SAVE_FAILURE), (LPCTSTR)pDatabaseTCPacket[0]->GetTag()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTCPacket[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTCPacket[1] = (pView->m_pDatabaseTCPackets[1].Find(pDatabaseTCPacket[0]->GetTag()) < 0 && !szError.IsEmpty()) ? new CDatabaseTCPacket : (CDatabaseTCPacket *)NULL))
					{
						if (pDatabaseTCPacket[1]->Copy(pDatabaseTCPacket[0]) && pView->m_pDatabaseTCPackets[1].Add(pDatabaseTCPacket[1]) >= 0) continue;
						delete pDatabaseTCPacket[1];
					}
				}
			}
			for (nGroup = 0, nGroups = (!pView->m_pDatabaseTCPreExeGroups[0].Compare(&pView->m_pDatabaseTCPreExeGroups[1])) ? (INT)(pView->m_pDatabaseTCPreExeGroups[0].GetSize()*bAll) : 0; nGroup < nGroups; nGroup++)
			{
				if ((pDatabaseTCPreExeGroup[0] = pView->m_pDatabaseTCPreExeGroups[0].GetAt(nGroup)) && CheckTableData(pView, pDatabaseTCPreExeGroup[0]) && CheckTableData(pView, pDatabaseTCPreExeGroup[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPREEXEGROUP_SAVE_QUESTION), (LPCTSTR)pDatabaseTCPreExeGroup[0]->GetID()), szError.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPREEXEGROUP_SAVE_FAILURE), (LPCTSTR)pDatabaseTCPreExeGroup[0]->GetID()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTCPreExeGroup[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTCPreExeGroup[1] = (pView->m_pDatabaseTCPreExeGroups[1].Find(pDatabaseTCPreExeGroup[0]->GetID()) < 0 && !szError.IsEmpty()) ? new CDatabaseTCPreExeGroup : (CDatabaseTCPreExeGroup *)NULL))
					{
						if (pDatabaseTCPreExeGroup[1]->Copy(pDatabaseTCPreExeGroup[0]) && pView->m_pDatabaseTCPreExeGroups[1].Add(pDatabaseTCPreExeGroup[1]) >= 0) continue;
						delete pDatabaseTCPreExeGroup[1];
					}
				}
			}
			for (nGroup = 0, nGroups = (!pView->m_pDatabaseTCExeVerGroups[0].Compare(&pView->m_pDatabaseTCExeVerGroups[1])) ? (INT)(pView->m_pDatabaseTCExeVerGroups[0].GetSize()*bAll) : 0; nGroup < nGroups; nGroup++)
			{
				if ((pDatabaseTCExeVerGroup[0] = pView->m_pDatabaseTCExeVerGroups[0].GetAt(nGroup)) && CheckTableData(pView, pDatabaseTCExeVerGroup[0]) && CheckTableData(pView, pDatabaseTCExeVerGroup[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONEXEVERGROUP_SAVE_QUESTION), (LPCTSTR)pDatabaseTCExeVerGroup[0]->GetID()), szError.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONEXEVERGROUP_SAVE_FAILURE), (LPCTSTR)pDatabaseTCExeVerGroup[0]->GetID()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTCExeVerGroup[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTCExeVerGroup[1] = (pView->m_pDatabaseTCExeVerGroups[1].Find(pDatabaseTCExeVerGroup[0]->GetID()) < 0 && !szError.IsEmpty()) ? new CDatabaseTCExeVerGroup : (CDatabaseTCExeVerGroup *)NULL))
					{
						if (pDatabaseTCExeVerGroup[1]->Copy(pDatabaseTCExeVerGroup[0]) && pView->m_pDatabaseTCExeVerGroups[1].Add(pDatabaseTCExeVerGroup[1]) >= 0) continue;
						delete pDatabaseTCExeVerGroup[1];
					}
				}
			}
			for (nSet = 0, nSets = (!pView->m_pDatabaseTCParameterSets[0].Compare(&pView->m_pDatabaseTCParameterSets[1])) ? (INT)(pView->m_pDatabaseTCParameterSets[0].GetSize()*bAll) : 0; nSet < nSets; nSet++)
			{
				if ((pDatabaseTCParameterSet[0] = pView->m_pDatabaseTCParameterSets[0].GetAt(nSet)) && CheckTableData(pView, pDatabaseTCParameterSet[0]) && CheckTableData(pView, pDatabaseTCParameterSet[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPARAMETERSET_SAVE_QUESTION), (LPCTSTR)pDatabaseTCParameterSet[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPARAMETERSET_SAVE_FAILURE), (LPCTSTR)pDatabaseTCParameterSet[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTCParameterSet[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTCParameterSet[1] = (pView->m_pDatabaseTCParameterSets[1].Find(pDatabaseTCParameterSet[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CDatabaseTCParameterSet : (CDatabaseTCParameterSet *)NULL))
					{
						if (pDatabaseTCParameterSet[1]->Copy(pDatabaseTCParameterSet[0]) && pView->m_pDatabaseTCParameterSets[1].Add(pDatabaseTCParameterSet[1]) >= 0) continue;
						delete pDatabaseTCParameterSet[1];
					}
				}
			}
			return(!bAll || !bPrompt || DestroyTables(pView, nComponent));
		}
		return(((pTable = pView->GetActiveTable()) && pTable->GetName() == TranslateComponentToTableName(pView, nComponent)) ? SaveTableFieldData(pView, pTable->GetName(), bPrompt) : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseTCSequence[0] = pView->m_pDatabaseTCSequences[0].GetAt((nIndex[0] = pView->m_pDatabaseTCSequences[0].Find(pView->GetName())))) && CanSaveTables(pView, nComponent) && TransferTableData(pView, pDatabaseTCSequence[0]))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCSequence[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCSequence[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pDatabaseTCSequence[1] = pView->m_pDatabaseTCSequences[1].GetAt(pView->m_pDatabaseTCSequences[1].Find(pDatabaseTCSequence[0]->GetName()))))
					{
						if ((pDatabaseTCSequence[0]->Compare(pDatabaseTCSequence[1]) || Save(pDatabaseTCSequence[0])) && pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0]))
						{
							pView->UpdateTableForms(pDatabaseTCSequence[0], nIndex[0] + 1);
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseTCSequence[1] = new CDatabaseTCSequence))
					{
						if (pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0]))
						{
							if ((nIndex[1] = pView->m_pDatabaseTCSequences[1].Add(pDatabaseTCSequence[1])) >= 0)
							{
								if (Save(pDatabaseTCSequence[0]))
								{
									if (pView->m_nDatabaseTCSequenceIndex == nIndex[0])
									{
										pView->m_nDatabaseTCSequenceIndex = -1;
										pView->UpdateTableForms(pDatabaseTCSequence[0], -nIndex[0] - 1);
										break;
									}
									pView->UpdateTableForms(pDatabaseTCSequence[0], nIndex[0] + 1);
									break;
								}
								pView->m_pDatabaseTCSequences[1].RemoveAt(nIndex[1]);
							}
						}
						delete pDatabaseTCSequence[1];
					}
					ShowMessage(szError);
					return FALSE;
				}
			}
			if ((pDatabaseTCSequence[0] = (nIndex[0] < 0 && CanSaveTables(pView, nComponent)) ? pView->m_pDatabaseTCSequences[0].GetAt((nIndex[0] = InsertTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pView->GetName()))) : (CDatabaseTCSequence *)NULL))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCE_DISCARD_QUESTION), (LPCTSTR)pView->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCE_SAVE_FAILURE), (LPCTSTR)pView->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pDatabaseTCSequence[1] = pView->m_pDatabaseTCSequences[1].GetAt(pView->m_pDatabaseTCSequences[1].Find(pDatabaseTCSequence[0]->GetName()))))
					{
						if ((pDatabaseTCSequence[0]->Compare(pDatabaseTCSequence[1]) || Save(pDatabaseTCSequence[0])) && pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0]))
						{
							pView->UpdateTableForms(pDatabaseTCSequence[0], -nIndex[0] - 1);
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseTCSequence[1] = pView->m_pDatabaseTCSequences[1].GetAt(pView->m_pDatabaseTCSequences[1].Find(pDatabaseTCSequence[0]->GetName()))))
					{
						if (Save(pDatabaseTCSequence[0]))
						{
							pView->UpdateTableForms(pDatabaseTCSequence[0], -nIndex[0] - 1);
							break;
						}
						DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseTCSequence[1] = new CDatabaseTCSequence))
					{
						if (pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0]))
						{
							if ((nIndex[1] = pView->m_pDatabaseTCSequences[1].Add(pDatabaseTCSequence[1])) >= 0)
							{
								if (Save(pDatabaseTCSequence[0]))
								{
									pView->UpdateTableForms(pDatabaseTCSequence[0], -nIndex[0] - 1);
									break;
								}
								pView->m_pDatabaseTCSequences[1].RemoveAt(nIndex[1]);
							}
						}
						delete pDatabaseTCSequence[1];
					}
					DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
					ShowMessage(szError);
					return FALSE;
				}
			}
			for (nTable = 0, nTables = EnumTables(pView, szTables, nTypes, TRUE)*bAll; nTable < nTables; nTable++)
			{
				if (TranslateTableNameToComponent(pView, szTables.GetAt(nTable)) & DATABASE_SUBCOMPONENT_TCFUNCTIONBLOCK)
				{
					if (CanSaveTables(pView, TranslateTableNameToComponent(pView, szTables.GetAt(nTable))))
					{
						SaveTableFieldData(pView, szTables.GetAt(nTable), TRUE);
						continue;
					}
				}
			}
			for (nSequence = 0, nSequences = (INT)(pView->m_pDatabaseTCSequences[0].GetSize()*bAll); nSequence < nSequences; nSequence++)
			{
				if ((pDatabaseTCSequence[0] = (nSequence != pView->m_nDatabaseTCSequenceIndex) ? pView->m_pDatabaseTCSequences[0].GetAt(nSequence) : (CDatabaseTCSequence *)NULL) && pDatabaseTCSequence[0]->GetName() != pView->GetName() && CheckTableData(pView, pDatabaseTCSequence[0]) && CheckTableData(pView, pDatabaseTCSequence[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCSequence[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCSequence[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTCSequence[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTCSequence[1] = (pView->m_pDatabaseTCSequences[1].Find(pDatabaseTCSequence[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CDatabaseTCSequence : (CDatabaseTCSequence *)NULL))
					{
						if (pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0]) && pView->m_pDatabaseTCSequences[1].Add(pDatabaseTCSequence[1]) >= 0) continue;
						delete pDatabaseTCSequence[1];
					}
				}
			}
			for (nBlock = 0, nBlocks = (!pView->m_pDatabaseTCFunctionBlocks[0].Compare(&pView->m_pDatabaseTCFunctionBlocks[1])) ? (INT)(pView->m_pDatabaseTCFunctionBlocks[0].GetSize()*bAll) : 0; nBlock < nBlocks; nBlock++)
			{
				if ((pDatabaseTCFunctionBlock[0] = pView->m_pDatabaseTCFunctionBlocks[0].GetAt(nBlock)) && CheckTableData(pView, pDatabaseTCFunctionBlock[0]) && CheckTableData(pView, pDatabaseTCFunctionBlock[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCEFUNCTIONBLOCK_SAVE_QUESTION), (LPCTSTR)pDatabaseTCFunctionBlock[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCEFUNCTIONBLOCK_SAVE_FAILURE), (LPCTSTR)pDatabaseTCFunctionBlock[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTCFunctionBlock[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTCFunctionBlock[1] = (pView->m_pDatabaseTCFunctionBlocks[1].Find(pDatabaseTCFunctionBlock[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CDatabaseTCFunctionBlock : (CDatabaseTCFunctionBlock *)NULL))
					{
						if (pDatabaseTCFunctionBlock[1]->Copy(pDatabaseTCFunctionBlock[0]) && pView->m_pDatabaseTCFunctionBlocks[1].Add(pDatabaseTCFunctionBlock[1]) >= 0) continue;
						delete pDatabaseTCFunctionBlock[1];
					}
				}
			}
			return(!bAll || !bPrompt || DestroyTables(pView, nComponent));
		}
		return(((pTable = pView->GetActiveTable()) && pTable->GetName() == TranslateComponentToTableName(pView, nComponent)) ? SaveTableFieldData(pView, pTable->GetName(), bPrompt) : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseOBProcessor[0] = pView->m_pDatabaseOBProcessors[0].GetAt((nIndex[0] = pView->m_pDatabaseOBProcessors[0].Find(pView->GetName())))) && CanSaveTables(pView, nComponent) && TransferTableData(pView, pDatabaseOBProcessor[0]))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_OBPROCESSOR_SAVE_QUESTION), (LPCTSTR)pDatabaseOBProcessor[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_OBPROCESSOR_SAVE_FAILURE), (LPCTSTR)pDatabaseOBProcessor[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pDatabaseOBProcessor[1] = pView->m_pDatabaseOBProcessors[1].GetAt(pView->m_pDatabaseOBProcessors[1].Find(pDatabaseOBProcessor[0]->GetName()))))
					{
						if ((pDatabaseOBProcessor[0]->Compare(pDatabaseOBProcessor[1]) || Save(pDatabaseOBProcessor[0])) && pDatabaseOBProcessor[1]->Copy(pDatabaseOBProcessor[0]))
						{
							pView->UpdateTableForms(pDatabaseOBProcessor[0], nIndex[0] + 1);
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseOBProcessor[1] = new CDatabaseOBProcessor))
					{
						if (pDatabaseOBProcessor[1]->Copy(pDatabaseOBProcessor[0]))
						{
							if ((nIndex[1] = pView->m_pDatabaseOBProcessors[1].Add(pDatabaseOBProcessor[1])) >= 0)
							{
								if (Save(pDatabaseOBProcessor[0]))
								{
									if (pView->m_nDatabaseOBProcessorIndex == nIndex[0])
									{
										pView->m_nDatabaseOBProcessorIndex = -1;
										pView->UpdateTableForms(pDatabaseOBProcessor[0], -nIndex[0] - 1);
										break;
									}
									pView->UpdateTableForms(pDatabaseOBProcessor[0], nIndex[0] + 1);
									break;
								}
								pView->m_pDatabaseOBProcessors[1].RemoveAt(nIndex[1]);
							}
						}
						delete pDatabaseOBProcessor[1];
					}
					ShowMessage(szError);
					return FALSE;
				}
			}
			if ((pDatabaseOBProcessor[0] = (nIndex[0] < 0 && CanSaveTables(pView, nComponent)) ? pView->m_pDatabaseOBProcessors[0].GetAt((nIndex[0] = InsertTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pView->GetName()))) : (CDatabaseOBProcessor *)NULL))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_OBPROCESSOR_DISCARD_QUESTION), (LPCTSTR)pView->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_OBPROCESSOR_SAVE_FAILURE), (LPCTSTR)pView->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pDatabaseOBProcessor[1] = pView->m_pDatabaseOBProcessors[1].GetAt(pView->m_pDatabaseOBProcessors[1].Find(pDatabaseOBProcessor[0]->GetName()))))
					{
						if ((pDatabaseOBProcessor[0]->Compare(pDatabaseOBProcessor[1]) || Save(pDatabaseOBProcessor[0])) && pDatabaseOBProcessor[1]->Copy(pDatabaseOBProcessor[0]))
						{
							pView->UpdateTableForms(pDatabaseOBProcessor[0], -nIndex[0] - 1);
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseOBProcessor[1] = pView->m_pDatabaseOBProcessors[1].GetAt(pView->m_pDatabaseOBProcessors[1].Find(pDatabaseOBProcessor[0]->GetName()))))
					{
						if (Save(pDatabaseOBProcessor[0]))
						{
							pView->UpdateTableForms(pDatabaseOBProcessor[0], -nIndex[0] - 1);
							break;
						}
						DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseOBProcessor[1] = new CDatabaseOBProcessor))
					{
						if (pDatabaseOBProcessor[1]->Copy(pDatabaseOBProcessor[0]))
						{
							if ((nIndex[1] = pView->m_pDatabaseOBProcessors[1].Add(pDatabaseOBProcessor[1])) >= 0)
							{
								if (Save(pDatabaseOBProcessor[0]))
								{
									pView->UpdateTableForms(pDatabaseOBProcessor[0], -nIndex[0] - 1);
									break;
								}
								pView->m_pDatabaseOBProcessors[1].RemoveAt(nIndex[1]);
							}
						}
						delete pDatabaseOBProcessor[1];
					}
					DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
					ShowMessage(szError);
					return FALSE;
				}
			}
			for (nTable = 0, nTables = EnumTables(pView, szTables, nTypes, TRUE)*bAll; nTable < nTables; nTable++)
			{
				if (TranslateTableNameToComponent(pView, szTables.GetAt(nTable)) & DATABASE_SUBCOMPONENT_OBPROCESSORMEMORYIMAGE)
				{
					if (CanSaveTables(pView, TranslateTableNameToComponent(pView, szTables.GetAt(nTable))))
					{
						SaveTableFieldData(pView, szTables.GetAt(nTable), TRUE);
						continue;
					}
				}
			}
			for (nProcessor = 0, nProcessors = (INT)(pView->m_pDatabaseOBProcessors[0].GetSize()*bAll); nProcessor < nProcessors; nProcessor++)
			{
				if ((pDatabaseOBProcessor[0] = (nProcessor != pView->m_nDatabaseOBProcessorIndex) ? pView->m_pDatabaseOBProcessors[0].GetAt(nProcessor) : (CDatabaseOBProcessor *)NULL) && pDatabaseOBProcessor[0]->GetName() != pView->GetName() && CheckTableData(pView, pDatabaseOBProcessor[0]) && CheckTableData(pView, pDatabaseOBProcessor[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_OBPROCESSOR_SAVE_QUESTION), (LPCTSTR)pDatabaseOBProcessor[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_OBPROCESSOR_SAVE_FAILURE), (LPCTSTR)pDatabaseOBProcessor[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseOBProcessor[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseOBProcessor[1] = (pView->m_pDatabaseOBProcessors[1].Find(pDatabaseOBProcessor[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CDatabaseOBProcessor : (CDatabaseOBProcessor *)NULL))
					{
						if (pDatabaseOBProcessor[1]->Copy(pDatabaseOBProcessor[0]) && pView->m_pDatabaseOBProcessors[1].Add(pDatabaseOBProcessor[1]) >= 0) continue;
						delete pDatabaseOBProcessor[1];
					}
				}
			}
			for (nImage = 0, nImages = (!pView->m_pDatabaseOBProcessorMemoryImages[0].Compare(&pView->m_pDatabaseOBProcessorMemoryImages[1])) ? (INT)(pView->m_pDatabaseOBProcessorMemoryImages[0].GetSize()*bAll) : 0; nImage < nImages; nImage++)
			{
				if ((pDatabaseOBProcessorMemoryImage[0] = pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(nImage)) && CheckTableData(pView, pDatabaseOBProcessorMemoryImage[0]) && CheckTableData(pView, pDatabaseOBProcessorMemoryImage[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_OBPROCESSORMEMORYIMAGE_SAVE_QUESTION), (LPCTSTR)pDatabaseOBProcessorMemoryImage[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_OBPROCESSORMEMORYIMAGE_SAVE_FAILURE), (LPCTSTR)pDatabaseOBProcessorMemoryImage[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseOBProcessorMemoryImage[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseOBProcessorMemoryImage[1] = (pView->m_pDatabaseOBProcessorMemoryImages[1].Find(pDatabaseOBProcessorMemoryImage[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CDatabaseOBProcessorMemoryImage : (CDatabaseOBProcessorMemoryImage *)NULL))
					{
						if (pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]) && pView->m_pDatabaseOBProcessorMemoryImages[1].Add(pDatabaseOBProcessorMemoryImage[1]) >= 0) continue;
						delete pDatabaseOBProcessorMemoryImage[1];
					}
				}
			}
			return(!bAll || !bPrompt || DestroyTables(pView, nComponent));
		}
		return(((pTable = pView->GetActiveTable()) && pTable->GetName() == TranslateComponentToTableName(pView, nComponent)) ? SaveTableFieldData(pView, pTable->GetName(), bPrompt) : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseTMParameter[0] = pView->m_pDatabaseTMParameters[0].GetAt((nIndex[0] = pView->m_pDatabaseTMParameters[0].Find(pView->GetName())))) && CanSaveTables(pView, nComponent) && TransferTableData(pView, pDatabaseTMParameter[0]))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETER_SAVE_QUESTION), (LPCTSTR)pDatabaseTMParameter[0]->GetTag()), szError.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETER_SAVE_FAILURE), (LPCTSTR)pDatabaseTMParameter[0]->GetTag()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pDatabaseTMParameter[1] = pView->m_pDatabaseTMParameters[1].GetAt(pView->m_pDatabaseTMParameters[1].Find(pDatabaseTMParameter[0]->GetTag()))))
					{
						if ((pDatabaseTMParameter[0]->Compare(pDatabaseTMParameter[1]) || Save(pDatabaseTMParameter[0])) && pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0]))
						{
							pView->UpdateTableForms(pDatabaseTMParameter[0], ++nIndex[0]);
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseTMParameter[1] = new CDatabaseTMParameter))
					{
						if (pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0]))
						{
							if ((nIndex[1] = pView->m_pDatabaseTMParameters[1].Add(pDatabaseTMParameter[1])) >= 0)
							{
								if (Save(pDatabaseTMParameter[0]))
								{
									pView->UpdateTableForms(pDatabaseTMParameter[0], ++nIndex[0]);
									break;
								}
								pView->m_pDatabaseTMParameters[1].RemoveAt(nIndex[1]);
							}
						}
						delete pDatabaseTMParameter[1];
					}
					ShowMessage(szError);
					return FALSE;
				}
			}
			if ((pDatabaseTMParameter[0] = (nIndex[0] < 0 && CanSaveTables(pView, nComponent)) ? pView->m_pDatabaseTMParameters[0].GetAt((nIndex[0] = InsertTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pView->GetName()))) : (CDatabaseTMParameter *)NULL))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETER_DISCARD_QUESTION), (LPCTSTR)pView->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETER_SAVE_FAILURE), (LPCTSTR)pView->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pDatabaseTMParameter[1] = pView->m_pDatabaseTMParameters[1].GetAt(pView->m_pDatabaseTMParameters[1].Find(pDatabaseTMParameter[0]->GetTag()))))
					{
						if ((pDatabaseTMParameter[0]->Compare(pDatabaseTMParameter[1]) || Save(pDatabaseTMParameter[0])) && pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0]))
						{
							pView->UpdateTableForms(pDatabaseTMParameter[0], (nIndex[0] = -nIndex[0] - 1));
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseTMParameter[1] = pView->m_pDatabaseTMParameters[1].GetAt(pView->m_pDatabaseTMParameters[1].Find(pDatabaseTMParameter[0]->GetTag()))))
					{
						if (Save(pDatabaseTMParameter[0]))
						{
							pView->UpdateTableForms(pDatabaseTMParameter[0], (nIndex[0] = -nIndex[0] - 1));
							break;
						}
						DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseTMParameter[1] = new CDatabaseTMParameter))
					{
						if (pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0]))
						{
							if ((nIndex[1] = pView->m_pDatabaseTMParameters[1].Add(pDatabaseTMParameter[1])) >= 0)
							{
								if (Save(pDatabaseTMParameter[0]))
								{
									pView->UpdateTableForms(pDatabaseTMParameter[0], (nIndex[0] = -nIndex[0] - 1));
									break;
								}
								pView->m_pDatabaseTMParameters[1].RemoveAt(nIndex[1]);
							}
						}
						delete pDatabaseTMParameter[1];
					}
					DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
					ShowMessage(szError);
					return FALSE;
				}
			}
			for (nTable = 0, nTables = EnumTables(pView, szTables, nTypes, TRUE)*bAll; nTable < nTables; nTable++)
			{
				if (TranslateTableNameToComponent(pView, szTables.GetAt(nTable)) & (DATABASE_SUBCOMPONENT_TMNUMCALTABLE | DATABASE_SUBCOMPONENT_TMTXTCALTABLE | DATABASE_SUBCOMPONENT_TMNUMOOLTABLE | DATABASE_SUBCOMPONENT_TMTXTOOLTABLE))
				{
					if (CanSaveTables(pView, TranslateTableNameToComponent(pView, szTables.GetAt(nTable))))
					{
						SaveTableFieldData(pView, szTables.GetAt(nTable), TRUE);
						continue;
					}
				}
			}
			for (nParameter = 0, nParameters = (INT)(pView->m_pDatabaseTMParameters[0].GetSize()*bAll); nParameter < nParameters; nParameter++)
			{
				if ((pDatabaseTMParameter[0] = pView->m_pDatabaseTMParameters[0].GetAt(nParameter)) && pDatabaseTMParameter[0]->GetTag() != pView->GetName() && CheckTableData(pView, pDatabaseTMParameter[0]) && CheckTableData(pView, pDatabaseTMParameter[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETER_SAVE_QUESTION), (LPCTSTR)pDatabaseTMParameter[0]->GetTag()), szError.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETER_SAVE_FAILURE), (LPCTSTR)pDatabaseTMParameter[0]->GetTag()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTMParameter[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTMParameter[1] = (pView->m_pDatabaseTMParameters[1].Find(pDatabaseTMParameter[0]->GetTag()) < 0 && !szError.IsEmpty()) ? new CDatabaseTMParameter : (CDatabaseTMParameter *)NULL))
					{
						if (pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0]) && pView->m_pDatabaseTMParameters[1].Add(pDatabaseTMParameter[1]) >= 0) continue;
						delete pDatabaseTMParameter[1];
					}
				}
			}
			for (nTable = 0, nTables = (!pView->m_pDatabaseTMNumCalTables[0].Compare(&pView->m_pDatabaseTMNumCalTables[1])) ? (INT)(pView->m_pDatabaseTMNumCalTables[0].GetSize()*bAll) : 0; nTable < nTables; nTable++)
			{
				if ((pDatabaseTMNumCalTable[0] = pView->m_pDatabaseTMNumCalTables[0].GetAt(nTable)) && CheckTableData(pView, pDatabaseTMNumCalTable[0]) && CheckTableData(pView, pDatabaseTMNumCalTable[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMNumCalTable[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMNumCalTable[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTMNumCalTable[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTMNumCalTable[1] = (pView->m_pDatabaseTMNumCalTables[1].Find(pDatabaseTMNumCalTable[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CDatabaseTMNumCalTable : (CDatabaseTMNumCalTable *)NULL))
					{
						if (pDatabaseTMNumCalTable[1]->Copy(pDatabaseTMNumCalTable[0]) && pView->m_pDatabaseTMNumCalTables[1].Add(pDatabaseTMNumCalTable[1]) >= 0) continue;
						delete pDatabaseTMNumCalTable[1];
					}
				}
			}
			for (nTable = 0, nTables = (!pView->m_pDatabaseTMTxtCalTables[0].Compare(&pView->m_pDatabaseTMTxtCalTables[1])) ? (INT)(pView->m_pDatabaseTMTxtCalTables[0].GetSize()*bAll) : 0; nTable < nTables; nTable++)
			{
				if ((pDatabaseTMTxtCalTable[0] = pView->m_pDatabaseTMTxtCalTables[0].GetAt(nTable)) && CheckTableData(pView, pDatabaseTMTxtCalTable[0]) && CheckTableData(pView, pDatabaseTMTxtCalTable[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMTxtCalTable[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMTxtCalTable[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTMTxtCalTable[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTMTxtCalTable[1] = (pView->m_pDatabaseTMTxtCalTables[1].Find(pDatabaseTMTxtCalTable[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CDatabaseTMTxtCalTable : (CDatabaseTMTxtCalTable *)NULL))
					{
						if (pDatabaseTMTxtCalTable[1]->Copy(pDatabaseTMTxtCalTable[0]) && pView->m_pDatabaseTMTxtCalTables[1].Add(pDatabaseTMTxtCalTable[1]) >= 0) continue;
						delete pDatabaseTMTxtCalTable[1];
					}
				}
			}
			for (nTable = 0, nTables = (!pView->m_pDatabaseTMNumOolTables[0].Compare(&pView->m_pDatabaseTMNumOolTables[1])) ? (INT)(pView->m_pDatabaseTMNumOolTables[0].GetSize()*bAll) : 0; nTable < nTables; nTable++)
			{
				if ((pDatabaseTMNumOolTable[0] = pView->m_pDatabaseTMNumOolTables[0].GetAt(nTable)) && CheckTableData(pView, pDatabaseTMNumOolTable[0]) && CheckTableData(pView, pDatabaseTMNumOolTable[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMNumOolTable[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMNumOolTable[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTMNumOolTable[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTMNumOolTable[1] = (pView->m_pDatabaseTMNumOolTables[1].Find(pDatabaseTMNumOolTable[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CDatabaseTMNumOolTable : (CDatabaseTMNumOolTable *)NULL))
					{
						if (pDatabaseTMNumOolTable[1]->Copy(pDatabaseTMNumOolTable[0]) && pView->m_pDatabaseTMNumOolTables[1].Add(pDatabaseTMNumOolTable[1]) >= 0) continue;
						delete pDatabaseTMNumOolTable[1];
					}
				}
			}
			for (nTable = 0, nTables = (!pView->m_pDatabaseTMTxtOolTables[0].Compare(&pView->m_pDatabaseTMTxtOolTables[1])) ? (INT)(pView->m_pDatabaseTMTxtOolTables[0].GetSize()*bAll) : 0; nTable < nTables; nTable++)
			{
				if ((pDatabaseTMTxtOolTable[0] = pView->m_pDatabaseTMTxtOolTables[0].GetAt(nTable)) && CheckTableData(pView, pDatabaseTMTxtOolTable[0]) && CheckTableData(pView, pDatabaseTMTxtOolTable[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMTxtOolTable[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMTxtOolTable[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTMTxtOolTable[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTMTxtOolTable[1] = (pView->m_pDatabaseTMTxtOolTables[1].Find(pDatabaseTMTxtOolTable[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CDatabaseTMTxtOolTable : (CDatabaseTMTxtOolTable *)NULL))
					{
						if (pDatabaseTMTxtOolTable[1]->Copy(pDatabaseTMTxtOolTable[0]) && pView->m_pDatabaseTMTxtOolTables[1].Add(pDatabaseTMTxtOolTable[1]) >= 0) continue;
						delete pDatabaseTMTxtOolTable[1];
					}
				}
			}
			return(!bAll || !bPrompt || DestroyTables(pView, nComponent));
		}
		return(((pTable = pView->GetActiveTable()) && pTable->GetName() == TranslateComponentToTableName(pView, nComponent)) ? SaveTableFieldData(pView, pTable->GetName(), bPrompt) : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseTCParameter[0] = pView->m_pDatabaseTCParameters[0].GetAt((nIndex[0] = pView->m_pDatabaseTCParameters[0].Find(pView->GetName())))) && CanSaveTables(pView, nComponent) && TransferTableData(pView, pDatabaseTCParameter[0]))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETER_SAVE_QUESTION), (LPCTSTR)pDatabaseTCParameter[0]->GetTag()), szError.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETER_SAVE_FAILURE), (LPCTSTR)pDatabaseTCParameter[0]->GetTag()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pDatabaseTCParameter[1] = pView->m_pDatabaseTCParameters[1].GetAt(pView->m_pDatabaseTCParameters[1].Find(pDatabaseTCParameter[0]->GetTag()))))
					{
						if ((pDatabaseTCParameter[0]->Compare(pDatabaseTCParameter[1]) || Save(pDatabaseTCParameter[0])) && pDatabaseTCParameter[1]->Copy(pDatabaseTCParameter[0]))
						{
							pView->UpdateTableForms(pDatabaseTCParameter[0], ++nIndex[0]);
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseTCParameter[1] = new CDatabaseTCParameter))
					{
						if (pDatabaseTCParameter[1]->Copy(pDatabaseTCParameter[0]))
						{
							if ((nIndex[1] = pView->m_pDatabaseTCParameters[1].Add(pDatabaseTCParameter[1])) >= 0)
							{
								if (Save(pDatabaseTCParameter[0]))
								{
									pView->UpdateTableForms(pDatabaseTCParameter[0], ++nIndex[0]);
									break;
								}
								pView->m_pDatabaseTCParameters[1].RemoveAt(nIndex[1]);
							}
						}
						delete pDatabaseTCParameter[1];
					}
					ShowMessage(szError);
					return FALSE;
				}
			}
			if ((pDatabaseTCParameter[0] = (nIndex[0] < 0 && CanSaveTables(pView, nComponent)) ? pView->m_pDatabaseTCParameters[0].GetAt((nIndex[0] = InsertTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pView->GetName()))) : (CDatabaseTCParameter *)NULL))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETER_DISCARD_QUESTION), (LPCTSTR)pView->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETER_SAVE_FAILURE), (LPCTSTR)pView->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pDatabaseTCParameter[1] = pView->m_pDatabaseTCParameters[1].GetAt(pView->m_pDatabaseTCParameters[1].Find(pDatabaseTCParameter[0]->GetTag()))))
					{
						if ((pDatabaseTCParameter[0]->Compare(pDatabaseTCParameter[1]) || Save(pDatabaseTCParameter[0])) && pDatabaseTCParameter[1]->Copy(pDatabaseTCParameter[0]))
						{
							pView->UpdateTableForms(pDatabaseTCParameter[0], (nIndex[0] = -nIndex[0] - 1));
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseTCParameter[1] = pView->m_pDatabaseTCParameters[1].GetAt(pView->m_pDatabaseTCParameters[1].Find(pDatabaseTCParameter[0]->GetTag()))))
					{
						if (Save(pDatabaseTCParameter[0]))
						{
							pView->UpdateTableForms(pDatabaseTCParameter[0], (nIndex[0] = -nIndex[0] - 1));
							break;
						}
						DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
						ShowMessage(szError);
						return FALSE;
					}
					if ((pDatabaseTCParameter[1] = new CDatabaseTCParameter))
					{
						if (pDatabaseTCParameter[1]->Copy(pDatabaseTCParameter[0]))
						{
							if ((nIndex[1] = pView->m_pDatabaseTCParameters[1].Add(pDatabaseTCParameter[1])) >= 0)
							{
								if (Save(pDatabaseTCParameter[0]))
								{
									pView->UpdateTableForms(pDatabaseTCParameter[0], (nIndex[0] = -nIndex[0] - 1));
									break;
								}
								pView->m_pDatabaseTCParameters[1].RemoveAt(nIndex[1]);
							}
						}
						delete pDatabaseTCParameter[1];
					}
					DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
					ShowMessage(szError);
					return FALSE;
				}
			}
			for (nTable = 0, nTables = EnumTables(pView, szTables, nTypes, TRUE)*bAll; nTable < nTables; nTable++)
			{
				if (TranslateTableNameToComponent(pView, szTables.GetAt(nTable)) & (DATABASE_SUBCOMPONENT_TCNUMCALTABLE | DATABASE_SUBCOMPONENT_TCTXTCALTABLE | DATABASE_SUBCOMPONENT_TCNUMOOLTABLE | DATABASE_SUBCOMPONENT_TCTXTOOLTABLE))
				{
					if (CanSaveTables(pView, TranslateTableNameToComponent(pView, szTables.GetAt(nTable))))
					{
						SaveTableFieldData(pView, szTables.GetAt(nTable), TRUE);
						continue;
					}
				}
			}
			for (nParameter = 0, nParameters = (INT)(pView->m_pDatabaseTCParameters[0].GetSize()*bAll); nParameter < nParameters; nParameter++)
			{
				if ((pDatabaseTCParameter[0] = pView->m_pDatabaseTCParameters[0].GetAt(nParameter)) && pDatabaseTCParameter[0]->GetTag() != pView->GetName() && CheckTableData(pView, pDatabaseTCParameter[0]) && CheckTableData(pView, pDatabaseTCParameter[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETER_SAVE_QUESTION), (LPCTSTR)pDatabaseTCParameter[0]->GetTag()), szError.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETER_SAVE_FAILURE), (LPCTSTR)pDatabaseTCParameter[0]->GetTag()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTCParameter[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTCParameter[1] = (pView->m_pDatabaseTCParameters[1].Find(pDatabaseTCParameter[0]->GetTag()) < 0 && !szError.IsEmpty()) ? new CDatabaseTCParameter : (CDatabaseTCParameter *)NULL))
					{
						if (pDatabaseTCParameter[1]->Copy(pDatabaseTCParameter[0]) && pView->m_pDatabaseTCParameters[1].Add(pDatabaseTCParameter[1]) >= 0) continue;
						delete pDatabaseTCParameter[1];
					}
				}
			}
			for (nTable = 0, nTables = (!pView->m_pDatabaseTCNumCalTables[0].Compare(&pView->m_pDatabaseTCNumCalTables[1])) ? (INT)(pView->m_pDatabaseTCNumCalTables[0].GetSize()*bAll) : 0; nTable < nTables; nTable++)
			{
				if ((pDatabaseTCNumCalTable[0] = pView->m_pDatabaseTCNumCalTables[0].GetAt(nTable)) && CheckTableData(pView, pDatabaseTCNumCalTable[0]) && CheckTableData(pView, pDatabaseTCNumCalTable[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCNumCalTable[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCNumCalTable[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTCNumCalTable[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTCNumCalTable[1] = (pView->m_pDatabaseTCNumCalTables[1].Find(pDatabaseTCNumCalTable[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CDatabaseTCNumCalTable : (CDatabaseTCNumCalTable *)NULL))
					{
						if (pDatabaseTCNumCalTable[1]->Copy(pDatabaseTCNumCalTable[0]) && pView->m_pDatabaseTCNumCalTables[1].Add(pDatabaseTCNumCalTable[1]) >= 0) continue;
						delete pDatabaseTCNumCalTable[1];
					}
				}
			}
			for (nTable = 0, nTables = (!pView->m_pDatabaseTCTxtCalTables[0].Compare(&pView->m_pDatabaseTCTxtCalTables[1])) ? (INT)(pView->m_pDatabaseTCTxtCalTables[0].GetSize()*bAll) : 0; nTable < nTables; nTable++)
			{
				if ((pDatabaseTCTxtCalTable[0] = pView->m_pDatabaseTCTxtCalTables[0].GetAt(nTable)) && CheckTableData(pView, pDatabaseTCTxtCalTable[0]) && CheckTableData(pView, pDatabaseTCTxtCalTable[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCTxtCalTable[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCTxtCalTable[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTCTxtCalTable[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTCTxtCalTable[1] = (pView->m_pDatabaseTCTxtCalTables[1].Find(pDatabaseTCTxtCalTable[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CDatabaseTCTxtCalTable : (CDatabaseTCTxtCalTable *)NULL))
					{
						if (pDatabaseTCTxtCalTable[1]->Copy(pDatabaseTCTxtCalTable[0]) && pView->m_pDatabaseTCTxtCalTables[1].Add(pDatabaseTCTxtCalTable[1]) >= 0) continue;
						delete pDatabaseTCTxtCalTable[1];
					}
				}
			}
			for (nTable = 0, nTables = (!pView->m_pDatabaseTCNumOolTables[0].Compare(&pView->m_pDatabaseTCNumOolTables[1])) ? (INT)(pView->m_pDatabaseTCNumOolTables[0].GetSize()*bAll) : 0; nTable < nTables; nTable++)
			{
				if ((pDatabaseTCNumOolTable[0] = pView->m_pDatabaseTCNumOolTables[0].GetAt(nTable)) && CheckTableData(pView, pDatabaseTCNumOolTable[0]) && CheckTableData(pView, pDatabaseTCNumOolTable[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCNumOolTable[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCNumOolTable[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTCNumOolTable[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTCNumOolTable[1] = (pView->m_pDatabaseTCNumOolTables[1].Find(pDatabaseTCNumOolTable[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CDatabaseTCNumOolTable : (CDatabaseTCNumOolTable *)NULL))
					{
						if (pDatabaseTCNumOolTable[1]->Copy(pDatabaseTCNumOolTable[0]) && pView->m_pDatabaseTCNumOolTables[1].Add(pDatabaseTCNumOolTable[1]) >= 0) continue;
						delete pDatabaseTCNumOolTable[1];
					}
				}
			}
			for (nTable = 0, nTables = (!pView->m_pDatabaseTCTxtOolTables[0].Compare(&pView->m_pDatabaseTCTxtOolTables[1])) ? (INT)(pView->m_pDatabaseTCTxtOolTables[0].GetSize()*bAll) : 0; nTable < nTables; nTable++)
			{
				if ((pDatabaseTCTxtOolTable[0] = pView->m_pDatabaseTCTxtOolTables[0].GetAt(nTable)) && CheckTableData(pView, pDatabaseTCTxtOolTable[0]) && CheckTableData(pView, pDatabaseTCTxtOolTable[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCTxtOolTable[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCTxtOolTable[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pDatabaseTCTxtOolTable[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pDatabaseTCTxtOolTable[1] = (pView->m_pDatabaseTCTxtOolTables[1].Find(pDatabaseTCTxtOolTable[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CDatabaseTCTxtOolTable : (CDatabaseTCTxtOolTable *)NULL))
					{
						if (pDatabaseTCTxtOolTable[1]->Copy(pDatabaseTCTxtOolTable[0]) && pView->m_pDatabaseTCTxtOolTables[1].Add(pDatabaseTCTxtOolTable[1]) >= 0) continue;
						delete pDatabaseTCTxtOolTable[1];
					}
				}
			}
			return(!bAll || !bPrompt || DestroyTables(pView, nComponent));
		}
		return(((pTable = pView->GetActiveTable()) && pTable->GetName() == TranslateComponentToTableName(pView, nComponent)) ? SaveTableFieldData(pView, pTable->GetName(), bPrompt) : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_AND)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pANDLayout[0] = pView->m_pANDLayouts[0].GetAt((nIndex[0] = pView->m_pANDLayouts[0].Find(pView->GetName())))) && CanSaveTables(pView, nComponent) && TransferTableData(pView, pANDLayout[0]))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_AND_SAVE_QUESTION), (LPCTSTR)pANDLayout[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_AND_SAVE_FAILURE), (LPCTSTR)pANDLayout[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pANDLayout[1] = pView->m_pANDLayouts[1].GetAt(pView->m_pANDLayouts[1].Find(pANDLayout[0]->GetName()))))
					{
						if ((pANDLayout[0]->Compare(pANDLayout[1]) || Save(pANDLayout[0])) && pANDLayout[1]->Copy(pANDLayout[0]))
						{
							pView->UpdateTableForms(pANDLayout[0], ++nIndex[0]);
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pANDLayout[1] = new CANDLayout))
					{
						if (pANDLayout[1]->Copy(pANDLayout[0]))
						{
							if ((nIndex[1] = pView->m_pANDLayouts[1].Add(pANDLayout[1])) >= 0)
							{
								if (Save(pANDLayout[0]))
								{
									pView->UpdateTableForms(pANDLayout[0], ++nIndex[0]);
									break;
								}
								pView->m_pANDLayouts[1].RemoveAt(nIndex[1]);
							}
						}
						delete pANDLayout[1];
					}
					ShowMessage(szError);
					return FALSE;
				}
			}
			if ((pANDLayout[0] = (nIndex[0] < 0 && CanSaveTables(pView, nComponent)) ? pView->m_pANDLayouts[0].GetAt((nIndex[0] = InsertTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pView->GetName()))) : (CANDLayout *)NULL))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_AND_DISCARD_QUESTION), (LPCTSTR)pView->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_AND_SAVE_FAILURE), (LPCTSTR)pView->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pANDLayout[1] = pView->m_pANDLayouts[1].GetAt(pView->m_pANDLayouts[1].Find(pANDLayout[0]->GetName()))))
					{
						if ((pANDLayout[0]->Compare(pANDLayout[1]) || Save(pANDLayout[0])) && pANDLayout[1]->Copy(pANDLayout[0]))
						{
							pView->UpdateTableForms(pANDLayout[0], (nIndex[0] = -nIndex[0] - 1));
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pANDLayout[1] = pView->m_pANDLayouts[1].GetAt(pView->m_pANDLayouts[1].Find(pANDLayout[0]->GetName()))))
					{
						if (Save(pANDLayout[0]))
						{
							pView->UpdateTableForms(pANDLayout[0], (nIndex[0] = -nIndex[0] - 1));
							break;
						}
						DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
						ShowMessage(szError);
						return FALSE;
					}
					if ((pANDLayout[1] = new CANDLayout))
					{
						if (pANDLayout[1]->Copy(pANDLayout[0]))
						{
							if ((nIndex[1] = pView->m_pANDLayouts[1].Add(pANDLayout[1])) >= 0)
							{
								if (Save(pANDLayout[0]))
								{
									pView->UpdateTableForms(pANDLayout[0], (nIndex[0] = -nIndex[0] - 1));
									break;
								}
								pView->m_pANDLayouts[1].RemoveAt(nIndex[1]);
							}
						}
						delete pANDLayout[1];
					}
					DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
					ShowMessage(szError);
					return FALSE;
				}
			}
			for (nLayout = 0, nLayouts = (INT)(pView->m_pANDLayouts[0].GetSize()*bAll); nLayout < nLayouts; nLayout++)
			{
				if ((pANDLayout[0] = pView->m_pANDLayouts[0].GetAt(nLayout)) && pANDLayout[0]->GetName() != pView->GetName() && CheckTableData(pView, pANDLayout[0]) && CheckTableData(pView, pANDLayout[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_AND_SAVE_QUESTION), (LPCTSTR)pANDLayout[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_AND_SAVE_FAILURE), (LPCTSTR)pANDLayout[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pANDLayout[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pANDLayout[1] = (pView->m_pANDLayouts[1].Find(pANDLayout[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CANDLayout : (CANDLayout *)NULL))
					{
						if (pANDLayout[1]->Copy(pANDLayout[0]) && pView->m_pANDLayouts[1].Add(pANDLayout[1]) >= 0) continue;
						delete pANDLayout[1];
					}
				}
			}
			return(!bAll || !bPrompt || DestroyTables(pView, nComponent));
		}
		return FALSE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_GRD)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pGRDLayout[0] = pView->m_pGRDLayouts[0].GetAt((nIndex[0] = pView->m_pGRDLayouts[0].Find(pView->GetName())))) && CanSaveTables(pView, nComponent) && TransferTableData(pView, pGRDLayout[0]))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_GRD_SAVE_QUESTION), (LPCTSTR)pGRDLayout[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_GRD_SAVE_FAILURE), (LPCTSTR)pGRDLayout[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pGRDLayout[1] = pView->m_pGRDLayouts[1].GetAt(pView->m_pGRDLayouts[1].Find(pGRDLayout[0]->GetName()))))
					{
						if ((pGRDLayout[0]->Compare(pGRDLayout[1]) || Save(pGRDLayout[0])) && pGRDLayout[1]->Copy(pGRDLayout[0]))
						{
							pView->UpdateTableForms(pGRDLayout[0], ++nIndex[0]);
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pGRDLayout[1] = new CGRDLayout))
					{
						if (pGRDLayout[1]->Copy(pGRDLayout[0]))
						{
							if ((nIndex[1] = pView->m_pGRDLayouts[1].Add(pGRDLayout[1])) >= 0)
							{
								if (Save(pGRDLayout[0]))
								{
									pView->UpdateTableForms(pGRDLayout[0], ++nIndex[0]);
									break;
								}
								pView->m_pGRDLayouts[1].RemoveAt(nIndex[1]);
							}
						}
						delete pGRDLayout[1];
					}
					ShowMessage(szError);
					return FALSE;
				}
			}
			if ((pGRDLayout[0] = (nIndex[0] < 0 && CanSaveTables(pView, nComponent)) ? pView->m_pGRDLayouts[0].GetAt((nIndex[0] = InsertTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pView->GetName()))) : (CGRDLayout *)NULL))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_GRD_DISCARD_QUESTION), (LPCTSTR)pView->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_GRD_SAVE_FAILURE), (LPCTSTR)pView->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pGRDLayout[1] = pView->m_pGRDLayouts[1].GetAt(pView->m_pGRDLayouts[1].Find(pGRDLayout[0]->GetName()))))
					{
						if ((pGRDLayout[0]->Compare(pGRDLayout[1]) || Save(pGRDLayout[0])) && pGRDLayout[1]->Copy(pGRDLayout[0]))
						{
							pView->UpdateTableForms(pGRDLayout[0], (nIndex[0] = -nIndex[0] - 1));
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pGRDLayout[1] = pView->m_pGRDLayouts[1].GetAt(pView->m_pGRDLayouts[1].Find(pGRDLayout[0]->GetName()))))
					{
						if (Save(pGRDLayout[0]))
						{
							pView->UpdateTableForms(pGRDLayout[0], (nIndex[0] = -nIndex[0] - 1));
							break;
						}
						DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
						ShowMessage(szError);
						return FALSE;
					}
					if ((pGRDLayout[1] = new CGRDLayout))
					{
						if (pGRDLayout[1]->Copy(pGRDLayout[0]))
						{
							if ((nIndex[1] = pView->m_pGRDLayouts[1].Add(pGRDLayout[1])) >= 0)
							{
								if (Save(pGRDLayout[0]))
								{
									pView->UpdateTableForms(pGRDLayout[0], (nIndex[0] = -nIndex[0] - 1));
									break;
								}
								pView->m_pGRDLayouts[1].RemoveAt(nIndex[1]);
							}
						}
						delete pGRDLayout[1];
					}
					DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
					ShowMessage(szError);
					return FALSE;
				}
			}
			for (nLayout = 0, nLayouts = (INT)(pView->m_pGRDLayouts[0].GetSize()*bAll); nLayout < nLayouts; nLayout++)
			{
				if ((pGRDLayout[0] = pView->m_pGRDLayouts[0].GetAt(nLayout)) && pGRDLayout[0]->GetName() != pView->GetName() && CheckTableData(pView, pGRDLayout[0]) && CheckTableData(pView, pGRDLayout[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_GRD_SAVE_QUESTION), (LPCTSTR)pGRDLayout[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_GRD_SAVE_FAILURE), (LPCTSTR)pGRDLayout[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pGRDLayout[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pGRDLayout[1] = (pView->m_pGRDLayouts[1].Find(pGRDLayout[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CGRDLayout : (CGRDLayout *)NULL))
					{
						if (pGRDLayout[1]->Copy(pGRDLayout[0]) && pView->m_pGRDLayouts[1].Add(pGRDLayout[1]) >= 0) continue;
						delete pGRDLayout[1];
					}
				}
			}
			return(!bAll || !bPrompt || DestroyTables(pView, nComponent));
		}
		return FALSE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_POD)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pPODLayout[0] = pView->m_pPODLayouts[0].GetAt((nIndex[0] = pView->m_pPODLayouts[0].Find(pView->GetName())))) && CanSaveTables(pView, nComponent) && TransferTableData(pView, pPODLayout[0]))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_POD_SAVE_QUESTION), (LPCTSTR)pPODLayout[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_POD_SAVE_FAILURE), (LPCTSTR)pPODLayout[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pPODLayout[1] = pView->m_pPODLayouts[1].GetAt(pView->m_pPODLayouts[1].Find(pPODLayout[0]->GetName()))))
					{
						if ((pPODLayout[0]->Compare(pPODLayout[1]) || Save(pPODLayout[0])) && pPODLayout[1]->Copy(pPODLayout[0]))
						{
							pView->UpdateTableForms(pPODLayout[0], ++nIndex[0]);
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pPODLayout[1] = new CPODLayout))
					{
						if (pPODLayout[1]->Copy(pPODLayout[0]))
						{
							if ((nIndex[1] = pView->m_pPODLayouts[1].Add(pPODLayout[1])) >= 0)
							{
								if (Save(pPODLayout[0]))
								{
									pView->UpdateTableForms(pPODLayout[0], ++nIndex[0]);
									break;
								}
								pView->m_pPODLayouts[1].RemoveAt(nIndex[1]);
							}
						}
						delete pPODLayout[1];
					}
					ShowMessage(szError);
					return FALSE;
				}
			}
			if ((pPODLayout[0] = (nIndex[0] < 0 && CanSaveTables(pView, nComponent)) ? pView->m_pPODLayouts[0].GetAt((nIndex[0] = InsertTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pView->GetName()))) : (CPODLayout *)NULL))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_POD_DISCARD_QUESTION), (LPCTSTR)pView->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_POD_SAVE_FAILURE), (LPCTSTR)pView->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
				{
					if ((pPODLayout[1] = pView->m_pPODLayouts[1].GetAt(pView->m_pPODLayouts[1].Find(pPODLayout[0]->GetName()))))
					{
						if ((pPODLayout[0]->Compare(pPODLayout[1]) || Save(pPODLayout[0])) && pPODLayout[1]->Copy(pPODLayout[0]))
						{
							pView->UpdateTableForms(pPODLayout[0], (nIndex[0] = -nIndex[0] - 1));
							break;
						}
						ShowMessage(szError);
						return FALSE;
					}
					if ((pPODLayout[1] = pView->m_pPODLayouts[1].GetAt(pView->m_pPODLayouts[1].Find(pPODLayout[0]->GetName()))))
					{
						if (Save(pPODLayout[0]))
						{
							pView->UpdateTableForms(pPODLayout[0], (nIndex[0] = -nIndex[0] - 1));
							break;
						}
						DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
						ShowMessage(szError);
						return FALSE;
					}
					if ((pPODLayout[1] = new CPODLayout))
					{
						if (pPODLayout[1]->Copy(pPODLayout[0]))
						{
							if ((nIndex[1] = pView->m_pPODLayouts[1].Add(pPODLayout[1])) >= 0)
							{
								if (Save(pPODLayout[0]))
								{
									pView->UpdateTableForms(pPODLayout[0], (nIndex[0] = -nIndex[0] - 1));
									break;
								}
								pView->m_pPODLayouts[1].RemoveAt(nIndex[1]);
							}
						}
						delete pPODLayout[1];
					}
					DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent));
					ShowMessage(szError);
					return FALSE;
				}
			}
			for (nLayout = 0, nLayouts = (INT)(pView->m_pPODLayouts[0].GetSize()*bAll); nLayout < nLayouts; nLayout++)
			{
				if ((pPODLayout[0] = pView->m_pPODLayouts[0].GetAt(nLayout)) && pPODLayout[0]->GetName() != pView->GetName() && CheckTableData(pView, pPODLayout[0]) && CheckTableData(pView, pPODLayout[0], TRUE))
				{
					for (szMessage.Format(STRING(IDS_DATABASE_TABLE_POD_SAVE_QUESTION), (LPCTSTR)pPODLayout[0]->GetName()), szError.Format(STRING(IDS_DATABASE_TABLE_POD_SAVE_FAILURE), (LPCTSTR)pPODLayout[0]->GetName()); !bPrompt || pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
					{
						if (Save(pPODLayout[0])) break;
						ShowMessage(szError);
						szError.Empty();
						break;
					}
					if ((pPODLayout[1] = (pView->m_pPODLayouts[1].Find(pPODLayout[0]->GetName()) < 0 && !szError.IsEmpty()) ? new CPODLayout : (CPODLayout *)NULL))
					{
						if (pPODLayout[1]->Copy(pPODLayout[0]) && pView->m_pPODLayouts[1].Add(pPODLayout[1]) >= 0) continue;
						delete pPODLayout[1];
					}
				}
			}
			return(!bAll || !bPrompt || DestroyTables(pView, nComponent));
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::CanSaveTables(CONST CDatabaseTableView *pView, ULONGLONG nComponent) CONST
{
	return((DATABASECOMPONENTFROMCODE(nComponent) != DATABASE_COMPONENT_NONE) ? CheckTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), TRUE, FALSE) : FALSE);
}

BOOL CALTELDatabaseEngine::CheckTables(CDatabaseTableView *pView, ULONGLONG nComponent, CStringArray &szIssues) CONST
{
	CString  szTable;

	for (szIssues.RemoveAll(); DATABASECOMPONENTFROMCODE(nComponent) != DATABASE_COMPONENT_NONE; )
	{
		if (CheckTableFieldData(pView, (szTable = TranslateComponentToTableName(pView, nComponent)), szIssues))
		{
			szIssues.InsertAt(0, szTable);
			return TRUE;
		}
		break;
	}
	szIssues.InsertAt(0, szTable);
	return FALSE;
}

BOOL CALTELDatabaseEngine::CanCheckTables(CONST CDatabaseTableView *pView, ULONGLONG nComponent) CONST
{
	UINT  nControlID;
	CString  szTable;
	CString  szValue;
	CString  szContext;

	return((DATABASECOMPONENTFROMCODE(nComponent) != DATABASE_COMPONENT_NONE) ? (((GetTableContext(pView, (szTable = TranslateComponentToTableName(pView, nComponent)), szContext, nControlID, szValue) && !szValue.IsEmpty()) || (DATABASESUBCOMPONENTFROMCODE(nComponent) != DATABASE_SUBCOMPONENT_NONE  &&  szContext.IsEmpty())) && CheckTableFieldData(pView, szTable)) : FALSE);
}

BOOL CALTELDatabaseEngine::ImportTables(CDatabaseTableView *pView, ULONGLONG nComponent, BOOL bCustom)
{
	INT  nTable;
	INT  nTables;
	BOOL  bTables;
	CDatabaseTCPacket  *pDatabaseTCPacket[2];
	CDatabaseTCPackets  pDatabaseTCPackets;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable[2];
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable[2];
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable[2];
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable[2];
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable[2];
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable[2];
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable[2];
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable[2];
	CDatabaseTMNumCalTables  pDatabaseTMNumCalTables;
	CDatabaseTMTxtCalTables  pDatabaseTMTxtCalTables;
	CDatabaseTMNumOolTables  pDatabaseTMNumOolTables;
	CDatabaseTMTxtOolTables  pDatabaseTMTxtOolTables;
	CDatabaseTCNumCalTables  pDatabaseTCNumCalTables;
	CDatabaseTCTxtCalTables  pDatabaseTCTxtCalTables;
	CDatabaseTCNumOolTables  pDatabaseTCNumOolTables;
	CDatabaseTCTxtOolTables  pDatabaseTCTxtOolTables;
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup[2];
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup[2];
	CDatabaseTCPreExeGroups  pDatabaseTCPreExeGroups;
	CDatabaseTCExeVerGroups  pDatabaseTCExeVerGroups;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet[2];
	CDatabaseTMPacketHeader  *pDatabaseTMPacketHeader[2];
	CDatabaseTMPacketStream  *pDatabaseTMPacketStream[2];
	CDatabaseTMPacketHeaders  pDatabaseTMPacketHeaders;
	CDatabaseTMPacketStreams  pDatabaseTMPacketStreams;
	CDatabaseTCParameterSets  pDatabaseTCParameterSets;
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock[2];
	CDatabaseTCFunctionBlocks  pDatabaseTCFunctionBlocks;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage[2];
	CDatabaseOBProcessorMemoryImages  pDatabaseOBProcessorMemoryImages;
	CDatabaseTablesImportDialog  cDatabaseTablesImportDialog(pView, this);

	if (!bCustom)
	{
		if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPACKET)
		{
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMPACKETHEADER)
			{
				for (pDatabaseTMPacketHeaders.Copy(&pView->m_pDatabaseTMPacketHeaders[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseTMPacketHeaders) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseTMPacketHeaders.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseTMPacketHeader[0] = pDatabaseTMPacketHeaders.GetAt(nTable)) != (CDatabaseTMPacketHeader *)NULL)
						{
							if ((pDatabaseTMPacketHeader[1] = pView->m_pDatabaseTMPacketHeaders[0].GetAt(pView->m_pDatabaseTMPacketHeaders[0].Find(pDatabaseTMPacketHeader[0]->GetName()))))
							{
								pDatabaseTMPacketHeader[1]->Copy(pDatabaseTMPacketHeader[0]);
								continue;
							}
							if ((pDatabaseTMPacketHeader[1] = new CDatabaseTMPacketHeader))
							{
								pDatabaseTMPacketHeader[1]->Copy(pDatabaseTMPacketHeader[0]);
								if (pView->m_pDatabaseTMPacketHeaders[0].Add(pDatabaseTMPacketHeader[1]) >= 0) continue;
								delete pDatabaseTMPacketHeader[1];
							}
							delete pDatabaseTMPacketHeader[0];
						}
						pDatabaseTMPacketHeaders.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTMPacketHeaders.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTMPacketHeader[0] = pDatabaseTMPacketHeaders.GetAt(nTable)) != (CDatabaseTMPacketHeader *)NULL)
						{
							if ((pDatabaseTMPacketHeader[1] = pView->m_pDatabaseTMPacketHeaders[1].GetAt(pView->m_pDatabaseTMPacketHeaders[1].Find(pDatabaseTMPacketHeader[0]->GetName()))))
							{
								pDatabaseTMPacketHeader[1]->Copy(pDatabaseTMPacketHeader[0]);
								continue;
							}
							if ((pDatabaseTMPacketHeader[1] = new CDatabaseTMPacketHeader))
							{
								pDatabaseTMPacketHeader[1]->Copy(pDatabaseTMPacketHeader[0]);
								if (pView->m_pDatabaseTMPacketHeaders[1].Add(pDatabaseTMPacketHeader[1]) >= 0) continue;
								delete pDatabaseTMPacketHeader[1];
							}
							delete pDatabaseTMPacketHeader[0];
						}
						pDatabaseTMPacketHeaders.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTMPacketHeaders.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTMPacketHeader[0] = pDatabaseTMPacketHeaders.GetAt(nTable)) && Save(pDatabaseTMPacketHeader[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_TMPACKETHEADERS_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMPACKETSTREAM)
			{
				for (pDatabaseTMPacketStreams.Copy(&pView->m_pDatabaseTMPacketStreams[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseTMPacketStreams) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseTMPacketStreams.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseTMPacketStream[0] = pDatabaseTMPacketStreams.GetAt(nTable)) != (CDatabaseTMPacketStream *)NULL)
						{
							if ((pDatabaseTMPacketStream[1] = pView->m_pDatabaseTMPacketStreams[0].GetAt(pView->m_pDatabaseTMPacketStreams[0].Find(pDatabaseTMPacketStream[0]->GetName()))))
							{
								pDatabaseTMPacketStream[1]->Copy(pDatabaseTMPacketStream[0]);
								continue;
							}
							if ((pDatabaseTMPacketStream[1] = new CDatabaseTMPacketStream))
							{
								pDatabaseTMPacketStream[1]->Copy(pDatabaseTMPacketStream[0]);
								if (pView->m_pDatabaseTMPacketStreams[0].Add(pDatabaseTMPacketStream[1]) >= 0) continue;
								delete pDatabaseTMPacketStream[1];
							}
							delete pDatabaseTMPacketStream[0];
						}
						pDatabaseTMPacketStreams.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTMPacketStreams.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTMPacketStream[0] = pDatabaseTMPacketStreams.GetAt(nTable)) != (CDatabaseTMPacketStream *)NULL)
						{
							if ((pDatabaseTMPacketStream[1] = pView->m_pDatabaseTMPacketStreams[1].GetAt(pView->m_pDatabaseTMPacketStreams[1].Find(pDatabaseTMPacketStream[0]->GetName()))))
							{
								pDatabaseTMPacketStream[1]->Copy(pDatabaseTMPacketStream[0]);
								continue;
							}
							if ((pDatabaseTMPacketStream[1] = new CDatabaseTMPacketStream))
							{
								pDatabaseTMPacketStream[1]->Copy(pDatabaseTMPacketStream[0]);
								if (pView->m_pDatabaseTMPacketStreams[1].Add(pDatabaseTMPacketStream[1]) >= 0) continue;
								delete pDatabaseTMPacketStream[1];
							}
							delete pDatabaseTMPacketStream[0];
						}
						pDatabaseTMPacketStreams.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTMPacketStreams.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTMPacketStream[0] = pDatabaseTMPacketStreams.GetAt(nTable)) && Save(pDatabaseTMPacketStream[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_TMPACKETSTREAMS_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCFUNCTION)
		{
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONPACKET)
			{
				for (pDatabaseTCPackets.Copy(&pView->m_pDatabaseTCPackets[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseTCPackets) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseTCPackets.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseTCPacket[0] = pDatabaseTCPackets.GetAt(nTable)) != (CDatabaseTCPacket *)NULL)
						{
							if ((pDatabaseTCPacket[1] = pView->m_pDatabaseTCPackets[0].GetAt(pView->m_pDatabaseTCPackets[0].Find(pDatabaseTCPacket[0]->GetTag()))))
							{
								pDatabaseTCPacket[1]->Copy(pDatabaseTCPacket[0]);
								continue;
							}
							if ((pDatabaseTCPacket[1] = new CDatabaseTCPacket))
							{
								pDatabaseTCPacket[1]->Copy(pDatabaseTCPacket[0]);
								if (pView->m_pDatabaseTCPackets[0].Add(pDatabaseTCPacket[1]) >= 0) continue;
								delete pDatabaseTCPacket[1];
							}
							delete pDatabaseTCPacket[0];
						}
						pDatabaseTCPackets.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCPackets.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCPacket[0] = pDatabaseTCPackets.GetAt(nTable)) != (CDatabaseTCPacket *)NULL)
						{
							if ((pDatabaseTCPacket[1] = pView->m_pDatabaseTCPackets[1].GetAt(pView->m_pDatabaseTCPackets[1].Find(pDatabaseTCPacket[0]->GetTag()))))
							{
								pDatabaseTCPacket[1]->Copy(pDatabaseTCPacket[0]);
								continue;
							}
							if ((pDatabaseTCPacket[1] = new CDatabaseTCPacket))
							{
								pDatabaseTCPacket[1]->Copy(pDatabaseTCPacket[0]);
								if (pView->m_pDatabaseTCPackets[1].Add(pDatabaseTCPacket[1]) >= 0) continue;
								delete pDatabaseTCPacket[1];
							}
							delete pDatabaseTCPacket[0];
						}
						pDatabaseTCPackets.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCPackets.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCPacket[0] = pDatabaseTCPackets.GetAt(nTable)) && Save(pDatabaseTCPacket[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPACKETS_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONPREEXEGROUP)
			{
				for (pDatabaseTCPreExeGroups.Copy(&pView->m_pDatabaseTCPreExeGroups[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseTCPreExeGroups) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseTCPreExeGroups.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseTCPreExeGroup[0] = pDatabaseTCPreExeGroups.GetAt(nTable)) != (CDatabaseTCPreExeGroup *)NULL)
						{
							if ((pDatabaseTCPreExeGroup[1] = pView->m_pDatabaseTCPreExeGroups[0].GetAt(pView->m_pDatabaseTCPreExeGroups[0].Find(pDatabaseTCPreExeGroup[0]->GetID()))))
							{
								pDatabaseTCPreExeGroup[1]->Copy(pDatabaseTCPreExeGroup[0]);
								continue;
							}
							if ((pDatabaseTCPreExeGroup[1] = new CDatabaseTCPreExeGroup))
							{
								pDatabaseTCPreExeGroup[1]->Copy(pDatabaseTCPreExeGroup[0]);
								if (pView->m_pDatabaseTCPreExeGroups[0].Add(pDatabaseTCPreExeGroup[1]) >= 0) continue;
								delete pDatabaseTCPreExeGroup[1];
							}
							delete pDatabaseTCPreExeGroup[0];
						}
						pDatabaseTCPreExeGroups.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCPreExeGroups.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCPreExeGroup[0] = pDatabaseTCPreExeGroups.GetAt(nTable)) != (CDatabaseTCPreExeGroup *)NULL)
						{
							if ((pDatabaseTCPreExeGroup[1] = pView->m_pDatabaseTCPreExeGroups[1].GetAt(pView->m_pDatabaseTCPreExeGroups[1].Find(pDatabaseTCPreExeGroup[0]->GetID()))))
							{
								pDatabaseTCPreExeGroup[1]->Copy(pDatabaseTCPreExeGroup[0]);
								continue;
							}
							if ((pDatabaseTCPreExeGroup[1] = new CDatabaseTCPreExeGroup))
							{
								pDatabaseTCPreExeGroup[1]->Copy(pDatabaseTCPreExeGroup[0]);
								if (pView->m_pDatabaseTCPreExeGroups[1].Add(pDatabaseTCPreExeGroup[1]) >= 0) continue;
								delete pDatabaseTCPreExeGroup[1];
							}
							delete pDatabaseTCPreExeGroup[0];
						}
						pDatabaseTCPreExeGroups.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCPreExeGroups.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCPreExeGroup[0] = pDatabaseTCPreExeGroups.GetAt(nTable)) && Save(pDatabaseTCPreExeGroup[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPREEXEGROUPS_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONEXEVERGROUP)
			{
				for (pDatabaseTCExeVerGroups.Copy(&pView->m_pDatabaseTCExeVerGroups[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseTCExeVerGroups) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseTCExeVerGroups.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseTCExeVerGroup[0] = pDatabaseTCExeVerGroups.GetAt(nTable)) != (CDatabaseTCExeVerGroup *)NULL)
						{
							if ((pDatabaseTCExeVerGroup[1] = pView->m_pDatabaseTCExeVerGroups[0].GetAt(pView->m_pDatabaseTCExeVerGroups[0].Find(pDatabaseTCExeVerGroup[0]->GetID()))))
							{
								pDatabaseTCExeVerGroup[1]->Copy(pDatabaseTCExeVerGroup[0]);
								continue;
							}
							if ((pDatabaseTCExeVerGroup[1] = new CDatabaseTCExeVerGroup))
							{
								pDatabaseTCExeVerGroup[1]->Copy(pDatabaseTCExeVerGroup[0]);
								if (pView->m_pDatabaseTCExeVerGroups[0].Add(pDatabaseTCExeVerGroup[1]) >= 0) continue;
								delete pDatabaseTCExeVerGroup[1];
							}
							delete pDatabaseTCExeVerGroup[0];
						}
						pDatabaseTCExeVerGroups.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCExeVerGroups.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCExeVerGroup[0] = pDatabaseTCExeVerGroups.GetAt(nTable)) != (CDatabaseTCExeVerGroup *)NULL)
						{
							if ((pDatabaseTCExeVerGroup[1] = pView->m_pDatabaseTCExeVerGroups[1].GetAt(pView->m_pDatabaseTCExeVerGroups[1].Find(pDatabaseTCExeVerGroup[0]->GetID()))))
							{
								pDatabaseTCExeVerGroup[1]->Copy(pDatabaseTCExeVerGroup[0]);
								continue;
							}
							if ((pDatabaseTCExeVerGroup[1] = new CDatabaseTCExeVerGroup))
							{
								pDatabaseTCExeVerGroup[1]->Copy(pDatabaseTCExeVerGroup[0]);
								if (pView->m_pDatabaseTCExeVerGroups[1].Add(pDatabaseTCExeVerGroup[1]) >= 0) continue;
								delete pDatabaseTCExeVerGroup[1];
							}
							delete pDatabaseTCExeVerGroup[0];
						}
						pDatabaseTCExeVerGroups.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCExeVerGroups.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCExeVerGroup[0] = pDatabaseTCExeVerGroups.GetAt(nTable)) && Save(pDatabaseTCExeVerGroup[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_TCFUNCTIONEXEVERGROUPS_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCPARAMETERSET)
			{
				for (pDatabaseTCParameterSets.Copy(&pView->m_pDatabaseTCParameterSets[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseTCParameterSets) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseTCParameterSets.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseTCParameterSet[0] = pDatabaseTCParameterSets.GetAt(nTable)) != (CDatabaseTCParameterSet *)NULL)
						{
							if ((pDatabaseTCParameterSet[1] = pView->m_pDatabaseTCParameterSets[0].GetAt(pView->m_pDatabaseTCParameterSets[0].Find(pDatabaseTCParameterSet[0]->GetName()))))
							{
								pDatabaseTCParameterSet[1]->Copy(pDatabaseTCParameterSet[0]);
								continue;
							}
							if ((pDatabaseTCParameterSet[1] = new CDatabaseTCParameterSet))
							{
								pDatabaseTCParameterSet[1]->Copy(pDatabaseTCParameterSet[0]);
								if (pView->m_pDatabaseTCParameterSets[0].Add(pDatabaseTCParameterSet[1]) >= 0) continue;
								delete pDatabaseTCParameterSet[1];
							}
							delete pDatabaseTCParameterSet[0];
						}
						pDatabaseTCParameterSets.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCParameterSets.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCParameterSet[0] = pDatabaseTCParameterSets.GetAt(nTable)) != (CDatabaseTCParameterSet *)NULL)
						{
							if ((pDatabaseTCParameterSet[1] = pView->m_pDatabaseTCParameterSets[1].GetAt(pView->m_pDatabaseTCParameterSets[1].Find(pDatabaseTCParameterSet[0]->GetName()))))
							{
								pDatabaseTCParameterSet[1]->Copy(pDatabaseTCParameterSet[0]);
								continue;
							}
							if ((pDatabaseTCParameterSet[1] = new CDatabaseTCParameterSet))
							{
								pDatabaseTCParameterSet[1]->Copy(pDatabaseTCParameterSet[0]);
								if (pView->m_pDatabaseTCParameterSets[1].Add(pDatabaseTCParameterSet[1]) >= 0) continue;
								delete pDatabaseTCParameterSet[1];
							}
							delete pDatabaseTCParameterSet[0];
						}
						pDatabaseTCParameterSets.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCParameterSets.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCParameterSet[0] = pDatabaseTCParameterSets.GetAt(nTable)) && Save(pDatabaseTCParameterSet[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPARAMETERSETS_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCSEQUENCE)
		{
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONBLOCK)
			{
				for (pDatabaseTCFunctionBlocks.Copy(&pView->m_pDatabaseTCFunctionBlocks[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseTCFunctionBlocks) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseTCFunctionBlocks.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseTCFunctionBlock[0] = pDatabaseTCFunctionBlocks.GetAt(nTable)) != (CDatabaseTCFunctionBlock *)NULL)
						{
							if ((pDatabaseTCFunctionBlock[1] = pView->m_pDatabaseTCFunctionBlocks[0].GetAt(pView->m_pDatabaseTCFunctionBlocks[0].Find(pDatabaseTCFunctionBlock[0]->GetName()))))
							{
								pDatabaseTCFunctionBlock[1]->Copy(pDatabaseTCFunctionBlock[0]);
								continue;
							}
							if ((pDatabaseTCFunctionBlock[1] = new CDatabaseTCFunctionBlock))
							{
								pDatabaseTCFunctionBlock[1]->Copy(pDatabaseTCFunctionBlock[0]);
								if (pView->m_pDatabaseTCFunctionBlocks[0].Add(pDatabaseTCFunctionBlock[1]) >= 0) continue;
								delete pDatabaseTCFunctionBlock[1];
							}
							delete pDatabaseTCFunctionBlock[0];
						}
						pDatabaseTCFunctionBlocks.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCFunctionBlocks.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCFunctionBlock[0] = pDatabaseTCFunctionBlocks.GetAt(nTable)) != (CDatabaseTCFunctionBlock *)NULL)
						{
							if ((pDatabaseTCFunctionBlock[1] = pView->m_pDatabaseTCFunctionBlocks[1].GetAt(pView->m_pDatabaseTCFunctionBlocks[1].Find(pDatabaseTCFunctionBlock[0]->GetName()))))
							{
								pDatabaseTCFunctionBlock[1]->Copy(pDatabaseTCFunctionBlock[0]);
								continue;
							}
							if ((pDatabaseTCFunctionBlock[1] = new CDatabaseTCFunctionBlock))
							{
								pDatabaseTCFunctionBlock[1]->Copy(pDatabaseTCFunctionBlock[0]);
								if (pView->m_pDatabaseTCFunctionBlocks[1].Add(pDatabaseTCFunctionBlock[1]) >= 0) continue;
								delete pDatabaseTCFunctionBlock[1];
							}
							delete pDatabaseTCFunctionBlock[0];
						}
						pDatabaseTCFunctionBlocks.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCFunctionBlocks.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCFunctionBlock[0] = pDatabaseTCFunctionBlocks.GetAt(nTable)) && Save(pDatabaseTCFunctionBlock[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_TCSEQUENCEFUNCTIONBLOCKS_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_OBPROCESSOR)
		{
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_OBPROCESSORMEMORYIMAGE)
			{
				for (pDatabaseOBProcessorMemoryImages.Copy(&pView->m_pDatabaseOBProcessorMemoryImages[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseOBProcessorMemoryImages) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseOBProcessorMemoryImages.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseOBProcessorMemoryImage[0] = pDatabaseOBProcessorMemoryImages.GetAt(nTable)) != (CDatabaseOBProcessorMemoryImage *)NULL)
						{
							if ((pDatabaseOBProcessorMemoryImage[1] = pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pDatabaseOBProcessorMemoryImage[0]->GetName()))))
							{
								pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]);
								continue;
							}
							if ((pDatabaseOBProcessorMemoryImage[1] = new CDatabaseOBProcessorMemoryImage))
							{
								pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]);
								if (pView->m_pDatabaseOBProcessorMemoryImages[0].Add(pDatabaseOBProcessorMemoryImage[1]) >= 0) continue;
								delete pDatabaseOBProcessorMemoryImage[1];
							}
							delete pDatabaseOBProcessorMemoryImage[0];
						}
						pDatabaseOBProcessorMemoryImages.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseOBProcessorMemoryImages.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseOBProcessorMemoryImage[0] = pDatabaseOBProcessorMemoryImages.GetAt(nTable)) != (CDatabaseOBProcessorMemoryImage *)NULL)
						{
							if ((pDatabaseOBProcessorMemoryImage[1] = pView->m_pDatabaseOBProcessorMemoryImages[1].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[1].Find(pDatabaseOBProcessorMemoryImage[0]->GetName()))))
							{
								pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]);
								continue;
							}
							if ((pDatabaseOBProcessorMemoryImage[1] = new CDatabaseOBProcessorMemoryImage))
							{
								pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]);
								if (pView->m_pDatabaseOBProcessorMemoryImages[1].Add(pDatabaseOBProcessorMemoryImage[1]) >= 0) continue;
								delete pDatabaseOBProcessorMemoryImage[1];
							}
							delete pDatabaseOBProcessorMemoryImage[0];
						}
						pDatabaseOBProcessorMemoryImages.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseOBProcessorMemoryImages.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseOBProcessorMemoryImage[0] = pDatabaseOBProcessorMemoryImages.GetAt(nTable)) && Save(pDatabaseOBProcessorMemoryImage[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_OBPROCESSORMEMORYIMAGES_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPARAMETER)
		{
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMNUMCALTABLE)
			{
				for (pDatabaseTMNumCalTables.Copy(&pView->m_pDatabaseTMNumCalTables[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseTMNumCalTables) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseTMNumCalTables.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseTMNumCalTable[0] = pDatabaseTMNumCalTables.GetAt(nTable)) != (CDatabaseTMNumCalTable *)NULL)
						{
							if ((pDatabaseTMNumCalTable[1] = pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find(pDatabaseTMNumCalTable[0]->GetName()))))
							{
								pDatabaseTMNumCalTable[1]->Copy(pDatabaseTMNumCalTable[0]);
								continue;
							}
							if ((pDatabaseTMNumCalTable[1] = new CDatabaseTMNumCalTable))
							{
								pDatabaseTMNumCalTable[1]->Copy(pDatabaseTMNumCalTable[0]);
								if (pView->m_pDatabaseTMNumCalTables[0].Add(pDatabaseTMNumCalTable[1]) >= 0) continue;
								delete pDatabaseTMNumCalTable[1];
							}
							delete pDatabaseTMNumCalTable[0];
						}
						pDatabaseTMNumCalTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTMNumCalTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTMNumCalTable[0] = pDatabaseTMNumCalTables.GetAt(nTable)) != (CDatabaseTMNumCalTable *)NULL)
						{
							if ((pDatabaseTMNumCalTable[1] = pView->m_pDatabaseTMNumCalTables[1].GetAt(pView->m_pDatabaseTMNumCalTables[1].Find(pDatabaseTMNumCalTable[0]->GetName()))))
							{
								pDatabaseTMNumCalTable[1]->Copy(pDatabaseTMNumCalTable[0]);
								continue;
							}
							if ((pDatabaseTMNumCalTable[1] = new CDatabaseTMNumCalTable))
							{
								pDatabaseTMNumCalTable[1]->Copy(pDatabaseTMNumCalTable[0]);
								if (pView->m_pDatabaseTMNumCalTables[1].Add(pDatabaseTMNumCalTable[1]) >= 0) continue;
								delete pDatabaseTMNumCalTable[1];
							}
							delete pDatabaseTMNumCalTable[0];
						}
						pDatabaseTMNumCalTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTMNumCalTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTMNumCalTable[0] = pDatabaseTMNumCalTables.GetAt(nTable)) && Save(pDatabaseTMNumCalTable[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMCALTABLES_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMTXTCALTABLE)
			{
				for (pDatabaseTMTxtCalTables.Copy(&pView->m_pDatabaseTMTxtCalTables[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseTMTxtCalTables) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseTMTxtCalTables.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseTMTxtCalTable[0] = pDatabaseTMTxtCalTables.GetAt(nTable)) != (CDatabaseTMTxtCalTable *)NULL)
						{
							if ((pDatabaseTMTxtCalTable[1] = pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find(pDatabaseTMTxtCalTable[0]->GetName()))))
							{
								pDatabaseTMTxtCalTable[1]->Copy(pDatabaseTMTxtCalTable[0]);
								continue;
							}
							if ((pDatabaseTMTxtCalTable[1] = new CDatabaseTMTxtCalTable))
							{
								pDatabaseTMTxtCalTable[1]->Copy(pDatabaseTMTxtCalTable[0]);
								if (pView->m_pDatabaseTMTxtCalTables[0].Add(pDatabaseTMTxtCalTable[1]) >= 0) continue;
								delete pDatabaseTMTxtCalTable[1];
							}
							delete pDatabaseTMTxtCalTable[0];
						}
						pDatabaseTMTxtCalTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTMTxtCalTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTMTxtCalTable[0] = pDatabaseTMTxtCalTables.GetAt(nTable)) != (CDatabaseTMTxtCalTable *)NULL)
						{
							if ((pDatabaseTMTxtCalTable[1] = pView->m_pDatabaseTMTxtCalTables[1].GetAt(pView->m_pDatabaseTMTxtCalTables[1].Find(pDatabaseTMTxtCalTable[0]->GetName()))))
							{
								pDatabaseTMTxtCalTable[1]->Copy(pDatabaseTMTxtCalTable[0]);
								continue;
							}
							if ((pDatabaseTMTxtCalTable[1] = new CDatabaseTMTxtCalTable))
							{
								pDatabaseTMTxtCalTable[1]->Copy(pDatabaseTMTxtCalTable[0]);
								if (pView->m_pDatabaseTMTxtCalTables[1].Add(pDatabaseTMTxtCalTable[1]) >= 0) continue;
								delete pDatabaseTMTxtCalTable[1];
							}
							delete pDatabaseTMTxtCalTable[0];
						}
						pDatabaseTMTxtCalTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTMTxtCalTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTMTxtCalTable[0] = pDatabaseTMTxtCalTables.GetAt(nTable)) && Save(pDatabaseTMTxtCalTable[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTCALTABLES_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMNUMOOLTABLE)
			{
				for (pDatabaseTMNumOolTables.Copy(&pView->m_pDatabaseTMNumOolTables[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseTMNumOolTables) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseTMNumOolTables.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseTMNumOolTable[0] = pDatabaseTMNumOolTables.GetAt(nTable)) != (CDatabaseTMNumOolTable *)NULL)
						{
							if ((pDatabaseTMNumOolTable[1] = pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find(pDatabaseTMNumOolTable[0]->GetName()))))
							{
								pDatabaseTMNumOolTable[1]->Copy(pDatabaseTMNumOolTable[0]);
								continue;
							}
							if ((pDatabaseTMNumOolTable[1] = new CDatabaseTMNumOolTable))
							{
								pDatabaseTMNumOolTable[1]->Copy(pDatabaseTMNumOolTable[0]);
								if (pView->m_pDatabaseTMNumOolTables[0].Add(pDatabaseTMNumOolTable[1]) >= 0) continue;
								delete pDatabaseTMNumOolTable[1];
							}
							delete pDatabaseTMNumOolTable[0];
						}
						pDatabaseTMNumOolTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTMNumOolTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTMNumOolTable[0] = pDatabaseTMNumOolTables.GetAt(nTable)) != (CDatabaseTMNumOolTable *)NULL)
						{
							if ((pDatabaseTMNumOolTable[1] = pView->m_pDatabaseTMNumOolTables[1].GetAt(pView->m_pDatabaseTMNumOolTables[1].Find(pDatabaseTMNumOolTable[0]->GetName()))))
							{
								pDatabaseTMNumOolTable[1]->Copy(pDatabaseTMNumOolTable[0]);
								continue;
							}
							if ((pDatabaseTMNumOolTable[1] = new CDatabaseTMNumOolTable))
							{
								pDatabaseTMNumOolTable[1]->Copy(pDatabaseTMNumOolTable[0]);
								if (pView->m_pDatabaseTMNumOolTables[1].Add(pDatabaseTMNumOolTable[1]) >= 0) continue;
								delete pDatabaseTMNumOolTable[1];
							}
							delete pDatabaseTMNumOolTable[0];
						}
						pDatabaseTMNumOolTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTMNumOolTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTMNumOolTable[0] = pDatabaseTMNumOolTables.GetAt(nTable)) && Save(pDatabaseTMNumOolTable[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMOOLTABLES_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMTXTOOLTABLE)
			{
				for (pDatabaseTMTxtOolTables.Copy(&pView->m_pDatabaseTMTxtOolTables[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseTMTxtOolTables) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseTMTxtOolTables.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseTMTxtOolTable[0] = pDatabaseTMTxtOolTables.GetAt(nTable)) != (CDatabaseTMTxtOolTable *)NULL)
						{
							if ((pDatabaseTMTxtOolTable[1] = pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find(pDatabaseTMTxtOolTable[0]->GetName()))))
							{
								pDatabaseTMTxtOolTable[1]->Copy(pDatabaseTMTxtOolTable[0]);
								continue;
							}
							if ((pDatabaseTMTxtOolTable[1] = new CDatabaseTMTxtOolTable))
							{
								pDatabaseTMTxtOolTable[1]->Copy(pDatabaseTMTxtOolTable[0]);
								if (pView->m_pDatabaseTMTxtOolTables[0].Add(pDatabaseTMTxtOolTable[1]) >= 0) continue;
								delete pDatabaseTMTxtOolTable[1];
							}
							delete pDatabaseTMTxtOolTable[0];
						}
						pDatabaseTMTxtOolTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTMTxtOolTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTMTxtOolTable[0] = pDatabaseTMTxtOolTables.GetAt(nTable)) != (CDatabaseTMTxtOolTable *)NULL)
						{
							if ((pDatabaseTMTxtOolTable[1] = pView->m_pDatabaseTMTxtOolTables[1].GetAt(pView->m_pDatabaseTMTxtOolTables[1].Find(pDatabaseTMTxtOolTable[0]->GetName()))))
							{
								pDatabaseTMTxtOolTable[1]->Copy(pDatabaseTMTxtOolTable[0]);
								continue;
							}
							if ((pDatabaseTMTxtOolTable[1] = new CDatabaseTMTxtOolTable))
							{
								pDatabaseTMTxtOolTable[1]->Copy(pDatabaseTMTxtOolTable[0]);
								if (pView->m_pDatabaseTMTxtOolTables[1].Add(pDatabaseTMTxtOolTable[1]) >= 0) continue;
								delete pDatabaseTMTxtOolTable[1];
							}
							delete pDatabaseTMTxtOolTable[0];
						}
						pDatabaseTMTxtOolTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTMTxtOolTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTMTxtOolTable[0] = pDatabaseTMTxtOolTables.GetAt(nTable)) && Save(pDatabaseTMTxtOolTable[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTOOLTABLES_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCPARAMETER)
		{
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCNUMCALTABLE)
			{
				for (pDatabaseTCNumCalTables.Copy(&pView->m_pDatabaseTCNumCalTables[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseTCNumCalTables) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseTCNumCalTables.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseTCNumCalTable[0] = pDatabaseTCNumCalTables.GetAt(nTable)) != (CDatabaseTCNumCalTable *)NULL)
						{
							if ((pDatabaseTCNumCalTable[1] = pView->m_pDatabaseTCNumCalTables[0].GetAt(pView->m_pDatabaseTCNumCalTables[0].Find(pDatabaseTCNumCalTable[0]->GetName()))))
							{
								pDatabaseTCNumCalTable[1]->Copy(pDatabaseTCNumCalTable[0]);
								continue;
							}
							if ((pDatabaseTCNumCalTable[1] = new CDatabaseTCNumCalTable))
							{
								pDatabaseTCNumCalTable[1]->Copy(pDatabaseTCNumCalTable[0]);
								if (pView->m_pDatabaseTCNumCalTables[0].Add(pDatabaseTCNumCalTable[1]) >= 0) continue;
								delete pDatabaseTCNumCalTable[1];
							}
							delete pDatabaseTCNumCalTable[0];
						}
						pDatabaseTCNumCalTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCNumCalTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCNumCalTable[0] = pDatabaseTCNumCalTables.GetAt(nTable)) != (CDatabaseTCNumCalTable *)NULL)
						{
							if ((pDatabaseTCNumCalTable[1] = pView->m_pDatabaseTCNumCalTables[1].GetAt(pView->m_pDatabaseTCNumCalTables[1].Find(pDatabaseTCNumCalTable[0]->GetName()))))
							{
								pDatabaseTCNumCalTable[1]->Copy(pDatabaseTCNumCalTable[0]);
								continue;
							}
							if ((pDatabaseTCNumCalTable[1] = new CDatabaseTCNumCalTable))
							{
								pDatabaseTCNumCalTable[1]->Copy(pDatabaseTCNumCalTable[0]);
								if (pView->m_pDatabaseTCNumCalTables[1].Add(pDatabaseTCNumCalTable[1]) >= 0) continue;
								delete pDatabaseTCNumCalTable[1];
							}
							delete pDatabaseTCNumCalTable[0];
						}
						pDatabaseTCNumCalTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCNumCalTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCNumCalTable[0] = pDatabaseTCNumCalTables.GetAt(nTable)) && Save(pDatabaseTCNumCalTable[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMCALTABLES_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCTXTCALTABLE)
			{
				for (pDatabaseTCTxtCalTables.Copy(&pView->m_pDatabaseTCTxtCalTables[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseTCTxtCalTables) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseTCTxtCalTables.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseTCTxtCalTable[0] = pDatabaseTCTxtCalTables.GetAt(nTable)) != (CDatabaseTCTxtCalTable *)NULL)
						{
							if ((pDatabaseTCTxtCalTable[1] = pView->m_pDatabaseTCTxtCalTables[0].GetAt(pView->m_pDatabaseTCTxtCalTables[0].Find(pDatabaseTCTxtCalTable[0]->GetName()))))
							{
								pDatabaseTCTxtCalTable[1]->Copy(pDatabaseTCTxtCalTable[0]);
								continue;
							}
							if ((pDatabaseTCTxtCalTable[1] = new CDatabaseTCTxtCalTable))
							{
								pDatabaseTCTxtCalTable[1]->Copy(pDatabaseTCTxtCalTable[0]);
								if (pView->m_pDatabaseTCTxtCalTables[0].Add(pDatabaseTCTxtCalTable[1]) >= 0) continue;
								delete pDatabaseTCTxtCalTable[1];
							}
							delete pDatabaseTCTxtCalTable[0];
						}
						pDatabaseTCTxtCalTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCTxtCalTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCTxtCalTable[0] = pDatabaseTCTxtCalTables.GetAt(nTable)) != (CDatabaseTCTxtCalTable *)NULL)
						{
							if ((pDatabaseTCTxtCalTable[1] = pView->m_pDatabaseTCTxtCalTables[1].GetAt(pView->m_pDatabaseTCTxtCalTables[1].Find(pDatabaseTCTxtCalTable[0]->GetName()))))
							{
								pDatabaseTCTxtCalTable[1]->Copy(pDatabaseTCTxtCalTable[0]);
								continue;
							}
							if ((pDatabaseTCTxtCalTable[1] = new CDatabaseTCTxtCalTable))
							{
								pDatabaseTCTxtCalTable[1]->Copy(pDatabaseTCTxtCalTable[0]);
								if (pView->m_pDatabaseTCTxtCalTables[1].Add(pDatabaseTCTxtCalTable[1]) >= 0) continue;
								delete pDatabaseTCTxtCalTable[1];
							}
							delete pDatabaseTCTxtCalTable[0];
						}
						pDatabaseTCTxtCalTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCTxtCalTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCTxtCalTable[0] = pDatabaseTCTxtCalTables.GetAt(nTable)) && Save(pDatabaseTCTxtCalTable[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTCALTABLES_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCNUMOOLTABLE)
			{
				for (pDatabaseTCNumOolTables.Copy(&pView->m_pDatabaseTCNumOolTables[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseTCNumOolTables) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseTCNumOolTables.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseTCNumOolTable[0] = pDatabaseTCNumOolTables.GetAt(nTable)) != (CDatabaseTCNumOolTable *)NULL)
						{
							if ((pDatabaseTCNumOolTable[1] = pView->m_pDatabaseTCNumOolTables[0].GetAt(pView->m_pDatabaseTCNumOolTables[0].Find(pDatabaseTCNumOolTable[0]->GetName()))))
							{
								pDatabaseTCNumOolTable[1]->Copy(pDatabaseTCNumOolTable[0]);
								continue;
							}
							if ((pDatabaseTCNumOolTable[1] = new CDatabaseTCNumOolTable))
							{
								pDatabaseTCNumOolTable[1]->Copy(pDatabaseTCNumOolTable[0]);
								if (pView->m_pDatabaseTCNumOolTables[0].Add(pDatabaseTCNumOolTable[1]) >= 0) continue;
								delete pDatabaseTCNumOolTable[1];
							}
							delete pDatabaseTCNumOolTable[0];
						}
						pDatabaseTCNumOolTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCNumOolTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCNumOolTable[0] = pDatabaseTCNumOolTables.GetAt(nTable)) != (CDatabaseTCNumOolTable *)NULL)
						{
							if ((pDatabaseTCNumOolTable[1] = pView->m_pDatabaseTCNumOolTables[1].GetAt(pView->m_pDatabaseTCNumOolTables[1].Find(pDatabaseTCNumOolTable[0]->GetName()))))
							{
								pDatabaseTCNumOolTable[1]->Copy(pDatabaseTCNumOolTable[0]);
								continue;
							}
							if ((pDatabaseTCNumOolTable[1] = new CDatabaseTCNumOolTable))
							{
								pDatabaseTCNumOolTable[1]->Copy(pDatabaseTCNumOolTable[0]);
								if (pView->m_pDatabaseTCNumOolTables[1].Add(pDatabaseTCNumOolTable[1]) >= 0) continue;
								delete pDatabaseTCNumOolTable[1];
							}
							delete pDatabaseTCNumOolTable[0];
						}
						pDatabaseTCNumOolTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCNumOolTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCNumOolTable[0] = pDatabaseTCNumOolTables.GetAt(nTable)) && Save(pDatabaseTCNumOolTable[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMOOLTABLES_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCTXTOOLTABLE)
			{
				for (pDatabaseTCTxtOolTables.Copy(&pView->m_pDatabaseTCTxtOolTables[0]); cDatabaseTablesImportDialog.DoModal(pDatabaseTCTxtOolTables) == IDOK; )
				{
					for (nTable = 0, nTables = (INT)pDatabaseTCTxtOolTables.GetSize(), bTables = TRUE; nTable < nTables; nTable++)
					{
						if ((pDatabaseTCTxtOolTable[0] = pDatabaseTCTxtOolTables.GetAt(nTable)) != (CDatabaseTCTxtOolTable *)NULL)
						{
							if ((pDatabaseTCTxtOolTable[1] = pView->m_pDatabaseTCTxtOolTables[0].GetAt(pView->m_pDatabaseTCTxtOolTables[0].Find(pDatabaseTCTxtOolTable[0]->GetName()))))
							{
								pDatabaseTCTxtOolTable[1]->Copy(pDatabaseTCTxtOolTable[0]);
								continue;
							}
							if ((pDatabaseTCTxtOolTable[1] = new CDatabaseTCTxtOolTable))
							{
								pDatabaseTCTxtOolTable[1]->Copy(pDatabaseTCTxtOolTable[0]);
								if (pView->m_pDatabaseTCTxtOolTables[0].Add(pDatabaseTCTxtOolTable[1]) >= 0) continue;
								delete pDatabaseTCTxtOolTable[1];
							}
							delete pDatabaseTCTxtOolTable[0];
						}
						pDatabaseTCTxtOolTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCTxtOolTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCTxtOolTable[0] = pDatabaseTCTxtOolTables.GetAt(nTable)) != (CDatabaseTCTxtOolTable *)NULL)
						{
							if ((pDatabaseTCTxtOolTable[1] = pView->m_pDatabaseTCTxtOolTables[1].GetAt(pView->m_pDatabaseTCTxtOolTables[1].Find(pDatabaseTCTxtOolTable[0]->GetName()))))
							{
								pDatabaseTCTxtOolTable[1]->Copy(pDatabaseTCTxtOolTable[0]);
								continue;
							}
							if ((pDatabaseTCTxtOolTable[1] = new CDatabaseTCTxtOolTable))
							{
								pDatabaseTCTxtOolTable[1]->Copy(pDatabaseTCTxtOolTable[0]);
								if (pView->m_pDatabaseTCTxtOolTables[1].Add(pDatabaseTCTxtOolTable[1]) >= 0) continue;
								delete pDatabaseTCTxtOolTable[1];
							}
							delete pDatabaseTCTxtOolTable[0];
						}
						pDatabaseTCTxtOolTables.RemoveAt(nTable);
						bTables = FALSE;
						nTables--;
						nTable--;
					}
					for (nTable = 0, nTables = (INT)pDatabaseTCTxtOolTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pDatabaseTCTxtOolTable[0] = pDatabaseTCTxtOolTables.GetAt(nTable)) && Save(pDatabaseTCTxtOolTable[0])) continue;
						bTables = FALSE;
					}
					for (pView->UpdateTables(nComponent); !bTables; )
					{
						ShowMessage(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTOOLTABLES_IMPORT_FAILURE));
						return FALSE;
					}
					break;
				}
				return TRUE;
			}
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::CanImportTables(CONST CDatabaseTableView *pView, ULONGLONG nComponent, BOOL bCustom) CONST
{
	if (!bCustom)
	{
		if (UsesDBMSTables(nComponent))
		{
			if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPACKET)
			{
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMPACKETHEADER) return TRUE;
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMPACKETSTREAM) return TRUE;
				return FALSE;
			}
			if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCFUNCTION)
			{
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONPACKET) return TRUE;
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONPREEXEGROUP) return TRUE;
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONEXEVERGROUP) return TRUE;
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCPARAMETERSET) return TRUE;
				return FALSE;
			}
			if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCSEQUENCE)
			{
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONBLOCK) return TRUE;
				return FALSE;
			}
			if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_OBPROCESSOR)
			{
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_OBPROCESSORMEMORYIMAGE) return TRUE;
				return FALSE;
			}
			if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPARAMETER)
			{
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMNUMCALTABLE) return TRUE;
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMTXTCALTABLE) return TRUE;
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMNUMOOLTABLE) return TRUE;
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMTXTOOLTABLE) return TRUE;
				return FALSE;
			}
			if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCPARAMETER)
			{
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCNUMCALTABLE) return TRUE;
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCTXTCALTABLE) return TRUE;
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCNUMOOLTABLE) return TRUE;
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCTXTOOLTABLE) return TRUE;
				return FALSE;
			}
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::ExportTables(CDatabaseTableView *pView, ULONGLONG nComponent, BOOL bCustom)
{
	INT_PTR  nResult;
	CDatabaseTablesExportDialog  cDatabaseTablesExportDialog(pView, this);

	if (!bCustom)
	{
		if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPACKET)
		{
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMPACKETHEADER)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseTMPacketHeaders[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_TMPACKETHEADERS_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMPACKETSTREAM)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseTMPacketStreams[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_TMPACKETSTREAMS_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			return FALSE;
		}
		if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCFUNCTION)
		{
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONPACKET)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseTCPackets[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPACKETS_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONPREEXEGROUP)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseTCPreExeGroups[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPREEXEGROUPS_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONEXEVERGROUP)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseTCExeVerGroups[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_TCFUNCTIONEXEVERGROUPS_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCPARAMETERSET)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseTCParameterSets[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPARAMETERSETS_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			return FALSE;
		}
		if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCSEQUENCE)
		{
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONBLOCK)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseTCFunctionBlocks[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_TCSEQUENCEFUNCTIONBLOCKS_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			return FALSE;
		}
		if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_OBPROCESSOR)
		{
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_OBPROCESSORMEMORYIMAGE)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseOBProcessorMemoryImages[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_OBPROCESSORMEMORYIMAGES_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			return FALSE;
		}
		if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPARAMETER)
		{
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMNUMCALTABLE)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseTMNumCalTables[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMCALTABLES_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMTXTCALTABLE)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseTMTxtCalTables[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTCALTABLES_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMNUMOOLTABLE)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseTMNumOolTables[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMOOLTABLES_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMTXTOOLTABLE)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseTMTxtOolTables[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTOOLTABLES_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			return FALSE;
		}
		if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCPARAMETER)
		{
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCNUMCALTABLE)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseTCNumCalTables[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMCALTABLES_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCTXTCALTABLE)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseTCTxtCalTables[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTCALTABLES_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCNUMOOLTABLE)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseTCNumOolTables[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMOOLTABLES_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCTXTOOLTABLE)
			{
				if ((nResult = cDatabaseTablesExportDialog.DoModal(pView->m_pDatabaseTCTxtOolTables[0])) == IDABORT)
				{
					ShowMessage(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTOOLTABLES_EXPORT_FAILURE));
					return FALSE;
				}
				return((nResult == IDOK) ? TRUE : FALSE);
			}
			return FALSE;
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::CanExportTables(CONST CDatabaseTableView *pView, ULONGLONG nComponent, BOOL bCustom) CONST
{
	if (!bCustom)
	{
		if (UsesDBMSTables(nComponent))
		{
			if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPACKET)
			{
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMPACKETHEADER) return(pView->m_pDatabaseTMPacketHeaders[0].GetSize() > 0);
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMPACKETSTREAM) return(pView->m_pDatabaseTMPacketStreams[0].GetSize() > 0);
				return FALSE;
			}
			if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCFUNCTION)
			{
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONPACKET) return(pView->m_pDatabaseTCPackets[0].GetSize() > 0);
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONPREEXEGROUP) return(pView->m_pDatabaseTCPreExeGroups[0].GetSize() > 0);
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONEXEVERGROUP) return(pView->m_pDatabaseTCExeVerGroups[0].GetSize() > 0);
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCPARAMETERSET) return(pView->m_pDatabaseTCParameterSets[0].GetSize() > 0);
				return FALSE;
			}
			if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCSEQUENCE)
			{
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONBLOCK) return(pView->m_pDatabaseTCFunctionBlocks[0].GetSize() > 0);
				return FALSE;
			}
			if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_OBPROCESSOR)
			{
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_OBPROCESSORMEMORYIMAGE) return(pView->m_pDatabaseOBProcessorMemoryImages[0].GetSize() > 0);
				return FALSE;
			}
			if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPARAMETER)
			{
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMNUMCALTABLE) return(pView->m_pDatabaseTMNumCalTables[0].GetSize() > 0);
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMTXTCALTABLE) return(pView->m_pDatabaseTMTxtCalTables[0].GetSize() > 0);
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMNUMOOLTABLE) return(pView->m_pDatabaseTMNumOolTables[0].GetSize() > 0);
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMTXTOOLTABLE) return(pView->m_pDatabaseTMTxtOolTables[0].GetSize() > 0);
				return FALSE;
			}
			if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCPARAMETER)
			{
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCNUMCALTABLE) return(pView->m_pDatabaseTCNumCalTables[0].GetSize() > 0);
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCTXTCALTABLE) return(pView->m_pDatabaseTCTxtCalTables[0].GetSize() > 0);
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCNUMOOLTABLE) return(pView->m_pDatabaseTCNumOolTables[0].GetSize() > 0);
				if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCTXTOOLTABLE) return(pView->m_pDatabaseTCTxtOolTables[0].GetSize() > 0);
				return FALSE;
			}
		}
	}
	return FALSE;
}

VOID CALTELDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CDatabaseTMPackets &pDatabaseTMPackets)
{
	INT  nPacket;
	INT  nPackets;
	CDatabaseTMPacket  *pDatabaseTMPacket[2];

	for (nPacket = 0, nPackets = (INT)pDatabaseTMPackets.GetSize(); nPacket < nPackets; nPacket++)
	{
		if ((pDatabaseTMPacket[0] = pDatabaseTMPackets.GetAt(nPacket)) != (CDatabaseTMPacket *)NULL)
		{
			if ((pDatabaseTMPacket[1] = pView->m_pDatabaseTMPackets[0].GetAt(pView->m_pDatabaseTMPackets[0].Find(pDatabaseTMPacket[0]->GetTag()))))
			{
				pDatabaseTMPacket[1]->Copy(pDatabaseTMPacket[0]);
				continue;
			}
			if ((pDatabaseTMPacket[1] = new CDatabaseTMPacket))
			{
				pDatabaseTMPacket[1]->Copy(pDatabaseTMPacket[0]);
				if (pView->m_pDatabaseTMPackets[0].Add(pDatabaseTMPacket[1]) >= 0) continue;
				delete pDatabaseTMPacket[1];
			}
		}
	}
	for (nPacket = 0, nPackets = (INT)pDatabaseTMPackets.GetSize(); nPacket < nPackets; nPacket++)
	{
		if ((pDatabaseTMPacket[0] = pDatabaseTMPackets.GetAt(nPacket)) != (CDatabaseTMPacket *)NULL)
		{
			if ((pDatabaseTMPacket[1] = pView->m_pDatabaseTMPackets[1].GetAt(pView->m_pDatabaseTMPackets[1].Find(pDatabaseTMPacket[0]->GetTag()))))
			{
				pDatabaseTMPacket[1]->Copy(pDatabaseTMPacket[0]);
				continue;
			}
			if ((pDatabaseTMPacket[1] = new CDatabaseTMPacket))
			{
				pDatabaseTMPacket[1]->Copy(pDatabaseTMPacket[0]);
				if (pView->m_pDatabaseTMPackets[1].Add(pDatabaseTMPacket[1]) >= 0) continue;
				delete pDatabaseTMPacket[1];
			}
		}
	}
	UpdateTables(pView, DATABASE_COMPONENT_TMPACKET | DATABASE_SUBCOMPONENT_NONE);
}
VOID CALTELDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CDatabaseTCFunctions &pDatabaseTCFunctions)
{
	INT  nFunction;
	INT  nFunctions;
	CDatabaseTCFunction  *pDatabaseTCFunction[2];

	for (nFunction = 0, nFunctions = (INT)pDatabaseTCFunctions.GetSize(); nFunction < nFunctions; nFunction++)
	{
		if ((pDatabaseTCFunction[0] = pDatabaseTCFunctions.GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
		{
			if ((pDatabaseTCFunction[1] = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pDatabaseTCFunction[0]->GetName()))))
			{
				pDatabaseTCFunction[1]->Copy(pDatabaseTCFunction[0]);
				continue;
			}
			if ((pDatabaseTCFunction[1] = new CDatabaseTCFunction))
			{
				pDatabaseTCFunction[1]->Copy(pDatabaseTCFunction[0]);
				if (pView->m_pDatabaseTCFunctions[0].Add(pDatabaseTCFunction[1]) >= 0) continue;
				delete pDatabaseTCFunction[1];
			}
		}
	}
	for (nFunction = 0, nFunctions = (INT)pDatabaseTCFunctions.GetSize(); nFunction < nFunctions; nFunction++)
	{
		if ((pDatabaseTCFunction[0] = pDatabaseTCFunctions.GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
		{
			if ((pDatabaseTCFunction[1] = pView->m_pDatabaseTCFunctions[1].GetAt(pView->m_pDatabaseTCFunctions[1].Find(pDatabaseTCFunction[0]->GetName()))))
			{
				pDatabaseTCFunction[1]->Copy(pDatabaseTCFunction[0]);
				continue;
			}
			if ((pDatabaseTCFunction[1] = new CDatabaseTCFunction))
			{
				pDatabaseTCFunction[1]->Copy(pDatabaseTCFunction[0]);
				if (pView->m_pDatabaseTCFunctions[1].Add(pDatabaseTCFunction[1]) >= 0) continue;
				delete pDatabaseTCFunction[1];
			}
		}
	}
	UpdateTables(pView, DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_NONE);
}
VOID CALTELDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CDatabaseTCSequences &pDatabaseTCSequences)
{
	INT  nSequence;
	INT  nSequences;
	CDatabaseTCSequence  *pDatabaseTCSequence[2];

	for (nSequence = 0, nSequences = (INT)pDatabaseTCSequences.GetSize(); nSequence < nSequences; nSequence++)
	{
		if ((pDatabaseTCSequence[0] = pDatabaseTCSequences.GetAt(nSequence)) != (CDatabaseTCSequence *)NULL)
		{
			if ((pDatabaseTCSequence[1] = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pDatabaseTCSequence[0]->GetName()))))
			{
				pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0]);
				continue;
			}
			if ((pDatabaseTCSequence[1] = new CDatabaseTCSequence))
			{
				pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0]);
				if (pView->m_pDatabaseTCSequences[0].Add(pDatabaseTCSequence[1]) >= 0) continue;
				delete pDatabaseTCSequence[1];
			}
		}
	}
	for (nSequence = 0, nSequences = (INT)pDatabaseTCSequences.GetSize(); nSequence < nSequences; nSequence++)
	{
		if ((pDatabaseTCSequence[0] = pDatabaseTCSequences.GetAt(nSequence)) != (CDatabaseTCSequence *)NULL)
		{
			if ((pDatabaseTCSequence[1] = pView->m_pDatabaseTCSequences[1].GetAt(pView->m_pDatabaseTCSequences[1].Find(pDatabaseTCSequence[0]->GetName()))))
			{
				pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0]);
				continue;
			}
			if ((pDatabaseTCSequence[1] = new CDatabaseTCSequence))
			{
				pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0]);
				if (pView->m_pDatabaseTCSequences[1].Add(pDatabaseTCSequence[1]) >= 0) continue;
				delete pDatabaseTCSequence[1];
			}
		}
	}
	UpdateTables(pView, DATABASE_COMPONENT_TCSEQUENCE | DATABASE_SUBCOMPONENT_NONE);
}
VOID CALTELDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CDatabaseOBProcessors &pDatabaseOBProcessors)
{
	INT  nProcessor;
	INT  nProcessors;
	CDatabaseOBProcessor  *pDatabaseOBProcessor[2];

	for (nProcessor = 0, nProcessors = (INT)pDatabaseOBProcessors.GetSize(); nProcessor < nProcessors; nProcessor++)
	{
		if ((pDatabaseOBProcessor[0] = pDatabaseOBProcessors.GetAt(nProcessor)) != (CDatabaseOBProcessor *)NULL)
		{
			if ((pDatabaseOBProcessor[1] = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pDatabaseOBProcessor[0]->GetName()))))
			{
				pDatabaseOBProcessor[1]->Copy(pDatabaseOBProcessor[0]);
				continue;
			}
			if ((pDatabaseOBProcessor[1] = new CDatabaseOBProcessor))
			{
				pDatabaseOBProcessor[1]->Copy(pDatabaseOBProcessor[0]);
				if (pView->m_pDatabaseOBProcessors[0].Add(pDatabaseOBProcessor[1]) >= 0) continue;
				delete pDatabaseOBProcessor[1];
			}
		}
	}
	for (nProcessor = 0, nProcessors = (INT)pDatabaseOBProcessors.GetSize(); nProcessor < nProcessors; nProcessor++)
	{
		if ((pDatabaseOBProcessor[0] = pDatabaseOBProcessors.GetAt(nProcessor)) != (CDatabaseOBProcessor *)NULL)
		{
			if ((pDatabaseOBProcessor[1] = pView->m_pDatabaseOBProcessors[1].GetAt(pView->m_pDatabaseOBProcessors[1].Find(pDatabaseOBProcessor[0]->GetName()))))
			{
				pDatabaseOBProcessor[1]->Copy(pDatabaseOBProcessor[0]);
				continue;
			}
			if ((pDatabaseOBProcessor[1] = new CDatabaseOBProcessor))
			{
				pDatabaseOBProcessor[1]->Copy(pDatabaseOBProcessor[0]);
				if (pView->m_pDatabaseOBProcessors[1].Add(pDatabaseOBProcessor[1]) >= 0) continue;
				delete pDatabaseOBProcessor[1];
			}
		}
	}
	UpdateTables(pView, DATABASE_COMPONENT_OBPROCESSOR | DATABASE_SUBCOMPONENT_NONE);
}
VOID CALTELDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CDatabaseTMParameters &pDatabaseTMParameters)
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMParameter  *pDatabaseTMParameter[2];

	for (nParameter = 0, nParameters = (INT)pDatabaseTMParameters.GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter[0] = pDatabaseTMParameters.GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
		{
			if ((pDatabaseTMParameter[1] = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pDatabaseTMParameter[0]->GetTag()))))
			{
				pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0]);
				continue;
			}
			if ((pDatabaseTMParameter[1] = new CDatabaseTMParameter))
			{
				pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0]);
				if (pView->m_pDatabaseTMParameters[0].Add(pDatabaseTMParameter[1]) >= 0) continue;
				delete pDatabaseTMParameter[1];
			}
		}
	}
	for (nParameter = 0, nParameters = (INT)pDatabaseTMParameters.GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter[0] = pDatabaseTMParameters.GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
		{
			if ((pDatabaseTMParameter[1] = pView->m_pDatabaseTMParameters[1].GetAt(pView->m_pDatabaseTMParameters[1].Find(pDatabaseTMParameter[0]->GetTag()))))
			{
				pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0]);
				continue;
			}
			if ((pDatabaseTMParameter[1] = new CDatabaseTMParameter))
			{
				pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0]);
				if (pView->m_pDatabaseTMParameters[1].Add(pDatabaseTMParameter[1]) >= 0) continue;
				delete pDatabaseTMParameter[1];
			}
		}
	}
	UpdateTables(pView, DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_NONE);
}
VOID CALTELDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CDatabaseTCParameters &pDatabaseTCParameters)
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCParameter  *pDatabaseTCParameter[2];

	for (nParameter = 0, nParameters = (INT)pDatabaseTCParameters.GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter[0] = pDatabaseTCParameters.GetAt(nParameter)) != (CDatabaseTCParameter *)NULL)
		{
			if ((pDatabaseTCParameter[1] = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pDatabaseTCParameter[0]->GetTag()))))
			{
				pDatabaseTCParameter[1]->Copy(pDatabaseTCParameter[0]);
				continue;
			}
			if ((pDatabaseTCParameter[1] = new CDatabaseTCParameter))
			{
				pDatabaseTCParameter[1]->Copy(pDatabaseTCParameter[0]);
				if (pView->m_pDatabaseTCParameters[0].Add(pDatabaseTCParameter[1]) >= 0) continue;
				delete pDatabaseTCParameter[1];
			}
		}
	}
	for (nParameter = 0, nParameters = (INT)pDatabaseTCParameters.GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter[0] = pDatabaseTCParameters.GetAt(nParameter)) != (CDatabaseTCParameter *)NULL)
		{
			if ((pDatabaseTCParameter[1] = pView->m_pDatabaseTCParameters[1].GetAt(pView->m_pDatabaseTCParameters[1].Find(pDatabaseTCParameter[0]->GetTag()))))
			{
				pDatabaseTCParameter[1]->Copy(pDatabaseTCParameter[0]);
				continue;
			}
			if ((pDatabaseTCParameter[1] = new CDatabaseTCParameter))
			{
				pDatabaseTCParameter[1]->Copy(pDatabaseTCParameter[0]);
				if (pView->m_pDatabaseTCParameters[1].Add(pDatabaseTCParameter[1]) >= 0) continue;
				delete pDatabaseTCParameter[1];
			}
		}
	}
	UpdateTables(pView, DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_NONE);
}
VOID CALTELDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CANDLayouts &pANDLayouts)
{
	INT  nLayout;
	INT  nLayouts;
	CANDLayout  *pANDLayout[2];

	for (nLayout = 0, nLayouts = (INT)pANDLayouts.GetSize(); nLayout < nLayouts; nLayout++)
	{
		if ((pANDLayout[0] = pANDLayouts.GetAt(nLayout)) != (CANDLayout *)NULL)
		{
			if ((pANDLayout[1] = pView->m_pANDLayouts[0].GetAt(pView->m_pANDLayouts[0].Find(pANDLayout[0]->GetName()))))
			{
				pANDLayout[1]->Copy(pANDLayout[0]);
				continue;
			}
			if ((pANDLayout[1] = new CANDLayout))
			{
				pANDLayout[1]->Copy(pANDLayout[0]);
				if (pView->m_pANDLayouts[0].Add(pANDLayout[1]) >= 0) continue;
				delete pANDLayout[1];
			}
		}
	}
	for (nLayout = 0, nLayouts = (INT)pANDLayouts.GetSize(); nLayout < nLayouts; nLayout++)
	{
		if ((pANDLayout[0] = pANDLayouts.GetAt(nLayout)) != (CANDLayout *)NULL)
		{
			if ((pANDLayout[1] = pView->m_pANDLayouts[1].GetAt(pView->m_pANDLayouts[1].Find(pANDLayout[0]->GetName()))))
			{
				pANDLayout[1]->Copy(pANDLayout[0]);
				continue;
			}
			if ((pANDLayout[1] = new CANDLayout))
			{
				pANDLayout[1]->Copy(pANDLayout[0]);
				if (pView->m_pANDLayouts[1].Add(pANDLayout[1]) >= 0) continue;
				delete pANDLayout[1];
			}
		}
	}
	UpdateTables(pView, DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_NONE);
}
VOID CALTELDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CGRDLayouts &pGRDLayouts)
{
	INT  nLayout;
	INT  nLayouts;
	CGRDLayout  *pGRDLayout[2];

	for (nLayout = 0, nLayouts = (INT)pGRDLayouts.GetSize(); nLayout < nLayouts; nLayout++)
	{
		if ((pGRDLayout[0] = pGRDLayouts.GetAt(nLayout)) != (CGRDLayout *)NULL)
		{
			if ((pGRDLayout[1] = pView->m_pGRDLayouts[0].GetAt(pView->m_pGRDLayouts[0].Find(pGRDLayout[0]->GetName()))))
			{
				pGRDLayout[1]->Copy(pGRDLayout[0]);
				continue;
			}
			if ((pGRDLayout[1] = new CGRDLayout))
			{
				pGRDLayout[1]->Copy(pGRDLayout[0]);
				if (pView->m_pGRDLayouts[0].Add(pGRDLayout[1]) >= 0) continue;
				delete pGRDLayout[1];
			}
		}
	}
	for (nLayout = 0, nLayouts = (INT)pGRDLayouts.GetSize(); nLayout < nLayouts; nLayout++)
	{
		if ((pGRDLayout[0] = pGRDLayouts.GetAt(nLayout)) != (CGRDLayout *)NULL)
		{
			if ((pGRDLayout[1] = pView->m_pGRDLayouts[1].GetAt(pView->m_pGRDLayouts[1].Find(pGRDLayout[0]->GetName()))))
			{
				pGRDLayout[1]->Copy(pGRDLayout[0]);
				continue;
			}
			if ((pGRDLayout[1] = new CGRDLayout))
			{
				pGRDLayout[1]->Copy(pGRDLayout[0]);
				if (pView->m_pGRDLayouts[1].Add(pGRDLayout[1]) >= 0) continue;
				delete pGRDLayout[1];
			}
		}
	}
	UpdateTables(pView, DATABASE_COMPONENT_GRD | DATABASE_SUBCOMPONENT_NONE);
}
VOID CALTELDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CPODLayouts &pPODLayouts)
{
	INT  nLayout;
	INT  nLayouts;
	CPODLayout  *pPODLayout[2];

	for (nLayout = 0, nLayouts = (INT)pPODLayouts.GetSize(); nLayout < nLayouts; nLayout++)
	{
		if ((pPODLayout[0] = pPODLayouts.GetAt(nLayout)) != (CPODLayout *)NULL)
		{
			if ((pPODLayout[1] = pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pPODLayout[0]->GetName()))))
			{
				pPODLayout[1]->Copy(pPODLayout[0]);
				continue;
			}
			if ((pPODLayout[1] = new CPODLayout))
			{
				pPODLayout[1]->Copy(pPODLayout[0]);
				if (pView->m_pPODLayouts[0].Add(pPODLayout[1]) >= 0) continue;
				delete pPODLayout[1];
			}
		}
	}
	for (nLayout = 0, nLayouts = (INT)pPODLayouts.GetSize(); nLayout < nLayouts; nLayout++)
	{
		if ((pPODLayout[0] = pPODLayouts.GetAt(nLayout)) != (CPODLayout *)NULL)
		{
			if ((pPODLayout[1] = pView->m_pPODLayouts[1].GetAt(pView->m_pPODLayouts[1].Find(pPODLayout[0]->GetName()))))
			{
				pPODLayout[1]->Copy(pPODLayout[0]);
				continue;
			}
			if ((pPODLayout[1] = new CPODLayout))
			{
				pPODLayout[1]->Copy(pPODLayout[0]);
				if (pView->m_pPODLayouts[1].Add(pPODLayout[1]) >= 0) continue;
				delete pPODLayout[1];
			}
		}
	}
	UpdateTables(pView, DATABASE_COMPONENT_POD | DATABASE_SUBCOMPONENT_NONE);
}
BOOL CALTELDatabaseEngine::UpdateTables(CDatabaseTableView *pView, ULONGLONG nComponent, LPCTSTR pszName, BOOL bDelete)
{
	INT  nIndex[2];
	CDatabaseTMPacket  *pDatabaseTMPacket[3];
	CDatabaseTCPacket  *pDatabaseTCPacket[3];
	CDatabaseTCFunction  *pDatabaseTCFunction[3];
	CDatabaseTCSequence  *pDatabaseTCSequence[3];
	CDatabaseOBProcessor  *pDatabaseOBProcessor[3];
	CDatabaseTMParameter  *pDatabaseTMParameter[3];
	CDatabaseTCParameter  *pDatabaseTCParameter[3];
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable[3];
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable[3];
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable[3];
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable[3];
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable[3];
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable[3];
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable[3];
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable[3];
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup[3];
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup[3];
	CDatabaseTMPacketHeader  *pDatabaseTMPacketHeader[3];
	CDatabaseTMPacketStream  *pDatabaseTMPacketStream[3];
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet[3];
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock[3];
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage[3];
	CANDLayout  *pANDLayout[3];
	CGRDLayout  *pGRDLayout[3];
	CPODLayout  *pPODLayout[3];

	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPACKET)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseTMPacket[0] = (!bDelete) ? GetTMPackets()->GetAt(GetTMPackets()->Find(pszName)) : (CDatabaseTMPacket *)NULL))
			{
				if ((pDatabaseTMPacket[1] = pView->m_pDatabaseTMPackets[0].GetAt(pView->m_pDatabaseTMPackets[0].Find(pDatabaseTMPacket[0]->GetTag()))))
				{
					if ((pDatabaseTMPacket[2] = pView->m_pDatabaseTMPackets[1].GetAt(pView->m_pDatabaseTMPackets[1].Find(pDatabaseTMPacket[0]->GetTag()))))
					{
						if (pDatabaseTMPacket[1]->Copy(pDatabaseTMPacket[0]) && pDatabaseTMPacket[2]->Copy(pDatabaseTMPacket[0]))
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						return FALSE;
					}
					if ((pDatabaseTMPacket[2] = new CDatabaseTMPacket))
					{
						if (pDatabaseTMPacket[1]->Copy(pDatabaseTMPacket[0]) && pDatabaseTMPacket[2]->Copy(pDatabaseTMPacket[0]))
						{
							if (pView->m_pDatabaseTMPackets[1].Add(pDatabaseTMPacket[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pDatabaseTMPacket[2];
					}
					return FALSE;
				}
				if ((pDatabaseTMPacket[1] = new CDatabaseTMPacket))
				{
					if ((pDatabaseTMPacket[2] = pView->m_pDatabaseTMPackets[1].GetAt(pView->m_pDatabaseTMPackets[1].Find(pDatabaseTMPacket[0]->GetTag()))))
					{
						if (pDatabaseTMPacket[1]->Copy(pDatabaseTMPacket[0]) && pDatabaseTMPacket[2]->Copy(pDatabaseTMPacket[0]))
						{
							if (pView->m_pDatabaseTMPackets[0].Add(pDatabaseTMPacket[1]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pDatabaseTMPacket[1];
						return FALSE;
					}
					if ((pDatabaseTMPacket[2] = new CDatabaseTMPacket))
					{
						if (pDatabaseTMPacket[1]->Copy(pDatabaseTMPacket[0]) && pDatabaseTMPacket[2]->Copy(pDatabaseTMPacket[0]))
						{
							if (pView->m_pDatabaseTMPackets[0].Add(pDatabaseTMPacket[1]) >= 0)
							{
								if (pView->m_pDatabaseTMPackets[1].Add(pDatabaseTMPacket[2]) >= 0)
								{
									UpdateTables(pView, nComponent);
									return TRUE;
								}
								pView->m_pDatabaseTMPackets[0].RemoveAt(pView->m_pDatabaseTMPackets[0].Find(pDatabaseTMPacket[1]->GetTag()));
							}
						}
						delete pDatabaseTMPacket[2];
					}
					delete pDatabaseTMPacket[1];
				}
				return FALSE;
			}
			if ((pDatabaseTMPacket[0] = (bDelete) ? pView->m_pDatabaseTMPackets[0].GetAt((nIndex[0] = pView->m_pDatabaseTMPackets[0].Find(pszName))) : (CDatabaseTMPacket *)NULL))
			{
				if ((pDatabaseTMPacket[1] = pView->m_pDatabaseTMPackets[1].GetAt((nIndex[1] = pView->m_pDatabaseTMPackets[1].Find(pszName)))))
				{
					pView->m_pDatabaseTMPackets[1].RemoveAt(nIndex[1]);
					delete pDatabaseTMPacket[1];
				}
				pView->m_pDatabaseTMPackets[0].RemoveAt(nIndex[0]);
				UpdateTables(pView, nComponent);
				delete pDatabaseTMPacket[0];
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMPACKETHEADER)
		{
			if ((pDatabaseTMPacketHeader[0] = (!bDelete) ? GetTMPacketHeaders()->GetAt(GetTMPacketHeaders()->Find(pszName)) : (CDatabaseTMPacketHeader *)NULL))
			{
				if ((pDatabaseTMPacketHeader[1] = pView->m_pDatabaseTMPacketHeaders[0].GetAt(pView->m_pDatabaseTMPacketHeaders[0].Find(pDatabaseTMPacketHeader[0]->GetName()))))
				{
					if ((pDatabaseTMPacketHeader[2] = pView->m_pDatabaseTMPacketHeaders[1].GetAt(pView->m_pDatabaseTMPacketHeaders[1].Find(pDatabaseTMPacketHeader[0]->GetName()))))
					{
						pDatabaseTMPacketHeader[1]->Copy(pDatabaseTMPacketHeader[0]);
						pDatabaseTMPacketHeader[2]->Copy(pDatabaseTMPacketHeader[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseTMPacketHeader[2] = new CDatabaseTMPacketHeader))
					{
						for (pDatabaseTMPacketHeader[1]->Copy(pDatabaseTMPacketHeader[0]), pDatabaseTMPacketHeader[2]->Copy(pDatabaseTMPacketHeader[0]); pView->m_pDatabaseTMPacketHeaders[1].Add(pDatabaseTMPacketHeader[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTMPacketHeader[2];
					}
					return FALSE;
				}
				if ((pDatabaseTMPacketHeader[1] = new CDatabaseTMPacketHeader))
				{
					if ((pDatabaseTMPacketHeader[2] = pView->m_pDatabaseTMPacketHeaders[1].GetAt(pView->m_pDatabaseTMPacketHeaders[1].Find(pDatabaseTMPacketHeader[0]->GetName()))))
					{
						for (pDatabaseTMPacketHeader[1]->Copy(pDatabaseTMPacketHeader[0]), pDatabaseTMPacketHeader[2]->Copy(pDatabaseTMPacketHeader[0]); pView->m_pDatabaseTMPacketHeaders[0].Add(pDatabaseTMPacketHeader[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTMPacketHeader[1];
						return FALSE;
					}
					if ((pDatabaseTMPacketHeader[2] = new CDatabaseTMPacketHeader))
					{
						for (pDatabaseTMPacketHeader[1]->Copy(pDatabaseTMPacketHeader[0]), pDatabaseTMPacketHeader[2]->Copy(pDatabaseTMPacketHeader[0]); pView->m_pDatabaseTMPacketHeaders[0].Add(pDatabaseTMPacketHeader[1]) >= 0; )
						{
							if (pView->m_pDatabaseTMPacketHeaders[1].Add(pDatabaseTMPacketHeader[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseTMPacketHeaders[0].RemoveAt(pView->m_pDatabaseTMPacketHeaders[0].Find(pDatabaseTMPacketHeader[0]->GetName()));
						}
						delete pDatabaseTMPacketHeader[2];
					}
					delete pDatabaseTMPacketHeader[1];
				}
			}
			if ((pDatabaseTMPacketHeader[0] = (bDelete) ? pView->m_pDatabaseTMPacketHeaders[0].GetAt((nIndex[0] = pView->m_pDatabaseTMPacketHeaders[0].Find(pszName))) : (CDatabaseTMPacketHeader *)NULL))
			{
				if ((pDatabaseTMPacketHeader[1] = pView->m_pDatabaseTMPacketHeaders[1].GetAt((nIndex[1] = pView->m_pDatabaseTMPacketHeaders[1].Find(pszName)))))
				{
					pView->m_pDatabaseTMPacketHeaders[1].RemoveAt(nIndex[1]);
					delete pDatabaseTMPacketHeader[1];
				}
				pView->m_pDatabaseTMPacketHeaders[0].RemoveAt(nIndex[0]);
				delete pDatabaseTMPacketHeader[0];
				UpdateTables(pView, nComponent);
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMPACKETSTREAM)
		{
			if ((pDatabaseTMPacketStream[0] = (!bDelete) ? GetTMPacketStreams()->GetAt(GetTMPacketStreams()->Find(pszName)) : (CDatabaseTMPacketStream *)NULL))
			{
				if ((pDatabaseTMPacketStream[1] = pView->m_pDatabaseTMPacketStreams[0].GetAt(pView->m_pDatabaseTMPacketStreams[0].Find(pDatabaseTMPacketStream[0]->GetName()))))
				{
					if ((pDatabaseTMPacketStream[2] = pView->m_pDatabaseTMPacketStreams[1].GetAt(pView->m_pDatabaseTMPacketStreams[1].Find(pDatabaseTMPacketStream[0]->GetName()))))
					{
						pDatabaseTMPacketStream[1]->Copy(pDatabaseTMPacketStream[0]);
						pDatabaseTMPacketStream[2]->Copy(pDatabaseTMPacketStream[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseTMPacketStream[2] = new CDatabaseTMPacketStream))
					{
						for (pDatabaseTMPacketStream[1]->Copy(pDatabaseTMPacketStream[0]), pDatabaseTMPacketStream[2]->Copy(pDatabaseTMPacketStream[0]); pView->m_pDatabaseTMPacketStreams[1].Add(pDatabaseTMPacketStream[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTMPacketStream[2];
					}
					return FALSE;
				}
				if ((pDatabaseTMPacketStream[1] = new CDatabaseTMPacketStream))
				{
					if ((pDatabaseTMPacketStream[2] = pView->m_pDatabaseTMPacketStreams[1].GetAt(pView->m_pDatabaseTMPacketStreams[1].Find(pDatabaseTMPacketStream[0]->GetName()))))
					{
						for (pDatabaseTMPacketStream[1]->Copy(pDatabaseTMPacketStream[0]), pDatabaseTMPacketStream[2]->Copy(pDatabaseTMPacketStream[0]); pView->m_pDatabaseTMPacketStreams[0].Add(pDatabaseTMPacketStream[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTMPacketStream[1];
						return FALSE;
					}
					if ((pDatabaseTMPacketStream[2] = new CDatabaseTMPacketStream))
					{
						for (pDatabaseTMPacketStream[1]->Copy(pDatabaseTMPacketStream[0]), pDatabaseTMPacketStream[2]->Copy(pDatabaseTMPacketStream[0]); pView->m_pDatabaseTMPacketStreams[0].Add(pDatabaseTMPacketStream[1]) >= 0; )
						{
							if (pView->m_pDatabaseTMPacketStreams[1].Add(pDatabaseTMPacketStream[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseTMPacketStreams[0].RemoveAt(pView->m_pDatabaseTMPacketStreams[0].Find(pDatabaseTMPacketStream[0]->GetName()));
						}
						delete pDatabaseTMPacketStream[2];
					}
					delete pDatabaseTMPacketStream[1];
				}
			}
			if ((pDatabaseTMPacketStream[0] = (bDelete) ? pView->m_pDatabaseTMPacketStreams[0].GetAt((nIndex[0] = pView->m_pDatabaseTMPacketStreams[0].Find(pszName))) : (CDatabaseTMPacketStream *)NULL))
			{
				if ((pDatabaseTMPacketStream[1] = pView->m_pDatabaseTMPacketStreams[1].GetAt((nIndex[1] = pView->m_pDatabaseTMPacketStreams[1].Find(pszName)))))
				{
					pView->m_pDatabaseTMPacketStreams[1].RemoveAt(nIndex[1]);
					delete pDatabaseTMPacketStream[1];
				}
				pView->m_pDatabaseTMPacketStreams[0].RemoveAt(nIndex[0]);
				delete pDatabaseTMPacketStream[0];
				UpdateTables(pView, nComponent);
				return TRUE;
			}
		}
		return FALSE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseTCFunction[0] = (!bDelete) ? GetTCFunctions()->GetAt(GetTCFunctions()->Find(pszName)) : (CDatabaseTCFunction *)NULL))
			{
				if ((pDatabaseTCFunction[1] = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pDatabaseTCFunction[0]->GetName()))))
				{
					if ((pDatabaseTCFunction[2] = pView->m_pDatabaseTCFunctions[1].GetAt(pView->m_pDatabaseTCFunctions[1].Find(pDatabaseTCFunction[0]->GetName()))))
					{
						if (pDatabaseTCFunction[1]->Copy(pDatabaseTCFunction[0]) && pDatabaseTCFunction[2]->Copy(pDatabaseTCFunction[0]))
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						return FALSE;
					}
					if ((pDatabaseTCFunction[2] = new CDatabaseTCFunction))
					{
						if (pDatabaseTCFunction[1]->Copy(pDatabaseTCFunction[0]) && pDatabaseTCFunction[2]->Copy(pDatabaseTCFunction[0]))
						{
							if (pView->m_pDatabaseTCFunctions[1].Add(pDatabaseTCFunction[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pDatabaseTCFunction[2];
					}
					return FALSE;
				}
				if ((pDatabaseTCFunction[1] = new CDatabaseTCFunction))
				{
					if ((pDatabaseTCFunction[2] = pView->m_pDatabaseTCFunctions[1].GetAt(pView->m_pDatabaseTCFunctions[1].Find(pDatabaseTCFunction[0]->GetName()))))
					{
						if (pDatabaseTCFunction[1]->Copy(pDatabaseTCFunction[0]) && pDatabaseTCFunction[2]->Copy(pDatabaseTCFunction[0]))
						{
							if (pView->m_pDatabaseTCFunctions[0].Add(pDatabaseTCFunction[1]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pDatabaseTCFunction[1];
						return FALSE;
					}
					if ((pDatabaseTCFunction[2] = new CDatabaseTCFunction))
					{
						if (pDatabaseTCFunction[1]->Copy(pDatabaseTCFunction[0]) && pDatabaseTCFunction[2]->Copy(pDatabaseTCFunction[0]))
						{
							if (pView->m_pDatabaseTCFunctions[0].Add(pDatabaseTCFunction[1]) >= 0)
							{
								if (pView->m_pDatabaseTCFunctions[1].Add(pDatabaseTCFunction[2]) >= 0)
								{
									UpdateTables(pView, nComponent);
									return TRUE;
								}
								pView->m_pDatabaseTCFunctions[0].RemoveAt(pView->m_pDatabaseTCFunctions[0].Find(pDatabaseTCFunction[1]->GetName()));
							}
						}
						delete pDatabaseTCFunction[2];
					}
					delete pDatabaseTCFunction[1];
				}
				return FALSE;
			}
			if ((pDatabaseTCFunction[0] = (bDelete) ? pView->m_pDatabaseTCFunctions[0].GetAt((nIndex[0] = pView->m_pDatabaseTCFunctions[0].Find(pszName))) : (CDatabaseTCFunction *)NULL))
			{
				if ((pDatabaseTCFunction[1] = pView->m_pDatabaseTCFunctions[1].GetAt((nIndex[1] = pView->m_pDatabaseTCFunctions[1].Find(pszName)))))
				{
					pView->m_pDatabaseTCFunctions[1].RemoveAt(nIndex[1]);
					delete pDatabaseTCFunction[1];
				}
				pView->m_pDatabaseTCFunctions[0].RemoveAt(nIndex[0]);
				UpdateTables(pView, nComponent);
				delete pDatabaseTCFunction[0];
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONPACKET)
		{
			if ((pDatabaseTCPacket[0] = (!bDelete) ? GetTCPackets()->GetAt(GetTCPackets()->Find(pszName)) : (CDatabaseTCPacket *)NULL))
			{
				if ((pDatabaseTCPacket[1] = pView->m_pDatabaseTCPackets[0].GetAt(pView->m_pDatabaseTCPackets[0].Find(pDatabaseTCPacket[0]->GetTag()))))
				{
					if ((pDatabaseTCPacket[2] = pView->m_pDatabaseTCPackets[1].GetAt(pView->m_pDatabaseTCPackets[1].Find(pDatabaseTCPacket[0]->GetTag()))))
					{
						pDatabaseTCPacket[1]->Copy(pDatabaseTCPacket[0]);
						pDatabaseTCPacket[2]->Copy(pDatabaseTCPacket[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseTCPacket[2] = new CDatabaseTCPacket))
					{
						for (pDatabaseTCPacket[1]->Copy(pDatabaseTCPacket[0]), pDatabaseTCPacket[2]->Copy(pDatabaseTCPacket[0]); pView->m_pDatabaseTCPackets[1].Add(pDatabaseTCPacket[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCPacket[2];
					}
					return FALSE;
				}
				if ((pDatabaseTCPacket[1] = new CDatabaseTCPacket))
				{
					if ((pDatabaseTCPacket[2] = pView->m_pDatabaseTCPackets[1].GetAt(pView->m_pDatabaseTCPackets[1].Find(pDatabaseTCPacket[0]->GetTag()))))
					{
						for (pDatabaseTCPacket[1]->Copy(pDatabaseTCPacket[0]), pDatabaseTCPacket[2]->Copy(pDatabaseTCPacket[0]); pView->m_pDatabaseTCPackets[0].Add(pDatabaseTCPacket[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCPacket[1];
						return FALSE;
					}
					if ((pDatabaseTCPacket[2] = new CDatabaseTCPacket))
					{
						for (pDatabaseTCPacket[1]->Copy(pDatabaseTCPacket[0]), pDatabaseTCPacket[2]->Copy(pDatabaseTCPacket[0]); pView->m_pDatabaseTCPackets[0].Add(pDatabaseTCPacket[1]) >= 0; )
						{
							if (pView->m_pDatabaseTCPackets[1].Add(pDatabaseTCPacket[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseTCPackets[0].RemoveAt(pView->m_pDatabaseTCPackets[0].Find(pDatabaseTCPacket[0]->GetTag()));
						}
						delete pDatabaseTCPacket[2];
					}
					delete pDatabaseTCPacket[1];
				}
			}
			if ((pDatabaseTCPacket[0] = (bDelete) ? pView->m_pDatabaseTCPackets[0].GetAt((nIndex[0] = pView->m_pDatabaseTCPackets[0].Find(pszName))) : (CDatabaseTCPacket *)NULL))
			{
				if ((pDatabaseTCPacket[1] = pView->m_pDatabaseTCPackets[1].GetAt((nIndex[1] = pView->m_pDatabaseTCPackets[1].Find(pszName)))))
				{
					pView->m_pDatabaseTCPackets[1].RemoveAt(nIndex[1]);
					delete pDatabaseTCPacket[1];
				}
				pView->m_pDatabaseTCPackets[0].RemoveAt(nIndex[0]);
				UpdateTables(pView, nComponent);
				delete pDatabaseTCPacket[0];
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONPREEXEGROUP)
		{
			if ((pDatabaseTCPreExeGroup[0] = (!bDelete) ? GetTCPreExeGroups()->GetAt(GetTCPreExeGroups()->Find(pszName)) : (CDatabaseTCPreExeGroup *)NULL))
			{
				if ((pDatabaseTCPreExeGroup[1] = pView->m_pDatabaseTCPreExeGroups[0].GetAt(pView->m_pDatabaseTCPreExeGroups[0].Find(pDatabaseTCPreExeGroup[0]->GetID()))))
				{
					if ((pDatabaseTCPreExeGroup[2] = pView->m_pDatabaseTCPreExeGroups[1].GetAt(pView->m_pDatabaseTCPreExeGroups[1].Find(pDatabaseTCPreExeGroup[0]->GetID()))))
					{
						pDatabaseTCPreExeGroup[1]->Copy(pDatabaseTCPreExeGroup[0]);
						pDatabaseTCPreExeGroup[2]->Copy(pDatabaseTCPreExeGroup[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseTCPreExeGroup[2] = new CDatabaseTCPreExeGroup))
					{
						for (pDatabaseTCPreExeGroup[1]->Copy(pDatabaseTCPreExeGroup[0]), pDatabaseTCPreExeGroup[2]->Copy(pDatabaseTCPreExeGroup[0]); pView->m_pDatabaseTCPreExeGroups[1].Add(pDatabaseTCPreExeGroup[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCPreExeGroup[2];
					}
					return FALSE;
				}
				if ((pDatabaseTCPreExeGroup[1] = new CDatabaseTCPreExeGroup))
				{
					if ((pDatabaseTCPreExeGroup[2] = pView->m_pDatabaseTCPreExeGroups[1].GetAt(pView->m_pDatabaseTCPreExeGroups[1].Find(pDatabaseTCPreExeGroup[0]->GetID()))))
					{
						for (pDatabaseTCPreExeGroup[1]->Copy(pDatabaseTCPreExeGroup[0]), pDatabaseTCPreExeGroup[2]->Copy(pDatabaseTCPreExeGroup[0]); pView->m_pDatabaseTCPreExeGroups[0].Add(pDatabaseTCPreExeGroup[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCPreExeGroup[1];
						return FALSE;
					}
					if ((pDatabaseTCPreExeGroup[2] = new CDatabaseTCPreExeGroup))
					{
						for (pDatabaseTCPreExeGroup[1]->Copy(pDatabaseTCPreExeGroup[0]), pDatabaseTCPreExeGroup[2]->Copy(pDatabaseTCPreExeGroup[0]); pView->m_pDatabaseTCPreExeGroups[0].Add(pDatabaseTCPreExeGroup[1]) >= 0; )
						{
							if (pView->m_pDatabaseTCPreExeGroups[1].Add(pDatabaseTCPreExeGroup[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseTCPreExeGroups[0].RemoveAt(pView->m_pDatabaseTCPreExeGroups[0].Find(pDatabaseTCPreExeGroup[0]->GetID()));
						}
						delete pDatabaseTCPreExeGroup[2];
					}
					delete pDatabaseTCPreExeGroup[1];
				}
			}
			if ((pDatabaseTCPreExeGroup[0] = (bDelete) ? pView->m_pDatabaseTCPreExeGroups[0].GetAt((nIndex[0] = pView->m_pDatabaseTCPreExeGroups[0].Find(pszName))) : (CDatabaseTCPreExeGroup *)NULL))
			{
				if ((pDatabaseTCPreExeGroup[1] = pView->m_pDatabaseTCPreExeGroups[1].GetAt((nIndex[1] = pView->m_pDatabaseTCPreExeGroups[1].Find(pszName)))))
				{
					pView->m_pDatabaseTCPreExeGroups[1].RemoveAt(nIndex[1]);
					delete pDatabaseTCPreExeGroup[1];
				}
				pView->m_pDatabaseTCPreExeGroups[0].RemoveAt(nIndex[0]);
				delete pDatabaseTCPreExeGroup[0];
				UpdateTables(pView, nComponent);
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONEXEVERGROUP)
		{
			if ((pDatabaseTCExeVerGroup[0] = (!bDelete) ? GetTCExeVerGroups()->GetAt(GetTCExeVerGroups()->Find(pszName)) : (CDatabaseTCExeVerGroup *)NULL))
			{
				if ((pDatabaseTCExeVerGroup[1] = pView->m_pDatabaseTCExeVerGroups[0].GetAt(pView->m_pDatabaseTCExeVerGroups[0].Find(pDatabaseTCExeVerGroup[0]->GetID()))))
				{
					if ((pDatabaseTCExeVerGroup[2] = pView->m_pDatabaseTCExeVerGroups[1].GetAt(pView->m_pDatabaseTCExeVerGroups[1].Find(pDatabaseTCExeVerGroup[0]->GetID()))))
					{
						pDatabaseTCExeVerGroup[1]->Copy(pDatabaseTCExeVerGroup[0]);
						pDatabaseTCExeVerGroup[2]->Copy(pDatabaseTCExeVerGroup[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseTCExeVerGroup[2] = new CDatabaseTCExeVerGroup))
					{
						for (pDatabaseTCExeVerGroup[1]->Copy(pDatabaseTCExeVerGroup[0]), pDatabaseTCExeVerGroup[2]->Copy(pDatabaseTCExeVerGroup[0]); pView->m_pDatabaseTCExeVerGroups[1].Add(pDatabaseTCExeVerGroup[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCExeVerGroup[2];
					}
					return FALSE;
				}
				if ((pDatabaseTCExeVerGroup[1] = new CDatabaseTCExeVerGroup))
				{
					if ((pDatabaseTCExeVerGroup[2] = pView->m_pDatabaseTCExeVerGroups[1].GetAt(pView->m_pDatabaseTCExeVerGroups[1].Find(pDatabaseTCExeVerGroup[0]->GetID()))))
					{
						for (pDatabaseTCExeVerGroup[1]->Copy(pDatabaseTCExeVerGroup[0]), pDatabaseTCExeVerGroup[2]->Copy(pDatabaseTCExeVerGroup[0]); pView->m_pDatabaseTCExeVerGroups[0].Add(pDatabaseTCExeVerGroup[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCExeVerGroup[1];
						return FALSE;
					}
					if ((pDatabaseTCExeVerGroup[2] = new CDatabaseTCExeVerGroup))
					{
						for (pDatabaseTCExeVerGroup[1]->Copy(pDatabaseTCExeVerGroup[0]), pDatabaseTCExeVerGroup[2]->Copy(pDatabaseTCExeVerGroup[0]); pView->m_pDatabaseTCExeVerGroups[0].Add(pDatabaseTCExeVerGroup[1]) >= 0; )
						{
							if (pView->m_pDatabaseTCExeVerGroups[1].Add(pDatabaseTCExeVerGroup[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseTCExeVerGroups[0].RemoveAt(pView->m_pDatabaseTCExeVerGroups[0].Find(pDatabaseTCExeVerGroup[0]->GetID()));
						}
						delete pDatabaseTCExeVerGroup[2];
					}
					delete pDatabaseTCExeVerGroup[1];
				}
			}
			if ((pDatabaseTCExeVerGroup[0] = (bDelete) ? pView->m_pDatabaseTCExeVerGroups[0].GetAt((nIndex[0] = pView->m_pDatabaseTCExeVerGroups[0].Find(pszName))) : (CDatabaseTCExeVerGroup *)NULL))
			{
				if ((pDatabaseTCExeVerGroup[1] = pView->m_pDatabaseTCExeVerGroups[1].GetAt((nIndex[1] = pView->m_pDatabaseTCExeVerGroups[1].Find(pszName)))))
				{
					pView->m_pDatabaseTCExeVerGroups[1].RemoveAt(nIndex[1]);
					delete pDatabaseTCExeVerGroup[1];
				}
				pView->m_pDatabaseTCExeVerGroups[0].RemoveAt(nIndex[0]);
				delete pDatabaseTCExeVerGroup[0];
				UpdateTables(pView, nComponent);
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCPARAMETERSET)
		{
			if ((pDatabaseTCParameterSet[0] = (!bDelete) ? GetTCParameterSets()->GetAt(GetTCParameterSets()->Find(pszName)) : (CDatabaseTCParameterSet *)NULL))
			{
				if ((pDatabaseTCParameterSet[1] = pView->m_pDatabaseTCParameterSets[0].GetAt(pView->m_pDatabaseTCParameterSets[0].Find(pDatabaseTCParameterSet[0]->GetName()))))
				{
					if ((pDatabaseTCParameterSet[2] = pView->m_pDatabaseTCParameterSets[1].GetAt(pView->m_pDatabaseTCParameterSets[1].Find(pDatabaseTCParameterSet[0]->GetName()))))
					{
						pDatabaseTCParameterSet[1]->Copy(pDatabaseTCParameterSet[0]);
						pDatabaseTCParameterSet[2]->Copy(pDatabaseTCParameterSet[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseTCParameterSet[2] = new CDatabaseTCParameterSet))
					{
						for (pDatabaseTCParameterSet[1]->Copy(pDatabaseTCParameterSet[0]), pDatabaseTCParameterSet[2]->Copy(pDatabaseTCParameterSet[0]); pView->m_pDatabaseTCParameterSets[1].Add(pDatabaseTCParameterSet[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCParameterSet[2];
					}
					return FALSE;
				}
				if ((pDatabaseTCParameterSet[1] = new CDatabaseTCParameterSet))
				{
					if ((pDatabaseTCParameterSet[2] = pView->m_pDatabaseTCParameterSets[1].GetAt(pView->m_pDatabaseTCParameterSets[1].Find(pDatabaseTCParameterSet[0]->GetName()))))
					{
						for (pDatabaseTCParameterSet[1]->Copy(pDatabaseTCParameterSet[0]), pDatabaseTCParameterSet[2]->Copy(pDatabaseTCParameterSet[0]); pView->m_pDatabaseTCParameterSets[0].Add(pDatabaseTCParameterSet[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCParameterSet[1];
						return FALSE;
					}
					if ((pDatabaseTCParameterSet[2] = new CDatabaseTCParameterSet))
					{
						for (pDatabaseTCParameterSet[1]->Copy(pDatabaseTCParameterSet[0]), pDatabaseTCParameterSet[2]->Copy(pDatabaseTCParameterSet[0]); pView->m_pDatabaseTCParameterSets[0].Add(pDatabaseTCParameterSet[1]) >= 0; )
						{
							if (pView->m_pDatabaseTCParameterSets[1].Add(pDatabaseTCParameterSet[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseTCParameterSets[0].RemoveAt(pView->m_pDatabaseTCParameterSets[0].Find(pDatabaseTCParameterSet[0]->GetName()));
						}
						delete pDatabaseTCParameterSet[2];
					}
					delete pDatabaseTCParameterSet[1];
				}
			}
			if ((pDatabaseTCParameterSet[0] = (bDelete) ? pView->m_pDatabaseTCParameterSets[0].GetAt((nIndex[0] = pView->m_pDatabaseTCParameterSets[0].Find(pszName))) : (CDatabaseTCParameterSet *)NULL))
			{
				if ((pDatabaseTCParameterSet[1] = pView->m_pDatabaseTCParameterSets[1].GetAt((nIndex[1] = pView->m_pDatabaseTCParameterSets[1].Find(pszName)))))
				{
					pView->m_pDatabaseTCParameterSets[1].RemoveAt(nIndex[1]);
					delete pDatabaseTCParameterSet[1];
				}
				pView->m_pDatabaseTCParameterSets[0].RemoveAt(nIndex[0]);
				delete pDatabaseTCParameterSet[0];
				UpdateTables(pView, nComponent);
				return TRUE;
			}
		}
		return FALSE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseTCSequence[0] = (!bDelete) ? GetTCSequences()->GetAt(GetTCSequences()->Find(pszName)) : (CDatabaseTCSequence *)NULL))
			{
				if ((pDatabaseTCSequence[1] = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pDatabaseTCSequence[0]->GetName()))))
				{
					if ((pDatabaseTCSequence[2] = pView->m_pDatabaseTCSequences[1].GetAt(pView->m_pDatabaseTCSequences[1].Find(pDatabaseTCSequence[0]->GetName()))))
					{
						if (pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0]) && pDatabaseTCSequence[2]->Copy(pDatabaseTCSequence[0]))
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						return FALSE;
					}
					if ((pDatabaseTCSequence[2] = new CDatabaseTCSequence))
					{
						if (pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0]) && pDatabaseTCSequence[2]->Copy(pDatabaseTCSequence[0]))
						{
							if (pView->m_pDatabaseTCSequences[1].Add(pDatabaseTCSequence[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pDatabaseTCSequence[2];
					}
					return FALSE;
				}
				if ((pDatabaseTCSequence[1] = new CDatabaseTCSequence))
				{
					if ((pDatabaseTCSequence[2] = pView->m_pDatabaseTCSequences[1].GetAt(pView->m_pDatabaseTCSequences[1].Find(pDatabaseTCSequence[0]->GetName()))))
					{
						if (pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0]) && pDatabaseTCSequence[2]->Copy(pDatabaseTCSequence[0]))
						{
							if (pView->m_pDatabaseTCSequences[0].Add(pDatabaseTCSequence[1]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pDatabaseTCSequence[1];
						return FALSE;
					}
					if ((pDatabaseTCSequence[2] = new CDatabaseTCSequence))
					{
						if (pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0]) && pDatabaseTCSequence[2]->Copy(pDatabaseTCSequence[0]))
						{
							if (pView->m_pDatabaseTCSequences[0].Add(pDatabaseTCSequence[1]) >= 0)
							{
								if (pView->m_pDatabaseTCSequences[1].Add(pDatabaseTCSequence[2]) >= 0)
								{
									UpdateTables(pView, nComponent);
									return TRUE;
								}
								pView->m_pDatabaseTCSequences[0].RemoveAt(pView->m_pDatabaseTCSequences[0].Find(pDatabaseTCSequence[1]->GetName()));
							}
						}
						delete pDatabaseTCSequence[2];
					}
					delete pDatabaseTCSequence[1];
				}
				return FALSE;
			}
			if ((pDatabaseTCSequence[0] = (bDelete) ? pView->m_pDatabaseTCSequences[0].GetAt((nIndex[0] = pView->m_pDatabaseTCSequences[0].Find(pszName))) : (CDatabaseTCSequence *)NULL))
			{
				if ((pDatabaseTCSequence[1] = pView->m_pDatabaseTCSequences[1].GetAt((nIndex[1] = pView->m_pDatabaseTCSequences[1].Find(pszName)))))
				{
					pView->m_pDatabaseTCSequences[1].RemoveAt(nIndex[1]);
					delete pDatabaseTCSequence[1];
				}
				pView->m_pDatabaseTCSequences[0].RemoveAt(nIndex[0]);
				UpdateTables(pView, nComponent);
				delete pDatabaseTCSequence[0];
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONBLOCK)
		{
			if ((pDatabaseTCFunctionBlock[0] = (!bDelete) ? GetTCFunctionBlocks()->GetAt(GetTCFunctionBlocks()->Find(pszName)) : (CDatabaseTCFunctionBlock *)NULL))
			{
				if ((pDatabaseTCFunctionBlock[1] = pView->m_pDatabaseTCFunctionBlocks[0].GetAt(pView->m_pDatabaseTCFunctionBlocks[0].Find(pDatabaseTCFunctionBlock[0]->GetName()))))
				{
					if ((pDatabaseTCFunctionBlock[2] = pView->m_pDatabaseTCFunctionBlocks[1].GetAt(pView->m_pDatabaseTCFunctionBlocks[1].Find(pDatabaseTCFunctionBlock[0]->GetName()))))
					{
						pDatabaseTCFunctionBlock[1]->Copy(pDatabaseTCFunctionBlock[0]);
						pDatabaseTCFunctionBlock[2]->Copy(pDatabaseTCFunctionBlock[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseTCFunctionBlock[2] = new CDatabaseTCFunctionBlock))
					{
						for (pDatabaseTCFunctionBlock[1]->Copy(pDatabaseTCFunctionBlock[0]), pDatabaseTCFunctionBlock[2]->Copy(pDatabaseTCFunctionBlock[0]); pView->m_pDatabaseTCFunctionBlocks[1].Add(pDatabaseTCFunctionBlock[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCFunctionBlock[2];
					}
					return FALSE;
				}
				if ((pDatabaseTCFunctionBlock[1] = new CDatabaseTCFunctionBlock))
				{
					if ((pDatabaseTCFunctionBlock[2] = pView->m_pDatabaseTCFunctionBlocks[1].GetAt(pView->m_pDatabaseTCFunctionBlocks[1].Find(pDatabaseTCFunctionBlock[0]->GetName()))))
					{
						for (pDatabaseTCFunctionBlock[1]->Copy(pDatabaseTCFunctionBlock[0]), pDatabaseTCFunctionBlock[2]->Copy(pDatabaseTCFunctionBlock[0]); pView->m_pDatabaseTCFunctionBlocks[0].Add(pDatabaseTCFunctionBlock[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCFunctionBlock[1];
						return FALSE;
					}
					if ((pDatabaseTCFunctionBlock[2] = new CDatabaseTCFunctionBlock))
					{
						for (pDatabaseTCFunctionBlock[1]->Copy(pDatabaseTCFunctionBlock[0]), pDatabaseTCFunctionBlock[2]->Copy(pDatabaseTCFunctionBlock[0]); pView->m_pDatabaseTCFunctionBlocks[0].Add(pDatabaseTCFunctionBlock[1]) >= 0; )
						{
							if (pView->m_pDatabaseTCFunctionBlocks[1].Add(pDatabaseTCFunctionBlock[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseTCFunctionBlocks[0].RemoveAt(pView->m_pDatabaseTCFunctionBlocks[0].Find(pDatabaseTCFunctionBlock[0]->GetName()));
						}
						delete pDatabaseTCFunctionBlock[2];
					}
					delete pDatabaseTCFunctionBlock[1];
				}
			}
			if ((pDatabaseTCFunctionBlock[0] = (bDelete) ? pView->m_pDatabaseTCFunctionBlocks[0].GetAt((nIndex[0] = pView->m_pDatabaseTCFunctionBlocks[0].Find(pszName))) : (CDatabaseTCFunctionBlock *)NULL))
			{
				if ((pDatabaseTCFunctionBlock[1] = pView->m_pDatabaseTCFunctionBlocks[1].GetAt((nIndex[1] = pView->m_pDatabaseTCFunctionBlocks[1].Find(pszName)))))
				{
					pView->m_pDatabaseTCFunctionBlocks[1].RemoveAt(nIndex[1]);
					delete pDatabaseTCFunctionBlock[1];
				}
				pView->m_pDatabaseTCFunctionBlocks[0].RemoveAt(nIndex[0]);
				delete pDatabaseTCFunctionBlock[0];
				UpdateTables(pView, nComponent);
				return TRUE;
			}
		}
		return FALSE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseOBProcessor[0] = (!bDelete) ? GetOBProcessors()->GetAt(GetOBProcessors()->Find(pszName)) : (CDatabaseOBProcessor *)NULL))
			{
				if ((pDatabaseOBProcessor[1] = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pDatabaseOBProcessor[0]->GetName()))))
				{
					if ((pDatabaseOBProcessor[2] = pView->m_pDatabaseOBProcessors[1].GetAt(pView->m_pDatabaseOBProcessors[1].Find(pDatabaseOBProcessor[0]->GetName()))))
					{
						if (pDatabaseOBProcessor[1]->Copy(pDatabaseOBProcessor[0]) && pDatabaseOBProcessor[2]->Copy(pDatabaseOBProcessor[0]))
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						return FALSE;
					}
					if ((pDatabaseOBProcessor[2] = new CDatabaseOBProcessor))
					{
						if (pDatabaseOBProcessor[1]->Copy(pDatabaseOBProcessor[0]) && pDatabaseOBProcessor[2]->Copy(pDatabaseOBProcessor[0]))
						{
							if (pView->m_pDatabaseOBProcessors[1].Add(pDatabaseOBProcessor[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pDatabaseOBProcessor[2];
					}
					return FALSE;
				}
				if ((pDatabaseOBProcessor[1] = new CDatabaseOBProcessor))
				{
					if ((pDatabaseOBProcessor[2] = pView->m_pDatabaseOBProcessors[1].GetAt(pView->m_pDatabaseOBProcessors[1].Find(pDatabaseOBProcessor[0]->GetName()))))
					{
						if (pDatabaseOBProcessor[1]->Copy(pDatabaseOBProcessor[0]) && pDatabaseOBProcessor[2]->Copy(pDatabaseOBProcessor[0]))
						{
							if (pView->m_pDatabaseOBProcessors[0].Add(pDatabaseOBProcessor[1]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pDatabaseOBProcessor[1];
						return FALSE;
					}
					if ((pDatabaseOBProcessor[2] = new CDatabaseOBProcessor))
					{
						if (pDatabaseOBProcessor[1]->Copy(pDatabaseOBProcessor[0]) && pDatabaseOBProcessor[2]->Copy(pDatabaseOBProcessor[0]))
						{
							if (pView->m_pDatabaseOBProcessors[0].Add(pDatabaseOBProcessor[1]) >= 0)
							{
								if (pView->m_pDatabaseOBProcessors[1].Add(pDatabaseOBProcessor[2]) >= 0)
								{
									UpdateTables(pView, nComponent);
									return TRUE;
								}
								pView->m_pDatabaseOBProcessors[0].RemoveAt(pView->m_pDatabaseOBProcessors[0].Find(pDatabaseOBProcessor[1]->GetName()));
							}
						}
						delete pDatabaseOBProcessor[2];
					}
					delete pDatabaseOBProcessor[1];
				}
				return FALSE;
			}
			if ((pDatabaseOBProcessor[0] = (bDelete) ? pView->m_pDatabaseOBProcessors[0].GetAt((nIndex[0] = pView->m_pDatabaseOBProcessors[0].Find(pszName))) : (CDatabaseOBProcessor *)NULL))
			{
				if ((pDatabaseOBProcessor[1] = pView->m_pDatabaseOBProcessors[1].GetAt((nIndex[1] = pView->m_pDatabaseOBProcessors[1].Find(pszName)))))
				{
					pView->m_pDatabaseOBProcessors[1].RemoveAt(nIndex[1]);
					delete pDatabaseOBProcessor[1];
				}
				pView->m_pDatabaseOBProcessors[0].RemoveAt(nIndex[0]);
				UpdateTables(pView, nComponent);
				delete pDatabaseOBProcessor[0];
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_OBPROCESSORMEMORYIMAGE)
		{
			if ((pDatabaseOBProcessorMemoryImage[0] = (!bDelete) ? GetOBProcessorMemoryImages()->GetAt(GetOBProcessorMemoryImages()->Find(pszName)) : (CDatabaseOBProcessorMemoryImage *)NULL))
			{
				if ((pDatabaseOBProcessorMemoryImage[1] = pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pDatabaseOBProcessorMemoryImage[0]->GetName()))))
				{
					if ((pDatabaseOBProcessorMemoryImage[2] = pView->m_pDatabaseOBProcessorMemoryImages[1].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[1].Find(pDatabaseOBProcessorMemoryImage[0]->GetName()))))
					{
						pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]);
						pDatabaseOBProcessorMemoryImage[2]->Copy(pDatabaseOBProcessorMemoryImage[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseOBProcessorMemoryImage[2] = new CDatabaseOBProcessorMemoryImage))
					{
						for (pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]), pDatabaseOBProcessorMemoryImage[2]->Copy(pDatabaseOBProcessorMemoryImage[0]); pView->m_pDatabaseOBProcessorMemoryImages[1].Add(pDatabaseOBProcessorMemoryImage[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseOBProcessorMemoryImage[2];
					}
					return FALSE;
				}
				if ((pDatabaseOBProcessorMemoryImage[1] = new CDatabaseOBProcessorMemoryImage))
				{
					if ((pDatabaseOBProcessorMemoryImage[2] = pView->m_pDatabaseOBProcessorMemoryImages[1].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[1].Find(pDatabaseOBProcessorMemoryImage[0]->GetName()))))
					{
						for (pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]), pDatabaseOBProcessorMemoryImage[2]->Copy(pDatabaseOBProcessorMemoryImage[0]); pView->m_pDatabaseOBProcessorMemoryImages[0].Add(pDatabaseOBProcessorMemoryImage[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseOBProcessorMemoryImage[1];
						return FALSE;
					}
					if ((pDatabaseOBProcessorMemoryImage[2] = new CDatabaseOBProcessorMemoryImage))
					{
						for (pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]), pDatabaseOBProcessorMemoryImage[2]->Copy(pDatabaseOBProcessorMemoryImage[0]); pView->m_pDatabaseOBProcessorMemoryImages[0].Add(pDatabaseOBProcessorMemoryImage[1]) >= 0; )
						{
							if (pView->m_pDatabaseOBProcessorMemoryImages[1].Add(pDatabaseOBProcessorMemoryImage[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseOBProcessorMemoryImages[0].RemoveAt(pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pDatabaseOBProcessorMemoryImage[0]->GetName()));
						}
						delete pDatabaseOBProcessorMemoryImage[2];
					}
					delete pDatabaseOBProcessorMemoryImage[1];
				}
			}
			if ((pDatabaseOBProcessorMemoryImage[0] = (bDelete) ? pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt((nIndex[0] = pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pszName))) : (CDatabaseOBProcessorMemoryImage *)NULL))
			{
				if ((pDatabaseOBProcessorMemoryImage[1] = pView->m_pDatabaseOBProcessorMemoryImages[1].GetAt((nIndex[1] = pView->m_pDatabaseOBProcessorMemoryImages[1].Find(pszName)))))
				{
					pView->m_pDatabaseOBProcessorMemoryImages[1].RemoveAt(nIndex[1]);
					delete pDatabaseOBProcessorMemoryImage[1];
				}
				pView->m_pDatabaseOBProcessorMemoryImages[0].RemoveAt(nIndex[0]);
				delete pDatabaseOBProcessorMemoryImage[0];
				UpdateTables(pView, nComponent);
				return TRUE;
			}
		}
		return FALSE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseTMParameter[0] = (!bDelete) ? GetTMParameters()->GetAt(GetTMParameters()->Find(pszName)) : (CDatabaseTMParameter *)NULL))
			{
				if ((pDatabaseTMParameter[1] = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pDatabaseTMParameter[0]->GetTag()))))
				{
					if ((pDatabaseTMParameter[2] = pView->m_pDatabaseTMParameters[1].GetAt(pView->m_pDatabaseTMParameters[1].Find(pDatabaseTMParameter[0]->GetTag()))))
					{
						if (pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0]) && pDatabaseTMParameter[2]->Copy(pDatabaseTMParameter[0]))
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						return FALSE;
					}
					if ((pDatabaseTMParameter[2] = new CDatabaseTMParameter))
					{
						if (pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0]) && pDatabaseTMParameter[2]->Copy(pDatabaseTMParameter[0]))
						{
							if (pView->m_pDatabaseTMParameters[1].Add(pDatabaseTMParameter[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pDatabaseTMParameter[2];
					}
					return FALSE;
				}
				if ((pDatabaseTMParameter[1] = new CDatabaseTMParameter))
				{
					if ((pDatabaseTMParameter[2] = pView->m_pDatabaseTMParameters[1].GetAt(pView->m_pDatabaseTMParameters[1].Find(pDatabaseTMParameter[0]->GetTag()))))
					{
						if (pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0]) && pDatabaseTMParameter[2]->Copy(pDatabaseTMParameter[0]))
						{
							if (pView->m_pDatabaseTMParameters[0].Add(pDatabaseTMParameter[1]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pDatabaseTMParameter[1];
						return FALSE;
					}
					if ((pDatabaseTMParameter[2] = new CDatabaseTMParameter))
					{
						if (pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0]) && pDatabaseTMParameter[2]->Copy(pDatabaseTMParameter[0]))
						{
							if (pView->m_pDatabaseTMParameters[0].Add(pDatabaseTMParameter[1]) >= 0)
							{
								if (pView->m_pDatabaseTMParameters[1].Add(pDatabaseTMParameter[2]) >= 0)
								{
									UpdateTables(pView, nComponent);
									return TRUE;
								}
								pView->m_pDatabaseTMParameters[0].RemoveAt(pView->m_pDatabaseTMParameters[0].Find(pDatabaseTMParameter[1]->GetTag()));
							}
						}
						delete pDatabaseTMParameter[2];
					}
					delete pDatabaseTMParameter[1];
				}
				return FALSE;
			}
			if ((pDatabaseTMParameter[0] = (bDelete) ? pView->m_pDatabaseTMParameters[0].GetAt((nIndex[0] = pView->m_pDatabaseTMParameters[0].Find(pszName))) : (CDatabaseTMParameter *)NULL))
			{
				if ((pDatabaseTMParameter[1] = pView->m_pDatabaseTMParameters[1].GetAt((nIndex[1] = pView->m_pDatabaseTMParameters[1].Find(pszName)))))
				{
					pView->m_pDatabaseTMParameters[1].RemoveAt(nIndex[1]);
					delete pDatabaseTMParameter[1];
				}
				pView->m_pDatabaseTMParameters[0].RemoveAt(nIndex[0]);
				UpdateTables(pView, nComponent);
				delete pDatabaseTMParameter[0];
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMNUMCALTABLE)
		{
			if ((pDatabaseTMNumCalTable[0] = (!bDelete) ? GetTMNumCalTables()->GetAt(GetTMNumCalTables()->Find(pszName)) : (CDatabaseTMNumCalTable *)NULL))
			{
				if ((pDatabaseTMNumCalTable[1] = pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find(pDatabaseTMNumCalTable[0]->GetName()))))
				{
					if ((pDatabaseTMNumCalTable[2] = pView->m_pDatabaseTMNumCalTables[1].GetAt(pView->m_pDatabaseTMNumCalTables[1].Find(pDatabaseTMNumCalTable[0]->GetName()))))
					{
						pDatabaseTMNumCalTable[1]->Copy(pDatabaseTMNumCalTable[0]);
						pDatabaseTMNumCalTable[2]->Copy(pDatabaseTMNumCalTable[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseTMNumCalTable[2] = new CDatabaseTMNumCalTable))
					{
						for (pDatabaseTMNumCalTable[1]->Copy(pDatabaseTMNumCalTable[0]), pDatabaseTMNumCalTable[2]->Copy(pDatabaseTMNumCalTable[0]); pView->m_pDatabaseTMNumCalTables[1].Add(pDatabaseTMNumCalTable[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTMNumCalTable[2];
					}
					return FALSE;
				}
				if ((pDatabaseTMNumCalTable[1] = new CDatabaseTMNumCalTable))
				{
					if ((pDatabaseTMNumCalTable[2] = pView->m_pDatabaseTMNumCalTables[1].GetAt(pView->m_pDatabaseTMNumCalTables[1].Find(pDatabaseTMNumCalTable[0]->GetName()))))
					{
						for (pDatabaseTMNumCalTable[1]->Copy(pDatabaseTMNumCalTable[0]), pDatabaseTMNumCalTable[2]->Copy(pDatabaseTMNumCalTable[0]); pView->m_pDatabaseTMNumCalTables[0].Add(pDatabaseTMNumCalTable[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTMNumCalTable[1];
						return FALSE;
					}
					if ((pDatabaseTMNumCalTable[2] = new CDatabaseTMNumCalTable))
					{
						for (pDatabaseTMNumCalTable[1]->Copy(pDatabaseTMNumCalTable[0]), pDatabaseTMNumCalTable[2]->Copy(pDatabaseTMNumCalTable[0]); pView->m_pDatabaseTMNumCalTables[0].Add(pDatabaseTMNumCalTable[1]) >= 0; )
						{
							if (pView->m_pDatabaseTMNumCalTables[1].Add(pDatabaseTMNumCalTable[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseTMNumCalTables[0].RemoveAt(pView->m_pDatabaseTMNumCalTables[0].Find(pDatabaseTMNumCalTable[0]->GetName()));
						}
						delete pDatabaseTMNumCalTable[2];
					}
					delete pDatabaseTMNumCalTable[1];
				}
			}
			if ((pDatabaseTMNumCalTable[0] = (bDelete) ? pView->m_pDatabaseTMNumCalTables[0].GetAt((nIndex[0] = pView->m_pDatabaseTMNumCalTables[0].Find(pszName))) : (CDatabaseTMNumCalTable *)NULL))
			{
				if ((pDatabaseTMNumCalTable[1] = pView->m_pDatabaseTMNumCalTables[1].GetAt((nIndex[1] = pView->m_pDatabaseTMNumCalTables[1].Find(pszName)))))
				{
					pView->m_pDatabaseTMNumCalTables[1].RemoveAt(nIndex[1]);
					delete pDatabaseTMNumCalTable[1];
				}
				pView->m_pDatabaseTMNumCalTables[0].RemoveAt(nIndex[0]);
				delete pDatabaseTMNumCalTable[0];
				UpdateTables(pView, nComponent);
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMTXTCALTABLE)
		{
			if ((pDatabaseTMTxtCalTable[0] = (!bDelete) ? GetTMTxtCalTables()->GetAt(GetTMTxtCalTables()->Find(pszName)) : (CDatabaseTMTxtCalTable *)NULL))
			{
				if ((pDatabaseTMTxtCalTable[1] = pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find(pDatabaseTMTxtCalTable[0]->GetName()))))
				{
					if ((pDatabaseTMTxtCalTable[2] = pView->m_pDatabaseTMTxtCalTables[1].GetAt(pView->m_pDatabaseTMTxtCalTables[1].Find(pDatabaseTMTxtCalTable[0]->GetName()))))
					{
						pDatabaseTMTxtCalTable[1]->Copy(pDatabaseTMTxtCalTable[0]);
						pDatabaseTMTxtCalTable[2]->Copy(pDatabaseTMTxtCalTable[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseTMTxtCalTable[2] = new CDatabaseTMTxtCalTable))
					{
						for (pDatabaseTMTxtCalTable[1]->Copy(pDatabaseTMTxtCalTable[0]), pDatabaseTMTxtCalTable[2]->Copy(pDatabaseTMTxtCalTable[0]); pView->m_pDatabaseTMTxtCalTables[1].Add(pDatabaseTMTxtCalTable[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTMTxtCalTable[2];
					}
					return FALSE;
				}
				if ((pDatabaseTMTxtCalTable[1] = new CDatabaseTMTxtCalTable))
				{
					if ((pDatabaseTMTxtCalTable[2] = pView->m_pDatabaseTMTxtCalTables[1].GetAt(pView->m_pDatabaseTMTxtCalTables[1].Find(pDatabaseTMTxtCalTable[0]->GetName()))))
					{
						for (pDatabaseTMTxtCalTable[1]->Copy(pDatabaseTMTxtCalTable[0]), pDatabaseTMTxtCalTable[2]->Copy(pDatabaseTMTxtCalTable[0]); pView->m_pDatabaseTMTxtCalTables[0].Add(pDatabaseTMTxtCalTable[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTMTxtCalTable[1];
						return FALSE;
					}
					if ((pDatabaseTMTxtCalTable[2] = new CDatabaseTMTxtCalTable))
					{
						for (pDatabaseTMTxtCalTable[1]->Copy(pDatabaseTMTxtCalTable[0]), pDatabaseTMTxtCalTable[2]->Copy(pDatabaseTMTxtCalTable[0]); pView->m_pDatabaseTMTxtCalTables[0].Add(pDatabaseTMTxtCalTable[1]) >= 0; )
						{
							if (pView->m_pDatabaseTMTxtCalTables[1].Add(pDatabaseTMTxtCalTable[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseTMTxtCalTables[0].RemoveAt(pView->m_pDatabaseTMTxtCalTables[0].Find(pDatabaseTMTxtCalTable[0]->GetName()));
						}
						delete pDatabaseTMTxtCalTable[2];
					}
					delete pDatabaseTMTxtCalTable[1];
				}
			}
			if ((pDatabaseTMTxtCalTable[0] = (bDelete) ? pView->m_pDatabaseTMTxtCalTables[0].GetAt((nIndex[0] = pView->m_pDatabaseTMTxtCalTables[0].Find(pszName))) : (CDatabaseTMTxtCalTable *)NULL))
			{
				if ((pDatabaseTMTxtCalTable[1] = pView->m_pDatabaseTMTxtCalTables[1].GetAt((nIndex[1] = pView->m_pDatabaseTMTxtCalTables[1].Find(pszName)))))
				{
					pView->m_pDatabaseTMTxtCalTables[1].RemoveAt(nIndex[1]);
					delete pDatabaseTMTxtCalTable[1];
				}
				pView->m_pDatabaseTMTxtCalTables[0].RemoveAt(nIndex[0]);
				delete pDatabaseTMTxtCalTable[0];
				UpdateTables(pView, nComponent);
				return TRUE;
			}
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMNUMOOLTABLE)
		{
			if ((pDatabaseTMNumOolTable[0] = (!bDelete) ? GetTMNumOolTables()->GetAt(GetTMNumOolTables()->Find(pszName)) : (CDatabaseTMNumOolTable *)NULL))
			{
				if ((pDatabaseTMNumOolTable[1] = pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find(pDatabaseTMNumOolTable[0]->GetName()))))
				{
					if ((pDatabaseTMNumOolTable[2] = pView->m_pDatabaseTMNumOolTables[1].GetAt(pView->m_pDatabaseTMNumOolTables[1].Find(pDatabaseTMNumOolTable[0]->GetName()))))
					{
						pDatabaseTMNumOolTable[1]->Copy(pDatabaseTMNumOolTable[0]);
						pDatabaseTMNumOolTable[2]->Copy(pDatabaseTMNumOolTable[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseTMNumOolTable[2] = new CDatabaseTMNumOolTable))
					{
						for (pDatabaseTMNumOolTable[1]->Copy(pDatabaseTMNumOolTable[0]), pDatabaseTMNumOolTable[2]->Copy(pDatabaseTMNumOolTable[0]); pView->m_pDatabaseTMNumOolTables[1].Add(pDatabaseTMNumOolTable[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTMNumOolTable[2];
					}
					return FALSE;
				}
				if ((pDatabaseTMNumOolTable[1] = new CDatabaseTMNumOolTable))
				{
					if ((pDatabaseTMNumOolTable[2] = pView->m_pDatabaseTMNumOolTables[1].GetAt(pView->m_pDatabaseTMNumOolTables[1].Find(pDatabaseTMNumOolTable[0]->GetName()))))
					{
						for (pDatabaseTMNumOolTable[1]->Copy(pDatabaseTMNumOolTable[0]), pDatabaseTMNumOolTable[2]->Copy(pDatabaseTMNumOolTable[0]); pView->m_pDatabaseTMNumOolTables[0].Add(pDatabaseTMNumOolTable[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTMNumOolTable[1];
						return FALSE;
					}
					if ((pDatabaseTMNumOolTable[2] = new CDatabaseTMNumOolTable))
					{
						for (pDatabaseTMNumOolTable[1]->Copy(pDatabaseTMNumOolTable[0]), pDatabaseTMNumOolTable[2]->Copy(pDatabaseTMNumOolTable[0]); pView->m_pDatabaseTMNumOolTables[0].Add(pDatabaseTMNumOolTable[1]) >= 0; )
						{
							if (pView->m_pDatabaseTMNumOolTables[1].Add(pDatabaseTMNumOolTable[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseTMNumOolTables[0].RemoveAt(pView->m_pDatabaseTMNumOolTables[0].Find(pDatabaseTMNumOolTable[0]->GetName()));
						}
						delete pDatabaseTMNumOolTable[2];
					}
					delete pDatabaseTMNumOolTable[1];
				}
			}
			if ((pDatabaseTMNumOolTable[0] = (bDelete) ? pView->m_pDatabaseTMNumOolTables[0].GetAt((nIndex[0] = pView->m_pDatabaseTMNumOolTables[0].Find(pszName))) : (CDatabaseTMNumOolTable *)NULL))
			{
				if ((pDatabaseTMNumOolTable[1] = pView->m_pDatabaseTMNumOolTables[1].GetAt((nIndex[1] = pView->m_pDatabaseTMNumOolTables[1].Find(pszName)))))
				{
					pView->m_pDatabaseTMNumOolTables[1].RemoveAt(nIndex[1]);
					delete pDatabaseTMNumOolTable[1];
				}
				pView->m_pDatabaseTMNumOolTables[0].RemoveAt(nIndex[0]);
				delete pDatabaseTMNumOolTable[0];
				UpdateTables(pView, nComponent);
				return TRUE;
			}
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMTXTOOLTABLE)
		{
			if ((pDatabaseTMTxtOolTable[0] = (!bDelete) ? GetTMTxtOolTables()->GetAt(GetTMTxtOolTables()->Find(pszName)) : (CDatabaseTMTxtOolTable *)NULL))
			{
				if ((pDatabaseTMTxtOolTable[1] = pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find(pDatabaseTMTxtOolTable[0]->GetName()))))
				{
					if ((pDatabaseTMTxtOolTable[2] = pView->m_pDatabaseTMTxtOolTables[1].GetAt(pView->m_pDatabaseTMTxtOolTables[1].Find(pDatabaseTMTxtOolTable[0]->GetName()))))
					{
						pDatabaseTMTxtOolTable[1]->Copy(pDatabaseTMTxtOolTable[0]);
						pDatabaseTMTxtOolTable[2]->Copy(pDatabaseTMTxtOolTable[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseTMTxtOolTable[2] = new CDatabaseTMTxtOolTable))
					{
						for (pDatabaseTMTxtOolTable[1]->Copy(pDatabaseTMTxtOolTable[0]), pDatabaseTMTxtOolTable[2]->Copy(pDatabaseTMTxtOolTable[0]); pView->m_pDatabaseTMTxtOolTables[1].Add(pDatabaseTMTxtOolTable[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTMTxtOolTable[2];
					}
					return FALSE;
				}
				if ((pDatabaseTMTxtOolTable[1] = new CDatabaseTMTxtOolTable))
				{
					if ((pDatabaseTMTxtOolTable[2] = pView->m_pDatabaseTMTxtOolTables[1].GetAt(pView->m_pDatabaseTMTxtOolTables[1].Find(pDatabaseTMTxtOolTable[0]->GetName()))))
					{
						for (pDatabaseTMTxtOolTable[1]->Copy(pDatabaseTMTxtOolTable[0]), pDatabaseTMTxtOolTable[2]->Copy(pDatabaseTMTxtOolTable[0]); pView->m_pDatabaseTMTxtOolTables[0].Add(pDatabaseTMTxtOolTable[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTMTxtOolTable[1];
						return FALSE;
					}
					if ((pDatabaseTMTxtOolTable[2] = new CDatabaseTMTxtOolTable))
					{
						for (pDatabaseTMTxtOolTable[1]->Copy(pDatabaseTMTxtOolTable[0]), pDatabaseTMTxtOolTable[2]->Copy(pDatabaseTMTxtOolTable[0]); pView->m_pDatabaseTMTxtOolTables[0].Add(pDatabaseTMTxtOolTable[1]) >= 0; )
						{
							if (pView->m_pDatabaseTMTxtOolTables[1].Add(pDatabaseTMTxtOolTable[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseTMTxtOolTables[0].RemoveAt(pView->m_pDatabaseTMTxtOolTables[0].Find(pDatabaseTMTxtOolTable[0]->GetName()));
						}
						delete pDatabaseTMTxtOolTable[2];
					}
					delete pDatabaseTMTxtOolTable[1];
				}
			}
			if ((pDatabaseTMTxtOolTable[0] = (bDelete) ? pView->m_pDatabaseTMTxtOolTables[0].GetAt((nIndex[0] = pView->m_pDatabaseTMTxtOolTables[0].Find(pszName))) : (CDatabaseTMTxtOolTable *)NULL))
			{
				if ((pDatabaseTMTxtOolTable[1] = pView->m_pDatabaseTMTxtOolTables[1].GetAt((nIndex[1] = pView->m_pDatabaseTMTxtOolTables[1].Find(pszName)))))
				{
					pView->m_pDatabaseTMTxtOolTables[1].RemoveAt(nIndex[1]);
					delete pDatabaseTMTxtOolTable[1];
				}
				pView->m_pDatabaseTMTxtOolTables[0].RemoveAt(nIndex[0]);
				delete pDatabaseTMTxtOolTable[0];
				UpdateTables(pView, nComponent);
				return TRUE;
			}
		}
		return FALSE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseTCParameter[0] = (!bDelete) ? GetTCParameters()->GetAt(GetTCParameters()->Find(pszName)) : (CDatabaseTCParameter *)NULL))
			{
				if ((pDatabaseTCParameter[1] = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pDatabaseTCParameter[0]->GetTag()))))
				{
					if ((pDatabaseTCParameter[2] = pView->m_pDatabaseTCParameters[1].GetAt(pView->m_pDatabaseTCParameters[1].Find(pDatabaseTCParameter[0]->GetTag()))))
					{
						if (pDatabaseTCParameter[1]->Copy(pDatabaseTCParameter[0]) && pDatabaseTCParameter[2]->Copy(pDatabaseTCParameter[0]))
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						return FALSE;
					}
					if ((pDatabaseTCParameter[2] = new CDatabaseTCParameter))
					{
						if (pDatabaseTCParameter[1]->Copy(pDatabaseTCParameter[0]) && pDatabaseTCParameter[2]->Copy(pDatabaseTCParameter[0]))
						{
							if (pView->m_pDatabaseTCParameters[1].Add(pDatabaseTCParameter[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pDatabaseTCParameter[2];
					}
					return FALSE;
				}
				if ((pDatabaseTCParameter[1] = new CDatabaseTCParameter))
				{
					if ((pDatabaseTCParameter[2] = pView->m_pDatabaseTCParameters[1].GetAt(pView->m_pDatabaseTCParameters[1].Find(pDatabaseTCParameter[0]->GetTag()))))
					{
						if (pDatabaseTCParameter[1]->Copy(pDatabaseTCParameter[0]) && pDatabaseTCParameter[2]->Copy(pDatabaseTCParameter[0]))
						{
							if (pView->m_pDatabaseTCParameters[0].Add(pDatabaseTCParameter[1]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pDatabaseTCParameter[1];
						return FALSE;
					}
					if ((pDatabaseTCParameter[2] = new CDatabaseTCParameter))
					{
						if (pDatabaseTCParameter[1]->Copy(pDatabaseTCParameter[0]) && pDatabaseTCParameter[2]->Copy(pDatabaseTCParameter[0]))
						{
							if (pView->m_pDatabaseTCParameters[0].Add(pDatabaseTCParameter[1]) >= 0)
							{
								if (pView->m_pDatabaseTCParameters[1].Add(pDatabaseTCParameter[2]) >= 0)
								{
									UpdateTables(pView, nComponent);
									return TRUE;
								}
								pView->m_pDatabaseTCParameters[0].RemoveAt(pView->m_pDatabaseTCParameters[0].Find(pDatabaseTCParameter[1]->GetTag()));
							}
						}
						delete pDatabaseTCParameter[2];
					}
					delete pDatabaseTCParameter[1];
				}
				return FALSE;
			}
			if ((pDatabaseTCParameter[0] = (bDelete) ? pView->m_pDatabaseTCParameters[0].GetAt((nIndex[0] = pView->m_pDatabaseTCParameters[0].Find(pszName))) : (CDatabaseTCParameter *)NULL))
			{
				if ((pDatabaseTCParameter[1] = pView->m_pDatabaseTCParameters[1].GetAt((nIndex[1] = pView->m_pDatabaseTCParameters[1].Find(pszName)))))
				{
					pView->m_pDatabaseTCParameters[1].RemoveAt(nIndex[1]);
					delete pDatabaseTCParameter[1];
				}
				pView->m_pDatabaseTCParameters[0].RemoveAt(nIndex[0]);
				UpdateTables(pView, nComponent);
				delete pDatabaseTCParameter[0];
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCNUMCALTABLE)
		{
			if ((pDatabaseTCNumCalTable[0] = (!bDelete) ? GetTCNumCalTables()->GetAt(GetTCNumCalTables()->Find(pszName)) : (CDatabaseTCNumCalTable *)NULL))
			{
				if ((pDatabaseTCNumCalTable[1] = pView->m_pDatabaseTCNumCalTables[0].GetAt(pView->m_pDatabaseTCNumCalTables[0].Find(pDatabaseTCNumCalTable[0]->GetName()))))
				{
					if ((pDatabaseTCNumCalTable[2] = pView->m_pDatabaseTCNumCalTables[1].GetAt(pView->m_pDatabaseTCNumCalTables[1].Find(pDatabaseTCNumCalTable[0]->GetName()))))
					{
						pDatabaseTCNumCalTable[1]->Copy(pDatabaseTCNumCalTable[0]);
						pDatabaseTCNumCalTable[2]->Copy(pDatabaseTCNumCalTable[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseTCNumCalTable[2] = new CDatabaseTCNumCalTable))
					{
						for (pDatabaseTCNumCalTable[1]->Copy(pDatabaseTCNumCalTable[0]), pDatabaseTCNumCalTable[2]->Copy(pDatabaseTCNumCalTable[0]); pView->m_pDatabaseTCNumCalTables[1].Add(pDatabaseTCNumCalTable[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCNumCalTable[2];
					}
					return FALSE;
				}
				if ((pDatabaseTCNumCalTable[1] = new CDatabaseTCNumCalTable))
				{
					if ((pDatabaseTCNumCalTable[2] = pView->m_pDatabaseTCNumCalTables[1].GetAt(pView->m_pDatabaseTCNumCalTables[1].Find(pDatabaseTCNumCalTable[0]->GetName()))))
					{
						for (pDatabaseTCNumCalTable[1]->Copy(pDatabaseTCNumCalTable[0]), pDatabaseTCNumCalTable[2]->Copy(pDatabaseTCNumCalTable[0]); pView->m_pDatabaseTCNumCalTables[0].Add(pDatabaseTCNumCalTable[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCNumCalTable[1];
						return FALSE;
					}
					if ((pDatabaseTCNumCalTable[2] = new CDatabaseTCNumCalTable))
					{
						for (pDatabaseTCNumCalTable[1]->Copy(pDatabaseTCNumCalTable[0]), pDatabaseTCNumCalTable[2]->Copy(pDatabaseTCNumCalTable[0]); pView->m_pDatabaseTCNumCalTables[0].Add(pDatabaseTCNumCalTable[1]) >= 0; )
						{
							if (pView->m_pDatabaseTCNumCalTables[1].Add(pDatabaseTCNumCalTable[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseTCNumCalTables[0].RemoveAt(pView->m_pDatabaseTCNumCalTables[0].Find(pDatabaseTCNumCalTable[0]->GetName()));
						}
						delete pDatabaseTCNumCalTable[2];
					}
					delete pDatabaseTCNumCalTable[1];
				}
			}
			if ((pDatabaseTCNumCalTable[0] = (bDelete) ? pView->m_pDatabaseTCNumCalTables[0].GetAt((nIndex[0] = pView->m_pDatabaseTCNumCalTables[0].Find(pszName))) : (CDatabaseTCNumCalTable *)NULL))
			{
				if ((pDatabaseTCNumCalTable[1] = pView->m_pDatabaseTCNumCalTables[1].GetAt((nIndex[1] = pView->m_pDatabaseTCNumCalTables[1].Find(pszName)))))
				{
					pView->m_pDatabaseTCNumCalTables[1].RemoveAt(nIndex[1]);
					delete pDatabaseTCNumCalTable[1];
				}
				pView->m_pDatabaseTCNumCalTables[0].RemoveAt(nIndex[0]);
				delete pDatabaseTCNumCalTable[0];
				UpdateTables(pView, nComponent);
				return TRUE;
			}
			return FALSE;
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCTXTCALTABLE)
		{
			if ((pDatabaseTCTxtCalTable[0] = (!bDelete) ? GetTCTxtCalTables()->GetAt(GetTCTxtCalTables()->Find(pszName)) : (CDatabaseTCTxtCalTable *)NULL))
			{
				if ((pDatabaseTCTxtCalTable[1] = pView->m_pDatabaseTCTxtCalTables[0].GetAt(pView->m_pDatabaseTCTxtCalTables[0].Find(pDatabaseTCTxtCalTable[0]->GetName()))))
				{
					if ((pDatabaseTCTxtCalTable[2] = pView->m_pDatabaseTCTxtCalTables[1].GetAt(pView->m_pDatabaseTCTxtCalTables[1].Find(pDatabaseTCTxtCalTable[0]->GetName()))))
					{
						pDatabaseTCTxtCalTable[1]->Copy(pDatabaseTCTxtCalTable[0]);
						pDatabaseTCTxtCalTable[2]->Copy(pDatabaseTCTxtCalTable[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseTCTxtCalTable[2] = new CDatabaseTCTxtCalTable))
					{
						for (pDatabaseTCTxtCalTable[1]->Copy(pDatabaseTCTxtCalTable[0]), pDatabaseTCTxtCalTable[2]->Copy(pDatabaseTCTxtCalTable[0]); pView->m_pDatabaseTCTxtCalTables[1].Add(pDatabaseTCTxtCalTable[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCTxtCalTable[2];
					}
					return FALSE;
				}
				if ((pDatabaseTCTxtCalTable[1] = new CDatabaseTCTxtCalTable))
				{
					if ((pDatabaseTCTxtCalTable[2] = pView->m_pDatabaseTCTxtCalTables[1].GetAt(pView->m_pDatabaseTCTxtCalTables[1].Find(pDatabaseTCTxtCalTable[0]->GetName()))))
					{
						for (pDatabaseTCTxtCalTable[1]->Copy(pDatabaseTCTxtCalTable[0]), pDatabaseTCTxtCalTable[2]->Copy(pDatabaseTCTxtCalTable[0]); pView->m_pDatabaseTCTxtCalTables[0].Add(pDatabaseTCTxtCalTable[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCTxtCalTable[1];
						return FALSE;
					}
					if ((pDatabaseTCTxtCalTable[2] = new CDatabaseTCTxtCalTable))
					{
						for (pDatabaseTCTxtCalTable[1]->Copy(pDatabaseTCTxtCalTable[0]), pDatabaseTCTxtCalTable[2]->Copy(pDatabaseTCTxtCalTable[0]); pView->m_pDatabaseTCTxtCalTables[0].Add(pDatabaseTCTxtCalTable[1]) >= 0; )
						{
							if (pView->m_pDatabaseTCTxtCalTables[1].Add(pDatabaseTCTxtCalTable[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseTCTxtCalTables[0].RemoveAt(pView->m_pDatabaseTCTxtCalTables[0].Find(pDatabaseTCTxtCalTable[0]->GetName()));
						}
						delete pDatabaseTCTxtCalTable[2];
					}
					delete pDatabaseTCTxtCalTable[1];
				}
			}
			if ((pDatabaseTCTxtCalTable[0] = (bDelete) ? pView->m_pDatabaseTCTxtCalTables[0].GetAt((nIndex[0] = pView->m_pDatabaseTCTxtCalTables[0].Find(pszName))) : (CDatabaseTCTxtCalTable *)NULL))
			{
				if ((pDatabaseTCTxtCalTable[1] = pView->m_pDatabaseTCTxtCalTables[1].GetAt((nIndex[1] = pView->m_pDatabaseTCTxtCalTables[1].Find(pszName)))))
				{
					pView->m_pDatabaseTCTxtCalTables[1].RemoveAt(nIndex[1]);
					delete pDatabaseTCTxtCalTable[1];
				}
				pView->m_pDatabaseTCTxtCalTables[0].RemoveAt(nIndex[0]);
				delete pDatabaseTCTxtCalTable[0];
				UpdateTables(pView, nComponent);
				return TRUE;
			}
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCNUMOOLTABLE)
		{
			if ((pDatabaseTCNumOolTable[0] = (!bDelete) ? GetTCNumOolTables()->GetAt(GetTCNumOolTables()->Find(pszName)) : (CDatabaseTCNumOolTable *)NULL))
			{
				if ((pDatabaseTCNumOolTable[1] = pView->m_pDatabaseTCNumOolTables[0].GetAt(pView->m_pDatabaseTCNumOolTables[0].Find(pDatabaseTCNumOolTable[0]->GetName()))))
				{
					if ((pDatabaseTCNumOolTable[2] = pView->m_pDatabaseTCNumOolTables[1].GetAt(pView->m_pDatabaseTCNumOolTables[1].Find(pDatabaseTCNumOolTable[0]->GetName()))))
					{
						pDatabaseTCNumOolTable[1]->Copy(pDatabaseTCNumOolTable[0]);
						pDatabaseTCNumOolTable[2]->Copy(pDatabaseTCNumOolTable[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseTCNumOolTable[2] = new CDatabaseTCNumOolTable))
					{
						for (pDatabaseTCNumOolTable[1]->Copy(pDatabaseTCNumOolTable[0]), pDatabaseTCNumOolTable[2]->Copy(pDatabaseTCNumOolTable[0]); pView->m_pDatabaseTCNumOolTables[1].Add(pDatabaseTCNumOolTable[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCNumOolTable[2];
					}
					return FALSE;
				}
				if ((pDatabaseTCNumOolTable[1] = new CDatabaseTCNumOolTable))
				{
					if ((pDatabaseTCNumOolTable[2] = pView->m_pDatabaseTCNumOolTables[1].GetAt(pView->m_pDatabaseTCNumOolTables[1].Find(pDatabaseTCNumOolTable[0]->GetName()))))
					{
						for (pDatabaseTCNumOolTable[1]->Copy(pDatabaseTCNumOolTable[0]), pDatabaseTCNumOolTable[2]->Copy(pDatabaseTCNumOolTable[0]); pView->m_pDatabaseTCNumOolTables[0].Add(pDatabaseTCNumOolTable[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCNumOolTable[1];
						return FALSE;
					}
					if ((pDatabaseTCNumOolTable[2] = new CDatabaseTCNumOolTable))
					{
						for (pDatabaseTCNumOolTable[1]->Copy(pDatabaseTCNumOolTable[0]), pDatabaseTCNumOolTable[2]->Copy(pDatabaseTCNumOolTable[0]); pView->m_pDatabaseTCNumOolTables[0].Add(pDatabaseTCNumOolTable[1]) >= 0; )
						{
							if (pView->m_pDatabaseTCNumOolTables[1].Add(pDatabaseTCNumOolTable[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseTCNumOolTables[0].RemoveAt(pView->m_pDatabaseTCNumOolTables[0].Find(pDatabaseTCNumOolTable[0]->GetName()));
						}
						delete pDatabaseTCNumOolTable[2];
					}
					delete pDatabaseTCNumOolTable[1];
				}
			}
			if ((pDatabaseTCNumOolTable[0] = (bDelete) ? pView->m_pDatabaseTCNumOolTables[0].GetAt((nIndex[0] = pView->m_pDatabaseTCNumOolTables[0].Find(pszName))) : (CDatabaseTCNumOolTable *)NULL))
			{
				if ((pDatabaseTCNumOolTable[1] = pView->m_pDatabaseTCNumOolTables[1].GetAt((nIndex[1] = pView->m_pDatabaseTCNumOolTables[1].Find(pszName)))))
				{
					pView->m_pDatabaseTCNumOolTables[1].RemoveAt(nIndex[1]);
					delete pDatabaseTCNumOolTable[1];
				}
				pView->m_pDatabaseTCNumOolTables[0].RemoveAt(nIndex[0]);
				delete pDatabaseTCNumOolTable[0];
				UpdateTables(pView, nComponent);
				return TRUE;
			}
		}
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCTXTOOLTABLE)
		{
			if ((pDatabaseTCTxtOolTable[0] = (!bDelete) ? GetTCTxtOolTables()->GetAt(GetTCTxtOolTables()->Find(pszName)) : (CDatabaseTCTxtOolTable *)NULL))
			{
				if ((pDatabaseTCTxtOolTable[1] = pView->m_pDatabaseTCTxtOolTables[0].GetAt(pView->m_pDatabaseTCTxtOolTables[0].Find(pDatabaseTCTxtOolTable[0]->GetName()))))
				{
					if ((pDatabaseTCTxtOolTable[2] = pView->m_pDatabaseTCTxtOolTables[1].GetAt(pView->m_pDatabaseTCTxtOolTables[1].Find(pDatabaseTCTxtOolTable[0]->GetName()))))
					{
						pDatabaseTCTxtOolTable[1]->Copy(pDatabaseTCTxtOolTable[0]);
						pDatabaseTCTxtOolTable[2]->Copy(pDatabaseTCTxtOolTable[0]);
						UpdateTables(pView, nComponent);
						return TRUE;
					}
					if ((pDatabaseTCTxtOolTable[2] = new CDatabaseTCTxtOolTable))
					{
						for (pDatabaseTCTxtOolTable[1]->Copy(pDatabaseTCTxtOolTable[0]), pDatabaseTCTxtOolTable[2]->Copy(pDatabaseTCTxtOolTable[0]); pView->m_pDatabaseTCTxtOolTables[1].Add(pDatabaseTCTxtOolTable[2]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCTxtOolTable[2];
					}
					return FALSE;
				}
				if ((pDatabaseTCTxtOolTable[1] = new CDatabaseTCTxtOolTable))
				{
					if ((pDatabaseTCTxtOolTable[2] = pView->m_pDatabaseTCTxtOolTables[1].GetAt(pView->m_pDatabaseTCTxtOolTables[1].Find(pDatabaseTCTxtOolTable[0]->GetName()))))
					{
						for (pDatabaseTCTxtOolTable[1]->Copy(pDatabaseTCTxtOolTable[0]), pDatabaseTCTxtOolTable[2]->Copy(pDatabaseTCTxtOolTable[0]); pView->m_pDatabaseTCTxtOolTables[0].Add(pDatabaseTCTxtOolTable[1]) >= 0; )
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						delete pDatabaseTCTxtOolTable[1];
						return FALSE;
					}
					if ((pDatabaseTCTxtOolTable[2] = new CDatabaseTCTxtOolTable))
					{
						for (pDatabaseTCTxtOolTable[1]->Copy(pDatabaseTCTxtOolTable[0]), pDatabaseTCTxtOolTable[2]->Copy(pDatabaseTCTxtOolTable[0]); pView->m_pDatabaseTCTxtOolTables[0].Add(pDatabaseTCTxtOolTable[1]) >= 0; )
						{
							if (pView->m_pDatabaseTCTxtOolTables[1].Add(pDatabaseTCTxtOolTable[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
							pView->m_pDatabaseTCTxtOolTables[0].RemoveAt(pView->m_pDatabaseTCTxtOolTables[0].Find(pDatabaseTCTxtOolTable[0]->GetName()));
						}
						delete pDatabaseTCTxtOolTable[2];
					}
					delete pDatabaseTCTxtOolTable[1];
				}
			}
			if ((pDatabaseTCTxtOolTable[0] = (bDelete) ? pView->m_pDatabaseTCTxtOolTables[0].GetAt((nIndex[0] = pView->m_pDatabaseTCTxtOolTables[0].Find(pszName))) : (CDatabaseTCTxtOolTable *)NULL))
			{
				if ((pDatabaseTCTxtOolTable[1] = pView->m_pDatabaseTCTxtOolTables[1].GetAt((nIndex[1] = pView->m_pDatabaseTCTxtOolTables[1].Find(pszName)))))
				{
					pView->m_pDatabaseTCTxtOolTables[1].RemoveAt(nIndex[1]);
					delete pDatabaseTCTxtOolTable[1];
				}
				pView->m_pDatabaseTCTxtOolTables[0].RemoveAt(nIndex[0]);
				delete pDatabaseTCTxtOolTable[0];
				UpdateTables(pView, nComponent);
				return TRUE;
			}
		}
		return FALSE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_AND)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pANDLayout[0] = (!bDelete) ? GetANDs()->GetAt(GetANDs()->Find(pszName)) : (CANDLayout *)NULL))
			{
				if ((pANDLayout[1] = pView->m_pANDLayouts[0].GetAt(pView->m_pANDLayouts[0].Find(pANDLayout[0]->GetName()))))
				{
					if ((pANDLayout[2] = pView->m_pANDLayouts[1].GetAt(pView->m_pANDLayouts[1].Find(pANDLayout[0]->GetName()))))
					{
						if (pANDLayout[1]->Copy(pANDLayout[0]) && pANDLayout[2]->Copy(pANDLayout[0]))
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						return FALSE;
					}
					if ((pANDLayout[2] = new CANDLayout))
					{
						if (pANDLayout[1]->Copy(pANDLayout[0]) && pANDLayout[2]->Copy(pANDLayout[0]))
						{
							if (pView->m_pANDLayouts[1].Add(pANDLayout[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pANDLayout[2];
					}
					return FALSE;
				}
				if ((pANDLayout[1] = new CANDLayout))
				{
					if ((pANDLayout[2] = pView->m_pANDLayouts[1].GetAt(pView->m_pANDLayouts[1].Find(pANDLayout[0]->GetName()))))
					{
						if (pANDLayout[1]->Copy(pANDLayout[0]) && pANDLayout[2]->Copy(pANDLayout[0]))
						{
							if (pView->m_pANDLayouts[0].Add(pANDLayout[1]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pANDLayout[1];
						return FALSE;
					}
					if ((pANDLayout[2] = new CANDLayout))
					{
						if (pANDLayout[1]->Copy(pANDLayout[0]) && pANDLayout[2]->Copy(pANDLayout[0]))
						{
							if (pView->m_pANDLayouts[0].Add(pANDLayout[1]) >= 0)
							{
								if (pView->m_pANDLayouts[1].Add(pANDLayout[2]) >= 0)
								{
									UpdateTables(pView, nComponent);
									return TRUE;
								}
								pView->m_pANDLayouts[0].RemoveAt(pView->m_pANDLayouts[0].Find(pANDLayout[1]->GetName()));
							}
						}
						delete pANDLayout[2];
					}
					delete pANDLayout[1];
				}
				return FALSE;
			}
			if ((pANDLayout[0] = (bDelete) ? pView->m_pANDLayouts[0].GetAt((nIndex[0] = pView->m_pANDLayouts[0].Find(pszName))) : (CANDLayout *)NULL))
			{
				if ((pANDLayout[1] = pView->m_pANDLayouts[1].GetAt((nIndex[1] = pView->m_pANDLayouts[1].Find(pszName)))))
				{
					pView->m_pANDLayouts[1].RemoveAt(nIndex[1]);
					delete pANDLayout[1];
				}
				pView->m_pANDLayouts[0].RemoveAt(nIndex[0]);
				UpdateTables(pView, nComponent);
				delete pANDLayout[0];
				return TRUE;
			}
		}
		return FALSE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_GRD)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pGRDLayout[0] = (!bDelete) ? GetGRDs()->GetAt(GetGRDs()->Find(pszName)) : (CGRDLayout *)NULL))
			{
				if ((pGRDLayout[1] = pView->m_pGRDLayouts[0].GetAt(pView->m_pGRDLayouts[0].Find(pGRDLayout[0]->GetName()))))
				{
					if ((pGRDLayout[2] = pView->m_pGRDLayouts[1].GetAt(pView->m_pGRDLayouts[1].Find(pGRDLayout[0]->GetName()))))
					{
						if (pGRDLayout[1]->Copy(pGRDLayout[0]) && pGRDLayout[2]->Copy(pGRDLayout[0]))
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						return FALSE;
					}
					if ((pGRDLayout[2] = new CGRDLayout))
					{
						if (pGRDLayout[1]->Copy(pGRDLayout[0]) && pGRDLayout[2]->Copy(pGRDLayout[0]))
						{
							if (pView->m_pGRDLayouts[1].Add(pGRDLayout[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pGRDLayout[2];
					}
					return FALSE;
				}
				if ((pGRDLayout[1] = new CGRDLayout))
				{
					if ((pGRDLayout[2] = pView->m_pGRDLayouts[1].GetAt(pView->m_pGRDLayouts[1].Find(pGRDLayout[0]->GetName()))))
					{
						if (pGRDLayout[1]->Copy(pGRDLayout[0]) && pGRDLayout[2]->Copy(pGRDLayout[0]))
						{
							if (pView->m_pGRDLayouts[0].Add(pGRDLayout[1]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pGRDLayout[1];
						return FALSE;
					}
					if ((pGRDLayout[2] = new CGRDLayout))
					{
						if (pGRDLayout[1]->Copy(pGRDLayout[0]) && pGRDLayout[2]->Copy(pGRDLayout[0]))
						{
							if (pView->m_pGRDLayouts[0].Add(pGRDLayout[1]) >= 0)
							{
								if (pView->m_pGRDLayouts[1].Add(pGRDLayout[2]) >= 0)
								{
									UpdateTables(pView, nComponent);
									return TRUE;
								}
								pView->m_pGRDLayouts[0].RemoveAt(pView->m_pGRDLayouts[0].Find(pGRDLayout[1]->GetName()));
							}
						}
						delete pGRDLayout[2];
					}
					delete pGRDLayout[1];
				}
				return FALSE;
			}
			if ((pGRDLayout[0] = (bDelete) ? pView->m_pGRDLayouts[0].GetAt((nIndex[0] = pView->m_pGRDLayouts[0].Find(pszName))) : (CGRDLayout *)NULL))
			{
				if ((pGRDLayout[1] = pView->m_pGRDLayouts[1].GetAt((nIndex[1] = pView->m_pGRDLayouts[1].Find(pszName)))))
				{
					pView->m_pGRDLayouts[1].RemoveAt(nIndex[1]);
					delete pGRDLayout[1];
				}
				pView->m_pGRDLayouts[0].RemoveAt(nIndex[0]);
				UpdateTables(pView, nComponent);
				delete pGRDLayout[0];
				return TRUE;
			}
		}
		return FALSE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_POD)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pPODLayout[0] = (!bDelete) ? GetPODs()->GetAt(GetPODs()->Find(pszName)) : (CPODLayout *)NULL))
			{
				if ((pPODLayout[1] = pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pPODLayout[0]->GetName()))))
				{
					if ((pPODLayout[2] = pView->m_pPODLayouts[1].GetAt(pView->m_pPODLayouts[1].Find(pPODLayout[0]->GetName()))))
					{
						if (pPODLayout[1]->Copy(pPODLayout[0]) && pPODLayout[2]->Copy(pPODLayout[0]))
						{
							UpdateTables(pView, nComponent);
							return TRUE;
						}
						return FALSE;
					}
					if ((pPODLayout[2] = new CPODLayout))
					{
						if (pPODLayout[1]->Copy(pPODLayout[0]) && pPODLayout[2]->Copy(pPODLayout[0]))
						{
							if (pView->m_pPODLayouts[1].Add(pPODLayout[2]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pPODLayout[2];
					}
					return FALSE;
				}
				if ((pPODLayout[1] = new CPODLayout))
				{
					if ((pPODLayout[2] = pView->m_pPODLayouts[1].GetAt(pView->m_pPODLayouts[1].Find(pPODLayout[0]->GetName()))))
					{
						if (pPODLayout[1]->Copy(pPODLayout[0]) && pPODLayout[2]->Copy(pPODLayout[0]))
						{
							if (pView->m_pPODLayouts[0].Add(pPODLayout[1]) >= 0)
							{
								UpdateTables(pView, nComponent);
								return TRUE;
							}
						}
						delete pPODLayout[1];
						return FALSE;
					}
					if ((pPODLayout[2] = new CPODLayout))
					{
						if (pPODLayout[1]->Copy(pPODLayout[0]) && pPODLayout[2]->Copy(pPODLayout[0]))
						{
							if (pView->m_pPODLayouts[0].Add(pPODLayout[1]) >= 0)
							{
								if (pView->m_pPODLayouts[1].Add(pPODLayout[2]) >= 0)
								{
									UpdateTables(pView, nComponent);
									return TRUE;
								}
								pView->m_pPODLayouts[0].RemoveAt(pView->m_pPODLayouts[0].Find(pPODLayout[1]->GetName()));
							}
						}
						delete pPODLayout[2];
					}
					delete pPODLayout[1];
				}
				return FALSE;
			}
			if ((pPODLayout[0] = (bDelete) ? pView->m_pPODLayouts[0].GetAt((nIndex[0] = pView->m_pPODLayouts[0].Find(pszName))) : (CPODLayout *)NULL))
			{
				if ((pPODLayout[1] = pView->m_pPODLayouts[1].GetAt((nIndex[1] = pView->m_pPODLayouts[1].Find(pszName)))))
				{
					pView->m_pPODLayouts[1].RemoveAt(nIndex[1]);
					delete pPODLayout[1];
				}
				pView->m_pPODLayouts[0].RemoveAt(nIndex[0]);
				UpdateTables(pView, nComponent);
				delete pPODLayout[0];
				return TRUE;
			}
		}
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::UpdateTables(CDatabaseTableView *pView, ULONGLONG nComponent, INT nID, BOOL bDelete)
{
	return FALSE;
}
VOID CALTELDatabaseEngine::UpdateTables(CDatabaseTableView *pView, ULONGLONG nComponent)
{
	INT  nRow;
	INT  nRows;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;

	for (pView->EnableUndo(FALSE); DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET; )
	{
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TMPACKET | DATABASE_SUBCOMPONENT_NONE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PMF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_PMF_PACKID), STRING(IDS_DATABASE_TABLE_PMF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_PMF_PACKID));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TMPACKET | DATABASE_SUBCOMPONENT_TMPACKETHEADER)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PMF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME), STRING(IDS_DATABASE_TABLE_PMF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TMPACKET | DATABASE_SUBCOMPONENT_TMPACKETSTREAM)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PMF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_PMF_EVENTID), STRING(IDS_DATABASE_TABLE_PMF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_PMF_EVENTID));
		break;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_NONE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CCF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_CCF_CNAME), STRING(IDS_DATABASE_TABLE_CCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_CCF_CNAME));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCFUNCTIONPACKET)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CCF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_CCF_TCPID), STRING(IDS_DATABASE_TABLE_CCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_CCF_TCPID));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCFUNCTIONPREEXEGROUP)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CCF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_CCF_PVPID), STRING(IDS_DATABASE_TABLE_CCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_CCF_PVPID));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCFUNCTIONEXEVERGROUP)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CCF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_CCF_CVPID), STRING(IDS_DATABASE_TABLE_CCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_CCF_CVPID));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCFUNCTIONPACKET)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_TCP)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_TCP_PACKID), STRING(IDS_DATABASE_TABLE_TCP_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_TCP_PACKID));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCFUNCTIONPREEXEGROUP)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PVP)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_PVP_ID), STRING(IDS_DATABASE_TABLE_PVP_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_PVP_ID));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCFUNCTIONEXEVERGROUP)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CVP)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_CVP_ID), STRING(IDS_DATABASE_TABLE_CVP_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_CVP_ID));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCPARAMETERSET)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CPS)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_CPS_NAME), STRING(IDS_DATABASE_TABLE_CPS_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_CPS_NAME));
		if (nComponent == (DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCPARAMETERSET))
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCPS))))
			{
				for (nRow = 1, nRows = pTable->GetRows(); nRow < nRows; nRow++)
				{
					if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCPS_NAME))))
					{
						pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_PCPS_NAME));
						continue;
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCSEQUENCE | DATABASE_SUBCOMPONENT_NONE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CSF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_CSF_NAME), STRING(IDS_DATABASE_TABLE_CSF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_CSF_NAME));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCSEQUENCE | DATABASE_SUBCOMPONENT_TCFUNCTIONBLOCK)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_BCF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_BCF_CNAME), STRING(IDS_DATABASE_TABLE_BCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_BCF_CNAME));
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_OBPROCESSOR | DATABASE_SUBCOMPONENT_NONE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_GEN)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR), STRING(IDS_DATABASE_TABLE_GEN_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_OBPROCESSOR | DATABASE_SUBCOMPONENT_NONE) || nComponent == (DATABASE_COMPONENT_OBPROCESSOR | DATABASE_SUBCOMPONENT_OBPROCESSORMEMORYIMAGE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PIMG)) : (CTableViewObject *)NULL)) ? pTable->FindCell(pTable->GetRows() - 1, pTable->GetColumns() - 1) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_PIMG_MNAME));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_NONE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_GEN)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_GEN_PATCHTC), STRING(IDS_DATABASE_TABLE_GEN_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_GEN_PATCHTC));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_NONE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_GEN)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_GEN_DUMPTC), STRING(IDS_DATABASE_TABLE_GEN_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_GEN_DUMPTC));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TMPACKET | DATABASE_SUBCOMPONENT_NONE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_GEN)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_GEN_TMPKT), STRING(IDS_DATABASE_TABLE_GEN_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_GEN_TMPKT));
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_NONE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_PCF_NAME), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_PCF_NAME));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_NONE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_PCF_VALID), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_PCF_VALID));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMNUMCALTABLE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_CAL_NAME), STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_CAL_NAME));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMTXTCALTABLE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_TXF_NAME), STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_TXF_NAME));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMNUMOOLTABLE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_OCF_NAME), STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_OCF_NAME));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMTXTOOLTABLE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_FXF_NAME), STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_FXF_NAME));
		if (nComponent == (DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMNUMCALTABLE))
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCAL))))
			{
				for (nRow = 1, nRows = pTable->GetRows(); nRow < nRows; nRow++)
				{
					if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCAL_NAME))))
					{
						pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_PCAL_NAME));
						continue;
					}
				}
			}
		}
		if (nComponent == (DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMTXTCALTABLE))
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PTXF))))
			{
				for (nRow = 1, nRows = pTable->GetRows(); nRow < nRows; nRow++)
				{
					if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PTXF_NAME))))
					{
						pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_PTXF_NAME));
						continue;
					}
				}
			}
		}
		if (nComponent == (DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMNUMOOLTABLE))
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_POCF))))
			{
				for (nRow = 1, nRows = pTable->GetRows(); nRow < nRows; nRow++)
				{
					if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_POCF_NAME))))
					{
						pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_POCF_NAME));
						continue;
					}
				}
			}
		}
		if (nComponent == (DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMTXTOOLTABLE))
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PFXF))))
			{
				for (nRow = 1, nRows = pTable->GetRows(); nRow < nRows; nRow++)
				{
					if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PFXF_NAME))))
					{
						pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_PFXF_NAME));
						continue;
					}
				}
			}
		}
		if (nComponent == (DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_NONE))
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCAL))))
			{
				for (nRow = 1, nRows = pTable->GetRows(); nRow < nRows; nRow++)
				{
					if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCAL_VALID))))
					{
						pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_PCAL_VALID));
						continue;
					}
				}
			}
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PTXF))))
			{
				for (nRow = 1, nRows = pTable->GetRows(); nRow < nRows; nRow++)
				{
					if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PTXF_VALID))))
					{
						pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_PTXF_VALID));
						continue;
					}
				}
			}
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_POCF))))
			{
				for (nRow = 1, nRows = pTable->GetRows(); nRow < nRows; nRow++)
				{
					if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_POCF_VALID))))
					{
						pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_POCF_VALID));
						continue;
					}
				}
			}
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PFXF))))
			{
				for (nRow = 1, nRows = pTable->GetRows(); nRow < nRows; nRow++)
				{
					if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PFXF_VALID))))
					{
						pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_PFXF_VALID));
						continue;
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_NONE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CPC)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_CPC_PNAME), STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_CPC_PNAME));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCNUMCALTABLE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CPC)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_CPC_CALREF), STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_CPC_CALREF));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCTXTCALTABLE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CPC)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_CPC_TXFREF), STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_CPC_TXFREF));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCNUMOOLTABLE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CPC)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_CPC_OCFREF), STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_CPC_OCFREF));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCTXTOOLTABLE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CPC)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_CPC_FXFREF), STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_CPC_FXFREF));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCNUMCALTABLE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_CAL_NAME), STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_CAL_NAME));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCTXTCALTABLE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_TXF_NAME), STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_TXF_NAME));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCNUMOOLTABLE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_OCF_NAME), STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_OCF_NAME));
		if ((pCell = ((pTable = (nComponent == (DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCTXTOOLTABLE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_FXF_NAME), STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_FXF_NAME));
	}
	if ((pCell = ((pTable = (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND  &&  nComponent == (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_NONE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_DPF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_DPF_NUMBER), STRING(IDS_DATABASE_TABLE_DPF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_DPF_NUMBER));
	if ((pCell = ((pTable = (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD  &&  nComponent == (DATABASE_COMPONENT_GRD | DATABASE_SUBCOMPONENT_NONE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_GPF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_GPF_NUMBER), STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_GPF_NUMBER));
	if ((pCell = ((pTable = (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD  &&  nComponent == (DATABASE_COMPONENT_POD | DATABASE_SUBCOMPONENT_NONE)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF)) : (CTableViewObject *)NULL)) ? pTable->FindCell(STRING(IDS_DATABASE_TABLE_PPF_NUMBER), STRING(IDS_DATABASE_TABLE_PPF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL)) pView->EnumTableCellValues(pTable, pCell, STRING(IDS_DATABASE_TABLE_PPF_NUMBER));
	UpdateTables(pView);
	pView->EnableUndo(TRUE);
}
VOID CALTELDatabaseEngine::UpdateTables(CDatabaseTableView *pView)
{
	INT  nTable;
	INT  nTables;
	UINT  nControlID;
	CString  szItem;
	CString  szTable;
	CString  szValue;
	CUIntArray  nTypes;
	CStringArray  szItems;
	CStringArray  szTables;
	CTableViewObject  *pTable;

	for (nTable = 0, nTables = EnumTables(pView, szTables, nTypes, TRUE), pView->EnableUndo(FALSE); nTable < nTables; nTable++)
	{
		for (GetTableContext(pView, szTables.GetAt(nTable), szTable, nControlID, szValue); GetTableUpdateContents(pView, szTables.GetAt(nTable), -1, szValue, szItem, szItems); )
		{
			if ((pTable = pView->FindTable(szTables.GetAt(nTable)))) pView->UpdateTableContents(pTable, szItems);
			break;
		}
	}
	ArrangeTables(pView, 0);
	pView->EnableUndo(TRUE);
}

VOID CALTELDatabaseEngine::ArrangeTables(CDatabaseTableView *pView)
{
	ULONGLONG  nComponent;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;

	if ((nComponent = DATABASECOMPONENTFROMCODE(pView->GetComponent())) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_GEN))) != (CTableViewObject *)NULL)
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_GEN_IMGNAME), STRING(IDS_DATABASE_TABLE_GEN_TITLEITEM_VALUE))))
			{
				pCell->SetSubTable(STRING(IDS_DATABASE_TABLE_PIMG));
				return;
			}
		}
	}
	if (nComponent == DATABASE_COMPONENT_AND)
	{
		if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_DPF))))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_DPF_LAYOUT), STRING(IDS_DATABASE_TABLE_DPF_TITLEITEM_VALUE))))
			{
				pCell->SetSubTable(STRING(IDS_DATABASE_TABLE_DPF_LAYOUT));
				return;
			}
		}
	}
	if (nComponent == DATABASE_COMPONENT_GRD)
	{
		if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_GPF))))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_GPF_LAYOUT), STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_VALUE))))
			{
				pCell->SetSubTable(STRING(IDS_DATABASE_TABLE_GPF_LAYOUT));
				return;
			}
		}
	}
	if (nComponent == DATABASE_COMPONENT_POD)
	{
		if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF))))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_PPF_LAYOUT), STRING(IDS_DATABASE_TABLE_PPF_TITLEITEM_VALUE)))) pCell->SetSubTable(STRING(IDS_DATABASE_TABLE_PPF_LAYOUT));
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK), STRING(IDS_DATABASE_TABLE_PPF_TITLEITEM_VALUE)))) pCell->SetSubTable(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK));
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS), STRING(IDS_DATABASE_TABLE_PPF_TITLEITEM_VALUE)))) pCell->SetSubTable(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS));
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS), STRING(IDS_DATABASE_TABLE_PPF_TITLEITEM_VALUE)))) pCell->SetSubTable(STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS));
		}
	}
}
VOID CALTELDatabaseEngine::ArrangeTables(CDatabaseTableView *pView, UINT nControlID)
{
	INT  nAlignment;
	UINT  nAttributes;
	BOOL  bUpdate[5];
	CString  szItem;
	ULONGLONG  nComponent;
	CStringArray  szItems;
	CTableViewCell  *pCell[2];
	CTableViewObject  *pTable[5];
	TABLEVIEWCELLVALUE  sValue;

	if (((nComponent = DATABASECOMPONENTFROMCODE(pView->GetComponent())) == DATABASE_COMPONENT_TMPACKET || nComponent == DATABASE_COMPONENT_TCFUNCTION || nComponent == DATABASE_COMPONENT_AND || nComponent == DATABASE_COMPONENT_GRD || nComponent == DATABASE_COMPONENT_POD || !nComponent) && nControlID != (UINT)-1)
	{
		pView->RepositionTables();
		return;
	}
	if (nComponent == DATABASE_COMPONENT_TCSEQUENCE  &&  nControlID != (UINT)-1)
	{
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CSS))))
		{
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_SDF))))
			{
				for (nAlignment = pTable[1]->GetFloatingAlignment(), pView->SetTableFloatingAlignment(pTable[1]->GetName(), (pTable[0]->GetSelRow() >= 0) ? min(max(pTable[0]->GetSelRow(), pTable[0]->HasTitle()), pTable[0]->GetRows() - 1) : min(max(pView->GetTableFloatingAlignment(pTable[1]->GetName()), pTable[0]->HasTitle()), pTable[0]->GetRows() - 1)), bUpdate[1] = (pTable[1]->GetFloatingAlignment() != nAlignment); (pCell[0] = pTable[0]->FindCell(pView->GetTableFloatingAlignment(pTable[1]->GetName()), STRING(IDS_DATABASE_TABLE_CSS_TYPE))) && ((!pTable[1]->IsVisible() && pTable[0]->GetRows() > 1 && (!pCell[0]->GetValue(sValue) || sValue.Value.nValue != TCSEQUENCEENTRY_TYPE_SEQUENCE)) || (pTable[1]->IsVisible() && (pTable[0]->GetRows() <= 1 || (pCell[0]->GetValue(sValue) && sValue.Value.nValue == TCSEQUENCEENTRY_TYPE_SEQUENCE)))); )
				{
					pTable[1]->MakeVisible(!pTable[1]->IsVisible());
					break;
				}
				if (bUpdate[1] && GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pView->GetName(), szItem, szItems)) pView->UpdateTableContents(pTable[1], szItems);
			}
		}
		pView->RepositionTables();
		return;
	}
	if (nComponent == DATABASE_COMPONENT_OBPROCESSOR  &&  nControlID != (UINT)-1)
	{
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_MAD))))
		{
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_MEM))))
			{
				if ((pTable[2] = pView->FindTable(STRING(IDS_DATABASE_TABLE_IMG))))
				{
					if ((pTable[3] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CRC))))
					{
						if ((pTable[4] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CAT))))
						{
							for (nAlignment = pTable[1]->GetFloatingAlignment(), pView->SetTableFloatingAlignment(pTable[1]->GetName(), (pTable[0]->GetSelRow() >= 0) ? min(max(pTable[0]->GetSelRow(), pTable[0]->HasTitle()), pTable[0]->GetRows() - 1) : min(max(pView->GetTableFloatingAlignment(pTable[1]->GetName()), pTable[0]->HasTitle()), pTable[0]->GetRows() - 1)), bUpdate[1] = (pTable[1]->GetFloatingAlignment() != nAlignment), nAttributes = ((pCell[0] = pTable[0]->FindCell(pView->GetTableFloatingAlignment(pTable[1]->GetName()), STRING(IDS_DATABASE_TABLE_MAD_TYPE)))) ? TranslateOBProcessorMemoryAreaType(pCell[0]->GetText(), FALSE) : 0; (!pTable[1]->IsVisible() && (nAttributes & OBPROCESSORMEMORYAREA_TYPE_IMAGE) != OBPROCESSORMEMORYAREA_TYPE_IMAGE && pTable[0]->GetRows() > 1) || (pTable[1]->IsVisible() && ((nAttributes & OBPROCESSORMEMORYAREA_TYPE_IMAGE) || pTable[0]->GetRows() <= 1)); )
							{
								pTable[1]->MakeVisible(!pTable[1]->IsVisible());
								break;
							}
							for (nAlignment = pTable[2]->GetFloatingAlignment(), pView->SetTableFloatingAlignment(pTable[2]->GetName(), (pTable[0]->GetSelRow() >= 0) ? min(max(pTable[0]->GetSelRow(), pTable[0]->HasTitle()), pTable[0]->GetRows() - 1) : min(max(pView->GetTableFloatingAlignment(pTable[2]->GetName()), pTable[0]->HasTitle()), pTable[0]->GetRows() - 1)), bUpdate[2] = (pTable[2]->GetFloatingAlignment() != nAlignment); (!pTable[2]->IsVisible() && (nAttributes & OBPROCESSORMEMORYAREA_TYPE_IMAGE) && pTable[0]->GetRows() > 1) || (pTable[2]->IsVisible() && ((nAttributes & OBPROCESSORMEMORYAREA_TYPE_IMAGE) != OBPROCESSORMEMORYAREA_TYPE_IMAGE || pTable[0]->GetRows() <= 1)); )
							{
								pTable[2]->MakeVisible(!pTable[2]->IsVisible());
								break;
							}
							for (nAlignment = pTable[3]->GetFloatingAlignment(), pView->SetTableFloatingAlignment(pTable[3]->GetName(), (pTable[0]->GetSelRow() >= 0) ? min(max(pTable[0]->GetSelRow(), pTable[0]->HasTitle()), pTable[0]->GetRows() - 1) : min(max(pView->GetTableFloatingAlignment(pTable[3]->GetName()), pTable[0]->HasTitle()), pTable[0]->GetRows() - 1)), bUpdate[3] = (pTable[3]->GetFloatingAlignment() != nAlignment); (!pTable[3]->IsVisible() && pTable[0]->GetRows() > 1) || (pTable[3]->IsVisible() && pTable[0]->GetRows() <= 1); )
							{
								pTable[3]->MakeVisible(!pTable[3]->IsVisible());
								break;
							}
							for (nAlignment = pTable[4]->GetFloatingAlignment(), pView->SetTableFloatingAlignment(pTable[4]->GetName(), (pTable[0]->GetSelRow() >= 0) ? min(max(pTable[0]->GetSelRow(), pTable[0]->HasTitle()), pTable[0]->GetRows() - 1) : min(max(pView->GetTableFloatingAlignment(pTable[4]->GetName()), pTable[0]->HasTitle()), pTable[0]->GetRows() - 1)), bUpdate[4] = (pTable[4]->GetFloatingAlignment() != nAlignment); (!pTable[4]->IsVisible() && pTable[0]->GetRows() > 1) || (pTable[4]->IsVisible() && pTable[0]->GetRows() <= 1); )
							{
								pTable[4]->MakeVisible(!pTable[4]->IsVisible());
								break;
							}
							if (bUpdate[1] && GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pView->GetName(), szItem, szItems)) pView->UpdateTableContents(pTable[1], szItems);
							if (bUpdate[2] && GetTableUpdateContents(pView, pTable[2]->GetName(), -1, pView->GetName(), szItem, szItems)) pView->UpdateTableContents(pTable[2], szItems);
							if (bUpdate[3] && GetTableUpdateContents(pView, pTable[3]->GetName(), -1, pView->GetName(), szItem, szItems)) pView->UpdateTableContents(pTable[3], szItems);
							if (bUpdate[4] && GetTableUpdateContents(pView, pTable[4]->GetName(), -1, pView->GetName(), szItem, szItems)) pView->UpdateTableContents(pTable[4], szItems);
						}
					}
				}
			}
		}
		pView->RepositionTables();
		return;
	}
	if (nComponent == DATABASE_COMPONENT_TMPARAMETER  &&  nControlID != (UINT)-1)
	{
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF))) != (CTableViewObject *)NULL)
		{
			for (sValue.Value.nValue = (pTable[0]->GetCellValue(STRING(IDS_DATABASE_TABLE_PCF_CATEG), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE), sValue)) ? sValue.Value.nValue : TMPARAMETER_CALIBRATION_NONE; (pCell[1] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PCF_CALTABLES), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE))); )
			{
				pCell[1]->SetSubTable((sValue.Value.nValue != TMPARAMETER_CALIBRATION_NONE) ? ((sValue.Value.nValue == TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_DATABASE_TABLE_PCAL) : STRING(IDS_DATABASE_TABLE_PTXF)) : EMPTYSTRING);
				break;
			}
			for (; (pCell[1] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE))); )
			{
				pCell[1]->SetSubTable((sValue.Value.nValue == TMPARAMETER_CALIBRATION_NONE || sValue.Value.nValue == TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_DATABASE_TABLE_POCF) : STRING(IDS_DATABASE_TABLE_PFXF));
				break;
			}
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCAL)))) pTable[1]->MakeVisible((sValue.Value.nValue == TMPARAMETER_CALIBRATION_NUMERICAL) ? TRUE : FALSE);
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PTXF)))) pTable[1]->MakeVisible((sValue.Value.nValue == TMPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_POCF)))) pTable[1]->MakeVisible((sValue.Value.nValue == TMPARAMETER_CALIBRATION_NONE || sValue.Value.nValue == TMPARAMETER_CALIBRATION_NUMERICAL) ? TRUE : FALSE);
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PFXF)))) pTable[1]->MakeVisible((sValue.Value.nValue == TMPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL)))) pTable[1]->MakeVisible((sValue.Value.nValue == TMPARAMETER_CALIBRATION_NUMERICAL) ? TRUE : FALSE);
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CALP)))) pTable[1]->MakeVisible((sValue.Value.nValue == TMPARAMETER_CALIBRATION_NUMERICAL) ? TRUE : FALSE);
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF)))) pTable[1]->MakeVisible((sValue.Value.nValue == TMPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_TXFP)))) pTable[1]->MakeVisible((sValue.Value.nValue == TMPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF)))) pTable[1]->MakeVisible((sValue.Value.nValue == TMPARAMETER_CALIBRATION_NONE || sValue.Value.nValue == TMPARAMETER_CALIBRATION_NUMERICAL) ? TRUE : FALSE);
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCFP)))) pTable[1]->MakeVisible((sValue.Value.nValue == TMPARAMETER_CALIBRATION_NONE || sValue.Value.nValue == TMPARAMETER_CALIBRATION_NUMERICAL) ? TRUE : FALSE);
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF)))) pTable[1]->MakeVisible((sValue.Value.nValue == TMPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXFP)))) pTable[1]->MakeVisible((sValue.Value.nValue == TMPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
			pView->RecalcTable(pTable[0], FALSE, TRUE, FALSE);
		}
		pView->RepositionTables();
		return;
	}
	if (nComponent == DATABASE_COMPONENT_TCPARAMETER  &&  nControlID != (UINT)-1)
	{
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CPC))) != (CTableViewObject *)NULL)
		{
			for (sValue.Value.nValue = (pTable[0]->GetCellValue(STRING(IDS_DATABASE_TABLE_CPC_CATEG), STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_VALUE), sValue)) ? sValue.Value.nValue : TCPARAMETER_CALIBRATION_NONE; TRUE; )
			{
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL)))) pTable[1]->MakeVisible((sValue.Value.nValue == TCPARAMETER_CALIBRATION_NUMERICAL) ? TRUE : FALSE);
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CALP)))) pTable[1]->MakeVisible((sValue.Value.nValue == TCPARAMETER_CALIBRATION_NUMERICAL) ? TRUE : FALSE);
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF)))) pTable[1]->MakeVisible((sValue.Value.nValue == TCPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_TXFP)))) pTable[1]->MakeVisible((sValue.Value.nValue == TCPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF)))) pTable[1]->MakeVisible((sValue.Value.nValue == TCPARAMETER_CALIBRATION_NONE || sValue.Value.nValue == TCPARAMETER_CALIBRATION_NUMERICAL) ? TRUE : FALSE);
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCFP)))) pTable[1]->MakeVisible((sValue.Value.nValue == TCPARAMETER_CALIBRATION_NONE || sValue.Value.nValue == TCPARAMETER_CALIBRATION_NUMERICAL) ? TRUE : FALSE);
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF)))) pTable[1]->MakeVisible((sValue.Value.nValue == TCPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXFP)))) pTable[1]->MakeVisible((sValue.Value.nValue == TCPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
				break;
			}
			pView->RecalcTable(pTable[0], FALSE, TRUE, FALSE);
		}
		pView->RepositionTables();
		return;
	}
}

BOOL CALTELDatabaseEngine::DiscardTables(CDatabaseTableView *pView, ULONGLONG nComponent, BOOL bAll)
{
	CDatabaseTMPacket  *pDatabaseTMPacket[2];
	CDatabaseTCFunction  *pDatabaseTCFunction[2];
	CDatabaseTCSequence  *pDatabaseTCSequence[2];
	CDatabaseOBProcessor  *pDatabaseOBProcessor[2];
	CDatabaseTMParameter  *pDatabaseTMParameter[2];
	CDatabaseTCParameter  *pDatabaseTCParameter[2];
	CANDLayout  *pANDLayout[2];
	CGRDLayout  *pGRDLayout[2];
	CPODLayout  *pPODLayout[2];

	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPACKET) return((bAll) ? (pView->m_pDatabaseTMPackets[0].Copy(&pView->m_pDatabaseTMPackets[1]) && pView->m_pDatabaseTMPacketHeaders[0].Copy(&pView->m_pDatabaseTMPacketHeaders[1]) && pView->m_pDatabaseTMPacketStreams[0].Copy(&pView->m_pDatabaseTMPacketStreams[1])) : (((pDatabaseTMPacket[0] = pView->m_pDatabaseTMPackets[0].GetAt(pView->m_pDatabaseTMPackets[0].Find(pView->GetName()))) && (pDatabaseTMPacket[1] = pView->m_pDatabaseTMPackets[1].GetAt(pView->m_pDatabaseTMPackets[1].Find(pView->GetName())))) ? pDatabaseTMPacket[0]->Copy(pDatabaseTMPacket[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCFUNCTION) return((bAll) ? (pView->m_pDatabaseTCFunctions[0].Copy(&pView->m_pDatabaseTCFunctions[1]) && pView->m_pDatabaseTCPackets[0].Copy(&pView->m_pDatabaseTCPackets[1]) && pView->m_pDatabaseTCPreExeGroups[0].Copy(&pView->m_pDatabaseTCPreExeGroups[1]) && pView->m_pDatabaseTCExeVerGroups[0].Copy(&pView->m_pDatabaseTCExeVerGroups[1]) && pView->m_pDatabaseTCParameterSets[0].Copy(&pView->m_pDatabaseTCParameterSets[1])) : (((pDatabaseTCFunction[0] = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pView->GetName()))) && (pDatabaseTCFunction[1] = pView->m_pDatabaseTCFunctions[1].GetAt(pView->m_pDatabaseTCFunctions[1].Find(pView->GetName())))) ? pDatabaseTCFunction[0]->Copy(pDatabaseTCFunction[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCSEQUENCE) return((bAll) ? (pView->m_pDatabaseTCSequences[0].Copy(&pView->m_pDatabaseTCSequences[1]) && pView->m_pDatabaseTCFunctionBlocks[0].Copy(&pView->m_pDatabaseTCFunctionBlocks[1])) : (((pDatabaseTCSequence[0] = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pView->GetName()))) && (pDatabaseTCSequence[1] = pView->m_pDatabaseTCSequences[1].GetAt(pView->m_pDatabaseTCSequences[1].Find(pView->GetName())))) ? pDatabaseTCSequence[0]->Copy(pDatabaseTCSequence[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_OBPROCESSOR) return((bAll) ? (pView->m_pDatabaseOBProcessors[0].Copy(&pView->m_pDatabaseOBProcessors[1]) && pView->m_pDatabaseOBProcessorMemoryImages[0].Copy(&pView->m_pDatabaseOBProcessorMemoryImages[1])) : (((pDatabaseOBProcessor[0] = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pView->GetName()))) && (pDatabaseOBProcessor[1] = pView->m_pDatabaseOBProcessors[1].GetAt(pView->m_pDatabaseOBProcessors[1].Find(pView->GetName())))) ? pDatabaseOBProcessor[0]->Copy(pDatabaseOBProcessor[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPARAMETER) return((bAll) ? (pView->m_pDatabaseTMParameters[0].Copy(&pView->m_pDatabaseTMParameters[1]) && pView->m_pDatabaseTMNumCalTables[0].Copy(&pView->m_pDatabaseTMNumCalTables[1]) && pView->m_pDatabaseTMTxtCalTables[0].Copy(&pView->m_pDatabaseTMTxtCalTables[1]) && pView->m_pDatabaseTMNumOolTables[0].Copy(&pView->m_pDatabaseTMNumOolTables[1]) && pView->m_pDatabaseTMTxtOolTables[0].Copy(&pView->m_pDatabaseTMTxtOolTables[1])) : (((pDatabaseTMParameter[0] = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pView->GetName()))) && (pDatabaseTMParameter[1] = pView->m_pDatabaseTMParameters[1].GetAt(pView->m_pDatabaseTMParameters[1].Find(pView->GetName())))) ? pDatabaseTMParameter[0]->Copy(pDatabaseTMParameter[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCPARAMETER) return((bAll) ? (pView->m_pDatabaseTCParameters[0].Copy(&pView->m_pDatabaseTCParameters[1]) && pView->m_pDatabaseTCNumCalTables[0].Copy(&pView->m_pDatabaseTCNumCalTables[1]) && pView->m_pDatabaseTCTxtCalTables[0].Copy(&pView->m_pDatabaseTCTxtCalTables[1]) && pView->m_pDatabaseTCNumOolTables[0].Copy(&pView->m_pDatabaseTCNumOolTables[1]) && pView->m_pDatabaseTCTxtOolTables[0].Copy(&pView->m_pDatabaseTCTxtOolTables[1])) : (((pDatabaseTCParameter[0] = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pView->GetName()))) && (pDatabaseTCParameter[1] = pView->m_pDatabaseTCParameters[1].GetAt(pView->m_pDatabaseTCParameters[1].Find(pView->GetName())))) ? pDatabaseTCParameter[0]->Copy(pDatabaseTCParameter[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_AND) return((bAll) ? pView->m_pANDLayouts[0].Copy(&pView->m_pANDLayouts[1]) : (((pANDLayout[0] = pView->m_pANDLayouts[0].GetAt(pView->m_pANDLayouts[0].Find(pView->GetName()))) && (pANDLayout[1] = pView->m_pANDLayouts[1].GetAt(pView->m_pANDLayouts[1].Find(pView->GetName())))) ? pANDLayout[0]->Copy(pANDLayout[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_GRD) return((bAll) ? pView->m_pGRDLayouts[0].Copy(&pView->m_pGRDLayouts[1]) : (((pGRDLayout[0] = pView->m_pGRDLayouts[0].GetAt(pView->m_pGRDLayouts[0].Find(pView->GetName()))) && (pGRDLayout[1] = pView->m_pGRDLayouts[1].GetAt(pView->m_pGRDLayouts[1].Find(pView->GetName())))) ? pGRDLayout[0]->Copy(pGRDLayout[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_POD) return((bAll) ? pView->m_pPODLayouts[0].Copy(&pView->m_pPODLayouts[1]) : (((pPODLayout[0] = pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pView->GetName()))) && (pPODLayout[1] = pView->m_pPODLayouts[1].GetAt(pView->m_pPODLayouts[1].Find(pView->GetName())))) ? pPODLayout[0]->Copy(pPODLayout[1]) : FALSE));
	return FALSE;
}

BOOL CALTELDatabaseEngine::CanDiscardTables(CONST CDatabaseTableView *pView, ULONGLONG nComponent, BOOL bAll) CONST
{
	CDatabaseTMPacket  *pDatabaseTMPacket[2];
	CDatabaseTCFunction  *pDatabaseTCFunction[2];
	CDatabaseTCSequence  *pDatabaseTCSequence[2];
	CDatabaseOBProcessor  *pDatabaseOBProcessor[2];
	CDatabaseTMParameter  *pDatabaseTMParameter[2];
	CDatabaseTCParameter  *pDatabaseTCParameter[2];
	CANDLayout  *pANDLayout[2];
	CGRDLayout  *pGRDLayout[2];
	CPODLayout  *pPODLayout[2];

	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPACKET) return((bAll) ? (!pView->m_pDatabaseTMPackets[0].Compare(&pView->m_pDatabaseTMPackets[1]) || !pView->m_pDatabaseTMPacketHeaders[0].Compare(&pView->m_pDatabaseTMPacketHeaders[1]) || !pView->m_pDatabaseTMPacketStreams[0].Compare(&pView->m_pDatabaseTMPacketStreams[1])) : (((pDatabaseTMPacket[0] = pView->m_pDatabaseTMPackets[0].GetAt(pView->m_pDatabaseTMPackets[0].Find(pView->GetName()))) && (pDatabaseTMPacket[1] = pView->m_pDatabaseTMPackets[1].GetAt(pView->m_pDatabaseTMPackets[1].Find(pView->GetName())))) ? !pDatabaseTMPacket[0]->Compare(pDatabaseTMPacket[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCFUNCTION) return((bAll) ? (!pView->m_pDatabaseTCFunctions[0].Compare(&pView->m_pDatabaseTCFunctions[1]) || !pView->m_pDatabaseTCPackets[0].Compare(&pView->m_pDatabaseTCPackets[1]) || !pView->m_pDatabaseTCPreExeGroups[0].Compare(&pView->m_pDatabaseTCPreExeGroups[1]) || !pView->m_pDatabaseTCExeVerGroups[0].Compare(&pView->m_pDatabaseTCExeVerGroups[1]) || !pView->m_pDatabaseTCParameterSets[0].Compare(&pView->m_pDatabaseTCParameterSets[1])) : (((pDatabaseTCFunction[0] = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pView->GetName()))) && (pDatabaseTCFunction[1] = pView->m_pDatabaseTCFunctions[1].GetAt(pView->m_pDatabaseTCFunctions[1].Find(pView->GetName())))) ? !pDatabaseTCFunction[0]->Compare(pDatabaseTCFunction[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCSEQUENCE) return((bAll) ? (!pView->m_pDatabaseTCSequences[0].Compare(&pView->m_pDatabaseTCSequences[1]) || !pView->m_pDatabaseTCFunctionBlocks[0].Compare(&pView->m_pDatabaseTCFunctionBlocks[1])) : (((pDatabaseTCSequence[0] = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pView->GetName()))) && (pDatabaseTCSequence[1] = pView->m_pDatabaseTCSequences[1].GetAt(pView->m_pDatabaseTCSequences[1].Find(pView->GetName())))) ? !pDatabaseTCSequence[0]->Compare(pDatabaseTCSequence[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_OBPROCESSOR) return((bAll) ? (!pView->m_pDatabaseOBProcessors[0].Compare(&pView->m_pDatabaseOBProcessors[1]) || !pView->m_pDatabaseOBProcessorMemoryImages[0].Compare(&pView->m_pDatabaseOBProcessorMemoryImages[1])) : (((pDatabaseOBProcessor[0] = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pView->GetName()))) && (pDatabaseOBProcessor[1] = pView->m_pDatabaseOBProcessors[1].GetAt(pView->m_pDatabaseOBProcessors[1].Find(pView->GetName())))) ? !pDatabaseOBProcessor[0]->Compare(pDatabaseOBProcessor[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPARAMETER) return((bAll) ? (!pView->m_pDatabaseTMParameters[0].Compare(&pView->m_pDatabaseTMParameters[1]) || !pView->m_pDatabaseTMNumCalTables[0].Compare(&pView->m_pDatabaseTMNumCalTables[1]) || !pView->m_pDatabaseTMTxtCalTables[0].Compare(&pView->m_pDatabaseTMTxtCalTables[1]) || !pView->m_pDatabaseTMNumOolTables[0].Compare(&pView->m_pDatabaseTMNumOolTables[1]) || !pView->m_pDatabaseTMTxtOolTables[0].Compare(&pView->m_pDatabaseTMTxtOolTables[1])) : (((pDatabaseTMParameter[0] = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pView->GetName()))) && (pDatabaseTMParameter[1] = pView->m_pDatabaseTMParameters[1].GetAt(pView->m_pDatabaseTMParameters[1].Find(pView->GetName())))) ? !pDatabaseTMParameter[0]->Compare(pDatabaseTMParameter[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCPARAMETER) return((bAll) ? (!pView->m_pDatabaseTCParameters[0].Compare(&pView->m_pDatabaseTCParameters[1]) || !pView->m_pDatabaseTCNumCalTables[0].Compare(&pView->m_pDatabaseTCNumCalTables[1]) || !pView->m_pDatabaseTCTxtCalTables[0].Compare(&pView->m_pDatabaseTCTxtCalTables[1]) || !pView->m_pDatabaseTCNumOolTables[0].Compare(&pView->m_pDatabaseTCNumOolTables[1]) || !pView->m_pDatabaseTCTxtOolTables[0].Compare(&pView->m_pDatabaseTCTxtOolTables[1])) : (((pDatabaseTCParameter[0] = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pView->GetName()))) && (pDatabaseTCParameter[1] = pView->m_pDatabaseTCParameters[1].GetAt(pView->m_pDatabaseTCParameters[1].Find(pView->GetName())))) ? !pDatabaseTCParameter[0]->Compare(pDatabaseTCParameter[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_AND) return((bAll) ? !pView->m_pANDLayouts[0].Compare(&pView->m_pANDLayouts[1]) : (((pANDLayout[0] = pView->m_pANDLayouts[0].GetAt(pView->m_pANDLayouts[0].Find(pView->GetName()))) && (pANDLayout[1] = pView->m_pANDLayouts[1].GetAt(pView->m_pANDLayouts[1].Find(pView->GetName())))) ? !pANDLayout[0]->Compare(pANDLayout[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_GRD) return((bAll) ? !pView->m_pGRDLayouts[0].Compare(&pView->m_pGRDLayouts[1]) : (((pGRDLayout[0] = pView->m_pGRDLayouts[0].GetAt(pView->m_pGRDLayouts[0].Find(pView->GetName()))) && (pGRDLayout[1] = pView->m_pGRDLayouts[1].GetAt(pView->m_pGRDLayouts[1].Find(pView->GetName())))) ? !pGRDLayout[0]->Compare(pGRDLayout[1]) : FALSE));
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_POD) return((bAll) ? !pView->m_pPODLayouts[0].Compare(&pView->m_pPODLayouts[1]) : (((pPODLayout[0] = pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pView->GetName()))) && (pPODLayout[1] = pView->m_pPODLayouts[1].GetAt(pView->m_pPODLayouts[1].Find(pView->GetName())))) ? !pPODLayout[0]->Compare(pPODLayout[1]) : FALSE));
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTables(CDatabaseTableView *pView, ULONGLONG nComponent)
{
	INT  nIndex[2];
	CString  szError;
	CTableViewObject  *pTable;
	CDatabaseTMPacket  *pDatabaseTMPacket[3];
	CDatabaseTCFunction  *pDatabaseTCFunction[3];
	CDatabaseTCSequence  *pDatabaseTCSequence[3];
	CDatabaseOBProcessor  *pDatabaseOBProcessor[3];
	CDatabaseTMParameter  *pDatabaseTMParameter[3];
	CDatabaseTCParameter  *pDatabaseTCParameter[3];
	CANDLayout  *pANDLayout[3];
	CGRDLayout  *pGRDLayout[3];
	CPODLayout  *pPODLayout[3];

	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPACKET)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseTMPacket[0] = new CDatabaseTMPacket) != (CDatabaseTMPacket *)NULL)
			{
				if ((pDatabaseTMPacket[1] = pView->m_pDatabaseTMPackets[0].GetAt((nIndex[0] = pView->m_pDatabaseTMPackets[0].Find(pView->GetName())))) && pDatabaseTMPacket[0]->Copy(pDatabaseTMPacket[1]))
				{
					if (Delete(pDatabaseTMPacket[0]) && DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pDatabaseTMPacket[0]->GetTag()) >= 0)
					{
						if ((pDatabaseTMPacket[2] = pView->m_pDatabaseTMPackets[1].GetAt((nIndex[1] = pView->m_pDatabaseTMPackets[1].Find(pDatabaseTMPacket[0]->GetTag())))))
						{
							pView->m_pDatabaseTMPackets[1].RemoveAt(nIndex[1]);
							delete pDatabaseTMPacket[2];
						}
						pView->UpdateTableForms(pDatabaseTMPacket[0], nIndex[0] + 1, TRUE);
						delete pDatabaseTMPacket[0];
						return TRUE;
					}
					for (szError.Format(STRING(IDS_DATABASE_TABLE_TMPACKET_DELETE_FAILURE), (LPCTSTR)pDatabaseTMPacket[0]->GetTag()); !pDatabaseTMPacket[0]->GetTag().IsEmpty(); )
					{
						ShowMessage(szError);
						break;
					}
					delete pDatabaseTMPacket[0];
					return FALSE;
				}
				delete pDatabaseTMPacket[0];
			}
			for (szError.Format(STRING(IDS_DATABASE_TABLE_TMPACKET_DELETE_FAILURE), (LPCTSTR)pView->GetName()); !pView->GetName().IsEmpty(); )
			{
				ShowMessage(szError);
				break;
			}
			return FALSE;
		}
		return(((pTable = pView->GetActiveTable()) && pTable->GetName() == TranslateComponentToTableName(pView, nComponent)) ? DeleteTableFieldData(pView, pTable->GetName()) : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseTCFunction[0] = new CDatabaseTCFunction) != (CDatabaseTCFunction *)NULL)
			{
				if ((pDatabaseTCFunction[1] = pView->m_pDatabaseTCFunctions[0].GetAt((nIndex[0] = pView->m_pDatabaseTCFunctions[0].Find(pView->GetName())))) && pDatabaseTCFunction[0]->Copy(pDatabaseTCFunction[1]))
				{
					if (Delete(pDatabaseTCFunction[0]) && DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pDatabaseTCFunction[0]->GetName()) >= 0)
					{
						if ((pDatabaseTCFunction[2] = pView->m_pDatabaseTCFunctions[1].GetAt((nIndex[1] = pView->m_pDatabaseTCFunctions[1].Find(pDatabaseTCFunction[0]->GetName())))))
						{
							pView->m_pDatabaseTCFunctions[1].RemoveAt(nIndex[1]);
							delete pDatabaseTCFunction[2];
						}
						pView->UpdateTableForms(pDatabaseTCFunction[0], nIndex[0] + 1, TRUE);
						delete pDatabaseTCFunction[0];
						return TRUE;
					}
					for (szError.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTION_DELETE_FAILURE), (LPCTSTR)pDatabaseTCFunction[0]->GetName()); !pDatabaseTCFunction[0]->GetName().IsEmpty(); )
					{
						ShowMessage(szError);
						break;
					}
					delete pDatabaseTCFunction[0];
					return FALSE;
				}
				delete pDatabaseTCFunction[0];
			}
			for (szError.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTION_DELETE_FAILURE), (LPCTSTR)pView->GetName()); !pView->GetName().IsEmpty(); )
			{
				ShowMessage(szError);
				break;
			}
			return FALSE;
		}
		return(((pTable = pView->GetActiveTable()) && pTable->GetName() == TranslateComponentToTableName(pView, nComponent)) ? DeleteTableFieldData(pView, pTable->GetName()) : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseTCSequence[0] = new CDatabaseTCSequence) != (CDatabaseTCSequence *)NULL)
			{
				if ((pDatabaseTCSequence[1] = pView->m_pDatabaseTCSequences[0].GetAt((nIndex[0] = pView->m_pDatabaseTCSequences[0].Find(pView->GetName())))) && pDatabaseTCSequence[0]->Copy(pDatabaseTCSequence[1]))
				{
					if (Delete(pDatabaseTCSequence[0]) && DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pDatabaseTCSequence[0]->GetName()) >= 0)
					{
						if ((pDatabaseTCSequence[2] = pView->m_pDatabaseTCSequences[1].GetAt((nIndex[1] = pView->m_pDatabaseTCSequences[1].Find(pDatabaseTCSequence[0]->GetName())))))
						{
							pView->m_pDatabaseTCSequences[1].RemoveAt(nIndex[1]);
							delete pDatabaseTCSequence[2];
						}
						pView->UpdateTableForms(pDatabaseTCSequence[0], nIndex[0] + 1, TRUE);
						delete pDatabaseTCSequence[0];
						return TRUE;
					}
					for (szError.Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCE_DELETE_FAILURE), (LPCTSTR)pDatabaseTCSequence[0]->GetName()); !pDatabaseTCSequence[0]->GetName().IsEmpty(); )
					{
						ShowMessage(szError);
						break;
					}
					delete pDatabaseTCSequence[0];
					return FALSE;
				}
				delete pDatabaseTCSequence[0];
			}
			for (szError.Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCE_DELETE_FAILURE), (LPCTSTR)pView->GetName()); !pView->GetName().IsEmpty(); )
			{
				ShowMessage(szError);
				break;
			}
			return FALSE;
		}
		return(((pTable = pView->GetActiveTable()) && pTable->GetName() == TranslateComponentToTableName(pView, nComponent)) ? DeleteTableFieldData(pView, pTable->GetName()) : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseOBProcessor[0] = new CDatabaseOBProcessor) != (CDatabaseOBProcessor *)NULL)
			{
				if ((pDatabaseOBProcessor[1] = pView->m_pDatabaseOBProcessors[0].GetAt((nIndex[0] = pView->m_pDatabaseOBProcessors[0].Find(pView->GetName())))) && pDatabaseOBProcessor[0]->Copy(pDatabaseOBProcessor[1]))
				{
					if (Delete(pDatabaseOBProcessor[0]) && DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pDatabaseOBProcessor[0]->GetName()) >= 0)
					{
						if ((pDatabaseOBProcessor[2] = pView->m_pDatabaseOBProcessors[1].GetAt((nIndex[1] = pView->m_pDatabaseOBProcessors[1].Find(pDatabaseOBProcessor[0]->GetName())))))
						{
							pView->m_pDatabaseOBProcessors[1].RemoveAt(nIndex[1]);
							delete pDatabaseOBProcessor[2];
						}
						pView->UpdateTableForms(pDatabaseOBProcessor[0], nIndex[0] + 1, TRUE);
						delete pDatabaseOBProcessor[0];
						return TRUE;
					}
					for (szError.Format(STRING(IDS_DATABASE_TABLE_OBPROCESSOR_DELETE_FAILURE), (LPCTSTR)pDatabaseOBProcessor[0]->GetName()); !pDatabaseOBProcessor[0]->GetName().IsEmpty(); )
					{
						ShowMessage(szError);
						break;
					}
					delete pDatabaseOBProcessor[0];
					return FALSE;
				}
				delete pDatabaseOBProcessor[0];
			}
			for (szError.Format(STRING(IDS_DATABASE_TABLE_OBPROCESSOR_DELETE_FAILURE), (LPCTSTR)pView->GetName()); !pView->GetName().IsEmpty(); )
			{
				ShowMessage(szError);
				break;
			}
			return FALSE;
		}
		return(((pTable = pView->GetActiveTable()) && pTable->GetName() == TranslateComponentToTableName(pView, nComponent)) ? DeleteTableFieldData(pView, pTable->GetName()) : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseTMParameter[0] = new CDatabaseTMParameter) != (CDatabaseTMParameter *)NULL)
			{
				if ((pDatabaseTMParameter[1] = pView->m_pDatabaseTMParameters[0].GetAt((nIndex[0] = pView->m_pDatabaseTMParameters[0].Find(pView->GetName())))) && pDatabaseTMParameter[0]->Copy(pDatabaseTMParameter[1]))
				{
					if (Delete(pDatabaseTMParameter[0]) && DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pDatabaseTMParameter[0]->GetTag()) >= 0)
					{
						if ((pDatabaseTMParameter[2] = pView->m_pDatabaseTMParameters[1].GetAt((nIndex[1] = pView->m_pDatabaseTMParameters[1].Find(pDatabaseTMParameter[0]->GetTag())))))
						{
							pView->m_pDatabaseTMParameters[1].RemoveAt(nIndex[1]);
							delete pDatabaseTMParameter[2];
						}
						pView->UpdateTableForms(pDatabaseTMParameter[0], nIndex[0] + 1, TRUE);
						delete pDatabaseTMParameter[0];
						return TRUE;
					}
					for (szError.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETER_DELETE_FAILURE), (LPCTSTR)pDatabaseTMParameter[0]->GetTag()); !pDatabaseTMParameter[0]->GetTag().IsEmpty(); )
					{
						ShowMessage(szError);
						break;
					}
					delete pDatabaseTMParameter[0];
					return FALSE;
				}
				delete pDatabaseTMParameter[0];
			}
			for (szError.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETER_DELETE_FAILURE), (LPCTSTR)pView->GetName()); !pView->GetName().IsEmpty(); )
			{
				ShowMessage(szError);
				break;
			}
			return FALSE;
		}
		return(((pTable = pView->GetActiveTable()) && pTable->GetName() == TranslateComponentToTableName(pView, nComponent)) ? DeleteTableFieldData(pView, pTable->GetName()) : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pDatabaseTCParameter[0] = new CDatabaseTCParameter) != (CDatabaseTCParameter *)NULL)
			{
				if ((pDatabaseTCParameter[1] = pView->m_pDatabaseTCParameters[0].GetAt((nIndex[0] = pView->m_pDatabaseTCParameters[0].Find(pView->GetName())))) && pDatabaseTCParameter[0]->Copy(pDatabaseTCParameter[1]))
				{
					if (Delete(pDatabaseTCParameter[0]) && DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pDatabaseTCParameter[0]->GetTag()) >= 0)
					{
						if ((pDatabaseTCParameter[2] = pView->m_pDatabaseTCParameters[1].GetAt((nIndex[1] = pView->m_pDatabaseTCParameters[1].Find(pDatabaseTCParameter[0]->GetTag())))))
						{
							pView->m_pDatabaseTCParameters[1].RemoveAt(nIndex[1]);
							delete pDatabaseTCParameter[2];
						}
						pView->UpdateTableForms(pDatabaseTCParameter[0], nIndex[0] + 1, TRUE);
						delete pDatabaseTCParameter[0];
						return TRUE;
					}
					for (szError.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETER_DELETE_FAILURE), (LPCTSTR)pDatabaseTCParameter[0]->GetTag()); !pDatabaseTCParameter[0]->GetTag().IsEmpty(); )
					{
						ShowMessage(szError);
						break;
					}
					delete pDatabaseTCParameter[0];
					return FALSE;
				}
				delete pDatabaseTCParameter[0];
			}
			for (szError.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETER_DELETE_FAILURE), (LPCTSTR)pView->GetName()); !pView->GetName().IsEmpty(); )
			{
				ShowMessage(szError);
				break;
			}
			return FALSE;
		}
		return(((pTable = pView->GetActiveTable()) && pTable->GetName() == TranslateComponentToTableName(pView, nComponent)) ? DeleteTableFieldData(pView, pTable->GetName()) : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_AND)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pANDLayout[0] = new CANDLayout) != (CANDLayout *)NULL)
			{
				if ((pANDLayout[1] = pView->m_pANDLayouts[0].GetAt((nIndex[0] = pView->m_pANDLayouts[0].Find(pView->GetName())))) && pANDLayout[0]->Copy(pANDLayout[1]))
				{
					if (Delete(pANDLayout[0]) && DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pANDLayout[0]->GetName()) >= 0)
					{
						if ((pANDLayout[2] = pView->m_pANDLayouts[1].GetAt((nIndex[1] = pView->m_pANDLayouts[1].Find(pANDLayout[0]->GetName())))))
						{
							pView->m_pANDLayouts[1].RemoveAt(nIndex[1]);
							delete pANDLayout[2];
						}
						pView->UpdateTableForms(pANDLayout[0], nIndex[0] + 1, TRUE);
						delete pANDLayout[0];
						return TRUE;
					}
					for (szError.Format(STRING(IDS_DATABASE_TABLE_AND_DELETE_FAILURE), (LPCTSTR)pANDLayout[0]->GetName()); !pANDLayout[0]->GetName().IsEmpty(); )
					{
						ShowMessage(szError);
						break;
					}
					delete pANDLayout[0];
					return FALSE;
				}
				delete pANDLayout[0];
			}
			for (szError.Format(STRING(IDS_DATABASE_TABLE_AND_DELETE_FAILURE), (LPCTSTR)pView->GetName()); !pView->GetName().IsEmpty(); )
			{
				ShowMessage(szError);
				break;
			}
			return FALSE;
		}
		return(((pTable = pView->GetActiveTable()) && pTable->GetName() == TranslateComponentToTableName(pView, nComponent)) ? DeleteTableFieldData(pView, pTable->GetName()) : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_GRD)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pGRDLayout[0] = new CGRDLayout) != (CGRDLayout *)NULL)
			{
				if ((pGRDLayout[1] = pView->m_pGRDLayouts[0].GetAt((nIndex[0] = pView->m_pGRDLayouts[0].Find(pView->GetName())))) && pGRDLayout[0]->Copy(pGRDLayout[1]))
				{
					if (Delete(pGRDLayout[0]) && DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pGRDLayout[0]->GetName()) >= 0)
					{
						if ((pGRDLayout[2] = pView->m_pGRDLayouts[1].GetAt((nIndex[1] = pView->m_pGRDLayouts[1].Find(pGRDLayout[0]->GetName())))))
						{
							pView->m_pGRDLayouts[1].RemoveAt(nIndex[1]);
							delete pGRDLayout[2];
						}
						pView->UpdateTableForms(pGRDLayout[0], nIndex[0] + 1, TRUE);
						delete pGRDLayout[0];
						return TRUE;
					}
					for (szError.Format(STRING(IDS_DATABASE_TABLE_GRD_DELETE_FAILURE), (LPCTSTR)pGRDLayout[0]->GetName()); !pGRDLayout[0]->GetName().IsEmpty(); )
					{
						ShowMessage(szError);
						break;
					}
					delete pGRDLayout[0];
					return FALSE;
				}
				delete pGRDLayout[0];
			}
			for (szError.Format(STRING(IDS_DATABASE_TABLE_GRD_DELETE_FAILURE), (LPCTSTR)pView->GetName()); !pView->GetName().IsEmpty(); )
			{
				ShowMessage(szError);
				break;
			}
			return FALSE;
		}
		return(((pTable = pView->GetActiveTable()) && pTable->GetName() == TranslateComponentToTableName(pView, nComponent)) ? DeleteTableFieldData(pView, pTable->GetName()) : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_POD)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE)
		{
			if ((pPODLayout[0] = new CPODLayout) != (CPODLayout *)NULL)
			{
				if ((pPODLayout[1] = pView->m_pPODLayouts[0].GetAt((nIndex[0] = pView->m_pPODLayouts[0].Find(pView->GetName())))) && pPODLayout[0]->Copy(pPODLayout[1]))
				{
					if (Delete(pPODLayout[0]) && DeleteTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), pPODLayout[0]->GetName()) >= 0)
					{
						if ((pPODLayout[2] = pView->m_pPODLayouts[1].GetAt((nIndex[1] = pView->m_pPODLayouts[1].Find(pPODLayout[0]->GetName())))))
						{
							pView->m_pPODLayouts[1].RemoveAt(nIndex[1]);
							delete pPODLayout[2];
						}
						pView->UpdateTableForms(pPODLayout[0], nIndex[0] + 1, TRUE);
						delete pPODLayout[0];
						return TRUE;
					}
					for (szError.Format(STRING(IDS_DATABASE_TABLE_POD_DELETE_FAILURE), (LPCTSTR)pPODLayout[0]->GetName()); !pPODLayout[0]->GetName().IsEmpty(); )
					{
						ShowMessage(szError);
						break;
					}
					delete pPODLayout[0];
					return FALSE;
				}
				delete pPODLayout[0];
			}
			for (szError.Format(STRING(IDS_DATABASE_TABLE_POD_DELETE_FAILURE), (LPCTSTR)pView->GetName()); !pView->GetName().IsEmpty(); )
			{
				ShowMessage(szError);
				break;
			}
			return FALSE;
		}
		return(((pTable = pView->GetActiveTable()) && pTable->GetName() == TranslateComponentToTableName(pView, nComponent)) ? DeleteTableFieldData(pView, pTable->GetName()) : FALSE);
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::CanDeleteTables(CONST CDatabaseTableView *pView, ULONGLONG nComponent) CONST
{
	return((DATABASECOMPONENTFROMCODE(nComponent) != DATABASE_COMPONENT_NONE) ? CheckTableFieldData(pView, TranslateComponentToTableName(pView, nComponent), FALSE, TRUE) : FALSE);
}

BOOL CALTELDatabaseEngine::DestroyTables(CDatabaseTableView *pView, ULONGLONG nComponent)
{
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPACKET)
	{
		pView->m_pDatabaseTMPackets[0].RemoveAll();
		pView->m_pDatabaseTMPackets[1].RemoveAll();
		pView->m_pDatabaseTMPacketHeaders[0].RemoveAll();
		pView->m_pDatabaseTMPacketHeaders[1].RemoveAll();
		pView->m_pDatabaseTMPacketStreams[0].RemoveAll();
		pView->m_pDatabaseTMPacketStreams[1].RemoveAll();
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCFUNCTION)
	{
		pView->m_pDatabaseTCFunctions[0].RemoveAll();
		pView->m_pDatabaseTCFunctions[1].RemoveAll();
		pView->m_pDatabaseTCPackets[0].RemoveAll();
		pView->m_pDatabaseTCPackets[1].RemoveAll();
		pView->m_pDatabaseTCPreExeGroups[0].RemoveAll();
		pView->m_pDatabaseTCPreExeGroups[1].RemoveAll();
		pView->m_pDatabaseTCExeVerGroups[0].RemoveAll();
		pView->m_pDatabaseTCExeVerGroups[1].RemoveAll();
		pView->m_pDatabaseTCParameterSets[0].RemoveAll();
		pView->m_pDatabaseTCParameterSets[1].RemoveAll();
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		pView->m_pDatabaseTCSequences[0].RemoveAll();
		pView->m_pDatabaseTCSequences[1].RemoveAll();
		pView->m_pDatabaseTCFunctionBlocks[0].RemoveAll();
		pView->m_pDatabaseTCFunctionBlocks[1].RemoveAll();
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		pView->m_pDatabaseOBProcessors[0].RemoveAll();
		pView->m_pDatabaseOBProcessors[1].RemoveAll();
		pView->m_pDatabaseOBProcessorMemoryImages[0].RemoveAll();
		pView->m_pDatabaseOBProcessorMemoryImages[1].RemoveAll();
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPARAMETER)
	{
		pView->m_pDatabaseTMParameters[0].RemoveAll();
		pView->m_pDatabaseTMParameters[1].RemoveAll();
		pView->m_pDatabaseTMNumCalTables[0].RemoveAll();
		pView->m_pDatabaseTMNumCalTables[1].RemoveAll();
		pView->m_pDatabaseTMTxtCalTables[0].RemoveAll();
		pView->m_pDatabaseTMTxtCalTables[1].RemoveAll();
		pView->m_pDatabaseTMNumOolTables[0].RemoveAll();
		pView->m_pDatabaseTMNumOolTables[1].RemoveAll();
		pView->m_pDatabaseTMTxtOolTables[0].RemoveAll();
		pView->m_pDatabaseTMTxtOolTables[1].RemoveAll();
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCPARAMETER)
	{
		pView->m_pDatabaseTCParameters[0].RemoveAll();
		pView->m_pDatabaseTCParameters[1].RemoveAll();
		pView->m_pDatabaseTCNumCalTables[0].RemoveAll();
		pView->m_pDatabaseTCNumCalTables[1].RemoveAll();
		pView->m_pDatabaseTCTxtCalTables[0].RemoveAll();
		pView->m_pDatabaseTCTxtCalTables[1].RemoveAll();
		pView->m_pDatabaseTCNumOolTables[0].RemoveAll();
		pView->m_pDatabaseTCNumOolTables[1].RemoveAll();
		pView->m_pDatabaseTCTxtOolTables[0].RemoveAll();
		pView->m_pDatabaseTCTxtOolTables[1].RemoveAll();
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_AND)
	{
		pView->m_pANDLayouts[0].RemoveAll();
		pView->m_pANDLayouts[1].RemoveAll();
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_GRD)
	{
		pView->m_pGRDLayouts[0].RemoveAll();
		pView->m_pGRDLayouts[1].RemoveAll();
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_POD)
	{
		pView->m_pPODLayouts[0].RemoveAll();
		pView->m_pPODLayouts[1].RemoveAll();
		return TRUE;
	}
	return FALSE;
}

INT CALTELDatabaseEngine::EnumTables(CONST CDatabaseTableView *pView, CStringArray &szTables, CUIntArray &nTypes, BOOL bMenu, BOOL bResetable) CONST
{
	for (szTables.RemoveAll(), nTypes.RemoveAll(); DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET; )
	{
		for (szTables.Add(STRING(IDS_DATABASE_TABLE_PMF)); !bResetable; )
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_DFH));
			szTables.Add(STRING(IDS_DATABASE_TABLE_STR));
			break;
		}
		for (szTables.Add(STRING(IDS_DATABASE_TABLE_PLF)), nTypes.Add(TAS_TABLE_NORMAL); !bResetable; )
		{
			nTypes.Add(TAS_TABLE_LIST);
			nTypes.Add(TAS_TABLE_LIST);
			break;
		}
		for (nTypes.Add(TAS_TABLE_LIST); bMenu; )
		{
			for (szTables.RemoveAll(), nTypes.RemoveAll(); !bResetable; )
			{
				szTables.Add(STRING(IDS_DATABASE_TABLE_DFH));
				szTables.Add(STRING(IDS_DATABASE_TABLE_STR));
				nTypes.Add(TAS_TABLE_LIST);
				nTypes.Add(TAS_TABLE_LIST);
				break;
			}
			szTables.Add(STRING(IDS_DATABASE_TABLE_PLF));
			nTypes.Add(TAS_TABLE_LIST);
			break;
		}
		break;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		for (szTables.Add(STRING(IDS_DATABASE_TABLE_CCF)); bMenu; )
		{
			szTables.RemoveAll();
			break;
		}
		szTables.Add(STRING(IDS_DATABASE_TABLE_TCP));
		szTables.Add(STRING(IDS_DATABASE_TABLE_PCDF));
		szTables.Add(STRING(IDS_DATABASE_TABLE_PVP));
		szTables.Add(STRING(IDS_DATABASE_TABLE_PEV));
		szTables.Add(STRING(IDS_DATABASE_TABLE_CVP));
		szTables.Add(STRING(IDS_DATABASE_TABLE_CEV));
		szTables.Add(STRING(IDS_DATABASE_TABLE_CDF));
		szTables.Add(STRING(IDS_DATABASE_TABLE_PCPS));
		szTables.Add(STRING(IDS_DATABASE_TABLE_CPS));
		szTables.Add(STRING(IDS_DATABASE_TABLE_CPSP));
		for (nTypes.Add(TAS_TABLE_NORMAL); bMenu; )
		{
			nTypes.RemoveAll();
			break;
		}
		nTypes.Add(TAS_TABLE_NORMAL);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_NORMAL);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_NORMAL);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_NORMAL);
		nTypes.Add(TAS_TABLE_LIST);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		for (szTables.Add(STRING(IDS_DATABASE_TABLE_CSF)); bMenu; )
		{
			szTables.RemoveAll();
			break;
		}
		szTables.Add(STRING(IDS_DATABASE_TABLE_CSP));
		szTables.Add(STRING(IDS_DATABASE_TABLE_CSS));
		szTables.Add(STRING(IDS_DATABASE_TABLE_SDF));
		szTables.Add(STRING(IDS_DATABASE_TABLE_BCF));
		szTables.Add(STRING(IDS_DATABASE_TABLE_BCCF));
		for (nTypes.Add(TAS_TABLE_NORMAL); bMenu; )
		{
			nTypes.RemoveAll();
			break;
		}
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_NORMAL);
		nTypes.Add(TAS_TABLE_LIST);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		for (szTables.Add(STRING(IDS_DATABASE_TABLE_GEN)); bMenu; )
		{
			szTables.RemoveAll();
			break;
		}
		szTables.Add(STRING(IDS_DATABASE_TABLE_PIMG));
		szTables.Add(STRING(IDS_DATABASE_TABLE_IMGP));
		szTables.Add(STRING(IDS_DATABASE_TABLE_MAD));
		szTables.Add(STRING(IDS_DATABASE_TABLE_MEM));
		szTables.Add(STRING(IDS_DATABASE_TABLE_IMG));
		szTables.Add(STRING(IDS_DATABASE_TABLE_CRC));
		szTables.Add(STRING(IDS_DATABASE_TABLE_CAT));
		for (nTypes.Add(TAS_TABLE_NORMAL); bMenu; )
		{
			nTypes.RemoveAll();
			break;
		}
		nTypes.Add(TAS_TABLE_NORMAL);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_LIST);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		for (szTables.Add(STRING(IDS_DATABASE_TABLE_PCF)); bMenu; )
		{
			szTables.RemoveAll();
			break;
		}
		szTables.Add(STRING(IDS_DATABASE_TABLE_CAL));
		szTables.Add(STRING(IDS_DATABASE_TABLE_PCAL));
		szTables.Add(STRING(IDS_DATABASE_TABLE_CALP));
		szTables.Add(STRING(IDS_DATABASE_TABLE_TXF));
		szTables.Add(STRING(IDS_DATABASE_TABLE_PTXF));
		szTables.Add(STRING(IDS_DATABASE_TABLE_TXFP));
		szTables.Add(STRING(IDS_DATABASE_TABLE_OCF));
		szTables.Add(STRING(IDS_DATABASE_TABLE_POCF));
		szTables.Add(STRING(IDS_DATABASE_TABLE_OCFP));
		szTables.Add(STRING(IDS_DATABASE_TABLE_FXF));
		szTables.Add(STRING(IDS_DATABASE_TABLE_PFXF));
		szTables.Add(STRING(IDS_DATABASE_TABLE_FXFP));
		for (nTypes.Add(TAS_TABLE_NORMAL); bMenu; )
		{
			nTypes.RemoveAll();
			break;
		}
		nTypes.Add(TAS_TABLE_NORMAL);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_NORMAL);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_NORMAL);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_NORMAL);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_LIST);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		for (szTables.Add(STRING(IDS_DATABASE_TABLE_CPC)); bMenu; )
		{
			szTables.RemoveAll();
			break;
		}
		szTables.Add(STRING(IDS_DATABASE_TABLE_CAL));
		szTables.Add(STRING(IDS_DATABASE_TABLE_CALP));
		szTables.Add(STRING(IDS_DATABASE_TABLE_TXF));
		szTables.Add(STRING(IDS_DATABASE_TABLE_TXFP));
		szTables.Add(STRING(IDS_DATABASE_TABLE_OCF));
		szTables.Add(STRING(IDS_DATABASE_TABLE_OCFP));
		szTables.Add(STRING(IDS_DATABASE_TABLE_FXF));
		szTables.Add(STRING(IDS_DATABASE_TABLE_FXFP));
		for (nTypes.Add(TAS_TABLE_NORMAL); bMenu; )
		{
			nTypes.RemoveAll();
			break;
		}
		nTypes.Add(TAS_TABLE_NORMAL);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_NORMAL);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_NORMAL);
		nTypes.Add(TAS_TABLE_LIST);
		nTypes.Add(TAS_TABLE_NORMAL);
		nTypes.Add(TAS_TABLE_LIST);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		for (szTables.Add(STRING(IDS_DATABASE_TABLE_DPFP)), nTypes.Add(TAS_TABLE_LIST); !bMenu; )
		{
			szTables.InsertAt(0, STRING(IDS_DATABASE_TABLE_DPF));
			nTypes.InsertAt(0, TAS_TABLE_NORMAL, 1);
			break;
		}
		if (!bResetable)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_DPF_LAYOUT));
			nTypes.Add(TAS_TABLE_LIST);
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		for (szTables.Add(STRING(IDS_DATABASE_TABLE_GPFP)), nTypes.Add(TAS_TABLE_LIST); !bMenu; )
		{
			szTables.InsertAt(0, STRING(IDS_DATABASE_TABLE_GPF));
			nTypes.InsertAt(0, TAS_TABLE_NORMAL, 1);
			break;
		}
		if (!bResetable)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_GPF_LAYOUT));
			nTypes.Add(TAS_TABLE_LIST);
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		for (szTables.Add(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)), szTables.Add(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)), szTables.Add(STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)), nTypes.Add(TAS_TABLE_LIST), nTypes.Add(TAS_TABLE_LIST), nTypes.Add(TAS_TABLE_LIST); !bMenu; )
		{
			szTables.InsertAt(0, STRING(IDS_DATABASE_TABLE_PPF));
			nTypes.InsertAt(0, TAS_TABLE_NORMAL, 1);
			break;
		}
		if (!bResetable)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_PPF_LAYOUT));
			nTypes.Add(TAS_TABLE_LIST);
		}
	}
	return((INT)szTables.GetSize());
}

BOOL CALTELDatabaseEngine::GetTableTitle(CONST CDatabaseTableView *pView, LPCTSTR pszTable, CString &szTitle) CONST
{
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_PMF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_PLF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_DFH_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_STR_TITLE);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CCF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_TCP_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CDF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_PCDF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_PVP_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CVP_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_PEV_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CEV_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_PCPS_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CPS_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CPSP_TITLE);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CSF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CSS_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CSP_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_SDF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_BCF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_BCCF_TITLE);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_GEN_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_MAD_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_MEM_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_IMG_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_IMGP_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)))
		{
			szTitle.Empty();
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CRC_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CAT_TITLE);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_PCF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CAL_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_PCAL_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CALP_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_TXF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_PTXF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_TXFP_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_OCF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_POCF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_OCFP_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_FXF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_PFXF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_FXFP_TITLE);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CPC_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CAL_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_CALP_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_TXF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_TXFP_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_OCF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_OCFP_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_FXF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_FXFP_TITLE);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_DPF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_DPFP_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)))
		{
			szTitle.Empty();
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_GPF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_GPFP_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)))
		{
			szTitle.Empty();
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)))
		{
			szTitle = STRING(IDS_DATABASE_TABLE_PPF_TITLE);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)))
		{
			szTitle.Empty();
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)))
		{
			szTitle.Empty();
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)))
		{
			szTitle.Empty();
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)))
		{
			szTitle.Empty();
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::GetTableLayout(CONST CDatabaseTableView *pView, LPCTSTR pszTable, CUIntArray &nWidths) CONST
{
	return GetTableLayout(pView, pszTable, pView->GetName(), nWidths);
}
BOOL CALTELDatabaseEngine::GetTableLayout(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszItem, CUIntArray &nWidths) CONST
{
	INT  nPos;
	INT  nCol;
	INT  nCols;
	INT  nLow;
	INT  nHigh;
	INT  nOffset[2];
	INT  nLength[2];
	UINT  uLow;
	UINT  uHigh;
	UINT  nRange[2][2];
	CString  szTitle;
	CString  szColumns;
	CUIntArray  nValues;
	CStringArray  szValues;
	CStringTools  cStringTools;
	CLongUIntArray  lValues;
	CTableViewObject  *pTable;

	for (nWidths.RemoveAll(); DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET; )
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PMF_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PMF_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PMF_TITLEITEM_VALUE))
				{
					nWidths.Add(max(2 * GetTMPacketTagLength() + GetTMPacketDescriptionLength(), 2 * GetTMParameterTagLength() + GetTMParameterDescriptionLength()));
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PLF_NAME))
				{
					nWidths.Add(3 * GetTMPacketParameterTagLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PLF_OFFBY))
				{
					if (GetTMPacketParameterBytePositionRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PLF_OFFBI))
				{
					if (GetTMPacketParameterBitPositionRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PLF_NBOCC))
				{
					if (GetTMPacketParameterOccurrenceCountRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PLF_LGOCC))
				{
					if (GetTMPacketParameterOccurrenceIntervalRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PLF_VALID))
				{
					nWidths.Add(3 * GetTMPacketParameterValidityLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DFH_NAME))
				{
					nWidths.Add(2 * GetTMPacketHeaderNameLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_PRESENT))
				{
					if (EnumTMPacketHeaderTMTypeFlags(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_OFFSET))
				{
					if (GetTMPacketHeaderTMTypePositionRange(nOffset[0], nOffset[1], nLength[0], nLength[1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nOffset[0]).GetLength(), cStringTools.ConvertIntToString(nOffset[1]).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_LENGTH))
				{
					if (GetTMPacketHeaderTMTypePositionRange(nOffset[0], nOffset[1], nLength[0], nLength[1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLength[0]).GetLength(), cStringTools.ConvertIntToString(nLength[1]).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DFH_TM_ID_PRESENT))
				{
					if (EnumTMPacketHeaderTMIDFlags(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_OFFSET))
				{
					if (GetTMPacketHeaderTMIDPositionRange(nOffset[0], nOffset[1], nLength[0], nLength[1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nOffset[0]).GetLength(), cStringTools.ConvertIntToString(nOffset[1]).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_LENGTH))
				{
					if (GetTMPacketHeaderTMIDPositionRange(nOffset[0], nOffset[1], nLength[0], nLength[1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLength[0]).GetLength(), cStringTools.ConvertIntToString(nLength[1]).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DFH_3DISC_PRESENT))
				{
					if (EnumTMPacketHeader3DiscFlags(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_OFFSET))
				{
					if (GetTMPacketHeader3DiscPositionRange(nOffset[0], nOffset[1], nLength[0], nLength[1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nOffset[0]).GetLength(), cStringTools.ConvertIntToString(nOffset[1]).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_LENGTH))
				{
					if (GetTMPacketHeader3DiscPositionRange(nOffset[0], nOffset[1], nLength[0], nLength[1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLength[0]).GetLength(), cStringTools.ConvertIntToString(nLength[1]).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DFH_TIME_PRESENT))
				{
					if (EnumTMPacketHeaderTimestampFlags(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_OFFSET))
				{
					if (GetTMPacketHeaderTimestampPositionRange(nOffset[0], nOffset[1], nLength[0], nLength[1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nOffset[0]).GetLength(), cStringTools.ConvertIntToString(nOffset[1]).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_LENGTH))
				{
					if (GetTMPacketHeaderTimestampPositionRange(nOffset[0], nOffset[1], nLength[0], nLength[1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLength[0]).GetLength(), cStringTools.ConvertIntToString(nLength[1]).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_STR_STID))
				{
					nWidths.Add(3 * GetTMPacketStreamNameLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_STR_APID))
				{
					if (EnumTMPacketStreamAPIDs(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_STR_TMID))
				{
					if (GetTMPacketStreamTMIDRange(nRange[0][0], nRange[0][1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertUIntToString(nRange[0][0]).GetLength(), cStringTools.ConvertUIntToString(nRange[0][1]).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_STR_PERIOD))
				{
					if (GetTMPacketStreamPeriodRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_STR_TIMEOUT))
				{
					if (GetTMPacketStreamTimeoutRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_STR_VALID))
				{
					nWidths.Add(3 * GetTMPacketStreamValidityParameterLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		break;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CCF_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CCF_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CCF_TITLEITEM_VALUE))
				{
					nWidths.Add(2 * GetTCFunctionNameLength() + GetTCFunctionDescriptionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_TCP_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_TCP_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_TCP_TITLEITEM_VALUE))
				{
					nWidths.Add(2 * GetTCPacketTagLength() + GetTCPacketDescriptionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CDF_PNAME))
				{
					nWidths.Add(3 * GetTCFunctionElementNameLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CDF_DESCR))
				{
					nWidths.Add(3 * GetTCFunctionElementDescriptionLength() / 2);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CDF_ELTYPE))
				{
					if (EnumTCFunctionElementTypes(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CDF_ELLEN))
				{
					if (GetTCFunctionElementValueBitWidthRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CDF_BITOFF))
				{
					if (GetTCFunctionElementValueBitOffsetRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CDF_VTYPE))
				{
					if (EnumTCFunctionElementValueInterpretations(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CDF_RADIX))
				{
					if (EnumTCFunctionElementValueRadixes(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CDF_VALUE))
				{
					nWidths.Add(2 * GetTCFunctionElementConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PCDF_PNAME))
				{
					nWidths.Add(3 * GetTCPacketParameterTagLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PCDF_DESCR))
				{
					nWidths.Add(3 * GetTCPacketParameterDescriptionLength() / 2);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE))
				{
					if (EnumTCPacketParameterTypes(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PCDF_ELLEN))
				{
					if (GetTCPacketParameterValueBitWidthRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PCDF_BITOFF))
				{
					if (GetTCPacketParameterValueBitOffsetRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PCDF_VTYPE))
				{
					if (EnumTCPacketParameterValueInterpretations(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PCDF_RADIX))
				{
					if (EnumTCPacketParameterValueRadixes(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PCDF_CODING))
				{
					if (EnumTCPacketParameterValueCodings(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PCDF_VALUE))
				{
					nWidths.Add(2 * GetTCPacketParameterConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PVP_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PVP_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PVP_TITLEITEM_VALUE))
				{
					nWidths.Add(GetTCPreExeGroupDescriptionLength() / 4);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CVP_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CVP_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CVP_TITLEITEM_VALUE))
				{
					nWidths.Add(GetTCExeVerGroupDescriptionLength() / 4);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PEV_PNAME))
				{
					nWidths.Add(3 * GetTCPreExeGroupParameterTagLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PEV_PVALUE))
				{
					nWidths.Add(2 * GetTCPreExeGroupParameterConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PEV_INTER))
				{
					if (EnumTCPreExeGroupParameterInterpretations(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CEV_PNAME))
				{
					nWidths.Add(3 * GetTCExeVerGroupParameterTagLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CEV_EVTYPE))
				{
					if (EnumTCExeVerGroupParameterTypes(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CEV_PVALUE))
				{
					nWidths.Add(2 * GetTCExeVerGroupParameterConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CEV_INTER))
				{
					if (EnumTCExeVerGroupParameterInterpretations(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CEV_SWND))
				{
					if (GetTCExeVerGroupParameterTimeWindowIntervalRange(uLow, uHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertUIntToString(uLow).GetLength(), cStringTools.ConvertUIntToString(uHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CEV_STAGE))
				{
					if (EnumTCExeVerGroupParameterStages(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CEV_EPCKID))
				{
					nWidths.Add(2 * GetTCExeVerGroupParameterEventIDLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PCPS_NAME))
				{
					nWidths.Add(3 * GetTCParameterSetNameLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CPS_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CPS_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CPS_TITLEITEM_VALUE))
				{
					nWidths.Add(2 * GetTCParameterSetDescriptionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CPSP_PNAME))
				{
					nWidths.Add(3 * GetTCParameterSetItemNameLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CPSP_BITOFF))
				{
					if (GetTCParameterSetItemValueBitOffsetRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CPSP_VTYPE))
				{
					if (EnumTCParameterSetItemValueInterpretations(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CPSP_RADIX))
				{
					if (EnumTCParameterSetItemValueRadixes(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CPSP_PVALUE))
				{
					nWidths.Add(2 * GetTCParameterSetItemConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSF_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSF_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSF_TITLEITEM_VALUE))
				{
					nWidths.Add(2 * GetTCSequenceNameLength() + GetTCSequenceDescriptionLength() / 2);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSS_IDENT))
				{
					nWidths.Add(3 * GetTCSequenceEntryNameLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSS_TYPE))
				{
					if (EnumTCSequenceEntryTypes(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSS_TCTYPE))
				{
					if (EnumTCSequenceEntrySubTypes(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSS_ENTRY))
				{
					if (GetTCSequenceEntryIndexRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSS_1STEP))
				{
					nWidths.Add(3 * GetTCSequenceEntry1StepLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSS_COMMENT))
				{
					nWidths.Add(3 * GetTCSequenceEntryDescriptionLength() / 2);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSS_RELTIME))
				{
					nWidths.Add(3 * GetTCSequenceEntryReleaseDeltaTimeLength() / 2);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSS_EXETIME))
				{
					nWidths.Add(3 * GetTCSequenceEntryExecutionDeltaTimeLength() / 2);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSS_ABSTIME))
				{
					nWidths.Add(2 * GetTCSequenceEntryExecutionTimeLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSS_GROUP))
				{
					if (EnumTCSequenceEntryGroupFlags(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL))
				{
					if (EnumTCSequenceEntryBlockFlags(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSS_BLOCK))
				{
					nWidths.Add(3 * GetTCSequenceEntryBlockMembershipLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSS_NPARS))
				{
					if (GetTCSequenceEntryParameterCountRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSP_FPNAME))
				{
					nWidths.Add(3 * GetTCSequenceParameterTagLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSP_FPNUM))
				{
					if (GetTCSequenceParameterPositionRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSP_DESCR))
				{
					nWidths.Add(2 * GetTCSequenceParameterDescriptionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSP_UNIT))
				{
					nWidths.Add(3 * GetTCSequenceParameterUnitLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSP_LENGTH))
				{
					if (GetTCSequenceParameterBitWidthRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSP_VTYPE))
				{
					if (EnumTCSequenceParameterValueTypes(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSP_CATEG))
				{
					if (EnumTCSequenceParameterCategories(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSP_CODING))
				{
					if (EnumTCSequenceParameterCodings(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSP_RADIX))
				{
					if (EnumTCSequenceParameterValueRadixes(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSP_CALREF))
				{
					nWidths.Add(3 * GetTCSequenceParameterCalTableLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSP_TXFREF))
				{
					nWidths.Add(3 * GetTCSequenceParameterCalTableLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSP_OCFREF))
				{
					nWidths.Add(3 * GetTCSequenceParameterOolTableLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSP_FXFREF))
				{
					nWidths.Add(3 * GetTCSequenceParameterOolTableLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CSP_DEFVAL))
				{
					nWidths.Add(2 * GetTCSequenceParameterConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_SDF_PNAME))
				{
					nWidths.Add(3 * GetTCSequenceEntryParameterTagLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_SDF_ENTRY))
				{
					if (GetTCSequenceEntryParameterPositionRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_SDF_BITOFF))
				{
					if (GetTCSequenceEntryParameterBitOffsetRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_SDF_COMMENT))
				{
					nWidths.Add(2 * GetTCSequenceEntryParameterCommentLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_SDF_VALTYPE))
				{
					if (EnumTCSequenceEntryParameterValueTypes(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_SDF_VALRADIX))
				{
					if (EnumTCSequenceEntryParameterValueRadixes(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_SDF_VALUE))
				{
					nWidths.Add(2 * GetTCSequenceEntryParameterConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_SDF_PSET))
				{
					nWidths.Add(3 * GetTCSequenceEntryParameterMemoryAreaNameLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_SDF_PSINST))
				{
					nWidths.Add(3 * GetTCSequenceEntryParameterMemoryAreaVersionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_BCF_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_BCF_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_BCF_TITLEITEM_VALUE))
				{
					nWidths.Add(2 * GetTCSequenceNameLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_BCCF_CONTENT))
				{
					nWidths.Add(3 * GetTCFunctionBlockElementNameLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_BCCF_INTER))
				{
					if (EnumTCFunctionBlockElementInterpretations(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_GEN_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_GEN_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_GEN_TITLEITEM_VALUE))
				{
					nWidths.Add(max(2 * GetOBProcessorNameLength(), max(2 * GetTCFunctionNameLength() + GetTCFunctionDescriptionLength(), 2 * GetTMPacketTagLength() + GetTMPacketDescriptionLength())));
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MAD_NAME))
				{
					nWidths.Add(3 * GetOBProcessorMemoryAreaNameLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MAD_DESCR))
				{
					nWidths.Add(GetOBProcessorMemoryAreaDescriptionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MAD_TYPE))
				{
					if (EnumOBProcessorMemoryAreaTypes(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MAD_PATCHTC))
				{
					nWidths.Add(2 * GetOBProcessorMemoryAreaPatchCommandLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MAD_DUMPTC))
				{
					nWidths.Add(2 * GetOBProcessorMemoryAreaDumpCommandLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MAD_TMPKT))
				{
					nWidths.Add(3 * GetOBProcessorMemoryAreaDumpPacketLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MAD_PATCHABLE))
				{
					if (EnumOBProcessorMemoryAreaPatchFlags(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MAD_DUMPABLE))
				{
					if (EnumOBProcessorMemoryAreaDumpFlags(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MAD_UPDATE))
				{
					if (EnumOBProcessorMemoryAreaUpdateFlags(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MAD_INHIBIT))
				{
					if (EnumOBProcessorMemoryAreaInhibitFlags(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MEM_TMNAME))
				{
					nWidths.Add(3 * GetOBProcessorMemoryAreaBlockTMParameterLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MEM_TCNAME))
				{
					nWidths.Add(3 * GetOBProcessorMemoryAreaBlockTCParameterLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MEM_DESCR))
				{
					nWidths.Add(GetOBProcessorMemoryAreaBlockDescriptionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MEM_PAGE))
				{
					if (GetOBProcessorMemoryAreaBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertUIntToPaddedString(nRange[0][0], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), 16).GetLength(), cStringTools.ConvertUIntToPaddedString(nRange[0][1], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), 16).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MEM_ADDRESS))
				{
					if (GetOBProcessorMemoryAreaBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertUIntToPaddedString(nRange[1][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16).GetLength(), cStringTools.ConvertUIntToPaddedString(nRange[1][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MEM_BITOFF))
				{
					if (GetOBProcessorMemoryAreaBlockBitOffsetRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_MEM_WIDTH))
				{
					if (GetOBProcessorMemoryAreaBlockBitWidthRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_IMG_VERSION))
				{
					nWidths.Add(3 * GetOBProcessorMemoryImageBlockVersionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_IMG_PAGE))
				{
					if (GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertUIntToPaddedString(nRange[0][0], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), 16).GetLength(), cStringTools.ConvertUIntToPaddedString(nRange[0][1], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), 16).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_IMG_ADDRESS))
				{
					if (GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertUIntToPaddedString(nRange[1][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16).GetLength(), cStringTools.ConvertUIntToPaddedString(nRange[1][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_IMG_DATA))
				{
					nWidths.Add(GetOBProcessorMemoryImageBlockDataLength() / 16);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_IMGP_VERSION))
				{
					nWidths.Add(3 * GetOBProcessorMemoryImageBlockVersionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_IMGP_PAGE))
				{
					if (GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertUIntToPaddedString(nRange[0][0], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), 16).GetLength(), cStringTools.ConvertUIntToPaddedString(nRange[0][1], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), 16).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_IMGP_ADDRESS))
				{
					if (GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertUIntToPaddedString(nRange[1][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16).GetLength(), cStringTools.ConvertUIntToPaddedString(nRange[1][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_IMGP_DATA))
				{
					nWidths.Add(GetOBProcessorMemoryImageBlockDataLength() / 16);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)))
		{
			nWidths.Add(-1);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CRC_DEST))
				{
					if (GetOBProcessorMemoryAreaCheckSumDestinationRange(uLow, uHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertUIntToString(uLow, 16).GetLength(), cStringTools.ConvertUIntToString(uHigh, 16).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CRC_LENGTH))
				{
					if (GetOBProcessorMemoryAreaCheckSumLengthRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CRC_PAGE))
				{
					if (GetOBProcessorMemoryAreaCheckSumAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]))
					{
						nWidths.Add(2 * cStringTools.ConvertUIntToPaddedString(nRange[0][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16).GetLength());
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CRC_START))
				{
					if (GetOBProcessorMemoryAreaCheckSumAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertUIntToPaddedString(nRange[1][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16).GetLength(), cStringTools.ConvertUIntToPaddedString(nRange[1][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CRC_END))
				{
					if (GetOBProcessorMemoryAreaCheckSumAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]))
					{
						nWidths.Add(2 * max(cStringTools.ConvertUIntToPaddedString(nRange[1][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16).GetLength(), cStringTools.ConvertUIntToPaddedString(nRange[1][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CRC_SEED))
				{
					if (GetOBProcessorMemoryAreaCheckSumSeedValueRange(uLow, uHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertUIntToString(uLow, 16).GetLength(), cStringTools.ConvertUIntToString(uHigh, 16).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CAT_ID))
				{
					nWidths.Add(3 * GetOBProcessorMemoryAreaCatalogueEntryIDLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CAT_DESCR))
				{
					nWidths.Add(2 * GetOBProcessorMemoryAreaCatalogueEntryDescriptionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CAT_VERSION))
				{
					nWidths.Add(3 * GetOBProcessorMemoryAreaCatalogueEntryVersionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CAT_DATE))
				{
					nWidths.Add(GetOBProcessorMemoryAreaCatalogueEntryDateLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CAT_TIME))
				{
					nWidths.Add(GetOBProcessorMemoryAreaCatalogueEntryTimeLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CAT_LOCATION))
				{
					nWidths.Add(2 * GetOBProcessorMemoryAreaCatalogueEntryLocationLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CAT_COMPLETE))
				{
					if (EnumOBProcessorMemoryAreaCatalogueEntryFlags(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE))
				{
					nWidths.Add(max(2 * GetTMParameterTagLength() + GetTMParameterDescriptionLength(), 3 * GetTMParameterDetailsLength() / 2));
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE))
				{
					nWidths.Add(5 * GetTMNumCalTableDescriptionLength() / 4);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE))
				{
					nWidths.Add(5 * GetTMTxtCalTableDescriptionLength() / 4);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE))
				{
					nWidths.Add(5 * GetTMNumCalTableDescriptionLength() / 4);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE))
				{
					nWidths.Add(5 * GetTMTxtCalTableDescriptionLength() / 4);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CALP_XVAL) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CALP_YVAL))
				{
					nWidths.Add(2 * GetTMParameterConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_TXFP_FROM) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_TXFP_TO))
				{
					nWidths.Add(2 * GetTMParameterConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_TXFP_TEXT))
				{
					nWidths.Add(2 * GetTMTxtCalTablePointTextLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_OCFP_TYPE))
				{
					if (EnumTMNumOolTableLimitTypes(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_OCFP_LVALUE) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_OCFP_HVALUE))
				{
					nWidths.Add(2 * GetTMParameterConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_FXFP_TYPE))
				{
					if (EnumTMTxtOolTableLimitTypes(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_FXFP_FROM) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_FXFP_TO))
				{
					nWidths.Add(3 * GetTMParameterConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PCAL_NAME))
				{
					nWidths.Add(max(5 * GetTMNumCalTableNameLength() / 2, 5 * GetTMNumOolTableNameLength() / 2));
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PCAL_VALID))
				{
					nWidths.Add(2 * GetTMParameterTagLength() + GetTMParameterDescriptionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PTXF_NAME))
				{
					nWidths.Add(max(5 * GetTMTxtCalTableNameLength() / 2, 5 * GetTMTxtOolTableNameLength() / 2));
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PTXF_VALID))
				{
					nWidths.Add(2 * GetTMParameterTagLength() + GetTMParameterDescriptionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_POCF_NAME))
				{
					nWidths.Add(max(5 * GetTMNumOolTableNameLength() / 2, 5 * GetTMNumCalTableNameLength() / 2));
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_POCF_VALID))
				{
					nWidths.Add(2 * GetTMParameterTagLength() + GetTMParameterDescriptionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PFXF_NAME))
				{
					nWidths.Add(max(5 * GetTMTxtOolTableNameLength() / 2, 5 * GetTMTxtCalTableNameLength() / 2));
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PFXF_VALID))
				{
					nWidths.Add(2 * GetTMParameterTagLength() + GetTMParameterDescriptionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_VALUE))
				{
					nWidths.Add(2 * GetTCParameterTagLength() + GetTCParameterDescriptionLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE))
				{
					nWidths.Add(5 * GetTCNumCalTableDescriptionLength() / 4);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE))
				{
					nWidths.Add(5 * GetTCTxtCalTableDescriptionLength() / 4);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE))
				{
					nWidths.Add(5 * GetTCNumCalTableDescriptionLength() / 4);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE))
				{
					nWidths.Add(5 * GetTCTxtCalTableDescriptionLength() / 4);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CALP_XVAL) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_CALP_YVAL))
				{
					nWidths.Add(3 * GetTMParameterConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_TXFP_FROM) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_TXFP_TO))
				{
					nWidths.Add(3 * GetTMParameterConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_TXFP_TEXT))
				{
					nWidths.Add(3 * GetTCTxtCalTablePointTextLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_OCFP_TYPE))
				{
					if (EnumTCNumOolTableLimitTypes(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_OCFP_LVALUE) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_OCFP_HVALUE))
				{
					nWidths.Add(3 * GetTMParameterConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_FXFP_TYPE))
				{
					if (EnumTCTxtOolTableLimitTypes(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_FXFP_FROM) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_FXFP_TO))
				{
					nWidths.Add(3 * GetTMParameterConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DPF_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DPF_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DPF_TITLEITEM_VALUE))
				{
					nWidths.Add(2 * GetANDTitleLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DPFP_PNAME))
				{
					nWidths.Add(3 * GetANDParameterTagLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DPFP_COMMENT))
				{
					nWidths.Add(3 * GetANDParameterCommentLength() / 2);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DPFP_ROW))
				{
					if (GetANDParameterRowRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DPFP_COL))
				{
					if (GetANDParameterColRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DPFP_COMM))
				{
					if (GetANDParameterOccurrenceRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DPFP_VALMODE))
				{
					if (EnumANDParameterModes(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DPFP_VALCHARS))
				{
					if (GetANDParameterDigitsRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_DPFP_VALALIGN))
				{
					if (EnumANDParameterAlignments(szValues, nValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)))
		{
			if ((pTable = pView->FindTable(pszTable)) != (CTableViewObject *)NULL)
			{
				for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
				{
					nWidths.Add(((nLength[0] = pTable->GetCellText(0, nCol).GetLength()) > 0) ? (3 * nLength[0]) : (3 * lstrlen(STRING(IDS_DATABASE_TABLE_DPF_LAYOUT))));
					continue;
				}
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_VALUE))
				{
					nWidths.Add(2 * GetGRDTitleLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_GPFP_PNAME))
				{
					nWidths.Add(3 * GetGRDParameterTagLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_GPFP_COMMENT))
				{
					nWidths.Add(3 * GetGRDParameterCommentLength() / 2);
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_GPFP_POSITION))
				{
					if (GetGRDParameterPositionRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_GPFP_COMM))
				{
					if (GetGRDParameterOccurrenceRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_GPFP_VALMODE))
				{
					if (EnumGRDParameterModes(szValues, lValues) > 0)
					{
						nWidths.Add(2 * CalcTableColumnWidth(szValues));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_GPFP_VALCHARS))
				{
					if (GetGRDParameterDigitsRange(nLow, nHigh))
					{
						nWidths.Add(2 * max(cStringTools.ConvertIntToString(nLow).GetLength(), cStringTools.ConvertIntToString(nHigh).GetLength()));
						szColumns = szColumns.Mid(nPos + 1);
						continue;
					}
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_GPFP_VALMINIMUM) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_GPFP_VALMAXIMUM))
				{
					nWidths.Add(3 * GetTMParameterConstValueLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
				szColumns = szColumns.Mid(nPos + 1);
				nWidths.Add(-1);
				continue;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)))
		{
			if ((pTable = pView->FindTable(pszTable)) != (CTableViewObject *)NULL)
			{
				for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
				{
					nWidths.Add(((nLength[0] = pTable->GetCellText(0, nCol).GetLength()) > 0) ? (3 * nLength[0]) : (3 * lstrlen(STRING(IDS_DATABASE_TABLE_GPF_LAYOUT))));
					continue;
				}
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)) && GetTableTitle(pView, pszTable, szTitle))
		{
			for (szColumns = szTitle; (nPos = ((nPos = szColumns.Find(TAB)) < 0) ? szColumns.GetLength() : nPos) >= 0 && szColumns.GetLength() > 0; )
			{
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PPF_TITLEITEM_FIELD) || szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PPF_TITLEITEM_DESCRIPTION))
				{
					szColumns = szColumns.Mid(nPos + 1);
					nWidths.Add(-1);
					continue;
				}
				if (szColumns.Left(nPos) == STRING(IDS_DATABASE_TABLE_PPF_TITLEITEM_VALUE))
				{
					nWidths.Add(2 * GetPODTitleLength());
					szColumns = szColumns.Mid(nPos + 1);
					continue;
				}
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)))
		{
			if ((pTable = pView->FindTable(pszTable)) != (CTableViewObject *)NULL)
			{
				for (nCol = 0, nCols = pTable->GetColumns(); nCol < nCols; nCol++)
				{
					nWidths.Add(((nLength[0] = pTable->GetCellText(0, nCol).GetLength()) > 0) ? (3 * nLength[0]) : (3 * lstrlen(STRING(IDS_DATABASE_TABLE_PPF_LAYOUT))));
					continue;
				}
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)))
		{
			nWidths.Add(-1);
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::GetTablePosition(CONST CDatabaseTableView *pView, LPCTSTR pszTable, CString &szTable, CRect &rPosition) CONST
{
	INT  nPos;
	INT  nRow;
	INT  nRows;
	INT  nCount;
	INT  nColumn;
	BOOL  bResize;
	BOOL  bVisible;
	CString  szTitle;
	CUIntArray  nIDs;
	CUIntArray  nFormats;
	CStringArray  szRows;
	CStringArray  szDataTypes;
	CStringArray  szDescriptions;
	CTableViewObject  *pTable;

	for (szTable.Empty(), rPosition.SetRectEmpty(); DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET; )
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)))
		{
			szTable = EMPTYSTRING;
			rPosition.SetRectEmpty();
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_PMF);
			rPosition.SetRect(0, 0, 0, 1);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_PMF), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME))
				{
					szTable = STRING(IDS_DATABASE_TABLE_PMF);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME))
				{
					szTable = STRING(IDS_DATABASE_TABLE_PMF);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
			}
			return((nRow < nRows) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_PMF), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_PMF_SMPRT))
				{
					szTable = STRING(IDS_DATABASE_TABLE_PMF);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_PMF_SMPRT))
				{
					szTable = STRING(IDS_DATABASE_TABLE_PMF);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
			}
			return((nRow < nRows) ? TRUE : FALSE);
		}
		break;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)))
		{
			szTable = EMPTYSTRING;
			rPosition.SetRectEmpty();
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_CCF), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_CCF_TCPID))
				{
					szTable = STRING(IDS_DATABASE_TABLE_CCF);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_CCF_TCPID))
				{
					szTable = STRING(IDS_DATABASE_TABLE_CCF);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
			}
			return((nRow < nRows) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_CCF);
			rPosition.SetRect(0, 0, 0, 1);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_TCP);
			rPosition.SetRect(0, 0, 0, 1);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_CCF), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_CCF_PVPID))
				{
					szTable = STRING(IDS_DATABASE_TABLE_CCF);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_CCF_PVPID))
				{
					szTable = STRING(IDS_DATABASE_TABLE_CCF);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
			}
			return((nRow < nRows) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_CCF), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_CCF_CVPID))
				{
					szTable = STRING(IDS_DATABASE_TABLE_CCF);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_CCF_CVPID))
				{
					szTable = STRING(IDS_DATABASE_TABLE_CCF);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
			}
			return((nRow < nRows) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_PVP);
			rPosition.SetRect(0, 0, 1, 0);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_CVP);
			rPosition.SetRect(0, 0, 1, 0);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_CDF);
			rPosition.SetRect(0, 0, 0, 1);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_PCPS);
			rPosition.SetRect(0, 0, 1, 0);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_CPS);
			rPosition.SetRect(0, 0, 1, 0);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)))
		{
			szTable = EMPTYSTRING;
			rPosition.SetRectEmpty();
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_CSF);
			rPosition.SetRect(0, 0, 0, 1);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_CSF);
			rPosition.SetRect(0, 0, 1, 0);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)))
		{
			for (szTable = STRING(IDS_DATABASE_TABLE_CSS), rPosition.SetRect(0, 0, max(pView->GetTableFloatingAlignment(pszTable), 1), 0); (pTable = pView->FindTable(szTable)); )
			{
				rPosition.SetRect(0, 0, max(min(pTable->GetRows() - 1, rPosition.right), 1), 0);
				break;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)))
		{
			for (szTable = STRING(IDS_DATABASE_TABLE_CSS), GetTableTitle(pView, szTable, szTitle), nColumn = 1; !szTitle.IsEmpty(); rPosition.SetRect(0, 0, 0, ++nColumn))
			{
				if ((nPos = szTitle.Find(TAB)) >= 0 && szTitle.Left(nPos) != STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL))
				{
					szTitle = szTitle.Mid(nPos + 1);
					continue;
				}
				if (nPos < 0 && szTitle.Compare(STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL)))
				{
					szTitle.Empty();
					continue;
				}
				break;
			}
			return((!szTitle.IsEmpty()) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_BCF);
			rPosition.SetRect(0, 0, 1, 0);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)))
		{
			szTable = EMPTYSTRING;
			rPosition.SetRectEmpty();
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_GEN);
			rPosition.SetRect(0, 0, 0, 1);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)))
		{
			for (szTable = STRING(IDS_DATABASE_TABLE_MAD), rPosition.SetRect(0, 0, max(pView->GetTableFloatingAlignment(pszTable), 1), 0); (pTable = pView->FindTable(szTable)); )
			{
				rPosition.SetRect(0, 0, max(min(pTable->GetRows() - 1, rPosition.right), 1), 0);
				break;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)))
		{
			for (szTable = STRING(IDS_DATABASE_TABLE_MAD), rPosition.SetRect(0, 0, max(pView->GetTableFloatingAlignment(pszTable), 1), 0); (pTable = pView->FindTable(szTable)); )
			{
				rPosition.SetRect(0, 0, max(min(pTable->GetRows() - 1, rPosition.right), 1), 0);
				break;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_GEN), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_GEN_IMGNAME))
				{
					szTable = STRING(IDS_DATABASE_TABLE_GEN);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_GEN_IMGNAME))
				{
					szTable = STRING(IDS_DATABASE_TABLE_GEN);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
			}
			return((nRow < nRows) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_GEN), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_GEN_IMGNAME)) break;
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_GEN_IMGNAME)) break;
			}
			for (GetTableTitle(pView, STRING(IDS_DATABASE_TABLE_GEN), szTitle), nCount = 0, nCount = (!szTitle.IsEmpty()) ? (nCount + 1) : 0; (nPos = szTitle.Find(TAB)) >= 0; szTitle = szTitle.Mid(nPos + 1))
			{
				nCount++;
				continue;
			}
			if (nRow < nRows)
			{
				szTable = STRING(IDS_DATABASE_TABLE_GEN);
				rPosition.SetRect(nRow + 1, nCount, 0, 0);
				return TRUE;
			}
			return FALSE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)))
		{
			for (szTable = STRING(IDS_DATABASE_TABLE_MAD), rPosition.SetRect(0, 0, max(pView->GetTableFloatingAlignment(pszTable), 1), 0); (pTable = pView->FindTable(szTable)); )
			{
				rPosition.SetRect(0, 0, max(min(pTable->GetRows() - 1, rPosition.right), 1), 0);
				break;
			}
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT)))
		{
			for (szTable = STRING(IDS_DATABASE_TABLE_MAD), rPosition.SetRect(0, 0, max(pView->GetTableFloatingAlignment(pszTable), 1), 0); (pTable = pView->FindTable(szTable)); )
			{
				rPosition.SetRect(0, 0, max(min(pTable->GetRows() - 1, rPosition.right), 1), 0);
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)))
		{
			szTable = EMPTYSTRING;
			rPosition.SetRectEmpty();
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_PCF), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_PCF_CALTABLES))
				{
					szTable = STRING(IDS_DATABASE_TABLE_PCF);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_PCF_CALTABLES))
				{
					szTable = STRING(IDS_DATABASE_TABLE_PCF);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
			}
			return((nRow < nRows) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_PCF), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES))
				{
					szTable = STRING(IDS_DATABASE_TABLE_PCF);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES))
				{
					szTable = STRING(IDS_DATABASE_TABLE_PCF);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
			}
			return((nRow < nRows) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_PCF), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_PCF_CALTABLES)) break;
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_PCF_CALTABLES)) break;
			}
			for (GetTableTitle(pView, STRING(IDS_DATABASE_TABLE_PCF), szTitle), nCount = 0, nCount = (!szTitle.IsEmpty()) ? (nCount + 1) : 0; (nPos = szTitle.Find(TAB)) >= 0; szTitle = szTitle.Mid(nPos + 1))
			{
				nCount++;
				continue;
			}
			if (nRow < nRows)
			{
				szTable = STRING(IDS_DATABASE_TABLE_PCF);
				rPosition.SetRect(nRow + 1, nCount, 0, 0);
				return TRUE;
			}
			return FALSE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_PCF), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES)) break;
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES)) break;
			}
			for (GetTableTitle(pView, STRING(IDS_DATABASE_TABLE_PCF), szTitle), nCount = 0, nCount = (!szTitle.IsEmpty()) ? (nCount + 1) : 0; (nPos = szTitle.Find(TAB)) >= 0; szTitle = szTitle.Mid(nPos + 1))
			{
				nCount++;
				continue;
			}
			if (nRow < nRows)
			{
				szTable = STRING(IDS_DATABASE_TABLE_PCF);
				rPosition.SetRect(nRow + 1, nCount, 0, 0);
				return TRUE;
			}
			return FALSE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_CAL);
			rPosition.SetRect(0, 0, 1, 0);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_TXF);
			rPosition.SetRect(0, 0, 1, 0);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_OCF);
			rPosition.SetRect(0, 0, 1, 0);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_FXF);
			rPosition.SetRect(0, 0, 1, 0);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)))
		{
			szTable = EMPTYSTRING;
			rPosition.SetRectEmpty();
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_CPC), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_CPC_CALREF))
				{
					szTable = STRING(IDS_DATABASE_TABLE_CPC);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_CPC_CALREF))
				{
					szTable = STRING(IDS_DATABASE_TABLE_CPC);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
			}
			return((nRow < nRows) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_CPC), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_CPC_TXFREF))
				{
					szTable = STRING(IDS_DATABASE_TABLE_CPC);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_CPC_TXFREF))
				{
					szTable = STRING(IDS_DATABASE_TABLE_CPC);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
			}
			return((nRow < nRows) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_CPC), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_CPC_OCFREF))
				{
					szTable = STRING(IDS_DATABASE_TABLE_CPC);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_CPC_OCFREF))
				{
					szTable = STRING(IDS_DATABASE_TABLE_CPC);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
			}
			return((nRow < nRows) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_CPC), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_CPC_FXFREF))
				{
					szTable = STRING(IDS_DATABASE_TABLE_CPC);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_CPC_FXFREF))
				{
					szTable = STRING(IDS_DATABASE_TABLE_CPC);
					rPosition.SetRect(0, 0, nRow + 1, 0);
					break;
				}
			}
			return((nRow < nRows) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_CAL);
			rPosition.SetRect(0, 0, 1, 0);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_TXF);
			rPosition.SetRect(0, 0, 1, 0);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_OCF);
			rPosition.SetRect(0, 0, 1, 0);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_FXF);
			rPosition.SetRect(0, 0, 1, 0);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)))
		{
			szTable = EMPTYSTRING;
			rPosition.SetRectEmpty();
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_DPF);
			rPosition.SetRect(0, 0, 0, 1);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_DPF), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)) break;
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)) break;
			}
			for (GetTableTitle(pView, STRING(IDS_DATABASE_TABLE_DPF), szTitle), nCount = 0, nCount = (!szTitle.IsEmpty()) ? (nCount + 1) : 0; (nPos = szTitle.Find(TAB)) >= 0; szTitle = szTitle.Mid(nPos + 1))
			{
				nCount++;
				continue;
			}
			if (nRow < nRows)
			{
				szTable = STRING(IDS_DATABASE_TABLE_DPF);
				rPosition.SetRect(nRow + 1, nCount, 0, 0);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)))
		{
			szTable = EMPTYSTRING;
			rPosition.SetRectEmpty();
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)))
		{
			szTable = STRING(IDS_DATABASE_TABLE_GPF);
			rPosition.SetRect(0, 0, 0, 1);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_GPF), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && szRows.GetAt(nRow).Left(nPos) == STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)) break;
				if (szRows.GetAt(nRow) == STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)) break;
			}
			for (GetTableTitle(pView, STRING(IDS_DATABASE_TABLE_GPF), szTitle), nCount = 0, nCount = (!szTitle.IsEmpty()) ? (nCount + 1) : 0; (nPos = szTitle.Find(TAB)) >= 0; szTitle = szTitle.Mid(nPos + 1))
			{
				nCount++;
				continue;
			}
			if (nRow < nRows)
			{
				szTable = STRING(IDS_DATABASE_TABLE_GPF);
				rPosition.SetRect(nRow + 1, nCount, 0, 0);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)))
		{
			szTable = EMPTYSTRING;
			rPosition.SetRectEmpty();
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)))
		{
			for (nRow = 0, nRows = (GetTableContents(pView, STRING(IDS_DATABASE_TABLE_PPF), EMPTYSTRING, -1, szRows, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible)) ? (INT)szRows.GetSize() : 0; nRow < nRows; nRow++)
			{
				if ((nPos = szRows.GetAt(nRow).Find(TAB)) >= 0 && !szRows.GetAt(nRow).Left(nPos).Compare(pszTable)) break;
				if (!szRows.GetAt(nRow).Compare(pszTable)) break;
			}
			for (GetTableTitle(pView, STRING(IDS_DATABASE_TABLE_PPF), szTitle), nCount = 0, nCount = (!szTitle.IsEmpty()) ? (nCount + 1) : 0; (nPos = szTitle.Find(TAB)) >= 0; szTitle = szTitle.Mid(nPos + 1))
			{
				nCount++;
				continue;
			}
			if (nRow < nRows)
			{
				szTable = STRING(IDS_DATABASE_TABLE_PPF);
				rPosition.SetRect(nRow + 1, nCount, 0, 0);
				return TRUE;
			}
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::GetTableOutline(CONST CDatabaseTableView *pView, LPCTSTR pszTable, COLORREF &nTitleRowColor, COLORREF &nFirstRowColor, COLORREF &nFirstColumnColor, COLORREF &nTitleFontColor, COLORREF &nItemsFontColor, INT &nOuterBorderSize, INT &nOuterBorderStyle, COLORREF &nOuterBorderColor, INT &nInnerBorderSize, INT &nInnerBorderStyle, COLORREF &nInnerBorderColor) CONST
{
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstRowColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstColumnColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstRowColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstColumnColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstRowColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstColumnColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstColumnColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstRowColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstColumnColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)))
		{
			nTitleRowColor = GetSysColor(COLOR_WINDOW);
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nTitleFontColor = GetSysColor(COLOR_WINDOWTEXT);
			nItemsFontColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_NULL;
			nInnerBorderStyle = PS_DOT;
			nOuterBorderSize = 0;
			nInnerBorderSize = 1;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstRowColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstRowColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstColumnColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstRowColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_NULL;
			nInnerBorderStyle = PS_DOT;
			nOuterBorderSize = 0;
			nInnerBorderSize = 1;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstRowColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstRowColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstColumnColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstRowColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstColumnColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)))
		{
			nTitleRowColor = GetSysColor(COLOR_WINDOW);
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nTitleFontColor = GetSysColor(COLOR_WINDOWTEXT);
			nItemsFontColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_NULL;
			nInnerBorderStyle = PS_DOT;
			nOuterBorderSize = 0;
			nInnerBorderSize = 1;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstRowColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstColumnColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)))
		{
			nTitleRowColor = GetSysColor(COLOR_WINDOW);
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nTitleFontColor = GetSysColor(COLOR_WINDOWTEXT);
			nItemsFontColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_NULL;
			nInnerBorderStyle = PS_DOT;
			nOuterBorderSize = 0;
			nInnerBorderSize = 1;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)))
		{
			nTitleRowColor = pView->m_nTableColors[0];
			nFirstRowColor = pView->m_nTableColors[1];
			nTitleFontColor = pView->m_nTableFontColors[0];
			nItemsFontColor = pView->m_nTableFontColors[1];
			nOuterBorderSize = DATABASETABLEVIEW_TABLE_OUTERBORDERSIZE;
			nInnerBorderSize = DATABASETABLEVIEW_TABLE_INNERBORDERSIZE;
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_SOLID;
			nInnerBorderStyle = PS_DOT;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)))
		{
			nTitleRowColor = GetSysColor(COLOR_WINDOW);
			nFirstRowColor = GetSysColor(COLOR_WINDOW);
			nFirstColumnColor = GetSysColor(COLOR_WINDOW);
			nTitleFontColor = GetSysColor(COLOR_WINDOWTEXT);
			nItemsFontColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nInnerBorderColor = GetSysColor(COLOR_WINDOWTEXT);
			nOuterBorderStyle = PS_NULL;
			nInnerBorderStyle = PS_DOT;
			nOuterBorderSize = 0;
			nInnerBorderSize = 1;
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::GetTableOutlineFonts(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LOGFONT *plfTitleFont, LOGFONT *plfItemsFont) CONST
{
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)))
		{
			CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT));
			CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT));
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)))
		{
			for (CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT)), plfTitleFont->lfHeight = (5 * plfTitleFont->lfHeight) / 6; (plfTitleFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfTitleFont->lfFaceName, EMPTYSTRING);
				break;
			}
			for (CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT)), plfItemsFont->lfHeight = (5 * plfItemsFont->lfHeight) / 6; (plfItemsFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfItemsFont->lfFaceName, EMPTYSTRING);
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)))
		{
			CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT));
			CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT));
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)))
		{
			for (CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT)), plfTitleFont->lfHeight = (5 * plfTitleFont->lfHeight) / 6; (plfTitleFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfTitleFont->lfFaceName, EMPTYSTRING);
				break;
			}
			for (CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT)), plfItemsFont->lfHeight = (5 * plfItemsFont->lfHeight) / 6; (plfItemsFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfItemsFont->lfFaceName, EMPTYSTRING);
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)))
		{
			CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT));
			CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT));
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF)))
		{
			for (CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT)), plfTitleFont->lfHeight = (5 * plfTitleFont->lfHeight) / 6; (plfTitleFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfTitleFont->lfFaceName, EMPTYSTRING);
				break;
			}
			for (CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT)), plfItemsFont->lfHeight = (5 * plfItemsFont->lfHeight) / 6; (plfItemsFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfItemsFont->lfFaceName, EMPTYSTRING);
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)))
		{
			CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT));
			CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT));
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT)))
		{
			for (CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT)), plfTitleFont->lfHeight = (5 * plfTitleFont->lfHeight) / 6; (plfTitleFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfTitleFont->lfFaceName, EMPTYSTRING);
				break;
			}
			for (CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT)), plfItemsFont->lfHeight = (5 * plfItemsFont->lfHeight) / 6; (plfItemsFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfItemsFont->lfFaceName, EMPTYSTRING);
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT));
			CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT));
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			for (CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT)), plfTitleFont->lfHeight = (5 * plfTitleFont->lfHeight) / 6; (plfTitleFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfTitleFont->lfFaceName, EMPTYSTRING);
				break;
			}
			for (CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT)), plfItemsFont->lfHeight = (5 * plfItemsFont->lfHeight) / 6; (plfItemsFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfItemsFont->lfFaceName, EMPTYSTRING);
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT));
			CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT));
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			for (CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT)), plfTitleFont->lfHeight = (5 * plfTitleFont->lfHeight) / 6; (plfTitleFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfTitleFont->lfFaceName, EMPTYSTRING);
				break;
			}
			for (CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT)), plfItemsFont->lfHeight = (5 * plfItemsFont->lfHeight) / 6; (plfItemsFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfItemsFont->lfFaceName, EMPTYSTRING);
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)))
		{
			CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT));
			CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT));
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)))
		{
			for (CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT)), plfTitleFont->lfHeight = (5 * plfTitleFont->lfHeight) / 6; (plfTitleFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfTitleFont->lfFaceName, EMPTYSTRING);
				break;
			}
			for (CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT)), plfItemsFont->lfHeight = (5 * plfItemsFont->lfHeight) / 6; (plfItemsFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfItemsFont->lfFaceName, EMPTYSTRING);
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)))
		{
			CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT));
			CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT));
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)))
		{
			for (CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT)), plfTitleFont->lfHeight = (5 * plfTitleFont->lfHeight) / 6; (plfTitleFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfTitleFont->lfFaceName, EMPTYSTRING);
				break;
			}
			for (CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT)), plfItemsFont->lfHeight = (5 * plfItemsFont->lfHeight) / 6; (plfItemsFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfItemsFont->lfFaceName, EMPTYSTRING);
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)))
		{
			CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT));
			CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT));
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)))
		{
			for (CopyMemory(plfTitleFont, &pView->m_lfTable[0], sizeof(LOGFONT)), plfTitleFont->lfHeight = (5 * plfTitleFont->lfHeight) / 6; (plfTitleFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfTitleFont->lfFaceName, EMPTYSTRING);
				break;
			}
			for (CopyMemory(plfItemsFont, &pView->m_lfTable[1], sizeof(LOGFONT)), plfItemsFont->lfHeight = (5 * plfItemsFont->lfHeight) / 6; (plfItemsFont->lfOutPrecision & OUT_STROKE_PRECIS) != OUT_STROKE_PRECIS; )
			{
				_tcscpy_s(plfItemsFont->lfFaceName, EMPTYSTRING);
				break;
			}
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::GetTableOutlineLimits(CONST CDatabaseTableView *pView, LPCTSTR pszTable, INT &nMinRows, INT &nMaxRows) CONST
{
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)))
		{
			nMinRows = 2;
			nMaxRows = INT_MAX;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)))
		{
			nMinRows = 2;
			nMaxRows = INT_MAX;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF)))
		{
			nMinRows = 2;
			nMaxRows = INT_MAX;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP)))
		{
			nMinRows = 2;
			nMaxRows = INT_MAX;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)))
		{
			nMinRows = nMaxRows = 2;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			nMinRows = 2;
			nMaxRows = INT_MAX;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			nMinRows = 2;
			nMaxRows = INT_MAX;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)))
		{
			nMinRows = nMaxRows = 1;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)))
		{
			nMinRows = 2;
			nMaxRows = INT_MAX;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)))
		{
			nMinRows = nMaxRows = 1;
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)))
		{
			nMinRows = 2;
			nMaxRows = INT_MAX;
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)))
		{
			nMinRows = nMaxRows = 1;
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::GetTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszItem, INT nRows, CStringArray &szContents, CStringArray &szDescriptions, CStringArray &szDataTypes, CUIntArray &nFormats, CUIntArray &nIDs, BOOL &bResize, BOOL &bVisible) CONST
{
	CStringArray  szSets;
	CStringArray  szCalTables[2];
	CStringArray  szOolTables[2];
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCSequence  *pDatabaseTCSequence;
	CDatabaseOBProcessor  *pDatabaseOBProcessor;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCParameters  pDatabaseTCParameters;
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock;
	CDatabaseTCSequenceEntry  *pDatabaseTCSequenceEntry;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), nIDs.RemoveAll(), bResize = bVisible = FALSE; DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET; )
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)))
		{
			ConstructTMPacketTableContents(pView, pszItem, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)))
		{
			ConstructTMPacketParametersTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)))
		{
			ConstructTMPacketHeadersTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)))
		{
			ConstructTMPacketStreamsTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		return(((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)) && szContents.GetSize() == nFormats.GetSize() && nFormats.GetSize() == max(szDescriptions.GetSize() - 1, 0) && nFormats.GetSize() == max(szDataTypes.GetSize() - 1, 0) && szContents.GetSize() == nIDs.GetSize()) || ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR))) && nFormats.GetSize() == szDescriptions.GetSize() && nFormats.GetSize() == szDataTypes.GetSize() && nFormats.GetSize() == nIDs.GetSize())) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)))
		{
			ConstructTCFunctionTableContents(pView, pszItem, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)))
		{
			ConstructTCPacketTableContents(pView, ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pszItem)))) ? pDatabaseTCFunction->GetTCPacket() : EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)))
		{
			ConstructTCFunctionElementsTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)))
		{
			ConstructTCPacketParametersTableContents(pView, ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pszItem)))) ? pDatabaseTCFunction->GetTCPacket() : EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)))
		{
			ConstructTCPreExeGroupsTableContents(pView, ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pszItem)))) ? pDatabaseTCFunction->GetPreExeGroup() : EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)))
		{
			ConstructTCPreExeGroupParametersTableContents(pView, ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pszItem)))) ? pDatabaseTCFunction->GetPreExeGroup() : EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)))
		{
			ConstructTCExeVerGroupsTableContents(pView, ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pszItem)))) ? pDatabaseTCFunction->GetExeVerGroup() : EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)))
		{
			ConstructTCExeVerGroupParametersTableContents(pView, ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pszItem)))) ? pDatabaseTCFunction->GetExeVerGroup() : EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS)))
		{
			ConstructTCParameterSetsAssociationTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)))
		{
			ConstructTCParameterSetsTableContents(pView, ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pszItem))) && pDatabaseTCFunction->GetParameterSets(szSets) > 0) ? szSets.GetAt(0) : EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)))
		{
			ConstructTCParameterSetMembersTableContents(pView, ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pszItem))) && pDatabaseTCFunction->GetParameterSets(szSets) > 0) ? szSets.GetAt(0) : EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		return(((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)) && szContents.GetSize() == nFormats.GetSize() && nFormats.GetSize() == max(szDescriptions.GetSize() - 1, 0) && nFormats.GetSize() == max(szDataTypes.GetSize() - 1, 0) && szContents.GetSize() == nIDs.GetSize()) || ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP))) && nFormats.GetSize() == szDescriptions.GetSize() && nFormats.GetSize() == szDataTypes.GetSize() && nFormats.GetSize() == nIDs.GetSize())) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)))
		{
			ConstructTCSequenceTableContents(pView, pszItem, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)))
		{
			ConstructTCSequenceEntriesTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)))
		{
			ConstructTCSequenceParametersTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)))
		{
			ConstructTCSequenceEntryParametersTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)))
		{
			ConstructTCSequenceFunctionBlockTableContents(pView, ((pDatabaseTCFunctionBlock = ((pDatabaseTCSequenceEntry = ((pDatabaseTCSequence = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pszItem)))) ? pDatabaseTCSequence->GetAt(0) : (CDatabaseTCSequenceEntry *)NULL) && (pDatabaseTCSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_FLAG_BLOCKMACRO)) ? pView->m_pDatabaseTCFunctionBlocks[0].GetAt(pView->m_pDatabaseTCFunctionBlocks[0].Find(pDatabaseTCSequenceEntry->GetName())) : (CDatabaseTCFunctionBlock *)NULL)) ? pDatabaseTCFunctionBlock->GetName() : EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF)))
		{
			ConstructTCSequenceFunctionBlockElementsTableContents(pView, ((pDatabaseTCFunctionBlock = ((pDatabaseTCSequenceEntry = ((pDatabaseTCSequence = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pszItem)))) ? pDatabaseTCSequence->GetAt(0) : (CDatabaseTCSequenceEntry *)NULL) && (pDatabaseTCSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_FLAG_BLOCKMACRO)) ? pView->m_pDatabaseTCFunctionBlocks[0].GetAt(pView->m_pDatabaseTCFunctionBlocks[0].Find(pDatabaseTCSequenceEntry->GetName())) : (CDatabaseTCFunctionBlock *)NULL)) ? pDatabaseTCFunctionBlock->GetName() : EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		return(((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)) && szContents.GetSize() == nFormats.GetSize() && nFormats.GetSize() == max(szDescriptions.GetSize() - 1, 0) && nFormats.GetSize() == max(szDataTypes.GetSize() - 1, 0) && szContents.GetSize() == nIDs.GetSize()) || (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)) && szContents.GetSize() == nFormats.GetSize() && nFormats.GetSize() == szDescriptions.GetSize() && nFormats.GetSize() == szDataTypes.GetSize() && szContents.GetSize() == nIDs.GetSize()) || ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF))) && nFormats.GetSize() == szDescriptions.GetSize() && nFormats.GetSize() == szDataTypes.GetSize() && nFormats.GetSize() == nIDs.GetSize())) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)))
		{
			ConstructOBProcessorTableContents(pView, pszItem, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)))
		{
			ConstructOBProcessorMemoryAreasTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)))
		{
			ConstructOBProcessorMemoryAreaBlocksTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)))
		{
			ConstructOBProcessorMemoryImagesTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP)))
		{
			ConstructOBProcessorMemoryMasterImagesTableContents(pView, ((pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszItem)))) ? pDatabaseOBProcessor->GetMasterImage() : EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)))
		{
			ConstructOBProcessorMemoryImagesAssociationTableContents(pView, ((pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszItem)))) ? pDatabaseOBProcessor->GetMasterImage() : EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)))
		{
			ConstructOBProcessorMemoryAreaChecksumsTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT)))
		{
			ConstructOBProcessorMemoryAreaCatalogueEntriesTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		return(((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)) && szContents.GetSize() == nFormats.GetSize() && nFormats.GetSize() == max(szDescriptions.GetSize() - 1, 0) && nFormats.GetSize() == max(szDataTypes.GetSize() - 1, 0) && szContents.GetSize() == nIDs.GetSize()) || (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)) && szContents.GetSize() == nFormats.GetSize() && nFormats.GetSize() == szDescriptions.GetSize() && nFormats.GetSize() == szDataTypes.GetSize() && szContents.GetSize() == nIDs.GetSize()) || ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT))) && nFormats.GetSize() == szDescriptions.GetSize() && nFormats.GetSize() == szDataTypes.GetSize() && nFormats.GetSize() == nIDs.GetSize())) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)))
		{
			ConstructTMParameterTableContents(pView, pszItem, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)); )
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszItem))) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL))
			{
				ConstructTMNumCalCurveTableContents(pView, (pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]) > 0) ? szCalTables[0].GetAt(0) : EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTMNumCalCurveTableContents(pView, EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)); )
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszItem))) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL))
			{
				ConstructTMNumCalCurvePointsTableContents(pView, (pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]) > 0) ? szCalTables[0].GetAt(0) : EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTMNumCalCurvePointsTableContents(pView, EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)); )
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszItem))) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL))
			{
				ConstructTMNumCalCurveAssociationTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTMNumCalCurveAssociationTableContents(pView, EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)); )
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszItem))) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS))
			{
				ConstructTMTxtCalCurveTableContents(pView, (pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]) > 0) ? szCalTables[0].GetAt(0) : EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTMTxtCalCurveTableContents(pView, EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)); )
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszItem))) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS))
			{
				ConstructTMTxtCalCurvePointsTableContents(pView, (pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]) > 0) ? szCalTables[0].GetAt(0) : EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTMTxtCalCurvePointsTableContents(pView, EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)); )
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszItem))) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS))
			{
				ConstructTMTxtCalCurveAssociationTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTMTxtCalCurveAssociationTableContents(pView, EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)); )
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszItem))) && (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CALIBRATION_NUMERICAL)))
			{
				ConstructTMNumOolChecksTableContents(pView, (pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1]) > 0) ? szOolTables[0].GetAt(0) : EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTMNumOolChecksTableContents(pView, EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)); )
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszItem))) && (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CALIBRATION_NUMERICAL)))
			{
				ConstructTMNumOolCheckLimitsTableContents(pView, (pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1]) > 0) ? szOolTables[0].GetAt(0) : EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTMNumOolCheckLimitsTableContents(pView, EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)); )
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszItem))) && (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CALIBRATION_NUMERICAL)))
			{
				ConstructTMNumOolChecksAssociationTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTMNumOolChecksAssociationTableContents(pView, EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)); )
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszItem))) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS))
			{
				ConstructTMTxtOolChecksTableContents(pView, (pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1]) > 0) ? szOolTables[0].GetAt(0) : EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTMTxtOolChecksTableContents(pView, EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)); )
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszItem))) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS))
			{
				ConstructTMTxtOolCheckLimitsTableContents(pView, (pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1]) > 0) ? szOolTables[0].GetAt(0) : EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTMTxtOolCheckLimitsTableContents(pView, EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)); )
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszItem))) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS))
			{
				ConstructTMTxtOolChecksAssociationTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTMTxtOolChecksAssociationTableContents(pView, EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		return(((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)) && szContents.GetSize() == nFormats.GetSize() && nFormats.GetSize() == max(szDescriptions.GetSize() - 1, 0) && nFormats.GetSize() == max(szDataTypes.GetSize() - 1, 0) && szContents.GetSize() == nIDs.GetSize()) || ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) && szContents.GetSize() == nFormats.GetSize() && nFormats.GetSize() == szDescriptions.GetSize() && nFormats.GetSize() == szDataTypes.GetSize() && szContents.GetSize() == nIDs.GetSize()) || ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP))) && nFormats.GetSize() == szDescriptions.GetSize() && nFormats.GetSize() == szDataTypes.GetSize() && nFormats.GetSize() == nIDs.GetSize())) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)))
		{
			ConstructTCParameterTableContents(pView, pszItem, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)); )
		{
			if ((pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pszItem))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL))
			{
				ConstructTCNumCalCurveTableContents(pView, pDatabaseTCParameter->GetCalTable(), szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTCNumCalCurveTableContents(pView, EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)); )
		{
			if ((pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pszItem))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL))
			{
				ConstructTCNumCalCurvePointsTableContents(pView, pDatabaseTCParameter->GetCalTable(), nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTCNumCalCurvePointsTableContents(pView, EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)); )
		{
			if ((pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pszItem))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS))
			{
				ConstructTCTxtCalCurveTableContents(pView, pDatabaseTCParameter->GetCalTable(), szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTCTxtCalCurveTableContents(pView, EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)); )
		{
			if ((pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pszItem))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS))
			{
				ConstructTCTxtCalCurvePointsTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTCTxtCalCurvePointsTableContents(pView, EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)); )
		{
			if ((pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pszItem))) && (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL)))
			{
				ConstructTCNumOolChecksTableContents(pView, pDatabaseTCParameter->GetOolTable(), szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTCNumOolChecksTableContents(pView, EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)); )
		{
			if ((pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pszItem))) && (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL)))
			{
				ConstructTCNumOolCheckLimitsTableContents(pView, pDatabaseTCParameter->GetOolTable(), nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTCNumOolCheckLimitsTableContents(pView, EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)); )
		{
			if ((pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pszItem))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS))
			{
				ConstructTCTxtOolChecksTableContents(pView, pDatabaseTCParameter->GetOolTable(), szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTCTxtOolChecksTableContents(pView, EMPTYSTRING, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		for (; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)); )
		{
			if ((pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pszItem))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS))
			{
				ConstructTCTxtOolCheckLimitsTableContents(pView, pDatabaseTCParameter->GetOolTable(), nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
				bResize = bVisible = TRUE;
				break;
			}
			ConstructTCTxtOolCheckLimitsTableContents(pView, EMPTYSTRING, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = TRUE;
			break;
		}
		return(((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)) && szContents.GetSize() == nFormats.GetSize() && nFormats.GetSize() == max(szDescriptions.GetSize() - 1, 0) && nFormats.GetSize() == max(szDataTypes.GetSize() - 1, 0) && szContents.GetSize() == nIDs.GetSize()) || ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) && szContents.GetSize() == nFormats.GetSize() && nFormats.GetSize() == szDescriptions.GetSize() && nFormats.GetSize() == szDataTypes.GetSize() && szContents.GetSize() == nIDs.GetSize()) || ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP))) && nFormats.GetSize() == szDescriptions.GetSize() && nFormats.GetSize() == szDataTypes.GetSize() && nFormats.GetSize() == nIDs.GetSize())) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)))
		{
			ConstructANDTableContents(pView, pszItem, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)))
		{
			ConstructANDLayoutTableContents(pView, pszItem, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)))
		{
			ConstructANDParametersTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		return(((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)) && szContents.GetSize() == nFormats.GetSize() && nFormats.GetSize() == max(szDescriptions.GetSize() - 1, 0) && nFormats.GetSize() == max(szDataTypes.GetSize() - 1, 0) && szContents.GetSize() == nIDs.GetSize()) || ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT))) && nFormats.GetSize() == szDescriptions.GetSize() && nFormats.GetSize() == szDataTypes.GetSize() && nFormats.GetSize() == nIDs.GetSize())) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)))
		{
			ConstructGRDTableContents(pView, pszItem, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)))
		{
			ConstructGRDLayoutTableContents(pView, pszItem, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)))
		{
			ConstructGRDParametersTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		return(((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)) && szContents.GetSize() == nFormats.GetSize() && nFormats.GetSize() == max(szDescriptions.GetSize() - 1, 0) && nFormats.GetSize() == max(szDataTypes.GetSize() - 1, 0) && szContents.GetSize() == nIDs.GetSize()) || ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT))) && nFormats.GetSize() == szDescriptions.GetSize() && nFormats.GetSize() == szDataTypes.GetSize() && nFormats.GetSize() == nIDs.GetSize())) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)))
		{
			ConstructPODTableContents(pView, pszItem, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)))
		{
			ConstructPODLayoutTableContents(pView, pszItem, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)))
		{
			ConstructPODExpressionStackTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)))
		{
			ConstructPODParametersTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)))
		{
			ConstructPODFunctionsTableContents(pView, pszItem, nRows, szContents, nFormats, nIDs, szDescriptions, szDataTypes);
			bResize = bVisible = TRUE;
		}
		return(((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)) && szContents.GetSize() == nFormats.GetSize() && nFormats.GetSize() == max(szDescriptions.GetSize() - 1, 0) && nFormats.GetSize() == max(szDataTypes.GetSize() - 1, 0) && szContents.GetSize() == nIDs.GetSize()) || ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS))) && nFormats.GetSize() == szDescriptions.GetSize() && nFormats.GetSize() == szDataTypes.GetSize() && nFormats.GetSize() == nIDs.GetSize())) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CALTELDatabaseEngine::EnumTableFieldValues(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszField, CStringArray &szValues, CLongUIntArray &nValues) CONST
{
	INT  nSet;
	INT  nSets;
	INT  nTable;
	INT  nTables;
	INT  nGroup;
	INT  nGroups;
	INT  nImage;
	INT  nImages;
	INT  nBlock;
	INT  nBlocks;
	INT  nPacket;
	INT  nPackets;
	INT  nLayout;
	INT  nLayouts;
	INT  nFunction;
	INT  nFunctions;
	INT  nSequence;
	INT  nSequences;
	INT  nProcessor;
	INT  nProcessors;
	INT  nParameter;
	INT  nParameters;
	INT  nPacketHeader;
	INT  nPacketHeaders;
	CString  szPacket;
	CString  szFunction;
	CString  szParameter;
	ULONGLONG  nComponent;
	CUIntArray  sValues;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCSequence  *pDatabaseTCSequence;
	CDatabaseOBProcessor  *pDatabaseOBProcessor;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTMPacketHeader  *pDatabaseTMPacketHeader;
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;
	CANDLayout  *pANDLayout;
	CGRDLayout  *pGRDLayout;
	CPODLayout  *pPODLayout;

	for (szValues.RemoveAll(), nValues.RemoveAll(); (nComponent = DATABASECOMPONENTFROMCODE(pView->GetComponent())) == DATABASE_COMPONENT_TMPACKET; )
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_PACKID)))
			{
				for (nPacket = 0, nPackets = (INT)pView->m_pDatabaseTMPackets[0].GetSize(); nPacket < nPackets; nPacket++)
				{
					if ((pDatabaseTMPacket = pView->m_pDatabaseTMPackets[0].GetAt(nPacket)))
					{
						szValues.Add(pDatabaseTMPacket->GetTag());
						nValues.Add(nPacket);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME)))
			{
				for (nPacketHeader = 0, nPacketHeaders = (INT)pView->m_pDatabaseTMPacketHeaders[0].GetSize(); nPacketHeader < nPacketHeaders; nPacketHeader++)
				{
					if ((pDatabaseTMPacketHeader = pView->m_pDatabaseTMPacketHeaders[0].GetAt(nPacketHeader)))
					{
						szValues.Add(pDatabaseTMPacketHeader->GetName());
						nValues.Add(nPacketHeader);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_HFLG)))
			{
				EnumTMPacketDataFieldHeaderFlags(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_APID)))
			{
				EnumTMPacketAPIDs(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_TMTY)))
			{
				EnumTMPacketTMTypes(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)))
			{
				EnumTMPacketDataSizes(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_EVENTID)))
			{
				for (nParameter = 0, nParameters = (INT)GetTMParameters()->GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTMParameter = GetTMParameters()->GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
					{
						szParameter.Format(STRING(IDS_DATABASE_TABLE_PMF_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
						szValues.Add(szParameter);
						nValues.Add(nParameter);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_STATUS)))
			{
				EnumTMPacketStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_PRESENT)))
			{
				EnumTMPacketHeaderTMTypeFlags(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DFH_TM_ID_PRESENT)))
			{
				EnumTMPacketHeaderTMIDFlags(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DFH_3DISC_PRESENT)))
			{
				EnumTMPacketHeader3DiscFlags(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DFH_TIME_PRESENT)))
			{
				EnumTMPacketHeaderTimestampFlags(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_STR_APID)))
			{
				EnumTMPacketStreamAPIDs(szValues, sValues);
				nValues = sValues;
			}
		}
		break;
	}
	if (nComponent == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CCF_CNAME)))
			{
				for (nFunction = 0, nFunctions = (INT)pView->m_pDatabaseTCFunctions[0].GetSize(); nFunction < nFunctions; nFunction++)
				{
					if ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(nFunction)))
					{
						szValues.Add(pDatabaseTCFunction->GetName());
						nValues.Add(nFunction);
					}
				}
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CCF_CTYPE)); )
			{
				EnumTCFunctionTypes(szValues, nValues);
				break;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CCF_TCPID)))
			{
				for (nPacket = 0, nPackets = (INT)pView->m_pDatabaseTCPackets[0].GetSize(); nPacket < nPackets; nPacket++)
				{
					if ((pDatabaseTCPacket = pView->m_pDatabaseTCPackets[0].GetAt(nPacket)))
					{
						szValues.Add(pDatabaseTCPacket->GetTag());
						nValues.Add(nPacket);
					}
				}
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CCF_TCTYPE)); )
			{
				EnumTCFunctionTCTypes(szValues, nValues);
				break;
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CCF_HAZ)); )
			{
				EnumTCFunctionHazardousFlags(szValues, nValues);
				break;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CCF_PVPID)))
			{
				for (nGroup = 0, nGroups = (INT)pView->m_pDatabaseTCPreExeGroups[0].GetSize(); nGroup < nGroups; nGroup++)
				{
					if ((pDatabaseTCPreExeGroup = pView->m_pDatabaseTCPreExeGroups[0].GetAt(nGroup)))
					{
						szValues.Add(pDatabaseTCPreExeGroup->GetID());
						nValues.Add(nGroup);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CCF_CVPID)))
			{
				for (nGroup = 0, nGroups = (INT)pView->m_pDatabaseTCExeVerGroups[0].GetSize(); nGroup < nGroups; nGroup++)
				{
					if ((pDatabaseTCExeVerGroup = pView->m_pDatabaseTCExeVerGroups[0].GetAt(nGroup)))
					{
						szValues.Add(pDatabaseTCExeVerGroup->GetID());
						nValues.Add(nGroup);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CCF_STATUS)))
			{
				EnumTCFunctionStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TCP_PACKID)))
			{
				for (nPacket = 0, nPackets = (INT)pView->m_pDatabaseTCPackets[0].GetSize(); nPacket < nPackets; nPacket++)
				{
					if ((pDatabaseTCPacket = pView->m_pDatabaseTCPackets[0].GetAt(nPacket)))
					{
						szValues.Add(pDatabaseTCPacket->GetTag());
						nValues.Add(nPacket);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TCP_HFLG)))
			{
				EnumTCPacketDataFieldHeaderFlags(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TCP_APID)))
			{
				EnumTCPacketAPIDs(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)))
			{
				EnumTCPacketDataSizes(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TCP_STATUS)))
			{
				EnumTCPacketStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)))
		{
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CDF_ELTYPE)); )
			{
				EnumTCFunctionElementTypes(szValues, nValues);
				break;
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CDF_VTYPE)); )
			{
				EnumTCFunctionElementValueInterpretations(szValues, nValues);
				break;
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CDF_RADIX)); )
			{
				EnumTCFunctionElementValueRadixes(szValues, nValues);
				break;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)))
		{
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE)); )
			{
				EnumTCPacketParameterTypes(szValues, nValues);
				break;
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCDF_VTYPE)); )
			{
				EnumTCPacketParameterValueInterpretations(szValues, nValues);
				break;
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCDF_RADIX)); )
			{
				EnumTCPacketParameterValueRadixes(szValues, nValues);
				break;
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCDF_CODING)); )
			{
				EnumTCPacketParameterValueCodings(szValues, nValues);
				break;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PVP_ID)))
			{
				for (nGroup = 0, nGroups = (INT)pView->m_pDatabaseTCPreExeGroups[0].GetSize(); nGroup < nGroups; nGroup++)
				{
					if ((pDatabaseTCPreExeGroup = pView->m_pDatabaseTCPreExeGroups[0].GetAt(nGroup)))
					{
						szValues.Add(pDatabaseTCPreExeGroup->GetID());
						nValues.Add(nGroup);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PVP_STATUS)))
			{
				EnumTCPreExeGroupStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CVP_ID)))
			{
				for (nGroup = 0, nGroups = (INT)pView->m_pDatabaseTCExeVerGroups[0].GetSize(); nGroup < nGroups; nGroup++)
				{
					if ((pDatabaseTCExeVerGroup = pView->m_pDatabaseTCExeVerGroups[0].GetAt(nGroup)))
					{
						szValues.Add(pDatabaseTCExeVerGroup->GetID());
						nValues.Add(nGroup);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CVP_STATUS)))
			{
				EnumTCExeVerGroupStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PEV_INTER)))
			{
				EnumTCPreExeGroupParameterInterpretations(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CEV_EVTYPE)))
			{
				EnumTCExeVerGroupParameterTypes(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CEV_INTER)))
			{
				EnumTCExeVerGroupParameterInterpretations(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CEV_STAGE)))
			{
				EnumTCExeVerGroupParameterStages(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCPS_NAME)))
			{
				for (nSet = 0, nSets = (INT)pView->m_pDatabaseTCParameterSets[0].GetSize(); nSet < nSets; nSet++)
				{
					if ((pDatabaseTCParameterSet = pView->m_pDatabaseTCParameterSets[0].GetAt(nSet)))
					{
						szValues.Add(pDatabaseTCParameterSet->GetName());
						nValues.Add(nSet);
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPS_NAME)))
			{
				for (nSet = 0, nSets = (INT)pView->m_pDatabaseTCParameterSets[0].GetSize(); nSet < nSets; nSet++)
				{
					if ((pDatabaseTCParameterSet = pView->m_pDatabaseTCParameterSets[0].GetAt(nSet)))
					{
						szValues.Add(pDatabaseTCParameterSet->GetName());
						nValues.Add(nSet);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPS_STATUS)))
			{
				EnumTCParameterSetStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)))
		{
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPSP_VTYPE)); )
			{
				EnumTCParameterSetItemValueInterpretations(szValues, nValues);
				break;
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPSP_RADIX)); )
			{
				EnumTCParameterSetItemValueRadixes(szValues, nValues);
				break;
			}
		}
	}
	if (nComponent == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CSF_NAME)))
			{
				for (nSequence = 0, nSequences = (INT)pView->m_pDatabaseTCSequences[0].GetSize(); nSequence < nSequences; nSequence++)
				{
					if ((pDatabaseTCSequence = (nSequence != pView->m_nDatabaseTCSequenceIndex) ? pView->m_pDatabaseTCSequences[0].GetAt(nSequence) : (CDatabaseTCSequence *)NULL))
					{
						szValues.Add(pDatabaseTCSequence->GetName());
						nValues.Add(nSequence);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CSF_STATUS)))
			{
				EnumTCSequenceStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CSS_TYPE))) EnumTCSequenceEntryTypes(szValues, nValues);
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CSS_TCTYPE))) EnumTCSequenceEntrySubTypes(szValues, nValues);
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CSS_GROUP))) EnumTCSequenceEntryGroupFlags(szValues, nValues);
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL))) EnumTCSequenceEntryBlockFlags(szValues, nValues);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CSP_VTYPE))) EnumTCSequenceParameterValueTypes(szValues, nValues);
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CSP_CATEG))) EnumTCSequenceParameterCategories(szValues, nValues);
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CSP_CODING))) EnumTCSequenceParameterCodings(szValues, nValues);
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CSP_RADIX))) EnumTCSequenceParameterValueRadixes(szValues, nValues);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_SDF_VALTYPE))) EnumTCSequenceEntryParameterValueTypes(szValues, nValues);
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_SDF_VALRADIX))) EnumTCSequenceEntryParameterValueRadixes(szValues, nValues);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_BCF_CNAME)))
			{
				for (nBlock = 0, nBlocks = (INT)pView->m_pDatabaseTCFunctionBlocks[0].GetSize(); nBlock < nBlocks; nBlock++)
				{
					if ((pDatabaseTCFunctionBlock = pView->m_pDatabaseTCFunctionBlocks[0].GetAt(nBlock)))
					{
						szValues.Add(pDatabaseTCFunctionBlock->GetName());
						nValues.Add(nBlock);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_BCF_INTER)))
			{
				EnumTCFunctionBlockInterpretations(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_BCF_STATUS)))
			{
				EnumTCFunctionBlockStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_BCCF_INTER)))
			{
				EnumTCFunctionBlockElementInterpretations(szValues, sValues);
				nValues = sValues;
			}
		}
	}
	if (nComponent == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)))
			{
				for (nProcessor = 0, nProcessors = (INT)pView->m_pDatabaseOBProcessors[0].GetSize(); nProcessor < nProcessors; nProcessor++)
				{
					if ((pDatabaseOBProcessor = (nProcessor != pView->m_nDatabaseOBProcessorIndex) ? pView->m_pDatabaseOBProcessors[0].GetAt(nProcessor) : (CDatabaseOBProcessor *)NULL))
					{
						szValues.Add(pDatabaseOBProcessor->GetName());
						nValues.Add(nProcessor);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GEN_PATCHTC)))
			{
				for (nFunction = 0, nFunctions = (INT)GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
				{
					if ((pDatabaseTCFunction = GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
					{
						szFunction.Format(STRING(IDS_DATABASE_TABLE_GEN_TCFUNCTION_FORMAT), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCFunction->GetDescription());
						szValues.Add(szFunction);
						nValues.Add(nFunction);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GEN_DUMPTC)))
			{
				for (nFunction = 0, nFunctions = (INT)GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
				{
					if ((pDatabaseTCFunction = GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
					{
						szFunction.Format(STRING(IDS_DATABASE_TABLE_GEN_TCFUNCTION_FORMAT), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCFunction->GetDescription());
						szValues.Add(szFunction);
						nValues.Add(nFunction);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GEN_TMPKT)))
			{
				for (nPacket = 0, nPackets = (INT)GetTMPackets()->GetSize(); nPacket < nPackets; nPacket++)
				{
					if ((pDatabaseTMPacket = GetTMPackets()->GetAt(nPacket)) != (CDatabaseTMPacket *)NULL)
					{
						szPacket.Format(STRING(IDS_DATABASE_TABLE_GEN_TMPACKET_FORMAT), (LPCTSTR)pDatabaseTMPacket->GetTag(), (LPCTSTR)pDatabaseTMPacket->GetDescription());
						szValues.Add(szPacket);
						nValues.Add(nPacket);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GEN_STATUS)))
			{
				EnumOBProcessorStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_MAD_TYPE)))
			{
				EnumOBProcessorMemoryAreaTypes(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_MAD_PATCHABLE)))
			{
				EnumOBProcessorMemoryAreaPatchFlags(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_MAD_DUMPABLE)))
			{
				EnumOBProcessorMemoryAreaDumpFlags(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_MAD_UPDATE)))
			{
				EnumOBProcessorMemoryAreaUpdateFlags(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_MAD_INHIBIT)))
			{
				EnumOBProcessorMemoryAreaInhibitFlags(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)))
		{
			for (nImage = 0, nImages = (INT)pView->m_pDatabaseOBProcessorMemoryImages[0].GetSize(); nImage < nImages; nImage++)
			{
				if ((pDatabaseOBProcessorMemoryImage = pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(nImage)))
				{
					szValues.Add(pDatabaseOBProcessorMemoryImage->GetName());
					nValues.Add(nImage);
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CAT_COMPLETE)))
			{
				EnumOBProcessorMemoryAreaCatalogueEntryFlags(szValues, sValues);
				nValues = sValues;
			}
		}
	}
	if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_NAME)))
			{
				for (nParameter = 0, nParameters = (INT)pView->m_pDatabaseTMParameters[0].GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(nParameter)))
					{
						szValues.Add(pDatabaseTMParameter->GetTag());
						nValues.Add(nParameter);
					}
				}
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_NATURE)); )
			{
				EnumTMParameterNatures(szValues, nValues);
				break;
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_CATEG)); )
			{
				EnumTMParameterCategories(szValues, nValues);
				break;
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_TYPE)); )
			{
				EnumTMParameterTypes(szValues, nValues);
				break;
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_CODING)); )
			{
				EnumTMParameterCodings(szValues, nValues);
				break;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_VALID)))
			{
				for (nParameter = 0, nParameters = (INT)pView->m_pDatabaseTMParameters[0].GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
					{
						szParameter.Format(STRING(IDS_DATABASE_TABLE_PCF_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
						szValues.Add(szParameter);
						nValues.Add(nParameter);
					}
				}
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_INTER)); )
			{
				EnumTMParameterInterpretations(szValues, nValues);
				break;
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_TRGTYP)); )
			{
				EnumTMParameterTriggerTypes(szValues, nValues);
				break;
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_OBSPAR)); )
			{
				EnumTMParameterOBSTypes(szValues, nValues);
				break;
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_USECON)); )
			{
				EnumTMParameterConsistencyChecksFlags(szValues, nValues);
				break;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_STATUS)))
			{
				EnumTMParameterStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CAL_NAME)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTMNumCalTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTMNumCalTable = pView->m_pDatabaseTMNumCalTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTMNumCalTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CAL_STATUS)))
			{
				EnumTMNumCalTableStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TXF_NAME)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTMTxtCalTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTMTxtCalTable = pView->m_pDatabaseTMTxtCalTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTMTxtCalTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TXF_STATUS)))
			{
				EnumTMTxtCalTableStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_OCF_NAME)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTMNumOolTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTMNumOolTable = pView->m_pDatabaseTMNumOolTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTMNumOolTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_OCF_INTER)))
			{
				EnumTMNumOolTableInterpretations(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_OCF_CODING)))
			{
				EnumTMNumOolTableCodings(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_OCF_RADIX)))
			{
				EnumTMNumOolTableRadixes(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_OCF_STATUS)))
			{
				EnumTMNumOolTableStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_FXF_NAME)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTMTxtOolTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTMTxtOolTable = pView->m_pDatabaseTMTxtOolTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTMTxtOolTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_FXF_INTER)))
			{
				EnumTMTxtOolTableInterpretations(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_FXF_RADIX)))
			{
				EnumTMTxtOolTableRadixes(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_FXF_STATUS)))
			{
				EnumTMTxtOolTableStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_OCFP_TYPE)))
			{
				EnumTMNumOolTableLimitTypes(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_FXFP_TYPE)))
			{
				EnumTMTxtOolTableLimitTypes(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCAL_NAME)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTMNumCalTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTMNumCalTable = pView->m_pDatabaseTMNumCalTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTMNumCalTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCAL_VALID)))
			{
				for (nParameter = 0, nParameters = (INT)pView->m_pDatabaseTMParameters[0].GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
					{
						szParameter.Format(STRING(IDS_DATABASE_TABLE_PCAL_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
						szValues.Add(szParameter);
						nValues.Add(nParameter);
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PTXF_NAME)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTMTxtCalTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTMTxtCalTable = pView->m_pDatabaseTMTxtCalTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTMTxtCalTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PTXF_VALID)))
			{
				for (nParameter = 0, nParameters = (INT)pView->m_pDatabaseTMParameters[0].GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
					{
						szParameter.Format(STRING(IDS_DATABASE_TABLE_PTXF_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
						szValues.Add(szParameter);
						nValues.Add(nParameter);
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_POCF_NAME)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTMNumOolTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTMNumOolTable = pView->m_pDatabaseTMNumOolTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTMNumOolTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_POCF_VALID)))
			{
				for (nParameter = 0, nParameters = (INT)pView->m_pDatabaseTMParameters[0].GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
					{
						szParameter.Format(STRING(IDS_DATABASE_TABLE_POCF_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
						szValues.Add(szParameter);
						nValues.Add(nParameter);
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PFXF_NAME)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTMTxtOolTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTMTxtOolTable = pView->m_pDatabaseTMTxtOolTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTMTxtOolTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PFXF_VALID)))
			{
				for (nParameter = 0, nParameters = (INT)pView->m_pDatabaseTMParameters[0].GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(nParameter)) != (CDatabaseTMParameter *)NULL)
					{
						szParameter.Format(STRING(IDS_DATABASE_TABLE_PFXF_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
						szValues.Add(szParameter);
						nValues.Add(nParameter);
					}
				}
			}
		}
	}
	if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPC_PNAME)))
			{
				for (nParameter = 0, nParameters = (INT)pView->m_pDatabaseTCParameters[0].GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(nParameter)))
					{
						szValues.Add(pDatabaseTCParameter->GetTag());
						nValues.Add(nParameter);
					}
				}
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPC_CODING)); )
			{
				EnumTCParameterCodings(szValues, nValues);
				break;
			}
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPC_CATEG)); )
			{
				EnumTCParameterCategories(szValues, nValues);
				break;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPC_CALREF)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTCNumCalTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTCNumCalTable = pView->m_pDatabaseTCNumCalTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTCNumCalTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPC_TXFREF)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTCTxtCalTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTCTxtCalTable = pView->m_pDatabaseTCTxtCalTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTCTxtCalTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPC_OCFREF)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTCNumOolTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTCNumOolTable = pView->m_pDatabaseTCNumOolTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTCNumOolTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPC_FXFREF)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTCTxtOolTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTCTxtOolTable = pView->m_pDatabaseTCTxtOolTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTCTxtOolTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPC_STATUS)))
			{
				EnumTCParameterStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CAL_NAME)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTCNumCalTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTCNumCalTable = pView->m_pDatabaseTCNumCalTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTCNumCalTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CAL_STATUS)))
			{
				EnumTCNumCalTableStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TXF_NAME)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTCTxtCalTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTCTxtCalTable = pView->m_pDatabaseTCTxtCalTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTCTxtCalTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TXF_STATUS)))
			{
				EnumTCTxtCalTableStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_OCF_NAME)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTCNumOolTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTCNumOolTable = pView->m_pDatabaseTCNumOolTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTCNumOolTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_OCF_INTER)))
			{
				EnumTCNumOolTableInterpretations(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_OCF_CODING)))
			{
				EnumTCNumOolTableCodings(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_OCF_RADIX)))
			{
				EnumTCNumOolTableRadixes(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_OCF_STATUS)))
			{
				EnumTCNumOolTableStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_FXF_NAME)))
			{
				for (nTable = 0, nTables = (INT)pView->m_pDatabaseTCTxtOolTables[0].GetSize(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTCTxtOolTable = pView->m_pDatabaseTCTxtOolTables[0].GetAt(nTable)))
					{
						szValues.Add(pDatabaseTCTxtOolTable->GetName());
						nValues.Add(nTable);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_FXF_INTER)))
			{
				EnumTCTxtOolTableInterpretations(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_FXF_RADIX)))
			{
				EnumTCTxtOolTableRadixes(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_FXF_STATUS)))
			{
				EnumTCTxtOolTableStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_OCFP_TYPE)))
			{
				EnumTCNumOolTableLimitTypes(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_FXFP_TYPE)))
			{
				EnumTCTxtOolTableLimitTypes(szValues, sValues);
				nValues = sValues;
			}
		}
	}
	if (nComponent == DATABASE_COMPONENT_AND)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DPF_NUMBER)))
			{
				for (nLayout = 0, nLayouts = (INT)pView->m_pANDLayouts[0].GetSize(); nLayout < nLayouts; nLayout++)
				{
					if ((pANDLayout = pView->m_pANDLayouts[0].GetAt(nLayout)))
					{
						szValues.Add(pANDLayout->GetName());
						nValues.Add(nLayout);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DPF_STATUS)))
			{
				EnumANDStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)))
		{
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DPFP_VALMODE)); )
			{
				EnumANDParameterModes(szValues, nValues);
				break;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DPFP_VALALIGN)))
			{
				EnumANDParameterAlignments(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)))
		{
			EnumANDColumns(szValues, sValues);
			nValues = sValues;
		}
	}
	if (nComponent == DATABASE_COMPONENT_GRD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_NUMBER)))
			{
				for (nLayout = 0, nLayouts = (INT)pView->m_pGRDLayouts[0].GetSize(); nLayout < nLayouts; nLayout++)
				{
					if ((pGRDLayout = pView->m_pGRDLayouts[0].GetAt(nLayout)))
					{
						szValues.Add(pGRDLayout->GetName());
						nValues.Add(nLayout);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_TYPE)))
			{
				EnumGRDTypes(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE)))
			{
				EnumGRDPlotTypes(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_MODE)))
			{
				EnumGRDPlotModes(szValues, sValues);
				nValues = sValues;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_STATUS)))
			{
				EnumGRDStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)))
		{
			for (; !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPFP_VALMODE)); )
			{
				EnumGRDParameterModes(szValues, nValues);
				break;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)))
		{
			EnumGRDColumns(szValues, sValues);
			nValues = sValues;
		}
	}
	if (nComponent == DATABASE_COMPONENT_POD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PPF_NUMBER)))
			{
				for (nLayout = 0, nLayouts = (INT)pView->m_pPODLayouts[0].GetSize(); nLayout < nLayouts; nLayout++)
				{
					if ((pPODLayout = pView->m_pPODLayouts[0].GetAt(nLayout)))
					{
						szValues.Add(pPODLayout->GetName());
						nValues.Add(nLayout);
					}
				}
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PPF_STATUS)))
			{
				EnumPODStatus(szValues, sValues);
				nValues = sValues;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)))
		{
			EnumPODColumns(szValues, sValues);
			nValues = sValues;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)))
		{
			EnumPODExpressionStack(szValues, sValues);
			nValues = sValues;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)))
		{
			EnumPODFunctions(szValues, sValues);
			nValues = sValues;
		}
	}
	return((INT)szValues.GetSize());
}

BOOL CALTELDatabaseEngine::GetTableFieldLimits(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszField, INT &nLow, INT &nHigh) CONST
{
	INT  nRange[2];
	ULONGLONG  nComponent;

	for (nLow = nHigh = 0; (nComponent = DATABASECOMPONENTFROMCODE(pView->GetComponent())) == DATABASE_COMPONENT_TMPACKET; )
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_SMPRT)))
			{
				GetTMPacketTransmissionRateRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_VALID)))
			{
				GetTMPacketTransmissionRetriesRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_LENG)))
			{
				GetTMPacketDataSizeRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_VCID)))
			{
				GetTMPacketVirtualChannelRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PLF_OFFBY)))
			{
				GetTMPacketParameterBytePositionRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PLF_OFFBI)))
			{
				GetTMPacketParameterBitPositionRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PLF_NBOCC)))
			{
				GetTMPacketParameterOccurrenceCountRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PLF_LGOCC)))
			{
				GetTMPacketParameterOccurrenceIntervalRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_OFFSET)))
			{
				GetTMPacketHeaderTMTypePositionRange(nLow, nHigh, nRange[0], nRange[1]);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_LENGTH)))
			{
				GetTMPacketHeaderTMTypePositionRange(nRange[0], nRange[1], nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_OFFSET)))
			{
				GetTMPacketHeaderTMIDPositionRange(nLow, nHigh, nRange[0], nRange[1]);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_LENGTH)))
			{
				GetTMPacketHeaderTMIDPositionRange(nRange[0], nRange[1], nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_OFFSET)))
			{
				GetTMPacketHeader3DiscPositionRange(nLow, nHigh, nRange[0], nRange[1]);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_LENGTH)))
			{
				GetTMPacketHeader3DiscPositionRange(nRange[0], nRange[1], nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_OFFSET)))
			{
				GetTMPacketHeaderTimestampPositionRange(nLow, nHigh, nRange[0], nRange[1]);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_LENGTH)))
			{
				GetTMPacketHeaderTimestampPositionRange(nRange[0], nRange[1], nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_STR_PERIOD)))
			{
				GetTMPacketStreamPeriodRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_STR_TIMEOUT)))
			{
				GetTMPacketStreamTimeoutRange(nLow, nHigh);
				return TRUE;
			}
		}
		break;
	}
	if (nComponent == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CCF_ADD)))
			{
				GetTCFunctionTCIDRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TCP_LENG)))
			{
				GetTCPacketDataSizeRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CDF_ELLEN)))
			{
				GetTCFunctionElementValueBitWidthRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CDF_BITOFF)))
			{
				GetTCFunctionElementValueBitOffsetRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCDF_ELLEN)))
			{
				GetTCPacketParameterValueBitWidthRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCDF_BITOFF)))
			{
				GetTCPacketParameterValueBitOffsetRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CVP_NMBST)))
			{
				GetTCExeVerGroupStagesRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPSP_BITOFF)))
			{
				GetTCParameterSetItemValueBitOffsetRange(nLow, nHigh);
				return TRUE;
			}
		}
	}
	if (nComponent == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CSP_LENGTH)))
			{
				GetTCParameterBitWidthRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_SDF_BITOFF)))
			{
				GetTCSequenceEntryParameterBitOffsetRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)))
			{
				GetTCFunctionBlockByteOffsetRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)))
			{
				GetTCFunctionBlockMaxLengthRange(nLow, nHigh);
				return TRUE;
			}
		}
	}
	if (nComponent == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GEN_INTERVAL)))
			{
				GetOBProcessorDumpIntervalRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH)))
			{
				GetOBProcessorDumpCountRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_MEM_BITOFF)))
			{
				GetOBProcessorMemoryAreaBlockBitOffsetRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_MEM_WIDTH)))
			{
				GetOBProcessorMemoryAreaBlockBitWidthRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CRC_LENGTH)))
			{
				GetOBProcessorMemoryAreaCheckSumLengthRange(nLow, nHigh);
				return TRUE;
			}
		}
	}
	if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_WIDTH)))
			{
				GetTMParameterBitWidthRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CAL_NBPNT)))
			{
				GetTMNumCalTablePointsRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TXF_NBTXT)))
			{
				GetTMTxtCalTablePointsRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TXFP_FROM)) || !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TXFP_TO)))
			{
				nLow = INT_MIN;
				nHigh = INT_MAX;
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)))
			{
				GetTMNumOolTableCheckCountRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)))
			{
				GetTMTxtOolTableCheckCountRange(nLow, nHigh);
				return TRUE;
			}
		}
	}
	if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPC_LENGTH)))
			{
				GetTCParameterBitWidthRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CAL_NBPNT)))
			{
				GetTCNumCalTablePointsRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TXF_NBTXT)))
			{
				GetTCTxtCalTablePointsRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TXFP_FROM)) || !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_TXFP_TO)))
			{
				nLow = INT_MIN;
				nHigh = INT_MAX;
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)))
			{
				GetTCNumOolTableCheckCountRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)))
			{
				GetTCTxtOolTableCheckCountRange(nLow, nHigh);
				return TRUE;
			}
		}
	}
	if (nComponent == DATABASE_COMPONENT_AND)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DPFP_ROW)))
			{
				GetANDParameterRowRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DPFP_COL)))
			{
				GetANDParameterColRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DPFP_COMM)))
			{
				GetANDParameterOccurrenceRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DPFP_VALCHARS)))
			{
				GetANDParameterDigitsRange(nLow, nHigh);
				return TRUE;
			}
		}
	}
	if (nComponent == DATABASE_COMPONENT_GRD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_DAYS)))
			{
				GetGRDDurationDaysRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_HOURS)))
			{
				GetGRDDurationHoursRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_MINUTES)))
			{
				GetGRDDurationMinutesRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_INTERVAL)))
			{
				GetGRDIntervalRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_UPDATE)))
			{
				GetGRDUpdateIntervalRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_WIDTH)))
			{
				GetGRDPlotWidthRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_HEIGHT)))
			{
				GetGRDPlotHeightRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_XGRIDS)))
			{
				GetGRDXGridsRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_YGRIDS)))
			{
				GetGRDYGridsRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_XTICKS)))
			{
				GetGRDXTicksRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_YTICKS)))
			{
				GetGRDYTicksRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH)))
			{
				GetGRDGridsWidthRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH)))
			{
				GetGRDTicksWidthRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS)))
			{
				GetGRDParametersRange(nLow, nHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPFP_POSITION)))
			{
				GetGRDParameterPositionRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPFP_COMM)))
			{
				GetGRDParameterOccurrenceRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPFP_VALCHARS)))
			{
				GetGRDParameterDigitsRange(nLow, nHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH)))
			{
				GetGRDParameterLineWidthRange(nLow, nHigh);
				return TRUE;
			}
		}
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::GetTableFieldLimits(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszField, UINT &uLow, UINT &uHigh) CONST
{
	UINT  nRange[2][2];
	ULONGLONG  nComponent;

	for (uLow = uHigh = 0; (nComponent = DATABASECOMPONENTFROMCODE(pView->GetComponent())) == DATABASE_COMPONENT_TMPACKET; )
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_TMID)))
			{
				GetTMPacketTMIDRange(uLow, uHigh);
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_3VAL)))
			{
				GetTMPacket3DiscRange(uLow, uHigh);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_STR_TMID)))
			{
				GetTMPacketStreamTMIDRange(uLow, uHigh);
				return TRUE;
			}
		}
		break;
	}
	if (nComponent == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CEV_SWND)))
			{
				GetTCExeVerGroupParameterTimeWindowIntervalRange(uLow, uHigh);
				return TRUE;
			}
		}
	}
	if (nComponent == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE)) || !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE))) return GetOBProcessorAddressRange(uLow, uHigh, nRange[1][0], nRange[1][1]);
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GEN_STARTADDR)) || !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GEN_ENDADDR))) return GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], uLow, uHigh);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_MEM_PAGE))) return GetOBProcessorMemoryAreaBlockAddressRange(uLow, uHigh, nRange[1][0], nRange[1][1]);
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_MEM_ADDRESS))) return GetOBProcessorMemoryAreaBlockAddressRange(nRange[0][0], nRange[0][1], uLow, uHigh);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_IMG_PAGE))) return GetOBProcessorMemoryImageBlockAddressRange(uLow, uHigh, nRange[1][0], nRange[1][1]);
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_IMG_ADDRESS))) return GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], uLow, uHigh);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_IMGP_PAGE))) return GetOBProcessorMemoryImageBlockAddressRange(uLow, uHigh, nRange[1][0], nRange[1][1]);
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_IMGP_ADDRESS))) return GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], uLow, uHigh);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CRC_PAGE))) return GetOBProcessorMemoryAreaCheckSumAddressRange(uLow, uHigh, nRange[1][0], nRange[1][1]);
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CRC_START)) || !lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CRC_END))) return GetOBProcessorMemoryAreaCheckSumAddressRange(nRange[0][0], nRange[0][1], uLow, uHigh);
		}
	}
	if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_INTM)))
			{
				GetTMParameterInterrogationInstructionRange(uLow, uHigh);
				return TRUE;
			}
		}
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::GetTableFieldLimits(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszField, double &fLow, double &fHigh) CONST
{
	ULONGLONG  nComponent;

	for (fLow = fHigh = 0; (nComponent = DATABASECOMPONENTFROMCODE(pView->GetComponent())) == DATABASE_COMPONENT_TMPARAMETER; )
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CALP_XVAL)))
			{
				fLow = -DBL_MAX;
				fHigh = DBL_MAX;
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CALP_YVAL)))
			{
				fLow = -DBL_MAX;
				fHigh = DBL_MAX;
				return TRUE;
			}
		}
		break;
	}
	if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)))
		{
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CALP_XVAL)))
			{
				fLow = -DBL_MAX;
				fHigh = DBL_MAX;
				return TRUE;
			}
			if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CALP_YVAL)))
			{
				fLow = -DBL_MAX;
				fHigh = DBL_MAX;
				return TRUE;
			}
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::GetTableContext(CONST CDatabaseTableView *pView, LPCTSTR pszTable, CString &szTable, UINT &nControlID, CString &szValue) CONST
{
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;

	for (szTable.Empty(), szValue.Empty(), nControlID = (UINT)-1; DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET; )
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PMF)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_PMF_PACKID), STRING(IDS_DATABASE_TABLE_PMF_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
		break;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CCF)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CCF_CNAME), STRING(IDS_DATABASE_TABLE_CCF_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_TCP)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_TCP_PACKID), STRING(IDS_DATABASE_TABLE_TCP_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PVP)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_PVP_ID), STRING(IDS_DATABASE_TABLE_PVP_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CVP)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CVP_ID), STRING(IDS_DATABASE_TABLE_CVP_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CPS)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CPS_NAME), STRING(IDS_DATABASE_TABLE_CPS_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CSF)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CSF_NAME), STRING(IDS_DATABASE_TABLE_CSF_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_BCF)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_BCF_CNAME), STRING(IDS_DATABASE_TABLE_BCF_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_GEN)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR), STRING(IDS_DATABASE_TABLE_GEN_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PIMG)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(pTable->GetRows() - 1, pTable->GetColumns() - 1)))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_PCF_NAME), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CAL_NAME), STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_TXF_NAME), STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_OCF_NAME), STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_FXF_NAME), STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CPC)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CPC_PNAME), STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CAL_NAME), STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_TXF_NAME), STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_OCF_NAME), STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_FXF_NAME), STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_DPF)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_DPF_NUMBER), STRING(IDS_DATABASE_TABLE_DPF_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_GPF)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_GPF_NUMBER), STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
			return FALSE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF)) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_PPF_NUMBER), STRING(IDS_DATABASE_TABLE_PPF_TITLEITEM_VALUE))))
			{
				szTable = pTable->GetName();
				szValue = pCell->GetText();
				nControlID = pCell->GetControlID();
				return TRUE;
			}
		}
	}
	return FALSE;
}

INT CALTELDatabaseEngine::EnumTableUpdates(CONST CDatabaseTableView *pView, UINT nControlID, CStringArray &szTables) CONST
{
	for (szTables.RemoveAll(); DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET; )
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_PACKID)) || nControlID == (UINT)-1)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_PMF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PLF));
		}
		break;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)) || nControlID == (UINT)-1)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CCF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_TCP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CDF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PCDF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PVP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CVP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PEV));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CEV));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PCPS));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CPS));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CPSP));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_PACKID)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCPID)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_TCP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PCDF));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_ID)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_PVPID)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_PVP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PEV));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_ID)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CVPID)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CVP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CEV));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCPS), STRING(IDS_DATABASE_TABLE_PCPS_NAME)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CPS));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CPSP));
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME)) || nControlID == (UINT)-1)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CSF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CSS));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CSP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_SDF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_BCF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_BCCF));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_BCF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_BCCF));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_CNAME)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_BCF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_BCCF));
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)) || nControlID == (UINT)-1)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_GEN));
			szTables.Add(STRING(IDS_DATABASE_TABLE_MAD));
			szTables.Add(STRING(IDS_DATABASE_TABLE_MEM));
			szTables.Add(STRING(IDS_DATABASE_TABLE_IMG));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PIMG));
			szTables.Add(STRING(IDS_DATABASE_TABLE_IMGP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CRC));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CAT));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PIMG), STRING(IDS_DATABASE_TABLE_PIMG_MNAME)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_PIMG));
			szTables.Add(STRING(IDS_DATABASE_TABLE_IMGP));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_TYPE))) szTables.Add(STRING(IDS_DATABASE_TABLE_IMG));
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)) || nControlID == (UINT)-1)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_PCF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PCAL));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PTXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_POCF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PFXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CAL));
			szTables.Add(STRING(IDS_DATABASE_TABLE_TXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_OCF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_FXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CALP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_TXFP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_OCFP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_FXFP));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CATEG)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_PCAL));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PTXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_POCF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PFXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CAL));
			szTables.Add(STRING(IDS_DATABASE_TABLE_TXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_OCF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_FXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CALP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_TXFP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_OCFP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_FXFP));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCAL), STRING(IDS_DATABASE_TABLE_PCAL_NAME)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CAL));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CALP));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PTXF), STRING(IDS_DATABASE_TABLE_PTXF_NAME)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_TXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_TXFP));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_POCF), STRING(IDS_DATABASE_TABLE_POCF_NAME)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_OCF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_OCFP));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PFXF), STRING(IDS_DATABASE_TABLE_PFXF_NAME)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_FXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_FXFP));
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)) || nControlID == (UINT)-1)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CPC));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CAL));
			szTables.Add(STRING(IDS_DATABASE_TABLE_TXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_OCF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_FXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CALP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_TXFP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_OCFP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_FXFP));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CATEG)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CAL));
			szTables.Add(STRING(IDS_DATABASE_TABLE_TXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_OCF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_FXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CALP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_TXFP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_OCFP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_FXFP));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CALREF)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CAL));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CALP));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_TXFREF)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_TXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_TXFP));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_OCFREF)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_OCF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_OCFP));
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_FXFREF)))
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_FXF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_FXFP));
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_NUMBER)) || nControlID == (UINT)-1)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_DPF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_DPFP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_DPF_LAYOUT));
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_NUMBER)) || nControlID == (UINT)-1)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_GPF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_GPFP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_GPF_LAYOUT));
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_NUMBER)) || nControlID == (UINT)-1)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_PPF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PPF_LAYOUT));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS));
		}
	}
	return((INT)szTables.GetSize());
}

BOOL CALTELDatabaseEngine::GetTableUpdateContents(CONST CDatabaseTableView *pView, LPCTSTR pszTable, UINT nControlID, LPCTSTR pszValue, CString &szItem, CStringArray &szContents) CONST
{
	INT  nID;
	INT  nIndex;
	CString  szValue;
	CStringArray  szSets;
	CStringArray  szCalTables[2];
	CStringArray  szOolTables[2];
	CTableViewCell  *pCell;
	CTableViewObject  *pTable[2];
	TABLEVIEWCELLVALUE  sValue;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCSequence  *pDatabaseTCSequence;
	CDatabaseOBProcessor  *pDatabaseOBProcessor;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCParameters  pDatabaseTCParameters;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock;
	CDatabaseTCSequenceEntry  *pDatabaseTCSequenceEntry;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;
	CANDLayout  *pANDLayout;
	CGRDLayout  *pGRDLayout;
	CPODLayout  *pPODLayout;

	for (szContents.RemoveAll(); DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET; )
	{
		for (nID = TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_PACKID)); nControlID == nID; )
		{
			if (pView->m_pDatabaseTMPackets[0].Find((szItem = pszValue)) >= 0 || !lstrlen(pszValue)) break;
			return FALSE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseTMPacket = pView->m_pDatabaseTMPackets[0].GetAt(pView->m_pDatabaseTMPackets[0].Find(pszValue))))
			{
				ConstructTMPacketTableContents(pView, pDatabaseTMPacket, szContents);
				return TRUE;
			}
			ConstructTMPacketTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseTMPacket = pView->m_pDatabaseTMPackets[0].GetAt(pView->m_pDatabaseTMPackets[0].Find(pszValue))))
			{
				ConstructTMPacketParametersTableContents(pView, pDatabaseTMPacket, -1, szContents);
				return TRUE;
			}
			ConstructTMPacketParametersTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)) && (nControlID == (UINT)-1 || !nControlID))
		{
			ConstructTMPacketHeadersTableContents(pView, -1, szContents);
			return TRUE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)) && (nControlID == (UINT)-1 || !nControlID))
		{
			ConstructTMPacketStreamsTableContents(pView, -1, szContents);
			return TRUE;
		}
		return FALSE;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		for (nID = TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)); nControlID == nID; )
		{
			if (pView->m_pDatabaseTCFunctions[0].Find((szItem = pszValue)) >= 0 || !lstrlen(pszValue)) break;
			return FALSE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pszValue))))
			{
				ConstructTCFunctionTableContents(pView, pDatabaseTCFunction, szContents);
				return TRUE;
			}
			ConstructTCFunctionTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)))
		{
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)))
			{
				if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CCF))))
				{
					if ((pCell = pTable[0]->FindCell((UINT)nID)) != (CTableViewCell *)NULL)
					{
						if ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pCell->GetText()))))
						{
							if ((pDatabaseTCPacket = pView->m_pDatabaseTCPackets[0].GetAt(pView->m_pDatabaseTCPackets[0].Find(pDatabaseTCFunction->GetTCPacket()))))
							{
								ConstructTCPacketTableContents(pView, pDatabaseTCPacket, szContents);
								return TRUE;
							}
						}
					}
				}
				ConstructTCPacketTableContents(pView, szContents);
				return TRUE;
			}
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_PACKID)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCPID)))
			{
				if ((pDatabaseTCPacket = pView->m_pDatabaseTCPackets[0].GetAt(pView->m_pDatabaseTCPackets[0].Find(pszValue))))
				{
					ConstructTCPacketTableContents(pView, pDatabaseTCPacket, szContents);
					return TRUE;
				}
				if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCPID)) || !lstrlen(pszValue))
				{
					ConstructTCPacketTableContents(pView, szContents);
					return TRUE;
				}
			}
			if (nControlID == (UINT)-1 || !nControlID)
			{
				if ((pTable[0] = pView->FindTable(pszTable)))
				{
					if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_PACKID)))))
					{
						if ((pDatabaseTCPacket = pView->m_pDatabaseTCPackets[0].GetAt(pView->m_pDatabaseTCPackets[0].Find(pCell->GetText()))))
						{
							ConstructTCPacketTableContents(pView, pDatabaseTCPacket, szContents);
							return TRUE;
						}
					}
				}
				ConstructTCPacketTableContents(pView, szContents);
				return((nControlID) ? TRUE : FALSE);
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)))
		{
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)))
			{
				if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CCF))))
				{
					if ((pCell = pTable[0]->FindCell((UINT)nID)) != (CTableViewCell *)NULL)
					{
						if ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pCell->GetText()))))
						{
							if ((pDatabaseTCPreExeGroup = pView->m_pDatabaseTCPreExeGroups[0].GetAt(pView->m_pDatabaseTCPreExeGroups[0].Find(pDatabaseTCFunction->GetPreExeGroup()))))
							{
								ConstructTCPreExeGroupsTableContents(pView, pDatabaseTCPreExeGroup, szContents);
								return TRUE;
							}
						}
					}
				}
				ConstructTCPreExeGroupsTableContents(pView, szContents);
				return TRUE;
			}
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_ID)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_PVPID)))
			{
				if ((pDatabaseTCPreExeGroup = pView->m_pDatabaseTCPreExeGroups[0].GetAt(pView->m_pDatabaseTCPreExeGroups[0].Find(pszValue))))
				{
					ConstructTCPreExeGroupsTableContents(pView, pDatabaseTCPreExeGroup, szContents);
					return TRUE;
				}
				if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_PVPID)) || !lstrlen(pszValue))
				{
					ConstructTCPreExeGroupsTableContents(pView, szContents);
					return TRUE;
				}
			}
			if (nControlID == (UINT)-1 || !nControlID)
			{
				if ((pTable[0] = pView->FindTable(pszTable)))
				{
					if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_ID)))))
					{
						if ((pDatabaseTCPreExeGroup = pView->m_pDatabaseTCPreExeGroups[0].GetAt(pView->m_pDatabaseTCPreExeGroups[0].Find(pCell->GetText()))))
						{
							ConstructTCPreExeGroupsTableContents(pView, pDatabaseTCPreExeGroup, szContents);
							return TRUE;
						}
					}
				}
				ConstructTCPreExeGroupsTableContents(pView, szContents);
				return((nControlID) ? TRUE : FALSE);
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)))
		{
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)))
			{
				if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CCF))))
				{
					if ((pCell = pTable[0]->FindCell((UINT)nID)) != (CTableViewCell *)NULL)
					{
						if ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pCell->GetText()))))
						{
							if ((pDatabaseTCExeVerGroup = pView->m_pDatabaseTCExeVerGroups[0].GetAt(pView->m_pDatabaseTCExeVerGroups[0].Find(pDatabaseTCFunction->GetExeVerGroup()))))
							{
								ConstructTCExeVerGroupsTableContents(pView, pDatabaseTCExeVerGroup, szContents);
								return TRUE;
							}
						}
					}
				}
				ConstructTCExeVerGroupsTableContents(pView, szContents);
				return TRUE;
			}
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_ID)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CVPID)))
			{
				if ((pDatabaseTCExeVerGroup = pView->m_pDatabaseTCExeVerGroups[0].GetAt(pView->m_pDatabaseTCExeVerGroups[0].Find(pszValue))))
				{
					ConstructTCExeVerGroupsTableContents(pView, pDatabaseTCExeVerGroup, szContents);
					return TRUE;
				}
				if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CVPID)) || !lstrlen(pszValue))
				{
					ConstructTCExeVerGroupsTableContents(pView, szContents);
					return TRUE;
				}
			}
			if (nControlID == (UINT)-1 || !nControlID)
			{
				if ((pTable[0] = pView->FindTable(pszTable)))
				{
					if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_ID)))))
					{
						if ((pDatabaseTCExeVerGroup = pView->m_pDatabaseTCExeVerGroups[0].GetAt(pView->m_pDatabaseTCExeVerGroups[0].Find(pCell->GetText()))))
						{
							ConstructTCExeVerGroupsTableContents(pView, pDatabaseTCExeVerGroup, szContents);
							return TRUE;
						}
					}
				}
				ConstructTCExeVerGroupsTableContents(pView, szContents);
				return((nControlID) ? TRUE : FALSE);
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)))
		{
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)))
			{
				if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CCF))))
				{
					if ((pCell = pTable[0]->FindCell((UINT)nID)) != (CTableViewCell *)NULL)
					{
						if ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pCell->GetText()))))
						{
							if ((pDatabaseTCParameterSet = (pDatabaseTCFunction->GetParameterSets(szSets) > 0) ? pView->m_pDatabaseTCParameterSets[0].GetAt(pView->m_pDatabaseTCParameterSets[0].Find(szSets.GetAt(0))) : (CDatabaseTCParameterSet *)NULL))
							{
								ConstructTCParameterSetsTableContents(pView, pDatabaseTCParameterSet, szContents);
								return TRUE;
							}
						}
					}
				}
				ConstructTCParameterSetsTableContents(pView, szContents);
				return TRUE;
			}
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCPS), STRING(IDS_DATABASE_TABLE_PCPS_NAME)))
			{
				if ((pDatabaseTCParameterSet = pView->m_pDatabaseTCParameterSets[0].GetAt(pView->m_pDatabaseTCParameterSets[0].Find(pszValue))))
				{
					ConstructTCParameterSetsTableContents(pView, pDatabaseTCParameterSet, szContents);
					return TRUE;
				}
				if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCPS), STRING(IDS_DATABASE_TABLE_PCPS_NAME)) || !lstrlen(pszValue))
				{
					ConstructTCParameterSetsTableContents(pView, szContents);
					return TRUE;
				}
			}
			if (nControlID == (UINT)-1 || !nControlID)
			{
				if ((pTable[0] = pView->FindTable(pszTable)))
				{
					if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_NAME)))))
					{
						if ((pDatabaseTCParameterSet = pView->m_pDatabaseTCParameterSets[0].GetAt(pView->m_pDatabaseTCParameterSets[0].Find(pCell->GetText()))))
						{
							ConstructTCParameterSetsTableContents(pView, pDatabaseTCParameterSet, szContents);
							return TRUE;
						}
					}
				}
				ConstructTCParameterSetsTableContents(pView, szContents);
				return((nControlID) ? TRUE : FALSE);
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pszValue))))
			{
				ConstructTCFunctionElementsTableContents(pView, pDatabaseTCFunction, -1, szContents);
				return TRUE;
			}
			ConstructTCFunctionElementsTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)))
		{
			if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_TCP))))
			{
				if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_PACKID)))))
				{
					if ((pDatabaseTCPacket = (nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_PACKID)) && nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCPID))) ? pView->m_pDatabaseTCPackets[0].GetAt(pView->m_pDatabaseTCPackets[0].Find(pCell->GetText())) : pView->m_pDatabaseTCPackets[0].GetAt(pView->m_pDatabaseTCPackets[0].Find(pszValue))))
					{
						ConstructTCPacketParametersTableContents(pView, pDatabaseTCPacket, -1, szContents);
						return TRUE;
					}
				}
			}
			ConstructTCPacketParametersTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)))
		{
			if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PVP))))
			{
				if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PVP_ID)))))
				{
					if ((pDatabaseTCPreExeGroup = (nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_ID)) && nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_PVPID))) ? pView->m_pDatabaseTCPreExeGroups[0].GetAt(pView->m_pDatabaseTCPreExeGroups[0].Find(pCell->GetText())) : pView->m_pDatabaseTCPreExeGroups[0].GetAt(pView->m_pDatabaseTCPreExeGroups[0].Find(pszValue))))
					{
						ConstructTCPreExeGroupParametersTableContents(pView, pDatabaseTCPreExeGroup, -1, szContents);
						return TRUE;
					}
				}
			}
			ConstructTCPreExeGroupParametersTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)))
		{
			if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CVP))))
			{
				if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CVP_ID)))))
				{
					if ((pDatabaseTCExeVerGroup = (nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_ID)) && nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CVPID))) ? pView->m_pDatabaseTCExeVerGroups[0].GetAt(pView->m_pDatabaseTCExeVerGroups[0].Find(pCell->GetText())) : pView->m_pDatabaseTCExeVerGroups[0].GetAt(pView->m_pDatabaseTCExeVerGroups[0].Find(pszValue))))
					{
						ConstructTCExeVerGroupParametersTableContents(pView, pDatabaseTCExeVerGroup, -1, szContents);
						return TRUE;
					}
				}
			}
			ConstructTCExeVerGroupParametersTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pszValue))))
			{
				ConstructTCParameterSetsAssociationTableContents(pView, pDatabaseTCFunction, -1, szContents);
				return TRUE;
			}
			ConstructTCParameterSetsAssociationTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)))
		{
			if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CPS))))
			{
				if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPS_NAME)))))
				{
					if ((pDatabaseTCParameterSet = (nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_NAME)) && nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCPS), STRING(IDS_DATABASE_TABLE_PCPS_NAME))) ? pView->m_pDatabaseTCParameterSets[0].GetAt(pView->m_pDatabaseTCParameterSets[0].Find(pCell->GetText())) : pView->m_pDatabaseTCParameterSets[0].GetAt(pView->m_pDatabaseTCParameterSets[0].Find(pszValue))))
					{
						ConstructTCParameterSetMembersTableContents(pView, pDatabaseTCParameterSet, -1, szContents);
						return TRUE;
					}
				}
			}
			ConstructTCParameterSetMembersTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		for (nID = TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME)); nControlID == nID; )
		{
			if (pView->m_pDatabaseTCSequences[0].Find((szItem = pszValue)) >= 0 || !lstrlen(pszValue)) break;
			return FALSE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseTCSequence = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pszValue))))
			{
				ConstructTCSequenceTableContents(pView, pDatabaseTCSequence, szContents);
				return TRUE;
			}
			ConstructTCSequenceTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseTCSequence = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pszValue))))
			{
				ConstructTCSequenceEntriesTableContents(pView, pDatabaseTCSequence, -1, szContents);
				return TRUE;
			}
			ConstructTCSequenceEntriesTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseTCSequence = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pszValue))))
			{
				ConstructTCSequenceParametersTableContents(pView, pDatabaseTCSequence, -1, szContents);
				return TRUE;
			}
			ConstructTCSequenceParametersTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseTCSequence = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pszValue))))
			{
				ConstructTCSequenceEntryParametersTableContents(pView, pDatabaseTCSequence, -1, szContents);
				return TRUE;
			}
			ConstructTCSequenceEntryParametersTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)))
		{
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME)))
			{
				if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CSF))))
				{
					if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CSS))))
					{
						if ((pCell = pTable[0]->FindCell((UINT)nID)) != (CTableViewCell *)NULL)
						{
							if ((pDatabaseTCSequence = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pCell->GetText()))))
							{
								if ((pDatabaseTCFunctionBlock = ((pDatabaseTCSequenceEntry = pDatabaseTCSequence->GetAt(max(pTable[1]->GetSelRow() - 1, 0))) && pDatabaseTCSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_FLAG_BLOCKMACRO) ? pView->m_pDatabaseTCFunctionBlocks[0].GetAt(pView->m_pDatabaseTCFunctionBlocks[0].Find(pDatabaseTCSequenceEntry->GetName())) : (CDatabaseTCFunctionBlock *)NULL))
								{
									ConstructTCSequenceFunctionBlockTableContents(pView, pDatabaseTCFunctionBlock, szContents);
									return TRUE;
								}
							}
						}
					}
				}
				ConstructTCSequenceFunctionBlockTableContents(pView, szContents);
				return TRUE;
			}
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_CNAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_IDENT)))
			{
				if ((pDatabaseTCFunctionBlock = pView->m_pDatabaseTCFunctionBlocks[0].GetAt(pView->m_pDatabaseTCFunctionBlocks[0].Find(pszValue))))
				{
					ConstructTCSequenceFunctionBlockTableContents(pView, pDatabaseTCFunctionBlock, szContents);
					return TRUE;
				}
				if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_IDENT)) || !lstrlen(pszValue))
				{
					ConstructTCSequenceFunctionBlockTableContents(pView, szContents);
					return TRUE;
				}
			}
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL)))
			{
				if ((pCell = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CSS)))) ? pTable[0]->FindCell(nControlID) : (CTableViewCell *)NULL) && pCell->TranslateText(pszValue, sValue) && sValue.Value.nValue == TCSEQUENCEENTRY_FLAG_BLOCKMACRO)
				{
					if ((pDatabaseTCFunctionBlock = pView->m_pDatabaseTCFunctionBlocks[0].GetAt(pView->m_pDatabaseTCFunctionBlocks[0].Find(pTable[0]->GetCellText(max(pTable[0]->GetSelRow(), 1), STRING(IDS_DATABASE_TABLE_CSS_IDENT))))))
					{
						ConstructTCSequenceFunctionBlockTableContents(pView, pDatabaseTCFunctionBlock, szContents);
						return TRUE;
					}
				}
				ConstructTCSequenceFunctionBlockTableContents(pView, szContents);
				return TRUE;
			}
			if (nControlID == (UINT)-1 || !nControlID)
			{
				if ((pTable[0] = pView->FindTable(pszTable)))
				{
					if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_BCF_CNAME)))))
					{
						if ((pDatabaseTCFunctionBlock = pView->m_pDatabaseTCFunctionBlocks[0].GetAt(pView->m_pDatabaseTCFunctionBlocks[0].Find(pCell->GetText()))))
						{
							ConstructTCSequenceFunctionBlockTableContents(pView, pDatabaseTCFunctionBlock, szContents);
							return TRUE;
						}
					}
				}
				ConstructTCSequenceFunctionBlockTableContents(pView, szContents);
				return((nControlID) ? TRUE : FALSE);
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF)))
		{
			if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_BCF))))
			{
				if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_BCF_CNAME)))))
				{
					if ((pDatabaseTCFunctionBlock = pView->m_pDatabaseTCFunctionBlocks[0].GetAt((nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_CNAME)) && nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_IDENT))) ? pView->m_pDatabaseTCFunctionBlocks[0].Find((szValue = pCell->GetText())) : pView->m_pDatabaseTCFunctionBlocks[0].Find((szValue = pszValue)))))
					{
						ConstructTCSequenceFunctionBlockElementsTableContents(pView, pDatabaseTCFunctionBlock, -1, szContents);
						return TRUE;
					}
				}
			}
			ConstructTCSequenceFunctionBlockElementsTableContents(pView, szContents);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		for (nID = TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)); nControlID == nID; )
		{
			if ((nIndex = pView->m_pDatabaseOBProcessors[0].Find((szItem = pszValue))) >= 0) break;
			return FALSE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszValue))))
			{
				ConstructOBProcessorTableContents(pView, pDatabaseOBProcessor, szContents);
				return TRUE;
			}
			ConstructOBProcessorTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszValue))))
			{
				ConstructOBProcessorMemoryAreasTableContents(pView, pDatabaseOBProcessor, -1, szContents);
				return TRUE;
			}
			ConstructOBProcessorMemoryAreasTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszValue))))
			{
				ConstructOBProcessorMemoryAreaBlocksTableContents(pView, pDatabaseOBProcessor, -1, szContents);
				return TRUE;
			}
			ConstructOBProcessorMemoryAreaBlocksTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszValue))))
			{
				ConstructOBProcessorMemoryImagesTableContents(pView, pDatabaseOBProcessor, -1, szContents);
				return TRUE;
			}
			ConstructOBProcessorMemoryImagesTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP)))
		{
			if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PIMG))))
			{
				if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PIMG_MNAME)))))
				{
					if ((pDatabaseOBProcessorMemoryImage = (nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PIMG), STRING(IDS_DATABASE_TABLE_PIMG_MNAME))) ? pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pCell->GetText())) : pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pszValue))))
					{
						ConstructOBProcessorMemoryMasterImagesTableContents(pView, pDatabaseOBProcessorMemoryImage, -1, szContents);
						return TRUE;
					}
				}
			}
			ConstructOBProcessorMemoryMasterImagesTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)))
		{
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)))
			{
				if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_GEN))))
				{
					if ((pCell = pTable[0]->FindCell((UINT)nID)) != (CTableViewCell *)NULL)
					{
						if ((pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pCell->GetText()))))
						{
							if ((pDatabaseOBProcessorMemoryImage = pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pDatabaseOBProcessor->GetMasterImage()))))
							{
								ConstructOBProcessorMemoryImagesAssociationTableContents(pView, pDatabaseOBProcessorMemoryImage, szContents);
								return TRUE;
							}
						}
					}
				}
				ConstructOBProcessorMemoryImagesAssociationTableContents(pView, szContents);
				return TRUE;
			}
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PIMG), STRING(IDS_DATABASE_TABLE_PIMG_MNAME)))
			{
				if ((pDatabaseOBProcessorMemoryImage = pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pszValue))))
				{
					ConstructOBProcessorMemoryImagesAssociationTableContents(pView, pDatabaseOBProcessorMemoryImage, szContents);
					return TRUE;
				}
				if (!lstrlen(pszValue))
				{
					ConstructOBProcessorMemoryImagesAssociationTableContents(pView, szContents);
					return TRUE;
				}
			}
			if (nControlID == (UINT)-1 || !nControlID)
			{
				if ((pTable[0] = pView->FindTable(pszTable)))
				{
					if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PIMG), STRING(IDS_DATABASE_TABLE_PIMG_MNAME)))))
					{
						if ((pDatabaseOBProcessorMemoryImage = pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pCell->GetText()))))
						{
							ConstructOBProcessorMemoryImagesAssociationTableContents(pView, pDatabaseOBProcessorMemoryImage, szContents);
							return TRUE;
						}
					}
				}
				ConstructOBProcessorMemoryImagesAssociationTableContents(pView, szContents);
				return((nControlID) ? TRUE : FALSE);
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszValue))))
			{
				ConstructOBProcessorMemoryAreaChecksumsTableContents(pView, pDatabaseOBProcessor, -1, szContents);
				return TRUE;
			}
			ConstructOBProcessorMemoryAreaChecksumsTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszValue))))
			{
				ConstructOBProcessorMemoryAreaCatalogueEntriesTableContents(pView, pDatabaseOBProcessor, -1, szContents);
				return TRUE;
			}
			ConstructOBProcessorMemoryAreaCatalogueEntriesTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		for (nID = TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)); nControlID == nID; )
		{
			if (pView->m_pDatabaseTMParameters[0].Find((szItem = pszValue)) >= 0 || !lstrlen(pszValue)) break;
			return FALSE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszValue))))
			{
				ConstructTMParameterTableContents(pView, pDatabaseTMParameter, szContents);
				return TRUE;
			}
			ConstructTMParameterTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)))
		{
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CATEG)))
			{
				if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF))))
				{
					if ((pCell = pTable[0]->FindCell((UINT)nID)) != (CTableViewCell *)NULL)
					{
						if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pCell->GetText()))) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL))
						{
							if ((pDatabaseTMNumCalTable = (pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]) > 0) ? pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find(szCalTables[0].GetAt(0))) : (CDatabaseTMNumCalTable *)NULL))
							{
								ConstructTMNumCalCurveTableContents(pView, pDatabaseTMNumCalTable, szContents);
								return TRUE;
							}
						}
					}
				}
				ConstructTMNumCalCurveTableContents(pView, szContents);
				return TRUE;
			}
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCAL), STRING(IDS_DATABASE_TABLE_PCAL_NAME)))
			{
				if ((pDatabaseTMNumCalTable = pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find(pszValue))))
				{
					ConstructTMNumCalCurveTableContents(pView, pDatabaseTMNumCalTable, szContents);
					return TRUE;
				}
				if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCAL), STRING(IDS_DATABASE_TABLE_PCAL_NAME)) || !lstrlen(pszValue))
				{
					ConstructTMNumCalCurveTableContents(pView, szContents);
					return TRUE;
				}
			}
			if (nControlID == (UINT)-1 || !nControlID)
			{
				if ((pTable[0] = pView->FindTable(pszTable)))
				{
					if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)))))
					{
						if ((pDatabaseTMNumCalTable = pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find(pCell->GetText()))))
						{
							ConstructTMNumCalCurveTableContents(pView, pDatabaseTMNumCalTable, szContents);
							return TRUE;
						}
					}
				}
				ConstructTMNumCalCurveTableContents(pView, szContents);
				return((nControlID) ? TRUE : FALSE);
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)))
		{
			if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL))))
			{
				if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NAME)))))
				{
					if ((pDatabaseTMNumCalTable = (nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)) && nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCAL), STRING(IDS_DATABASE_TABLE_PCAL_NAME))) ? pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find(pCell->GetText())) : pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find(pszValue))))
					{
						ConstructTMNumCalCurvePointsTableContents(pView, pDatabaseTMNumCalTable, -1, szContents);
						return TRUE;
					}
				}
			}
			ConstructTMNumCalCurvePointsTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)))
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszValue))))
			{
				ConstructTMNumCalCurveAssociationTableContents(pView, pDatabaseTMParameter, -1, szContents);
				return TRUE;
			}
			ConstructTMNumCalCurveAssociationTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)))
		{
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CATEG)))
			{
				if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF))))
				{
					if ((pCell = pTable[0]->FindCell((UINT)nID)) != (CTableViewCell *)NULL)
					{
						if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pCell->GetText()))) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS))
						{
							if ((pDatabaseTMTxtCalTable = (pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]) > 0) ? pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find(szCalTables[0].GetAt(0))) : (CDatabaseTMTxtCalTable *)NULL))
							{
								ConstructTMTxtCalCurveTableContents(pView, pDatabaseTMTxtCalTable, szContents);
								return TRUE;
							}
						}
					}
				}
				ConstructTMTxtCalCurveTableContents(pView, szContents);
				return TRUE;
			}
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PTXF), STRING(IDS_DATABASE_TABLE_PTXF_NAME)))
			{
				if ((pDatabaseTMTxtCalTable = pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find(pszValue))))
				{
					ConstructTMTxtCalCurveTableContents(pView, pDatabaseTMTxtCalTable, szContents);
					return TRUE;
				}
				if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PTXF), STRING(IDS_DATABASE_TABLE_PTXF_NAME)) || !lstrlen(pszValue))
				{
					ConstructTMTxtCalCurveTableContents(pView, szContents);
					return TRUE;
				}
			}
			if (nControlID == (UINT)-1 || !nControlID)
			{
				if ((pTable[0] = pView->FindTable(pszTable)))
				{
					if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)))))
					{
						if ((pDatabaseTMTxtCalTable = pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find(pCell->GetText()))))
						{
							ConstructTMTxtCalCurveTableContents(pView, pDatabaseTMTxtCalTable, szContents);
							return TRUE;
						}
					}
				}
				ConstructTMTxtCalCurveTableContents(pView, szContents);
				return((nControlID) ? TRUE : FALSE);
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF))))
			{
				if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NAME)))))
				{
					if ((pDatabaseTMTxtCalTable = (nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)) && nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PTXF), STRING(IDS_DATABASE_TABLE_PTXF_NAME))) ? pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find(pCell->GetText())) : pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find(pszValue))))
					{
						ConstructTMTxtCalCurvePointsTableContents(pView, pDatabaseTMTxtCalTable, -1, szContents);
						return TRUE;
					}
				}
			}
			ConstructTMTxtCalCurvePointsTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)))
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszValue))))
			{
				ConstructTMTxtCalCurveAssociationTableContents(pView, pDatabaseTMParameter, -1, szContents);
				return TRUE;
			}
			ConstructTMTxtCalCurveAssociationTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)))
		{
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CATEG)))
			{
				if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF))))
				{
					if ((pCell = pTable[0]->FindCell((UINT)nID)) != (CTableViewCell *)NULL)
					{
						if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pCell->GetText()))) && ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NONE) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)))
						{
							if ((pDatabaseTMNumOolTable = (pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1]) > 0) ? pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find(szOolTables[0].GetAt(0))) : (CDatabaseTMNumOolTable *)NULL))
							{
								ConstructTMNumOolChecksTableContents(pView, pDatabaseTMNumOolTable, szContents);
								return TRUE;
							}
						}
					}
				}
				ConstructTMNumOolChecksTableContents(pView, szContents);
				return TRUE;
			}
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_POCF), STRING(IDS_DATABASE_TABLE_POCF_NAME)))
			{
				if ((pDatabaseTMNumOolTable = pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find(pszValue))))
				{
					ConstructTMNumOolChecksTableContents(pView, pDatabaseTMNumOolTable, szContents);
					return TRUE;
				}
				if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_POCF), STRING(IDS_DATABASE_TABLE_POCF_NAME)) || !lstrlen(pszValue))
				{
					ConstructTMNumOolChecksTableContents(pView, szContents);
					return TRUE;
				}
			}
			if (nControlID == (UINT)-1 || !nControlID)
			{
				if ((pTable[0] = pView->FindTable(pszTable)))
				{
					if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)))))
					{
						if ((pDatabaseTMNumOolTable = pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find(pCell->GetText()))))
						{
							ConstructTMNumOolChecksTableContents(pView, pDatabaseTMNumOolTable, szContents);
							return TRUE;
						}
					}
				}
				ConstructTMNumOolChecksTableContents(pView, szContents);
				return((nControlID) ? TRUE : FALSE);
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)))
		{
			if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF))))
			{
				if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NAME)))))
				{
					if ((pDatabaseTMNumOolTable = (nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)) && nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_POCF), STRING(IDS_DATABASE_TABLE_POCF_NAME))) ? pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find(pCell->GetText())) : pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find(pszValue))))
					{
						ConstructTMNumOolCheckLimitsTableContents(pView, pDatabaseTMNumOolTable, -1, szContents);
						return TRUE;
					}
				}
			}
			ConstructTMNumOolCheckLimitsTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)))
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszValue))))
			{
				ConstructTMNumOolChecksAssociationTableContents(pView, pDatabaseTMParameter, -1, szContents);
				return TRUE;
			}
			ConstructTMNumOolChecksAssociationTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CATEG)))
			{
				if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF))))
				{
					if ((pCell = pTable[0]->FindCell((UINT)nID)) != (CTableViewCell *)NULL)
					{
						if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pCell->GetText()))) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS))
						{
							if ((pDatabaseTMTxtOolTable = (pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1]) > 0) ? pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find(szOolTables[0].GetAt(0))) : (CDatabaseTMTxtOolTable *)NULL))
							{
								ConstructTMTxtOolChecksTableContents(pView, pDatabaseTMTxtOolTable, szContents);
								return TRUE;
							}
						}
					}
				}
				ConstructTMTxtOolChecksTableContents(pView, szContents);
				return TRUE;
			}
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PFXF), STRING(IDS_DATABASE_TABLE_PFXF_NAME)))
			{
				if ((pDatabaseTMTxtOolTable = pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find(pszValue))))
				{
					ConstructTMTxtOolChecksTableContents(pView, pDatabaseTMTxtOolTable, szContents);
					return TRUE;
				}
				if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PFXF), STRING(IDS_DATABASE_TABLE_PFXF_NAME)) || !lstrlen(pszValue))
				{
					ConstructTMTxtOolChecksTableContents(pView, szContents);
					return TRUE;
				}
			}
			if (nControlID == (UINT)-1 || !nControlID)
			{
				if ((pTable[0] = pView->FindTable(pszTable)))
				{
					if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)))))
					{
						if ((pDatabaseTMTxtOolTable = pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find(pCell->GetText()))))
						{
							ConstructTMTxtOolChecksTableContents(pView, pDatabaseTMTxtOolTable, szContents);
							return TRUE;
						}
					}
				}
				ConstructTMTxtOolChecksTableContents(pView, szContents);
				return((nControlID) ? TRUE : FALSE);
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF))))
			{
				if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NAME)))))
				{
					if ((pDatabaseTMTxtOolTable = (nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)) && nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PFXF), STRING(IDS_DATABASE_TABLE_PFXF_NAME))) ? pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find(pCell->GetText())) : pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find(pszValue))))
					{
						ConstructTMTxtOolCheckLimitsTableContents(pView, pDatabaseTMTxtOolTable, -1, szContents);
						return TRUE;
					}
				}
			}
			ConstructTMTxtOolCheckLimitsTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)))
		{
			if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszValue))))
			{
				ConstructTMTxtOolChecksAssociationTableContents(pView, pDatabaseTMParameter, -1, szContents);
				return TRUE;
			}
			ConstructTMTxtOolChecksAssociationTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		for (nID = TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)); nControlID == nID; )
		{
			if (pView->m_pDatabaseTCParameters[0].Find((szItem = pszValue)) >= 0 || !lstrlen(pszValue)) break;
			return FALSE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pszValue))))
			{
				ConstructTCParameterTableContents(pView, pDatabaseTCParameter, szContents);
				return TRUE;
			}
			ConstructTCParameterTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)))
		{
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CATEG)))
			{
				if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CPC))))
				{
					if ((pCell = pTable[0]->FindCell((UINT)nID)) != (CTableViewCell *)NULL)
					{
						if ((pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pCell->GetText()))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL))
						{
							if ((pDatabaseTCNumCalTable = pView->m_pDatabaseTCNumCalTables[0].GetAt(pView->m_pDatabaseTCNumCalTables[0].Find(pDatabaseTCParameter->GetCalTable()))))
							{
								ConstructTCNumCalCurveTableContents(pView, pDatabaseTCNumCalTable, szContents);
								return TRUE;
							}
						}
					}
				}
				ConstructTCNumCalCurveTableContents(pView, szContents);
				return TRUE;
			}
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CALREF)))
			{
				if ((pDatabaseTCNumCalTable = pView->m_pDatabaseTCNumCalTables[0].GetAt(pView->m_pDatabaseTCNumCalTables[0].Find(pszValue))))
				{
					ConstructTCNumCalCurveTableContents(pView, pDatabaseTCNumCalTable, szContents);
					return TRUE;
				}
				if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CALREF)) || !lstrlen(pszValue))
				{
					ConstructTCNumCalCurveTableContents(pView, szContents);
					return TRUE;
				}
			}
			if (nControlID == (UINT)-1 || !nControlID)
			{
				if ((pTable[0] = pView->FindTable(pszTable)))
				{
					if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)))))
					{
						if ((pDatabaseTCNumCalTable = pView->m_pDatabaseTCNumCalTables[0].GetAt(pView->m_pDatabaseTCNumCalTables[0].Find(pCell->GetText()))))
						{
							ConstructTCNumCalCurveTableContents(pView, pDatabaseTCNumCalTable, szContents);
							return TRUE;
						}
					}
				}
				ConstructTCNumCalCurveTableContents(pView, szContents);
				return((nControlID) ? TRUE : FALSE);
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)))
		{
			if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL))))
			{
				if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NAME)))))
				{
					if ((pDatabaseTCNumCalTable = (nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)) && nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CALREF))) ? pView->m_pDatabaseTCNumCalTables[0].GetAt(pView->m_pDatabaseTCNumCalTables[0].Find(pCell->GetText())) : pView->m_pDatabaseTCNumCalTables[0].GetAt(pView->m_pDatabaseTCNumCalTables[0].Find(pszValue))))
					{
						ConstructTCNumCalCurvePointsTableContents(pView, pDatabaseTCNumCalTable, -1, szContents);
						return TRUE;
					}
				}
			}
			ConstructTCNumCalCurvePointsTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)))
		{
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CATEG)))
			{
				if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CPC))))
				{
					if ((pCell = pTable[0]->FindCell((UINT)nID)) != (CTableViewCell *)NULL)
					{
						if ((pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pCell->GetText()))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS))
						{
							if ((pDatabaseTCTxtCalTable = pView->m_pDatabaseTCTxtCalTables[0].GetAt(pView->m_pDatabaseTCTxtCalTables[0].Find(pDatabaseTCParameter->GetCalTable()))))
							{
								ConstructTCTxtCalCurveTableContents(pView, pDatabaseTCTxtCalTable, szContents);
								return TRUE;
							}
						}
					}
				}
				ConstructTCTxtCalCurveTableContents(pView, szContents);
				return TRUE;
			}
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_TXFREF)))
			{
				if ((pDatabaseTCTxtCalTable = pView->m_pDatabaseTCTxtCalTables[0].GetAt(pView->m_pDatabaseTCTxtCalTables[0].Find(pszValue))))
				{
					ConstructTCTxtCalCurveTableContents(pView, pDatabaseTCTxtCalTable, szContents);
					return TRUE;
				}
				if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_TXFREF)) || !lstrlen(pszValue))
				{
					ConstructTCTxtCalCurveTableContents(pView, szContents);
					return TRUE;
				}
			}
			if (nControlID == (UINT)-1 || !nControlID)
			{
				if ((pTable[0] = pView->FindTable(pszTable)))
				{
					if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)))))
					{
						if ((pDatabaseTCTxtCalTable = pView->m_pDatabaseTCTxtCalTables[0].GetAt(pView->m_pDatabaseTCTxtCalTables[0].Find(pCell->GetText()))))
						{
							ConstructTCTxtCalCurveTableContents(pView, pDatabaseTCTxtCalTable, szContents);
							return TRUE;
						}
					}
				}
				ConstructTCTxtCalCurveTableContents(pView, szContents);
				return((nControlID) ? TRUE : FALSE);
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF))))
			{
				if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NAME)))))
				{
					if ((pDatabaseTCTxtCalTable = (nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)) && nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_TXFREF))) ? pView->m_pDatabaseTCTxtCalTables[0].GetAt(pView->m_pDatabaseTCTxtCalTables[0].Find(pCell->GetText())) : pView->m_pDatabaseTCTxtCalTables[0].GetAt(pView->m_pDatabaseTCTxtCalTables[0].Find(pszValue))))
					{
						ConstructTCTxtCalCurvePointsTableContents(pView, pDatabaseTCTxtCalTable, -1, szContents);
						return TRUE;
					}
				}
			}
			ConstructTCTxtCalCurvePointsTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)))
		{
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CATEG)))
			{
				if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CPC))))
				{
					if ((pCell = pTable[0]->FindCell((UINT)nID)) != (CTableViewCell *)NULL)
					{
						if ((pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pCell->GetText()))) && ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)))
						{
							if ((pDatabaseTCNumOolTable = pView->m_pDatabaseTCNumOolTables[0].GetAt(pView->m_pDatabaseTCNumOolTables[0].Find(pDatabaseTCParameter->GetOolTable()))))
							{
								ConstructTCNumOolChecksTableContents(pView, pDatabaseTCNumOolTable, szContents);
								return TRUE;
							}
						}
					}
				}
				ConstructTCNumOolChecksTableContents(pView, szContents);
				return TRUE;
			}
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_OCFREF)))
			{
				if ((pDatabaseTCNumOolTable = pView->m_pDatabaseTCNumOolTables[0].GetAt(pView->m_pDatabaseTCNumOolTables[0].Find(pszValue))))
				{
					ConstructTCNumOolChecksTableContents(pView, pDatabaseTCNumOolTable, szContents);
					return TRUE;
				}
				if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_OCFREF)) || !lstrlen(pszValue))
				{
					ConstructTCNumOolChecksTableContents(pView, szContents);
					return TRUE;
				}
			}
			if (nControlID == (UINT)-1 || !nControlID)
			{
				if ((pTable[0] = pView->FindTable(pszTable)))
				{
					if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)))))
					{
						if ((pDatabaseTCNumOolTable = pView->m_pDatabaseTCNumOolTables[0].GetAt(pView->m_pDatabaseTCNumOolTables[0].Find(pCell->GetText()))))
						{
							ConstructTCNumOolChecksTableContents(pView, pDatabaseTCNumOolTable, szContents);
							return TRUE;
						}
					}
				}
				ConstructTCNumOolChecksTableContents(pView, szContents);
				return((nControlID) ? TRUE : FALSE);
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)))
		{
			if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF))))
			{
				if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NAME)))))
				{
					if ((pDatabaseTCNumOolTable = (nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)) && nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_OCFREF))) ? pView->m_pDatabaseTCNumOolTables[0].GetAt(pView->m_pDatabaseTCNumOolTables[0].Find(pCell->GetText())) : pView->m_pDatabaseTCNumOolTables[0].GetAt(pView->m_pDatabaseTCNumOolTables[0].Find(pszValue))))
					{
						ConstructTCNumOolCheckLimitsTableContents(pView, pDatabaseTCNumOolTable, -1, szContents);
						return TRUE;
					}
				}
			}
			ConstructTCNumOolCheckLimitsTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CATEG)))
			{
				if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CPC))))
				{
					if ((pCell = pTable[0]->FindCell((UINT)nID)) != (CTableViewCell *)NULL)
					{
						if ((pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pCell->GetText()))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS))
						{
							if ((pDatabaseTCTxtOolTable = pView->m_pDatabaseTCTxtOolTables[0].GetAt(pView->m_pDatabaseTCTxtOolTables[0].Find(pDatabaseTCParameter->GetOolTable()))))
							{
								ConstructTCTxtOolChecksTableContents(pView, pDatabaseTCTxtOolTable, szContents);
								return TRUE;
							}
						}
					}
				}
				ConstructTCTxtOolChecksTableContents(pView, szContents);
				return TRUE;
			}
			if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)) || nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_FXFREF)))
			{
				if ((pDatabaseTCTxtOolTable = pView->m_pDatabaseTCTxtOolTables[0].GetAt(pView->m_pDatabaseTCTxtOolTables[0].Find(pszValue))))
				{
					ConstructTCTxtOolChecksTableContents(pView, pDatabaseTCTxtOolTable, szContents);
					return TRUE;
				}
				if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_FXFREF)) || !lstrlen(pszValue))
				{
					ConstructTCTxtOolChecksTableContents(pView, szContents);
					return TRUE;
				}
			}
			if (nControlID == (UINT)-1 || !nControlID)
			{
				if ((pTable[0] = pView->FindTable(pszTable)))
				{
					if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)))))
					{
						if ((pDatabaseTCTxtOolTable = pView->m_pDatabaseTCTxtOolTables[0].GetAt(pView->m_pDatabaseTCTxtOolTables[0].Find(pCell->GetText()))))
						{
							ConstructTCTxtOolChecksTableContents(pView, pDatabaseTCTxtOolTable, szContents);
							return TRUE;
						}
					}
				}
				ConstructTCTxtOolChecksTableContents(pView, szContents);
				return((nControlID) ? TRUE : FALSE);
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF))))
			{
				if ((pCell = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NAME)))))
				{
					if ((pDatabaseTCTxtOolTable = (nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)) && nControlID != TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_FXFREF))) ? pView->m_pDatabaseTCTxtOolTables[0].GetAt(pView->m_pDatabaseTCTxtOolTables[0].Find(pCell->GetText())) : pView->m_pDatabaseTCTxtOolTables[0].GetAt(pView->m_pDatabaseTCTxtOolTables[0].Find(pszValue))))
					{
						ConstructTCTxtOolCheckLimitsTableContents(pView, pDatabaseTCTxtOolTable, -1, szContents);
						return TRUE;
					}
				}
			}
			ConstructTCTxtOolCheckLimitsTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		for (nID = TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_NUMBER)); nControlID == nID; )
		{
			if (pView->m_pANDLayouts[0].Find((szItem = pszValue)) >= 0 || !lstrlen(pszValue)) break;
			return FALSE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pANDLayout = pView->m_pANDLayouts[0].GetAt(pView->m_pANDLayouts[0].Find(pszValue))))
			{
				ConstructANDTableContents(pView, pANDLayout, szContents);
				return TRUE;
			}
			ConstructANDTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pANDLayout = pView->m_pANDLayouts[0].GetAt(pView->m_pANDLayouts[0].Find(pszValue))))
			{
				ConstructANDLayoutTableContents(pView, pANDLayout, szContents);
				return TRUE;
			}
			ConstructANDLayoutTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pANDLayout = pView->m_pANDLayouts[0].GetAt(pView->m_pANDLayouts[0].Find(pszValue))))
			{
				ConstructANDParametersTableContents(pView, pANDLayout, -1, szContents);
				return TRUE;
			}
			ConstructANDParametersTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		for (nID = TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_NUMBER)); nControlID == nID; )
		{
			if (pView->m_pGRDLayouts[0].Find((szItem = pszValue)) >= 0 || !lstrlen(pszValue)) break;
			return FALSE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pGRDLayout = pView->m_pGRDLayouts[0].GetAt(pView->m_pGRDLayouts[0].Find(pszValue))))
			{
				ConstructGRDTableContents(pView, pGRDLayout, szContents);
				return TRUE;
			}
			ConstructGRDTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pGRDLayout = pView->m_pGRDLayouts[0].GetAt(pView->m_pGRDLayouts[0].Find(pszValue))))
			{
				ConstructGRDLayoutTableContents(pView, pGRDLayout, szContents);
				return TRUE;
			}
			ConstructGRDLayoutTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pGRDLayout = pView->m_pGRDLayouts[0].GetAt(pView->m_pGRDLayouts[0].Find(pszValue))))
			{
				ConstructGRDParametersTableContents(pView, pGRDLayout, -1, szContents);
				return TRUE;
			}
			ConstructGRDParametersTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		for (nID = TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_NUMBER)); nControlID == nID; )
		{
			if (pView->m_pPODLayouts[0].Find((szItem = pszValue)) >= 0 || !lstrlen(pszValue)) break;
			return FALSE;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pPODLayout = pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pszValue))))
			{
				ConstructPODTableContents(pView, pPODLayout, szContents);
				return TRUE;
			}
			ConstructPODTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pPODLayout = pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pszValue))))
			{
				ConstructPODLayoutTableContents(pView, pPODLayout, szContents);
				return TRUE;
			}
			ConstructPODLayoutTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pPODLayout = pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pszValue))))
			{
				ConstructPODExpressionStackTableContents(pView, pPODLayout, -1, szContents);
				return TRUE;
			}
			ConstructPODExpressionStackTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pPODLayout = pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pszValue))))
			{
				ConstructPODParametersTableContents(pView, pPODLayout, -1, szContents);
				return TRUE;
			}
			ConstructPODParametersTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)) && (nControlID == (UINT)nID || nControlID == (UINT)-1 || !nControlID))
		{
			if ((pPODLayout = pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pszValue))))
			{
				ConstructPODFunctionsTableContents(pView, pPODLayout, -1, szContents);
				return TRUE;
			}
			ConstructPODFunctionsTableContents(pView, szContents);
			return((nControlID) ? TRUE : FALSE);
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::UpdateTableFieldData(CDatabaseTableView *pView, UINT nControlID, LPCTSTR pszValue, LPCTSTR pszOldValue)
{
	INT  nRow;
	INT  nRows;
	INT  nIndex;
	INT  nParameter;
	INT  nParameters;
	BOOL  bValue;
	CString  szText;
	CString  szValue;
	CString  szMessage;
	CStringArray  szTables[2];
	CStringTools  cStringTools;
	CVersionInfo  cVersionInfo;
	CTableViewCell  *pCell[3];
	CTableViewObject  *pTable[2];
	TABLEVIEWCELLVALUE  sValue[2];
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCSequence  *pDatabaseTCSequence[2];
	CDatabaseOBProcessor  *pDatabaseOBProcessor[2];
	CDatabaseTMParameter  *pDatabaseTMParameter[2];
	CDatabaseTCParameter  *pDatabaseTCParameter[2];
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;
	CANDLayout  *pANDLayout;
	CGRDLayout  *pGRDLayout;
	CPODLayout  *pPODLayout;

	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_PACKID)))
		{
			pView->SetName(pszValue);
			return TRUE;
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PMF))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (szValue = pTable[0]->GetCellText(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME))); (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_HFLG)))); )
				{
					pView->UpdateTableCellValue(pTable[0], pCell[0], (pCell[0]->TranslateValue((ULONGLONG)(pView->m_pDatabaseTMPacketHeaders[0].Find(szValue) >= 0), szText) && !szValue.IsEmpty()) ? szText : EMPTYSTRING);
					break;
				}
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_HFLG)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_HFLG)), sValue[0]); (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME)))); )
				{
					pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TRUE || !bValue) ? TRUE : FALSE);
					break;
				}
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_LENG)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_LENG)), sValue[0]); (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)))); )
				{
					pView->UpdateTableCellValue(pTable[0], pCell[0], (pCell[0]->TranslateValue((ULONGLONG)((sValue[0].Value.nValue > 0) ? TMPACKET_LENGTH_FIXED : TMPACKET_LENGTH_VARIABLE), szText) && bValue) ? szText : pCell[0]->GetText());
					break;
				}
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)), sValue[0]); (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_LENG)))); )
				{
					pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TMPACKET_LENGTH_FIXED || !bValue) ? TRUE : FALSE);
					break;
				}
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PLF))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PLF_NBOCC)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_PLF_NBOCC), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_LGOCC))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (!bValue || sValue[0].Value.nValue > 1) ? TRUE : FALSE);
						break;
					}
				}
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_DFH))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_PRESENT)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_PRESENT), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_OFFSET))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (bValue  &&  sValue[0].Value.nValue == TRUE) ? TRUE : FALSE);
						break;
					}
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_LENGTH)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (bValue  &&  sValue[0].Value.nValue == TRUE) ? TRUE : FALSE);
				}
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_PRESENT)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_ID_PRESENT), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_OFFSET))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (bValue  &&  sValue[0].Value.nValue == TRUE) ? TRUE : FALSE);
						break;
					}
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_LENGTH)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (bValue  &&  sValue[0].Value.nValue == TRUE) ? TRUE : FALSE);
				}
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_DFH_3DISC_PRESENT)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_DFH_3DISC_PRESENT), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_OFFSET))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (bValue  &&  sValue[0].Value.nValue == TRUE) ? TRUE : FALSE);
						break;
					}
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_LENGTH)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (bValue  &&  sValue[0].Value.nValue == TRUE) ? TRUE : FALSE);
				}
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_DFH_TIME_PRESENT)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_DFH_TIME_PRESENT), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_OFFSET))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (bValue  &&  sValue[0].Value.nValue == TRUE) ? TRUE : FALSE);
						break;
					}
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_LENGTH)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (bValue  &&  sValue[0].Value.nValue == TRUE) ? TRUE : FALSE);
				}
			}
		}
		if ((pDatabaseTMPacket = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PMF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PLF), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PMF)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_PACKID))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTMPackets[0].GetAt(pView->m_pDatabaseTMPackets[0].Find(pCell[0]->GetText())) : (CDatabaseTMPacket *)NULL))
		{
			TransferTableData(pView, pDatabaseTMPacket, nControlID);
			return TRUE;
		}
		if (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_DFH), nControlID) || (nControlID == (UINT)-1 && !lstrcmp(pszValue, STRING(IDS_DATABASE_TABLE_DFH))))
		{
			TransferTableData(pView, pView->m_pDatabaseTMPacketHeaders, nControlID);
			return TRUE;
		}
		if (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_STR), nControlID) || (nControlID == (UINT)-1 && !lstrcmp(pszValue, STRING(IDS_DATABASE_TABLE_STR))))
		{
			TransferTableData(pView, pView->m_pDatabaseTMPacketStreams, nControlID);
			return TRUE;
		}
		return((nControlID == (UINT)-1) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)))
		{
			pView->SetName(pszValue);
			return TRUE;
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_PACKID)))
		{
			if (AfxIsValidString(pszOldValue) && lstrcmp(pszValue, pszOldValue) != 0 && lstrlen(pszOldValue) > 0 && pView->m_pDatabaseTCPackets[0].Find(pszOldValue) < 0 && CheckTableFieldData(pView, STRING(IDS_DATABASE_TABLE_TCP)))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPACKET_DISCARD_QUESTION), pszOldValue), pView->EnableUndo(FALSE); pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO) == IDYES; )
				{
					InsertTableFieldData(pView, STRING(IDS_DATABASE_TABLE_TCP), pszOldValue);
					break;
				}
				pView->EnableUndo(TRUE);
			}
			return TRUE;
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_ID)))
		{
			if (AfxIsValidString(pszOldValue) && lstrcmp(pszValue, pszOldValue) != 0 && lstrlen(pszOldValue) > 0 && pView->m_pDatabaseTCPreExeGroups[0].Find(pszOldValue) < 0 && CheckTableFieldData(pView, STRING(IDS_DATABASE_TABLE_PVP)))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPREEXEGROUP_DISCARD_QUESTION), pszOldValue), pView->EnableUndo(FALSE); pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO) == IDYES; )
				{
					InsertTableFieldData(pView, STRING(IDS_DATABASE_TABLE_PVP), pszOldValue);
					break;
				}
				pView->EnableUndo(TRUE);
			}
			return TRUE;
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_ID)))
		{
			if (AfxIsValidString(pszOldValue) && lstrcmp(pszValue, pszOldValue) != 0 && lstrlen(pszOldValue) > 0 && pView->m_pDatabaseTCExeVerGroups[0].Find(pszOldValue) < 0 && CheckTableFieldData(pView, STRING(IDS_DATABASE_TABLE_CVP)))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONEXEVERGROUP_DISCARD_QUESTION), pszOldValue), pView->EnableUndo(FALSE); pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO) == IDYES; )
				{
					InsertTableFieldData(pView, STRING(IDS_DATABASE_TABLE_CVP), pszOldValue);
					break;
				}
				pView->EnableUndo(TRUE);
			}
			return TRUE;
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_NAME)))
		{
			if (AfxIsValidString(pszOldValue) && lstrcmp(pszValue, pszOldValue) != 0 && lstrlen(pszOldValue) > 0 && pView->m_pDatabaseTCParameterSets[0].Find(pszOldValue) < 0 && CheckTableFieldData(pView, STRING(IDS_DATABASE_TABLE_CPS)))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPARAMETERSET_DISCARD_QUESTION), pszOldValue), pView->EnableUndo(FALSE); pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO) == IDYES; )
				{
					InsertTableFieldData(pView, STRING(IDS_DATABASE_TABLE_CPS), pszOldValue);
					break;
				}
				pView->EnableUndo(TRUE);
			}
			return TRUE;
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_TCP))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_LENG)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_LENG)), sValue[0]); (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)))); )
				{
					pView->UpdateTableCellValue(pTable[0], pCell[0], (pCell[0]->TranslateValue((ULONGLONG)((sValue[0].Value.nValue > 0) ? TCPACKET_LENGTH_FIXED : TCPACKET_LENGTH_VARIABLE), szText) && bValue) ? szText : pCell[0]->GetText());
					break;
				}
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)), sValue[0]); (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_LENG)))); )
				{
					pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TCPACKET_LENGTH_FIXED || !bValue) ? TRUE : FALSE);
					break;
				}
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CDF))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CDF_ELTYPE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CDF_ELTYPE), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_PNAME))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TCFUNCTIONELEMENT_TYPE_CONSTANT || !bValue) ? TRUE : FALSE);
						break;
					}
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_VTYPE)))) pView->EnableTableCellValue(pTable[0], pCell[0], (pCell[0]->TranslateValue(TCPARAMETER_CALIBRATION_DISABLED, szText)) ? szText : EMPTYSTRING, (sValue[0].Value.nValue != TCFUNCTIONELEMENT_TYPE_CONSTANT || !bValue) ? TRUE : FALSE);
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_RADIX)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TCFUNCTIONELEMENT_TYPE_PARAMETER || !bValue || !pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CDF_VTYPE), sValue[1]) || sValue[1].Value.nValue != TCPARAMETER_CALIBRATION_ENABLED) ? TRUE : FALSE);
				}
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CDF_VTYPE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CDF_VTYPE), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_RADIX))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TCPARAMETER_CALIBRATION_ENABLED || !bValue || !pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CDF_ELTYPE), sValue[1]) || sValue[1].Value.nValue != TCFUNCTIONELEMENT_TYPE_PARAMETER) ? TRUE : FALSE);
						break;
					}
				}
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCDF))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_PNAME))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TCPACKETPARAMETER_TYPE_FIXED || !bValue) ? TRUE : FALSE);
						break;
					}
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_VTYPE)))) pView->EnableTableCellValue(pTable[0], pCell[0], (pCell[0]->TranslateValue(TCPARAMETER_CALIBRATION_DISABLED, szText)) ? szText : EMPTYSTRING, (sValue[0].Value.nValue != TCPACKETPARAMETER_TYPE_FIXED || !bValue) ? TRUE : FALSE);
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_CODING)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TCPACKETPARAMETER_TYPE_FIXED || !bValue) ? TRUE : FALSE);
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_RADIX)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TCPACKETPARAMETER_TYPE_VARIABLE || !bValue || !pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_PCDF_VTYPE), sValue[1]) || sValue[1].Value.nValue != TCPARAMETER_CALIBRATION_ENABLED) ? TRUE : FALSE);
				}
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCDF_VTYPE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_PCDF_VTYPE), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_RADIX))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TCPARAMETER_CALIBRATION_ENABLED || !bValue || !pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE), sValue[1]) || sValue[1].Value.nValue != TCPACKETPARAMETER_TYPE_VARIABLE) ? TRUE : FALSE);
						break;
					}
				}
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CPSP))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPSP_VTYPE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CPSP_VTYPE), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CPSP_RADIX))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TCPARAMETER_CALIBRATION_ENABLED || !bValue) ? TRUE : FALSE);
						break;
					}
				}
			}
		}
		if ((pDatabaseTCFunction = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CCF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CDF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PCPS), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CCF)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_CNAME))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pCell[0]->GetText())) : (CDatabaseTCFunction *)NULL))
		{
			TransferTableData(pView, pDatabaseTCFunction, nControlID);
			return TRUE;
		}
		if ((pDatabaseTCPacket = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_TCP), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PCDF), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_TCP)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_PACKID))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTCPackets[0].GetAt(pView->m_pDatabaseTCPackets[0].Find(pCell[0]->GetText())) : (CDatabaseTCPacket *)NULL))
		{
			TransferTableData(pView, pDatabaseTCPacket, nControlID);
			return TRUE;
		}
		if ((pDatabaseTCPreExeGroup = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PVP), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PEV), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PVP)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PVP_ID))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTCPreExeGroups[0].GetAt(pView->m_pDatabaseTCPreExeGroups[0].Find(pCell[0]->GetText())) : (CDatabaseTCPreExeGroup *)NULL))
		{
			TransferTableData(pView, pDatabaseTCPreExeGroup, nControlID);
			return TRUE;
		}
		if ((pDatabaseTCExeVerGroup = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CVP), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CEV), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CVP)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CVP_ID))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTCExeVerGroups[0].GetAt(pView->m_pDatabaseTCExeVerGroups[0].Find(pCell[0]->GetText())) : (CDatabaseTCExeVerGroup *)NULL))
		{
			TransferTableData(pView, pDatabaseTCExeVerGroup, nControlID);
			return TRUE;
		}
		if ((pDatabaseTCParameterSet = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CPS), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CPSP), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CPS)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPS_NAME))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTCParameterSets[0].GetAt(pView->m_pDatabaseTCParameterSets[0].Find(pCell[0]->GetText())) : (CDatabaseTCParameterSet *)NULL))
		{
			TransferTableData(pView, pDatabaseTCParameterSet, nControlID);
			return TRUE;
		}
		return((nControlID == (UINT)-1) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME)))
		{
			if ((pDatabaseTCSequence[0] = (pView->GetName().Compare(pszValue)) ? pView->m_pDatabaseTCSequences[0].GetAt((nIndex = pView->m_pDatabaseTCSequences[0].Find(pView->GetName()))) : (CDatabaseTCSequence *)NULL))
			{
				for (pView->SetName(pszValue); nIndex == pView->m_nDatabaseTCSequenceIndex && pView->m_pDatabaseTCSequences[0].Find(pszValue) < 0; )
				{
					for (pDatabaseTCSequence[0]->SetName(pszValue), pView->m_pDatabaseTCSequences[0].RemoveAt(nIndex); !lstrlen(pszValue); )
					{
						pView->m_pDatabaseTCSequences[0].InsertAt((pView->m_nDatabaseTCSequenceIndex = 0), pDatabaseTCSequence[0], 1);
						return TRUE;
					}
					if ((pView->m_nDatabaseTCSequenceIndex = pView->m_pDatabaseTCSequences[0].Add(pDatabaseTCSequence[0])) >= 0) return TRUE;
					delete pDatabaseTCSequence[0];
					return FALSE;
				}
				if ((nIndex = pView->m_pDatabaseTCSequences[0].Find(pszValue)) < 0)
				{
					if ((pDatabaseTCSequence[1] = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_nDatabaseTCSequenceIndex)))
					{
						for (pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0]), pDatabaseTCSequence[1]->SetName(pszValue), pView->m_pDatabaseTCSequences[0].RemoveAt(pView->m_nDatabaseTCSequenceIndex); !lstrlen(pszValue); )
						{
							pView->m_pDatabaseTCSequences[0].InsertAt((pView->m_nDatabaseTCSequenceIndex = 0), pDatabaseTCSequence[1], 1);
							return TRUE;
						}
						if ((pView->m_nDatabaseTCSequenceIndex = pView->m_pDatabaseTCSequences[0].Add(pDatabaseTCSequence[1])) >= 0) return TRUE;
						delete pDatabaseTCSequence[1];
						return FALSE;
					}
					if ((pDatabaseTCSequence[1] = new CDatabaseTCSequence))
					{
						for (pDatabaseTCSequence[1]->Copy(pDatabaseTCSequence[0]), pDatabaseTCSequence[1]->SetName(pszValue); !lstrlen(pszValue); )
						{
							pView->m_pDatabaseTCSequences[0].InsertAt((pView->m_nDatabaseTCSequenceIndex = 0), pDatabaseTCSequence[1], 1);
							return TRUE;
						}
						if ((pView->m_nDatabaseTCSequenceIndex = pView->m_pDatabaseTCSequences[0].Add(pDatabaseTCSequence[1])) >= 0) return TRUE;
						delete pDatabaseTCSequence[1];
					}
					return FALSE;
				}
				if ((pDatabaseTCSequence[0] = (nIndex != pView->m_nDatabaseTCSequenceIndex) ? pView->m_pDatabaseTCSequences[0].GetAt(pView->m_nDatabaseTCSequenceIndex) : (CDatabaseTCSequence *)NULL))
				{
					pView->m_pDatabaseTCSequences[0].RemoveAt(pView->m_nDatabaseTCSequenceIndex);
					pView->m_nDatabaseTCSequenceIndex = -1;
					delete pDatabaseTCSequence[0];
				}
				return TRUE;
			}
			pView->SetName(pszValue);
			return TRUE;
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_CNAME)))
		{
			if (AfxIsValidString(pszOldValue) && lstrcmp(pszValue, pszOldValue) != 0 && lstrlen(pszOldValue) > 0 && pView->m_pDatabaseTCFunctionBlocks[0].Find(pszOldValue) < 0 && CheckTableFieldData(pView, STRING(IDS_DATABASE_TABLE_BCF)))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCEFUNCTIONBLOCK_DISCARD_QUESTION), pszOldValue), pView->EnableUndo(FALSE); pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO) == IDYES; )
				{
					InsertTableFieldData(pView, STRING(IDS_DATABASE_TABLE_BCF), pszOldValue);
					break;
				}
				pView->EnableUndo(TRUE);
			}
			return TRUE;
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CSS))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSS_TYPE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CSS_TYPE), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_TCTYPE))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], (pCell[0]->TranslateValue(TCSEQUENCEENTRY_EXETYPE_IMMEDIATE, szText)) ? szText : EMPTYSTRING, (!bValue || sValue[0].Value.nValue != TCSEQUENCEENTRY_TYPE_PROCEDURE) ? TRUE : FALSE);
						break;
					}
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_ABSTIME)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (!bValue || (sValue[0].Value.nValue != TCSEQUENCEENTRY_TYPE_PROCEDURE && (!pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CSS_TCTYPE), sValue[1]) || sValue[1].Value.nValue == TCSEQUENCEENTRY_EXETYPE_TIMETAG))) ? TRUE : FALSE);
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_EXETIME)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (!bValue || (sValue[0].Value.nValue != TCSEQUENCEENTRY_TYPE_PROCEDURE && (!pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CSS_TCTYPE), sValue[1]) || sValue[1].Value.nValue == TCSEQUENCEENTRY_EXETYPE_TIMETAG))) ? TRUE : FALSE);
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_GROUP)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (!bValue || sValue[0].Value.nValue == TCSEQUENCEENTRY_TYPE_FUNCTION) ? TRUE : FALSE);
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_BLOCK)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (!bValue || sValue[0].Value.nValue == TCSEQUENCEENTRY_TYPE_FUNCTION) ? TRUE : FALSE);
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (!bValue || sValue[0].Value.nValue == TCSEQUENCEENTRY_TYPE_FUNCTION) ? TRUE : FALSE);
				}
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_SDF))))
				{
					for (nRow = 1, nRows = pTable[0]->GetRows(), bValue = pTable[0]->GetCellValue(max(pTable[0]->GetSelRow(), 1), STRING(IDS_DATABASE_TABLE_CSS_TYPE), sValue[0]); nRow < nRows; nRow++)
					{
						if ((pCell[1] = pTable[1]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_BITOFF)))) pView->EnableTableCellValue(pTable[1], pCell[1], EMPTYSTRING, (!bValue || sValue[0].Value.nValue != TCSEQUENCEENTRY_TYPE_PROCEDURE) ? TRUE : FALSE);
						continue;
					}
					for (pTable[1]->MakeVisible((!pTable[0]->GetCellValue(max(pTable[0]->GetSelRow(), pTable[0]->HasTitle()), STRING(IDS_DATABASE_TABLE_CSS_TYPE), sValue[1]) || sValue[1].Value.nValue != TCSEQUENCEENTRY_TYPE_SEQUENCE) ? TRUE : FALSE); (pCell[0] = pTable[0]->FindCell((nRow = max(pView->GetTableFloatingAlignment(pTable[1]->GetName()), 1)), STRING(IDS_DATABASE_TABLE_CSS_NPARS))); )
					{
						pView->UpdateTableCellValue(pTable[0], pCell[0], ((!pView->IsTableRowEmpty(pTable[1], pTable[1]->GetRows() - 1) || pTable[1]->GetRows() > 2) && !pView->IsTableRowEmpty(pTable[0], nRow) && pTable[1]->IsVisible()) ? cStringTools.ConvertIntToString((pView->IsTableRowEmpty(pTable[1], pTable[1]->GetRows() - 1)) ? (pTable[1]->GetRows() - 1 - 1) : (pTable[1]->GetRows() - 1)) : EMPTYSTRING);
						break;
					}
					pView->RepositionTables();
				}
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSS_TCTYPE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CSS_TCTYPE), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_1STEP))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP  &&  bValue) ? TRUE : FALSE);
						break;
					}
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_ABSTIME)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (!bValue || sValue[0].Value.nValue == TCSEQUENCEENTRY_EXETYPE_TIMETAG) ? TRUE : FALSE);
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_EXETIME)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (!bValue || sValue[0].Value.nValue == TCSEQUENCEENTRY_EXETYPE_TIMETAG) ? TRUE : FALSE);
				}
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_BLOCK))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TCSEQUENCEENTRY_FLAG_BLOCKMACRO || !bValue) ? TRUE : FALSE);
						break;
					}
				}
			}
			if (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CSS), nControlID) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_ENTRY)))) pView->UpdateTableCellValue(pTable[0], pCell[0], (!pView->IsTableRowEmpty(pTable[0], nRow)) ? cStringTools.ConvertIntToString(nRow) : EMPTYSTRING);
					continue;
				}
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CSP))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSP_VTYPE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CSP_VTYPE), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_RADIX))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TCPARAMETER_VTYPE_CALIBRATED || !bValue) ? TRUE : FALSE);
						break;
					}
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_CATEG)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TCPARAMETER_VTYPE_CALIBRATED  &&  bValue) ? TRUE : FALSE);
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_CALREF)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TCPARAMETER_VTYPE_CALIBRATED  &&  bValue  &&  pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CSP_CATEG), sValue[1]) && sValue[1].Value.nValue == TCPARAMETER_CALIBRATION_NUMERICAL) ? TRUE : FALSE);
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_TXFREF)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TCPARAMETER_VTYPE_CALIBRATED  &&  bValue  &&  pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CSP_CATEG), sValue[1]) && sValue[1].Value.nValue == TCPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_OCFREF)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TCPARAMETER_VTYPE_CALIBRATED  &&  bValue  &&  pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CSP_CATEG), sValue[1]) && (sValue[1].Value.nValue == TCPARAMETER_CALIBRATION_NONE || sValue[1].Value.nValue == TCPARAMETER_CALIBRATION_NUMERICAL)) ? TRUE : FALSE);
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_FXFREF)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TCPARAMETER_VTYPE_CALIBRATED  &&  bValue  &&  pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CSP_CATEG), sValue[1]) && sValue[1].Value.nValue == TCPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
				}
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSP_CATEG)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CSP_CATEG), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_CALREF))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TCPARAMETER_CALIBRATION_NUMERICAL  &&  bValue) ? TRUE : FALSE);
						break;
					}
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_TXFREF)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TCPARAMETER_CALIBRATION_STATUS  &&  bValue) ? TRUE : FALSE);
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_OCFREF)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, ((sValue[0].Value.nValue == TCPARAMETER_CALIBRATION_NONE || sValue[0].Value.nValue == TCPARAMETER_CALIBRATION_NUMERICAL) && bValue) ? TRUE : FALSE);
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_FXFREF)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TCPARAMETER_CALIBRATION_STATUS  &&  bValue) ? TRUE : FALSE);
				}
			}
			if (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CSP), nControlID) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_FPNUM)))) pView->UpdateTableCellValue(pTable[0], pCell[0], (!pView->IsTableRowEmpty(pTable[0], nRow)) ? cStringTools.ConvertIntToString(nRow - 1) : EMPTYSTRING);
					continue;
				}
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_SDF))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_SDF_VALTYPE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_SDF_VALTYPE), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_VALRADIX))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TCPARAMETER_VTYPE_CALIBRATED  &&  sValue[0].Value.nValue != TCPARAMETER_VTYPE_FORMAL  &&  bValue) ? TRUE : FALSE);
						break;
					}
				}
			}
			if (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_SDF), nControlID) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_ENTRY)))) pView->UpdateTableCellValue(pTable[0], pCell[0], (!pView->IsTableRowEmpty(pTable[0], nRow)) ? cStringTools.ConvertIntToString(max(pView->GetTableFloatingAlignment(pTable[0]->GetName()), 1)) : EMPTYSTRING);
					if ((pCell[1] = ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_BITOFF))) && (pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CSS)))) ? pTable[1]->FindCell(pView->GetTableFloatingAlignment(pTable[0]->GetName()), STRING(IDS_DATABASE_TABLE_CSS_TYPE)) : (CTableViewCell *)NULL)) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (!pCell[1]->GetValue(sValue[0]) || sValue[0].Value.nValue != TCSEQUENCEENTRY_TYPE_PROCEDURE) ? TRUE : FALSE);
				}
				if ((pCell[1] = ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CSS)))) ? pTable[1]->FindCell((nRow = max(pView->GetTableFloatingAlignment(pTable[0]->GetName()), 1)), STRING(IDS_DATABASE_TABLE_CSS_NPARS)) : (CTableViewCell *)NULL)) pView->UpdateTableCellValue(pTable[1], pCell[1], ((!pView->IsTableRowEmpty(pTable[0], pTable[0]->GetRows() - 1) || pTable[0]->GetRows() > 2) && !pView->IsTableRowEmpty(pTable[1], nRow) && pTable[0]->IsVisible()) ? cStringTools.ConvertIntToString((pView->IsTableRowEmpty(pTable[0], pTable[0]->GetRows() - 1)) ? (pTable[0]->GetRows() - 1 - 1) : (pTable[0]->GetRows() - 1)) : EMPTYSTRING);
			}
		}
		if ((pDatabaseTCSequence[0] = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CSF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CSS), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_SDF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CSP), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CSF)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSF_NAME))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTCSequences[0].GetAt((nIndex = pView->m_pDatabaseTCSequences[0].Find(pCell[0]->GetText()))) : (CDatabaseTCSequence *)NULL) && nIndex != pView->m_nDatabaseTCSequenceIndex)
		{
			TransferTableData(pView, pDatabaseTCSequence[0], nControlID);
			return TRUE;
		}
		if (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CSF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CSS), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_SDF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CSP), nControlID))
		{
			if ((pDatabaseTCSequence[0] = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_nDatabaseTCSequenceIndex)) != (CDatabaseTCSequence *)NULL)
			{
				for (pDatabaseTCSequence[0]->SetName(pView->GetName()), TransferTableData(pView, pDatabaseTCSequence[0], nControlID), pView->m_pDatabaseTCSequences[0].RemoveAt(pView->m_nDatabaseTCSequenceIndex); pDatabaseTCSequence[0]->GetName().IsEmpty(); )
				{
					pView->m_pDatabaseTCSequences[0].InsertAt((pView->m_nDatabaseTCSequenceIndex = 0), pDatabaseTCSequence[0], 1);
					return TRUE;
				}
				if ((pView->m_nDatabaseTCSequenceIndex = pView->m_pDatabaseTCSequences[0].Add(pDatabaseTCSequence[0])) >= 0) return TRUE;
				pView->m_nDatabaseTCSequenceIndex = -1;
				delete pDatabaseTCSequence[0];
				return FALSE;
			}
			if ((pDatabaseTCSequence[0] = new CDatabaseTCSequence))
			{
				for (pDatabaseTCSequence[0]->SetName(pView->GetName()), TransferTableData(pView, pDatabaseTCSequence[0], nControlID); pDatabaseTCSequence[0]->GetName().IsEmpty(); )
				{
					pView->m_pDatabaseTCSequences[0].InsertAt((pView->m_nDatabaseTCSequenceIndex = 0), pDatabaseTCSequence[0], 1);
					return TRUE;
				}
				if ((pView->m_nDatabaseTCSequenceIndex = pView->m_pDatabaseTCSequences[0].Add(pDatabaseTCSequence[0])) >= 0) return TRUE;
				delete pDatabaseTCSequence[0];
			}
			pView->m_nDatabaseTCSequenceIndex = -1;
			return FALSE;
		}
		if ((pDatabaseTCFunctionBlock = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_BCF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_BCCF), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_BCF)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_BCF_CNAME))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTCFunctionBlocks[0].GetAt(pView->m_pDatabaseTCFunctionBlocks[0].Find(pCell[0]->GetText())) : (CDatabaseTCFunctionBlock *)NULL))
		{
			TransferTableData(pView, pDatabaseTCFunctionBlock, nControlID);
			return TRUE;
		}
		return((nControlID == (UINT)-1) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)))
		{
			if ((pDatabaseOBProcessor[0] = (pView->GetName().Compare(pszValue)) ? pView->m_pDatabaseOBProcessors[0].GetAt((nIndex = pView->m_pDatabaseOBProcessors[0].Find(pView->GetName()))) : (CDatabaseOBProcessor *)NULL))
			{
				for (pView->SetName(pszValue); nIndex == pView->m_nDatabaseOBProcessorIndex && pView->m_pDatabaseOBProcessors[0].Find(pszValue) < 0; )
				{
					for (pDatabaseOBProcessor[0]->SetName(pszValue), pView->m_pDatabaseOBProcessors[0].RemoveAt(nIndex); !lstrlen(pszValue); )
					{
						pView->m_pDatabaseOBProcessors[0].InsertAt((pView->m_nDatabaseOBProcessorIndex = 0), pDatabaseOBProcessor[0], 1);
						return TRUE;
					}
					if ((pView->m_nDatabaseOBProcessorIndex = pView->m_pDatabaseOBProcessors[0].Add(pDatabaseOBProcessor[0])) >= 0) return TRUE;
					delete pDatabaseOBProcessor[0];
					return FALSE;
				}
				if (pView->m_pDatabaseOBProcessors[0].Find(pszValue) < 0)
				{
					if ((pDatabaseOBProcessor[1] = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_nDatabaseOBProcessorIndex)))
					{
						for (pDatabaseOBProcessor[1]->Copy(pDatabaseOBProcessor[0]), pDatabaseOBProcessor[1]->SetName(pszValue), pView->m_pDatabaseOBProcessors[0].RemoveAt(pView->m_nDatabaseOBProcessorIndex); !lstrlen(pszValue); )
						{
							pView->m_pDatabaseOBProcessors[0].InsertAt((pView->m_nDatabaseOBProcessorIndex = 0), pDatabaseOBProcessor[1], 1);
							return TRUE;
						}
						if ((pView->m_nDatabaseOBProcessorIndex = pView->m_pDatabaseOBProcessors[0].Add(pDatabaseOBProcessor[1])) >= 0) return TRUE;
						delete pDatabaseOBProcessor[1];
						return FALSE;
					}
					if ((pDatabaseOBProcessor[1] = new CDatabaseOBProcessor))
					{
						for (pDatabaseOBProcessor[1]->Copy(pDatabaseOBProcessor[0]), pDatabaseOBProcessor[1]->SetName(pszValue); !lstrlen(pszValue); )
						{
							pView->m_pDatabaseOBProcessors[0].InsertAt((pView->m_nDatabaseOBProcessorIndex = 0), pDatabaseOBProcessor[1], 1);
							return TRUE;
						}
						if ((pView->m_nDatabaseOBProcessorIndex = pView->m_pDatabaseOBProcessors[0].Add(pDatabaseOBProcessor[1])) >= 0) return TRUE;
						delete pDatabaseOBProcessor[1];
					}
					return FALSE;
				}
				if ((pDatabaseOBProcessor[0] = (nIndex != pView->m_nDatabaseOBProcessorIndex) ? pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_nDatabaseOBProcessorIndex) : (CDatabaseOBProcessor *)NULL))
				{
					pView->m_pDatabaseOBProcessors[0].RemoveAt(pView->m_nDatabaseOBProcessorIndex);
					pView->m_nDatabaseOBProcessorIndex = -1;
					delete pDatabaseOBProcessor[0];
				}
				return TRUE;
			}
			pView->SetName(pszValue);
			return TRUE;
		}
		if ((pDatabaseOBProcessor[0] = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_GEN), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_MAD), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_MEM), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_IMG), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CRC), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CAT), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PIMG), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_GEN)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseOBProcessors[0].GetAt((nIndex = pView->m_pDatabaseOBProcessors[0].Find(pCell[0]->GetText()))) : (CDatabaseOBProcessor *)NULL) && nIndex != pView->m_nDatabaseOBProcessorIndex)
		{
			TransferTableData(pView, pDatabaseOBProcessor[0], nControlID);
			return TRUE;
		}
		if (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_GEN), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_MAD), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_MEM), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_IMG), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CRC), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CAT), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PIMG), nControlID))
		{
			if ((pDatabaseOBProcessor[0] = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_nDatabaseOBProcessorIndex)) != (CDatabaseOBProcessor *)NULL)
			{
				for (pDatabaseOBProcessor[0]->SetName(pView->GetName()), TransferTableData(pView, pDatabaseOBProcessor[0], nControlID), pView->m_pDatabaseOBProcessors[0].RemoveAt(pView->m_nDatabaseOBProcessorIndex); pDatabaseOBProcessor[0]->GetName().IsEmpty(); )
				{
					pView->m_pDatabaseOBProcessors[0].InsertAt((pView->m_nDatabaseOBProcessorIndex = 0), pDatabaseOBProcessor[0], 1);
					return TRUE;
				}
				if ((pView->m_nDatabaseOBProcessorIndex = pView->m_pDatabaseOBProcessors[0].Add(pDatabaseOBProcessor[0])) >= 0) return TRUE;
				pView->m_nDatabaseOBProcessorIndex = -1;
				delete pDatabaseOBProcessor[0];
				return FALSE;
			}
			if ((pDatabaseOBProcessor[0] = new CDatabaseOBProcessor))
			{
				for (pDatabaseOBProcessor[0]->SetName(pView->GetName()), TransferTableData(pView, pDatabaseOBProcessor[0], nControlID); pDatabaseOBProcessor[0]->GetName().IsEmpty(); )
				{
					pView->m_pDatabaseOBProcessors[0].InsertAt((pView->m_nDatabaseOBProcessorIndex = 0), pDatabaseOBProcessor[0], 1);
					return TRUE;
				}
				if ((pView->m_nDatabaseOBProcessorIndex = pView->m_pDatabaseOBProcessors[0].Add(pDatabaseOBProcessor[0])) >= 0) return TRUE;
				delete pDatabaseOBProcessor[0];
			}
			pView->m_nDatabaseOBProcessorIndex = -1;
			return FALSE;
		}
		if ((pDatabaseOBProcessorMemoryImage = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_IMGP), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PIMG)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PIMG_MNAME))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt((nIndex = pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pCell[0]->GetText()))) : (CDatabaseOBProcessorMemoryImage *)NULL))
		{
			TransferTableData(pView, pDatabaseOBProcessorMemoryImage, nControlID);
			return TRUE;
		}
		return((nControlID == (UINT)-1) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)))
		{
			pView->SetName(pszValue);
			return TRUE;
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)))
		{
			if (AfxIsValidString(pszOldValue) && lstrcmp(pszValue, pszOldValue) != 0 && lstrlen(pszOldValue) > 0 && pView->m_pDatabaseTMNumCalTables[0].Find(pszOldValue) < 0 && CheckTableFieldData(pView, STRING(IDS_DATABASE_TABLE_CAL)))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMCALTABLE_DISCARD_QUESTION), pszOldValue), pView->EnableUndo(FALSE); pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO) == IDYES; )
				{
					InsertTableFieldData(pView, STRING(IDS_DATABASE_TABLE_CAL), pszOldValue);
					break;
				}
				pView->EnableUndo(TRUE);
			}
			return TRUE;
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)))
		{
			if (AfxIsValidString(pszOldValue) && lstrcmp(pszValue, pszOldValue) != 0 && lstrlen(pszOldValue) > 0 && pView->m_pDatabaseTMTxtCalTables[0].Find(pszOldValue) < 0 && CheckTableFieldData(pView, STRING(IDS_DATABASE_TABLE_TXF)))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTCALTABLE_DISCARD_QUESTION), pszOldValue), pView->EnableUndo(FALSE); pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO) == IDYES; )
				{
					InsertTableFieldData(pView, STRING(IDS_DATABASE_TABLE_TXF), pszOldValue);
					break;
				}
				pView->EnableUndo(TRUE);
			}
			return TRUE;
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)))
		{
			if (AfxIsValidString(pszOldValue) && lstrcmp(pszValue, pszOldValue) != 0 && lstrlen(pszOldValue) > 0 && pView->m_pDatabaseTMNumOolTables[0].Find(pszOldValue) < 0 && CheckTableFieldData(pView, STRING(IDS_DATABASE_TABLE_OCF)))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMOOLTABLE_DISCARD_QUESTION), pszOldValue), pView->EnableUndo(FALSE); pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO) == IDYES; )
				{
					InsertTableFieldData(pView, STRING(IDS_DATABASE_TABLE_OCF), pszOldValue);
					break;
				}
				pView->EnableUndo(TRUE);
			}
			return TRUE;
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)))
		{
			if (AfxIsValidString(pszOldValue) && lstrcmp(pszValue, pszOldValue) != 0 && lstrlen(pszOldValue) > 0 && pView->m_pDatabaseTMTxtOolTables[0].Find(pszOldValue) < 0 && CheckTableFieldData(pView, STRING(IDS_DATABASE_TABLE_FXF)))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTOOLTABLE_DISCARD_QUESTION), pszOldValue), pView->EnableUndo(FALSE); pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO) == IDYES; )
				{
					InsertTableFieldData(pView, STRING(IDS_DATABASE_TABLE_FXF), pszOldValue);
					break;
				}
				pView->EnableUndo(TRUE);
			}
			return TRUE;
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_NATURE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_NATURE)), sValue[0]); (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_DRVEXP)))); )
				{
					pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TMPARAMETER_NATURE_DERIVED  &&  bValue) ? TRUE : FALSE);
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_EXPTRG))))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TMPARAMETER_NATURE_DERIVED  &&  bValue) ? TRUE : FALSE);
				if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_TRGTYP))))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TMPARAMETER_NATURE_DERIVED  &&  bValue) ? TRUE : FALSE);
				if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_PARVAL))))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TMPARAMETER_NATURE_CONSTANT  &&  bValue) ? TRUE : FALSE);
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_CATEG)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_CATEG)), sValue[0]); (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_INTER)))); )
				{
					pView->UpdateTableCellValue(pTable[0], pCell[0], (pCell[0]->TranslateValue(TMPARAMETER_INTERPRETATION_FULL, szText) && sValue[0].Value.nValue == TMPARAMETER_CALIBRATION_NUMERICAL  &&  bValue) ? szText : EMPTYSTRING);
					pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TMPARAMETER_CALIBRATION_NUMERICAL || !bValue) ? TRUE : FALSE);
					break;
				}
			}
			if ((pDatabaseTMParameter[0] = (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_CATEG))) ? pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pView->GetName())) : (CDatabaseTMParameter *)NULL))
			{
				pDatabaseTMParameter[0]->SetCalTables(szTables[0], szTables[1]);
				pDatabaseTMParameter[0]->SetOolTables(szTables[0], szTables[1]);
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCAL))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCAL_NAME)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (szValue = pTable[0]->GetCellText(nRow, STRING(IDS_DATABASE_TABLE_PCAL_NAME)); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCAL_VALID))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (pView->m_pDatabaseTMNumCalTables[0].Find(szValue) >= 0) ? TRUE : FALSE);
						break;
					}
				}
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PTXF))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PTXF_NAME)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (szValue = pTable[0]->GetCellText(nRow, STRING(IDS_DATABASE_TABLE_PTXF_NAME)); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PTXF_VALID))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (pView->m_pDatabaseTMTxtCalTables[0].Find(szValue) >= 0) ? TRUE : FALSE);
						break;
					}
				}
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_POCF))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_POCF_NAME)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (szValue = pTable[0]->GetCellText(nRow, STRING(IDS_DATABASE_TABLE_POCF_NAME)); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_POCF_VALID))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (pView->m_pDatabaseTMNumOolTables[0].Find(szValue) >= 0) ? TRUE : FALSE);
						break;
					}
				}
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PFXF))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PFXF_NAME)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (szValue = pTable[0]->GetCellText(nRow, STRING(IDS_DATABASE_TABLE_PFXF_NAME)); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PFXF_VALID))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (pView->m_pDatabaseTMTxtOolTables[0].Find(szValue) >= 0) ? TRUE : FALSE);
						break;
					}
				}
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)), sValue[0]); (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_CODING)))); )
				{
					pView->EnableTableCellValue(pTable[0], pCell[0], (pCell[0]->TranslateValue((ULONGLONG)TMOOLTABLE_CODING_FLOATINGPOINT, szText)) ? szText : EMPTYSTRING, ((sValue[0].Value.nValue & TMOOLTABLE_CHECK_RAW) || !bValue) ? TRUE : FALSE);
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_RADIX))))) pView->EnableTableCellValue(pTable[0], pCell[0], (pCell[0]->TranslateValue((ULONGLONG)TMOOLTABLE_RADIX_DECIMAL, szText)) ? szText : EMPTYSTRING, ((sValue[0].Value.nValue & TMOOLTABLE_CHECK_RAW) || !bValue) ? TRUE : FALSE);
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_CODING)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_CODING)), sValue[0]); (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_RADIX)))); )
				{
					pView->EnableTableCellValue(pTable[0], pCell[0], (pCell[0]->TranslateValue((ULONGLONG)TMOOLTABLE_RADIX_DECIMAL, szText)) ? szText : EMPTYSTRING, (sValue[0].Value.nValue == TMOOLTABLE_CODING_UNSIGNEDINTEGER || !bValue) ? TRUE : FALSE);
					break;
				}
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_INTER)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_INTER)), sValue[0]); (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_RADIX)))); )
				{
					pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, ((sValue[0].Value.nValue & TMOOLTABLE_CHECK_RAW) || !bValue) ? TRUE : FALSE);
					break;
				}
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCFP))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCFP_TYPE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_OCFP_TYPE), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_OCFP_LVALUE))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TMOOLLIMIT_TYPE_NONE || !bValue) ? TRUE : FALSE);
						break;
					}
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_OCFP_HVALUE)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TMOOLLIMIT_TYPE_NONE || !bValue) ? TRUE : FALSE);
				}
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXFP))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXFP_TYPE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_FXFP_TYPE), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_FXFP_FROM))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TMOOLLIMIT_TYPE_NONE || !bValue) ? TRUE : FALSE);
						break;
					}
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_FXFP_TO)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TMOOLLIMIT_TYPE_NONE || !bValue) ? TRUE : FALSE);
				}
			}
		}
		for (ArrangeTables(pView, nControlID); (pDatabaseTMParameter[0] = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PCF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PCAL), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PTXF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_POCF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PFXF), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_NAME))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pCell[0]->GetText())) : (CDatabaseTMParameter *)NULL); )
		{
			TransferTableData(pView, pDatabaseTMParameter[0], nControlID);
			return TRUE;
		}
		if ((pDatabaseTMNumCalTable = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CAL), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CALP), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NAME))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find(pCell[0]->GetText())) : (CDatabaseTMNumCalTable *)NULL))
		{
			TransferTableData(pView, pDatabaseTMNumCalTable, nControlID);
			return TRUE;
		}
		if ((pDatabaseTMTxtCalTable = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_TXF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_TXFP), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NAME))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find(pCell[0]->GetText())) : (CDatabaseTMTxtCalTable *)NULL))
		{
			TransferTableData(pView, pDatabaseTMTxtCalTable, nControlID);
			return TRUE;
		}
		if ((pDatabaseTMNumOolTable = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_OCF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_OCFP), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NAME))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find(pCell[0]->GetText())) : (CDatabaseTMNumOolTable *)NULL))
		{
			TransferTableData(pView, pDatabaseTMNumOolTable, nControlID);
			return TRUE;
		}
		if ((pDatabaseTMTxtOolTable = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_FXF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_FXFP), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NAME))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find(pCell[0]->GetText())) : (CDatabaseTMTxtOolTable *)NULL))
		{
			TransferTableData(pView, pDatabaseTMTxtOolTable, nControlID);
			return TRUE;
		}
		return((nControlID == (UINT)-1) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)))
		{
			pView->SetName(pszValue);
			return TRUE;
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)))
		{
			if (AfxIsValidString(pszOldValue) && lstrcmp(pszValue, pszOldValue) != 0 && lstrlen(pszOldValue) > 0 && pView->m_pDatabaseTCNumCalTables[0].Find(pszOldValue) < 0 && CheckTableFieldData(pView, STRING(IDS_DATABASE_TABLE_CAL)))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMCALTABLE_DISCARD_QUESTION), pszOldValue), pView->EnableUndo(FALSE); pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO) == IDYES; )
				{
					InsertTableFieldData(pView, STRING(IDS_DATABASE_TABLE_CAL), pszOldValue);
					break;
				}
				pView->EnableUndo(TRUE);
			}
			return TRUE;
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)))
		{
			if (AfxIsValidString(pszOldValue) && lstrcmp(pszValue, pszOldValue) != 0 && lstrlen(pszOldValue) > 0 && pView->m_pDatabaseTCTxtCalTables[0].Find(pszOldValue) < 0 && CheckTableFieldData(pView, STRING(IDS_DATABASE_TABLE_TXF)))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTCALTABLE_DISCARD_QUESTION), pszOldValue), pView->EnableUndo(FALSE); pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO) == IDYES; )
				{
					InsertTableFieldData(pView, STRING(IDS_DATABASE_TABLE_TXF), pszOldValue);
					break;
				}
				pView->EnableUndo(TRUE);
			}
			return TRUE;
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)))
		{
			if (AfxIsValidString(pszOldValue) && lstrcmp(pszValue, pszOldValue) != 0 && lstrlen(pszOldValue) > 0 && pView->m_pDatabaseTCNumOolTables[0].Find(pszOldValue) < 0 && CheckTableFieldData(pView, STRING(IDS_DATABASE_TABLE_OCF)))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMOOLTABLE_DISCARD_QUESTION), pszOldValue), pView->EnableUndo(FALSE); pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO) == IDYES; )
				{
					InsertTableFieldData(pView, STRING(IDS_DATABASE_TABLE_OCF), pszOldValue);
					break;
				}
				pView->EnableUndo(TRUE);
			}
			return TRUE;
		}
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)))
		{
			if (AfxIsValidString(pszOldValue) && lstrcmp(pszValue, pszOldValue) != 0 && lstrlen(pszOldValue) > 0 && pView->m_pDatabaseTCTxtOolTables[0].Find(pszOldValue) < 0 && CheckTableFieldData(pView, STRING(IDS_DATABASE_TABLE_FXF)))
			{
				for (szMessage.Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTOOLTABLE_DISCARD_QUESTION), pszOldValue), pView->EnableUndo(FALSE); pView->MessageBox(szMessage, cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO) == IDYES; )
				{
					InsertTableFieldData(pView, STRING(IDS_DATABASE_TABLE_FXF), pszOldValue);
					break;
				}
				pView->EnableUndo(TRUE);
			}
			return TRUE;
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CPC))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_CATEG)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_CATEG)), sValue[0]); (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_CALREF)))); )
				{
					pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TCPARAMETER_CALIBRATION_NUMERICAL || !bValue) ? TRUE : FALSE);
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_TXFREF))))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TCPARAMETER_CALIBRATION_STATUS || !bValue) ? TRUE : FALSE);
				if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_OCFREF))))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TCPARAMETER_CALIBRATION_NONE || sValue[0].Value.nValue == TCPARAMETER_CALIBRATION_NUMERICAL || !bValue) ? TRUE : FALSE);
				if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_FXFREF))))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == TCPARAMETER_CALIBRATION_STATUS || !bValue) ? TRUE : FALSE);
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)), sValue[0]); (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_CODING)))); )
				{
					pView->EnableTableCellValue(pTable[0], pCell[0], (pCell[0]->TranslateValue((ULONGLONG)TCOOLTABLE_CODING_FLOATINGPOINT, szText)) ? szText : EMPTYSTRING, ((sValue[0].Value.nValue & TCOOLTABLE_CHECK_RAW) || !bValue) ? TRUE : FALSE);
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_RADIX))))) pView->EnableTableCellValue(pTable[0], pCell[0], (pCell[0]->TranslateValue((ULONGLONG)TCOOLTABLE_RADIX_DECIMAL, szText)) ? szText : EMPTYSTRING, ((sValue[0].Value.nValue & TCOOLTABLE_CHECK_RAW) || !bValue) ? TRUE : FALSE);
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_CODING)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_CODING)), sValue[0]); (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_RADIX)))); )
				{
					pView->EnableTableCellValue(pTable[0], pCell[0], (pCell[0]->TranslateValue((ULONGLONG)TCOOLTABLE_RADIX_DECIMAL, szText)) ? szText : EMPTYSTRING, (sValue[0].Value.nValue == TCOOLTABLE_CODING_UNSIGNEDINTEGER || !bValue) ? TRUE : FALSE);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK))))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, FALSE);
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_INTER)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_INTER)), sValue[0]); (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_RADIX)))); )
				{
					pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, ((sValue[0].Value.nValue & TCOOLTABLE_CHECK_RAW) || !bValue) ? TRUE : FALSE);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK))))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, FALSE);
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCFP))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCFP_TYPE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_OCFP_TYPE), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_OCFP_LVALUE))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TCOOLLIMIT_TYPE_NONE || !bValue) ? TRUE : FALSE);
						break;
					}
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_OCFP_HVALUE)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TCOOLLIMIT_TYPE_NONE || !bValue) ? TRUE : FALSE);
				}
			}
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXFP))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXFP_TYPE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (bValue = pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_FXFP_TYPE), sValue[0]); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_FXFP_FROM))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TCOOLLIMIT_TYPE_NONE || !bValue) ? TRUE : FALSE);
						break;
					}
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_FXFP_TO)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != TCOOLLIMIT_TYPE_NONE || !bValue) ? TRUE : FALSE);
				}
			}
		}
		for (ArrangeTables(pView, nControlID); (pDatabaseTCParameter[0] = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CPC), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CPC)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_PNAME))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pCell[0]->GetText())) : (CDatabaseTCParameter *)NULL); )
		{
			TransferTableData(pView, pDatabaseTCParameter[0], nControlID);
			return TRUE;
		}
		if ((pDatabaseTCNumCalTable = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CAL), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CALP), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NAME))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTCNumCalTables[0].GetAt(pView->m_pDatabaseTCNumCalTables[0].Find(pCell[0]->GetText())) : (CDatabaseTCNumCalTable *)NULL))
		{
			TransferTableData(pView, pDatabaseTCNumCalTable, nControlID);
			return TRUE;
		}
		if ((pDatabaseTCTxtCalTable = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_TXF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_TXFP), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NAME))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTCTxtCalTables[0].GetAt(pView->m_pDatabaseTCTxtCalTables[0].Find(pCell[0]->GetText())) : (CDatabaseTCTxtCalTable *)NULL))
		{
			TransferTableData(pView, pDatabaseTCTxtCalTable, nControlID);
			return TRUE;
		}
		if ((pDatabaseTCNumOolTable = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_OCF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_OCFP), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NAME))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTCNumOolTables[0].GetAt(pView->m_pDatabaseTCNumOolTables[0].Find(pCell[0]->GetText())) : (CDatabaseTCNumOolTable *)NULL))
		{
			TransferTableData(pView, pDatabaseTCNumOolTable, nControlID);
			return TRUE;
		}
		if ((pDatabaseTCTxtOolTable = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_FXF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_FXFP), nControlID)) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NAME))) : (CTableViewCell *)NULL)) ? pView->m_pDatabaseTCTxtOolTables[0].GetAt(pView->m_pDatabaseTCTxtOolTables[0].Find(pCell[0]->GetText())) : (CDatabaseTCTxtOolTable *)NULL))
		{
			TransferTableData(pView, pDatabaseTCTxtOolTable, nControlID);
			return TRUE;
		}
		return((nControlID == (UINT)-1) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_NUMBER)))
		{
			pView->SetName(pszValue);
			return TRUE;
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_DPFP))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_DPFP_PNAME)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (nRow = (nControlID != (UINT)-1) ? pTable[0]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[0]->GetSelRow() + 1) : pTable[0]->GetRows(); nRow < nRows && nRow > 0; nRow++)
				{
					for (szValue = pTable[0]->GetCellText(nRow, STRING(IDS_DATABASE_TABLE_DPFP_PNAME)); (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_COMM))); )
					{
						pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, !szValue.IsEmpty());
						break;
					}
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_VALMODE)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, !szValue.IsEmpty());
					if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_VALCHARS)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, !szValue.IsEmpty());
				}
			}
		}
		if ((pANDLayout = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_DPF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_DPFP), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT), nControlID) || (nControlID == (UINT)-1 && !lstrcmp(pszValue, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_DPF)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_DPF_NUMBER))) : (CTableViewCell *)NULL)) ? pView->m_pANDLayouts[0].GetAt(pView->m_pANDLayouts[0].Find(pCell[0]->GetText())) : (CANDLayout *)NULL))
		{
			TransferTableData(pView, pANDLayout, nControlID);
			return TRUE;
		}
		return((nControlID == (UINT)-1) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_NUMBER)))
		{
			pView->SetName(pszValue);
			return TRUE;
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_GPF))))
		{
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_TYPE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_TYPE)), sValue[0]), sValue[0].Value.nValue *= bValue; sValue[0].Value.nValue != GRDLAYOUT_TYPE_DIAGRAM; )
				{
					if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE), STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_VALUE)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING);
					if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_GPF_MODE), STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_VALUE)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING);
					if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_GPF_INTERVAL), STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_VALUE)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING);
					if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_GPF_YGRIDS), STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_VALUE)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue != GRDLAYOUT_TYPE_STRIPCHART) ? TRUE : FALSE);
					break;
				}
				if (sValue[0].Value.nValue == GRDLAYOUT_TYPE_DIAGRAM)
				{
					if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE), STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_VALUE)))) pView->EnableTableCellValue(pTable[0], pCell[0], (pCell[0]->TranslateValue((ULONGLONG)GRDLAYOUT_MODE_NORMAL, szText)) ? szText : EMPTYSTRING, FALSE);
					if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_GPF_MODE), STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_VALUE)))) pView->EnableTableCellValue(pTable[0], pCell[0], (pCell[0]->TranslateValue((ULONGLONG)GRDLAYOUT_MODE_RESTART, szText)) ? szText : EMPTYSTRING, FALSE);
					if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_GPF_INTERVAL), STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_VALUE)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, FALSE);
					if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_GPF_YGRIDS), STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_VALUE)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, TRUE);
				}
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_GPFP))))
				{
					for (nParameter = 1, nParameters = (sValue[0].Value.nValue != GRDLAYOUT_TYPE_DIAGRAM) ? pTable[1]->GetRows() : 0; nParameter < nParameters; nParameter++)
					{
						if ((pCell[1] = pTable[1]->FindCell(nParameter, STRING(IDS_DATABASE_TABLE_GPFP_COLOR)))) pView->EnableTableCellValue(pTable[1], pCell[1], EMPTYSTRING);
						if ((pCell[1] = pTable[1]->FindCell(nParameter, STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH)))) pView->EnableTableCellValue(pTable[1], pCell[1], EMPTYSTRING);
						if ((pCell[1] = pTable[1]->FindCell(nParameter, STRING(IDS_DATABASE_TABLE_GPFP_LINESTYLE)))) pView->EnableTableCellValue(pTable[1], pCell[1], EMPTYSTRING);
						if ((pCell[1] = pTable[1]->FindCell(nParameter, STRING(IDS_DATABASE_TABLE_GPFP_LINESYMBOL)))) pView->EnableTableCellValue(pTable[1], pCell[1], EMPTYSTRING);
					}
					for (nParameter = 1, nParameters = (sValue[0].Value.nValue == GRDLAYOUT_TYPE_DIAGRAM) ? (pTable[1]->GetRows() - 1) : 0; nParameter < nParameters; nParameter += 2)
					{
						if ((pCell[1] = ((pCell[0] = pTable[1]->FindCell(nParameter, STRING(IDS_DATABASE_TABLE_GPFP_COLOR))) ? pTable[1]->FindCell(nParameter + 1, STRING(IDS_DATABASE_TABLE_GPFP_COLOR)) : (CTableViewCell *)NULL)))
						{
							pView->EnableTableCellValue(pTable[1], pCell[1], pCell[0]->GetText(), FALSE);
							pView->UpdateTableCellValue(pTable[1], pCell[1], pCell[0]->GetText());
						}
						if ((pCell[1] = ((pCell[0] = pTable[1]->FindCell(nParameter, STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH))) ? pTable[1]->FindCell(nParameter + 1, STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH)) : (CTableViewCell *)NULL)))
						{
							pView->EnableTableCellValue(pTable[1], pCell[1], pCell[0]->GetText(), FALSE);
							pView->UpdateTableCellValue(pTable[1], pCell[1], pCell[0]->GetText());
						}
						if ((pCell[1] = ((pCell[0] = pTable[1]->FindCell(nParameter, STRING(IDS_DATABASE_TABLE_GPFP_LINESTYLE))) ? pTable[1]->FindCell(nParameter + 1, STRING(IDS_DATABASE_TABLE_GPFP_LINESTYLE)) : (CTableViewCell *)NULL)))
						{
							pView->EnableTableCellValue(pTable[1], pCell[1], pCell[0]->GetText(), FALSE);
							pView->UpdateTableCellValue(pTable[1], pCell[1], pCell[0]->GetText());
						}
						if ((pCell[1] = ((pCell[0] = pTable[1]->FindCell(nParameter, STRING(IDS_DATABASE_TABLE_GPFP_LINESYMBOL))) ? pTable[1]->FindCell(nParameter + 1, STRING(IDS_DATABASE_TABLE_GPFP_LINESYMBOL)) : (CTableViewCell *)NULL)))
						{
							pView->EnableTableCellValue(pTable[1], pCell[1], pCell[0]->GetText(), FALSE);
							pView->UpdateTableCellValue(pTable[1], pCell[1], pCell[0]->GetText());
						}
					}
				}
			}
			if (nControlID == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_MODE)) || (nControlID == (UINT)-1 && pTable[0]->GetName() == pszValue))
			{
				for (bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_MODE)), sValue[0]); (pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_GPF_INTERVAL), STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_VALUE))); )
				{
					pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (sValue[0].Value.nValue == GRDLAYOUT_MODE_SCROLL || !bValue) ? TRUE : FALSE);
					break;
				}
			}
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_GPFP))))
			{
				if (nControlID == TranslateTableFieldToID(pView, pTable[1]->GetName(), STRING(IDS_DATABASE_TABLE_GPFP_COLOR)) || (nControlID == (UINT)-1 && pTable[1]->GetName() == pszValue))
				{
					for (nRow = (nControlID != (UINT)-1) ? pTable[1]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[1]->GetSelRow() + 1) : pTable[1]->GetRows(), nRows = ((bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_TYPE)), sValue[0])) && sValue[0].Value.nValue == GRDLAYOUT_TYPE_DIAGRAM) ? nRows : 0; nRow < nRows && nRow > 0; nRow++)
					{
						if ((pCell[1] = ((pCell[0] = pTable[1]->FindCell((nRow % 2 == 0) ? (nRow - 1) : nRow, STRING(IDS_DATABASE_TABLE_GPFP_COLOR)))) ? pTable[1]->FindCell((nRow % 2 != 0) ? (nRow + 1) : nRow, STRING(IDS_DATABASE_TABLE_GPFP_COLOR)) : (CTableViewCell *)NULL))
						{
							pView->EnableTableCellValue(pTable[1], pCell[1], pCell[0]->GetText(), (nRow % 2) ? TRUE : FALSE);
							pView->UpdateTableCellValue(pTable[1], pCell[1], pCell[0]->GetText());
						}
					}
				}
				if (nControlID == TranslateTableFieldToID(pView, pTable[1]->GetName(), STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH)) || (nControlID == (UINT)-1 && pTable[1]->GetName() == pszValue))
				{
					for (nRow = (nControlID != (UINT)-1) ? pTable[1]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[1]->GetSelRow() + 1) : pTable[1]->GetRows(), nRows = ((bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_TYPE)), sValue[0])) && sValue[0].Value.nValue == GRDLAYOUT_TYPE_DIAGRAM) ? nRows : 0; nRow < nRows && nRow > 0; nRow++)
					{
						if ((pCell[1] = ((pCell[0] = pTable[1]->FindCell((nRow % 2 == 0) ? (nRow - 1) : nRow, STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH)))) ? pTable[1]->FindCell((nRow % 2 != 0) ? (nRow + 1) : nRow, STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH)) : (CTableViewCell *)NULL))
						{
							pView->EnableTableCellValue(pTable[1], pCell[1], pCell[0]->GetText(), (nRow % 2) ? TRUE : FALSE);
							pView->UpdateTableCellValue(pTable[1], pCell[1], pCell[0]->GetText());
						}
					}
				}
				if (nControlID == TranslateTableFieldToID(pView, pTable[1]->GetName(), STRING(IDS_DATABASE_TABLE_GPFP_LINESTYLE)) || (nControlID == (UINT)-1 && pTable[1]->GetName() == pszValue))
				{
					for (nRow = (nControlID != (UINT)-1) ? pTable[1]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[1]->GetSelRow() + 1) : pTable[1]->GetRows(), nRows = ((bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_TYPE)), sValue[0])) && sValue[0].Value.nValue == GRDLAYOUT_TYPE_DIAGRAM) ? nRows : 0; nRow < nRows && nRow > 0; nRow++)
					{
						if ((pCell[1] = ((pCell[0] = pTable[1]->FindCell((nRow % 2 == 0) ? (nRow - 1) : nRow, STRING(IDS_DATABASE_TABLE_GPFP_LINESTYLE)))) ? pTable[1]->FindCell((nRow % 2 != 0) ? (nRow + 1) : nRow, STRING(IDS_DATABASE_TABLE_GPFP_LINESTYLE)) : (CTableViewCell *)NULL))
						{
							pView->EnableTableCellValue(pTable[1], pCell[1], pCell[0]->GetText(), (nRow % 2) ? TRUE : FALSE);
							pView->UpdateTableCellValue(pTable[1], pCell[1], pCell[0]->GetText());
						}
					}
				}
				if (nControlID == TranslateTableFieldToID(pView, pTable[1]->GetName(), STRING(IDS_DATABASE_TABLE_GPFP_LINESYMBOL)) || (nControlID == (UINT)-1 && pTable[1]->GetName() == pszValue))
				{
					for (nRow = (nControlID != (UINT)-1) ? pTable[1]->GetSelRow() : 1, nRows = (nControlID != (UINT)-1) ? (pTable[1]->GetSelRow() + 1) : pTable[1]->GetRows(), nRows = ((bValue = pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_TYPE)), sValue[0])) && sValue[0].Value.nValue == GRDLAYOUT_TYPE_DIAGRAM) ? nRows : 0; nRow < nRows && nRow > 0; nRow++)
					{
						if ((pCell[1] = ((pCell[0] = pTable[1]->FindCell((nRow % 2 == 0) ? (nRow - 1) : nRow, STRING(IDS_DATABASE_TABLE_GPFP_LINESYMBOL)))) ? pTable[1]->FindCell((nRow % 2 != 0) ? (nRow + 1) : nRow, STRING(IDS_DATABASE_TABLE_GPFP_LINESYMBOL)) : (CTableViewCell *)NULL))
						{
							pView->EnableTableCellValue(pTable[1], pCell[1], pCell[0]->GetText(), (nRow % 2) ? TRUE : FALSE);
							pView->UpdateTableCellValue(pTable[1], pCell[1], pCell[0]->GetText());
						}
					}
				}
			}
		}
		if ((pGRDLayout = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_GPF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_GPFP), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT), nControlID) || (nControlID == (UINT)-1 && !lstrcmp(pszValue, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_GPF)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_NUMBER))) : (CTableViewCell *)NULL)) ? pView->m_pGRDLayouts[0].GetAt(pView->m_pGRDLayouts[0].Find(pCell[0]->GetText())) : (CGRDLayout *)NULL))
		{
			TransferTableData(pView, pGRDLayout, nControlID);
			return TRUE;
		}
		return((nControlID == (UINT)-1) ? TRUE : FALSE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if (nControlID == TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_NUMBER)))
		{
			pView->SetName(pszValue);
			return TRUE;
		}
		if ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF))))
		{
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK))))
			{
				if (nControlID == TranslateTableFieldToID(pView, pTable[1]->GetName(), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || (nControlID == (UINT)-1 && pTable[1]->GetName() == pszValue))
				{
					for (nRow = 0, nRows = pTable[1]->GetRows(); nRow < nRows; nRow++)
					{
						if ((pCell[1] = pTable[1]->FindCell(nRow, pTable[1]->GetColumns() - 1)))
						{
							if (!pCell[1]->GetText().IsEmpty()) break;
							continue;
						}
					}
					if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR), STRING(IDS_DATABASE_TABLE_PPF_TITLEITEM_VALUE)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (nRow < nRows) ? TRUE : FALSE);
				}
			}
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS))))
			{
				if (nControlID == TranslateTableFieldToID(pView, pTable[1]->GetName(), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || (nControlID == (UINT)-1 && pTable[1]->GetName() == pszValue))
				{
					for (nRow = 0, nRows = pTable[1]->GetRows(); nRow < nRows; nRow++)
					{
						if ((pCell[1] = pTable[1]->FindCell(nRow, pTable[1]->GetColumns() - 1)))
						{
							if (!pCell[1]->GetText().IsEmpty()) break;
							continue;
						}
					}
					if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR), STRING(IDS_DATABASE_TABLE_PPF_TITLEITEM_VALUE)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (nRow < nRows) ? TRUE : FALSE);
				}
			}
			if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS))))
			{
				if (nControlID == TranslateTableFieldToID(pView, pTable[1]->GetName(), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)) || (nControlID == (UINT)-1 && pTable[1]->GetName() == pszValue))
				{
					for (nRow = 0, nRows = pTable[1]->GetRows(); nRow < nRows; nRow++)
					{
						if ((pCell[1] = pTable[1]->FindCell(nRow, pTable[1]->GetColumns() - 1)))
						{
							if (!pCell[1]->GetText().IsEmpty()) break;
							continue;
						}
					}
					if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR), STRING(IDS_DATABASE_TABLE_PPF_TITLEITEM_VALUE)))) pView->EnableTableCellValue(pTable[0], pCell[0], EMPTYSTRING, (nRow < nRows) ? TRUE : FALSE);
				}
			}
		}
		if ((pPODLayout = ((pCell[0] = ((pTable[0] = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PPF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT), nControlID) || (nControlID == (UINT)-1 && !lstrcmp(pszValue, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)))) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF)) : (CTableViewObject *)NULL)) ? pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PPF_NUMBER))) : (CTableViewCell *)NULL)) ? pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pCell[0]->GetText())) : (CPODLayout *)NULL))
		{
			TransferTableData(pView, pPODLayout, nControlID);
			return TRUE;
		}
		return((nControlID == (UINT)-1) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CALTELDatabaseEngine::InsertTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszValue)
{
	INT  nIndex;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCSequence  *pDatabaseTCSequence;
	CDatabaseOBProcessor  *pDatabaseOBProcessor;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;
	CANDLayout  *pANDLayout;
	CGRDLayout  *pGRDLayout;
	CPODLayout  *pPODLayout;

	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET)
	{
		if ((pDatabaseTMPacket = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF))) ? new CDatabaseTMPacket : (CDatabaseTMPacket *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTMPacket)) ? pView->m_pDatabaseTMPackets[0].Add(pDatabaseTMPacket) : -1) >= 0) return nIndex;
			delete pDatabaseTMPacket;
			return -1;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if ((pDatabaseTCFunction = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF))) ? new CDatabaseTCFunction : (CDatabaseTCFunction *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTCFunction)) ? pView->m_pDatabaseTCFunctions[0].Add(pDatabaseTCFunction) : -1) >= 0) return nIndex;
			delete pDatabaseTCFunction;
			return -1;
		}
		if ((pDatabaseTCPacket = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP))) ? new CDatabaseTCPacket : (CDatabaseTCPacket *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTCPacket)) ? pView->m_pDatabaseTCPackets[0].Add(pDatabaseTCPacket) : -1) >= 0) return nIndex;
			delete pDatabaseTCPacket;
			return -1;
		}
		if ((pDatabaseTCPreExeGroup = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP))) ? new CDatabaseTCPreExeGroup : (CDatabaseTCPreExeGroup *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTCPreExeGroup)) ? pView->m_pDatabaseTCPreExeGroups[0].Add(pDatabaseTCPreExeGroup) : -1) >= 0) return nIndex;
			delete pDatabaseTCPreExeGroup;
			return -1;
		}
		if ((pDatabaseTCExeVerGroup = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP))) ? new CDatabaseTCExeVerGroup : (CDatabaseTCExeVerGroup *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTCExeVerGroup)) ? pView->m_pDatabaseTCExeVerGroups[0].Add(pDatabaseTCExeVerGroup) : -1) >= 0) return nIndex;
			delete pDatabaseTCExeVerGroup;
			return -1;
		}
		if ((pDatabaseTCParameterSet = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS))) ? new CDatabaseTCParameterSet : (CDatabaseTCParameterSet *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTCParameterSet)) ? pView->m_pDatabaseTCParameterSets[0].Add(pDatabaseTCParameterSet) : -1) >= 0) return nIndex;
			delete pDatabaseTCParameterSet;
			return -1;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if ((pDatabaseTCSequence = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF))) ? new CDatabaseTCSequence : (CDatabaseTCSequence *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTCSequence)) ? pView->m_pDatabaseTCSequences[0].Add(pDatabaseTCSequence) : -1) >= 0) return nIndex;
			delete pDatabaseTCSequence;
			return -1;
		}
		if ((pDatabaseTCFunctionBlock = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF))) ? new CDatabaseTCFunctionBlock : (CDatabaseTCFunctionBlock *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTCFunctionBlock)) ? pView->m_pDatabaseTCFunctionBlocks[0].Add(pDatabaseTCFunctionBlock) : -1) >= 0) return nIndex;
			delete pDatabaseTCFunctionBlock;
			return -1;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((pDatabaseOBProcessor = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN))) ? new CDatabaseOBProcessor : (CDatabaseOBProcessor *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseOBProcessor)) ? pView->m_pDatabaseOBProcessors[0].Add(pDatabaseOBProcessor) : -1) >= 0) return nIndex;
			delete pDatabaseOBProcessor;
			return -1;
		}
		if ((pDatabaseOBProcessorMemoryImage = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG))) ? new CDatabaseOBProcessorMemoryImage : (CDatabaseOBProcessorMemoryImage *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseOBProcessorMemoryImage)) ? pView->m_pDatabaseOBProcessorMemoryImages[0].Add(pDatabaseOBProcessorMemoryImage) : -1) >= 0) return nIndex;
			delete pDatabaseOBProcessorMemoryImage;
			return -1;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if ((pDatabaseTMParameter = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF))) ? new CDatabaseTMParameter : (CDatabaseTMParameter *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTMParameter)) ? pView->m_pDatabaseTMParameters[0].Add(pDatabaseTMParameter) : -1) >= 0) return nIndex;
			delete pDatabaseTMParameter;
			return -1;
		}
		if ((pDatabaseTMNumCalTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? new CDatabaseTMNumCalTable : (CDatabaseTMNumCalTable *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTMNumCalTable)) ? pView->m_pDatabaseTMNumCalTables[0].Add(pDatabaseTMNumCalTable) : -1) >= 0) return nIndex;
			delete pDatabaseTMNumCalTable;
			return -1;
		}
		if ((pDatabaseTMTxtCalTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? new CDatabaseTMTxtCalTable : (CDatabaseTMTxtCalTable *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTMTxtCalTable)) ? pView->m_pDatabaseTMTxtCalTables[0].Add(pDatabaseTMTxtCalTable) : -1) >= 0) return nIndex;
			delete pDatabaseTMTxtCalTable;
			return -1;
		}
		if ((pDatabaseTMNumOolTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? new CDatabaseTMNumOolTable : (CDatabaseTMNumOolTable *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTMNumOolTable)) ? pView->m_pDatabaseTMNumOolTables[0].Add(pDatabaseTMNumOolTable) : -1) >= 0) return nIndex;
			delete pDatabaseTMNumOolTable;
			return -1;
		}
		if ((pDatabaseTMTxtOolTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? new CDatabaseTMTxtOolTable : (CDatabaseTMTxtOolTable *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTMTxtOolTable)) ? pView->m_pDatabaseTMTxtOolTables[0].Add(pDatabaseTMTxtOolTable) : -1) >= 0) return nIndex;
			delete pDatabaseTMTxtOolTable;
			return -1;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if ((pDatabaseTCParameter = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC))) ? new CDatabaseTCParameter : (CDatabaseTCParameter *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTCParameter)) ? pView->m_pDatabaseTCParameters[0].Add(pDatabaseTCParameter) : -1) >= 0) return nIndex;
			delete pDatabaseTCParameter;
			return -1;
		}
		if ((pDatabaseTCNumCalTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? new CDatabaseTCNumCalTable : (CDatabaseTCNumCalTable *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTCNumCalTable)) ? pView->m_pDatabaseTCNumCalTables[0].Add(pDatabaseTCNumCalTable) : -1) >= 0) return nIndex;
			delete pDatabaseTCNumCalTable;
			return -1;
		}
		if ((pDatabaseTCTxtCalTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? new CDatabaseTCTxtCalTable : (CDatabaseTCTxtCalTable *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTCTxtCalTable)) ? pView->m_pDatabaseTCTxtCalTables[0].Add(pDatabaseTCTxtCalTable) : -1) >= 0) return nIndex;
			delete pDatabaseTCTxtCalTable;
			return -1;
		}
		if ((pDatabaseTCNumOolTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? new CDatabaseTCNumOolTable : (CDatabaseTCNumOolTable *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTCNumOolTable)) ? pView->m_pDatabaseTCNumOolTables[0].Add(pDatabaseTCNumOolTable) : -1) >= 0) return nIndex;
			delete pDatabaseTCNumOolTable;
			return -1;
		}
		if ((pDatabaseTCTxtOolTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? new CDatabaseTCTxtOolTable : (CDatabaseTCTxtOolTable *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pDatabaseTCTxtOolTable)) ? pView->m_pDatabaseTCTxtOolTables[0].Add(pDatabaseTCTxtOolTable) : -1) >= 0) return nIndex;
			delete pDatabaseTCTxtOolTable;
			return -1;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if ((pANDLayout = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF))) ? new CANDLayout : (CANDLayout *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pANDLayout)) ? pView->m_pANDLayouts[0].Add(pANDLayout) : -1) >= 0) return nIndex;
			delete pANDLayout;
			return -1;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if ((pGRDLayout = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF))) ? new CGRDLayout : (CGRDLayout *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pGRDLayout)) ? pView->m_pGRDLayouts[0].Add(pGRDLayout) : -1) >= 0) return nIndex;
			delete pGRDLayout;
			return -1;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if ((pPODLayout = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF))) ? new CPODLayout : (CPODLayout *)NULL))
		{
			if ((nIndex = (TransferTableData(pView, pPODLayout)) ? pView->m_pPODLayouts[0].Add(pPODLayout) : -1) >= 0) return nIndex;
			delete pPODLayout;
		}
	}
	return -1;
}
BOOL CALTELDatabaseEngine::InsertTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, INT nRow, INT nCol)
{
	CDatabaseTCSequence  *pDatabaseTCSequence;
	CDatabaseOBProcessor  *pDatabaseOBProcessor;
	CDatabaseTCSequenceEntry  *pDatabaseTCSequenceEntry;
	CDatabaseOBProcessorMemoryArea  *pDatabaseOBProcessorMemoryArea;

	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if ((pDatabaseTCSequence = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)) && nCol < 0) ? pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pView->GetName())) : (CDatabaseTCSequence *)NULL))
		{
			if ((pDatabaseTCSequenceEntry = new CDatabaseTCSequenceEntry))
			{
				EmptyTableRow(pDatabaseTCSequenceEntry);
				pDatabaseTCSequence->InsertAt(nRow - 1, pDatabaseTCSequenceEntry, 1);
				return TRUE;
			}
			return FALSE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((pDatabaseOBProcessor = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)) && nCol < 0) ? pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pView->GetName())) : (CDatabaseOBProcessor *)NULL))
		{
			if ((pDatabaseOBProcessorMemoryArea = new CDatabaseOBProcessorMemoryArea))
			{
				EmptyTableRow(pDatabaseOBProcessorMemoryArea);
				pDatabaseOBProcessor->InsertAt(nRow - 1, pDatabaseOBProcessorMemoryArea, 1);
				return TRUE;
			}
			return FALSE;
		}
	}
	return TRUE;
}

BOOL CALTELDatabaseEngine::CheckTableFieldData(CONST CDatabaseTableView *pView, LPCTSTR pszTable, BOOL bModified, BOOL bExist) CONST
{
	CTableViewObject  *pTable;
	CDatabaseTMPacket  cDatabaseTMPacket;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCSequence  cDatabaseTCSequence;
	CDatabaseOBProcessor  cDatabaseOBProcessor;
	CDatabaseTMParameter  cDatabaseTMParameter;
	CDatabaseTCParameter  cDatabaseTCParameter;
	CDatabaseTMNumCalTable  cDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  cDatabaseTMTxtCalTable;
	CDatabaseTMNumOolTable  cDatabaseTMNumOolTable;
	CDatabaseTMTxtOolTable  cDatabaseTMTxtOolTable;
	CDatabaseTCNumCalTable  cDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  cDatabaseTCTxtCalTable;
	CDatabaseTCNumOolTable  cDatabaseTCNumOolTable;
	CDatabaseTCTxtOolTable  cDatabaseTCTxtOolTable;
	CDatabaseTCPreExeGroup  cDatabaseTCPreExeGroup;
	CDatabaseTCExeVerGroup  cDatabaseTCExeVerGroup;
	CDatabaseTCParameterSet  cDatabaseTCParameterSet;
	CDatabaseTMPacketHeaders  pDatabaseTMPacketHeaders;
	CDatabaseTMPacketStreams  pDatabaseTMPacketStreams;
	CDatabaseTCFunctionBlock  cDatabaseTCFunctionBlock;
	CDatabaseOBProcessorMemoryImage  cDatabaseOBProcessorMemoryImage;
	CANDLayout  cANDLayout;
	CGRDLayout  cGRDLayout;
	CPODLayout  cPODLayout;

	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF))) return((!bModified || (TransferTableData(pView, &cDatabaseTMPacket) && CheckTableData(pView, &cDatabaseTMPacket) && CheckTableData(pView, &cDatabaseTMPacket, TRUE))) && (!bExist || (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)) && TransferTableData(pView, &cDatabaseTMPacket) && CheckTableData(pView, &cDatabaseTMPacket, FALSE, TRUE))));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH))) return((!bModified || (TransferTableData(pView, &pDatabaseTMPacketHeaders) && CheckTableData(pView, &pDatabaseTMPacketHeaders) && CheckTableData(pView, &pDatabaseTMPacketHeaders, TRUE))) && !bExist);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR))) return((!bModified || (TransferTableData(pView, &pDatabaseTMPacketStreams) && CheckTableData(pView, &pDatabaseTMPacketStreams) && CheckTableData(pView, &pDatabaseTMPacketStreams, TRUE))) && !bExist);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL) && !pTable->IsVisible()) return TRUE;
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS))) return((!bModified || (TransferTableData(pView, &cDatabaseTCFunction) && CheckTableData(pView, &cDatabaseTCFunction) && CheckTableData(pView, &cDatabaseTCFunction, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTCFunction) && CheckTableData(pView, &cDatabaseTCFunction, FALSE, TRUE))));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF))) return((!bModified || (TransferTableData(pView, &cDatabaseTCPacket) && CheckTableData(pView, &cDatabaseTCPacket) && CheckTableData(pView, &cDatabaseTCPacket, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTCPacket) && CheckTableData(pView, &cDatabaseTCPacket, FALSE, TRUE))));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP))) return((!bModified || (TransferTableData(pView, &cDatabaseTCParameterSet) && CheckTableData(pView, &cDatabaseTCParameterSet) && CheckTableData(pView, &cDatabaseTCParameterSet, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTCParameterSet) && CheckTableData(pView, &cDatabaseTCParameterSet, FALSE, TRUE))));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV))) return((!bModified || (TransferTableData(pView, &cDatabaseTCPreExeGroup) && CheckTableData(pView, &cDatabaseTCPreExeGroup) && CheckTableData(pView, &cDatabaseTCPreExeGroup, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTCPreExeGroup) && CheckTableData(pView, &cDatabaseTCPreExeGroup, FALSE, TRUE))));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV))) return((!bModified || (TransferTableData(pView, &cDatabaseTCExeVerGroup) && CheckTableData(pView, &cDatabaseTCExeVerGroup) && CheckTableData(pView, &cDatabaseTCExeVerGroup, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTCExeVerGroup) && CheckTableData(pView, &cDatabaseTCExeVerGroup, FALSE, TRUE))));
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF))) return((!bModified || (TransferTableData(pView, &cDatabaseTCSequence) && CheckTableData(pView, &cDatabaseTCSequence) && CheckTableData(pView, &cDatabaseTCSequence, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTCSequence) && CheckTableData(pView, &cDatabaseTCSequence, FALSE, TRUE))));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF))) return((!bModified || (TransferTableData(pView, &cDatabaseTCFunctionBlock) && CheckTableData(pView, &cDatabaseTCFunctionBlock) && CheckTableData(pView, &cDatabaseTCFunctionBlock, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTCFunctionBlock) && CheckTableData(pView, &cDatabaseTCFunctionBlock, FALSE, TRUE))));
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL) && !pTable->IsVisible()) return TRUE;
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT))) return((!bModified || (TransferTableData(pView, &cDatabaseOBProcessor) && CheckTableData(pView, &cDatabaseOBProcessor) && CheckTableData(pView, &cDatabaseOBProcessor, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseOBProcessor) && CheckTableData(pView, &cDatabaseOBProcessor, FALSE, TRUE))));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP))) return((!bModified || (TransferTableData(pView, &cDatabaseOBProcessorMemoryImage) && CheckTableData(pView, &cDatabaseOBProcessorMemoryImage) && CheckTableData(pView, &cDatabaseOBProcessorMemoryImage, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseOBProcessorMemoryImage) && CheckTableData(pView, &cDatabaseOBProcessorMemoryImage, FALSE, TRUE))));
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL) && !pTable->IsVisible()) return TRUE;
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF))) return((!bModified || (TransferTableData(pView, &cDatabaseTMParameter) && CheckTableData(pView, &cDatabaseTMParameter) && CheckTableData(pView, &cDatabaseTMParameter, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTMParameter) && CheckTableData(pView, &cDatabaseTMParameter, FALSE, TRUE))));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP))) return((!bModified || (TransferTableData(pView, &cDatabaseTMNumCalTable) && CheckTableData(pView, &cDatabaseTMNumCalTable) && CheckTableData(pView, &cDatabaseTMNumCalTable, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTMNumCalTable) && CheckTableData(pView, &cDatabaseTMNumCalTable, FALSE, TRUE))));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP))) return((!bModified || (TransferTableData(pView, &cDatabaseTMTxtCalTable) && CheckTableData(pView, &cDatabaseTMTxtCalTable) && CheckTableData(pView, &cDatabaseTMTxtCalTable, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTMTxtCalTable) && CheckTableData(pView, &cDatabaseTMTxtCalTable, FALSE, TRUE))));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP))) return((!bModified || (TransferTableData(pView, &cDatabaseTMNumOolTable) && CheckTableData(pView, &cDatabaseTMNumOolTable) && CheckTableData(pView, &cDatabaseTMNumOolTable, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTMNumOolTable) && CheckTableData(pView, &cDatabaseTMNumOolTable, FALSE, TRUE))));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP))) return((!bModified || (TransferTableData(pView, &cDatabaseTMTxtOolTable) && CheckTableData(pView, &cDatabaseTMTxtOolTable) && CheckTableData(pView, &cDatabaseTMTxtOolTable, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTMTxtOolTable) && CheckTableData(pView, &cDatabaseTMTxtOolTable, FALSE, TRUE))));
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL) && !pTable->IsVisible()) return TRUE;
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC))) return((!bModified || (TransferTableData(pView, &cDatabaseTCParameter) && CheckTableData(pView, &cDatabaseTCParameter) && CheckTableData(pView, &cDatabaseTCParameter, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTCParameter) && CheckTableData(pView, &cDatabaseTCParameter, FALSE, TRUE))));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP))) return((!bModified || (TransferTableData(pView, &cDatabaseTCNumCalTable) && CheckTableData(pView, &cDatabaseTCNumCalTable) && CheckTableData(pView, &cDatabaseTCNumCalTable, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTCNumCalTable) && CheckTableData(pView, &cDatabaseTCNumCalTable, FALSE, TRUE))));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP))) return((!bModified || (TransferTableData(pView, &cDatabaseTCTxtCalTable) && CheckTableData(pView, &cDatabaseTCTxtCalTable) && CheckTableData(pView, &cDatabaseTCTxtCalTable, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTCTxtCalTable) && CheckTableData(pView, &cDatabaseTCTxtCalTable, FALSE, TRUE))));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP))) return((!bModified || (TransferTableData(pView, &cDatabaseTCNumOolTable) && CheckTableData(pView, &cDatabaseTCNumOolTable) && CheckTableData(pView, &cDatabaseTCNumOolTable, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTCNumOolTable) && CheckTableData(pView, &cDatabaseTCNumOolTable, FALSE, TRUE))));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP))) return((!bModified || (TransferTableData(pView, &cDatabaseTCTxtOolTable) && CheckTableData(pView, &cDatabaseTCTxtOolTable) && CheckTableData(pView, &cDatabaseTCTxtOolTable, TRUE))) && (!bExist || (TransferTableData(pView, &cDatabaseTCTxtOolTable) && CheckTableData(pView, &cDatabaseTCTxtOolTable, FALSE, TRUE))));
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND && (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)))) return((!bModified || (TransferTableData(pView, &cANDLayout) && CheckTableData(pView, &cANDLayout) && CheckTableData(pView, &cANDLayout, TRUE))) && (!bExist || (TransferTableData(pView, &cANDLayout) && CheckTableData(pView, &cANDLayout, FALSE, TRUE))));
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD && (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)))) return((!bModified || (TransferTableData(pView, &cGRDLayout) && CheckTableData(pView, &cGRDLayout) && CheckTableData(pView, &cGRDLayout, TRUE))) && (!bExist || (TransferTableData(pView, &cGRDLayout) && CheckTableData(pView, &cGRDLayout, FALSE, TRUE))));
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD && (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)))) return((!bModified || (TransferTableData(pView, &cPODLayout) && CheckTableData(pView, &cPODLayout) && CheckTableData(pView, &cPODLayout, TRUE))) && (!bExist || (TransferTableData(pView, &cPODLayout) && CheckTableData(pView, &cPODLayout, FALSE, TRUE))));
	return FALSE;
}
BOOL CALTELDatabaseEngine::CheckTableFieldData(CONST CDatabaseTableView *pView, LPCTSTR pszTable, CStringArray &szIssues) CONST
{
	CTableViewObject  *pTable;
	CDatabaseTMPacket  cDatabaseTMPacket;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCSequence  cDatabaseTCSequence;
	CDatabaseOBProcessor  cDatabaseOBProcessor;
	CDatabaseTMParameter  cDatabaseTMParameter;
	CDatabaseTCParameter  cDatabaseTCParameter;
	CDatabaseTMNumCalTable  cDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  cDatabaseTMTxtCalTable;
	CDatabaseTMNumOolTable  cDatabaseTMNumOolTable;
	CDatabaseTMTxtOolTable  cDatabaseTMTxtOolTable;
	CDatabaseTCNumCalTable  cDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  cDatabaseTCTxtCalTable;
	CDatabaseTCNumOolTable  cDatabaseTCNumOolTable;
	CDatabaseTCTxtOolTable  cDatabaseTCTxtOolTable;
	CDatabaseTCPreExeGroup  cDatabaseTCPreExeGroup;
	CDatabaseTCExeVerGroup  cDatabaseTCExeVerGroup;
	CDatabaseTCParameterSet  cDatabaseTCParameterSet;
	CDatabaseTMPacketHeaders  pDatabaseTMPacketHeaders;
	CDatabaseTMPacketStreams  pDatabaseTMPacketStreams;
	CDatabaseTCFunctionBlock  cDatabaseTCFunctionBlock;
	CDatabaseOBProcessorMemoryImage  cDatabaseOBProcessorMemoryImage;
	CANDLayout  cANDLayout;
	CGRDLayout  cGRDLayout;
	CPODLayout  cPODLayout;

	for (szIssues.RemoveAll(); DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET; )
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF))) return(TransferTableData(pView, &cDatabaseTMPacket) && CheckTableData(pView, &cDatabaseTMPacket, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH))) return(TransferTableData(pView, &pDatabaseTMPacketHeaders) && CheckTableData(pView, &pDatabaseTMPacketHeaders, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR))) return(TransferTableData(pView, &pDatabaseTMPacketStreams) && CheckTableData(pView, &pDatabaseTMPacketStreams, szIssues));
		break;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL) && !pTable->IsVisible()) return TRUE;
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS))) return(TransferTableData(pView, &cDatabaseTCFunction) && CheckTableData(pView, &cDatabaseTCFunction, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF))) return(TransferTableData(pView, &cDatabaseTCPacket) && CheckTableData(pView, &cDatabaseTCPacket, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP))) return(TransferTableData(pView, &cDatabaseTCParameterSet) && CheckTableData(pView, &cDatabaseTCParameterSet, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV))) return(TransferTableData(pView, &cDatabaseTCPreExeGroup) && CheckTableData(pView, &cDatabaseTCPreExeGroup, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV))) return(TransferTableData(pView, &cDatabaseTCExeVerGroup) && CheckTableData(pView, &cDatabaseTCExeVerGroup, szIssues));
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF))) return(TransferTableData(pView, &cDatabaseTCSequence) && CheckTableData(pView, &cDatabaseTCSequence, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF))) return(TransferTableData(pView, &cDatabaseTCFunctionBlock) && CheckTableData(pView, &cDatabaseTCFunctionBlock, szIssues));
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL) && !pTable->IsVisible()) return TRUE;
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT))) return(TransferTableData(pView, &cDatabaseOBProcessor) && CheckTableData(pView, &cDatabaseOBProcessor, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP))) return(TransferTableData(pView, &cDatabaseOBProcessorMemoryImage) && CheckTableData(pView, &cDatabaseOBProcessorMemoryImage, szIssues));
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL) && !pTable->IsVisible()) return TRUE;
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF))) return(TransferTableData(pView, &cDatabaseTMParameter) && CheckTableData(pView, &cDatabaseTMParameter, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP))) return(TransferTableData(pView, &cDatabaseTMNumCalTable) && CheckTableData(pView, &cDatabaseTMNumCalTable, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP))) return(TransferTableData(pView, &cDatabaseTMTxtCalTable) && CheckTableData(pView, &cDatabaseTMTxtCalTable, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP))) return(TransferTableData(pView, &cDatabaseTMNumOolTable) && CheckTableData(pView, &cDatabaseTMNumOolTable, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP))) return(TransferTableData(pView, &cDatabaseTMTxtOolTable) && CheckTableData(pView, &cDatabaseTMTxtOolTable, szIssues));
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL) && !pTable->IsVisible()) return TRUE;
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC))) return(TransferTableData(pView, &cDatabaseTCParameter) && CheckTableData(pView, &cDatabaseTCParameter, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP))) return(TransferTableData(pView, &cDatabaseTCNumCalTable) && CheckTableData(pView, &cDatabaseTCNumCalTable, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP))) return(TransferTableData(pView, &cDatabaseTCTxtCalTable) && CheckTableData(pView, &cDatabaseTCTxtCalTable, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP))) return(TransferTableData(pView, &cDatabaseTCNumOolTable) && CheckTableData(pView, &cDatabaseTCNumOolTable, szIssues));
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP))) return(TransferTableData(pView, &cDatabaseTCTxtOolTable) && CheckTableData(pView, &cDatabaseTCTxtOolTable, szIssues));
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND && (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)))) return(TransferTableData(pView, &cANDLayout) && CheckTableData(pView, &cANDLayout, szIssues));
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD && (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)))) return(TransferTableData(pView, &cGRDLayout) && CheckTableData(pView, &cGRDLayout, szIssues));
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD && (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)))) return(TransferTableData(pView, &cPODLayout) && CheckTableData(pView, &cPODLayout, szIssues));
	return FALSE;
}

BOOL CALTELDatabaseEngine::SelectTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, CONST POINT &pt)
{
	INT  nTable;
	INT  nTables;
	UINT  nControlID;
	CString  szItem;
	CStringArray  szItems;
	CStringArray  szTables;
	CTableViewCell  *pCell[2];
	CTableViewObject  *pTable[2];

	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET)
	{
		if ((pTable[0] = pView->FindTable(pszTable)))
		{
			pTable[0]->SetSelRow(pt.y);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if ((pTable[0] = pView->FindTable(pszTable)) != (CTableViewObject *)NULL)
		{
			for (pTable[0]->SetSelRow(pt.y); pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_PCPS); )
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCPS), STRING(IDS_DATABASE_TABLE_PCPS_NAME))), szTables); nTable < nTables; nTable++)
				{
					if ((pTable[1] = (GetTableUpdateContents(pView, szTables.GetAt(nTable), nControlID, pTable[0]->GetCellText(max(pTable[0]->GetSelRow(), 1), STRING(IDS_DATABASE_TABLE_PCPS_NAME)), szItem, szItems)) ? pView->FindTable(szTables.GetAt(nTable)) : (CTableViewObject *)NULL))
					{
						pView->UpdateTableContents(pTable[1], szItems);
						continue;
					}
				}
				ArrangeTables(pView, 0);
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if ((pTable[0] = pView->FindTable(pszTable)) != (CTableViewObject *)NULL)
		{
			for (pTable[0]->SetSelRow(pt.y); pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_CSS); )
			{
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_BCF))) != (CTableViewObject *)NULL)
				{
					for (; GetTableUpdateContents(pView, pTable[1]->GetName(), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME)), pView->GetName(), szItem, szItems); )
					{
						pView->UpdateTableContents(pTable[1], szItems);
						break;
					}
				}
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_BCCF))))
				{
					for (; GetTableUpdateContents(pView, pTable[1]->GetName(), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME)), pView->GetName(), szItem, szItems); )
					{
						pView->UpdateTableContents(pTable[1], szItems);
						break;
					}
				}
				pView->SetTableFloatingAlignment(STRING(IDS_DATABASE_TABLE_SDF), max(pt.y, pTable[0]->HasTitle()));
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_SDF))) && GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pView->GetName(), szItem, szItems)) pView->UpdateTableContents(pTable[1], szItems);
				ArrangeTables(pView, 0);
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((pTable[0] = pView->FindTable(pszTable)) != (CTableViewObject *)NULL)
		{
			for (pTable[0]->SetSelRow(pt.y); pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_MAD); )
			{
				pView->SetTableFloatingAlignment(STRING(IDS_DATABASE_TABLE_MEM), max(pt.y, pTable[0]->HasTitle()));
				pView->SetTableFloatingAlignment(STRING(IDS_DATABASE_TABLE_IMG), max(pt.y, pTable[0]->HasTitle()));
				pView->SetTableFloatingAlignment(STRING(IDS_DATABASE_TABLE_CRC), max(pt.y, pTable[0]->HasTitle()));
				pView->SetTableFloatingAlignment(STRING(IDS_DATABASE_TABLE_CAT), max(pt.y, pTable[0]->HasTitle()));
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_MEM))) && GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pView->GetName(), szItem, szItems)) pView->UpdateTableContents(pTable[1], szItems);
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_IMG))) && GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pView->GetName(), szItem, szItems)) pView->UpdateTableContents(pTable[1], szItems);
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CRC))) && GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pView->GetName(), szItem, szItems)) pView->UpdateTableContents(pTable[1], szItems);
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CAT))) && GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pView->GetName(), szItem, szItems)) pView->UpdateTableContents(pTable[1], szItems);
				ArrangeTables(pView, 0);
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if ((pTable[0] = pView->FindTable(pszTable)) != (CTableViewObject *)NULL)
		{
			for (pTable[0]->SetSelRow(pt.y); pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_PCAL); )
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCAL), STRING(IDS_DATABASE_TABLE_PCAL_NAME))), szTables); nTable < nTables; nTable++)
				{
					if ((pTable[1] = (GetTableUpdateContents(pView, szTables.GetAt(nTable), nControlID, pTable[0]->GetCellText(max(pTable[0]->GetSelRow(), 1), STRING(IDS_DATABASE_TABLE_PCAL_NAME)), pView->GetName(), szItems)) ? pView->FindTable(szTables.GetAt(nTable)) : (CTableViewObject *)NULL))
					{
						pView->UpdateTableContents(pTable[1], szItems);
						continue;
					}
				}
				break;
			}
			if (pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_POCF))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_POCF), STRING(IDS_DATABASE_TABLE_POCF_NAME))), szTables); nTable < nTables; nTable++)
				{
					if ((pTable[1] = (GetTableUpdateContents(pView, szTables.GetAt(nTable), nControlID, pTable[0]->GetCellText(max(pTable[0]->GetSelRow(), 1), STRING(IDS_DATABASE_TABLE_POCF_NAME)), pView->GetName(), szItems)) ? pView->FindTable(szTables.GetAt(nTable)) : (CTableViewObject *)NULL))
					{
						pView->UpdateTableContents(pTable[1], szItems);
						continue;
					}
				}
			}
			if (pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_PTXF))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PTXF), STRING(IDS_DATABASE_TABLE_PTXF_NAME))), szTables); nTable < nTables; nTable++)
				{
					if ((pTable[1] = (GetTableUpdateContents(pView, szTables.GetAt(nTable), nControlID, pTable[0]->GetCellText(max(pTable[0]->GetSelRow(), 1), STRING(IDS_DATABASE_TABLE_PTXF_NAME)), pView->GetName(), szItems)) ? pView->FindTable(szTables.GetAt(nTable)) : (CTableViewObject *)NULL))
					{
						pView->UpdateTableContents(pTable[1], szItems);
						continue;
					}
				}
			}
			if (pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_PFXF))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PFXF), STRING(IDS_DATABASE_TABLE_PFXF_NAME))), szTables); nTable < nTables; nTable++)
				{
					if ((pTable[1] = (GetTableUpdateContents(pView, szTables.GetAt(nTable), nControlID, pTable[0]->GetCellText(max(pTable[0]->GetSelRow(), 1), STRING(IDS_DATABASE_TABLE_PFXF_NAME)), pView->GetName(), szItems)) ? pView->FindTable(szTables.GetAt(nTable)) : (CTableViewObject *)NULL))
					{
						pView->UpdateTableContents(pTable[1], szItems);
						continue;
					}
				}
			}
			ArrangeTables(pView, 0);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if ((pTable[0] = pView->FindTable(pszTable)))
		{
			pTable[0]->SetSelRow(pt.y);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if ((pTable[0] = pView->FindTable(pszTable)))
		{
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)))
			{
				pTable[0]->SetSelRow(pt.y);
				return TRUE;
			}
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)))
			{
				pTable[0]->SetSelRow(pt.y);
				return TRUE;
			}
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)))
			{
				if ((pCell[0] = pTable[0]->FindCell(pt.y, pt.x)) && pt.x > 0)
				{
					if (TranslateANDColumn(pCell[0]->GetText(), FALSE) != ANDLAYOUT_TITLEITEM_ID)
					{
						pTable[0]->SetSelCell(pt.y, pt.x);
						return TRUE;
					}
					if (pt.x == pTable[0]->GetColumns() - 1)
					{
						pTable[0]->SetSelCell(pt.y, pt.x);
						return TRUE;
					}
					if ((pCell[1] = pTable[0]->FindCell(pt.y, pt.x + 1)) && TranslateANDColumn(pCell[1]->GetText(), FALSE) == ANDLAYOUT_TITLEITEM_ID)
					{
						pTable[0]->SetSelCell(pt.y, pt.x);
						return TRUE;
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if ((pTable[0] = pView->FindTable(pszTable)))
		{
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)))
			{
				pTable[0]->SetSelRow(pt.y);
				return TRUE;
			}
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)))
			{
				pTable[0]->SetSelRow(pt.y);
				return TRUE;
			}
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)))
			{
				if ((pCell[0] = pTable[0]->FindCell(pt.y, pt.x)) && pt.x > 0)
				{
					if (TranslateGRDColumn(pCell[0]->GetText(), FALSE) != GRDLAYOUT_TITLEITEM_ID)
					{
						pTable[0]->SetSelCell(pt.y, pt.x);
						return TRUE;
					}
					if (pt.x == pTable[0]->GetColumns() - 1)
					{
						pTable[0]->SetSelCell(pt.y, pt.x);
						return TRUE;
					}
					if ((pCell[1] = pTable[0]->FindCell(pt.y, pt.x + 1)) && TranslateGRDColumn(pCell[1]->GetText(), FALSE) == GRDLAYOUT_TITLEITEM_ID)
					{
						pTable[0]->SetSelCell(pt.y, pt.x);
						return TRUE;
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if ((pTable[0] = pView->FindTable(pszTable)))
		{
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)))
			{
				pTable[0]->SetSelRow(pt.y);
				return TRUE;
			}
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)))
			{
				pTable[0]->SetSelRow(pt.y);
				return TRUE;
			}
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)))
			{
				if ((pCell[0] = pTable[0]->FindCell(pt.y, pt.x)) && pt.x > 0)
				{
					pTable[0]->SetSelCell(pt.y, pt.x);
					return TRUE;
				}
			}
		}
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::SelectTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszValue)
{
	INT  nIndex;
	INT  nTable;
	INT  nTables;
	CString  szText;
	CString  szItem;
	CStringArray  szItems;
	CStringArray  szTables;
	CTableViewCell  *pCell[2];
	CTableViewObject  *pTable[3];
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCSequence  *pDatabaseTCSequence;
	CDatabaseOBProcessor  *pDatabaseOBProcessor;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTMPacketHeader  *pDatabaseTMPacketHeader;
	CDatabaseTMPacketStream  *pDatabaseTMPacketStream;
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;
	CANDLayout  *pANDLayout;
	CGRDLayout  *pGRDLayout;
	CPODLayout  *pPODLayout;

	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET)
	{
		if ((pDatabaseTMPacket = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)) || !lstrlen(pszTable)) ? pView->m_pDatabaseTMPackets[0].GetAt(pView->m_pDatabaseTMPackets[0].Find(pszValue)) : (CDatabaseTMPacket *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PMF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PMF_PACKID), STRING(IDS_DATABASE_TABLE_PMF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[0]->GetControlID(), szTables), pView->SetName(pszValue); nTable < nTables; nTable++)
				{
					if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
					{
						if (GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pszValue, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(pView, 0);
				pView->SetActiveCell(pTable[0], pCell[0]);
				return TRUE;
			}
		}
		if ((pDatabaseTMPacketHeader = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH))) ? pView->m_pDatabaseTMPacketHeaders[0].GetAt((nIndex = pView->m_pDatabaseTMPacketHeaders[0].Find(pszValue))) : (CDatabaseTMPacketHeader *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_DFH)))) ? pTable[0]->FindCell(nIndex + 1, STRING(IDS_DATABASE_TABLE_DFH_NAME)) : (CTableViewCell *)NULL))
			{
				pView->SetActiveCell(pTable[0], pCell[0]);
				pTable[0]->SetSelRow(nIndex + 1);
				return TRUE;
			}
		}
		if ((pDatabaseTMPacketStream = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR))) ? pView->m_pDatabaseTMPacketStreams[0].GetAt((nIndex = pView->m_pDatabaseTMPacketStreams[0].Find(pszValue))) : (CDatabaseTMPacketStream *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_STR)))) ? pTable[0]->FindCell(nIndex + 1, STRING(IDS_DATABASE_TABLE_STR_STID)) : (CTableViewCell *)NULL))
			{
				pView->SetActiveCell(pTable[0], pCell[0]);
				pTable[0]->SetSelRow(nIndex + 1);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if ((pDatabaseTCFunction = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)) || !lstrlen(pszTable)) ? pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pszValue)) : (CDatabaseTCFunction *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CCF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_CCF_CNAME), STRING(IDS_DATABASE_TABLE_CCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[0]->GetControlID(), szTables), pView->SetName(pszValue); nTable < nTables; nTable++)
				{
					if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
					{
						if (GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pszValue, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(pView, 0);
				pView->SetActiveCell(pTable[0], pCell[0]);
				return TRUE;
			}
		}
		if ((pDatabaseTCPacket = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP))) ? pView->m_pDatabaseTCPackets[0].GetAt(pView->m_pDatabaseTCPackets[0].Find(pszValue)) : (CDatabaseTCPacket *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_TCP)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_TCP_PACKID), STRING(IDS_DATABASE_TABLE_TCP_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[0]->GetControlID(), szTables), pCell[0]->SetText(pszValue); nTable < nTables; nTable++)
				{
					if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
					{
						if (GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pszValue, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(pView, 0);
				pView->SetActiveCell(pTable[0], pCell[0]);
				return TRUE;
			}
		}
		if ((pDatabaseTCPreExeGroup = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP))) ? pView->m_pDatabaseTCPreExeGroups[0].GetAt(pView->m_pDatabaseTCPreExeGroups[0].Find(pszValue)) : (CDatabaseTCPreExeGroup *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PVP)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PVP_ID), STRING(IDS_DATABASE_TABLE_PVP_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[0]->GetControlID(), szTables), pCell[0]->SetText(pszValue); nTable < nTables; nTable++)
				{
					if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
					{
						if (GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pszValue, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(pView, 0);
				pView->SetActiveCell(pTable[0], pCell[0]);
				return TRUE;
			}
		}
		if ((pDatabaseTCExeVerGroup = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP))) ? pView->m_pDatabaseTCExeVerGroups[0].GetAt(pView->m_pDatabaseTCExeVerGroups[0].Find(pszValue)) : (CDatabaseTCExeVerGroup *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CVP)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_CVP_ID), STRING(IDS_DATABASE_TABLE_CVP_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[0]->GetControlID(), szTables), pCell[0]->SetText(pszValue); nTable < nTables; nTable++)
				{
					if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
					{
						if (GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pszValue, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(pView, 0);
				pView->SetActiveCell(pTable[0], pCell[0]);
				return TRUE;
			}
		}
		if ((pDatabaseTCParameterSet = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS))) ? pView->m_pDatabaseTCParameterSets[0].GetAt(pView->m_pDatabaseTCParameterSets[0].Find(pszValue)) : (CDatabaseTCParameterSet *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CPS)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_CPS_NAME), STRING(IDS_DATABASE_TABLE_CPS_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[0]->GetControlID(), szTables), pCell[0]->SetText(pszValue); nTable < nTables; nTable++)
				{
					if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
					{
						if (GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pszValue, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(pView, 0);
				pView->SetActiveCell(pTable[0], pCell[0]);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if ((pDatabaseTCSequence = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)) || !lstrlen(pszTable)) ? pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pszValue)) : (CDatabaseTCSequence *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CSF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_CSF_NAME), STRING(IDS_DATABASE_TABLE_CSF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[0]->GetControlID(), szTables), pView->SetName(pszValue); nTable < nTables; nTable++)
				{
					if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
					{
						if (GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pszValue, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(pView, 0);
				pView->SetActiveCell(pTable[0], pCell[0]);
				return TRUE;
			}
		}
		if ((pDatabaseTCFunctionBlock = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF))) ? pView->m_pDatabaseTCFunctionBlocks[0].GetAt(pView->m_pDatabaseTCFunctionBlocks[0].Find(pszValue)) : (CDatabaseTCFunctionBlock *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_BCF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_BCF_CNAME), STRING(IDS_DATABASE_TABLE_BCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[0]->GetControlID(), szTables), pCell[0]->SetText(pszValue); nTable < nTables; nTable++)
				{
					if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
					{
						if (GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pszValue, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(pView, 0);
				pView->SetActiveCell(pTable[0], pCell[0]);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((pDatabaseOBProcessor = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)) || !lstrlen(pszTable)) ? pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszValue)) : (CDatabaseOBProcessor *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_GEN)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR), STRING(IDS_DATABASE_TABLE_GEN_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[0]->GetControlID(), szTables), pView->SetName(pszValue); nTable < nTables; nTable++)
				{
					if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
					{
						if (GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pszValue, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(pView, 0);
				pView->SetActiveCell(pTable[0], pCell[0]);
				return TRUE;
			}
		}
		if ((pDatabaseOBProcessorMemoryImage = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG))) ? pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pszValue)) : (CDatabaseOBProcessorMemoryImage *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PIMG)))) ? pTable[0]->FindCell(pTable[0]->GetRows() - 1, pTable[0]->GetColumns() - 1) : (CTableViewCell *)NULL))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[0]->GetControlID(), szTables), pCell[0]->SetText(pszValue); nTable < nTables; nTable++)
				{
					if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
					{
						if (GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pszValue, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(pView, 0);
				pView->SetActiveCell(pTable[0], pCell[0]);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if ((pDatabaseTMParameter = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)) || !lstrlen(pszTable)) ? pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszValue)) : (CDatabaseTMParameter *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PCF_NAME), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[0]->GetControlID(), szTables), pView->SetName(pszValue); nTable < nTables; nTable++)
				{
					if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
					{
						if (GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pszValue, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(pView, 0);
				pView->SetActiveCell(pTable[0], pCell[0]);
				return TRUE;
			}
		}
		if ((pDatabaseTMNumCalTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find(pszValue)) : (CDatabaseTMNumCalTable *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PCF_CATEG), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				if ((pCell[1] = ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL)))) ? pTable[1]->FindCell(STRING(IDS_DATABASE_TABLE_CAL_NAME), STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
				{
					for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[1]->GetControlID(), szTables), pCell[0]->SetText((pCell[0]->TranslateValue(TMPARAMETER_CALIBRATION_NUMERICAL, szText)) ? szText : EMPTYSTRING), pCell[1]->SetText(pszValue); nTable < nTables; nTable++)
					{
						if ((pTable[2] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
						{
							if (GetTableUpdateContents(pView, pTable[2]->GetName(), -1, pszValue, szItem, szItems))
							{
								pView->UpdateTableContents(pTable[2], szItems);
								continue;
							}
						}
					}
					ArrangeTables(pView, 0);
					pView->SetActiveCell(pTable[1], pCell[1]);
					return TRUE;
				}
			}
		}
		if ((pDatabaseTMTxtCalTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find(pszValue)) : (CDatabaseTMTxtCalTable *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PCF_CATEG), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				if ((pCell[1] = ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF)))) ? pTable[1]->FindCell(STRING(IDS_DATABASE_TABLE_TXF_NAME), STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
				{
					for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[1]->GetControlID(), szTables), pCell[0]->SetText((pCell[0]->TranslateValue(TMPARAMETER_CALIBRATION_STATUS, szText)) ? szText : EMPTYSTRING), pCell[1]->SetText(pszValue); nTable < nTables; nTable++)
					{
						if ((pTable[2] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
						{
							if (GetTableUpdateContents(pView, pTable[2]->GetName(), -1, pszValue, szItem, szItems))
							{
								pView->UpdateTableContents(pTable[2], szItems);
								continue;
							}
						}
					}
					ArrangeTables(pView, 0);
					pView->SetActiveCell(pTable[1], pCell[1]);
					return TRUE;
				}
			}
		}
		if ((pDatabaseTMNumOolTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find(pszValue)) : (CDatabaseTMNumOolTable *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PCF_CATEG), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				if ((pCell[1] = ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF)))) ? pTable[1]->FindCell(STRING(IDS_DATABASE_TABLE_OCF_NAME), STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
				{
					for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[1]->GetControlID(), szTables), pCell[0]->SetText((pCell[0]->TranslateValue(TMPARAMETER_CALIBRATION_NUMERICAL, szText)) ? szText : EMPTYSTRING), pCell[1]->SetText(pszValue); nTable < nTables; nTable++)
					{
						if ((pTable[2] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
						{
							if (GetTableUpdateContents(pView, pTable[2]->GetName(), -1, pszValue, szItem, szItems))
							{
								pView->UpdateTableContents(pTable[2], szItems);
								continue;
							}
						}
					}
					ArrangeTables(pView, 0);
					pView->SetActiveCell(pTable[1], pCell[1]);
					return TRUE;
				}
			}
		}
		if ((pDatabaseTMTxtOolTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find(pszValue)) : (CDatabaseTMTxtOolTable *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PCF_CATEG), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				if ((pCell[1] = ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF)))) ? pTable[1]->FindCell(STRING(IDS_DATABASE_TABLE_FXF_NAME), STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
				{
					for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[1]->GetControlID(), szTables), pCell[0]->SetText((pCell[0]->TranslateValue(TMPARAMETER_CALIBRATION_STATUS, szText)) ? szText : EMPTYSTRING), pCell[1]->SetText(pszValue); nTable < nTables; nTable++)
					{
						if ((pTable[2] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
						{
							if (GetTableUpdateContents(pView, pTable[2]->GetName(), -1, pszValue, szItem, szItems))
							{
								pView->UpdateTableContents(pTable[2], szItems);
								continue;
							}
						}
					}
					ArrangeTables(pView, 0);
					pView->SetActiveCell(pTable[1], pCell[1]);
					return TRUE;
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if ((pDatabaseTCParameter = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)) || !lstrlen(pszTable)) ? pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pszValue)) : (CDatabaseTCParameter *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CPC)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_CPC_PNAME), STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[0]->GetControlID(), szTables), pView->SetName(pszValue); nTable < nTables; nTable++)
				{
					if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
					{
						if (GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pszValue, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(pView, 0);
				pView->SetActiveCell(pTable[0], pCell[0]);
				return TRUE;
			}
		}
		if ((pDatabaseTCNumCalTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? pView->m_pDatabaseTCNumCalTables[0].GetAt(pView->m_pDatabaseTCNumCalTables[0].Find(pszValue)) : (CDatabaseTCNumCalTable *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PCF_CATEG), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				if ((pCell[1] = ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL)))) ? pTable[1]->FindCell(STRING(IDS_DATABASE_TABLE_CAL_NAME), STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
				{
					for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[1]->GetControlID(), szTables), pCell[0]->SetText((pCell[0]->TranslateValue(TCPARAMETER_CALIBRATION_NUMERICAL, szText)) ? szText : EMPTYSTRING), pCell[1]->SetText(pszValue); nTable < nTables; nTable++)
					{
						if ((pTable[2] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
						{
							if (GetTableUpdateContents(pView, pTable[2]->GetName(), -1, pszValue, szItem, szItems))
							{
								pView->UpdateTableContents(pTable[2], szItems);
								continue;
							}
						}
					}
					ArrangeTables(pView, 0);
					pView->SetActiveCell(pTable[1], pCell[1]);
					return TRUE;
				}
			}
		}
		if ((pDatabaseTCTxtCalTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? pView->m_pDatabaseTCTxtCalTables[0].GetAt(pView->m_pDatabaseTCTxtCalTables[0].Find(pszValue)) : (CDatabaseTCTxtCalTable *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PCF_CATEG), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				if ((pCell[1] = ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF)))) ? pTable[1]->FindCell(STRING(IDS_DATABASE_TABLE_TXF_NAME), STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
				{
					for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[1]->GetControlID(), szTables), pCell[0]->SetText((pCell[0]->TranslateValue(TCPARAMETER_CALIBRATION_STATUS, szText)) ? szText : EMPTYSTRING), pCell[1]->SetText(pszValue); nTable < nTables; nTable++)
					{
						if ((pTable[2] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
						{
							if (GetTableUpdateContents(pView, pTable[2]->GetName(), -1, pszValue, szItem, szItems))
							{
								pView->UpdateTableContents(pTable[2], szItems);
								continue;
							}
						}
					}
					ArrangeTables(pView, 0);
					pView->SetActiveCell(pTable[1], pCell[1]);
					return TRUE;
				}
			}
		}
		if ((pDatabaseTCNumOolTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? pView->m_pDatabaseTCNumOolTables[0].GetAt(pView->m_pDatabaseTCNumOolTables[0].Find(pszValue)) : (CDatabaseTCNumOolTable *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PCF_CATEG), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				if ((pCell[1] = ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF)))) ? pTable[1]->FindCell(STRING(IDS_DATABASE_TABLE_OCF_NAME), STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
				{
					for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[1]->GetControlID(), szTables), pCell[0]->SetText((pCell[0]->TranslateValue(TCPARAMETER_CALIBRATION_NUMERICAL, szText)) ? szText : EMPTYSTRING), pCell[1]->SetText(pszValue); nTable < nTables; nTable++)
					{
						if ((pTable[2] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
						{
							if (GetTableUpdateContents(pView, pTable[2]->GetName(), -1, pszValue, szItem, szItems))
							{
								pView->UpdateTableContents(pTable[2], szItems);
								continue;
							}
						}
					}
					ArrangeTables(pView, 0);
					pView->SetActiveCell(pTable[1], pCell[1]);
					return TRUE;
				}
			}
		}
		if ((pDatabaseTCTxtOolTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->m_pDatabaseTCTxtOolTables[0].GetAt(pView->m_pDatabaseTCTxtOolTables[0].Find(pszValue)) : (CDatabaseTCTxtOolTable *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PCF_CATEG), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				if ((pCell[1] = ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF)))) ? pTable[1]->FindCell(STRING(IDS_DATABASE_TABLE_FXF_NAME), STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
				{
					for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[1]->GetControlID(), szTables), pCell[0]->SetText((pCell[0]->TranslateValue(TCPARAMETER_CALIBRATION_STATUS, szText)) ? szText : EMPTYSTRING), pCell[1]->SetText(pszValue); nTable < nTables; nTable++)
					{
						if ((pTable[2] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
						{
							if (GetTableUpdateContents(pView, pTable[2]->GetName(), -1, pszValue, szItem, szItems))
							{
								pView->UpdateTableContents(pTable[2], szItems);
								continue;
							}
						}
					}
					ArrangeTables(pView, 0);
					pView->SetActiveCell(pTable[1], pCell[1]);
					return TRUE;
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if ((pANDLayout = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)) || !lstrlen(pszTable)) ? pView->m_pANDLayouts[0].GetAt(pView->m_pANDLayouts[0].Find(pszValue)) : (CANDLayout *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_DPF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_DPF_NUMBER), STRING(IDS_DATABASE_TABLE_DPF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[0]->GetControlID(), szTables), pView->SetName(pszValue); nTable < nTables; nTable++)
				{
					if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
					{
						if (GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pszValue, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(pView, 0);
				pView->SetActiveCell(pTable[0], pCell[0]);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if ((pGRDLayout = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)) || !lstrlen(pszTable)) ? pView->m_pGRDLayouts[0].GetAt(pView->m_pGRDLayouts[0].Find(pszValue)) : (CGRDLayout *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_GPF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_GPF_NUMBER), STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[0]->GetControlID(), szTables), pView->SetName(pszValue); nTable < nTables; nTable++)
				{
					if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
					{
						if (GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pszValue, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(pView, 0);
				pView->SetActiveCell(pTable[0], pCell[0]);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if ((pPODLayout = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)) || !lstrlen(pszTable)) ? pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pszValue)) : (CPODLayout *)NULL))
		{
			if ((pCell[0] = ((pTable[0] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF)))) ? pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PPF_NUMBER), STRING(IDS_DATABASE_TABLE_PPF_TITLEITEM_VALUE)) : (CTableViewCell *)NULL))
			{
				for (nTable = 0, nTables = EnumTableUpdates(pView, pCell[0]->GetControlID(), szTables), pView->SetName(pszValue); nTable < nTables; nTable++)
				{
					if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) != (CTableViewObject *)NULL)
					{
						if (GetTableUpdateContents(pView, pTable[1]->GetName(), -1, pszValue, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
				}
				ArrangeTables(pView, 0);
				pView->SetActiveCell(pTable[0], pCell[0]);
				return TRUE;
			}
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::SaveTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, BOOL bPrompt)
{
	INT  nAnswer;
	INT  nIndex[2];
	INT  nPacketHeader;
	INT  nPacketHeaders;
	INT  nPacketStream;
	INT  nPacketStreams;
	BOOL  bPacketHeader;
	BOOL  bPacketStream;
	BOOL  bTableUpdates;
	CString  szMessage[2];
	CVersionInfo  cVersionInfo;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTCPacket  *pDatabaseTCPacket[2];
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable[2];
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable[2];
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable[2];
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable[2];
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable[2];
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable[2];
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable[2];
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable[2];
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup[2];
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup[2];
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet[2];
	CDatabaseTMPacketHeader  *pDatabaseTMPacketHeader[2];
	CDatabaseTMPacketHeaders  pDatabaseTMPacketHeaders;
	CDatabaseTMPacketStream  *pDatabaseTMPacketStream[2];
	CDatabaseTMPacketStreams  pDatabaseTMPacketStreams;
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock[2];
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage[2];

	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)) && TransferTableData(pView, &pDatabaseTMPacketHeaders) && pView->m_pDatabaseTMPacketHeaders[0].Copy(&pDatabaseTMPacketHeaders) && !pView->m_pDatabaseTMPacketHeaders[0].Compare(&pView->m_pDatabaseTMPacketHeaders[1]))
		{
			for (nPacketHeader = 0, nPacketHeaders = (INT)pView->m_pDatabaseTMPacketHeaders[0].GetSize(); nPacketHeader < nPacketHeaders; nPacketHeader++)
			{
				if ((pDatabaseTMPacketHeader[0] = pView->m_pDatabaseTMPacketHeaders[0].GetAt(nPacketHeader)) != (CDatabaseTMPacketHeader *)NULL)
				{
					if ((pDatabaseTMPacketHeader[1] = pView->m_pDatabaseTMPacketHeaders[1].GetAt(pView->m_pDatabaseTMPacketHeaders[1].Find(pDatabaseTMPacketHeader[0]->GetName()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPACKETHEADER_SAVE_QUESTION), (LPCTSTR)pDatabaseTMPacketHeader[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPACKETHEADER_SAVE_FAILURE), (LPCTSTR)pDatabaseTMPacketHeader[0]->GetName()), bPacketHeader = FALSE, nAnswer = ((bTableUpdates = (!pDatabaseTMPacketHeader[0]->Compare(pDatabaseTMPacketHeader[1]) && CheckTableData(pView, pDatabaseTMPacketHeader[0]))) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTMPacketHeader[0]); )
						{
							pDatabaseTMPacketHeader[1]->Copy(pDatabaseTMPacketHeader[0]);
							pView->UpdateTableForms(pDatabaseTMPacketHeader[0]);
							bPacketHeader = TRUE;
							break;
						}
						if (nAnswer == IDYES  &&  !bPacketHeader) ShowMessage(szMessage[1]);
						continue;
					}
					if ((pDatabaseTMPacketHeader[1] = new CDatabaseTMPacketHeader))
					{
						pDatabaseTMPacketHeader[1]->Copy(pDatabaseTMPacketHeader[0]);
						if ((nIndex[1] = pView->m_pDatabaseTMPacketHeaders[1].Add(pDatabaseTMPacketHeader[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPACKETHEADER_SAVE_QUESTION), (LPCTSTR)pDatabaseTMPacketHeader[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPACKETHEADER_SAVE_FAILURE), (LPCTSTR)pDatabaseTMPacketHeader[0]->GetName()), bPacketHeader = FALSE, nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTMPacketHeader[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTMPacketHeader[0]); )
							{
								pView->UpdateTableForms(pDatabaseTMPacketHeader[0]);
								bPacketHeader = TRUE;
								break;
							}
							if (!bPacketHeader)
							{
								for (pView->m_pDatabaseTMPacketHeaders[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
								{
									ShowMessage(szMessage[1]);
									break;
								}
								delete pDatabaseTMPacketHeader[1];
							}
							continue;
						}
						delete pDatabaseTMPacketHeader[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPACKETHEADER_SAVE_FAILURE), (LPCTSTR)pDatabaseTMPacketHeader[0]->GetName());
					ShowMessage(szMessage[0]);
				}
			}
			for (nPacketHeader = 0, nPacketHeaders = (INT)pView->m_pDatabaseTMPacketHeaders[1].GetSize(); nPacketHeader < nPacketHeaders; nPacketHeader++)
			{
				if ((pDatabaseTMPacketHeader[0] = pView->m_pDatabaseTMPacketHeaders[1].GetAt(nPacketHeader)) && pView->m_pDatabaseTMPacketHeaders[0].Find(pDatabaseTMPacketHeader[0]->GetName()) < 0 && Delete(pDatabaseTMPacketHeader[0]))
				{
					pView->UpdateTableForms(pDatabaseTMPacketHeader[0], TRUE);
					pView->m_pDatabaseTMPacketHeaders[1].RemoveAt(nPacketHeader);
					delete pDatabaseTMPacketHeader[0];
					nPacketHeaders--;
					nPacketHeader--;
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)) && TransferTableData(pView, &pDatabaseTMPacketStreams) && pView->m_pDatabaseTMPacketStreams[0].Copy(&pDatabaseTMPacketStreams) && !pView->m_pDatabaseTMPacketStreams[0].Compare(&pView->m_pDatabaseTMPacketStreams[1]))
		{
			for (nPacketStream = 0, nPacketStreams = (INT)pView->m_pDatabaseTMPacketStreams[0].GetSize(); nPacketStream < nPacketStreams; nPacketStream++)
			{
				if ((pDatabaseTMPacketStream[0] = pView->m_pDatabaseTMPacketStreams[0].GetAt(nPacketStream)) != (CDatabaseTMPacketStream *)NULL)
				{
					if ((pDatabaseTMPacketStream[1] = pView->m_pDatabaseTMPacketStreams[1].GetAt(pView->m_pDatabaseTMPacketStreams[1].Find(pDatabaseTMPacketStream[0]->GetName()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPACKETSTREAM_SAVE_QUESTION), (LPCTSTR)pDatabaseTMPacketStream[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPACKETSTREAM_SAVE_FAILURE), (LPCTSTR)pDatabaseTMPacketStream[0]->GetName()), bPacketStream = FALSE, nAnswer = ((bTableUpdates = (!pDatabaseTMPacketStream[0]->Compare(pDatabaseTMPacketStream[1]) && CheckTableData(pView, pDatabaseTMPacketStream[0]))) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTMPacketStream[0]); )
						{
							pDatabaseTMPacketStream[1]->Copy(pDatabaseTMPacketStream[0]);
							pView->UpdateTableForms(pDatabaseTMPacketStream[0]);
							bPacketStream = TRUE;
							break;
						}
						if (nAnswer == IDYES  &&  !bPacketStream) ShowMessage(szMessage[1]);
						continue;
					}
					if ((pDatabaseTMPacketStream[1] = new CDatabaseTMPacketStream))
					{
						pDatabaseTMPacketStream[1]->Copy(pDatabaseTMPacketStream[0]);
						if ((nIndex[1] = pView->m_pDatabaseTMPacketStreams[1].Add(pDatabaseTMPacketStream[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPACKETSTREAM_SAVE_QUESTION), (LPCTSTR)pDatabaseTMPacketStream[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPACKETSTREAM_SAVE_FAILURE), (LPCTSTR)pDatabaseTMPacketStream[0]->GetName()), bPacketStream = FALSE, nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTMPacketStream[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTMPacketStream[0]); )
							{
								pView->UpdateTableForms(pDatabaseTMPacketStream[0]);
								bPacketStream = TRUE;
								break;
							}
							if (!bPacketStream)
							{
								for (pView->m_pDatabaseTMPacketStreams[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
								{
									ShowMessage(szMessage[1]);
									break;
								}
								delete pDatabaseTMPacketStream[1];
							}
							continue;
						}
						delete pDatabaseTMPacketStream[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPACKETSTREAM_SAVE_FAILURE), (LPCTSTR)pDatabaseTMPacketStream[0]->GetName());
					ShowMessage(szMessage[0]);
				}
			}
			for (nPacketStream = 0, nPacketStreams = (INT)pView->m_pDatabaseTMPacketStreams[1].GetSize(); nPacketStream < nPacketStreams; nPacketStream++)
			{
				if ((pDatabaseTMPacketStream[0] = pView->m_pDatabaseTMPacketStreams[1].GetAt(nPacketStream)) && pView->m_pDatabaseTMPacketStreams[0].Find(pDatabaseTMPacketStream[0]->GetName()) < 0 && Delete(pDatabaseTMPacketStream[0]))
				{
					pView->UpdateTableForms(pDatabaseTMPacketStream[0], TRUE);
					pView->m_pDatabaseTMPacketStreams[1].RemoveAt(nPacketStream);
					delete pDatabaseTMPacketStream[0];
					nPacketStreams--;
					nPacketStream--;
				}
			}
		}
		return TRUE;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_TCP_PACKID), STRING(IDS_DATABASE_TABLE_TCP_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCPacket[0] = pView->m_pDatabaseTCPackets[0].GetAt(pView->m_pDatabaseTCPackets[0].Find(pCell->GetText()))))
				{
					if ((pDatabaseTCPacket[1] = pView->m_pDatabaseTCPackets[1].GetAt(pView->m_pDatabaseTCPackets[1].Find(pCell->GetText()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPACKET_SAVE_QUESTION), (LPCTSTR)pDatabaseTCPacket[0]->GetTag()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPACKET_SAVE_FAILURE), (LPCTSTR)pDatabaseTCPacket[0]->GetTag()), nAnswer = (!bPrompt) ? IDYES : 0; (bTableUpdates = TransferTableData(pView, pDatabaseTCPacket[0])) && !pDatabaseTCPacket[0]->Compare(pDatabaseTCPacket[1]); )
						{
							if (CheckTableData(pView, pDatabaseTCPacket[0]) && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTCPacket[0]))
							{
								pDatabaseTCPacket[1]->Copy(pDatabaseTCPacket[0]);
								pView->UpdateTableForms(pDatabaseTCPacket[0]);
								return TRUE;
							}
							for (pDatabaseTCPacket[1]->Copy(pDatabaseTCPacket[0]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->UpdateTableForms(pDatabaseTCPacket[0]);
							return FALSE;
						}
						return bTableUpdates;
					}
					if ((pDatabaseTCPacket[1] = new CDatabaseTCPacket))
					{
						pDatabaseTCPacket[1]->Copy(pDatabaseTCPacket[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCPackets[1].Add(pDatabaseTCPacket[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPACKET_SAVE_QUESTION), (LPCTSTR)pDatabaseTCPacket[0]->GetTag()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPACKET_SAVE_FAILURE), (LPCTSTR)pDatabaseTCPacket[0]->GetTag()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCPacket[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCPacket[0]))
								{
									pView->UpdateTableForms(pDatabaseTCPacket[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCPackets[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							delete pDatabaseTCPacket[1];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCPacket[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPACKET_SAVE_FAILURE), (LPCTSTR)pDatabaseTCPacket[0]->GetTag());
					ShowMessage(szMessage[0]);
					return FALSE;
				}
				if ((pDatabaseTCPacket[0] = (lstrlen(pCell->GetText()) > 0) ? (((nIndex[0] = InsertTableFieldData(pView, pszTable, pCell->GetText())) >= 0) ? pView->m_pDatabaseTCPackets[0].GetAt(nIndex[0]) : (CDatabaseTCPacket *)NULL) : (CDatabaseTCPacket *)NULL))
				{
					if ((pDatabaseTCPacket[1] = new CDatabaseTCPacket))
					{
						pDatabaseTCPacket[1]->Copy(pDatabaseTCPacket[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCPackets[1].Add(pDatabaseTCPacket[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPACKET_SAVE_QUESTION), (LPCTSTR)pDatabaseTCPacket[0]->GetTag()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPACKET_SAVE_FAILURE), (LPCTSTR)pDatabaseTCPacket[0]->GetTag()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCPacket[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCPacket[0]))
								{
									pView->UpdateTableForms(pDatabaseTCPacket[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCPackets[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->m_pDatabaseTCPackets[0].RemoveAt(nIndex[0]);
							delete pDatabaseTCPacket[1];
							delete pDatabaseTCPacket[0];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCPacket[1];
					}
					pView->m_pDatabaseTCPackets[0].RemoveAt(nIndex[0]);
					delete pDatabaseTCPacket[0];
				}
				if (!pCell->GetText().IsEmpty())
				{
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPACKET_SAVE_FAILURE), (LPCTSTR)pCell->GetText());
					ShowMessage(szMessage[0]);
				}
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_PVP_ID), STRING(IDS_DATABASE_TABLE_PVP_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCPreExeGroup[0] = pView->m_pDatabaseTCPreExeGroups[0].GetAt(pView->m_pDatabaseTCPreExeGroups[0].Find(pCell->GetText()))))
				{
					if ((pDatabaseTCPreExeGroup[1] = pView->m_pDatabaseTCPreExeGroups[1].GetAt(pView->m_pDatabaseTCPreExeGroups[1].Find(pCell->GetText()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPREEXEGROUP_SAVE_QUESTION), (LPCTSTR)pDatabaseTCPreExeGroup[0]->GetID()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPREEXEGROUP_SAVE_FAILURE), (LPCTSTR)pDatabaseTCPreExeGroup[0]->GetID()), nAnswer = (!bPrompt) ? IDYES : 0; (bTableUpdates = TransferTableData(pView, pDatabaseTCPreExeGroup[0])) && !pDatabaseTCPreExeGroup[0]->Compare(pDatabaseTCPreExeGroup[1]); )
						{
							if (CheckTableData(pView, pDatabaseTCPreExeGroup[0]) && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTCPreExeGroup[0]))
							{
								pDatabaseTCPreExeGroup[1]->Copy(pDatabaseTCPreExeGroup[0]);
								pView->UpdateTableForms(pDatabaseTCPreExeGroup[0]);
								return TRUE;
							}
							for (pDatabaseTCPreExeGroup[1]->Copy(pDatabaseTCPreExeGroup[0]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->UpdateTableForms(pDatabaseTCPreExeGroup[0]);
							return FALSE;
						}
						return bTableUpdates;
					}
					if ((pDatabaseTCPreExeGroup[1] = new CDatabaseTCPreExeGroup))
					{
						pDatabaseTCPreExeGroup[1]->Copy(pDatabaseTCPreExeGroup[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCPreExeGroups[1].Add(pDatabaseTCPreExeGroup[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPREEXEGROUP_SAVE_QUESTION), (LPCTSTR)pDatabaseTCPreExeGroup[0]->GetID()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPREEXEGROUP_SAVE_FAILURE), (LPCTSTR)pDatabaseTCPreExeGroup[0]->GetID()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCPreExeGroup[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCPreExeGroup[0]))
								{
									pView->UpdateTableForms(pDatabaseTCPreExeGroup[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCPreExeGroups[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							delete pDatabaseTCPreExeGroup[1];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCPreExeGroup[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPREEXEGROUP_SAVE_FAILURE), (LPCTSTR)pDatabaseTCPreExeGroup[0]->GetID());
					ShowMessage(szMessage[0]);
					return FALSE;
				}
				if ((pDatabaseTCPreExeGroup[0] = (lstrlen(pCell->GetText()) > 0) ? (((nIndex[0] = InsertTableFieldData(pView, pszTable, pCell->GetText())) >= 0) ? pView->m_pDatabaseTCPreExeGroups[0].GetAt(nIndex[0]) : (CDatabaseTCPreExeGroup *)NULL) : (CDatabaseTCPreExeGroup *)NULL))
				{
					if ((pDatabaseTCPreExeGroup[1] = new CDatabaseTCPreExeGroup))
					{
						pDatabaseTCPreExeGroup[1]->Copy(pDatabaseTCPreExeGroup[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCPreExeGroups[1].Add(pDatabaseTCPreExeGroup[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPREEXEGROUP_SAVE_QUESTION), (LPCTSTR)pDatabaseTCPreExeGroup[0]->GetID()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPREEXEGROUP_SAVE_FAILURE), (LPCTSTR)pDatabaseTCPreExeGroup[0]->GetID()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCPreExeGroup[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCPreExeGroup[0]))
								{
									pView->UpdateTableForms(pDatabaseTCPreExeGroup[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCPreExeGroups[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->m_pDatabaseTCPreExeGroups[0].RemoveAt(nIndex[0]);
							delete pDatabaseTCPreExeGroup[1];
							delete pDatabaseTCPreExeGroup[0];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCPreExeGroup[1];
					}
					pView->m_pDatabaseTCPreExeGroups[0].RemoveAt(nIndex[0]);
					delete pDatabaseTCPreExeGroup[0];
				}
				if (!pCell->GetText().IsEmpty())
				{
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPREEXEGROUP_SAVE_FAILURE), (LPCTSTR)pCell->GetText());
					ShowMessage(szMessage[0]);
				}
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CVP_ID), STRING(IDS_DATABASE_TABLE_CVP_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCExeVerGroup[0] = pView->m_pDatabaseTCExeVerGroups[0].GetAt(pView->m_pDatabaseTCExeVerGroups[0].Find(pCell->GetText()))))
				{
					if ((pDatabaseTCExeVerGroup[1] = pView->m_pDatabaseTCExeVerGroups[1].GetAt(pView->m_pDatabaseTCExeVerGroups[1].Find(pCell->GetText()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONEXEVERGROUP_SAVE_QUESTION), (LPCTSTR)pDatabaseTCExeVerGroup[0]->GetID()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONEXEVERGROUP_SAVE_FAILURE), (LPCTSTR)pDatabaseTCExeVerGroup[0]->GetID()), nAnswer = (!bPrompt) ? IDYES : 0; (bTableUpdates = TransferTableData(pView, pDatabaseTCExeVerGroup[0])) && !pDatabaseTCExeVerGroup[0]->Compare(pDatabaseTCExeVerGroup[1]); )
						{
							if (CheckTableData(pView, pDatabaseTCExeVerGroup[0]) && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTCExeVerGroup[0]))
							{
								pDatabaseTCExeVerGroup[1]->Copy(pDatabaseTCExeVerGroup[0]);
								pView->UpdateTableForms(pDatabaseTCExeVerGroup[0]);
								return TRUE;
							}
							for (pDatabaseTCExeVerGroup[1]->Copy(pDatabaseTCExeVerGroup[0]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->UpdateTableForms(pDatabaseTCExeVerGroup[0]);
							return FALSE;
						}
						return bTableUpdates;
					}
					if ((pDatabaseTCExeVerGroup[1] = new CDatabaseTCExeVerGroup))
					{
						pDatabaseTCExeVerGroup[1]->Copy(pDatabaseTCExeVerGroup[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCExeVerGroups[1].Add(pDatabaseTCExeVerGroup[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONEXEVERGROUP_SAVE_QUESTION), (LPCTSTR)pDatabaseTCExeVerGroup[0]->GetID()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONEXEVERGROUP_SAVE_FAILURE), (LPCTSTR)pDatabaseTCExeVerGroup[0]->GetID()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCExeVerGroup[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCExeVerGroup[0]))
								{
									pView->UpdateTableForms(pDatabaseTCExeVerGroup[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCExeVerGroups[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							delete pDatabaseTCExeVerGroup[1];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCExeVerGroup[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONEXEVERGROUP_SAVE_FAILURE), (LPCTSTR)pDatabaseTCExeVerGroup[0]->GetID());
					ShowMessage(szMessage[0]);
					return FALSE;
				}
				if ((pDatabaseTCExeVerGroup[0] = (lstrlen(pCell->GetText()) > 0) ? (((nIndex[0] = InsertTableFieldData(pView, pszTable, pCell->GetText())) >= 0) ? pView->m_pDatabaseTCExeVerGroups[0].GetAt(nIndex[0]) : (CDatabaseTCExeVerGroup *)NULL) : (CDatabaseTCExeVerGroup *)NULL))
				{
					if ((pDatabaseTCExeVerGroup[1] = new CDatabaseTCExeVerGroup))
					{
						pDatabaseTCExeVerGroup[1]->Copy(pDatabaseTCExeVerGroup[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCExeVerGroups[1].Add(pDatabaseTCExeVerGroup[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONEXEVERGROUP_SAVE_QUESTION), (LPCTSTR)pDatabaseTCExeVerGroup[0]->GetID()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONEXEVERGROUP_SAVE_FAILURE), (LPCTSTR)pDatabaseTCExeVerGroup[0]->GetID()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCExeVerGroup[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCExeVerGroup[0]))
								{
									pView->UpdateTableForms(pDatabaseTCExeVerGroup[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCExeVerGroups[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->m_pDatabaseTCExeVerGroups[0].RemoveAt(nIndex[0]);
							delete pDatabaseTCExeVerGroup[1];
							delete pDatabaseTCExeVerGroup[0];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCExeVerGroup[1];
					}
					pView->m_pDatabaseTCExeVerGroups[0].RemoveAt(nIndex[0]);
					delete pDatabaseTCExeVerGroup[0];
				}
				if (!pCell->GetText().IsEmpty())
				{
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONEXEVERGROUP_SAVE_FAILURE), (LPCTSTR)pCell->GetText());
					ShowMessage(szMessage[0]);
				}
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CPS_NAME), STRING(IDS_DATABASE_TABLE_CPS_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCParameterSet[0] = pView->m_pDatabaseTCParameterSets[0].GetAt(pView->m_pDatabaseTCParameterSets[0].Find(pCell->GetText()))))
				{
					if ((pDatabaseTCParameterSet[1] = pView->m_pDatabaseTCParameterSets[1].GetAt(pView->m_pDatabaseTCParameterSets[1].Find(pCell->GetText()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPARAMETERSET_SAVE_QUESTION), (LPCTSTR)pDatabaseTCParameterSet[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPARAMETERSET_SAVE_FAILURE), (LPCTSTR)pDatabaseTCParameterSet[0]->GetName()), nAnswer = (!bPrompt) ? IDYES : 0; (bTableUpdates = TransferTableData(pView, pDatabaseTCParameterSet[0])) && !pDatabaseTCParameterSet[0]->Compare(pDatabaseTCParameterSet[1]); )
						{
							if (CheckTableData(pView, pDatabaseTCParameterSet[0]) && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTCParameterSet[0]))
							{
								pDatabaseTCParameterSet[1]->Copy(pDatabaseTCParameterSet[0]);
								pView->UpdateTableForms(pDatabaseTCParameterSet[0]);
								return TRUE;
							}
							for (pDatabaseTCParameterSet[1]->Copy(pDatabaseTCParameterSet[0]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->UpdateTableForms(pDatabaseTCParameterSet[0]);
							return FALSE;
						}
						return bTableUpdates;
					}
					if ((pDatabaseTCParameterSet[1] = new CDatabaseTCParameterSet))
					{
						pDatabaseTCParameterSet[1]->Copy(pDatabaseTCParameterSet[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCParameterSets[1].Add(pDatabaseTCParameterSet[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPARAMETERSET_SAVE_QUESTION), (LPCTSTR)pDatabaseTCParameterSet[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPARAMETERSET_SAVE_FAILURE), (LPCTSTR)pDatabaseTCParameterSet[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCParameterSet[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCParameterSet[0]))
								{
									pView->UpdateTableForms(pDatabaseTCParameterSet[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCParameterSets[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							delete pDatabaseTCParameterSet[1];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCParameterSet[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPARAMETERSET_SAVE_FAILURE), (LPCTSTR)pDatabaseTCParameterSet[0]->GetName());
					ShowMessage(szMessage[0]);
					return FALSE;
				}
				if ((pDatabaseTCParameterSet[0] = (lstrlen(pCell->GetText()) > 0) ? (((nIndex[0] = InsertTableFieldData(pView, pszTable, pCell->GetText())) >= 0) ? pView->m_pDatabaseTCParameterSets[0].GetAt(nIndex[0]) : (CDatabaseTCParameterSet *)NULL) : (CDatabaseTCParameterSet *)NULL))
				{
					if ((pDatabaseTCParameterSet[1] = new CDatabaseTCParameterSet))
					{
						pDatabaseTCParameterSet[1]->Copy(pDatabaseTCParameterSet[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCParameterSets[1].Add(pDatabaseTCParameterSet[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPARAMETERSET_SAVE_QUESTION), (LPCTSTR)pDatabaseTCParameterSet[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPARAMETERSET_SAVE_FAILURE), (LPCTSTR)pDatabaseTCParameterSet[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCParameterSet[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCParameterSet[0]))
								{
									pView->UpdateTableForms(pDatabaseTCParameterSet[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCParameterSets[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->m_pDatabaseTCParameterSets[0].RemoveAt(nIndex[0]);
							delete pDatabaseTCParameterSet[1];
							delete pDatabaseTCParameterSet[0];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCParameterSet[1];
					}
					pView->m_pDatabaseTCParameterSets[0].RemoveAt(nIndex[0]);
					delete pDatabaseTCParameterSet[0];
				}
				if (!pCell->GetText().IsEmpty())
				{
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCFUNCTIONPARAMETERSET_SAVE_FAILURE), (LPCTSTR)pCell->GetText());
					ShowMessage(szMessage[0]);
				}
			}
		}
		return FALSE;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_BCF_CNAME), STRING(IDS_DATABASE_TABLE_BCF_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCFunctionBlock[0] = pView->m_pDatabaseTCFunctionBlocks[0].GetAt(pView->m_pDatabaseTCFunctionBlocks[0].Find(pCell->GetText()))))
				{
					if ((pDatabaseTCFunctionBlock[1] = pView->m_pDatabaseTCFunctionBlocks[1].GetAt(pView->m_pDatabaseTCFunctionBlocks[1].Find(pCell->GetText()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCEFUNCTIONBLOCK_SAVE_QUESTION), (LPCTSTR)pDatabaseTCFunctionBlock[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCEFUNCTIONBLOCK_SAVE_FAILURE), (LPCTSTR)pDatabaseTCFunctionBlock[0]->GetName()), nAnswer = (!bPrompt) ? IDYES : 0; (bTableUpdates = TransferTableData(pView, pDatabaseTCFunctionBlock[0])) && !pDatabaseTCFunctionBlock[0]->Compare(pDatabaseTCFunctionBlock[1]); )
						{
							if (CheckTableData(pView, pDatabaseTCFunctionBlock[0]) && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTCFunctionBlock[0]))
							{
								pDatabaseTCFunctionBlock[1]->Copy(pDatabaseTCFunctionBlock[0]);
								pView->UpdateTableForms(pDatabaseTCFunctionBlock[0]);
								return TRUE;
							}
							for (pDatabaseTCFunctionBlock[1]->Copy(pDatabaseTCFunctionBlock[0]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->UpdateTableForms(pDatabaseTCFunctionBlock[0]);
							return FALSE;
						}
						return bTableUpdates;
					}
					if ((pDatabaseTCFunctionBlock[1] = new CDatabaseTCFunctionBlock))
					{
						pDatabaseTCFunctionBlock[1]->Copy(pDatabaseTCFunctionBlock[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCFunctionBlocks[1].Add(pDatabaseTCFunctionBlock[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCEFUNCTIONBLOCK_SAVE_QUESTION), (LPCTSTR)pDatabaseTCFunctionBlock[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCEFUNCTIONBLOCK_SAVE_FAILURE), (LPCTSTR)pDatabaseTCFunctionBlock[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCFunctionBlock[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCFunctionBlock[0]))
								{
									pView->UpdateTableForms(pDatabaseTCFunctionBlock[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCFunctionBlocks[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							delete pDatabaseTCFunctionBlock[1];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCFunctionBlock[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCEFUNCTIONBLOCK_SAVE_FAILURE), (LPCTSTR)pDatabaseTCFunctionBlock[0]->GetName());
					ShowMessage(szMessage[0]);
					return FALSE;
				}
				if ((pDatabaseTCFunctionBlock[0] = (lstrlen(pCell->GetText()) > 0) ? (((nIndex[0] = InsertTableFieldData(pView, pszTable, pCell->GetText())) >= 0) ? pView->m_pDatabaseTCFunctionBlocks[0].GetAt(nIndex[0]) : (CDatabaseTCFunctionBlock *)NULL) : (CDatabaseTCFunctionBlock *)NULL))
				{
					if ((pDatabaseTCFunctionBlock[1] = new CDatabaseTCFunctionBlock))
					{
						pDatabaseTCFunctionBlock[1]->Copy(pDatabaseTCFunctionBlock[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCFunctionBlocks[1].Add(pDatabaseTCFunctionBlock[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCEFUNCTIONBLOCK_SAVE_QUESTION), (LPCTSTR)pDatabaseTCFunctionBlock[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCEFUNCTIONBLOCK_SAVE_FAILURE), (LPCTSTR)pDatabaseTCFunctionBlock[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCFunctionBlock[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCFunctionBlock[0]))
								{
									pView->UpdateTableForms(pDatabaseTCFunctionBlock[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCFunctionBlocks[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->m_pDatabaseTCFunctionBlocks[0].RemoveAt(nIndex[0]);
							delete pDatabaseTCFunctionBlock[1];
							delete pDatabaseTCFunctionBlock[0];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCFunctionBlock[1];
					}
					pView->m_pDatabaseTCFunctionBlocks[0].RemoveAt(nIndex[0]);
					delete pDatabaseTCFunctionBlock[0];
				}
				if (!pCell->GetText().IsEmpty())
				{
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCSEQUENCEFUNCTIONBLOCK_SAVE_FAILURE), (LPCTSTR)pCell->GetText());
					ShowMessage(szMessage[0]);
				}
			}
		}
		return FALSE;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(pTable->GetRows() - 1, pTable->GetColumns() - 1)) != (CTableViewCell *)NULL)
			{
				if ((pDatabaseOBProcessorMemoryImage[0] = pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pCell->GetText()))))
				{
					if ((pDatabaseOBProcessorMemoryImage[1] = pView->m_pDatabaseOBProcessorMemoryImages[1].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[1].Find(pCell->GetText()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_OBPROCESSORMEMORYIMAGE_SAVE_QUESTION), (LPCTSTR)pDatabaseOBProcessorMemoryImage[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_OBPROCESSORMEMORYIMAGE_SAVE_FAILURE), (LPCTSTR)pDatabaseOBProcessorMemoryImage[0]->GetName()), nAnswer = (!bPrompt) ? IDYES : 0; (bTableUpdates = TransferTableData(pView, pDatabaseOBProcessorMemoryImage[0])) && !pDatabaseOBProcessorMemoryImage[0]->Compare(pDatabaseOBProcessorMemoryImage[1]); )
						{
							if (CheckTableData(pView, pDatabaseOBProcessorMemoryImage[0]) && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseOBProcessorMemoryImage[0]))
							{
								pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]);
								pView->UpdateTableForms(pDatabaseOBProcessorMemoryImage[0]);
								return TRUE;
							}
							for (pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->UpdateTableForms(pDatabaseOBProcessorMemoryImage[0]);
							return FALSE;
						}
						return bTableUpdates;
					}
					if ((pDatabaseOBProcessorMemoryImage[1] = new CDatabaseOBProcessorMemoryImage))
					{
						pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]);
						if ((nIndex[1] = pView->m_pDatabaseOBProcessorMemoryImages[1].Add(pDatabaseOBProcessorMemoryImage[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_OBPROCESSORMEMORYIMAGE_SAVE_QUESTION), (LPCTSTR)pDatabaseOBProcessorMemoryImage[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_OBPROCESSORMEMORYIMAGE_SAVE_FAILURE), (LPCTSTR)pDatabaseOBProcessorMemoryImage[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseOBProcessorMemoryImage[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseOBProcessorMemoryImage[0]))
								{
									pView->UpdateTableForms(pDatabaseOBProcessorMemoryImage[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseOBProcessorMemoryImages[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							delete pDatabaseOBProcessorMemoryImage[1];
							return(nAnswer != IDYES);
						}
						delete pDatabaseOBProcessorMemoryImage[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_OBPROCESSORMEMORYIMAGE_SAVE_FAILURE), (LPCTSTR)pDatabaseOBProcessorMemoryImage[0]->GetName());
					ShowMessage(szMessage[0]);
					return FALSE;
				}
				if ((pDatabaseOBProcessorMemoryImage[0] = (lstrlen(pCell->GetText()) > 0) ? (((nIndex[0] = InsertTableFieldData(pView, pszTable, pCell->GetText())) >= 0) ? pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(nIndex[0]) : (CDatabaseOBProcessorMemoryImage *)NULL) : (CDatabaseOBProcessorMemoryImage *)NULL))
				{
					if ((pDatabaseOBProcessorMemoryImage[1] = new CDatabaseOBProcessorMemoryImage))
					{
						pDatabaseOBProcessorMemoryImage[1]->Copy(pDatabaseOBProcessorMemoryImage[0]);
						if ((nIndex[1] = pView->m_pDatabaseOBProcessorMemoryImages[1].Add(pDatabaseOBProcessorMemoryImage[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_OBPROCESSORMEMORYIMAGE_SAVE_QUESTION), (LPCTSTR)pDatabaseOBProcessorMemoryImage[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_OBPROCESSORMEMORYIMAGE_SAVE_FAILURE), (LPCTSTR)pDatabaseOBProcessorMemoryImage[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseOBProcessorMemoryImage[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseOBProcessorMemoryImage[0]))
								{
									pView->UpdateTableForms(pDatabaseOBProcessorMemoryImage[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseOBProcessorMemoryImages[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->m_pDatabaseOBProcessorMemoryImages[0].RemoveAt(nIndex[0]);
							delete pDatabaseOBProcessorMemoryImage[1];
							delete pDatabaseOBProcessorMemoryImage[0];
							return(nAnswer != IDYES);
						}
						delete pDatabaseOBProcessorMemoryImage[1];
					}
					pView->m_pDatabaseOBProcessorMemoryImages[0].RemoveAt(nIndex[0]);
					delete pDatabaseOBProcessorMemoryImage[0];
				}
				if (!pCell->GetText().IsEmpty())
				{
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_OBPROCESSORMEMORYIMAGE_SAVE_FAILURE), (LPCTSTR)pCell->GetText());
					ShowMessage(szMessage[0]);
				}
			}
		}
		return FALSE;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CAL_NAME), STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTMNumCalTable[0] = pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find(pCell->GetText()))))
				{
					if ((pDatabaseTMNumCalTable[1] = pView->m_pDatabaseTMNumCalTables[1].GetAt(pView->m_pDatabaseTMNumCalTables[1].Find(pCell->GetText()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMNumCalTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMNumCalTable[0]->GetName()), nAnswer = (!bPrompt) ? IDYES : 0; (bTableUpdates = TransferTableData(pView, pDatabaseTMNumCalTable[0])) && !pDatabaseTMNumCalTable[0]->Compare(pDatabaseTMNumCalTable[1]); )
						{
							if (CheckTableData(pView, pDatabaseTMNumCalTable[0]) && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTMNumCalTable[0]))
							{
								pDatabaseTMNumCalTable[1]->Copy(pDatabaseTMNumCalTable[0]);
								pView->UpdateTableForms(pDatabaseTMNumCalTable[0]);
								UpdateTable(pView, pDatabaseTMNumCalTable[0]);
								return TRUE;
							}
							for (pDatabaseTMNumCalTable[1]->Copy(pDatabaseTMNumCalTable[0]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->UpdateTableForms(pDatabaseTMNumCalTable[0]);
							UpdateTable(pView, pDatabaseTMNumCalTable[0]);
							return FALSE;
						}
						return bTableUpdates;
					}
					if ((pDatabaseTMNumCalTable[1] = new CDatabaseTMNumCalTable))
					{
						pDatabaseTMNumCalTable[1]->Copy(pDatabaseTMNumCalTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTMNumCalTables[1].Add(pDatabaseTMNumCalTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMNumCalTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMNumCalTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTMNumCalTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTMNumCalTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTMNumCalTable[0]);
									UpdateTable(pView, pDatabaseTMNumCalTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTMNumCalTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							delete pDatabaseTMNumCalTable[1];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTMNumCalTable[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMNumCalTable[0]->GetName());
					ShowMessage(szMessage[0]);
					return FALSE;
				}
				if ((pDatabaseTMNumCalTable[0] = (lstrlen(pCell->GetText()) > 0) ? (((nIndex[0] = InsertTableFieldData(pView, pszTable, pCell->GetText())) >= 0) ? pView->m_pDatabaseTMNumCalTables[0].GetAt(nIndex[0]) : (CDatabaseTMNumCalTable *)NULL) : (CDatabaseTMNumCalTable *)NULL))
				{
					if ((pDatabaseTMNumCalTable[1] = new CDatabaseTMNumCalTable))
					{
						pDatabaseTMNumCalTable[1]->Copy(pDatabaseTMNumCalTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTMNumCalTables[1].Add(pDatabaseTMNumCalTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMNumCalTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMNumCalTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTMNumCalTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTMNumCalTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTMNumCalTable[0]);
									UpdateTable(pView, pDatabaseTMNumCalTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTMNumCalTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->m_pDatabaseTMNumCalTables[0].RemoveAt(nIndex[0]);
							delete pDatabaseTMNumCalTable[1];
							delete pDatabaseTMNumCalTable[0];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTMNumCalTable[1];
					}
					pView->m_pDatabaseTMNumCalTables[0].RemoveAt(nIndex[0]);
					delete pDatabaseTMNumCalTable[0];
				}
				if (!pCell->GetText().IsEmpty())
				{
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMCALTABLE_SAVE_FAILURE), (LPCTSTR)pCell->GetText());
					ShowMessage(szMessage[0]);
				}
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_TXF_NAME), STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTMTxtCalTable[0] = pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find(pCell->GetText()))))
				{
					if ((pDatabaseTMTxtCalTable[1] = pView->m_pDatabaseTMTxtCalTables[1].GetAt(pView->m_pDatabaseTMTxtCalTables[1].Find(pCell->GetText()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMTxtCalTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMTxtCalTable[0]->GetName()), nAnswer = (!bPrompt) ? IDYES : 0; (bTableUpdates = TransferTableData(pView, pDatabaseTMTxtCalTable[0])) && !pDatabaseTMTxtCalTable[0]->Compare(pDatabaseTMTxtCalTable[1]); )
						{
							if (CheckTableData(pView, pDatabaseTMTxtCalTable[0]) && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTMTxtCalTable[0]))
							{
								pDatabaseTMTxtCalTable[1]->Copy(pDatabaseTMTxtCalTable[0]);
								pView->UpdateTableForms(pDatabaseTMTxtCalTable[0]);
								UpdateTable(pView, pDatabaseTMTxtCalTable[0]);
								return TRUE;
							}
							for (pDatabaseTMTxtCalTable[1]->Copy(pDatabaseTMTxtCalTable[0]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->UpdateTableForms(pDatabaseTMTxtCalTable[0]);
							UpdateTable(pView, pDatabaseTMTxtCalTable[0]);
							return FALSE;
						}
						return bTableUpdates;
					}
					if ((pDatabaseTMTxtCalTable[1] = new CDatabaseTMTxtCalTable))
					{
						pDatabaseTMTxtCalTable[1]->Copy(pDatabaseTMTxtCalTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTMTxtCalTables[1].Add(pDatabaseTMTxtCalTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMTxtCalTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMTxtCalTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTMTxtCalTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTMTxtCalTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTMTxtCalTable[0]);
									UpdateTable(pView, pDatabaseTMTxtCalTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTMTxtCalTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							delete pDatabaseTMTxtCalTable[1];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTMTxtCalTable[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMTxtCalTable[0]->GetName());
					ShowMessage(szMessage[0]);
					return FALSE;
				}
				if ((pDatabaseTMTxtCalTable[0] = (lstrlen(pCell->GetText()) > 0) ? (((nIndex[0] = InsertTableFieldData(pView, pszTable, pCell->GetText())) >= 0) ? pView->m_pDatabaseTMTxtCalTables[0].GetAt(nIndex[0]) : (CDatabaseTMTxtCalTable *)NULL) : (CDatabaseTMTxtCalTable *)NULL))
				{
					if ((pDatabaseTMTxtCalTable[1] = new CDatabaseTMTxtCalTable))
					{
						pDatabaseTMTxtCalTable[1]->Copy(pDatabaseTMTxtCalTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTMTxtCalTables[1].Add(pDatabaseTMTxtCalTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMTxtCalTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMTxtCalTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTMTxtCalTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTMTxtCalTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTMTxtCalTable[0]);
									UpdateTable(pView, pDatabaseTMTxtCalTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTMTxtCalTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->m_pDatabaseTMTxtCalTables[0].RemoveAt(nIndex[0]);
							delete pDatabaseTMTxtCalTable[1];
							delete pDatabaseTMTxtCalTable[0];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTMTxtCalTable[1];
					}
					pView->m_pDatabaseTMTxtCalTables[0].RemoveAt(nIndex[0]);
					delete pDatabaseTMTxtCalTable[0];
				}
				if (!pCell->GetText().IsEmpty())
				{
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTCALTABLE_SAVE_FAILURE), (LPCTSTR)pCell->GetText());
					ShowMessage(szMessage[0]);
				}
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_OCF_NAME), STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTMNumOolTable[0] = pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find(pCell->GetText()))))
				{
					if ((pDatabaseTMNumOolTable[1] = pView->m_pDatabaseTMNumOolTables[1].GetAt(pView->m_pDatabaseTMNumOolTables[1].Find(pCell->GetText()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMNumOolTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMNumOolTable[0]->GetName()), nAnswer = (!bPrompt) ? IDYES : 0; (bTableUpdates = TransferTableData(pView, pDatabaseTMNumOolTable[0])) && !pDatabaseTMNumOolTable[0]->Compare(pDatabaseTMNumOolTable[1]); )
						{
							if (CheckTableData(pView, pDatabaseTMNumOolTable[0]) && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTMNumOolTable[0]))
							{
								pDatabaseTMNumOolTable[1]->Copy(pDatabaseTMNumOolTable[0]);
								pView->UpdateTableForms(pDatabaseTMNumOolTable[0]);
								return TRUE;
							}
							for (pDatabaseTMNumOolTable[1]->Copy(pDatabaseTMNumOolTable[0]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->UpdateTableForms(pDatabaseTMNumOolTable[0]);
							return FALSE;
						}
						return bTableUpdates;
					}
					if ((pDatabaseTMNumOolTable[1] = new CDatabaseTMNumOolTable))
					{
						pDatabaseTMNumOolTable[1]->Copy(pDatabaseTMNumOolTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTMNumOolTables[1].Add(pDatabaseTMNumOolTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMNumOolTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMNumOolTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTMNumOolTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTMNumOolTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTMNumOolTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTMNumOolTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							delete pDatabaseTMNumOolTable[1];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTMNumOolTable[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMNumOolTable[0]->GetName());
					ShowMessage(szMessage[0]);
					return FALSE;
				}
				if ((pDatabaseTMNumOolTable[0] = (lstrlen(pCell->GetText()) > 0) ? (((nIndex[0] = InsertTableFieldData(pView, pszTable, pCell->GetText())) >= 0) ? pView->m_pDatabaseTMNumOolTables[0].GetAt(nIndex[0]) : (CDatabaseTMNumOolTable *)NULL) : (CDatabaseTMNumOolTable *)NULL))
				{
					if ((pDatabaseTMNumOolTable[1] = new CDatabaseTMNumOolTable))
					{
						pDatabaseTMNumOolTable[1]->Copy(pDatabaseTMNumOolTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTMNumOolTables[1].Add(pDatabaseTMNumOolTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMNumOolTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMNumOolTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTMNumOolTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTMNumOolTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTMNumOolTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTMNumOolTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->m_pDatabaseTMNumOolTables[0].RemoveAt(nIndex[0]);
							delete pDatabaseTMNumOolTable[1];
							delete pDatabaseTMNumOolTable[0];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTMNumOolTable[1];
					}
					pView->m_pDatabaseTMNumOolTables[0].RemoveAt(nIndex[0]);
					delete pDatabaseTMNumOolTable[0];
				}
				if (!pCell->GetText().IsEmpty())
				{
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERNUMOOLTABLE_SAVE_FAILURE), (LPCTSTR)pCell->GetText());
					ShowMessage(szMessage[0]);
				}
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_FXF_NAME), STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTMTxtOolTable[0] = pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find(pCell->GetText()))))
				{
					if ((pDatabaseTMTxtOolTable[1] = pView->m_pDatabaseTMTxtOolTables[1].GetAt(pView->m_pDatabaseTMTxtOolTables[1].Find(pCell->GetText()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMTxtOolTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMTxtOolTable[0]->GetName()), nAnswer = (!bPrompt) ? IDYES : 0; (bTableUpdates = TransferTableData(pView, pDatabaseTMTxtOolTable[0])) && !pDatabaseTMTxtOolTable[0]->Compare(pDatabaseTMTxtOolTable[1]); )
						{
							if (CheckTableData(pView, pDatabaseTMTxtOolTable[0]) && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTMTxtOolTable[0]))
							{
								pDatabaseTMTxtOolTable[1]->Copy(pDatabaseTMTxtOolTable[0]);
								pView->UpdateTableForms(pDatabaseTMTxtOolTable[0]);
								return TRUE;
							}
							for (pDatabaseTMTxtOolTable[1]->Copy(pDatabaseTMTxtOolTable[0]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->UpdateTableForms(pDatabaseTMTxtOolTable[0]);
							return FALSE;
						}
						return bTableUpdates;
					}
					if ((pDatabaseTMTxtOolTable[1] = new CDatabaseTMTxtOolTable))
					{
						pDatabaseTMTxtOolTable[1]->Copy(pDatabaseTMTxtOolTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTMTxtOolTables[1].Add(pDatabaseTMTxtOolTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMTxtOolTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMTxtOolTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTMTxtOolTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTMTxtOolTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTMTxtOolTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTMTxtOolTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							delete pDatabaseTMTxtOolTable[1];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTMTxtOolTable[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMTxtOolTable[0]->GetName());
					ShowMessage(szMessage[0]);
					return FALSE;
				}
				if ((pDatabaseTMTxtOolTable[0] = (lstrlen(pCell->GetText()) > 0) ? (((nIndex[0] = InsertTableFieldData(pView, pszTable, pCell->GetText())) >= 0) ? pView->m_pDatabaseTMTxtOolTables[0].GetAt(nIndex[0]) : (CDatabaseTMTxtOolTable *)NULL) : (CDatabaseTMTxtOolTable *)NULL))
				{
					if ((pDatabaseTMTxtOolTable[1] = new CDatabaseTMTxtOolTable))
					{
						pDatabaseTMTxtOolTable[1]->Copy(pDatabaseTMTxtOolTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTMTxtOolTables[1].Add(pDatabaseTMTxtOolTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTMTxtOolTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTMTxtOolTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTMTxtOolTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTMTxtOolTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTMTxtOolTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTMTxtOolTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->m_pDatabaseTMTxtOolTables[0].RemoveAt(nIndex[0]);
							delete pDatabaseTMTxtOolTable[1];
							delete pDatabaseTMTxtOolTable[0];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTMTxtOolTable[1];
					}
					pView->m_pDatabaseTMTxtOolTables[0].RemoveAt(nIndex[0]);
					delete pDatabaseTMTxtOolTable[0];
				}
				if (!pCell->GetText().IsEmpty())
				{
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TMPARAMETERTXTOOLTABLE_SAVE_FAILURE), (LPCTSTR)pCell->GetText());
					ShowMessage(szMessage[0]);
				}
			}
		}
		return FALSE;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CAL_NAME), STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCNumCalTable[0] = pView->m_pDatabaseTCNumCalTables[0].GetAt(pView->m_pDatabaseTCNumCalTables[0].Find(pCell->GetText()))))
				{
					if ((pDatabaseTCNumCalTable[1] = pView->m_pDatabaseTCNumCalTables[1].GetAt(pView->m_pDatabaseTCNumCalTables[1].Find(pCell->GetText()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCNumCalTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCNumCalTable[0]->GetName()), nAnswer = (!bPrompt) ? IDYES : 0; (bTableUpdates = TransferTableData(pView, pDatabaseTCNumCalTable[0])) && !pDatabaseTCNumCalTable[0]->Compare(pDatabaseTCNumCalTable[1]); )
						{
							if (CheckTableData(pView, pDatabaseTCNumCalTable[0]) && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTCNumCalTable[0]))
							{
								pDatabaseTCNumCalTable[1]->Copy(pDatabaseTCNumCalTable[0]);
								pView->UpdateTableForms(pDatabaseTCNumCalTable[0]);
								UpdateTable(pView, pDatabaseTCNumCalTable[0]);
								return TRUE;
							}
							for (pDatabaseTCNumCalTable[1]->Copy(pDatabaseTCNumCalTable[0]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->UpdateTableForms(pDatabaseTCNumCalTable[0]);
							UpdateTable(pView, pDatabaseTCNumCalTable[0]);
							return FALSE;
						}
						return bTableUpdates;
					}
					if ((pDatabaseTCNumCalTable[1] = new CDatabaseTCNumCalTable))
					{
						pDatabaseTCNumCalTable[1]->Copy(pDatabaseTCNumCalTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCNumCalTables[1].Add(pDatabaseTCNumCalTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCNumCalTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCNumCalTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCNumCalTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCNumCalTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTCNumCalTable[0]);
									UpdateTable(pView, pDatabaseTCNumCalTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCNumCalTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							delete pDatabaseTCNumCalTable[1];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCNumCalTable[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCNumCalTable[0]->GetName());
					ShowMessage(szMessage[0]);
					return FALSE;
				}
				if ((pDatabaseTCNumCalTable[0] = (lstrlen(pCell->GetText()) > 0) ? (((nIndex[0] = InsertTableFieldData(pView, pszTable, pCell->GetText())) >= 0) ? pView->m_pDatabaseTCNumCalTables[0].GetAt(nIndex[0]) : (CDatabaseTCNumCalTable *)NULL) : (CDatabaseTCNumCalTable *)NULL))
				{
					if ((pDatabaseTCNumCalTable[1] = new CDatabaseTCNumCalTable))
					{
						pDatabaseTCNumCalTable[1]->Copy(pDatabaseTCNumCalTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCNumCalTables[1].Add(pDatabaseTCNumCalTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCNumCalTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCNumCalTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCNumCalTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCNumCalTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTCNumCalTable[0]);
									UpdateTable(pView, pDatabaseTCNumCalTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCNumCalTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->m_pDatabaseTCNumCalTables[0].RemoveAt(nIndex[0]);
							delete pDatabaseTCNumCalTable[1];
							delete pDatabaseTCNumCalTable[0];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCNumCalTable[1];
					}
					pView->m_pDatabaseTCNumCalTables[0].RemoveAt(nIndex[0]);
					delete pDatabaseTCNumCalTable[0];
				}
				if (!pCell->GetText().IsEmpty())
				{
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMCALTABLE_SAVE_FAILURE), (LPCTSTR)pCell->GetText());
					ShowMessage(szMessage[0]);
				}
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_TXF_NAME), STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCTxtCalTable[0] = pView->m_pDatabaseTCTxtCalTables[0].GetAt(pView->m_pDatabaseTCTxtCalTables[0].Find(pCell->GetText()))))
				{
					if ((pDatabaseTCTxtCalTable[1] = pView->m_pDatabaseTCTxtCalTables[1].GetAt(pView->m_pDatabaseTCTxtCalTables[1].Find(pCell->GetText()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCTxtCalTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCTxtCalTable[0]->GetName()), nAnswer = (!bPrompt) ? IDYES : 0; (bTableUpdates = TransferTableData(pView, pDatabaseTCTxtCalTable[0])) && !pDatabaseTCTxtCalTable[0]->Compare(pDatabaseTCTxtCalTable[1]); )
						{
							if (CheckTableData(pView, pDatabaseTCTxtCalTable[0]) && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTCTxtCalTable[0]))
							{
								pDatabaseTCTxtCalTable[1]->Copy(pDatabaseTCTxtCalTable[0]);
								pView->UpdateTableForms(pDatabaseTCTxtCalTable[0]);
								UpdateTable(pView, pDatabaseTCTxtCalTable[0]);
								return TRUE;
							}
							for (pDatabaseTCTxtCalTable[1]->Copy(pDatabaseTCTxtCalTable[0]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->UpdateTableForms(pDatabaseTCTxtCalTable[0]);
							UpdateTable(pView, pDatabaseTCTxtCalTable[0]);
							return FALSE;
						}
						return bTableUpdates;
					}
					if ((pDatabaseTCTxtCalTable[1] = new CDatabaseTCTxtCalTable))
					{
						pDatabaseTCTxtCalTable[1]->Copy(pDatabaseTCTxtCalTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCTxtCalTables[1].Add(pDatabaseTCTxtCalTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCTxtCalTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCTxtCalTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCTxtCalTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCTxtCalTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTCTxtCalTable[0]);
									UpdateTable(pView, pDatabaseTCTxtCalTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCTxtCalTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							delete pDatabaseTCTxtCalTable[1];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCTxtCalTable[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCTxtCalTable[0]->GetName());
					ShowMessage(szMessage[0]);
					return FALSE;
				}
				if ((pDatabaseTCTxtCalTable[0] = (lstrlen(pCell->GetText()) > 0) ? (((nIndex[0] = InsertTableFieldData(pView, pszTable, pCell->GetText())) >= 0) ? pView->m_pDatabaseTCTxtCalTables[0].GetAt(nIndex[0]) : (CDatabaseTCTxtCalTable *)NULL) : (CDatabaseTCTxtCalTable *)NULL))
				{
					if ((pDatabaseTCTxtCalTable[1] = new CDatabaseTCTxtCalTable))
					{
						pDatabaseTCTxtCalTable[1]->Copy(pDatabaseTCTxtCalTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCTxtCalTables[1].Add(pDatabaseTCTxtCalTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTCALTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCTxtCalTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTCALTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCTxtCalTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCTxtCalTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCTxtCalTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTCTxtCalTable[0]);
									UpdateTable(pView, pDatabaseTCTxtCalTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCTxtCalTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->m_pDatabaseTCTxtCalTables[0].RemoveAt(nIndex[0]);
							delete pDatabaseTCTxtCalTable[1];
							delete pDatabaseTCTxtCalTable[0];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCTxtCalTable[1];
					}
					pView->m_pDatabaseTCTxtCalTables[0].RemoveAt(nIndex[0]);
					delete pDatabaseTCTxtCalTable[0];
				}
				if (!pCell->GetText().IsEmpty())
				{
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTCALTABLE_SAVE_FAILURE), (LPCTSTR)pCell->GetText());
					ShowMessage(szMessage[0]);
				}
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_OCF_NAME), STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCNumOolTable[0] = pView->m_pDatabaseTCNumOolTables[0].GetAt(pView->m_pDatabaseTCNumOolTables[0].Find(pCell->GetText()))))
				{
					if ((pDatabaseTCNumOolTable[1] = pView->m_pDatabaseTCNumOolTables[1].GetAt(pView->m_pDatabaseTCNumOolTables[1].Find(pCell->GetText()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCNumOolTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCNumOolTable[0]->GetName()), nAnswer = (!bPrompt) ? IDYES : 0; (bTableUpdates = TransferTableData(pView, pDatabaseTCNumOolTable[0])) && !pDatabaseTCNumOolTable[0]->Compare(pDatabaseTCNumOolTable[1]); )
						{
							if (CheckTableData(pView, pDatabaseTCNumOolTable[0]) && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTCNumOolTable[0]))
							{
								pDatabaseTCNumOolTable[1]->Copy(pDatabaseTCNumOolTable[0]);
								pView->UpdateTableForms(pDatabaseTCNumOolTable[0]);
								return TRUE;
							}
							for (pDatabaseTCNumOolTable[1]->Copy(pDatabaseTCNumOolTable[0]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->UpdateTableForms(pDatabaseTCNumOolTable[0]);
							return FALSE;
						}
						return bTableUpdates;
					}
					if ((pDatabaseTCNumOolTable[1] = new CDatabaseTCNumOolTable))
					{
						pDatabaseTCNumOolTable[1]->Copy(pDatabaseTCNumOolTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCNumOolTables[1].Add(pDatabaseTCNumOolTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCNumOolTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCNumOolTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCNumOolTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCNumOolTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTCNumOolTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCNumOolTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							delete pDatabaseTCNumOolTable[1];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCNumOolTable[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCNumOolTable[0]->GetName());
					ShowMessage(szMessage[0]);
					return FALSE;
				}
				if ((pDatabaseTCNumOolTable[0] = (lstrlen(pCell->GetText()) > 0) ? (((nIndex[0] = InsertTableFieldData(pView, pszTable, pCell->GetText())) >= 0) ? pView->m_pDatabaseTCNumOolTables[0].GetAt(nIndex[0]) : (CDatabaseTCNumOolTable *)NULL) : (CDatabaseTCNumOolTable *)NULL))
				{
					if ((pDatabaseTCNumOolTable[1] = new CDatabaseTCNumOolTable))
					{
						pDatabaseTCNumOolTable[1]->Copy(pDatabaseTCNumOolTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCNumOolTables[1].Add(pDatabaseTCNumOolTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCNumOolTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCNumOolTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCNumOolTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCNumOolTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTCNumOolTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCNumOolTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->m_pDatabaseTCNumOolTables[0].RemoveAt(nIndex[0]);
							delete pDatabaseTCNumOolTable[1];
							delete pDatabaseTCNumOolTable[0];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCNumOolTable[1];
					}
					pView->m_pDatabaseTCNumOolTables[0].RemoveAt(nIndex[0]);
					delete pDatabaseTCNumOolTable[0];
				}
				if (!pCell->GetText().IsEmpty())
				{
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERNUMOOLTABLE_SAVE_FAILURE), (LPCTSTR)pCell->GetText());
					ShowMessage(szMessage[0]);
				}
			}
			return FALSE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_FXF_NAME), STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCTxtOolTable[0] = pView->m_pDatabaseTCTxtOolTables[0].GetAt(pView->m_pDatabaseTCTxtOolTables[0].Find(pCell->GetText()))))
				{
					if ((pDatabaseTCTxtOolTable[1] = pView->m_pDatabaseTCTxtOolTables[1].GetAt(pView->m_pDatabaseTCTxtOolTables[1].Find(pCell->GetText()))))
					{
						for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCTxtOolTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCTxtOolTable[0]->GetName()), nAnswer = (!bPrompt) ? IDYES : 0; (bTableUpdates = TransferTableData(pView, pDatabaseTCTxtOolTable[0])) && !pDatabaseTCTxtOolTable[0]->Compare(pDatabaseTCTxtOolTable[1]); )
						{
							if (CheckTableData(pView, pDatabaseTCTxtOolTable[0]) && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES) && Save(pDatabaseTCTxtOolTable[0]))
							{
								pDatabaseTCTxtOolTable[1]->Copy(pDatabaseTCTxtOolTable[0]);
								pView->UpdateTableForms(pDatabaseTCTxtOolTable[0]);
								return TRUE;
							}
							for (pDatabaseTCTxtOolTable[1]->Copy(pDatabaseTCTxtOolTable[0]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->UpdateTableForms(pDatabaseTCTxtOolTable[0]);
							return FALSE;
						}
						return bTableUpdates;
					}
					if ((pDatabaseTCTxtOolTable[1] = new CDatabaseTCTxtOolTable))
					{
						pDatabaseTCTxtOolTable[1]->Copy(pDatabaseTCTxtOolTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCTxtOolTables[1].Add(pDatabaseTCTxtOolTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCTxtOolTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCTxtOolTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCTxtOolTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCTxtOolTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTCTxtOolTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCTxtOolTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							delete pDatabaseTCTxtOolTable[1];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCTxtOolTable[1];
					}
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCTxtOolTable[0]->GetName());
					ShowMessage(szMessage[0]);
					return FALSE;
				}
				if ((pDatabaseTCTxtOolTable[0] = (lstrlen(pCell->GetText()) > 0) ? (((nIndex[0] = InsertTableFieldData(pView, pszTable, pCell->GetText())) >= 0) ? pView->m_pDatabaseTCTxtOolTables[0].GetAt(nIndex[0]) : (CDatabaseTCTxtOolTable *)NULL) : (CDatabaseTCTxtOolTable *)NULL))
				{
					if ((pDatabaseTCTxtOolTable[1] = new CDatabaseTCTxtOolTable))
					{
						pDatabaseTCTxtOolTable[1]->Copy(pDatabaseTCTxtOolTable[0]);
						if ((nIndex[1] = pView->m_pDatabaseTCTxtOolTables[1].Add(pDatabaseTCTxtOolTable[1])) >= 0)
						{
							for (szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTOOLTABLE_SAVE_QUESTION), (LPCTSTR)pDatabaseTCTxtOolTable[0]->GetName()), szMessage[1].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTOOLTABLE_SAVE_FAILURE), (LPCTSTR)pDatabaseTCTxtOolTable[0]->GetName()), nAnswer = ((bTableUpdates = CheckTableData(pView, pDatabaseTCTxtOolTable[0])) && !bPrompt) ? IDYES : 0; bTableUpdates && (!bPrompt || (nAnswer = pView->MessageBox(szMessage[0], cVersionInfo.QueryApplicationTitle(), MB_ICONQUESTION | MB_YESNO)) == IDYES); )
							{
								if (Save(pDatabaseTCTxtOolTable[0]))
								{
									pView->UpdateTableForms(pDatabaseTCTxtOolTable[0]);
									return TRUE;
								}
								break;
							}
							for (pView->m_pDatabaseTCTxtOolTables[1].RemoveAt(nIndex[1]); nAnswer == IDYES; )
							{
								ShowMessage(szMessage[1]);
								break;
							}
							pView->m_pDatabaseTCTxtOolTables[0].RemoveAt(nIndex[0]);
							delete pDatabaseTCTxtOolTable[1];
							delete pDatabaseTCTxtOolTable[0];
							return(nAnswer != IDYES);
						}
						delete pDatabaseTCTxtOolTable[1];
					}
					pView->m_pDatabaseTCTxtOolTables[0].RemoveAt(nIndex[0]);
					delete pDatabaseTCTxtOolTable[0];
				}
				if (!pCell->GetText().IsEmpty())
				{
					szMessage[0].Format(STRING(IDS_DATABASE_TABLE_TCPARAMETERTXTOOLTABLE_SAVE_FAILURE), (LPCTSTR)pCell->GetText());
					ShowMessage(szMessage[0]);
				}
			}
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::ProtectTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, BOOL bUndo)
{
	INT  nRow;
	INT  nRows;
	INT  nLow[2];
	INT  nHigh[2];
	UINT  uLow;
	UINT  uHigh;
	UINT  nRange[2][2];
	LOGFONT  sLogFont;
	CTableViewCell  *pCell[2];
	CTableViewObject  *pTable[2];
	CTableViewEditCtrl  *pEditCtrl;
	CTableViewTimeSpinCtrl  *pTimeSpinCtrl;
	CTableViewComboBoxEditCtrl  *pComboEditCtrl;
	CTableViewDecNumberEditCtrl  *pDecNumberEditCtrl;
	CTableViewRawNumberEditCtrl  *pRawNumberEditCtrl;

	for (pView->EnableUndo(FALSE); DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET; )
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_PACKID)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTMPacketTagLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMPacketDescriptionLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_FUNC)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMPacketDetailsLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_TMID)))))
			{
				for (GetTMPacketTMIDRange(uLow, uHigh); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(uLow, uHigh);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_3VAL)))))
			{
				for (GetTMPacket3DiscRange(uLow, uHigh); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(uLow, uHigh);
					break;
				}
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_SMPRT)))); )
			{
				if ((pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl())) pRawNumberEditCtrl->SetRadix(10);
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_VALID)))); )
			{
				if ((pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl())) pRawNumberEditCtrl->SetRadix(10);
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_LENG)))))
			{
				for (GetTMPacketDataSizeRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_VCID)))))
			{
				for (GetTMPacketVirtualChannelRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_NAME))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterTagLength());
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_OFFBY))))
				{
					for (GetTMPacketParameterBytePositionRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_OFFBI))))
				{
					for (GetTMPacketParameterBitPositionRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_NBOCC))))
				{
					for (GetTMPacketParameterOccurrenceCountRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_LGOCC))))
				{
					for (GetTMPacketParameterOccurrenceIntervalRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_VALID))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterTagLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_NAME))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMPacketHeaderNameLength());
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_OFFSET))))
				{
					for (GetTMPacketHeaderTMTypePositionRange(nLow[0], nHigh[0], nLow[1], nHigh[1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_LENGTH))))
				{
					for (GetTMPacketHeaderTMTypePositionRange(nLow[0], nHigh[0], nLow[1], nHigh[1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[1], nHigh[1]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_OFFSET))))
				{
					for (GetTMPacketHeaderTMIDPositionRange(nLow[0], nHigh[0], nLow[1], nHigh[1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_LENGTH))))
				{
					for (GetTMPacketHeaderTMIDPositionRange(nLow[0], nHigh[0], nLow[1], nHigh[1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[1], nHigh[1]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_OFFSET))))
				{
					for (GetTMPacketHeader3DiscPositionRange(nLow[0], nHigh[0], nLow[1], nHigh[1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_LENGTH))))
				{
					for (GetTMPacketHeader3DiscPositionRange(nLow[0], nHigh[0], nLow[1], nHigh[1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[1], nHigh[1]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_OFFSET))))
				{
					for (GetTMPacketHeaderTimestampPositionRange(nLow[0], nHigh[0], nLow[1], nHigh[1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_LENGTH))))
				{
					for (GetTMPacketHeaderTimestampPositionRange(nLow[0], nHigh[0], nLow[1], nHigh[1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[1], nHigh[1]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_STID))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMPacketStreamNameLength());
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_TMID))))
				{
					for (GetTMPacketStreamTMIDRange(uLow, uHigh); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(uLow, uHigh);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_PERIOD))))
				{
					for (GetTMPacketStreamPeriodRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_TIMEOUT))))
				{
					for (GetTMPacketStreamTimeoutRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_VALID))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMPacketStreamValidityParameterLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_CNAME)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTCFunctionNameLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionDescriptionLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_ADD)))))
			{
				for (GetTCFunctionTCIDRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					break;
				}
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_LDESC)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionDetailsLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_DESS)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionDestinationSubSystemLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_DEUN)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionDestinationEquipmentLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_ROUTS)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionRouterSubSystemLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_ROUTU)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionRouterEquipmentLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_OPINFO)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionOperationalInfoLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_VALID)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionValidityConditionsLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_FUNC)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(2 * GetTCFunctionExtendedDescriptionLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_ALTC)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionAssociatedTelecommandsLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_CMPTC)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionComplementaryTelecommandsLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_SSCH)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionDestinationSubScheduleLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_COSEV)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionMissionPlannerEventLength());
				break;
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_PACKID)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTCPacketTagLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCPacketDescriptionLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_FUNC)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(2 * GetTCPacketDetailsLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_LENG)))))
			{
				for (GetTCPacketDataSizeRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_PNAME))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionElementNameLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_DESCR))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionElementDescriptionLength());
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_ELLEN))))
				{
					for (GetTCFunctionElementValueBitWidthRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_BITOFF))))
				{
					for (GetTCFunctionElementValueBitOffsetRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_VALUE))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionElementConstValueLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_PNAME))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCPacketParameterTagLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_DESCR))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCPacketParameterDescriptionLength());
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_ELLEN))))
				{
					for (GetTCPacketParameterValueBitWidthRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_BITOFF))))
				{
					for (GetTCPacketParameterValueBitOffsetRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_VALUE))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCPacketParameterConstValueLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PVP_ID)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTCPreExeGroupIDLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PVP_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCPreExeGroupDescriptionLength());
				break;
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CVP_ID)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTCExeVerGroupIDLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CVP_NAME)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCExeVerGroupNameLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CVP_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCExeVerGroupDescriptionLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CVP_NMBST)))))
			{
				for (GetTCExeVerGroupStagesRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PEV_PNAME))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterTagLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PEV_PVALUE))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCPreExeGroupParameterConstValueLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_PNAME))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterTagLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_PVALUE))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCExeVerGroupParameterConstValueLength());
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_SWND))))
				{
					for (GetTCExeVerGroupParameterTimeWindowIntervalRange(uLow, uHigh); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(uLow, uHigh);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_EPCKID))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCExeVerGroupParameterEventIDLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPS_NAME)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTCParameterSetNameLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPS_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCParameterSetDescriptionLength());
				break;
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CPSP_PNAME))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCParameterSetItemNameLength());
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CPSP_BITOFF))))
				{
					for (GetTCParameterSetItemValueBitOffsetRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CPSP_PVALUE))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCParameterSetItemConstValueLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSF_NAME)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTCSequenceNameLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSF_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceDescriptionLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSF_SEQDATE)))))
			{
				if ((pTimeSpinCtrl = (CTableViewTimeSpinCtrl *)pCell[0]->GetControl())) pTimeSpinCtrl->SetFormat(STRING(IDS_DATABASE_TABLE_CSF_DATE_FORMAT));
				pCell[0]->SetFormat(pCell[0]->GetFormat() | TAS_TIME_UTC);
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSF_SEQUSER)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceUserNameLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSF_DOCNAME)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceDocumentNameLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSF_DOCISSUE)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceDocumentIssueLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSF_DOCDATE)))))
			{
				if ((pTimeSpinCtrl = (CTableViewTimeSpinCtrl *)pCell[0]->GetControl())) pTimeSpinCtrl->SetFormat(STRING(IDS_DATABASE_TABLE_CSF_DATE_FORMAT));
				pCell[0]->SetFormat(pCell[0]->GetFormat() | TAS_TIME_UTC);
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSF_COSEV)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceMissionPlannerEventLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSF_SSCH)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceSubScheduleDestinationLength());
				break;
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_IDENT))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceEntryNameLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_1STEP))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceEntryNameLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_COMMENT))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceEntryDescriptionLength());
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_RELTIME))))
				{
					if ((pTimeSpinCtrl = (CTableViewTimeSpinCtrl *)pCell[0]->GetControl()))
					{
						pTimeSpinCtrl->SetFormat(STRING(IDS_DATABASE_TABLE_CSS_RELTIME_FORMAT));
						pTimeSpinCtrl->SetRange(0, 1000000 * (TIMETAG)(SECONDSPERDAY - 1));
					}
					pCell[0]->SetFormat(pCell[0]->GetFormat() | TAS_TIME_SPAN);
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_ABSTIME))))
				{
					if ((pTimeSpinCtrl = (CTableViewTimeSpinCtrl *)pCell[0]->GetControl())) pTimeSpinCtrl->SetFormat(STRING(IDS_DATABASE_TABLE_CSS_ABSTIME_FORMAT));
					pCell[0]->SetFormat(pCell[0]->GetFormat() | TAS_TIME_UTC);
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_EXETIME))))
				{
					if ((pTimeSpinCtrl = (CTableViewTimeSpinCtrl *)pCell[0]->GetControl()))
					{
						pTimeSpinCtrl->SetFormat(STRING(IDS_DATABASE_TABLE_CSS_RELTIME_FORMAT));
						pTimeSpinCtrl->SetRange(0, 1000000 * (TIMETAG)(SECONDSPERDAY - 1));
					}
					pCell[0]->SetFormat(pCell[0]->GetFormat() | TAS_TIME_SPAN);
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_BLOCK))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceEntryBlockMembershipLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_FPNAME))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceParameterTagLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_DESCR))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceParameterDescriptionLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_UNIT))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceParameterUnitLength());
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_LENGTH))))
				{
					for (GetTCParameterBitWidthRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_CALREF))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCNumCalTableNameLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_TXFREF))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCTxtCalTableNameLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_OCFREF))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCNumOolTableNameLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_FXFREF))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCTxtOolTableNameLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_DEFVAL))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceParameterConstValueLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_PNAME))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceEntryParameterTagLength());
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_BITOFF))))
				{
					for (GetTCSequenceEntryParameterBitOffsetRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_COMMENT))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceEntryParameterCommentLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_VALUE))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceEntryParameterConstValueLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_PSET))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceEntryParameterMemoryAreaNameLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_PSINST))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCSequenceEntryParameterMemoryAreaVersionLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_BCF_CNAME)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTCFunctionBlockNameLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)))); )
			{
				if ((pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl())) pRawNumberEditCtrl->SetRadix(10);
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)))); )
			{
				if ((pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl())) pRawNumberEditCtrl->SetRadix(10);
				break;
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_BCCF_CONTENT))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCFunctionBlockElementNameLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetOBProcessorNameLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE)))))
			{
				for (GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nRange[0][0], nRange[0][1], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), TRUE);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_STARTADDR)))))
			{
				for (GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nRange[1][0], nRange[1][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), TRUE);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE)))))
			{
				for (GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nRange[0][0], nRange[0][1], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), TRUE);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_ENDADDR)))))
			{
				for (GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nRange[1][0], nRange[1][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), TRUE);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_INTERVAL)))))
			{
				for (GetOBProcessorDumpIntervalRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH)))))
			{
				for (GetOBProcessorDumpCountRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PIMG_MNAME)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetOBProcessorMemoryImageNameLength());
				break;
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MAD_NAME))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryAreaNameLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MAD_DESCR))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryAreaDescriptionLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MAD_PATCHTC))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryAreaPatchCommandLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MAD_DUMPTC))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryAreaDumpCommandLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MAD_TMPKT))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryAreaDumpPacketLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MEM_TMNAME))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryAreaBlockTMParameterLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MEM_TCNAME))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryAreaBlockTCParameterLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MEM_DESCR))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryAreaBlockDescriptionLength());
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MEM_PAGE))))
				{
					for (GetOBProcessorMemoryAreaBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nRange[0][0], nRange[0][1], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), TRUE);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MEM_ADDRESS))))
				{
					for (GetOBProcessorMemoryAreaBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nRange[1][0], nRange[1][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), TRUE);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MEM_BITOFF))))
				{
					for (GetOBProcessorMemoryAreaBlockBitOffsetRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MEM_WIDTH))))
				{
					for (GetOBProcessorMemoryAreaBlockBitWidthRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMG_VERSION))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryImageBlockVersionLength());
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMG_PAGE))))
				{
					for (GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nRange[0][0], nRange[0][1], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), TRUE);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMG_ADDRESS))))
				{
					for (GetOBProcessorMemoryAreaBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nRange[1][0], nRange[1][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), TRUE);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMG_DATA))))
				{
					for (pCell[0]->GetFont(&sLogFont), sLogFont.lfPitchAndFamily = (sLogFont.lfPitchAndFamily & ~(DEFAULT_PITCH | VARIABLE_PITCH)) | FIXED_PITCH, pCell[0]->SetFont(&sLogFont); (pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl()); )
					{
						pEditCtrl->LimitText(5 * GetOBProcessorMemoryImageBlockDataLength() / 2);
						break;
					}
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMGP_VERSION))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryImageBlockVersionLength());
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMGP_PAGE))))
				{
					for (GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nRange[0][0], nRange[0][1], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), TRUE);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMGP_ADDRESS))))
				{
					for (GetOBProcessorMemoryAreaBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nRange[1][0], nRange[1][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), TRUE);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMGP_DATA))))
				{
					for (pCell[0]->GetFont(&sLogFont), sLogFont.lfPitchAndFamily = (sLogFont.lfPitchAndFamily & ~(DEFAULT_PITCH | VARIABLE_PITCH)) | FIXED_PITCH, pCell[0]->SetFont(&sLogFont); (pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl()); )
					{
						pEditCtrl->LimitText(5 * GetOBProcessorMemoryImageBlockDataLength() / 2);
						break;
					}
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CRC_DEST))))
				{
					for (GetOBProcessorMemoryAreaCheckSumDestinationRange(uLow, uHigh); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(uLow, uHigh);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CRC_LENGTH))))
				{
					for (GetOBProcessorMemoryAreaCheckSumLengthRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CRC_PAGE))))
				{
					for (GetOBProcessorMemoryAreaCheckSumAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nRange[0][0], nRange[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), TRUE);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CRC_START))))
				{
					for (GetOBProcessorMemoryAreaCheckSumAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nRange[1][0], nRange[1][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), TRUE);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CRC_END))))
				{
					for (GetOBProcessorMemoryAreaCheckSumAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nRange[1][0], nRange[1][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), TRUE);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CRC_SEED))))
				{
					for (GetOBProcessorMemoryAreaCheckSumSeedValueRange(uLow, uHigh); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(uLow, uHigh);
						break;
					}
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CAT_ID))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryAreaCatalogueEntryIDLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CAT_DESCR))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryAreaCatalogueEntryDescriptionLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CAT_VERSION))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryAreaCatalogueEntryVersionLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CAT_DATE))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryAreaCatalogueEntryDateLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CAT_TIME))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryAreaCatalogueEntryTimeLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CAT_LOCATION))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetOBProcessorMemoryAreaCatalogueEntryLocationLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_NAME)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTMParameterTagLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterDescriptionLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_LDESC)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterDetailsLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_UNIT)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterUnitLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_WIDTH)))))
			{
				for (GetTMParameterBitWidthRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_PARVAL)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterConstValueLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_APPLC)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterValidityConditionsLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_MONIT)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterDangerConditionsLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_EXPTRG)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterTriggerExpressionLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_SOURS)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterSourceSubSystemLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_SOURU)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterSourceEquipmentLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_ROUTS)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterRouterSubSystemLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_ROUTU)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterRouterEquipmentLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_OPINFO)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterOperationalInfoLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_INTM)))))
			{
				for (GetTMParameterInterrogationInstructionRange(uLow, uHigh); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(uLow, uHigh);
					break;
				}
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_ALTM)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterRelatedParameterLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_ASTC)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMParameterAssociatedTelecommandsLength());
				break;
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NAME)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTMNumCalTableNameLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMNumCalTableDescriptionLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_UNIT)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMNumCalTableUnitLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)))))
			{
				for (GetTMNumCalTablePointsRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NAME)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTMTxtCalTableNameLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMTxtCalTableDescriptionLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)))))
			{
				for (GetTMTxtCalTablePointsRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NAME)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTMNumOolTableNameLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)))))
			{
				for (GetTMNumOolTableCheckCountRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NAME)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTMTxtOolTableNameLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)))))
			{
				for (GetTMTxtOolTableCheckCountRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CALP_XVAL))); )
				{
					if ((pDecNumberEditCtrl = (CTableViewDecNumberEditCtrl *)pCell[0]->GetControl())) pDecNumberEditCtrl->SetRange(-DBL_MAX, DBL_MAX);
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CALP_YVAL))); )
				{
					if ((pDecNumberEditCtrl = (CTableViewDecNumberEditCtrl *)pCell[0]->GetControl())) pDecNumberEditCtrl->SetRange(-DBL_MAX, DBL_MAX);
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_TXFP_FROM))); )
				{
					if ((pDecNumberEditCtrl = (CTableViewDecNumberEditCtrl *)pCell[0]->GetControl())) pDecNumberEditCtrl->SetRange((LONGLONG)INT_MIN, (LONGLONG)INT_MAX);
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_TXFP_TO))); )
				{
					if ((pDecNumberEditCtrl = (CTableViewDecNumberEditCtrl *)pCell[0]->GetControl())) pDecNumberEditCtrl->SetRange((LONGLONG)INT_MIN, (LONGLONG)INT_MAX);
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_TXFP_TEXT))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMTxtCalTablePointTextLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_OCFP_LVALUE))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMNumOolTableLimitValueLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_OCFP_HVALUE))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMNumOolTableLimitValueLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_FXFP_FROM))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMTxtOolTableLimitValueLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_FXFP_TO))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTMTxtOolTableLimitValueLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_PNAME)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTCParameterTagLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCParameterDescriptionLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_UNIT)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCParameterUnitLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_LENGTH)))))
			{
				for (GetTCParameterBitWidthRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NAME)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTCNumCalTableNameLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCNumCalTableDescriptionLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_UNIT)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCNumCalTableUnitLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)))))
			{
				for (GetTCNumCalTablePointsRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NAME)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTCTxtCalTableNameLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCTxtCalTableDescriptionLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)))))
			{
				for (GetTCTxtCalTablePointsRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NAME)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTCNumOolTableNameLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)))))
			{
				for (GetTCNumOolTableCheckCountRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NAME)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetTCTxtOolTableNameLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)))))
			{
				for (GetTCTxtOolTableCheckCountRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CALP_XVAL))); )
				{
					if ((pDecNumberEditCtrl = (CTableViewDecNumberEditCtrl *)pCell[0]->GetControl())) pDecNumberEditCtrl->SetRange(-DBL_MAX, DBL_MAX);
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CALP_YVAL))); )
				{
					if ((pDecNumberEditCtrl = (CTableViewDecNumberEditCtrl *)pCell[0]->GetControl())) pDecNumberEditCtrl->SetRange(-DBL_MAX, DBL_MAX);
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_TXFP_FROM))); )
				{
					if ((pDecNumberEditCtrl = (CTableViewDecNumberEditCtrl *)pCell[0]->GetControl())) pDecNumberEditCtrl->SetRange((LONGLONG)INT_MIN, (LONGLONG)INT_MAX);
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_TXFP_TO))); )
				{
					if ((pDecNumberEditCtrl = (CTableViewDecNumberEditCtrl *)pCell[0]->GetControl())) pDecNumberEditCtrl->SetRange((LONGLONG)INT_MIN, (LONGLONG)INT_MAX);
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_TXFP_TEXT))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCTxtCalTablePointTextLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_OCFP_LVALUE))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCNumOolTableLimitValueLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_OCFP_HVALUE))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCNumOolTableLimitValueLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_FXFP_FROM))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCTxtOolTableLimitValueLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_FXFP_TO))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetTCTxtOolTableLimitValueLength());
					break;
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_DPF_NUMBER)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetANDNameLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_DPF_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetANDTitleLength());
				break;
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_PNAME))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetANDParameterTagLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_COMMENT))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetANDParameterCommentLength());
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_ROW))))
				{
					for (GetANDParameterRowRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_COL))))
				{
					for (GetANDParameterColRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_COMM))))
				{
					for (GetANDParameterOccurrenceRange(nLow[0], nHigh[0]); (pDecNumberEditCtrl = (CTableViewDecNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pDecNumberEditCtrl->SetRange((LONGLONG)nLow[0], (LONGLONG)nHigh[0]);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_VALCHARS))))
				{
					for (GetANDParameterDigitsRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_NUMBER)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetGRDNameLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetGRDTitleLength());
				break;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_DAYS)))))
			{
				for (GetGRDDurationDaysRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_HOURS)))))
			{
				for (GetGRDDurationHoursRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_MINUTES)))))
			{
				for (GetGRDDurationMinutesRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_INTERVAL)))))
			{
				for (GetGRDIntervalRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_UPDATE)))))
			{
				for (GetGRDUpdateIntervalRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_WIDTH)))))
			{
				for (GetGRDPlotWidthRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_HEIGHT)))))
			{
				for (GetGRDPlotHeightRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_XGRIDS)))))
			{
				for (GetGRDXGridsRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_YGRIDS)))))
			{
				for (GetGRDYGridsRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_XTICKS)))))
			{
				for (GetGRDXTicksRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_YTICKS)))))
			{
				for (GetGRDYTicksRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH)))))
			{
				for (GetGRDGridsWidthRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH)))))
			{
				for (GetGRDTicksWidthRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
				{
					pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
					pRawNumberEditCtrl->SetRadix(10);
					break;
				}
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS)))); )
			{
				if ((pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl())) pRawNumberEditCtrl->SetRadix(10);
				break;
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable[0]->GetRows(); nRow < nRows; nRow++)
			{
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_PNAME))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetGRDParameterTagLength());
					break;
				}
				for (; (pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_COMMENT))); )
				{
					if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetGRDParameterCommentLength());
					break;
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_POSITION))))
				{
					for (GetGRDParameterPositionRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_COMM))))
				{
					for (GetGRDParameterOccurrenceRange(nLow[0], nHigh[0]); (pDecNumberEditCtrl = (CTableViewDecNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pDecNumberEditCtrl->SetRange((LONGLONG)nLow[0], (LONGLONG)nHigh[0]);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_VALCHARS))))
				{
					for (GetGRDParameterDigitsRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
				if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH))))
				{
					for (GetGRDParameterLineWidthRange(nLow[0], nHigh[0]); (pRawNumberEditCtrl = (CTableViewRawNumberEditCtrl *)pCell[0]->GetControl()); )
					{
						pRawNumberEditCtrl->SetRange(nLow[0], nHigh[0]);
						pRawNumberEditCtrl->SetRadix(10);
						break;
					}
				}
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PPF_NUMBER)))); )
			{
				if ((pComboEditCtrl = (CTableViewComboBoxEditCtrl *)pCell[0]->GetControl())) pComboEditCtrl->LimitText(GetPODNameLength());
				break;
			}
			for (; (pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PPF_DESCR)))); )
			{
				if ((pEditCtrl = (CTableViewEditCtrl *)pCell[0]->GetControl())) pEditCtrl->LimitText(GetPODTitleLength());
				break;
			}
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (UpdateTableFieldData(pView, (UINT)-1, pTable[0]->GetName(), (!bUndo || pView->EnableUndo()) ? (LPCTSTR)NULL : (LPCTSTR)NULL); !bUndo; )
			{
				pView->EnableUndo();
				break;
			}
			return TRUE;
		}
	}
	pView->EnableUndo(TRUE);
	return FALSE;
}

BOOL CALTELDatabaseEngine::DeleteTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable)
{
	INT  nIndex;
	INT  nTable;
	INT  nTables;
	UINT  nControlID;
	CString  szTable;
	CString  szItem;
	CStringArray  szItems;
	CStringArray  szTables;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable[2];
	CDatabaseTCPacket  *pDatabaseTCPacket[2];
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable[2];
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable[2];
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable[2];
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable[2];
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable[2];
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable[2];
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable[2];
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable[2];
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup[2];
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup[2];
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet[2];
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock[2];
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage[2];

	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_TCP_PACKID), STRING(IDS_DATABASE_TABLE_TCP_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCPacket[0] = pView->m_pDatabaseTCPackets[0].GetAt(pView->m_pDatabaseTCPackets[0].Find((szTable = pCell->GetText())))) && Delete(pDatabaseTCPacket[0]) && DeleteTableFieldData(pView, pszTable, pDatabaseTCPacket[0]->GetTag()) >= 0)
				{
					if ((pDatabaseTCPacket[1] = pView->m_pDatabaseTCPackets[1].GetAt((nIndex = pView->m_pDatabaseTCPackets[1].Find(szTable)))))
					{
						pView->m_pDatabaseTCPackets[1].RemoveAt(nIndex);
						delete pDatabaseTCPacket[1];
					}
					for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, pszTable, STRING(IDS_DATABASE_TABLE_TCP_PACKID))), szTables); nTable < nTables; nTable++)
					{
						if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) && GetTableUpdateContents(pView, pTable[1]->GetName(), nControlID, EMPTYSTRING, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
					UpdateTables(pView, DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCFUNCTIONPACKET);
					return TRUE;
				}
			}
			return FALSE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PVP_ID), STRING(IDS_DATABASE_TABLE_PVP_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCPreExeGroup[0] = pView->m_pDatabaseTCPreExeGroups[0].GetAt(pView->m_pDatabaseTCPreExeGroups[0].Find((szTable = pCell->GetText())))) && Delete(pDatabaseTCPreExeGroup[0]) && DeleteTableFieldData(pView, pszTable, pDatabaseTCPreExeGroup[0]->GetID()) >= 0)
				{
					if ((pDatabaseTCPreExeGroup[1] = pView->m_pDatabaseTCPreExeGroups[1].GetAt((nIndex = pView->m_pDatabaseTCPreExeGroups[1].Find(szTable)))))
					{
						pView->m_pDatabaseTCPreExeGroups[1].RemoveAt(nIndex);
						delete pDatabaseTCPreExeGroup[1];
					}
					for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, pszTable, STRING(IDS_DATABASE_TABLE_PVP_ID))), szTables); nTable < nTables; nTable++)
					{
						if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) && GetTableUpdateContents(pView, pTable[1]->GetName(), nControlID, EMPTYSTRING, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
					UpdateTables(pView, DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCFUNCTIONPREEXEGROUP);
					return TRUE;
				}
			}
			return FALSE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_CVP_ID), STRING(IDS_DATABASE_TABLE_CVP_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCExeVerGroup[0] = pView->m_pDatabaseTCExeVerGroups[0].GetAt(pView->m_pDatabaseTCExeVerGroups[0].Find((szTable = pCell->GetText())))) && Delete(pDatabaseTCExeVerGroup[0]) && DeleteTableFieldData(pView, pszTable, pDatabaseTCExeVerGroup[0]->GetID()) >= 0)
				{
					if ((pDatabaseTCExeVerGroup[1] = pView->m_pDatabaseTCExeVerGroups[1].GetAt((nIndex = pView->m_pDatabaseTCExeVerGroups[1].Find(szTable)))))
					{
						pView->m_pDatabaseTCExeVerGroups[1].RemoveAt(nIndex);
						delete pDatabaseTCExeVerGroup[1];
					}
					for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, pszTable, STRING(IDS_DATABASE_TABLE_CVP_ID))), szTables); nTable < nTables; nTable++)
					{
						if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) && GetTableUpdateContents(pView, pTable[1]->GetName(), nControlID, EMPTYSTRING, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
					UpdateTables(pView, DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCFUNCTIONEXEVERGROUP);
					return TRUE;
				}
			}
			return FALSE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_CPS_NAME), STRING(IDS_DATABASE_TABLE_CPS_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCParameterSet[0] = pView->m_pDatabaseTCParameterSets[0].GetAt(pView->m_pDatabaseTCParameterSets[0].Find((szTable = pCell->GetText())))) && Delete(pDatabaseTCParameterSet[0]) && DeleteTableFieldData(pView, pszTable, pDatabaseTCParameterSet[0]->GetName()) >= 0)
				{
					if ((pDatabaseTCParameterSet[1] = pView->m_pDatabaseTCParameterSets[1].GetAt((nIndex = pView->m_pDatabaseTCParameterSets[1].Find(szTable)))))
					{
						pView->m_pDatabaseTCParameterSets[1].RemoveAt(nIndex);
						delete pDatabaseTCParameterSet[1];
					}
					for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, pszTable, STRING(IDS_DATABASE_TABLE_CPS_NAME))), szTables); nTable < nTables; nTable++)
					{
						if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) && GetTableUpdateContents(pView, pTable[1]->GetName(), nControlID, EMPTYSTRING, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
					UpdateTables(pView, DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCPARAMETERSET);
					return TRUE;
				}
			}
			return FALSE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_BCF_CNAME), STRING(IDS_DATABASE_TABLE_BCF_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCFunctionBlock[0] = pView->m_pDatabaseTCFunctionBlocks[0].GetAt(pView->m_pDatabaseTCFunctionBlocks[0].Find((szTable = pCell->GetText())))) && Delete(pDatabaseTCFunctionBlock[0]) && DeleteTableFieldData(pView, pszTable, pDatabaseTCFunctionBlock[0]->GetName()) >= 0)
				{
					if ((pDatabaseTCFunctionBlock[1] = pView->m_pDatabaseTCFunctionBlocks[1].GetAt((nIndex = pView->m_pDatabaseTCFunctionBlocks[1].Find(szTable)))))
					{
						pView->m_pDatabaseTCFunctionBlocks[1].RemoveAt(nIndex);
						delete pDatabaseTCFunctionBlock[1];
					}
					for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, pszTable, STRING(IDS_DATABASE_TABLE_BCF_CNAME))), szTables); nTable < nTables; nTable++)
					{
						if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) && GetTableUpdateContents(pView, pTable[1]->GetName(), nControlID, EMPTYSTRING, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
					UpdateTables(pView, DATABASE_COMPONENT_TCSEQUENCE | DATABASE_SUBCOMPONENT_TCFUNCTIONBLOCK);
					return TRUE;
				}
			}
			return FALSE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable[0]->FindCell(pTable[0]->GetRows() - 1, pTable[0]->GetColumns() - 1)) != (CTableViewCell *)NULL)
			{
				if ((pDatabaseOBProcessorMemoryImage[0] = pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[0].Find((szTable = pCell->GetText())))) && Delete(pDatabaseOBProcessorMemoryImage[0]) && DeleteTableFieldData(pView, pszTable, pDatabaseOBProcessorMemoryImage[0]->GetName()) >= 0)
				{
					if ((pDatabaseOBProcessorMemoryImage[1] = pView->m_pDatabaseOBProcessorMemoryImages[1].GetAt((nIndex = pView->m_pDatabaseOBProcessorMemoryImages[1].Find(szTable)))))
					{
						pView->m_pDatabaseOBProcessorMemoryImages[1].RemoveAt(nIndex);
						delete pDatabaseOBProcessorMemoryImage[1];
					}
					for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, pszTable, STRING(IDS_DATABASE_TABLE_PIMG_MNAME))), szTables); nTable < nTables; nTable++)
					{
						if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) && GetTableUpdateContents(pView, pTable[1]->GetName(), nControlID, EMPTYSTRING, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
					UpdateTables(pView, DATABASE_COMPONENT_OBPROCESSOR | DATABASE_SUBCOMPONENT_OBPROCESSORMEMORYIMAGE);
					return TRUE;
				}
			}
			return FALSE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_CAL_NAME), STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTMNumCalTable[0] = pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find((szTable = pCell->GetText())))) && Delete(pDatabaseTMNumCalTable[0]))
				{
					for (UpdateTable(pView, pDatabaseTMNumCalTable[0], TRUE); DeleteTableFieldData(pView, pszTable, pDatabaseTMNumCalTable[0]->GetName()) >= 0; )
					{
						if ((pDatabaseTMNumCalTable[1] = pView->m_pDatabaseTMNumCalTables[1].GetAt((nIndex = pView->m_pDatabaseTMNumCalTables[1].Find(szTable)))))
						{
							pView->m_pDatabaseTMNumCalTables[1].RemoveAt(nIndex);
							delete pDatabaseTMNumCalTable[1];
						}
						for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, pszTable, STRING(IDS_DATABASE_TABLE_CAL_NAME))), szTables); nTable < nTables; nTable++)
						{
							if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) && GetTableUpdateContents(pView, pTable[1]->GetName(), nControlID, EMPTYSTRING, szItem, szItems))
							{
								pView->UpdateTableContents(pTable[1], szItems);
								continue;
							}
						}
						UpdateTables(pView, DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMNUMCALTABLE);
						return TRUE;
					}
				}
			}
			return FALSE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_TXF_NAME), STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTMTxtCalTable[0] = pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find((szTable = pCell->GetText())))) && Delete(pDatabaseTMTxtCalTable[0]))
				{
					for (UpdateTable(pView, pDatabaseTMTxtCalTable[0], TRUE); DeleteTableFieldData(pView, pszTable, pDatabaseTMTxtCalTable[0]->GetName()) >= 0; )
					{
						if ((pDatabaseTMTxtCalTable[1] = pView->m_pDatabaseTMTxtCalTables[1].GetAt((nIndex = pView->m_pDatabaseTMTxtCalTables[1].Find(szTable)))))
						{
							pView->m_pDatabaseTMTxtCalTables[1].RemoveAt(nIndex);
							delete pDatabaseTMTxtCalTable[1];
						}
						for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, pszTable, STRING(IDS_DATABASE_TABLE_TXF_NAME))), szTables); nTable < nTables; nTable++)
						{
							if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) && GetTableUpdateContents(pView, pTable[1]->GetName(), nControlID, EMPTYSTRING, szItem, szItems))
							{
								pView->UpdateTableContents(pTable[1], szItems);
								continue;
							}
						}
						UpdateTables(pView, DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMTXTCALTABLE);
						return TRUE;
					}
				}
			}
			return FALSE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_OCF_NAME), STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTMNumOolTable[0] = pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find((szTable = pCell->GetText())))) && Delete(pDatabaseTMNumOolTable[0]) && DeleteTableFieldData(pView, pszTable, pDatabaseTMNumOolTable[0]->GetName()) >= 0)
				{
					if ((pDatabaseTMNumOolTable[1] = pView->m_pDatabaseTMNumOolTables[1].GetAt((nIndex = pView->m_pDatabaseTMNumOolTables[1].Find(szTable)))))
					{
						pView->m_pDatabaseTMNumOolTables[1].RemoveAt(nIndex);
						delete pDatabaseTMNumOolTable[1];
					}
					for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, pszTable, STRING(IDS_DATABASE_TABLE_OCF_NAME))), szTables); nTable < nTables; nTable++)
					{
						if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) && GetTableUpdateContents(pView, pTable[1]->GetName(), nControlID, EMPTYSTRING, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
					UpdateTables(pView, DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMNUMOOLTABLE);
					return TRUE;
				}
			}
			return FALSE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_FXF_NAME), STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTMTxtOolTable[0] = pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find((szTable = pCell->GetText())))) && Delete(pDatabaseTMTxtOolTable[0]) && DeleteTableFieldData(pView, pszTable, pDatabaseTMTxtOolTable[0]->GetName()) >= 0)
				{
					if ((pDatabaseTMTxtOolTable[1] = pView->m_pDatabaseTMTxtOolTables[1].GetAt((nIndex = pView->m_pDatabaseTMTxtOolTables[1].Find(szTable)))))
					{
						pView->m_pDatabaseTMTxtOolTables[1].RemoveAt(nIndex);
						delete pDatabaseTMTxtOolTable[1];
					}
					for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, pszTable, STRING(IDS_DATABASE_TABLE_FXF_NAME))), szTables); nTable < nTables; nTable++)
					{
						if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) && GetTableUpdateContents(pView, pTable[1]->GetName(), nControlID, EMPTYSTRING, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
					UpdateTables(pView, DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMTXTOOLTABLE);
					return TRUE;
				}
			}
			return FALSE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_CAL_NAME), STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCNumCalTable[0] = pView->m_pDatabaseTCNumCalTables[0].GetAt(pView->m_pDatabaseTCNumCalTables[0].Find((szTable = pCell->GetText())))) && Delete(pDatabaseTCNumCalTable[0]))
				{
					for (UpdateTable(pView, pDatabaseTCNumCalTable[0], TRUE); DeleteTableFieldData(pView, pszTable, pDatabaseTCNumCalTable[0]->GetName()) >= 0; )
					{
						if ((pDatabaseTCNumCalTable[1] = pView->m_pDatabaseTCNumCalTables[1].GetAt((nIndex = pView->m_pDatabaseTCNumCalTables[1].Find(szTable)))))
						{
							pView->m_pDatabaseTCNumCalTables[1].RemoveAt(nIndex);
							delete pDatabaseTCNumCalTable[1];
						}
						for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, pszTable, STRING(IDS_DATABASE_TABLE_CAL_NAME))), szTables); nTable < nTables; nTable++)
						{
							if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) && GetTableUpdateContents(pView, pTable[1]->GetName(), nControlID, EMPTYSTRING, szItem, szItems))
							{
								pView->UpdateTableContents(pTable[1], szItems);
								continue;
							}
						}
						UpdateTables(pView, DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCNUMCALTABLE);
						return TRUE;
					}
				}
			}
			return FALSE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_TXF_NAME), STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCTxtCalTable[0] = pView->m_pDatabaseTCTxtCalTables[0].GetAt(pView->m_pDatabaseTCTxtCalTables[0].Find((szTable = pCell->GetText())))) && Delete(pDatabaseTCTxtCalTable[0]))
				{
					for (UpdateTable(pView, pDatabaseTCTxtCalTable[0], TRUE); DeleteTableFieldData(pView, pszTable, pDatabaseTCTxtCalTable[0]->GetName()) >= 0; )
					{
						if ((pDatabaseTCTxtCalTable[1] = pView->m_pDatabaseTCTxtCalTables[1].GetAt((nIndex = pView->m_pDatabaseTCTxtCalTables[1].Find(szTable)))))
						{
							pView->m_pDatabaseTCTxtCalTables[1].RemoveAt(nIndex);
							delete pDatabaseTCTxtCalTable[1];
						}
						for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, pszTable, STRING(IDS_DATABASE_TABLE_TXF_NAME))), szTables); nTable < nTables; nTable++)
						{
							if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) && GetTableUpdateContents(pView, pTable[1]->GetName(), nControlID, EMPTYSTRING, szItem, szItems))
							{
								pView->UpdateTableContents(pTable[1], szItems);
								continue;
							}
						}
						UpdateTables(pView, DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCTXTCALTABLE);
						return TRUE;
					}
				}
			}
			return FALSE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_OCF_NAME), STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCNumOolTable[0] = pView->m_pDatabaseTCNumOolTables[0].GetAt(pView->m_pDatabaseTCNumOolTables[0].Find((szTable = pCell->GetText())))) && Delete(pDatabaseTCNumOolTable[0]) && DeleteTableFieldData(pView, pszTable, pDatabaseTCNumOolTable[0]->GetName()) >= 0)
				{
					if ((pDatabaseTCNumOolTable[1] = pView->m_pDatabaseTCNumOolTables[1].GetAt((nIndex = pView->m_pDatabaseTCNumOolTables[1].Find(szTable)))))
					{
						pView->m_pDatabaseTCNumOolTables[1].RemoveAt(nIndex);
						delete pDatabaseTCNumOolTable[1];
					}
					for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, pszTable, STRING(IDS_DATABASE_TABLE_OCF_NAME))), szTables); nTable < nTables; nTable++)
					{
						if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) && GetTableUpdateContents(pView, pTable[1]->GetName(), nControlID, EMPTYSTRING, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
					UpdateTables(pView, DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCNUMOOLTABLE);
					return TRUE;
				}
			}
			return FALSE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_FXF_NAME), STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE))))
			{
				if ((pDatabaseTCTxtOolTable[0] = pView->m_pDatabaseTCTxtOolTables[0].GetAt(pView->m_pDatabaseTCTxtOolTables[0].Find((szTable = pCell->GetText())))) && Delete(pDatabaseTCTxtOolTable[0]) && DeleteTableFieldData(pView, pszTable, pDatabaseTCTxtOolTable[0]->GetName()) >= 0)
				{
					if ((pDatabaseTCTxtOolTable[1] = pView->m_pDatabaseTCTxtOolTables[1].GetAt((nIndex = pView->m_pDatabaseTCTxtOolTables[1].Find(szTable)))))
					{
						pView->m_pDatabaseTCTxtOolTables[1].RemoveAt(nIndex);
						delete pDatabaseTCTxtOolTable[1];
					}
					for (nTable = 0, nTables = EnumTableUpdates(pView, (nControlID = TranslateTableFieldToID(pView, pszTable, STRING(IDS_DATABASE_TABLE_FXF_NAME))), szTables); nTable < nTables; nTable++)
					{
						if ((pTable[1] = pView->FindTable(szTables.GetAt(nTable))) && GetTableUpdateContents(pView, pTable[1]->GetName(), nControlID, EMPTYSTRING, szItem, szItems))
						{
							pView->UpdateTableContents(pTable[1], szItems);
							continue;
						}
					}
					UpdateTables(pView, DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCTXTOOLTABLE);
					return TRUE;
				}
			}
		}
	}
	return FALSE;
}
INT CALTELDatabaseEngine::DeleteTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszValue)
{
	INT  nSet;
	INT  nSets;
	INT  nIndex;
	INT  nFunction;
	INT  nFunctions;
	CStringArray  szSets;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCSequence  *pDatabaseTCSequence;
	CDatabaseOBProcessor  *pDatabaseOBProcessor;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;
	CANDLayout  *pANDLayout;
	CGRDLayout  *pGRDLayout;
	CPODLayout  *pPODLayout;

	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET)
	{
		if ((pDatabaseTMPacket = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF))) ? pView->m_pDatabaseTMPackets[0].GetAt((nIndex = pView->m_pDatabaseTMPackets[0].Find(pszValue))) : (CDatabaseTMPacket *)NULL))
		{
			pView->m_pDatabaseTMPackets[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTMPacket, nIndex + 1, TRUE);
			delete pDatabaseTMPacket;
			return nIndex;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if ((pDatabaseTCFunction = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF))) ? pView->m_pDatabaseTCFunctions[0].GetAt((nIndex = pView->m_pDatabaseTCFunctions[0].Find(pszValue))) : (CDatabaseTCFunction *)NULL))
		{
			pView->m_pDatabaseTCFunctions[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTCFunction, nIndex + 1, TRUE);
			delete pDatabaseTCFunction;
			return nIndex;
		}
		if ((pDatabaseTCPacket = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP))) ? pView->m_pDatabaseTCPackets[0].GetAt((nIndex = pView->m_pDatabaseTCPackets[0].Find(pszValue))) : (CDatabaseTCPacket *)NULL))
		{
			pView->m_pDatabaseTCPackets[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTCPacket, TRUE);
			delete pDatabaseTCPacket;
			UpdateTables(pView);
			return nIndex;
		}
		if ((pDatabaseTCPreExeGroup = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP))) ? pView->m_pDatabaseTCPreExeGroups[0].GetAt((nIndex = pView->m_pDatabaseTCPreExeGroups[0].Find(pszValue))) : (CDatabaseTCPreExeGroup *)NULL))
		{
			pView->m_pDatabaseTCPreExeGroups[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTCPreExeGroup, TRUE);
			delete pDatabaseTCPreExeGroup;
			UpdateTables(pView);
			return nIndex;
		}
		if ((pDatabaseTCExeVerGroup = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP))) ? pView->m_pDatabaseTCExeVerGroups[0].GetAt((nIndex = pView->m_pDatabaseTCExeVerGroups[0].Find(pszValue))) : (CDatabaseTCExeVerGroup *)NULL))
		{
			pView->m_pDatabaseTCExeVerGroups[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTCExeVerGroup, TRUE);
			delete pDatabaseTCExeVerGroup;
			UpdateTables(pView);
			return nIndex;
		}
		if ((pDatabaseTCParameterSet = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS))) ? pView->m_pDatabaseTCParameterSets[0].GetAt((nIndex = pView->m_pDatabaseTCParameterSets[0].Find(pszValue))) : (CDatabaseTCParameterSet *)NULL))
		{
			for (nFunction = 0, nFunctions = (INT)pView->m_pDatabaseTCFunctions[0].GetSize(); nFunction < nFunctions; nFunction++)
			{
				if ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
				{
					for (nSet = 0, nSets = pDatabaseTCFunction->GetParameterSets(szSets); nSet < nSets; nSet++)
					{
						if (szSets.GetAt(nSet) == pDatabaseTCParameterSet->GetName())
						{
							szSets.RemoveAt(nSet);
							nSets--;
							nSet--;
						}
					}
					pDatabaseTCFunction->SetParameterSets(szSets);
				}
			}
			pView->m_pDatabaseTCParameterSets[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTCParameterSet, TRUE);
			delete pDatabaseTCParameterSet;
			UpdateTables(pView);
			return nIndex;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if ((pDatabaseTCSequence = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF))) ? pView->m_pDatabaseTCSequences[0].GetAt((nIndex = pView->m_pDatabaseTCSequences[0].Find(pszValue))) : (CDatabaseTCSequence *)NULL))
		{
			pView->m_pDatabaseTCSequences[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTCSequence, nIndex + 1, TRUE);
			delete pDatabaseTCSequence;
			return nIndex;
		}
		if ((pDatabaseTCFunctionBlock = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF))) ? pView->m_pDatabaseTCFunctionBlocks[0].GetAt((nIndex = pView->m_pDatabaseTCFunctionBlocks[0].Find(pszValue))) : (CDatabaseTCFunctionBlock *)NULL))
		{
			pView->m_pDatabaseTCFunctionBlocks[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTCFunctionBlock, TRUE);
			delete pDatabaseTCFunctionBlock;
			UpdateTables(pView);
			return nIndex;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((pDatabaseOBProcessor = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN))) ? pView->m_pDatabaseOBProcessors[0].GetAt((nIndex = pView->m_pDatabaseOBProcessors[0].Find(pszValue))) : (CDatabaseOBProcessor *)NULL))
		{
			pView->m_pDatabaseOBProcessors[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseOBProcessor, nIndex + 1, TRUE);
			delete pDatabaseOBProcessor;
			return nIndex;
		}
		if ((pDatabaseOBProcessorMemoryImage = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG))) ? pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt((nIndex = pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pszValue))) : (CDatabaseOBProcessorMemoryImage *)NULL))
		{
			pView->m_pDatabaseOBProcessorMemoryImages[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseOBProcessorMemoryImage, TRUE);
			delete pDatabaseOBProcessorMemoryImage;
			UpdateTables(pView);
			return nIndex;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if ((pDatabaseTMParameter = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF))) ? pView->m_pDatabaseTMParameters[0].GetAt((nIndex = pView->m_pDatabaseTMParameters[0].Find(pszValue))) : (CDatabaseTMParameter *)NULL))
		{
			pView->m_pDatabaseTMParameters[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTMParameter, nIndex + 1, TRUE);
			delete pDatabaseTMParameter;
			return nIndex;
		}
		if ((pDatabaseTMNumCalTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? pView->m_pDatabaseTMNumCalTables[0].GetAt((nIndex = pView->m_pDatabaseTMNumCalTables[0].Find(pszValue))) : (CDatabaseTMNumCalTable *)NULL))
		{
			pView->m_pDatabaseTMNumCalTables[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTMNumCalTable, TRUE);
			delete pDatabaseTMNumCalTable;
			UpdateTables(pView);
			return nIndex;
		}
		if ((pDatabaseTMTxtCalTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? pView->m_pDatabaseTMTxtCalTables[0].GetAt((nIndex = pView->m_pDatabaseTMTxtCalTables[0].Find(pszValue))) : (CDatabaseTMTxtCalTable *)NULL))
		{
			pView->m_pDatabaseTMTxtCalTables[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTMTxtCalTable, TRUE);
			delete pDatabaseTMTxtCalTable;
			UpdateTables(pView);
			return nIndex;
		}
		if ((pDatabaseTMNumOolTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? pView->m_pDatabaseTMNumOolTables[0].GetAt((nIndex = pView->m_pDatabaseTMNumOolTables[0].Find(pszValue))) : (CDatabaseTMNumOolTable *)NULL))
		{
			pView->m_pDatabaseTMNumOolTables[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTMNumOolTable, TRUE);
			delete pDatabaseTMNumOolTable;
			UpdateTables(pView);
			return nIndex;
		}
		if ((pDatabaseTMTxtOolTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->m_pDatabaseTMTxtOolTables[0].GetAt((nIndex = pView->m_pDatabaseTMTxtOolTables[0].Find(pszValue))) : (CDatabaseTMTxtOolTable *)NULL))
		{
			pView->m_pDatabaseTMTxtOolTables[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTMTxtOolTable, TRUE);
			delete pDatabaseTMTxtOolTable;
			UpdateTables(pView);
			return nIndex;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if ((pDatabaseTCParameter = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC))) ? pView->m_pDatabaseTCParameters[0].GetAt((nIndex = pView->m_pDatabaseTCParameters[0].Find(pszValue))) : (CDatabaseTCParameter *)NULL))
		{
			pView->m_pDatabaseTCParameters[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTCParameter, nIndex + 1, TRUE);
			delete pDatabaseTCParameter;
			return nIndex;
		}
		if ((pDatabaseTCNumCalTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? pView->m_pDatabaseTCNumCalTables[0].GetAt((nIndex = pView->m_pDatabaseTCNumCalTables[0].Find(pszValue))) : (CDatabaseTCNumCalTable *)NULL))
		{
			pView->m_pDatabaseTCNumCalTables[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTCNumCalTable, TRUE);
			delete pDatabaseTCNumCalTable;
			UpdateTables(pView);
			return nIndex;
		}
		if ((pDatabaseTCTxtCalTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? pView->m_pDatabaseTCTxtCalTables[0].GetAt((nIndex = pView->m_pDatabaseTCTxtCalTables[0].Find(pszValue))) : (CDatabaseTCTxtCalTable *)NULL))
		{
			pView->m_pDatabaseTCTxtCalTables[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTCTxtCalTable, TRUE);
			delete pDatabaseTCTxtCalTable;
			UpdateTables(pView);
			return nIndex;
		}
		if ((pDatabaseTCNumOolTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? pView->m_pDatabaseTCNumOolTables[0].GetAt((nIndex = pView->m_pDatabaseTCNumOolTables[0].Find(pszValue))) : (CDatabaseTCNumOolTable *)NULL))
		{
			pView->m_pDatabaseTCNumOolTables[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTCNumOolTable, TRUE);
			delete pDatabaseTCNumOolTable;
			UpdateTables(pView);
			return nIndex;
		}
		if ((pDatabaseTCTxtOolTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->m_pDatabaseTCTxtOolTables[0].GetAt((nIndex = pView->m_pDatabaseTCTxtOolTables[0].Find(pszValue))) : (CDatabaseTCTxtOolTable *)NULL))
		{
			pView->m_pDatabaseTCTxtOolTables[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pDatabaseTCTxtOolTable, TRUE);
			delete pDatabaseTCTxtOolTable;
			UpdateTables(pView);
			return nIndex;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if ((pANDLayout = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF))) ? pView->m_pANDLayouts[0].GetAt((nIndex = pView->m_pANDLayouts[0].Find(pszValue))) : (CANDLayout *)NULL))
		{
			pView->m_pANDLayouts[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pANDLayout, nIndex + 1, TRUE);
			delete pANDLayout;
			return nIndex;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if ((pGRDLayout = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF))) ? pView->m_pGRDLayouts[0].GetAt((nIndex = pView->m_pGRDLayouts[0].Find(pszValue))) : (CGRDLayout *)NULL))
		{
			pView->m_pGRDLayouts[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pGRDLayout, nIndex + 1, TRUE);
			delete pGRDLayout;
			return nIndex;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if ((pPODLayout = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF))) ? pView->m_pPODLayouts[0].GetAt((nIndex = pView->m_pPODLayouts[0].Find(pszValue))) : (CPODLayout *)NULL))
		{
			pView->m_pPODLayouts[0].RemoveAt(nIndex);
			pView->UpdateTableForms(pPODLayout, nIndex + 1, TRUE);
			delete pPODLayout;
			return nIndex;
		}
	}
	return -1;
}
BOOL CALTELDatabaseEngine::DeleteTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, INT nRow, INT nCol)
{
	INT  nIndex;
	INT  nCount;
	BOOL  bResize;
	BOOL  bVisible;
	CUIntArray  nIDs;
	CUIntArray  nFormats;
	CStringArray  szRow[3];
	CDatabaseTCSequence  *pDatabaseTCSequence;
	CDatabaseOBProcessor  *pDatabaseOBProcessor;
	CDatabaseTCSequenceEntry  *pDatabaseTCSequenceEntry;
	CDatabaseOBProcessorMemoryArea  *pDatabaseOBProcessorMemoryArea;

	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if ((pDatabaseTCSequence = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)) && nCol < 0) ? pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pView->GetName())) : (CDatabaseTCSequence *)NULL))
		{
			if ((pDatabaseTCSequenceEntry = pDatabaseTCSequence->GetAt(nRow - 1)))
			{
				pDatabaseTCSequence->RemoveAt(nRow - 1);
				delete pDatabaseTCSequenceEntry;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((pDatabaseOBProcessor = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)) && nCol < 0) ? pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pView->GetName())) : (CDatabaseOBProcessor *)NULL))
		{
			if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nRow - 1)))
			{
				pDatabaseOBProcessor->RemoveAt(nRow - 1);
				delete pDatabaseOBProcessorMemoryArea;
			}
		}
	}
	if (GetTableContents(pView, pszTable, EMPTYSTRING, -1, szRow[0], szRow[1], szRow[2], nFormats, nIDs, bResize, bVisible))
	{
		for (nIndex = 0, nCount = (INT)nIDs.GetSize(); nIndex < nCount; nIndex++)
		{
			if (nIDs.GetAt(nIndex) != (UINT)-1) break;
			continue;
		}
		UpdateTableFieldData(pView, (nIndex < nCount) ? nIDs.GetAt(nIndex) : (UINT)-1, EMPTYSTRING);
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::GetTableFieldFlag(CONST CDatabaseTableView *pView, LPCTSTR pszTable, INT nRow, INT nColumn, CString &szFlag) CONST
{
	INT  nItem;
	INT  nItems;
	CTableViewCell  *pCell[2];
	CTableViewObject  *pTable[2];
	TABLEVIEWCELLVALUE  sValue[2];

	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_PACKID)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PMF_TYPE), nColumn)) && pCell[0]->y == nRow)
			{
				szFlag = NotApplicable();
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_DESCR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME)))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_HFLG)), sValue[0]) && sValue[0].Value.nValue == TRUE) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_HFLG)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_APID)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_TMTY)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_LENG)))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)), sValue[0]) && sValue[0].Value.nValue == TMPACKET_LENGTH_FIXED) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PMF_VCID)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_NAME))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_OFFBY))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_OFFBI))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_NBOCC))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_LGOCC))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_PLF_NBOCC), sValue[0]) && sValue[0].Value.nValue > 1) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_NAME))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_PRESENT))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_ID_PRESENT))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_3DISC_PRESENT))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TIME_PRESENT))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_OFFSET))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_OFFSET))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_OFFSET))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_OFFSET))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_LENGTH))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_LENGTH))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_LENGTH))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_LENGTH))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_STID))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_APID))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_TMID))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_PERIOD))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_TIMEOUT))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_VALID))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_CNAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_DESCR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_CTYPE)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_TCPID)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CCF_HAZ)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_PACKID)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_TCP_TYPE), nColumn)) && pCell[0]->y == nRow)
			{
				szFlag = NotApplicable();
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_DESCR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_HFLG)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_APID)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_LENG)))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)), sValue[0]) && sValue[0].Value.nValue == TCPACKET_LENGTH_FIXED) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_PNAME))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CDF_ELTYPE), sValue[0]) && sValue[0].Value.nValue == TCFUNCTIONELEMENT_TYPE_PARAMETER) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_ELTYPE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_ELLEN))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_BITOFF))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_VTYPE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_RADIX))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CDF_ELTYPE), sValue[0]) && pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CDF_VTYPE), sValue[1]) && (sValue[0].Value.nValue != TCFUNCTIONELEMENT_TYPE_PARAMETER || sValue[1].Value.nValue != TCPARAMETER_CALIBRATION_ENABLED)) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CDF_VALUE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CDF_ELTYPE), sValue[0]) && sValue[0].Value.nValue != TCFUNCTIONELEMENT_TYPE_PARAMETER) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_PNAME))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE), sValue[0]) && sValue[0].Value.nValue == TCPACKETPARAMETER_TYPE_VARIABLE) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_ELLEN))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_BITOFF))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_VTYPE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_RADIX))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_CODING))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE), sValue[0]) && sValue[0].Value.nValue == TCPACKETPARAMETER_TYPE_VARIABLE) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_VALUE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE), sValue[0]) && sValue[0].Value.nValue != TCPACKETPARAMETER_TYPE_VARIABLE) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PVP_ID)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PVP_DESCR)))) && pCell[0]->y == nRow)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CVP_ID)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CVP_NAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CVP_DESCR)))) && pCell[0]->y == nRow)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CVP_NMBST)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PEV_PNAME))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PEV_PVALUE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PEV_INTER))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_PNAME))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_EVTYPE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_PVALUE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_INTER))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_SWND))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_STAGE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_EPCKID))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCPS_NAME))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPS_NAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPS_DESCR)))) && pCell[0]->y == nRow)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CPSP_PNAME))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CPSP_BITOFF))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CPSP_VTYPE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CPSP_RADIX))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CPSP_VTYPE), sValue[0]) && sValue[0].Value.nValue != TCPARAMETER_CALIBRATION_ENABLED) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CPSP_PVALUE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CSF_NAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_IDENT))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_TYPE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_TCTYPE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_ENTRY))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = NotApplicable();
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_1STEP))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_RELTIME))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_EXETIME))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CSS_TCTYPE), sValue[0]) && sValue[0].Value.nValue == TCSEQUENCEENTRY_EXETYPE_TIMETAG) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_BLOCK))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSS_NPARS))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = NotApplicable();
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_FPNAME))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_FPNUM))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = NotApplicable();
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_LENGTH))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_VTYPE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_CATEG))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CSP_VTYPE), sValue[0]) && sValue[0].Value.nValue == TCPARAMETER_VTYPE_CALIBRATED) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_CODING))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_RADIX))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_CSP_VTYPE), sValue[0]) && sValue[0].Value.nValue != TCPARAMETER_VTYPE_CALIBRATED) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_CALREF))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_TXFREF))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_OCFREF))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_FXFREF))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CSP_DEFVAL))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_PNAME))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_ENTRY))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = NotApplicable();
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_BITOFF))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_VALTYPE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_VALRADIX))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (pTable[0]->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_SDF_VALTYPE), sValue[0]) && sValue[0].Value.nValue != TCPARAMETER_VTYPE_CALIBRATED  &&  sValue[0].Value.nValue != TCPARAMETER_VTYPE_FORMAL) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_VALUE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_PSET))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (!pTable[0]->GetCellText(nRow, STRING(IDS_DATABASE_TABLE_SDF_PSINST)).IsEmpty()) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_SDF_PSINST))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (!pTable[0]->GetCellText(nRow, STRING(IDS_DATABASE_TABLE_SDF_PSET)).IsEmpty()) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_BCF_CNAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_BCF_INTER)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_BCCF_CONTENT))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_BCCF_INTER))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL) != (CTableViewObject *)NULL)
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_DUMPTC)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_TMPKT)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_STARTADDR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_ENDADDR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_INTERVAL)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH)))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GEN_PATCHTC)), sValue[0]) && sValue[0].Value.nValue >= 0) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PIMG_MNAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MAD_NAME))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MAD_TYPE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MAD_PATCHABLE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MAD_DUMPABLE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MAD_UPDATE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MAD_INHIBIT))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MEM_PAGE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MEM_ADDRESS))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MEM_BITOFF))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_MEM_WIDTH))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMG_VERSION))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMG_PAGE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMG_ADDRESS))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMGP_VERSION))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMGP_PAGE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMGP_ADDRESS))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			szFlag = Optional();
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CAT_ID))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CAT_VERSION))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL) != (CTableViewObject *)NULL)
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_NAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_NATURE)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_CATEG)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_TYPE)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_CODING)))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_NATURE)), sValue[0]) && (sValue[0].Value.nValue == TMPARAMETER_NATURE_RAW || sValue[0].Value.nValue == TMPARAMETER_NATURE_DERIVED)) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_WIDTH)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_PARVAL)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_INTER)))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_CATEG)), sValue[0]) && sValue[0].Value.nValue == TMPARAMETER_CALIBRATION_NUMERICAL) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PCF_CALTABLES), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE))) && pCell[0]->y == nRow)
			{
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL))) && pTable[1]->IsVisible())
				{
					szFlag = Optional(pCell[0]);
					return TRUE;
				}
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF))) && pTable[1]->IsVisible())
				{
					szFlag = Optional(pCell[0]);
					return TRUE;
				}
				szFlag = NotApplicable();
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE))) && pCell[0]->y == nRow)
			{
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF))) && pTable[1]->IsVisible())
				{
					szFlag = Optional(pCell[0]);
					return TRUE;
				}
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF))) && pTable[1]->IsVisible())
				{
					szFlag = Optional(pCell[0]);
					return TRUE;
				}
				szFlag = NotApplicable();
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_DRVEXP)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_TRGTYP)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_EXPTRG)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_OBSPAR)))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCF_NATURE)), sValue[0]) && sValue[0].Value.nValue == TMPARAMETER_NATURE_RAW) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_DESCR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_DESCR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_CODING)))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)), sValue[0]) && (sValue[0].Value.nValue & TMOOLTABLE_CHECK_RAW)) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_RADIX)))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)), sValue[0]) && (sValue[0].Value.nValue & TMOOLTABLE_CHECK_RAW)) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_INTER)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_RADIX)))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_INTER)), sValue[0]) && (sValue[0].Value.nValue & TMOOLTABLE_CHECK_RAW)) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CALP_XVAL)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CALP_YVAL)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXFP_FROM)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXFP_TO)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXFP_TEXT)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCFP_TYPE)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCFP_LVALUE)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCFP_HVALUE)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXFP_TYPE)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXFP_FROM)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXFP_TO)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCAL_NAME)))
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCAL_VALID)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PTXF_NAME)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PTXF_VALID)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_POCF_NAME)))
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_POCF_VALID)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PFXF_NAME)))
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PFXF_VALID)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL) != (CTableViewObject *)NULL)
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_PNAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_DESCR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_CODING)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_LENGTH)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_CATEG)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_CPC_CALREF), STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_VALUE))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_CATEG)), sValue[0]) && sValue[0].Value.nValue == TCPARAMETER_CALIBRATION_NUMERICAL) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_CPC_TXFREF), STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_VALUE))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPC_CATEG)), sValue[0]) && sValue[0].Value.nValue == TCPARAMETER_CALIBRATION_STATUS) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_CPC_OCFREF), STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_VALUE))) && pCell[0]->y == nRow)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_CPC_FXFREF), STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_VALUE))) && pCell[0]->y == nRow)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_DESCR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_DESCR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_CODING)))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)), sValue[0]) && (sValue[0].Value.nValue & TCOOLTABLE_CHECK_RAW)) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_RADIX)))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)), sValue[0]) && (sValue[0].Value.nValue & TCOOLTABLE_CHECK_RAW)) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NAME)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_INTER)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_RADIX)))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXF_INTER)), sValue[0]) && (sValue[0].Value.nValue & TCOOLTABLE_CHECK_RAW)) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CALP_XVAL)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CALP_YVAL)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXFP_FROM)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXFP_TO)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TXFP_TEXT)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCFP_TYPE)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCFP_LVALUE)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_OCFP_HVALUE)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXFP_TYPE)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXFP_FROM)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && pCell[0]->GetControlID() == TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_FXFP_TO)))
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL) != (CTableViewObject *)NULL)
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_DPF_NUMBER)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_DPF_DESCR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_PNAME))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_COMMENT))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_ROW))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_COL))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_COLOR))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_COMM))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (!pTable[0]->GetCellText(nRow, STRING(IDS_DATABASE_TABLE_DPFP_PNAME)).IsEmpty()) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_VALMODE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = (!pTable[0]->GetCellText(nRow, STRING(IDS_DATABASE_TABLE_DPFP_PNAME)).IsEmpty()) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_VALCHARS))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_VALALIGN))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			szFlag = Required();
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL) != (CTableViewObject *)NULL)
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_NUMBER)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_DESCR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_TYPE)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_MODE)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_DAYS)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_HOURS)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_MINUTES)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_INTERVAL)))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_MODE)), sValue[0]) && sValue[0].Value.nValue == GRDLAYOUT_MODE_SCROLL) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_UPDATE)))) && pCell[0]->y == nRow)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_WIDTH)))) && pCell[0]->y == nRow)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_HEIGHT)))) && pCell[0]->y == nRow)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_XGRIDS)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_YGRIDS)))) && pCell[0]->y == nRow)
			{
				szFlag = (pTable[0]->GetCellValue(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_TYPE)), sValue[0]) && sValue[0].Value.nValue != GRDLAYOUT_TYPE_STRIPCHART) ? Required(pCell[0]) : Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_XTICKS)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_YTICKS)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH)))) && pCell[0]->y == nRow)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH)))) && pCell[0]->y == nRow)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_GRIDSCOLOR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_TICKSCOLOR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_BKGNDCOLOR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_GPF_LABELCOLOR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS), nColumn)) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_PNAME))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_COMMENT))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_POSITION))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_COMM))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_VALMODE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_VALCHARS))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_VALMINIMUM))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_VALMAXIMUM))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_COLOR))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_LINESTYLE))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_LINESYMBOL))) && pCell[0]->x == nColumn  &&  nRow > 0)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			szFlag = Required();
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PPF_NUMBER)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PPF_DESCR)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)))) && pCell[0]->y == nRow)
			{
				szFlag = Required(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)))) && pCell[0]->y == nRow)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR)))) && pCell[0]->y == nRow)
			{
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK))))
				{
					for (nItem = 0, nItems = pTable[1]->GetRows(); nItem < nItems; nItem = nItem + 1)
					{
						if ((pCell[1] = pTable[1]->FindCell(nItem, pTable[1]->GetColumns() - 1)))
						{
							if (!pCell[1]->GetText().IsEmpty()) break;
							continue;
						}
					}
					szFlag = (nItem < nItems) ? Required(pCell[0]) : NotApplicable();
					return TRUE;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)))) && pCell[0]->y == nRow)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR)))) && pCell[0]->y == nRow)
			{
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS))))
				{
					for (nItem = 0, nItems = pTable[1]->GetRows(); nItem < nItems; nItem = nItem + 1)
					{
						if ((pCell[1] = pTable[1]->FindCell(nItem, pTable[1]->GetColumns() - 1)))
						{
							if (!pCell[1]->GetText().IsEmpty()) break;
							continue;
						}
					}
					szFlag = (nItem < nItems) ? Required(pCell[0]) : NotApplicable();
					return TRUE;
				}
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)))) && pCell[0]->y == nRow)
			{
				szFlag = Optional(pCell[0]);
				return TRUE;
			}
			if ((pCell[0] = pTable[0]->FindCell(TranslateTableFieldToID(pView, pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR)))) && pCell[0]->y == nRow)
			{
				if ((pTable[1] = pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS))))
				{
					for (nItem = 0, nItems = pTable[1]->GetRows(); nItem < nItems; nItem = nItem + 1)
					{
						if ((pCell[1] = pTable[1]->FindCell(nItem, pTable[1]->GetColumns() - 1)))
						{
							if (!pCell[1]->GetText().IsEmpty()) break;
							continue;
						}
					}
					szFlag = (nItem < nItems) ? Required(pCell[0]) : NotApplicable();
					return TRUE;
				}
			}
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			szFlag = Required();
			return TRUE;
		}
		if ((pTable[0] = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			szFlag = Optional();
			return TRUE;
		}
	}
	for (szFlag = NotApplicable(); (pTable[0] = pView->FindTable(pszTable)); )
	{
		if ((pCell[0] = pTable[0]->FindCell(nRow, nColumn)) && (pCell[0]->GetFormat() & TAS_TYPE_TEXT) != TAS_TYPE_TEXT)
		{
			szFlag = Optional(pCell[0]);
			return TRUE;
		}
		break;
	}
	return FALSE;
}

INT CALTELDatabaseEngine::EnumTableDropTargets(CONST CDatabaseTableView *pView, ULONGLONG nComponent, CStringArray &szTables, CStringArray &szFields) CONST
{
	for (szTables.RemoveAll(), szFields.RemoveAll(); DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET; )
	{
		if (nComponent == DATABASE_COMPONENT_TMPACKET)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_PMF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PMF_PACKID));
			break;
		}
		if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_PMF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PMF_EVENTID));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PLF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PLF_NAME));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PLF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PLF_VALID));
			szTables.Add(STRING(IDS_DATABASE_TABLE_STR));
			szFields.Add(STRING(IDS_DATABASE_TABLE_STR_VALID));
		}
		break;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (nComponent == DATABASE_COMPONENT_TCFUNCTION)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CCF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_CCF_CNAME));
		}
		if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CDF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_CDF_PNAME));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PCDF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PCDF_PNAME));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CPSP));
			szFields.Add(STRING(IDS_DATABASE_TABLE_CPSP_PNAME));
		}
		if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CEV));
			szFields.Add(STRING(IDS_DATABASE_TABLE_CEV_PNAME));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PEV));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PEV_PNAME));
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (nComponent == DATABASE_COMPONENT_TCSEQUENCE)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CSF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_CSF_NAME));
			szTables.Add(STRING(IDS_DATABASE_TABLE_CSS));
			szFields.Add(STRING(IDS_DATABASE_TABLE_CSS_IDENT));
		}
		if (nComponent == DATABASE_COMPONENT_TCFUNCTION)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CSS));
			szTables.Add(STRING(IDS_DATABASE_TABLE_BCF));
			szTables.Add(STRING(IDS_DATABASE_TABLE_BCCF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_CSS_IDENT));
			szFields.Add(STRING(IDS_DATABASE_TABLE_BCF_CNAME));
			szFields.Add(STRING(IDS_DATABASE_TABLE_BCCF_CONTENT));
		}
		if (nComponent == DATABASE_COMPONENT_TCPROCEDURE)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CSS));
			szFields.Add(STRING(IDS_DATABASE_TABLE_CSS_IDENT));
		}
		if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CSP));
			szTables.Add(STRING(IDS_DATABASE_TABLE_SDF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_CSP_FPNAME));
			szFields.Add(STRING(IDS_DATABASE_TABLE_SDF_PNAME));
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (nComponent == DATABASE_COMPONENT_TMPACKET)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_GEN));
			szFields.Add(STRING(IDS_DATABASE_TABLE_GEN_TMPKT));
			szTables.Add(STRING(IDS_DATABASE_TABLE_MAD));
			szFields.Add(STRING(IDS_DATABASE_TABLE_MAD_TMPKT));
		}
		if (nComponent == DATABASE_COMPONENT_TCFUNCTION)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_GEN));
			szFields.Add(STRING(IDS_DATABASE_TABLE_GEN_PATCHTC));
			szTables.Add(STRING(IDS_DATABASE_TABLE_GEN));
			szFields.Add(STRING(IDS_DATABASE_TABLE_GEN_DUMPTC));
			szTables.Add(STRING(IDS_DATABASE_TABLE_MAD));
			szFields.Add(STRING(IDS_DATABASE_TABLE_MAD_PATCHTC));
			szTables.Add(STRING(IDS_DATABASE_TABLE_MAD));
			szFields.Add(STRING(IDS_DATABASE_TABLE_MAD_DUMPTC));
		}
		if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_MEM));
			szFields.Add(STRING(IDS_DATABASE_TABLE_MEM_TMNAME));
		}
		if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_MEM));
			szFields.Add(STRING(IDS_DATABASE_TABLE_MEM_TCNAME));
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (nComponent == DATABASE_COMPONENT_TMPACKET)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_PCF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PCF_EXPTRG));
		}
		if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_PCF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PCF_NAME));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PCF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PCF_VALID));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PCF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PCF_EXPTRG));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PCF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PCF_ALTM));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PCAL));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PCAL_VALID));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PTXF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PTXF_VALID));
			szTables.Add(STRING(IDS_DATABASE_TABLE_POCF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_POCF_VALID));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PFXF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PFXF_VALID));
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_CPC));
			szFields.Add(STRING(IDS_DATABASE_TABLE_CPC_PNAME));
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if (nComponent == DATABASE_COMPONENT_AND)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_DPF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_DPF_NUMBER));
		}
		if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_DPFP));
			szFields.Add(STRING(IDS_DATABASE_TABLE_DPFP_PNAME));
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if (nComponent == DATABASE_COMPONENT_GRD)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_GPF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_GPF_NUMBER));
		}
		if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_GPFP));
			szFields.Add(STRING(IDS_DATABASE_TABLE_GPFP_PNAME));
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if (nComponent == DATABASE_COMPONENT_POD)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_PPF));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PPF_NUMBER));
		}
		if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
		{
			szTables.Add(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK));
			szTables.Add(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS));
			szFields.Add(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS));
		}
	}
	return((INT)szTables.GetSize());
}

BOOL CALTELDatabaseEngine::FindTableDropTargetCell(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszField, ULONGLONG nComponent, LPCTSTR pszItem, CString &szItem, INT &nRow, INT &nCol) CONST
{
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	TABLEVIEWCELLVALUE  sValue;

	for (szItem.Empty(), nRow = -1, nCol = -1; DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET; )
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TMPACKET)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_PACKID)))
					{
						if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_PMF_TITLEITEM_VALUE))))
						{
							nCol = pCell->x;
							nRow = pCell->y;
							szItem = pszItem;
							break;
						}
					}
				}
				if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PMF_EVENTID)))
					{
						if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_PMF_TITLEITEM_VALUE))))
						{
							if ((pDatabaseTMParameter = GetTMParameters()->GetAt(GetTMParameters()->Find(pszItem))))
							{
								szItem.Format(STRING(IDS_DATABASE_TABLE_PMF_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
								nCol = pCell->x;
								nRow = pCell->y;
								break;
							}
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PLF_NAME)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_PLF_NAME))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
							break;
						}
					}
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PLF_VALID)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_PLF_VALID))))
						{
							if ((pDatabaseTMParameter = GetTMParameters()->GetAt(GetTMParameters()->Find(pszItem))) && pDatabaseTMParameter->GetWidth() == 1)
							{
								nCol = pCell->x;
								nRow = pCell->y - 1;
								szItem = pszItem;
								break;
							}
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_STR_VALID)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_STR_VALID))))
						{
							if ((pDatabaseTMParameter = GetTMParameters()->GetAt(GetTMParameters()->Find(pszItem))) && pDatabaseTMParameter->GetWidth() == 1)
							{
								nCol = pCell->x;
								nRow = pCell->y - 1;
								szItem = pszItem;
								break;
							}
						}
					}
				}
			}
		}
		break;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TCFUNCTION)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CCF_CNAME)))
					{
						if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_CCF_TITLEITEM_VALUE))))
						{
							nCol = pCell->x;
							nRow = pCell->y;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CDF_PNAME)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_CDF_PNAME))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCDF_PNAME)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_PCDF_PNAME))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPSP_PNAME)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_CPSP_PNAME))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CEV_PNAME)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_CEV_PNAME))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PEV_PNAME)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_PEV_PNAME))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TCSEQUENCE)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CSF_NAME)))
					{
						if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_CSF_TITLEITEM_VALUE))))
						{
							nCol = pCell->x;
							nRow = pCell->y;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TCFUNCTION || nComponent == DATABASE_COMPONENT_TCSEQUENCE || nComponent == DATABASE_COMPONENT_TCPROCEDURE)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CSS_IDENT)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_CSS_IDENT))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CSP_FPNAME)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_CSP_FPNAME))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_SDF_PNAME)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_SDF_PNAME))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TCFUNCTION)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_BCF_CNAME)))
					{
						if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_BCF_TITLEITEM_VALUE))))
						{
							nCol = pCell->x;
							nRow = pCell->y;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TCFUNCTION)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_BCCF_CONTENT)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_BCCF_CONTENT))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TMPACKET)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GEN_TMPKT)))
					{
						if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_GEN_TITLEITEM_VALUE))))
						{
							nCol = pCell->x;
							nRow = pCell->y;
							szItem = pszItem;
						}
					}
				}
				if (nComponent == DATABASE_COMPONENT_TCFUNCTION)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GEN_PATCHTC)))
					{
						if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_GEN_TITLEITEM_VALUE))))
						{
							nCol = pCell->x;
							nRow = pCell->y;
							szItem = pszItem;
						}
					}
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GEN_DUMPTC)))
					{
						if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_GEN_TITLEITEM_VALUE))))
						{
							nCol = pCell->x;
							nRow = pCell->y;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TMPACKET)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_MAD_TMPKT)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_MAD_TMPKT))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
				if (nComponent == DATABASE_COMPONENT_TCFUNCTION)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_MAD_PATCHTC)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_MAD_PATCHTC))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_MAD_DUMPTC)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_MAD_DUMPTC))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_MEM_TMNAME)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_MEM_TMNAME))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
				if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_MEM_TCNAME)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_MEM_TCNAME))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TMPACKET)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_EXPTRG)))
					{
						if (pTable->GetCellValue(STRING(IDS_DATABASE_TABLE_PCF_TRGTYP), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE), sValue) && sValue.Value.nValue == TMPARAMETER_TRIGGERTYPE_PACKET)
						{
							if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE))))
							{
								nCol = pCell->x;
								nRow = pCell->y;
								szItem = pszItem;
							}
						}
					}
				}
				if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_NAME)))
					{
						if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE))))
						{
							nCol = pCell->x;
							nRow = pCell->y;
							szItem = pszItem;
						}
					}
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_VALID)))
					{
						if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE))))
						{
							if ((pDatabaseTMParameter = GetTMParameters()->GetAt(GetTMParameters()->Find(pszItem))) && pDatabaseTMParameter->GetWidth() == 1)
							{
								szItem.Format(STRING(IDS_DATABASE_TABLE_PCF_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
								nCol = pCell->x;
								nRow = pCell->y;
							}
						}
					}
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_EXPTRG)))
					{
						if (pTable->GetCellValue(STRING(IDS_DATABASE_TABLE_PCF_TRGTYP), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE), sValue) && sValue.Value.nValue == TMPARAMETER_TRIGGERTYPE_PARAMETER)
						{
							if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE))))
							{
								nCol = pCell->x;
								nRow = pCell->y;
								szItem = pszItem;
							}
						}
					}
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCF_ALTM)))
					{
						if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE))))
						{
							nCol = pCell->x;
							nRow = pCell->y;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PCAL_VALID)))
				{
					if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_PCAL_VALID))))
					{
						if ((pDatabaseTMParameter = GetTMParameters()->GetAt(GetTMParameters()->Find(pszItem))) && pDatabaseTMParameter->GetWidth() == 1)
						{
							szItem.Format(STRING(IDS_DATABASE_TABLE_PCAL_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
							nCol = pCell->x;
							nRow = pCell->y - 1;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PTXF_VALID)))
				{
					if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_PTXF_VALID))))
					{
						if ((pDatabaseTMParameter = GetTMParameters()->GetAt(GetTMParameters()->Find(pszItem))) && pDatabaseTMParameter->GetWidth() == 1)
						{
							szItem.Format(STRING(IDS_DATABASE_TABLE_PTXF_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
							nCol = pCell->x;
							nRow = pCell->y - 1;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_POCF_VALID)))
				{
					if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_POCF_VALID))))
					{
						if ((pDatabaseTMParameter = GetTMParameters()->GetAt(GetTMParameters()->Find(pszItem))) && pDatabaseTMParameter->GetWidth() == 1)
						{
							szItem.Format(STRING(IDS_DATABASE_TABLE_POCF_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
							nCol = pCell->x;
							nRow = pCell->y - 1;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PFXF_VALID)))
				{
					if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_PFXF_VALID))))
					{
						if ((pDatabaseTMParameter = GetTMParameters()->GetAt(GetTMParameters()->Find(pszItem))) && pDatabaseTMParameter->GetWidth() == 1)
						{
							szItem.Format(STRING(IDS_DATABASE_TABLE_PFXF_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
							nCol = pCell->x;
							nRow = pCell->y - 1;
						}
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_CPC_PNAME)))
					{
						if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_CPC_TITLEITEM_VALUE))))
						{
							nCol = pCell->x;
							nRow = pCell->y;
							szItem = pszItem;
						}
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_AND)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DPF_NUMBER)))
					{
						if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_DPF_TITLEITEM_VALUE))))
						{
							nCol = pCell->x;
							nRow = pCell->y;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_DPFP_PNAME)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_DPFP_PNAME))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_GRD)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPF_NUMBER)))
					{
						if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_GPF_TITLEITEM_VALUE))))
						{
							nCol = pCell->x;
							nRow = pCell->y;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_GPFP_PNAME)))
					{
						if ((pCell = pTable->FindCell(0, STRING(IDS_DATABASE_TABLE_GPFP_PNAME))))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_POD)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PPF_NUMBER)))
					{
						if ((pCell = pTable->FindCell(pszField, STRING(IDS_DATABASE_TABLE_PPF_TITLEITEM_VALUE))))
						{
							nCol = pCell->x;
							nRow = pCell->y;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)))
					{
						if ((pCell = pTable->FindCell(0, pTable->GetColumns() - 1)))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)))
		{
			if ((pTable = pView->FindTable(pszTable)))
			{
				if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
				{
					if (!lstrcmp(pszField, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)))
					{
						if ((pCell = pTable->FindCell(0, pTable->GetColumns() - 1)))
						{
							nCol = pCell->x;
							nRow = pCell->y - 1;
							szItem = pszItem;
						}
					}
				}
			}
		}
	}
	return !szItem.IsEmpty();
}

INT CALTELDatabaseEngine::EnumPrintTables(CONST CDatabaseTableView *pView, LPCTSTR pszTable, UINT nFlags, CStringArray &szTables) CONST
{
	INT  nTable;
	INT  nTables;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCSequence  *pDatabaseTCSequence;
	CDatabaseOBProcessor  *pDatabaseOBProcessor;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;
	CANDLayout  *pANDLayout;
	CGRDLayout  *pGRDLayout;
	CPODLayout  *pPODLayout;

	for (szTables.RemoveAll(); DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET; )
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)) || !lstrlen(pszTable)) && (nFlags & DATABASETABLEVIEW_PRINT_TABLE))
		{
			for (nTable = 0, nTables = (nFlags & DATABASETABLEVIEW_PRINT_ALL) ? (INT)pView->m_pDatabaseTMPackets[0].GetSize() : 0; nTable < nTables; nTable++)
			{
				if ((pDatabaseTMPacket = pView->m_pDatabaseTMPackets[0].GetAt(nTable)))
				{
					szTables.Add(pDatabaseTMPacket->GetTag());
					continue;
				}
			}
			for (; (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL; )
			{
				szTables.Add(STRING(IDS_DATABASE_TABLE_PMF));
				break;
			}
			return((INT)szTables.GetSize());
		}
		if (nFlags & DATABASETABLEVIEW_PRINT_SUBTABLE)
		{
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)) && (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL)
			{
				for (szTables.RemoveAll(); pView->m_pDatabaseTMPacketHeaders[0].GetSize() > 0; )
				{
					szTables.Add(STRING(IDS_DATABASE_TABLE_DFH));
					break;
				}
				return((INT)szTables.GetSize());
			}
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)) && (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL)
			{
				for (szTables.RemoveAll(); pView->m_pDatabaseTMPacketStreams[0].GetSize() > 0; )
				{
					szTables.Add(STRING(IDS_DATABASE_TABLE_STR));
					break;
				}
				return((INT)szTables.GetSize());
			}
		}
		break;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)) || !lstrlen(pszTable)) && (nFlags & DATABASETABLEVIEW_PRINT_TABLE))
		{
			for (nTable = 0, nTables = (nFlags & DATABASETABLEVIEW_PRINT_ALL) ? (INT)pView->m_pDatabaseTCFunctions[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
			{
				if ((pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(nTable)))
				{
					szTables.Add(pDatabaseTCFunction->GetName());
					continue;
				}
			}
			for (; (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL; )
			{
				szTables.Add(STRING(IDS_DATABASE_TABLE_CCF));
				break;
			}
			return((INT)szTables.GetSize());
		}
		if (nFlags & DATABASETABLEVIEW_PRINT_SUBTABLE)
		{
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)) && (nFlags & DATABASETABLEVIEW_PRINT_ALL))
			{
				for (nTable = 0, nTables = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP))) ? (INT)pView->m_pDatabaseTCPackets[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTCPacket = pView->m_pDatabaseTCPackets[0].GetAt(nTable)))
					{
						szTables.Add(pDatabaseTCPacket->GetTag());
						continue;
					}
				}
				return((INT)szTables.GetSize());
			}
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)) && (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL)
			{
				if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
				{
					if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_TCP_PACKID), STRING(IDS_DATABASE_TABLE_TCP_TITLEITEM_VALUE))))
					{
						szTables.Add(pCell->GetText());
						return((INT)szTables.GetSize());
					}
				}
			}
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) && (nFlags & DATABASETABLEVIEW_PRINT_ALL))
			{
				for (nTable = 0, nTables = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP))) ? (INT)pView->m_pDatabaseTCPreExeGroups[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTCPreExeGroup = pView->m_pDatabaseTCPreExeGroups[0].GetAt(nTable)))
					{
						szTables.Add(pDatabaseTCPreExeGroup->GetID());
						continue;
					}
				}
				return((INT)szTables.GetSize());
			}
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) && (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL)
			{
				if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
				{
					if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_PVP_ID), STRING(IDS_DATABASE_TABLE_PVP_TITLEITEM_VALUE))))
					{
						szTables.Add(pCell->GetText());
						return((INT)szTables.GetSize());
					}
				}
			}
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) && (nFlags & DATABASETABLEVIEW_PRINT_ALL))
			{
				for (nTable = 0, nTables = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP))) ? (INT)pView->m_pDatabaseTCExeVerGroups[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTCExeVerGroup = pView->m_pDatabaseTCExeVerGroups[0].GetAt(nTable)))
					{
						szTables.Add(pDatabaseTCExeVerGroup->GetID());
						continue;
					}
				}
				return((INT)szTables.GetSize());
			}
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) && (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL)
			{
				if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
				{
					if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CVP_ID), STRING(IDS_DATABASE_TABLE_CVP_TITLEITEM_VALUE))))
					{
						szTables.Add(pCell->GetText());
						return((INT)szTables.GetSize());
					}
				}
			}
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)) && (nFlags & DATABASETABLEVIEW_PRINT_ALL))
			{
				for (nTable = 0, nTables = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS))) ? (INT)pView->m_pDatabaseTCParameterSets[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTCParameterSet = pView->m_pDatabaseTCParameterSets[0].GetAt(nTable)))
					{
						szTables.Add(pDatabaseTCParameterSet->GetName());
						continue;
					}
				}
				return((INT)szTables.GetSize());
			}
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)) && (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL)
			{
				if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
				{
					if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CPS_NAME), STRING(IDS_DATABASE_TABLE_CPS_TITLEITEM_VALUE))))
					{
						szTables.Add(pCell->GetText());
						return((INT)szTables.GetSize());
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)) || !lstrlen(pszTable)) && (nFlags & DATABASETABLEVIEW_PRINT_TABLE))
		{
			for (nTable = 0, nTables = ((nFlags & DATABASETABLEVIEW_PRINT_ALL) && nTable != pView->m_nDatabaseTCSequenceIndex) ? (INT)pView->m_pDatabaseTCSequences[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
			{
				if ((pDatabaseTCSequence = pView->m_pDatabaseTCSequences[0].GetAt(nTable)))
				{
					szTables.Add(pDatabaseTCSequence->GetName());
					continue;
				}
			}
			for (; (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL; )
			{
				szTables.Add(STRING(IDS_DATABASE_TABLE_CSF));
				break;
			}
			return((INT)szTables.GetSize());
		}
		if (nFlags & DATABASETABLEVIEW_PRINT_SUBTABLE)
		{
			if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF))) && (nFlags & DATABASETABLEVIEW_PRINT_ALL))
			{
				for (nTable = 0, nTables = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF))) ? (INT)pView->m_pDatabaseTCFunctionBlocks[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTCFunctionBlock = pView->m_pDatabaseTCFunctionBlocks[0].GetAt(nTable)))
					{
						szTables.Add(pDatabaseTCFunctionBlock->GetName());
						continue;
					}
				}
				return((INT)szTables.GetSize());
			}
			if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF))) && (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL)
			{
				if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
				{
					if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_BCF_CNAME), STRING(IDS_DATABASE_TABLE_BCF_TITLEITEM_VALUE))))
					{
						szTables.Add(pCell->GetText());
						return((INT)szTables.GetSize());
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)) || !lstrlen(pszTable)) && (nFlags & DATABASETABLEVIEW_PRINT_TABLE))
		{
			for (nTable = 0, nTables = ((nFlags & DATABASETABLEVIEW_PRINT_ALL) && nTable != pView->m_nDatabaseOBProcessorIndex) ? (INT)pView->m_pDatabaseOBProcessors[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
			{
				if ((pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(nTable)))
				{
					szTables.Add(pDatabaseOBProcessor->GetName());
					continue;
				}
			}
			for (; (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL; )
			{
				szTables.Add(STRING(IDS_DATABASE_TABLE_GEN));
				break;
			}
			return((INT)szTables.GetSize());
		}
		if (nFlags & DATABASETABLEVIEW_PRINT_SUBTABLE)
		{
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)) && (nFlags & DATABASETABLEVIEW_PRINT_ALL))
			{
				for (nTable = 0, nTables = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG))) ? (INT)pView->m_pDatabaseOBProcessorMemoryImages[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
				{
					if ((pDatabaseOBProcessorMemoryImage = pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(nTable)))
					{
						szTables.Add(pDatabaseOBProcessorMemoryImage->GetName());
						continue;
					}
				}
				return((INT)szTables.GetSize());
			}
			if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)) && (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL)
			{
				if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
				{
					if ((pCell = pTable->FindCell(pTable->GetRows() - 1, pTable->GetColumns() - 1)))
					{
						szTables.Add(pCell->GetText());
						return((INT)szTables.GetSize());
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)) || !lstrlen(pszTable)) && (nFlags & DATABASETABLEVIEW_PRINT_TABLE))
		{
			for (nTable = 0, nTables = (nFlags & DATABASETABLEVIEW_PRINT_ALL) ? (INT)pView->m_pDatabaseTMParameters[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
			{
				if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(nTable)))
				{
					szTables.Add(pDatabaseTMParameter->GetTag());
					continue;
				}
			}
			for (; (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL; )
			{
				szTables.Add(STRING(IDS_DATABASE_TABLE_PCF));
				break;
			}
			return((INT)szTables.GetSize());
		}
		if (nFlags & DATABASETABLEVIEW_PRINT_SUBTABLE)
		{
			if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) && (nFlags & DATABASETABLEVIEW_PRINT_ALL))
			{
				for (nTable = 0, nTables = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? (INT)pView->m_pDatabaseTMNumCalTables[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTMNumCalTable = pView->m_pDatabaseTMNumCalTables[0].GetAt(nTable)))
					{
						szTables.Add(pDatabaseTMNumCalTable->GetName());
						continue;
					}
				}
				for (nTable = 0, nTables = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? (INT)pView->m_pDatabaseTMTxtCalTables[0].GetSize() : 0; nTable < nTables; nTable++)
				{
					if ((pDatabaseTMTxtCalTable = pView->m_pDatabaseTMTxtCalTables[0].GetAt(nTable)))
					{
						szTables.Add(pDatabaseTMTxtCalTable->GetName());
						continue;
					}
				}
				for (nTable = 0, nTables = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? (INT)pView->m_pDatabaseTMNumOolTables[0].GetSize() : 0; nTable < nTables; nTable++)
				{
					if ((pDatabaseTMNumOolTable = pView->m_pDatabaseTMNumOolTables[0].GetAt(nTable)))
					{
						szTables.Add(pDatabaseTMNumOolTable->GetName());
						continue;
					}
				}
				for (nTable = 0, nTables = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? (INT)pView->m_pDatabaseTMTxtOolTables[0].GetSize() : 0; nTable < nTables; nTable++)
				{
					if ((pDatabaseTMTxtOolTable = pView->m_pDatabaseTMTxtOolTables[0].GetAt(nTable)))
					{
						szTables.Add(pDatabaseTMTxtOolTable->GetName());
						continue;
					}
				}
				return((INT)szTables.GetSize());
			}
			if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) && (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL)
			{
				if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
				{
					if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CAL_NAME), STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE))))
					{
						szTables.Add(pCell->GetText());
						return((INT)szTables.GetSize());
					}
				}
				if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
				{
					if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_TXF_NAME), STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE))))
					{
						szTables.Add(pCell->GetText());
						return((INT)szTables.GetSize());
					}
				}
				if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
				{
					if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_OCF_NAME), STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE))))
					{
						szTables.Add(pCell->GetText());
						return((INT)szTables.GetSize());
					}
				}
				if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
				{
					if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_FXF_NAME), STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE))))
					{
						szTables.Add(pCell->GetText());
						return((INT)szTables.GetSize());
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)) || !lstrlen(pszTable)) && (nFlags & DATABASETABLEVIEW_PRINT_TABLE))
		{
			for (nTable = 0, nTables = (nFlags & DATABASETABLEVIEW_PRINT_ALL) ? (INT)pView->m_pDatabaseTCParameters[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
			{
				if ((pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(nTable)))
				{
					szTables.Add(pDatabaseTCParameter->GetTag());
					continue;
				}
			}
			for (; (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL; )
			{
				szTables.Add(STRING(IDS_DATABASE_TABLE_CPC));
				break;
			}
			return((INT)szTables.GetSize());
		}
		if (nFlags & DATABASETABLEVIEW_PRINT_SUBTABLE)
		{
			if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) && (nFlags & DATABASETABLEVIEW_PRINT_ALL))
			{
				for (nTable = 0, nTables = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? (INT)pView->m_pDatabaseTCNumCalTables[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
				{
					if ((pDatabaseTCNumCalTable = pView->m_pDatabaseTCNumCalTables[0].GetAt(nTable)))
					{
						szTables.Add(pDatabaseTCNumCalTable->GetName());
						continue;
					}
				}
				for (nTable = 0, nTables = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? (INT)pView->m_pDatabaseTCTxtCalTables[0].GetSize() : 0; nTable < nTables; nTable++)
				{
					if ((pDatabaseTCTxtCalTable = pView->m_pDatabaseTCTxtCalTables[0].GetAt(nTable)))
					{
						szTables.Add(pDatabaseTCTxtCalTable->GetName());
						continue;
					}
				}
				for (nTable = 0, nTables = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? (INT)pView->m_pDatabaseTCNumOolTables[0].GetSize() : 0; nTable < nTables; nTable++)
				{
					if ((pDatabaseTCNumOolTable = pView->m_pDatabaseTCNumOolTables[0].GetAt(nTable)))
					{
						szTables.Add(pDatabaseTCNumOolTable->GetName());
						continue;
					}
				}
				for (nTable = 0, nTables = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? (INT)pView->m_pDatabaseTCTxtOolTables[0].GetSize() : 0; nTable < nTables; nTable++)
				{
					if ((pDatabaseTCTxtOolTable = pView->m_pDatabaseTCTxtOolTables[0].GetAt(nTable)))
					{
						szTables.Add(pDatabaseTCTxtOolTable->GetName());
						continue;
					}
				}
				return((INT)szTables.GetSize());
			}
			if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) && (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL)
			{
				if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
				{
					if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CAL_NAME), STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE))))
					{
						szTables.Add(pCell->GetText());
						return((INT)szTables.GetSize());
					}
				}
				if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
				{
					if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_TXF_NAME), STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE))))
					{
						szTables.Add(pCell->GetText());
						return((INT)szTables.GetSize());
					}
				}
				if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
				{
					if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_OCF_NAME), STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE))))
					{
						szTables.Add(pCell->GetText());
						return((INT)szTables.GetSize());
					}
				}
				if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
				{
					if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_FXF_NAME), STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE))))
					{
						szTables.Add(pCell->GetText());
						return((INT)szTables.GetSize());
					}
				}
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)) || !lstrlen(pszTable)) && (nFlags & DATABASETABLEVIEW_PRINT_TABLE))
		{
			for (nTable = 0, nTables = (nFlags & DATABASETABLEVIEW_PRINT_ALL) ? (INT)pView->m_pANDLayouts[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
			{
				if ((pANDLayout = pView->m_pANDLayouts[0].GetAt(nTable)))
				{
					szTables.Add(pANDLayout->GetName());
					continue;
				}
			}
			for (; (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL; )
			{
				szTables.Add(STRING(IDS_DATABASE_TABLE_DPF));
				break;
			}
			return((INT)szTables.GetSize());
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)) || !lstrlen(pszTable)) && (nFlags & DATABASETABLEVIEW_PRINT_TABLE))
		{
			for (nTable = 0, nTables = (nFlags & DATABASETABLEVIEW_PRINT_ALL) ? (INT)pView->m_pGRDLayouts[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
			{
				if ((pGRDLayout = pView->m_pGRDLayouts[0].GetAt(nTable)))
				{
					szTables.Add(pGRDLayout->GetName());
					continue;
				}
			}
			for (; (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL; )
			{
				szTables.Add(STRING(IDS_DATABASE_TABLE_GPF));
				break;
			}
			return((INT)szTables.GetSize());
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)) || !lstrlen(pszTable)) && (nFlags & DATABASETABLEVIEW_PRINT_TABLE))
		{
			for (nTable = 0, nTables = (nFlags & DATABASETABLEVIEW_PRINT_ALL) ? (INT)pView->m_pPODLayouts[0].GetSize() : 0, szTables.RemoveAll(); nTable < nTables; nTable++)
			{
				if ((pPODLayout = pView->m_pPODLayouts[0].GetAt(nTable)))
				{
					szTables.Add(pPODLayout->GetName());
					continue;
				}
			}
			for (; (nFlags & DATABASETABLEVIEW_PRINT_ALL) != DATABASETABLEVIEW_PRINT_ALL; )
			{
				szTables.Add(STRING(IDS_DATABASE_TABLE_PPF));
				break;
			}
			return((INT)szTables.GetSize());
		}
	}
	return 0;
}

BOOL CALTELDatabaseEngine::GetPrintTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszItem, CStringArray &szContents) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	BOOL  bTable;
	CString  szItem;
	CString  szTable;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;

	for (szContents.RemoveAll(); DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET; )
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF))) && pView->m_pDatabaseTMPackets[0].Find(pszItem) >= 0 && pView->GetName() != pszItem)
		{
			bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_PACKID)), pszItem, szTable, szContents);
			return bTable;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				if ((pCell = pTable->FindCell(nRow, pTable->GetColumns() - 1)))
				{
					szContents.Add(pCell->GetText());
					continue;
				}
				szContents.Add(EMPTYSTRING);
			}
			return TRUE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 0, nRow = (lstrlen(pTable->GetTitle()) > 0) ? (nRow + 1) : nRow, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				for (nCol = 0, nCols = pTable->GetColumns(), szItem.Empty(); nCol < nCols; nCol++)
				{
					if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
					{
						szItem += (nCol > 0) ? (TAB + pCell->GetText()) : pCell->GetText();
						continue;
					}
					szItem += (nCol > 0) ? CString(TAB) : EMPTYSTRING;
				}
				szContents.Add(szItem);
			}
			return TRUE;
		}
		break;
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS))) && pView->m_pDatabaseTCFunctions[0].Find(pszItem) >= 0 && pView->GetName() != pszItem)
		{
			bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)), pszItem, szTable, szContents);
			return bTable;
		}
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF))) && pView->m_pDatabaseTCPackets[0].Find(pszItem) >= 0)
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_TCP))) != (CTableViewObject *)NULL)
			{
				if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_TCP_PACKID), STRING(IDS_DATABASE_TABLE_TCP_TITLEITEM_VALUE))) && pCell->GetText() != pszItem)
				{
					bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_PACKID)), pszItem, szTable, szContents);
					return bTable;
				}
			}
		}
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV))) && pView->m_pDatabaseTCPreExeGroups[0].Find(pszItem) >= 0)
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PVP))) != (CTableViewObject *)NULL)
			{
				if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_PVP_ID), STRING(IDS_DATABASE_TABLE_PVP_TITLEITEM_VALUE))) && pCell->GetText() != pszItem)
				{
					bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_ID)), pszItem, szTable, szContents);
					return bTable;
				}
			}
		}
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV))) && pView->m_pDatabaseTCExeVerGroups[0].Find(pszItem) >= 0)
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_CVP))) != (CTableViewObject *)NULL)
			{
				if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CVP_ID), STRING(IDS_DATABASE_TABLE_CVP_TITLEITEM_VALUE))) && pCell->GetText() != pszItem)
				{
					bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_ID)), pszItem, szTable, szContents);
					return bTable;
				}
			}
		}
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP))) && pView->m_pDatabaseTCParameterSets[0].Find(pszItem) >= 0)
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_CPS))) != (CTableViewObject *)NULL)
			{
				if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CPS_NAME), STRING(IDS_DATABASE_TABLE_CPS_TITLEITEM_VALUE))) && pCell->GetText() != pszItem)
				{
					bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_NAME)), pszItem, szTable, szContents);
					return bTable;
				}
			}
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				if ((pCell = pTable->FindCell(nRow, pTable->GetColumns() - 1)))
				{
					szContents.Add(pCell->GetText());
					continue;
				}
				szContents.Add(EMPTYSTRING);
			}
			return TRUE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 0, nRow = (lstrlen(pTable->GetTitle()) > 0) ? (nRow + 1) : nRow, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				for (nCol = 0, nCols = pTable->GetColumns(), szItem.Empty(); nCol < nCols; nCol++)
				{
					if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
					{
						szItem += (nCol > 0) ? (TAB + pCell->GetText()) : pCell->GetText();
						continue;
					}
					szItem += (nCol > 0) ? CString(TAB) : EMPTYSTRING;
				}
				szContents.Add(szItem);
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF))) && pView->m_pDatabaseTCSequences[0].Find(pszItem) >= 0 && pView->GetName() != pszItem)
		{
			bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME)), pszItem, szTable, szContents);
			return bTable;
		}
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF))) && pView->m_pDatabaseTCFunctionBlocks[0].Find(pszItem) >= 0)
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_BCF))) != (CTableViewObject *)NULL)
			{
				if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_BCF_CNAME), STRING(IDS_DATABASE_TABLE_BCF_TITLEITEM_VALUE))) && pCell->GetText() != pszItem)
				{
					bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_CNAME)), pszItem, szTable, szContents);
					return bTable;
				}
			}
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				if ((pCell = pTable->FindCell(nRow, pTable->GetColumns() - 1)))
				{
					szContents.Add(pCell->GetText());
					continue;
				}
				szContents.Add(EMPTYSTRING);
			}
			return TRUE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 0, nRow = (lstrlen(pTable->GetTitle()) > 0) ? (nRow + 1) : nRow, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				for (nCol = 0, nCols = pTable->GetColumns(), szItem.Empty(); nCol < nCols; nCol++)
				{
					if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
					{
						szItem += (nCol > 0) ? (TAB + pCell->GetText()) : pCell->GetText();
						continue;
					}
					szItem += (nCol > 0) ? CString(TAB) : EMPTYSTRING;
				}
				szContents.Add(szItem);
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT))) && pView->m_pDatabaseOBProcessors[0].Find(pszItem) >= 0 && pView->GetName() != pszItem)
		{
			bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)), pszItem, szTable, szContents);
			return bTable;
		}
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP))) && pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pszItem) >= 0)
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PIMG))) != (CTableViewObject *)NULL)
			{
				if ((pCell = pTable->FindCell(pTable->GetRows() - 1, pTable->GetColumns() - 1)) && pCell->GetText() != pszItem)
				{
					bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PIMG), STRING(IDS_DATABASE_TABLE_PIMG_MNAME)), pszItem, szTable, szContents);
					return bTable;
				}
			}
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				if ((pCell = pTable->FindCell(nRow, pTable->GetColumns() - 1)))
				{
					szContents.Add(pCell->GetText());
					continue;
				}
				szContents.Add(EMPTYSTRING);
			}
			return TRUE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 0, nRow = (lstrlen(pTable->GetTitle()) > 0) ? (nRow + 1) : nRow, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				for (nCol = 0, nCols = pTable->GetColumns(), szItem.Empty(); nCol < nCols; nCol++)
				{
					if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
					{
						szItem += (nCol > 0) ? (TAB + pCell->GetText()) : pCell->GetText();
						continue;
					}
					szItem += (nCol > 0) ? CString(TAB) : EMPTYSTRING;
				}
				szContents.Add(szItem);
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF))) && pView->m_pDatabaseTMParameters[0].Find(pszItem) >= 0 && pView->GetName() != pszItem)
		{
			bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)), pszItem, szTable, szContents);
			return bTable;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)))
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL))) && pView->m_pDatabaseTMNumCalTables[0].Find(pszItem) >= 0)
			{
				if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CAL_NAME), STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE))) && pCell->GetText() != pszItem)
				{
					bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), pszItem, szTable, szContents);
					return bTable;
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF))) && pView->m_pDatabaseTMTxtCalTables[0].Find(pszItem) >= 0)
			{
				if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_TXF_NAME), STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE))) && pCell->GetText() != pszItem)
				{
					bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), pszItem, szTable, szContents);
					return bTable;
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)))
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF))) && pView->m_pDatabaseTMNumOolTables[0].Find(pszItem) >= 0)
			{
				if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_OCF_NAME), STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE))) && pCell->GetText() != pszItem)
				{
					bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), pszItem, szTable, szContents);
					return bTable;
				}
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF))) && pView->m_pDatabaseTMTxtOolTables[0].Find(pszItem) >= 0)
			{
				if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_FXF_NAME), STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE))) && pCell->GetText() != pszItem)
				{
					bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), pszItem, szTable, szContents);
					return bTable;
				}
			}
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				if ((pCell = pTable->FindCell(nRow, pTable->GetColumns() - 1)))
				{
					szContents.Add(pCell->GetText());
					continue;
				}
				szContents.Add(EMPTYSTRING);
			}
			return TRUE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 0, nRow = (lstrlen(pTable->GetTitle()) > 0) ? (nRow + 1) : nRow, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				for (nCol = 0, nCols = pTable->GetColumns(), szItem.Empty(); nCol < nCols; nCol++)
				{
					if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
					{
						szItem += (nCol > 0) ? (TAB + pCell->GetText()) : pCell->GetText();
						continue;
					}
					szItem += (nCol > 0) ? CString(TAB) : EMPTYSTRING;
				}
				szContents.Add(szItem);
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC))) && pView->m_pDatabaseTCParameters[0].Find(pszItem) >= 0 && pView->GetName() != pszItem)
		{
			bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)), pszItem, szTable, szContents);
			return bTable;
		}
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP))) && pView->m_pDatabaseTCNumCalTables[0].Find(pszItem) >= 0)
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL))) != (CTableViewObject *)NULL)
			{
				if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_CAL_NAME), STRING(IDS_DATABASE_TABLE_CAL_TITLEITEM_VALUE))) && pCell->GetText() != pszItem)
				{
					bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), pszItem, szTable, szContents);
					return bTable;
				}
			}
		}
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP))) && pView->m_pDatabaseTCTxtCalTables[0].Find(pszItem) >= 0)
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF))) != (CTableViewObject *)NULL)
			{
				if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_TXF_NAME), STRING(IDS_DATABASE_TABLE_TXF_TITLEITEM_VALUE))) && pCell->GetText() != pszItem)
				{
					bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), pszItem, szTable, szContents);
					return bTable;
				}
			}
		}
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP))) && pView->m_pDatabaseTCNumOolTables[0].Find(pszItem) >= 0)
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF))) != (CTableViewObject *)NULL)
			{
				if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_OCF_NAME), STRING(IDS_DATABASE_TABLE_OCF_TITLEITEM_VALUE))) && pCell->GetText() != pszItem)
				{
					bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), pszItem, szTable, szContents);
					return bTable;
				}
			}
		}
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP))) && pView->m_pDatabaseTCTxtOolTables[0].Find(pszItem) >= 0)
		{
			if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF))) != (CTableViewObject *)NULL)
			{
				if ((pCell = pTable->FindCell(STRING(IDS_DATABASE_TABLE_FXF_NAME), STRING(IDS_DATABASE_TABLE_FXF_TITLEITEM_VALUE))) && pCell->GetText() != pszItem)
				{
					bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), pszItem, szTable, szContents);
					return bTable;
				}
			}
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				if ((pCell = pTable->FindCell(nRow, pTable->GetColumns() - 1)))
				{
					szContents.Add(pCell->GetText());
					continue;
				}
				szContents.Add(EMPTYSTRING);
			}
			return TRUE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 0, nRow = (lstrlen(pTable->GetTitle()) > 0) ? (nRow + 1) : nRow, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				for (nCol = 0, nCols = pTable->GetColumns(), szItem.Empty(); nCol < nCols; nCol++)
				{
					if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
					{
						szItem += (nCol > 0) ? (TAB + pCell->GetText()) : pCell->GetText();
						continue;
					}
					szItem += (nCol > 0) ? CString(TAB) : EMPTYSTRING;
				}
				szContents.Add(szItem);
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT))) && pView->m_pANDLayouts[0].Find(pszItem) >= 0 && pView->GetName() != pszItem)
		{
			bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_NUMBER)), pszItem, szTable, szContents);
			return bTable;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				if ((pCell = pTable->FindCell(nRow, pTable->GetColumns() - 1)))
				{
					szContents.Add(pCell->GetText());
					continue;
				}
				szContents.Add(EMPTYSTRING);
			}
			return TRUE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 0, nRow = (lstrlen(pTable->GetTitle()) > 0) ? (nRow + 1) : nRow, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				for (nCol = 0, nCols = pTable->GetColumns(), szItem.Empty(); nCol < nCols; nCol++)
				{
					if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
					{
						szItem += (nCol > 0) ? (TAB + pCell->GetText()) : pCell->GetText();
						continue;
					}
					szItem += (nCol > 0) ? CString(TAB) : EMPTYSTRING;
				}
				szContents.Add(szItem);
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT))) && pView->m_pGRDLayouts[0].Find(pszItem) >= 0 && pView->GetName() != pszItem)
		{
			bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_NUMBER)), pszItem, szTable, szContents);
			return bTable;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				if ((pCell = pTable->FindCell(nRow, pTable->GetColumns() - 1)))
				{
					szContents.Add(pCell->GetText());
					continue;
				}
				szContents.Add(EMPTYSTRING);
			}
			return TRUE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 0, nRow = (lstrlen(pTable->GetTitle()) > 0) ? (nRow + 1) : nRow, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				for (nCol = 0, nCols = pTable->GetColumns(), szItem.Empty(); nCol < nCols; nCol++)
				{
					if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
					{
						szItem += (nCol > 0) ? (TAB + pCell->GetText()) : pCell->GetText();
						continue;
					}
					szItem += (nCol > 0) ? CString(TAB) : EMPTYSTRING;
				}
				szContents.Add(szItem);
			}
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS))) && pView->m_pPODLayouts[0].Find(pszItem) >= 0 && pView->GetName() != pszItem)
		{
			bTable = GetTableUpdateContents(pView, pszTable, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_NUMBER)), pszItem, szTable, szContents);
			return bTable;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 1, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				if ((pCell = pTable->FindCell(nRow, pTable->GetColumns() - 1)))
				{
					szContents.Add(pCell->GetText());
					continue;
				}
				szContents.Add(EMPTYSTRING);
			}
			return TRUE;
		}
		if ((pTable = (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS))) ? pView->FindTable(pszTable) : (CTableViewObject *)NULL))
		{
			for (nRow = 0, nRow = (lstrlen(pTable->GetTitle()) > 0) ? (nRow + 1) : nRow, nRows = pTable->GetRows(), szContents.RemoveAll(); nRow < nRows; nRow++)
			{
				for (nCol = 0, nCols = pTable->GetColumns(), szItem.Empty(); nCol < nCols; nCol++)
				{
					if ((pCell = pTable->FindCell(nRow, nCol)) != (CTableViewCell *)NULL)
					{
						szItem += (nCol > 0) ? (TAB + pCell->GetText()) : pCell->GetText();
						continue;
					}
					szItem += (nCol > 0) ? CString(TAB) : EMPTYSTRING;
				}
				szContents.Add(szItem);
			}
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::PrintTable(CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszItem, CMetaFileDC &cMetaDC)
{
	INT  nTable;
	INT  nTables;
	CPoint  ptTable;
	CStringArray  szItems;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable[3];
	CTableViewObjects  pTables;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseOBProcessor  *pDatabaseOBProcessor;
	CDatabaseOBProcessorMemoryArea  *pDatabaseOBProcessorMemoryArea;

	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET)
	{
		for (pView->EnumTables(&pTables), ptTable.x = ptTable.y = 0; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)) || !lstrlen(pszTable); )
		{
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)) && (pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_DFH) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_STR)))
				{
					pTables.RemoveAt(nTable);
					delete pTable[0];
					nTables--;
					nTable--;
				}
			}
			if ((pTable[0] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_PMF)))))
			{
				ptTable.x = pTable[0]->GetCellsBounds().left;
				ptTable.y = pTable[0]->GetCellsBounds().top;
				for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
				{
					if ((pTable[0] = pTables.GetAt(nTable)))
					{
						pTable[0]->OffsetCells(CSize(-ptTable));
						pTable[0]->OffsetRect(-ptTable);
					}
				}
				for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
				{
					if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
					{
						if (GetPrintTableContents(pView, pTable[0]->GetName(), pszItem, szItems))
						{
							pView->UpdateTableContents(&pTables, pTable[0], pszItem, szItems);
							continue;
						}
					}
				}
				pView->RepositionTables(&pTables);
				pView->DrawTables(&cMetaDC, &pTables, TRUE);
				return TRUE;
			}
			break;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)))
		{
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)))
				{
					if (pTable[0]->GetName() != pszTable)
					{
						pTables.RemoveAt(nTable);
						delete pTable[0];
						nTables--;
						nTable--;
					}
				}
			}
			if ((pTable[0] = pTables.GetAt(pTables.Find(pszTable))))
			{
				ptTable.x = pTable[0]->GetCellsBounds().left;
				ptTable.y = pTable[0]->GetCellsBounds().top;
				pTable[0]->OffsetCells(CSize(-ptTable));
				pTable[0]->OffsetRect(-ptTable);
				pView->DrawTables(&cMetaDC, &pTables, TRUE);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		for (pView->EnumTables(&pTables), ptTable.x = ptTable.y = 0; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)) || !lstrlen(pszTable); )
		{
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_CCF) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_CDF) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_PCPS))
				{
					pTables.RemoveAt(nTable);
					delete pTable[0];
					nTables--;
					nTable--;
				}
			}
			if ((pTable[0] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_CCF)))))
			{
				ptTable.x = pTable[0]->GetCellsBounds().left;
				ptTable.y = pTable[0]->GetCellsBounds().top;
				for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
				{
					if ((pTable[0] = pTables.GetAt(nTable)))
					{
						pTable[0]->OffsetCells(CSize(-ptTable));
						pTable[0]->OffsetRect(-ptTable);
					}
				}
				for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
				{
					if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
					{
						if (GetPrintTableContents(pView, pTable[0]->GetName(), pszItem, szItems))
						{
							pView->UpdateTableContents(&pTables, pTable[0], pszItem, szItems);
							continue;
						}
					}
				}
				pView->RepositionTables(&pTables);
				pView->DrawTables(&cMetaDC, &pTables, TRUE);
				return TRUE;
			}
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)))
		{
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)) && (pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_CCF) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_CDF) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_PCPS) || (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)) && lstrcmp(pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_TCP)) && lstrcmp(pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PCDF))) || (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) && lstrcmp(pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PVP)) && lstrcmp(pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_PEV))) || (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) && lstrcmp(pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CVP)) && lstrcmp(pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CEV))) || (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)) && lstrcmp(pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPS)) && lstrcmp(pTable[0]->GetName(), STRING(IDS_DATABASE_TABLE_CPSP)))))
				{
					pTables.RemoveAt(nTable);
					delete pTable[0];
					nTables--;
					nTable--;
				}
			}
			if ((pTable[0] = pTables.GetAt(pTables.Find(pszTable))))
			{
				ptTable.x = pTable[0]->GetCellsBounds().left;
				ptTable.y = pTable[0]->GetCellsBounds().top;
				pTable[0]->OffsetCells(CSize(-ptTable));
				pTable[0]->OffsetRect(-ptTable);
				for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
				{
					if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
					{
						if (GetPrintTableContents(pView, pTable[0]->GetName(), pszItem, szItems))
						{
							pView->UpdateTableContents(&pTables, pTable[0], pszItem, szItems);
							continue;
						}
					}
				}
				pView->RepositionTables(&pTables);
				pView->DrawTables(&cMetaDC, &pTables, TRUE);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		for (pView->EnumTables(&pTables), ptTable.x = ptTable.y = 0; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)) || !lstrlen(pszTable); )
		{
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_CSF) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_CSS) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_CSP) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_SDF))
				{
					pTables.RemoveAt(nTable);
					delete pTable[0];
					nTables--;
					nTable--;
				}
			}
			if ((pTable[0] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_CSF)))))
			{
				ptTable.x = pTable[0]->GetCellsBounds().left;
				ptTable.y = pTable[0]->GetCellsBounds().top;
				for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
				{
					if ((pTable[0] = pTables.GetAt(nTable)))
					{
						pTable[0]->OffsetCells(CSize(-ptTable));
						pTable[0]->OffsetRect(-ptTable);
					}
				}
				for (nTable = 0, nTables = (INT)pTables.GetSize(), pView->EnableTablesAlignment(TRUE, pView->GetName() != pszItem); nTable < nTables; nTable++)
				{
					if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
					{
						if (GetPrintTableContents(pView, pTable[0]->GetName(), pszItem, szItems))
						{
							pView->UpdateTableContents(&pTables, pTable[0], pszItem, szItems);
							continue;
						}
					}
				}
				pView->RepositionTables(&pTables);
				pView->DrawTables(&cMetaDC, &pTables, TRUE);
				pView->EnableTablesAlignment(FALSE);
				return TRUE;
			}
			break;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)))
		{
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_BCF) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_BCCF))
				{
					pTables.RemoveAt(nTable);
					delete pTable[0];
					nTables--;
					nTable--;
				}
			}
			if ((pTable[0] = pTables.GetAt(pTables.Find(pszTable))))
			{
				ptTable.x = pTable[0]->GetCellsBounds().left;
				ptTable.y = pTable[0]->GetCellsBounds().top;
				pTable[0]->OffsetCells(CSize(-ptTable));
				pTable[0]->OffsetRect(-ptTable);
				for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
				{
					if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
					{
						if (GetPrintTableContents(pView, pTable[0]->GetName(), pszItem, szItems))
						{
							pView->UpdateTableContents(&pTables, pTable[0], pszItem, szItems);
							continue;
						}
					}
				}
				pView->RepositionTables(&pTables);
				pView->DrawTables(&cMetaDC, &pTables, TRUE);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		for (pView->EnumTables(&pTables), ptTable.x = ptTable.y = 0; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)) || !lstrlen(pszTable); )
		{
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_GEN) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_MAD) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_MEM) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_PIMG) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_IMG) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_CRC) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_CAT))
				{
					pTables.RemoveAt(nTable);
					delete pTable[0];
					nTables--;
					nTable--;
				}
			}
			if ((pTable[0] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_GEN)))))
			{
				if ((pTable[1] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_MAD)))))
				{
					if ((pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszItem))))
					{
						for (; (pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_GEN_IMGNAME), STRING(IDS_DATABASE_TABLE_GEN_TITLEITEM_VALUE))); )
						{
							pCell->SetSubTable(STRING(IDS_DATABASE_TABLE_PIMG));
							break;
						}
						for (; (pTable[2] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_MEM)))); )
						{
							pTable[2]->MakeVisible((((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt((!pView->GetName().Compare(pszItem)) ? max(pTable[1]->GetSelRow() - 1, 0) : 0)) && (pDatabaseOBProcessorMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_IMAGE) != OBPROCESSORMEMORYAREA_TYPE_IMAGE) || !pDatabaseOBProcessorMemoryArea) ? TRUE : FALSE);
							break;
						}
						for (; (pTable[2] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_IMG)))); )
						{
							pTable[2]->MakeVisible((((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt((!pView->GetName().Compare(pszItem)) ? max(pTable[1]->GetSelRow() - 1, 0) : 0)) && (pDatabaseOBProcessorMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_IMAGE))) ? TRUE : FALSE);
							break;
						}
						ptTable.x = pTable[0]->GetCellsBounds().left;
						ptTable.y = pTable[0]->GetCellsBounds().top;
						for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
						{
							if ((pTable[0] = pTables.GetAt(nTable)))
							{
								pTable[0]->OffsetCells(CSize(-ptTable));
								pTable[0]->OffsetRect(-ptTable);
							}
						}
						for (nTable = 0, nTables = (INT)pTables.GetSize(), pView->EnableTablesAlignment(TRUE, pView->GetName() != pszItem); nTable < nTables; nTable++)
						{
							if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
							{
								if (GetPrintTableContents(pView, pTable[0]->GetName(), pszItem, szItems))
								{
									pView->UpdateTableContents(&pTables, pTable[0], pszItem, szItems);
									continue;
								}
							}
						}
					}
					pView->RepositionTables(&pTables);
					pView->DrawTables(&cMetaDC, &pTables, TRUE);
					pView->EnableTablesAlignment(FALSE);
					return TRUE;
				}
			}
			break;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)))
		{
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)) && pTable[0]->GetName() != STRING(IDS_DATABASE_TABLE_IMGP))
				{
					pTables.RemoveAt(nTable);
					delete pTable[0];
					nTables--;
					nTable--;
				}
			}
			if ((pTable[0] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_IMGP)))))
			{
				ptTable.x = pTable[0]->GetCellsBounds().left;
				ptTable.y = pTable[0]->GetCellsBounds().top;
				pTable[0]->OffsetCells(CSize(-ptTable));
				pTable[0]->OffsetRect(-ptTable);
				for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
				{
					if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
					{
						if (GetPrintTableContents(pView, pTable[0]->GetName(), pszItem, szItems))
						{
							pView->UpdateTableContents(&pTables, pTable[0], pszItem, szItems);
							continue;
						}
					}
				}
				pView->RepositionTables(&pTables);
				pView->DrawTables(&cMetaDC, &pTables, TRUE);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		for (pView->EnumTables(&pTables), ptTable.x = ptTable.y = 0; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)) || !lstrlen(pszTable); )
		{
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)) && (pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_CAL) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_TXF) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_OCF) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_FXF) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_CALP) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_TXFP) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_OCFP) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_FXFP)))
				{
					pTables.RemoveAt(nTable);
					delete pTable[0];
					nTables--;
					nTable--;
				}
			}
			if ((pTable[0] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_PCF)))))
			{
				if ((pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszItem))))
				{
					for (; (pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PCF_CALTABLES), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE))); )
					{
						pCell->SetSubTable((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_DATABASE_TABLE_PCAL) : STRING(IDS_DATABASE_TABLE_PTXF));
						break;
					}
					for (; (pCell = pTable[0]->FindCell(STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES), STRING(IDS_DATABASE_TABLE_PCF_TITLEITEM_VALUE))); )
					{
						pCell->SetSubTable(((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NONE) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_DATABASE_TABLE_POCF) : STRING(IDS_DATABASE_TABLE_PFXF));
						break;
					}
					for (; (pTable[1] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_PCAL)))); )
					{
						pTable[1]->MakeVisible((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? TRUE : FALSE);
						break;
					}
					for (; (pTable[1] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_PTXF)))); )
					{
						pTable[1]->MakeVisible((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
						break;
					}
					for (; (pTable[1] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_POCF)))); )
					{
						pTable[1]->MakeVisible(((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NONE) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)) ? TRUE : FALSE);
						break;
					}
					for (; (pTable[1] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_PFXF)))); )
					{
						pTable[1]->MakeVisible((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? TRUE : FALSE);
						break;
					}
					ptTable.x = pTable[0]->GetCellsBounds().left;
					ptTable.y = pTable[0]->GetCellsBounds().top;
					for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
						{
							pTable[0]->OffsetCells(CSize(-ptTable));
							pTable[0]->OffsetRect(-ptTable);
						}
					}
					for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
					{
						if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
						{
							if (GetPrintTableContents(pView, pTable[0]->GetName(), pszItem, szItems))
							{
								pView->UpdateTableContents(&pTables, pTable[0], pszItem, szItems);
								continue;
							}
						}
					}
				}
				pView->RepositionTables(&pTables);
				pView->DrawTables(&cMetaDC, &pTables, TRUE);
				return TRUE;
			}
			break;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)) && _tcsncmp(pTable[0]->GetName(), pszTable, lstrlen(pszTable)))
				{
					pTables.RemoveAt(nTable);
					delete pTable[0];
					nTables--;
					nTable--;
				}
			}
			if ((pTable[0] = pTables.GetAt(pTables.Find(pszTable))))
			{
				ptTable.x = pTable[0]->GetCellsBounds().left;
				ptTable.y = pTable[0]->GetCellsBounds().top;
				pTable[0]->OffsetCells(CSize(-ptTable));
				pTable[0]->OffsetRect(-ptTable);
				for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
				{
					if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
					{
						if (GetPrintTableContents(pView, pTable[0]->GetName(), pszItem, szItems))
						{
							pView->UpdateTableContents(&pTables, pTable[0], pszItem, szItems);
							continue;
						}
					}
				}
				pView->RepositionTables(&pTables);
				pView->DrawTables(&cMetaDC, &pTables, TRUE);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		for (pView->EnumTables(&pTables), ptTable.x = ptTable.y = 0; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)) || !lstrlen(pszTable); )
		{
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)) && (pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_CAL) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_TXF) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_OCF) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_FXF) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_CALP) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_TXFP) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_OCFP) || pTable[0]->GetName() == STRING(IDS_DATABASE_TABLE_FXFP)))
				{
					pTables.RemoveAt(nTable);
					delete pTable[0];
					nTables--;
					nTable--;
				}
			}
			if ((pTable[0] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_CPC)))))
			{
				ptTable.x = pTable[0]->GetCellsBounds().left;
				ptTable.y = pTable[0]->GetCellsBounds().top;
				for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
				{
					if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
					{
						pTable[0]->OffsetCells(CSize(-ptTable));
						pTable[0]->OffsetRect(-ptTable);
					}
				}
				for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
				{
					if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
					{
						if (GetPrintTableContents(pView, pTable[0]->GetName(), pszItem, szItems))
						{
							pView->UpdateTableContents(&pTables, pTable[0], pszItem, szItems);
							continue;
						}
					}
				}
				pView->RepositionTables(&pTables);
				pView->DrawTables(&cMetaDC, &pTables, TRUE);
				return TRUE;
			}
			break;
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)) && _tcsncmp(pTable[0]->GetName(), pszTable, lstrlen(pszTable)))
				{
					pTables.RemoveAt(nTable);
					delete pTable[0];
					nTables--;
					nTable--;
				}
			}
			if ((pTable[0] = pTables.GetAt(pTables.Find(pszTable))))
			{
				ptTable.x = pTable[0]->GetCellsBounds().left;
				ptTable.y = pTable[0]->GetCellsBounds().top;
				pTable[0]->OffsetCells(CSize(-ptTable));
				pTable[0]->OffsetRect(-ptTable);
				for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
				{
					if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
					{
						if (GetPrintTableContents(pView, pTable[0]->GetName(), pszItem, szItems))
						{
							pView->UpdateTableContents(&pTables, pTable[0], pszItem, szItems);
							continue;
						}
					}
				}
				pView->RepositionTables(&pTables);
				pView->DrawTables(&cMetaDC, &pTables, TRUE);
				return TRUE;
			}
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND)
	{
		for (pView->EnumTables(&pTables), ptTable.x = ptTable.y = 0; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)) || !lstrlen(pszTable); )
		{
			if ((pTable[0] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_DPF)))))
			{
				ptTable.x = pTable[0]->GetCellsBounds().left;
				ptTable.y = pTable[0]->GetCellsBounds().top;
			}
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)))
				{
					pTable[0]->OffsetCells(CSize(-ptTable));
					pTable[0]->OffsetRect(-ptTable);
				}
			}
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
				{
					if (GetPrintTableContents(pView, pTable[0]->GetName(), pszItem, szItems))
					{
						pView->UpdateTableContents(&pTables, pTable[0], pszItem, szItems);
						continue;
					}
				}
			}
			pView->RepositionTables(&pTables);
			pView->DrawTables(&cMetaDC, &pTables, TRUE);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD)
	{
		for (pView->EnumTables(&pTables), ptTable.x = ptTable.y = 0; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)) || !lstrlen(pszTable); )
		{
			if ((pTable[0] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_GPF)))))
			{
				ptTable.x = pTable[0]->GetCellsBounds().left;
				ptTable.y = pTable[0]->GetCellsBounds().top;
			}
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)))
				{
					pTable[0]->OffsetCells(CSize(-ptTable));
					pTable[0]->OffsetRect(-ptTable);
				}
			}
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
				{
					if (GetPrintTableContents(pView, pTable[0]->GetName(), pszItem, szItems))
					{
						pView->UpdateTableContents(&pTables, pTable[0], pszItem, szItems);
						continue;
					}
				}
			}
			pView->RepositionTables(&pTables);
			pView->DrawTables(&cMetaDC, &pTables, TRUE);
			return TRUE;
		}
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD)
	{
		for (pView->EnumTables(&pTables), ptTable.x = ptTable.y = 0; !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)) || !lstrlen(pszTable); )
		{
			if ((pTable[0] = pTables.GetAt(pTables.Find(STRING(IDS_DATABASE_TABLE_PPF)))))
			{
				ptTable.x = pTable[0]->GetCellsBounds().left;
				ptTable.y = pTable[0]->GetCellsBounds().top;
			}
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)))
				{
					pTable[0]->OffsetCells(CSize(-ptTable));
					pTable[0]->OffsetRect(-ptTable);
				}
			}
			for (nTable = 0, nTables = (INT)pTables.GetSize(); nTable < nTables; nTable++)
			{
				if ((pTable[0] = pTables.GetAt(nTable)) != (CTableViewObject *)NULL)
				{
					if (GetPrintTableContents(pView, pTable[0]->GetName(), pszItem, szItems))
					{
						pView->UpdateTableContents(&pTables, pTable[0], pszItem, szItems);
						continue;
					}
				}
			}
			pView->RepositionTables(&pTables);
			pView->DrawTables(&cMetaDC, &pTables, TRUE);
			return TRUE;
		}
	}
	return FALSE;
}

ULONGLONG CALTELDatabaseEngine::TranslateTableNameToComponent(CONST CDatabaseTableView *pView, LPCTSTR pszTable) CONST
{
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF))) return(DATABASE_COMPONENT_TMPACKET | DATABASE_SUBCOMPONENT_NONE);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH))) return(DATABASE_COMPONENT_TMPACKET | DATABASE_SUBCOMPONENT_TMPACKETHEADER);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR))) return(DATABASE_COMPONENT_TMPACKET | DATABASE_SUBCOMPONENT_TMPACKETSTREAM);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF))) return(DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_NONE);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP))) return(DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCFUNCTIONPACKET);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP))) return(DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCFUNCTIONPREEXEGROUP);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP))) return(DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCFUNCTIONEXEVERGROUP);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS))) return(DATABASE_COMPONENT_TCFUNCTION | DATABASE_SUBCOMPONENT_TCPARAMETERSET);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF))) return(DATABASE_COMPONENT_TCSEQUENCE | DATABASE_SUBCOMPONENT_NONE);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF))) return(DATABASE_COMPONENT_TCSEQUENCE | DATABASE_SUBCOMPONENT_TCFUNCTIONBLOCK);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN))) return(DATABASE_COMPONENT_OBPROCESSOR | DATABASE_SUBCOMPONENT_NONE);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG))) return(DATABASE_COMPONENT_OBPROCESSOR | DATABASE_SUBCOMPONENT_OBPROCESSORMEMORYIMAGE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF))) return(DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_NONE);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) return(DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMNUMCALTABLE);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) return(DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMTXTCALTABLE);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) return(DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMNUMOOLTABLE);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) return(DATABASE_COMPONENT_TMPARAMETER | DATABASE_SUBCOMPONENT_TMTXTOOLTABLE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF))) return(DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_NONE);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL))) return(DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCNUMCALTABLE);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF))) return(DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCTXTCALTABLE);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF))) return(DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCNUMOOLTABLE);
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF))) return(DATABASE_COMPONENT_TCPARAMETER | DATABASE_SUBCOMPONENT_TCTXTOOLTABLE);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND) return((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF))) ? (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_NONE) : 0);
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD) return((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF))) ? (DATABASE_COMPONENT_GRD | DATABASE_SUBCOMPONENT_NONE) : 0);
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD) return((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF))) ? (DATABASE_COMPONENT_POD | DATABASE_SUBCOMPONENT_NONE) : 0);
	return 0;
}

CString CALTELDatabaseEngine::TranslateComponentToTableName(CONST CDatabaseTableView *pView, ULONGLONG nComponent) CONST
{
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPACKET  &&  DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPACKET)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE) return STRING(IDS_DATABASE_TABLE_PMF);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMPACKETHEADER) return STRING(IDS_DATABASE_TABLE_DFH);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMPACKETSTREAM) return STRING(IDS_DATABASE_TABLE_STR);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCFUNCTION  &&  DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE) return STRING(IDS_DATABASE_TABLE_CCF);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONPACKET) return STRING(IDS_DATABASE_TABLE_TCP);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONPREEXEGROUP) return STRING(IDS_DATABASE_TABLE_PVP);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONEXEVERGROUP) return STRING(IDS_DATABASE_TABLE_CVP);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCPARAMETERSET) return STRING(IDS_DATABASE_TABLE_CPS);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCSEQUENCE  &&  DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE) return STRING(IDS_DATABASE_TABLE_CSF);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCFUNCTIONBLOCK) return STRING(IDS_DATABASE_TABLE_BCF);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_OBPROCESSOR  &&  DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE) return STRING(IDS_DATABASE_TABLE_GEN);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_OBPROCESSORMEMORYIMAGE) return STRING(IDS_DATABASE_TABLE_PIMG);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TMPARAMETER  &&  DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE) return STRING(IDS_DATABASE_TABLE_PCF);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMNUMCALTABLE) return STRING(IDS_DATABASE_TABLE_CAL);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMTXTCALTABLE) return STRING(IDS_DATABASE_TABLE_TXF);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMNUMOOLTABLE) return STRING(IDS_DATABASE_TABLE_OCF);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TMTXTOOLTABLE) return STRING(IDS_DATABASE_TABLE_FXF);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_TCPARAMETER  &&  DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_NONE) return STRING(IDS_DATABASE_TABLE_CPC);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCNUMCALTABLE) return STRING(IDS_DATABASE_TABLE_CAL);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCTXTCALTABLE) return STRING(IDS_DATABASE_TABLE_TXF);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCNUMOOLTABLE) return STRING(IDS_DATABASE_TABLE_OCF);
		if (DATABASESUBCOMPONENTFROMCODE(nComponent) == DATABASE_SUBCOMPONENT_TCTXTOOLTABLE) return STRING(IDS_DATABASE_TABLE_FXF);
	}
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_AND  &&  DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_AND) return STRING(IDS_DATABASE_TABLE_DPF);
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_GRD  &&  DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_GRD) return STRING(IDS_DATABASE_TABLE_GPF);
	if (DATABASECOMPONENTFROMCODE(pView->GetComponent()) == DATABASE_COMPONENT_POD  &&  DATABASECOMPONENTFROMCODE(nComponent) == DATABASE_COMPONENT_POD) return STRING(IDS_DATABASE_TABLE_PPF);
	return EMPTYSTRING;
}

INT CALTELDatabaseEngine::TranslateTableFieldToIndex(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszField) CONST
{
	INT  nField;
	INT  nFields;
	ULONGLONG  nComponent;

	if ((nComponent = DATABASECOMPONENTFROMCODE(pView->GetComponent())) == DATABASE_COMPONENT_TMPACKET)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)))
		{
			for (nField = MINDATABASETABLEPMFFIELDID, nFields = MAXDATABASETABLEPMFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEPMFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)))
		{
			for (nField = MINDATABASETABLEPLFFIELDID, nFields = MAXDATABASETABLEPLFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEPLFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)))
		{
			for (nField = MINDATABASETABLEDFHFIELDID, nFields = MAXDATABASETABLEDFHFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEDFHFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)))
		{
			for (nField = MINDATABASETABLESTRFIELDID, nFields = MAXDATABASETABLESTRFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLESTRFIELDID) : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)))
		{
			for (nField = MINDATABASETABLECCFFIELDID, nFields = MAXDATABASETABLECCFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECCFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)))
		{
			for (nField = MINDATABASETABLETCPFIELDID, nFields = MAXDATABASETABLETCPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLETCPFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)))
		{
			for (nField = MINDATABASETABLECDFFIELDID, nFields = MAXDATABASETABLECDFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECDFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)))
		{
			for (nField = MINDATABASETABLEPCDFFIELDID, nFields = MAXDATABASETABLEPCDFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEPCDFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)))
		{
			for (nField = MINDATABASETABLEPVPFIELDID, nFields = MAXDATABASETABLEPVPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEPVPFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)))
		{
			for (nField = MINDATABASETABLECVPFIELDID, nFields = MAXDATABASETABLECVPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECVPFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)))
		{
			for (nField = MINDATABASETABLEPEVFIELDID, nFields = MAXDATABASETABLEPEVFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEPEVFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)))
		{
			for (nField = MINDATABASETABLECEVFIELDID, nFields = MAXDATABASETABLECEVFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECEVFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS)))
		{
			for (nField = MINDATABASETABLEPCPSFIELDID, nFields = MAXDATABASETABLEPCPSFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEPCPSFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)))
		{
			for (nField = MINDATABASETABLECPSFIELDID, nFields = MAXDATABASETABLECPSFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECPSFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)))
		{
			for (nField = MINDATABASETABLECPSPFIELDID, nFields = MAXDATABASETABLECPSPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECPSPFIELDID) : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)))
		{
			for (nField = MINDATABASETABLECSFFIELDID, nFields = MAXDATABASETABLECSFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECSFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)))
		{
			for (nField = MINDATABASETABLECSSFIELDID, nFields = MAXDATABASETABLECSSFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECSSFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)))
		{
			for (nField = MINDATABASETABLECSPFIELDID, nFields = MAXDATABASETABLECSPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECSPFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)))
		{
			for (nField = MINDATABASETABLESDFFIELDID, nFields = MAXDATABASETABLESDFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLESDFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)))
		{
			for (nField = MINDATABASETABLEBCFFIELDID, nFields = MAXDATABASETABLEBCFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEBCFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF)))
		{
			for (nField = MINDATABASETABLEBCCFFIELDID, nFields = MAXDATABASETABLEBCCFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEBCCFFIELDID) : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)))
		{
			for (nField = MINDATABASETABLEGENFIELDID, nFields = MAXDATABASETABLEGENFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEGENFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)))
		{
			for (nField = MINDATABASETABLEPIMGFIELDID, nFields = MAXDATABASETABLEPIMGFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEPIMGFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)))
		{
			for (nField = MINDATABASETABLEMADFIELDID, nFields = MAXDATABASETABLEMADFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEMADFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)))
		{
			for (nField = MINDATABASETABLEMEMFIELDID, nFields = MAXDATABASETABLEMEMFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEMEMFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)))
		{
			for (nField = MINDATABASETABLEIMGFIELDID, nFields = MAXDATABASETABLEIMGFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEIMGFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP)))
		{
			for (nField = MINDATABASETABLEIMGPFIELDID, nFields = MAXDATABASETABLEIMGPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEIMGPFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)))
		{
			for (nField = MINDATABASETABLECRCFIELDID, nFields = MAXDATABASETABLECRCFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECRCFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT)))
		{
			for (nField = MINDATABASETABLECATFIELDID, nFields = MAXDATABASETABLECATFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECATFIELDID) : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)))
		{
			for (nField = MINDATABASETABLEPCFFIELDID, nFields = MAXDATABASETABLEPCFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEPCFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)))
		{
			for (nField = MINDATABASETABLECALFIELDID, nFields = MAXDATABASETABLECALFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECALFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)))
		{
			for (nField = MINDATABASETABLETXFFIELDID, nFields = MAXDATABASETABLETXFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLETXFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)))
		{
			for (nField = MINDATABASETABLEOCFFIELDID, nFields = MAXDATABASETABLEOCFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEOCFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			for (nField = MINDATABASETABLEFXFFIELDID, nFields = MAXDATABASETABLEFXFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEFXFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)))
		{
			for (nField = MINDATABASETABLEPCALFIELDID, nFields = MAXDATABASETABLEPCALFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEPCALFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)))
		{
			for (nField = MINDATABASETABLEPTXFFIELDID, nFields = MAXDATABASETABLEPTXFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEPTXFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)))
		{
			for (nField = MINDATABASETABLEPOCFFIELDID, nFields = MAXDATABASETABLEPOCFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEPOCFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)))
		{
			for (nField = MINDATABASETABLEPFXFFIELDID, nFields = MAXDATABASETABLEPFXFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEPFXFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)))
		{
			for (nField = MINDATABASETABLECALPFIELDID, nFields = MAXDATABASETABLECALPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECALPFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			for (nField = MINDATABASETABLETXFPFIELDID, nFields = MAXDATABASETABLETXFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLETXFPFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)))
		{
			for (nField = MINDATABASETABLEOCFPFIELDID, nFields = MAXDATABASETABLEOCFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEOCFPFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			for (nField = MINDATABASETABLEFXFPFIELDID, nFields = MAXDATABASETABLEFXFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEFXFPFIELDID) : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)))
		{
			for (nField = MINDATABASETABLECPCFIELDID, nFields = MAXDATABASETABLECPCFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECPCFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)))
		{
			for (nField = MINDATABASETABLECALFIELDID, nFields = MAXDATABASETABLECALFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECALFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)))
		{
			for (nField = MINDATABASETABLETXFFIELDID, nFields = MAXDATABASETABLETXFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLETXFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)))
		{
			for (nField = MINDATABASETABLEOCFFIELDID, nFields = MAXDATABASETABLEOCFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEOCFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			for (nField = MINDATABASETABLEFXFFIELDID, nFields = MAXDATABASETABLEFXFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEFXFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)))
		{
			for (nField = MINDATABASETABLECALPFIELDID, nFields = MAXDATABASETABLECALPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLECALPFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			for (nField = MINDATABASETABLETXFPFIELDID, nFields = MAXDATABASETABLETXFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLETXFPFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)))
		{
			for (nField = MINDATABASETABLEOCFPFIELDID, nFields = MAXDATABASETABLEOCFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEOCFPFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			for (nField = MINDATABASETABLEFXFPFIELDID, nFields = MAXDATABASETABLEFXFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEFXFPFIELDID) : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_AND)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)))
		{
			for (nField = MINDATABASETABLEDPFFIELDID, nFields = MAXDATABASETABLEDPFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEDPFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)))
		{
			for (nField = MINDATABASETABLEDPFPFIELDID, nFields = MAXDATABASETABLEDPFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEDPFPFIELDID) : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_GRD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)))
		{
			for (nField = MINDATABASETABLEGPFFIELDID, nFields = MAXDATABASETABLEGPFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEGPFFIELDID) : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)))
		{
			for (nField = MINDATABASETABLEGPFPFIELDID, nFields = MAXDATABASETABLEGPFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEGPFPFIELDID) : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_POD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)))
		{
			for (nField = MINDATABASETABLEPPFFIELDID, nFields = MAXDATABASETABLEPPFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? (nField - MINDATABASETABLEPPFFIELDID) : -1);
		}
	}
	return -1;
}

UINT CALTELDatabaseEngine::TranslateTableFieldToID(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszField) CONST
{
	UINT  nField;
	UINT  nFields;
	ULONGLONG  nComponent;

	if ((nComponent = DATABASECOMPONENTFROMCODE(pView->GetComponent())) == DATABASE_COMPONENT_TMPACKET)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)))
		{
			for (nField = MINDATABASETABLEPMFFIELDID, nFields = MAXDATABASETABLEPMFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)))
		{
			for (nField = MINDATABASETABLEPLFFIELDID, nFields = MAXDATABASETABLEPLFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)))
		{
			for (nField = MINDATABASETABLEDFHFIELDID, nFields = MAXDATABASETABLEDFHFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)))
		{
			for (nField = MINDATABASETABLESTRFIELDID, nFields = MAXDATABASETABLESTRFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_TCFUNCTION)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)))
		{
			for (nField = MINDATABASETABLECCFFIELDID, nFields = MAXDATABASETABLECCFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)))
		{
			for (nField = MINDATABASETABLETCPFIELDID, nFields = MAXDATABASETABLETCPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)))
		{
			for (nField = MINDATABASETABLECDFFIELDID, nFields = MAXDATABASETABLECDFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)))
		{
			for (nField = MINDATABASETABLEPCDFFIELDID, nFields = MAXDATABASETABLEPCDFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)))
		{
			for (nField = MINDATABASETABLEPVPFIELDID, nFields = MAXDATABASETABLEPVPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)))
		{
			for (nField = MINDATABASETABLECVPFIELDID, nFields = MAXDATABASETABLECVPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)))
		{
			for (nField = MINDATABASETABLEPEVFIELDID, nFields = MAXDATABASETABLEPEVFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)))
		{
			for (nField = MINDATABASETABLECEVFIELDID, nFields = MAXDATABASETABLECEVFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS)))
		{
			for (nField = MINDATABASETABLEPCPSFIELDID, nFields = MAXDATABASETABLEPCPSFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)))
		{
			for (nField = MINDATABASETABLECPSFIELDID, nFields = MAXDATABASETABLECPSFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)))
		{
			for (nField = MINDATABASETABLECPSPFIELDID, nFields = MAXDATABASETABLECPSPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)))
		{
			for (nField = MINDATABASETABLECSFFIELDID, nFields = MAXDATABASETABLECSFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)))
		{
			for (nField = MINDATABASETABLECSSFIELDID, nFields = MAXDATABASETABLECSSFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)))
		{
			for (nField = MINDATABASETABLECSPFIELDID, nFields = MAXDATABASETABLECSPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)))
		{
			for (nField = MINDATABASETABLESDFFIELDID, nFields = MAXDATABASETABLESDFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)))
		{
			for (nField = MINDATABASETABLEBCFFIELDID, nFields = MAXDATABASETABLEBCFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF)))
		{
			for (nField = MINDATABASETABLEBCCFFIELDID, nFields = MAXDATABASETABLEBCCFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)))
		{
			for (nField = MINDATABASETABLEGENFIELDID, nFields = MAXDATABASETABLEGENFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)))
		{
			for (nField = MINDATABASETABLEPIMGFIELDID, nFields = MAXDATABASETABLEPIMGFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)))
		{
			for (nField = MINDATABASETABLEMADFIELDID, nFields = MAXDATABASETABLEMADFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)))
		{
			for (nField = MINDATABASETABLEMEMFIELDID, nFields = MAXDATABASETABLEMEMFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)))
		{
			for (nField = MINDATABASETABLEIMGFIELDID, nFields = MAXDATABASETABLEIMGFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP)))
		{
			for (nField = MINDATABASETABLEIMGPFIELDID, nFields = MAXDATABASETABLEIMGPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)))
		{
			for (nField = MINDATABASETABLECRCFIELDID, nFields = MAXDATABASETABLECRCFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT)))
		{
			for (nField = MINDATABASETABLECATFIELDID, nFields = MAXDATABASETABLECATFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)))
		{
			for (nField = MINDATABASETABLEPCFFIELDID, nFields = MAXDATABASETABLEPCFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)))
		{
			for (nField = MINDATABASETABLECALFIELDID, nFields = MAXDATABASETABLECALFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)))
		{
			for (nField = MINDATABASETABLETXFFIELDID, nFields = MAXDATABASETABLETXFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)))
		{
			for (nField = MINDATABASETABLEOCFFIELDID, nFields = MAXDATABASETABLEOCFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			for (nField = MINDATABASETABLEFXFFIELDID, nFields = MAXDATABASETABLEFXFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)))
		{
			for (nField = MINDATABASETABLEPCALFIELDID, nFields = MAXDATABASETABLEPCALFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)))
		{
			for (nField = MINDATABASETABLEPTXFFIELDID, nFields = MAXDATABASETABLEPTXFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)))
		{
			for (nField = MINDATABASETABLEPOCFFIELDID, nFields = MAXDATABASETABLEPOCFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)))
		{
			for (nField = MINDATABASETABLEPFXFFIELDID, nFields = MAXDATABASETABLEPFXFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)))
		{
			for (nField = MINDATABASETABLECALPFIELDID, nFields = MAXDATABASETABLECALPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			for (nField = MINDATABASETABLETXFPFIELDID, nFields = MAXDATABASETABLETXFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)))
		{
			for (nField = MINDATABASETABLEOCFPFIELDID, nFields = MAXDATABASETABLEOCFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			for (nField = MINDATABASETABLEFXFPFIELDID, nFields = MAXDATABASETABLEFXFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)))
		{
			for (nField = MINDATABASETABLECPCFIELDID, nFields = MAXDATABASETABLECPCFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)))
		{
			for (nField = MINDATABASETABLECALFIELDID, nFields = MAXDATABASETABLECALFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)))
		{
			for (nField = MINDATABASETABLETXFFIELDID, nFields = MAXDATABASETABLETXFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)))
		{
			for (nField = MINDATABASETABLEOCFFIELDID, nFields = MAXDATABASETABLEOCFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			for (nField = MINDATABASETABLEFXFFIELDID, nFields = MAXDATABASETABLEFXFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)))
		{
			for (nField = MINDATABASETABLECALPFIELDID, nFields = MAXDATABASETABLECALPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			for (nField = MINDATABASETABLETXFPFIELDID, nFields = MAXDATABASETABLETXFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)))
		{
			for (nField = MINDATABASETABLEOCFPFIELDID, nFields = MAXDATABASETABLEOCFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			for (nField = MINDATABASETABLEFXFPFIELDID, nFields = MAXDATABASETABLEFXFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_AND)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)))
		{
			for (nField = MINDATABASETABLEDPFFIELDID, nFields = MAXDATABASETABLEDPFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)))
		{
			for (nField = MINDATABASETABLEDPFPFIELDID, nFields = MAXDATABASETABLEDPFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_GRD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)))
		{
			for (nField = MINDATABASETABLEGPFFIELDID, nFields = MAXDATABASETABLEGPFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)))
		{
			for (nField = MINDATABASETABLEGPFPFIELDID, nFields = MAXDATABASETABLEGPFPFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
	}
	if (nComponent == DATABASE_COMPONENT_POD)
	{
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)))
		{
			for (nField = MINDATABASETABLEPPFFIELDID, nFields = MAXDATABASETABLEPPFFIELDID; nField <= nFields; nField++)
			{
				if (!lstrcmp(pszField, STRING(nField))) break;
				continue;
			}
			return((nField <= nFields) ? nField : -1);
		}
	}
	return -1;
}

BOOL CALTELDatabaseEngine::IsTableFieldID(CONST CDatabaseTableView *pView, LPCTSTR pszTable, UINT nControlID) CONST
{
	ULONGLONG  nComponent;

	if ((nComponent = DATABASECOMPONENTFROMCODE(pView->GetComponent())) == DATABASE_COMPONENT_TMPACKET)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEPMFFIELDID  &&  nControlID <= MAXDATABASETABLEPMFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEPLFFIELDID  &&  nControlID <= MAXDATABASETABLEPLFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEDFHFIELDID  &&  nControlID <= MAXDATABASETABLEDFHFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLESTRFIELDID  &&  nControlID <= MAXDATABASETABLESTRFIELDID) return TRUE;
		return FALSE;
	}
	if (nComponent == DATABASE_COMPONENT_TCFUNCTION)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECCFFIELDID  &&  nControlID <= MAXDATABASETABLECCFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLETCPFIELDID  &&  nControlID <= MAXDATABASETABLETCPFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECDFFIELDID  &&  nControlID <= MAXDATABASETABLECDFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEPCDFFIELDID  &&  nControlID <= MAXDATABASETABLEPCDFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEPVPFIELDID  &&  nControlID <= MAXDATABASETABLEPVPFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECVPFIELDID  &&  nControlID <= MAXDATABASETABLECVPFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEPEVFIELDID  &&  nControlID <= MAXDATABASETABLEPEVFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECEVFIELDID  &&  nControlID <= MAXDATABASETABLECEVFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEPCPSFIELDID  &&  nControlID <= MAXDATABASETABLEPCPSFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECPSFIELDID  &&  nControlID <= MAXDATABASETABLECPSFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECPSPFIELDID  &&  nControlID <= MAXDATABASETABLECPSPFIELDID) return TRUE;
		return FALSE;
	}
	if (nComponent == DATABASE_COMPONENT_TCSEQUENCE)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECSFFIELDID  &&  nControlID <= MAXDATABASETABLECSFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECSSFIELDID  &&  nControlID <= MAXDATABASETABLECSSFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECSPFIELDID  &&  nControlID <= MAXDATABASETABLECSPFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLESDFFIELDID  &&  nControlID <= MAXDATABASETABLESDFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEBCFFIELDID  &&  nControlID <= MAXDATABASETABLEBCFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEBCCFFIELDID  &&  nControlID <= MAXDATABASETABLEBCCFFIELDID) return TRUE;
		return FALSE;
	}
	if (nComponent == DATABASE_COMPONENT_OBPROCESSOR)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEGENFIELDID  &&  nControlID <= MAXDATABASETABLEGENFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PIMG)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEPIMGFIELDID  &&  nControlID <= MAXDATABASETABLEPIMGFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEMADFIELDID  &&  nControlID <= MAXDATABASETABLEMADFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEMEMFIELDID  &&  nControlID <= MAXDATABASETABLEMEMFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEIMGFIELDID  &&  nControlID <= MAXDATABASETABLEIMGFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_IMGP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEIMGPFIELDID  &&  nControlID <= MAXDATABASETABLEIMGPFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECRCFIELDID  &&  nControlID <= MAXDATABASETABLECRCFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECATFIELDID  &&  nControlID <= MAXDATABASETABLECATFIELDID) return TRUE;
		return FALSE;
	}
	if (nComponent == DATABASE_COMPONENT_TMPARAMETER)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEPCFFIELDID  &&  nControlID <= MAXDATABASETABLEPCFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECALFIELDID  &&  nControlID <= MAXDATABASETABLECALFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLETXFFIELDID  &&  nControlID <= MAXDATABASETABLETXFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEOCFFIELDID  &&  nControlID <= MAXDATABASETABLEOCFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEFXFFIELDID  &&  nControlID <= MAXDATABASETABLEFXFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEPCALFIELDID  &&  nControlID <= MAXDATABASETABLEPCALFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEPTXFFIELDID  &&  nControlID <= MAXDATABASETABLEPTXFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEPOCFFIELDID  &&  nControlID <= MAXDATABASETABLEPOCFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEPFXFFIELDID  &&  nControlID <= MAXDATABASETABLEPFXFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECALPFIELDID  &&  nControlID <= MAXDATABASETABLECALPFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLETXFPFIELDID  &&  nControlID <= MAXDATABASETABLETXFPFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEOCFPFIELDID  &&  nControlID <= MAXDATABASETABLEOCFPFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEFXFPFIELDID  &&  nControlID <= MAXDATABASETABLEFXFPFIELDID) return TRUE;
		return FALSE;
	}
	if (nComponent == DATABASE_COMPONENT_TCPARAMETER)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECPCFIELDID  &&  nControlID <= MAXDATABASETABLECPCFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECALFIELDID  &&  nControlID <= MAXDATABASETABLECALFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLETXFFIELDID  &&  nControlID <= MAXDATABASETABLETXFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEOCFFIELDID  &&  nControlID <= MAXDATABASETABLEOCFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEFXFFIELDID  &&  nControlID <= MAXDATABASETABLEFXFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLECALPFIELDID  &&  nControlID <= MAXDATABASETABLECALPFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLETXFPFIELDID  &&  nControlID <= MAXDATABASETABLETXFPFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEOCFPFIELDID  &&  nControlID <= MAXDATABASETABLEOCFPFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEFXFPFIELDID  &&  nControlID <= MAXDATABASETABLEFXFPFIELDID) return TRUE;
		return FALSE;
	}
	if (nComponent == DATABASE_COMPONENT_AND)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEDPFFIELDID  &&  nControlID <= MAXDATABASETABLEDPFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEDPFPFIELDID  &&  nControlID <= MAXDATABASETABLEDPFPFIELDID) return TRUE;
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)) && !lstrcmp(pszTable, STRING(nControlID))) return TRUE;
		return FALSE;
	}
	if (nComponent == DATABASE_COMPONENT_GRD)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEGPFFIELDID  &&  nControlID <= MAXDATABASETABLEGPFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEGPFPFIELDID  &&  nControlID <= MAXDATABASETABLEGPFPFIELDID) return TRUE;
		if (!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)) && !lstrcmp(pszTable, STRING(nControlID))) return TRUE;
		return FALSE;
	}
	if (nComponent == DATABASE_COMPONENT_POD)
	{
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)) || !lstrlen(pszTable)) && nControlID >= MINDATABASETABLEPPFFIELDID  &&  nControlID <= MAXDATABASETABLEPPFFIELDID) return TRUE;
		if ((!lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) || !lstrcmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS))) && !lstrcmp(pszTable, STRING(nControlID))) return TRUE;
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTMPacket *pDatabaseTMPacket, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTMPacketParameter  *pDatabaseTMPacketParameter;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PMF))))
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PMF_PACKID)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacket->SetTag(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PMF_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacket->SetDescription(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PMF_FUNC)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacket->SetDetails(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacket->SetDataFieldHeader(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PMF_APID)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacket->SetAPID((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PMF_TMTY)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacket->SetTMType((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PMF_TMID)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacket->SetTMID((pCell->GetValue(sValue)) ? (INT)sValue.Value.uValue : -1);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PMF_3VAL)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacket->Set3Disc((pCell->GetValue(sValue)) ? (INT)sValue.Value.uValue : -1);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PMF_SMPRT)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacket->SetTransmissionRate((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PMF_VALID)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacket->SetTransmissionRetries((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PMF_LENG)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacket->SetDataSize((pCell->GetValue(sValue)) ? (INT)(sValue.Value.nValue - 1) : -1);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PMF_VCID)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacket->SetVirtualChannel((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PMF_EVENTID)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacket->SetEventIDParameter((GetTMParameters()->GetAt((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1)) ? GetTMParameters()->GetAt((INT)sValue.Value.nValue)->GetTag() : EMPTYSTRING);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PMF_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacket->SetStatus(TranslateTMPacketStatus(pCell->GetText(), FALSE));
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PLF), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PLF)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTMPacketParameter = pDatabaseTMPacket->GetAt(nIndex)))
					{
						if ((pDatabaseTMPacketParameter = new CDatabaseTMPacketParameter))
						{
							EmptyTableRow(pDatabaseTMPacketParameter);
							pDatabaseTMPacket->InsertAt(nIndex, pDatabaseTMPacketParameter, 1);
						}
					}
					if ((pDatabaseTMPacketParameter = pDatabaseTMPacket->GetAt(nIndex)))
					{
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_NAME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketParameter->SetTag(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_OFFBY))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketParameter->SetBytePos((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_OFFBI))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketParameter->SetBitPos((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_NBOCC))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketParameter->SetOccurrenceCount((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_LGOCC))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketParameter->SetOccurrenceInterval((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PLF_VALID))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketParameter->SetValidityParameter(pCell->GetText());
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTMPacket->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTMPacketParameter = pDatabaseTMPacket->GetAt(nItem))) delete pDatabaseTMPacketParameter;
				pDatabaseTMPacket->RemoveAt(nItem);
			}
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PMF), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PLF), nControlID) || nControlID == (UINT)-1) && nRow == nRows)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTCPacket *pDatabaseTCPacket, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_TCP))))
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_TCP_PACKID)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPacket->SetTag(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_TCP_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPacket->SetDescription(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_TCP_FUNC)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPacket->SetDetails(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_TCP_HFLG)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPacket->SetDataFieldHeaderFlag((pCell->GetValue(sValue)) ? (BOOL)sValue.Value.nValue : FALSE);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_TCP_APID)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPacket->SetAPID((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_TCP_LENG)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPacket->SetDataSize((pCell->GetValue(sValue)) ? (INT)(sValue.Value.nValue - 1) : -1);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_TCP_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPacket->SetStatus(TranslateTCPacketStatus(pCell->GetText(), FALSE));
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PCDF), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PCDF)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTCPacketParameter = pDatabaseTCPacket->GetAt(nIndex)))
					{
						if ((pDatabaseTCPacketParameter = new CDatabaseTCPacketParameter))
						{
							EmptyTableRow(pDatabaseTCPacketParameter);
							pDatabaseTCPacket->InsertAt(nIndex, pDatabaseTCPacketParameter, 1);
						}
					}
					if ((pDatabaseTCPacketParameter = pDatabaseTCPacket->GetAt(nIndex)))
					{
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_PNAME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPacketParameter->SetTag(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_DESCR))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPacketParameter->SetDescription(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPacketParameter->SetAttributes((pDatabaseTCPacketParameter->GetAttributes() & ~(TCPACKETPARAMETER_TYPE_VARIABLE | TCPACKETPARAMETER_TYPE_FIXED)) | TranslateTCPacketParameterType(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_ELLEN))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPacketParameter->SetWidth((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_BITOFF))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1))
						{
							pDatabaseTCPacketParameter->SetBytePos((pCell->GetValue(sValue)) ? (INT)(sValue.Value.nValue / 8) : -1);
							pDatabaseTCPacketParameter->SetBitPos((pCell->GetValue(sValue)) ? (INT)(sValue.Value.nValue % 8) : -1);
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_VTYPE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPacketParameter->SetAttributes((pDatabaseTCPacketParameter->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED)) | TranslateTCPacketParameterValueInterpretation(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_RADIX))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPacketParameter->SetAttributes((pDatabaseTCPacketParameter->GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | TranslateTCPacketParameterValueRadix(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_CODING))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPacketParameter->SetAttributes((pDatabaseTCPacketParameter->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) | TranslateTCPacketParameterValueCoding(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PCDF_VALUE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPacketParameter->SetConstValueAsText(pCell->GetText());
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTCPacket->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTCPacketParameter = pDatabaseTCPacket->GetAt(nItem))) delete pDatabaseTCPacketParameter;
				pDatabaseTCPacket->RemoveAt(nItem);
			}
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_TCP), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PCDF), nControlID) || nControlID == (UINT)-1) && nRow == nRows)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTCFunction *pDatabaseTCFunction, UINT nControlID) CONST
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	INT  nRow[2];
	INT  nRows[2];
	CStringArray  szSets;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_CCF))))
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_CNAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetName(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetDescription(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_CTYPE)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetAttributes((pDatabaseTCFunction->GetAttributes() & ~(TCFUNCTION_TYPE_INTGT | TCFUNCTION_TYPE_INTG | TCFUNCTION_TYPE_HP1 | TCFUNCTION_TYPE_HP2 | TCFUNCTION_TYPE_HPC2 | TCFUNCTION_TYPE_ICS | TCFUNCTION_TYPE_RBI | TCFUNCTION_TYPE_HL | TCFUNCTION_TYPE_ML | TCFUNCTION_TYPE_MLP | TCFUNCTION_TYPE_RM | TCFUNCTION_TYPE_SC | TCFUNCTION_TYPE_LSC)) | TranslateTCFunctionType(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_TCPID)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetTCPacket(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_ADD)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetTCID((pCell->GetValue(sValue)) ? (INT)sValue.Value.uValue : -1);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_LDESC)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetDetails(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_DESS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetDestinationSubSystem(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_DEUN)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetDestinationEquipment(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_ROUTS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetRouterSubSystem(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_ROUTU)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetRouterEquipment(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_OPINFO)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetOperationalInfo(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_VALID)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetValidityConditions(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_FUNC)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetExtendedDescription(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_ALTC)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetAssociatedTelecommands(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_CMPTC)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetComplementaryTelecommands(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_SSCH)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetDestinationSubSchedule(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_TCTYPE)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetAttributes((pDatabaseTCFunction->GetAttributes() & ~(TCFUNCTION_EXETYPE_IMMEDIATE | TCFUNCTION_EXETYPE_TIMETAG | TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) | TranslateTCFunctionTCType(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_HAZ)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetAttributes((pDatabaseTCFunction->GetAttributes() & ~(TCFUNCTION_HAZFLAG_VITAL | TCFUNCTION_HAZFLAG_HAZARDOUS | TCFUNCTION_HAZFLAG_NONCRITICAL)) | TranslateTCFunctionHazardousFlag(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_COSEV)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetMissionPlannerEvent(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_PVPID)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetPreExeGroup(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_CVPID)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetExeVerGroup(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CCF_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunction->SetStatus(TranslateTCFunctionStatus(pCell->GetText(), FALSE));
		}
		for (nRow[0] = nRows[0] = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CDF), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CDF)) : (CTableViewObject *)NULL); )
		{
			for (nRow[0] = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows[0] = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow[0] - 1) : 0, nCount = 0; nRow[0] < nRows[0]; nRow[0]++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow[0]) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTCFunctionElement = pDatabaseTCFunction->GetAt(nIndex)))
					{
						if ((pDatabaseTCFunctionElement = new CDatabaseTCFunctionElement))
						{
							EmptyTableRow(pDatabaseTCFunctionElement);
							pDatabaseTCFunction->InsertAt(nIndex, pDatabaseTCFunctionElement, 1);
						}
					}
					if ((pDatabaseTCFunctionElement = pDatabaseTCFunction->GetAt(nIndex)))
					{
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CDF_PNAME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunctionElement->SetName(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CDF_DESCR))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunctionElement->SetDescription(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CDF_ELTYPE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunctionElement->SetAttributes((pDatabaseTCFunctionElement->GetAttributes() & ~(TCFUNCTIONELEMENT_TYPE_PARAMETER | TCFUNCTIONELEMENT_TYPE_CONSTANT)) | TranslateTCFunctionElementType(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CDF_ELLEN))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunctionElement->SetWidth((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CDF_BITOFF))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1))
						{
							pDatabaseTCFunctionElement->SetBytePos((pCell->GetValue(sValue)) ? (INT)(sValue.Value.nValue / 8) : -1);
							pDatabaseTCFunctionElement->SetBitPos((pCell->GetValue(sValue)) ? (INT)(sValue.Value.nValue % 8) : -1);
						}
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CDF_VTYPE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunctionElement->SetAttributes((pDatabaseTCFunctionElement->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED)) | TranslateTCFunctionElementValueInterpretation(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CDF_RADIX))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunctionElement->SetAttributes((pDatabaseTCFunctionElement->GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | TranslateTCFunctionElementValueRadix(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CDF_VALUE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunctionElement->SetConstValueAsText(pCell->GetText());
						nIndex++;
						continue;
					}
					nRows[0] = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTCFunction->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTCFunctionElement = pDatabaseTCFunction->GetAt(nItem))) delete pDatabaseTCFunctionElement;
				pDatabaseTCFunction->RemoveAt(nItem);
			}
			break;
		}
		for (nRow[1] = nRows[1] = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PCPS), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PCPS)) : (CTableViewObject *)NULL); )
		{
			for (nRow[1] = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows[1] = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow[1] - 1) : 0, nCount = 0; nRow[1] < nRows[1]; nRow[1]++)
			{
				if ((pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_PCPS_NAME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1))
				{
					if (!pCell->GetText().IsEmpty())
					{
						if (pDatabaseTCFunction->GetParameterSets(szSets) >= 0)
						{
							szSets.SetAtGrow(nIndex, pCell->GetText());
							pDatabaseTCFunction->SetParameterSets(szSets);
						}
						nIndex++;
						continue;
					}
					nCount++;
				}
			}
			for (nItem = pDatabaseTCFunction->GetParameterSets(szSets) - 1, nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				szSets.RemoveAt(nItem);
				continue;
			}
			pDatabaseTCFunction->SetParameterSets(szSets);
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CCF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CDF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PCPS), nControlID) || nControlID == (UINT)-1) ? (nRow[0] == nRows[0] && nRow[1] == nRows[1]) : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTCSequence *pDatabaseTCSequence, UINT nControlID) CONST
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	INT  nRow[3];
	INT  nRows[3];
	CString  szMemory[2];
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCParameters  pDatabaseTCParameters;
	CDatabaseTCSequenceEntry  *pDatabaseTCSequenceEntry;
	CDatabaseTCSequenceEntryParameter  *pDatabaseTCSequenceEntryParameter;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_CSF))))
	{
		for (nIndex = ((nIndex = pView->m_nDatabaseTCSequenceIndex) < 0) ? pView->m_pDatabaseTCSequences[0].Find(pTable->GetCellText(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CSF_NAME)))) : nIndex; nIndex >= 0 && pView->m_pDatabaseTCSequences[0].GetAt(nIndex) != pDatabaseTCSequence; )
		{
			pDatabaseTCSequence->Copy(pView->m_pDatabaseTCSequences[0].GetAt(nIndex));
			break;
		}
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CSF_NAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequence->SetName(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CSF_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequence->SetDescription(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CSF_SEQDATE)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequence->SetDate(CTimeTag(CTableViewTimeSpinCtrl::TranslateTime(pCell->GetText())).GetTimeInSeconds());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CSF_SEQUSER)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequence->SetUser(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CSF_DOCNAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequence->SetDocumentName(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CSF_DOCISSUE)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequence->SetDocumentIssue(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CSF_DOCDATE)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequence->SetDocumentDate(CTimeTag(CTableViewTimeSpinCtrl::TranslateTime(pCell->GetText())).GetTimeInSeconds());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CSF_COSEV)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequence->SetMissionPlannerEvent(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CSF_SSCH)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequence->SetDestinationSubSchedule(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CSF_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequence->SetStatus(TranslateTCSequenceStatus(pCell->GetText(), FALSE));
		}
		for (nRow[0] = nRows[0] = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CSS), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CSS)) : (CTableViewObject *)NULL); )
		{
			for (nRow[0] = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows[0] = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow[0] - 1) : 0, nCount = 0; nRow[0] < nRows[0]; nRow[0]++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow[0]) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTCSequenceEntry = pDatabaseTCSequence->GetAt(nIndex)))
					{
						if ((pDatabaseTCSequenceEntry = new CDatabaseTCSequenceEntry))
						{
							EmptyTableRow(pDatabaseTCSequenceEntry);
							pDatabaseTCSequence->InsertAt(nIndex, pDatabaseTCSequenceEntry, 1);
						}
					}
					if ((pDatabaseTCSequenceEntry = pDatabaseTCSequence->GetAt(nIndex)))
					{
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CSS_IDENT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntry->SetName(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CSS_TYPE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntry->SetAttributes((pDatabaseTCSequenceEntry->GetAttributes() & ~(TCSEQUENCEENTRY_TYPE_FUNCTION | TCSEQUENCEENTRY_TYPE_SEQUENCE | TCSEQUENCEENTRY_TYPE_PROCEDURE)) | TranslateTCSequenceEntryType(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CSS_TCTYPE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntry->SetAttributes((pDatabaseTCSequenceEntry->GetAttributes() & ~(TCSEQUENCEENTRY_EXETYPE_IMMEDIATE | TCSEQUENCEENTRY_EXETYPE_TIMETAG | TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP | TCSEQUENCEENTRY_EXETYPE_SECONDSTEP)) | TranslateTCSequenceEntrySubType(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CSS_1STEP))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntry->SetAssociated1Step(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CSS_COMMENT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntry->SetDescription(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CSS_RELTIME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntry->SetReleaseDeltaTime((DWORD)((CTableViewTimeSpinCtrl::TranslateTime(pCell->GetText()) % (1000000 * (TIMETAG)SECONDSPERDAY)) / 1000));
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CSS_ABSTIME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntry->SetExecutionTime(CTableViewTimeSpinCtrl::TranslateTime(pCell->GetText()));
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CSS_EXETIME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntry->SetExecutionDeltaTime((DWORD)abs(CTableViewTimeSpinCtrl::TranslateTime(pCell->GetText()) / 1000), (CTableViewTimeSpinCtrl::TranslateTime(pCell->GetText()) < 0) ? TRUE : FALSE);
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CSS_GROUP))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntry->SetAttributes((pDatabaseTCSequenceEntry->GetAttributes() & ~(TCSEQUENCEENTRY_FLAG_NOGROUPMEMBER | TCSEQUENCEENTRY_FLAG_GROUPMEMBER)) | TranslateTCSequenceEntryGroupFlag(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntry->SetAttributes((pDatabaseTCSequenceEntry->GetAttributes() & ~(TCSEQUENCEENTRY_FLAG_NOMACRO | TCSEQUENCEENTRY_FLAG_BLOCKMACRO)) | TranslateTCSequenceEntryBlockFlag(pCell->GetText(), pTable->GetCellText(pCell->y, STRING(IDS_DATABASE_TABLE_CSS_BLOCK)), FALSE));
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_CSS_BLOCK))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1))
						{
							pDatabaseTCSequenceEntry->SetAttributes((TranslateTCSequenceEntryBlockMembership(pCell->GetText()) > 0) ? (pDatabaseTCSequenceEntry->GetAttributes() | TCSEQUENCEENTRY_FLAG_BLOCKMEMBER) : (pDatabaseTCSequenceEntry->GetAttributes() & ~TCSEQUENCEENTRY_FLAG_BLOCKMEMBER));
							pDatabaseTCSequenceEntry->SetBlockMembership(TranslateTCSequenceEntryBlockMembership(pCell->GetText()));
						}
						if (pDatabaseTCSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_TYPE_SEQUENCE) pDatabaseTCSequenceEntry->RemoveAll();
						nIndex++;
						continue;
					}
					nRows[0] = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTCSequence->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTCSequenceEntry = pDatabaseTCSequence->GetAt(nItem))) delete pDatabaseTCSequenceEntry;
				pDatabaseTCSequence->RemoveAt(nItem);
			}
			break;
		}
		for (nRow[1] = nRows[1] = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_SDF), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_SDF)) : (CTableViewObject *)NULL) && pTable->IsVisible(); )
		{
			for (nItem = (!pDatabaseTCSequence->GetAt((nIndex = max(pView->GetTableFloatingAlignment(pTable->GetName()) - 1, 0)))) ? (INT)pDatabaseTCSequence->GetSize() : (nIndex + 1), nItems = nIndex; nItem <= nItems; nItem++)
			{
				if ((pDatabaseTCSequenceEntry = new CDatabaseTCSequenceEntry))
				{
					EmptyTableRow(pDatabaseTCSequenceEntry);
					pDatabaseTCSequence->InsertAt(nItem, pDatabaseTCSequenceEntry, 1);
					continue;
				}
				break;
			}
			if ((pDatabaseTCSequenceEntry = pDatabaseTCSequence->GetAt(nIndex)))
			{
				for (nRow[1] = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows[1] = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow[1] - 1) : 0, nCount = 0; nRow[1] < nRows[1]; nRow[1]++)
				{
					if (!pView->IsTableRowEmpty(pTable, nRow[1]) || nControlID != (UINT)-1)
					{
						if (!(pDatabaseTCSequenceEntryParameter = pDatabaseTCSequenceEntry->GetAt(nIndex)))
						{
							if ((pDatabaseTCSequenceEntryParameter = new CDatabaseTCSequenceEntryParameter))
							{
								EmptyTableRow(pDatabaseTCSequenceEntryParameter);
								pDatabaseTCSequenceEntry->InsertAt(nIndex, pDatabaseTCSequenceEntryParameter, 1);
							}
						}
						if ((pDatabaseTCSequenceEntryParameter = pDatabaseTCSequenceEntry->GetAt(nIndex)))
						{
							if ((pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_SDF_PNAME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntryParameter->SetTag(pCell->GetText());
							if ((pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_SDF_BITOFF))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1))
							{
								pDatabaseTCSequenceEntryParameter->SetBytePos(((pDatabaseTCSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_TYPE_PROCEDURE) == 0) ? ((pCell->TranslateText(pCell->GetText(), sValue)) ? (INT)(sValue.Value.nValue / 8) : -1) : (nRow[1] - 1));
								pDatabaseTCSequenceEntryParameter->SetBitPos(((pDatabaseTCSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_TYPE_PROCEDURE) == 0) ? ((pCell->TranslateText(pCell->GetText(), sValue)) ? (INT)(sValue.Value.nValue % 8) : -1) : 0);
							}
							if ((pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_SDF_COMMENT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntryParameter->SetDescription(pCell->GetText());
							if ((pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_SDF_VALTYPE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntryParameter->SetAttributes((pDatabaseTCSequenceEntryParameter->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_VTYPE_FORMAL)) | TranslateTCSequenceEntryParameterValueType(pCell->GetText(), FALSE));
							if ((pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_SDF_VALRADIX))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntryParameter->SetAttributes((pDatabaseTCSequenceEntryParameter->GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | TranslateTCSequenceEntryParameterValueRadix(pCell->GetText(), FALSE));
							if ((pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_SDF_VALUE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntryParameter->SetConstValueAsText(pCell->GetText());
							for (pDatabaseTCSequenceEntryParameter->GetMemoryArea(szMemory[0], szMemory[1]); (pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_SDF_PSET))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
							{
								pDatabaseTCSequenceEntryParameter->SetMemoryArea(pCell->GetText(), szMemory[1]);
								break;
							}
							if ((pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_SDF_PSINST))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCSequenceEntryParameter->SetMemoryArea(szMemory[0], pCell->GetText());
							nIndex++;
							continue;
						}
						nRows[1] = -1;
						break;
					}
					nCount++;
				}
				for (nItem = (INT)(pDatabaseTCSequenceEntry->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
				{
					if ((pDatabaseTCSequenceEntryParameter = pDatabaseTCSequenceEntry->GetAt(nItem))) delete pDatabaseTCSequenceEntryParameter;
					pDatabaseTCSequenceEntry->RemoveAt(nItem);
				}
				break;
			}
			nRows[1] = -1;
			break;
		}
		for (nRow[2] = nRows[2] = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CSP), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CSP)) : (CTableViewObject *)NULL); )
		{
			for (nRow[2] = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows[2] = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), pDatabaseTCSequence->GetParameters(pDatabaseTCParameters), nIndex = (nControlID != (UINT)-1) ? (nRow[2] - 1) : 0, nCount = 0; nRow[2] < nRows[2]; nRow[2]++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow[2]) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTCParameter = pDatabaseTCParameters.GetAt(nIndex)))
					{
						if ((pDatabaseTCParameter = new CDatabaseTCParameter))
						{
							EmptyTableRow(pDatabaseTCParameter);
							pDatabaseTCParameters.InsertAt(nIndex, pDatabaseTCParameter, 1);
						}
					}
					if ((pDatabaseTCParameter = pDatabaseTCParameters.GetAt(nIndex)))
					{
						if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_CSP_FPNAME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetTag(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_CSP_DESCR))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetDescription(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_CSP_UNIT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetUnit(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_CSP_LENGTH))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetWidth((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
						if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_CSP_VTYPE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetAttributes((pDatabaseTCParameter->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_VTYPE_CUSTOM)) | TranslateTCSequenceParameterValueType(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_CSP_CATEG))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetAttributes((pDatabaseTCParameter->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TranslateTCSequenceParameterCategory(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_CSP_CODING))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetAttributes((pDatabaseTCParameter->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) | TranslateTCSequenceParameterCoding(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_CSP_RADIX))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetAttributes((pDatabaseTCParameter->GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | TranslateTCSequenceParameterValueRadix(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_CSP_CALREF))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetCalTable((pCell->IsEnabled()) ? pCell->GetText() : EMPTYSTRING);
						if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_CSP_OCFREF))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetOolTable((pCell->IsEnabled()) ? pCell->GetText() : EMPTYSTRING);
						if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_CSP_TXFREF))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1) && pCell->IsEnabled()) pDatabaseTCParameter->SetCalTable(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_CSP_FXFREF))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1) && pCell->IsEnabled()) pDatabaseTCParameter->SetOolTable(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_CSP_DEFVAL))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetConstValueAsText(pCell->GetText());
						nIndex++;
						continue;
					}
					nRows[2] = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTCParameters.GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTCParameter = pDatabaseTCParameters.GetAt(nItem))) delete pDatabaseTCParameter;
				pDatabaseTCParameters.RemoveAt(nItem);
			}
			pDatabaseTCSequence->SetParameters(pDatabaseTCParameters);
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CSF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CSS), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_SDF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CSP), nControlID) || nControlID == (UINT)-1) ? (nRow[0] == nRows[0] && nRow[1] == nRows[1] && nRow[2] == nRows[2]) : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseOBProcessor *pDatabaseOBProcessor, UINT nControlID) CONST
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	INT  nRow[5];
	INT  nRows[5];
	UINT  nAddress[2][3];
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseOBProcessorMemoryArea  *pDatabaseOBProcessorMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;
	CDatabaseOBProcessorMemoryAreaBlock  *pDatabaseOBProcessorMemoryAreaBlock;
	CDatabaseOBProcessorMemoryImageBlock  *pDatabaseOBProcessorMemoryImageBlock;
	CDatabaseOBProcessorMemoryAreaCheckSum  *pDatabaseOBProcessorMemoryAreaCheckSum;
	CDatabaseOBProcessorMemoryAreaCatalogue  *pDatabaseOBProcessorMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pDatabaseOBProcessorMemoryAreaCatalogueEntry;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_GEN))))
	{
		for (nIndex = ((nIndex = pView->m_nDatabaseOBProcessorIndex) < 0) ? pView->m_pDatabaseOBProcessors[0].Find(pTable->GetCellText(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)))) : nIndex; nIndex >= 0 && pView->m_pDatabaseOBProcessors[0].GetAt(nIndex) != pDatabaseOBProcessor; )
		{
			pDatabaseOBProcessor->Copy(pView->m_pDatabaseOBProcessors[0].GetAt(nIndex));
			break;
		}
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessor->SetName(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GEN_PATCHTC)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessor->SetPatchCommand((GetTCFunctions()->GetAt((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1)) ? GetTCFunctions()->GetAt((INT)sValue.Value.nValue)->GetName() : EMPTYSTRING);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GEN_DUMPTC)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessor->SetDumpCommand((GetTCFunctions()->GetAt((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1)) ? GetTCFunctions()->GetAt((INT)sValue.Value.nValue)->GetName() : EMPTYSTRING);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GEN_TMPKT)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessor->SetDumpPacket((GetTMPackets()->GetAt((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1)) ? GetTMPackets()->GetAt((INT)sValue.Value.nValue)->GetTag() : EMPTYSTRING);
			for (pDatabaseOBProcessor->GetAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1]); (pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
			{
				pDatabaseOBProcessor->SetAddressRange((nAddress[0][0] = (pTable->TranslateCellText(pCell->GetControlID(), pCell->GetText(), sValue)) ? (UINT)sValue.Value.uValue : -1), nAddress[1][0], nAddress[0][1], nAddress[1][1]);
				break;
			}
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GEN_STARTADDR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessor->SetAddressRange(nAddress[0][0], (nAddress[1][0] = (pTable->TranslateCellText(pCell->GetControlID(), pCell->GetText(), sValue)) ? (UINT)sValue.Value.uValue : -1), nAddress[0][1], nAddress[1][1]);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessor->SetAddressRange(nAddress[0][0], nAddress[1][0], (nAddress[0][1] = (pTable->TranslateCellText(pCell->GetControlID(), pCell->GetText(), sValue)) ? (UINT)sValue.Value.uValue : -1), nAddress[1][1]);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GEN_ENDADDR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessor->SetAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], (nAddress[1][1] = (pTable->TranslateCellText(pCell->GetControlID(), pCell->GetText(), sValue)) ? (UINT)sValue.Value.uValue : -1));
			for (pDatabaseOBProcessor->SetDetails(TranslateOBProcessorAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1])); (pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GEN_INTERVAL)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
			{
				pDatabaseOBProcessor->SetDumpInterval((pTable->TranslateCellText(pCell->GetControlID(), pCell->GetText(), sValue)) ? sValue.Value.nValue : -1);
				break;
			}
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessor->SetDumpCount((pTable->TranslateCellText(pCell->GetControlID(), pCell->GetText(), sValue)) ? (INT)sValue.Value.nValue : -1);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GEN_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessor->SetStatus(TranslateOBProcessorStatus(pCell->GetText(), FALSE));
		}
		for (nRow[0] = nRows[0] = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_MAD), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_MAD)) : (CTableViewObject *)NULL); )
		{
			for (nRow[0] = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows[0] = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow[0] - 1) : 0, nCount = 0; nRow[0] < nRows[0]; nRow[0]++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow[0]) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nIndex)))
					{
						if ((pDatabaseOBProcessorMemoryArea = new CDatabaseOBProcessorMemoryArea))
						{
							EmptyTableRow(pDatabaseOBProcessorMemoryArea);
							pDatabaseOBProcessor->InsertAt(nIndex, pDatabaseOBProcessorMemoryArea, 1);
						}
					}
					if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nIndex)))
					{
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_MAD_NAME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryArea->SetName(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_MAD_DESCR))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryArea->SetDescription(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_MAD_TYPE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryArea->SetAttributes((pDatabaseOBProcessorMemoryArea->GetAttributes() & ~(OBPROCESSORMEMORYAREA_TYPE_MEMORY | OBPROCESSORMEMORYAREA_TYPE_IMAGE)) | TranslateOBProcessorMemoryAreaType(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_MAD_PATCHTC))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryArea->SetPatchCommand(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_MAD_DUMPTC))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryArea->SetDumpCommand(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_MAD_TMPKT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryArea->SetDumpPacket(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_MAD_PATCHABLE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryArea->SetAttributes((pDatabaseOBProcessorMemoryArea->GetAttributes() & ~(OBPROCESSORMEMORYAREA_FLAG_PATCHABLE | OBPROCESSORMEMORYAREA_FLAG_NONPATCHABLE)) | TranslateOBProcessorMemoryAreaPatchFlag(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_MAD_DUMPABLE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryArea->SetAttributes((pDatabaseOBProcessorMemoryArea->GetAttributes() & ~(OBPROCESSORMEMORYAREA_FLAG_DUMPABLE | OBPROCESSORMEMORYAREA_FLAG_NONDUMPABLE)) | TranslateOBProcessorMemoryAreaDumpFlag(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_MAD_UPDATE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryArea->SetAttributes((pDatabaseOBProcessorMemoryArea->GetAttributes() & ~(OBPROCESSORMEMORYAREA_FLAG_UPDATE | OBPROCESSORMEMORYAREA_FLAG_NOUPDATE)) | TranslateOBProcessorMemoryAreaUpdateFlag(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow[0], STRING(IDS_DATABASE_TABLE_MAD_INHIBIT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryArea->SetAttributes((pDatabaseOBProcessorMemoryArea->GetAttributes() & ~(OBPROCESSORMEMORYAREA_FLAG_INHIBIT | OBPROCESSORMEMORYAREA_FLAG_NOINHIBIT)) | TranslateOBProcessorMemoryAreaInhibitFlag(pCell->GetText(), FALSE));
						nIndex++;
						continue;
					}
					nRows[0] = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseOBProcessor->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nItem))) delete pDatabaseOBProcessorMemoryArea;
				pDatabaseOBProcessor->RemoveAt(nItem);
			}
			break;
		}
		for (nRow[1] = nRows[1] = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_MEM), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_MEM)) : (CTableViewObject *)NULL) && pTable->IsVisible(); )
		{
			for (nItem = (!pDatabaseOBProcessor->GetAt((nIndex = max(pView->GetTableFloatingAlignment(pTable->GetName()) - 1, 0)))) ? (INT)pDatabaseOBProcessor->GetSize() : (nIndex + 1), nItems = nIndex; nItem <= nItems; nItem++)
			{
				if ((pDatabaseOBProcessorMemoryArea = new CDatabaseOBProcessorMemoryArea))
				{
					EmptyTableRow(pDatabaseOBProcessorMemoryArea);
					pDatabaseOBProcessor->InsertAt(nItem, pDatabaseOBProcessorMemoryArea, 1);
					continue;
				}
				break;
			}
			if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nIndex)))
			{
				for (nRow[1] = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows[1] = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow[1] - 1) : 0, nCount = 0; nRow[1] < nRows[1]; nRow[1]++)
				{
					if (!pView->IsTableRowEmpty(pTable, nRow[1]) || nControlID != (UINT)-1)
					{
						if (!(pDatabaseOBProcessorMemoryAreaBlock = pDatabaseOBProcessorMemoryArea->GetAt(nIndex)))
						{
							if ((pDatabaseOBProcessorMemoryAreaBlock = new CDatabaseOBProcessorMemoryAreaBlock))
							{
								EmptyTableRow(pDatabaseOBProcessorMemoryAreaBlock);
								pDatabaseOBProcessorMemoryArea->InsertAt(nIndex, pDatabaseOBProcessorMemoryAreaBlock, 1);
							}
						}
						if ((pDatabaseOBProcessorMemoryAreaBlock = pDatabaseOBProcessorMemoryArea->GetAt(nIndex)))
						{
							if ((pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_MEM_TMNAME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaBlock->SetTMParameter(pCell->GetText());
							if ((pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_MEM_TCNAME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaBlock->SetTCParameter(pCell->GetText());
							if ((pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_MEM_DESCR))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaBlock->SetDescription(pCell->GetText());
							for (pDatabaseOBProcessorMemoryAreaBlock->GetAddress(nAddress[0][0], nAddress[0][1]); (pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_MEM_PAGE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
							{
								pDatabaseOBProcessorMemoryAreaBlock->SetAddress((nAddress[0][0] = (pCell->TranslateText(pCell->GetText(), sValue)) ? (UINT)sValue.Value.uValue : -1), nAddress[0][1]);
								break;
							}
							if ((pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_MEM_ADDRESS))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaBlock->SetAddress(nAddress[0][0], (nAddress[0][1] = (pCell->TranslateText(pCell->GetText(), sValue)) ? (UINT)sValue.Value.uValue : -1));
							if ((pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_MEM_BITOFF))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaBlock->SetBitOffset((pCell->TranslateText(pCell->GetText(), sValue)) ? (INT)sValue.Value.nValue : -1);
							if ((pCell = pTable->FindCell(nRow[1], STRING(IDS_DATABASE_TABLE_MEM_WIDTH))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaBlock->SetBitWidth((pCell->TranslateText(pCell->GetText(), sValue)) ? (INT)sValue.Value.nValue : 0);
							nIndex++;
							continue;
						}
						nRows[1] = -1;
						break;
					}
					nCount++;
				}
				for (nItem = (INT)(pDatabaseOBProcessorMemoryArea->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
				{
					if ((pDatabaseOBProcessorMemoryAreaBlock = pDatabaseOBProcessorMemoryArea->GetAt(nItem))) delete pDatabaseOBProcessorMemoryAreaBlock;
					pDatabaseOBProcessorMemoryArea->RemoveAt(nItem);
				}
				break;
			}
			nRows[1] = -1;
			break;
		}
		for (nRow[2] = nRows[2] = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_IMG), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_IMG)) : (CTableViewObject *)NULL) && pTable->IsVisible(); )
		{
			for (nItem = (!pDatabaseOBProcessor->GetAt((nIndex = max(pView->GetTableFloatingAlignment(pTable->GetName()) - 1, 0)))) ? (INT)pDatabaseOBProcessor->GetSize() : (nIndex + 1), nItems = nIndex; nItem <= nItems; nItem++)
			{
				if ((pDatabaseOBProcessorMemoryArea = new CDatabaseOBProcessorMemoryArea))
				{
					EmptyTableRow(pDatabaseOBProcessorMemoryArea);
					pDatabaseOBProcessor->InsertAt(nItem, pDatabaseOBProcessorMemoryArea, 1);
					continue;
				}
				break;
			}
			if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nIndex)))
			{
				if ((pDatabaseOBProcessorMemoryImage = new CDatabaseOBProcessorMemoryImage))
				{
					if (pDatabaseOBProcessorMemoryArea->GetMemoryImage(pDatabaseOBProcessorMemoryImage))
					{
						for (nRow[2] = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows[2] = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow[2] - 1) : 0, nCount = 0; nRow[2] < nRows[2]; nRow[2]++)
						{
							if (!pView->IsTableRowEmpty(pTable, nRow[2]) || nControlID != (UINT)-1)
							{
								if (!(pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nIndex)))
								{
									if ((pDatabaseOBProcessorMemoryImageBlock = new CDatabaseOBProcessorMemoryImageBlock))
									{
										EmptyTableRow(pDatabaseOBProcessorMemoryImageBlock);
										pDatabaseOBProcessorMemoryImage->InsertAt(nIndex, pDatabaseOBProcessorMemoryImageBlock, 1);
									}
								}
								if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nIndex)))
								{
									if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_IMG_VERSION))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryImageBlock->SetVersion(pCell->GetText());
									for (pDatabaseOBProcessorMemoryImageBlock->GetAddress(nAddress[0][0], nAddress[0][1]); (pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_IMG_PAGE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
									{
										pDatabaseOBProcessorMemoryImageBlock->SetAddress((nAddress[0][0] = (pCell->TranslateText(pCell->GetText(), sValue)) ? (UINT)sValue.Value.uValue : -1), nAddress[0][1]);
										break;
									}
									if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_IMG_ADDRESS))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryImageBlock->SetAddress(nAddress[0][0], (nAddress[0][1] = (pCell->TranslateText(pCell->GetText(), sValue)) ? (UINT)sValue.Value.uValue : -1));
									if ((pCell = pTable->FindCell(nRow[2], STRING(IDS_DATABASE_TABLE_IMG_DATA))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryImageBlock->SetData(pCell->GetText());
									nIndex++;
									continue;
								}
								nRows[2] = -1;
								break;
							}
							nCount++;
						}
						for (nItem = (INT)(pDatabaseOBProcessorMemoryImage->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
						{
							if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nItem))) delete pDatabaseOBProcessorMemoryImageBlock;
							pDatabaseOBProcessorMemoryImage->RemoveAt(nItem);
						}
						pDatabaseOBProcessorMemoryArea->SetMemoryImage(pDatabaseOBProcessorMemoryImage);
						delete pDatabaseOBProcessorMemoryImage;
						break;
					}
					delete pDatabaseOBProcessorMemoryImage;
				}
			}
			nRows[2] = -1;
			break;
		}
		for (nRow[3] = nRows[3] = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CRC), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CRC)) : (CTableViewObject *)NULL) && pTable->IsVisible(); )
		{
			for (nItem = (!pDatabaseOBProcessor->GetAt((nIndex = max(pView->GetTableFloatingAlignment(pTable->GetName()) - 1, 0)))) ? (INT)pDatabaseOBProcessor->GetSize() : (nIndex + 1), nItems = nIndex; nItem <= nItems; nItem++)
			{
				if ((pDatabaseOBProcessorMemoryArea = new CDatabaseOBProcessorMemoryArea))
				{
					EmptyTableRow(pDatabaseOBProcessorMemoryArea);
					pDatabaseOBProcessor->InsertAt(nItem, pDatabaseOBProcessorMemoryArea, 1);
					continue;
				}
				break;
			}
			if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nIndex)))
			{
				if ((pDatabaseOBProcessorMemoryAreaCheckSum = new CDatabaseOBProcessorMemoryAreaCheckSum))
				{
					if (pDatabaseOBProcessorMemoryArea->GetCheckSum(pDatabaseOBProcessorMemoryAreaCheckSum) >= 0)
					{
						for (nRow[3] = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows[3] = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow[3] - 1) : 0, nCount = 0; nRow[3] < nRows[3]; nRow[3]++)
						{
							if ((pCell = pTable->FindCell(nRow[3], STRING(IDS_DATABASE_TABLE_CRC_DEST))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaCheckSum->SetDestination((pCell->TranslateText(pCell->GetText(), sValue)) ? (UINT)sValue.Value.uValue : (UINT)-1);
							if ((pCell = pTable->FindCell(nRow[3], STRING(IDS_DATABASE_TABLE_CRC_LENGTH))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaCheckSum->SetLength((pCell->TranslateText(pCell->GetText(), sValue)) ? (INT)sValue.Value.nValue : 0);
							for (pDatabaseOBProcessorMemoryAreaCheckSum->GetAddressRange(nAddress[0][0], nAddress[0][1], nAddress[0][2]); (pCell = pTable->FindCell(nRow[3], STRING(IDS_DATABASE_TABLE_CRC_PAGE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
							{
								pDatabaseOBProcessorMemoryAreaCheckSum->SetAddressRange((nAddress[0][0] = (pCell->TranslateText(pCell->GetText(), sValue)) ? (UINT)sValue.Value.uValue : -1), nAddress[0][1], nAddress[0][2]);
								break;
							}
							if ((pCell = pTable->FindCell(nRow[3], STRING(IDS_DATABASE_TABLE_CRC_START))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaCheckSum->SetAddressRange(nAddress[0][0], (nAddress[0][1] = (pCell->TranslateText(pCell->GetText(), sValue)) ? (UINT)sValue.Value.uValue : -1), nAddress[0][2]);
							if ((pCell = pTable->FindCell(nRow[3], STRING(IDS_DATABASE_TABLE_CRC_END))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaCheckSum->SetAddressRange(nAddress[0][0], nAddress[0][1], (nAddress[0][2] = (pCell->TranslateText(pCell->GetText(), sValue)) ? (UINT)sValue.Value.uValue : -1));
							if ((pCell = pTable->FindCell(nRow[3], STRING(IDS_DATABASE_TABLE_CRC_SEED))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaCheckSum->SetSeed((pCell->TranslateText(pCell->GetText(), sValue)) ? (UINT)sValue.Value.uValue : -1);
							continue;
						}
						pDatabaseOBProcessorMemoryArea->SetCheckSum(pDatabaseOBProcessorMemoryAreaCheckSum);
						delete pDatabaseOBProcessorMemoryAreaCheckSum;
						break;
					}
					delete pDatabaseOBProcessorMemoryAreaCheckSum;
				}
			}
			nRows[3] = -1;
			break;
		}
		for (nRow[4] = nRows[4] = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CAT), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CAT)) : (CTableViewObject *)NULL) && pTable->IsVisible(); )
		{
			for (nItem = (!pDatabaseOBProcessor->GetAt((nIndex = max(pView->GetTableFloatingAlignment(pTable->GetName()) - 1, 0)))) ? (INT)pDatabaseOBProcessor->GetSize() : (nIndex + 1), nItems = nIndex; nItem <= nItems; nItem++)
			{
				if ((pDatabaseOBProcessorMemoryArea = new CDatabaseOBProcessorMemoryArea))
				{
					EmptyTableRow(pDatabaseOBProcessorMemoryArea);
					pDatabaseOBProcessor->InsertAt(nItem, pDatabaseOBProcessorMemoryArea, 1);
					continue;
				}
				break;
			}
			if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nIndex)))
			{
				if ((pDatabaseOBProcessorMemoryAreaCatalogue = new CDatabaseOBProcessorMemoryAreaCatalogue))
				{
					if (pDatabaseOBProcessorMemoryArea->GetCatalogue(pDatabaseOBProcessorMemoryAreaCatalogue))
					{
						for (nRow[4] = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows[4] = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow[4] - 1) : 0, nCount = 0; nRow[4] < nRows[4]; nRow[4]++)
						{
							if (!pView->IsTableRowEmpty(pTable, nRow[4]) || nControlID != (UINT)-1)
							{
								if (!(pDatabaseOBProcessorMemoryAreaCatalogueEntry = pDatabaseOBProcessorMemoryAreaCatalogue->GetAt(nIndex)))
								{
									if ((pDatabaseOBProcessorMemoryAreaCatalogueEntry = new CDatabaseOBProcessorMemoryAreaCatalogueEntry))
									{
										EmptyTableRow(pDatabaseOBProcessorMemoryAreaCatalogueEntry);
										pDatabaseOBProcessorMemoryAreaCatalogue->InsertAt(nIndex, pDatabaseOBProcessorMemoryAreaCatalogueEntry, 1);
									}
								}
								if ((pDatabaseOBProcessorMemoryAreaCatalogueEntry = pDatabaseOBProcessorMemoryAreaCatalogue->GetAt(nIndex)))
								{
									if ((pCell = pTable->FindCell(nRow[4], STRING(IDS_DATABASE_TABLE_CAT_ID))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetName(pCell->GetText());
									if ((pCell = pTable->FindCell(nRow[4], STRING(IDS_DATABASE_TABLE_CAT_DESCR))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetDescription(pCell->GetText());
									if ((pCell = pTable->FindCell(nRow[4], STRING(IDS_DATABASE_TABLE_CAT_VERSION))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetVersion(pCell->GetText());
									if ((pCell = pTable->FindCell(nRow[4], STRING(IDS_DATABASE_TABLE_CAT_DATE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetDate(pCell->GetText());
									if ((pCell = pTable->FindCell(nRow[4], STRING(IDS_DATABASE_TABLE_CAT_TIME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetTime(pCell->GetText());
									if ((pCell = pTable->FindCell(nRow[4], STRING(IDS_DATABASE_TABLE_CAT_LOCATION))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetLocation(pCell->GetText());
									if ((pCell = pTable->FindCell(nRow[4], STRING(IDS_DATABASE_TABLE_CAT_COMPLETE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryAreaCatalogueEntry->SetAttributes((pDatabaseOBProcessorMemoryAreaCatalogueEntry->GetAttributes() & ~(OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_COMPLETE | OBPROCESSORMEMORYAREACATALOGUEENTRY_STATUS_INCOMPLETE)) | TranslateOBProcessorMemoryAreaCatalogueEntryFlag(pCell->GetText(), FALSE));
									nIndex++;
									continue;
								}
								nRows[4] = -1;
								break;
							}
							nCount++;
						}
						for (nItem = (INT)(pDatabaseOBProcessorMemoryAreaCatalogue->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
						{
							if ((pDatabaseOBProcessorMemoryAreaCatalogueEntry = pDatabaseOBProcessorMemoryAreaCatalogue->GetAt(nItem))) delete pDatabaseOBProcessorMemoryAreaCatalogueEntry;
							pDatabaseOBProcessorMemoryAreaCatalogue->RemoveAt(nItem);
						}
						pDatabaseOBProcessorMemoryArea->SetCatalogue(pDatabaseOBProcessorMemoryAreaCatalogue);
						delete pDatabaseOBProcessorMemoryAreaCatalogue;
						break;
					}
					delete pDatabaseOBProcessorMemoryAreaCatalogue;
				}
			}
			nRows[4] = -1;
			break;
		}
		for (; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PIMG), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PIMG)) : (CTableViewObject *)NULL); )
		{
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PIMG_MNAME))))) pDatabaseOBProcessor->SetMasterImage(pCell->GetText());
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_GEN), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_MAD), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_MEM), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_IMG), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CRC), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CAT), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PIMG), nControlID) || nControlID == (UINT)-1) ? (nRow[0] == nRows[0] && nRow[1] == nRows[1] && nRow[2] == nRows[2] && nRow[3] == nRows[3] && nRow[4] == nRows[4]) : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTMParameter *pDatabaseTMParameter, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CStringArray  szCalTables[2];
	CStringArray  szOolTables[2];
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCF))))
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_NAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetTag(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetDescription(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_LDESC)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetDetails(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_UNIT)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetUnit(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_NATURE)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetAttributes((pDatabaseTMParameter->GetAttributes() & ~(TMPARAMETER_NATURE_RAW | TMPARAMETER_NATURE_DERIVED | TMPARAMETER_NATURE_CONSTANT)) | TranslateTMParameterNature(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_CATEG)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetAttributes((pDatabaseTMParameter->GetAttributes() & ~(TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) | TranslateTMParameterCategory(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_TYPE)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetAttributes((pDatabaseTMParameter->GetAttributes() & ~(TMPARAMETER_TYPE_DS16 | TMPARAMETER_TYPE_DS8 | TMPARAMETER_TYPE_BIL | TMPARAMETER_TYPE_HBIL | TMPARAMETER_TYPE_AN)) | TranslateTMParameterType(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_CODING)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetAttributes((pDatabaseTMParameter->GetAttributes() & ~(TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT)) | TranslateTMParameterCoding(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_WIDTH)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetWidth((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_PARVAL)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetConstValueAsText(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_VALID)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetValidityParameter((pView->m_pDatabaseTMParameters[0].GetAt((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1)) ? pView->m_pDatabaseTMParameters[0].GetAt((INT)sValue.Value.nValue)->GetTag() : EMPTYSTRING);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_APPLC)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetValidityConditions(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_MONIT)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetDangerConditions(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_INTER)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetAttributes((pDatabaseTMParameter->GetAttributes() & ~(TMPARAMETER_INTERPRETATION_FULL | TMPARAMETER_INTERPRETATION_EXTRAPOLATE)) | TranslateTMParameterInterpretation(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_DRVEXP)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetDerivationExpression(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_TRGTYP)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetAttributes((pDatabaseTMParameter->GetAttributes() & ~(TMPARAMETER_TRIGGERTYPE_PACKET | TMPARAMETER_TRIGGERTYPE_PARAMETER | TMPARAMETER_TRIGGERTYPE_CONSTANT)) | TranslateTMParameterTriggerType(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_EXPTRG)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetTriggerExpression(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_SOURS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetSourceSubSystem(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_SOURU)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetSourceEquipment(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_ROUTS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetRouterSubSystem(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_ROUTU)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetRouterEquipment(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_OBSPAR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetAttributes((pDatabaseTMParameter->GetAttributes() & ~(TMPARAMETER_OBS_ONBOARD | TMPARAMETER_OBS_MONITOR)) | TranslateTMParameterOBSType(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_OPINFO)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetOperationalInfo(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_USECON)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetAttributes((pDatabaseTMParameter->GetAttributes() & ~(TMPARAMETER_FLAG_CONSISTENCYCHECKS | TMPARAMETER_FLAG_NOCONSISTENCYCHECKS)) | TranslateTMParameterConsistencyChecksFlag(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_INTM)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetInterrogationInstruction(TranslateTMParameterInterrogationInstruction(pCell->GetText()));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_ALTM)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetRelatedParameter(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_ASTC)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetAssociatedTelecommands(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PCF_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMParameter->SetStatus(TranslateTMParameterStatus(pCell->GetText(), FALSE));
		}
		if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PCAL))) && pTable->IsVisible())
		{
			if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
			{
				for (nRow = 1, nRows = pTable->GetRows(), szCalTables[0].RemoveAll(), szCalTables[1].RemoveAll(); nRow < nRows; nRow++)
				{
					if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
					{
						szCalTables[1].Add((pView->m_pDatabaseTMParameters[0].GetAt((pTable->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_PCAL_VALID), sValue)) ? (INT)sValue.Value.nValue : -1)) ? pView->m_pDatabaseTMParameters[0].GetAt((INT)sValue.Value.nValue)->GetTag() : EMPTYSTRING);
						szCalTables[0].Add(pTable->GetCellText(nRow, STRING(IDS_DATABASE_TABLE_PCAL_NAME)));
					}
				}
				pDatabaseTMParameter->SetCalTables(szCalTables[0], szCalTables[1]);
			}
		}
		if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PTXF))) && pTable->IsVisible())
		{
			if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
			{
				for (nRow = 1, nRows = pTable->GetRows(), szCalTables[0].RemoveAll(), szCalTables[1].RemoveAll(); nRow < nRows; nRow++)
				{
					if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
					{
						szCalTables[1].Add((pView->m_pDatabaseTMParameters[0].GetAt((pTable->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_PTXF_VALID), sValue)) ? (INT)sValue.Value.nValue : -1)) ? pView->m_pDatabaseTMParameters[0].GetAt((INT)sValue.Value.nValue)->GetTag() : EMPTYSTRING);
						szCalTables[0].Add(pTable->GetCellText(nRow, STRING(IDS_DATABASE_TABLE_PTXF_NAME)));
					}
				}
				pDatabaseTMParameter->SetCalTables(szCalTables[0], szCalTables[1]);
			}
		}
		if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_POCF))) && pTable->IsVisible())
		{
			if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
			{
				for (nRow = 1, nRows = pTable->GetRows(), szOolTables[0].RemoveAll(), szOolTables[1].RemoveAll(); nRow < nRows; nRow++)
				{
					if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
					{
						szOolTables[1].Add((pView->m_pDatabaseTMParameters[0].GetAt((pTable->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_POCF_VALID), sValue)) ? (INT)sValue.Value.nValue : -1)) ? pView->m_pDatabaseTMParameters[0].GetAt((INT)sValue.Value.nValue)->GetTag() : EMPTYSTRING);
						szOolTables[0].Add(pTable->GetCellText(nRow, STRING(IDS_DATABASE_TABLE_POCF_NAME)));
					}
				}
				pDatabaseTMParameter->SetOolTables(szOolTables[0], szOolTables[1]);
			}
		}
		if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PFXF))) && pTable->IsVisible())
		{
			if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
			{
				for (nRow = 1, nRows = pTable->GetRows(), szOolTables[0].RemoveAll(), szOolTables[1].RemoveAll(); nRow < nRows; nRow++)
				{
					if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
					{
						szOolTables[1].Add((pView->m_pDatabaseTMParameters[0].GetAt((pTable->GetCellValue(nRow, STRING(IDS_DATABASE_TABLE_PFXF_VALID), sValue)) ? (INT)sValue.Value.nValue : -1)) ? pView->m_pDatabaseTMParameters[0].GetAt((INT)sValue.Value.nValue)->GetTag() : EMPTYSTRING);
						szOolTables[0].Add(pTable->GetCellText(nRow, STRING(IDS_DATABASE_TABLE_PFXF_NAME)));
					}
				}
				pDatabaseTMParameter->SetOolTables(szOolTables[0], szOolTables[1]);
			}
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PCF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PCAL), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PTXF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_POCF), nControlID) || IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PFXF), nControlID) || nControlID == (UINT)-1) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTCParameter *pDatabaseTCParameter, UINT nControlID) CONST
{
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_CPC))))
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CPC_PNAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetTag(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CPC_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetDescription(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CPC_UNIT)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetUnit(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CPC_CODING)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetAttributes((pDatabaseTCParameter->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) | TranslateTCParameterCoding(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CPC_LENGTH)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetWidth((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CPC_CATEG)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetAttributes((pDatabaseTCParameter->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TranslateTCParameterCategory(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CPC_CALREF)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetCalTable((pCell->IsEnabled()) ? pCell->GetText() : EMPTYSTRING);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CPC_TXFREF)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1) && pCell->IsEnabled()) pDatabaseTCParameter->SetCalTable(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CPC_OCFREF)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetOolTable((pCell->IsEnabled()) ? pCell->GetText() : EMPTYSTRING);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CPC_FXFREF)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1) && pCell->IsEnabled()) pDatabaseTCParameter->SetOolTable(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CPC_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameter->SetStatus(TranslateTCParameterStatus(pCell->GetText(), FALSE));
			return TRUE;
		}
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTMNumCalTable *pDatabaseTMNumCalTable, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	double  fX;
	double  fY;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTMNumCalPoint  *pDatabaseTMNumCalPoint;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL))) && pTable->IsVisible())
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			for (pDatabaseTMNumCalTable->SetAttributes((nControlID == (UINT)-1) ? (TMCALTABLE_FORMAT_POINTS | TMCALTABLE_RAWCODING_FLOATINGPOINT | TMCALTABLE_RAWRADIX_DECIMAL | TMCALTABLE_ENGCODING_FLOATINGPOINT) : pDatabaseTMNumCalTable->GetAttributes()); (pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
			{
				pDatabaseTMNumCalTable->SetName(pCell->GetText());
				break;
			}
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CAL_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMNumCalTable->SetDescription(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CAL_UNIT)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMNumCalTable->SetUnit(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMNumCalTable->SetPoints((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CAL_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMNumCalTable->SetStatus(TranslateTMNumCalTableStatus(pCell->GetText(), FALSE));
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CALP), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CALP)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTMNumCalPoint = pDatabaseTMNumCalTable->GetAt(nIndex)))
					{
						if ((pDatabaseTMNumCalPoint = new CDatabaseTMNumCalPoint))
						{
							EmptyTableRow(pDatabaseTMNumCalPoint);
							pDatabaseTMNumCalTable->InsertAt(nIndex, pDatabaseTMNumCalPoint, 1);
						}
					}
					if ((pDatabaseTMNumCalPoint = pDatabaseTMNumCalTable->GetAt(nIndex)))
					{
						for (pDatabaseTMNumCalPoint->GetPoint(fX, fY); (pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CALP_XVAL))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
						{
							fX = (pCell->GetValue(sValue)) ? sValue.Value.fValue : NAN;
							break;
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CALP_YVAL))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) fY = (pCell->GetValue(sValue)) ? sValue.Value.fValue : NAN;
						pDatabaseTMNumCalPoint->SetPoint(fX, fY);
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTMNumCalTable->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTMNumCalPoint = pDatabaseTMNumCalTable->GetAt(nItem))) delete pDatabaseTMNumCalPoint;
				pDatabaseTMNumCalTable->RemoveAt(nItem);
			}
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CAL), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CALP), nControlID) || nControlID == (UINT)-1) && nRow == nRows)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTMTxtCalTable *pDatabaseTMTxtCalTable, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	double  fX[2];
	CString  szY;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF))) && pTable->IsVisible())
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			for (pDatabaseTMTxtCalTable->SetAttributes((nControlID == (UINT)-1) ? (TMCALTABLE_RAWCODING_FLOATINGPOINT | TMCALTABLE_RAWRADIX_DECIMAL) : pDatabaseTMTxtCalTable->GetAttributes()); (pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
			{
				pDatabaseTMTxtCalTable->SetName(pCell->GetText());
				break;
			}
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_TXF_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMTxtCalTable->SetDescription(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMTxtCalTable->SetPoints((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_TXF_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMTxtCalTable->SetStatus(TranslateTMTxtCalTableStatus(pCell->GetText(), FALSE));
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_TXFP), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_TXFP)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt(nIndex)))
					{
						if ((pDatabaseTMTxtCalPoint = new CDatabaseTMTxtCalPoint))
						{
							EmptyTableRow(pDatabaseTMTxtCalPoint);
							pDatabaseTMTxtCalTable->InsertAt(nIndex, pDatabaseTMTxtCalPoint, 1);
						}
					}
					if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt(nIndex)))
					{
						for (pDatabaseTMTxtCalPoint->GetRange(fX[0], fX[1], szY); (pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_TXFP_FROM))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
						{
							fX[0] = (pCell->GetValue(sValue)) ? (double)sValue.Value.nValue : NAN;
							break;
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_TXFP_TO))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) fX[1] = (pCell->GetValue(sValue)) ? (double)sValue.Value.nValue : NAN;
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_TXFP_TEXT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) szY = pCell->GetText();
						pDatabaseTMTxtCalPoint->SetRange(fX[0], fX[1], szY);
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTMTxtCalTable->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt(nItem))) delete pDatabaseTMTxtCalPoint;
				pDatabaseTMTxtCalTable->RemoveAt(nItem);
			}
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_TXF), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_TXFP), nControlID) || nControlID == (UINT)-1) && nRow == nRows)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTMNumOolTable *pDatabaseTMNumOolTable, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	UINT  nType;
	double  fX[2];
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTMNumOolLimit  *pDatabaseTMNumOolLimit;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF))) && pTable->IsVisible())
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			for (pDatabaseTMNumOolTable->SetAttributes((nControlID != (UINT)-1) ? pDatabaseTMNumOolTable->GetAttributes() : 0); (pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
			{
				pDatabaseTMNumOolTable->SetName(pCell->GetText());
				break;
			}
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMNumOolTable->SetChecks(TranslateTMNumOolTableCheckCount(pCell->GetText()));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMNumOolTable->SetAttributes((pDatabaseTMNumOolTable->GetAttributes() & ~(TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CHECK_CALIBRATED)) | TranslateTMNumOolTableInterpretation(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_CODING)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMNumOolTable->SetAttributes((pDatabaseTMNumOolTable->GetAttributes() & ~(TMOOLTABLE_CODING_UNSIGNEDINTEGER | TMOOLTABLE_CODING_SIGNEDINTEGER | TMOOLTABLE_CODING_FLOATINGPOINT)) | TranslateTMNumOolTableCoding((pTable->GetCellValue(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)), sValue)) ? (UINT)sValue.Value.nValue : 0, pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_RADIX)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMNumOolTable->SetAttributes((pDatabaseTMNumOolTable->GetAttributes() & ~(TMOOLTABLE_RADIX_HEXADECIMAL | TMOOLTABLE_RADIX_DECIMAL | TMOOLTABLE_RADIX_OCTAL | TMOOLTABLE_RADIX_BINARY)) | TranslateTMNumOolTableRadix((pTable->GetCellValue(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)), sValue)) ? (UINT)sValue.Value.nValue : 0, pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMNumOolTable->SetStatus(TranslateTMNumOolTableStatus(pCell->GetText(), FALSE));
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_OCFP), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_OCFP)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTMNumOolLimit = pDatabaseTMNumOolTable->GetAt(nIndex)))
					{
						if ((pDatabaseTMNumOolLimit = new CDatabaseTMNumOolLimit))
						{
							EmptyTableRow(pDatabaseTMNumOolLimit);
							pDatabaseTMNumOolTable->InsertAt(nIndex, pDatabaseTMNumOolLimit, 1);
						}
					}
					if ((pDatabaseTMNumOolLimit = pDatabaseTMNumOolTable->GetAt(nIndex)))
					{
						for (pDatabaseTMNumOolLimit->GetRange(nType, fX[0], fX[1]); (pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_OCFP_TYPE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
						{
							nType = (pCell->GetValue(sValue)) ? (UINT)sValue.Value.nValue : TMOOLLIMIT_TYPE_NONE;
							break;
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_OCFP_LVALUE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) fX[0] = (CheckTMNumOolTableLimitValue(pDatabaseTMNumOolTable->GetAttributes(), pCell->GetText())) ? TranslateTMNumOolTableLimitValue(pDatabaseTMNumOolTable->GetAttributes(), pCell->GetText()) : NAN;
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_OCFP_HVALUE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) fX[1] = (CheckTMNumOolTableLimitValue(pDatabaseTMNumOolTable->GetAttributes(), pCell->GetText())) ? TranslateTMNumOolTableLimitValue(pDatabaseTMNumOolTable->GetAttributes(), pCell->GetText()) : NAN;
						pDatabaseTMNumOolLimit->SetType(nType);
						pDatabaseTMNumOolLimit->SetRange(nType, fX[0], fX[1]);
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTMNumOolTable->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTMNumOolLimit = pDatabaseTMNumOolTable->GetAt(nItem))) delete pDatabaseTMNumOolLimit;
				pDatabaseTMNumOolTable->RemoveAt(nItem);
			}
			pDatabaseTMNumOolTable->SetLimits((INT)pDatabaseTMNumOolTable->GetSize());
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_OCF), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_OCFP), nControlID) || nControlID == (UINT)-1) && nRow == nRows)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTMTxtOolTable *pDatabaseTMTxtOolTable, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	UINT  nType;
	CString  szX[2];
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTMTxtOolLimit  *pDatabaseTMTxtOolLimit;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF))) && pTable->IsVisible())
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			for (pDatabaseTMTxtOolTable->SetAttributes((nControlID != (UINT)-1) ? pDatabaseTMTxtOolTable->GetAttributes() : 0); (pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
			{
				pDatabaseTMTxtOolTable->SetName(pCell->GetText());
				break;
			}
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMTxtOolTable->SetChecks(TranslateTMTxtOolTableCheckCount(pCell->GetText()));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_FXF_INTER)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMTxtOolTable->SetAttributes((pDatabaseTMTxtOolTable->GetAttributes() & ~(TMOOLTABLE_CHECK_RAW | TMOOLTABLE_CHECK_CALIBRATED)) | TranslateTMTxtOolTableInterpretation(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_FXF_RADIX)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMTxtOolTable->SetAttributes((pDatabaseTMTxtOolTable->GetAttributes() & ~(TMOOLTABLE_RADIX_HEXADECIMAL | TMOOLTABLE_RADIX_DECIMAL | TMOOLTABLE_RADIX_OCTAL | TMOOLTABLE_RADIX_BINARY)) | TranslateTMTxtOolTableRadix((pTable->GetCellValue(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_FXF_INTER)), sValue)) ? (UINT)sValue.Value.nValue : 0, pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_FXF_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMTxtOolTable->SetStatus(TranslateTMTxtOolTableStatus(pCell->GetText(), FALSE));
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_FXFP), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_FXFP)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTMTxtOolLimit = pDatabaseTMTxtOolTable->GetAt(nIndex)))
					{
						if ((pDatabaseTMTxtOolLimit = new CDatabaseTMTxtOolLimit))
						{
							EmptyTableRow(pDatabaseTMTxtOolLimit);
							pDatabaseTMTxtOolTable->InsertAt(nIndex, pDatabaseTMTxtOolLimit, 1);
						}
					}
					if ((pDatabaseTMTxtOolLimit = pDatabaseTMTxtOolTable->GetAt(nIndex)))
					{
						for (nType = pDatabaseTMTxtOolLimit->GetType(), pDatabaseTMTxtOolLimit->GetRange(szX[0], szX[1]); (pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_FXFP_TYPE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
						{
							nType = (pCell->GetValue(sValue)) ? (UINT)sValue.Value.nValue : TMOOLLIMIT_TYPE_NONE;
							break;
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_FXFP_FROM))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) szX[0] = pCell->GetText();
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_FXFP_TO))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) szX[1] = pCell->GetText();
						for (pDatabaseTMTxtOolLimit->SetType(nType), pDatabaseTMTxtOolLimit->SetOrder(nRow); pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_CALIBRATED; )
						{
							if (szX[0] != szX[1]) pDatabaseTMTxtOolLimit->SetRange(szX[0], szX[1]);
							if (szX[0] == szX[1]) pDatabaseTMTxtOolLimit->SetLimit(szX[0]);
							break;
						}
						if (pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_CHECK_RAW)
						{
							if (szX[0] != szX[1]) pDatabaseTMTxtOolLimit->SetRange((CheckTMTxtOolTableLimitValue(pDatabaseTMTxtOolTable->GetAttributes(), szX[0])) ? TranslateTMTxtOolTableLimitValue(pDatabaseTMTxtOolTable->GetAttributes(), szX[0]) : NAN, (CheckTMTxtOolTableLimitValue(pDatabaseTMTxtOolTable->GetAttributes(), szX[1])) ? TranslateTMTxtOolTableLimitValue(pDatabaseTMTxtOolTable->GetAttributes(), szX[1]) : NAN);
							if (szX[0] == szX[1]) pDatabaseTMTxtOolLimit->SetLimit((CheckTMTxtOolTableLimitValue(pDatabaseTMTxtOolTable->GetAttributes(), szX[0])) ? TranslateTMTxtOolTableLimitValue(pDatabaseTMTxtOolTable->GetAttributes(), szX[0]) : NAN);
						}
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTMTxtOolTable->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTMTxtOolLimit = pDatabaseTMTxtOolTable->GetAt(nItem))) delete pDatabaseTMTxtOolLimit;
				pDatabaseTMTxtOolTable->RemoveAt(nItem);
			}
			pDatabaseTMTxtOolTable->SetLimits((INT)pDatabaseTMTxtOolTable->GetSize());
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_FXF), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_FXFP), nControlID) || nControlID == (UINT)-1) && nRow == nRows)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTCNumCalTable *pDatabaseTCNumCalTable, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	double  fX;
	double  fY;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_CAL))) && pTable->IsVisible())
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			for (pDatabaseTCNumCalTable->SetAttributes((nControlID == (UINT)-1) ? (TCCALTABLE_FORMAT_POINTS | TCCALTABLE_RAWCODING_FLOATINGPOINT | TCCALTABLE_RAWRADIX_DECIMAL | TCCALTABLE_ENGCODING_FLOATINGPOINT) : pDatabaseTCNumCalTable->GetAttributes()); (pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
			{
				pDatabaseTCNumCalTable->SetName(pCell->GetText());
				break;
			}
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CAL_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCNumCalTable->SetDescription(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CAL_UNIT)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCNumCalTable->SetUnit(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCNumCalTable->SetPoints((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CAL_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCNumCalTable->SetStatus(TranslateTCNumCalTableStatus(pCell->GetText(), FALSE));
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CALP), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CALP)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTCNumCalPoint = pDatabaseTCNumCalTable->GetAt(nIndex)))
					{
						if ((pDatabaseTCNumCalPoint = new CDatabaseTCNumCalPoint))
						{
							EmptyTableRow(pDatabaseTCNumCalPoint);
							pDatabaseTCNumCalTable->InsertAt(nIndex, pDatabaseTCNumCalPoint, 1);
						}
					}
					if ((pDatabaseTCNumCalPoint = pDatabaseTCNumCalTable->GetAt(nIndex)))
					{
						for (pDatabaseTCNumCalPoint->GetPoint(fX, fY); (pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CALP_XVAL))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
						{
							fX = (pCell->GetValue(sValue)) ? sValue.Value.fValue : NAN;
							break;
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CALP_YVAL))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) fY = (pCell->GetValue(sValue)) ? sValue.Value.fValue : NAN;
						pDatabaseTCNumCalPoint->SetPoint(fX, fY);
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTCNumCalTable->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTCNumCalPoint = pDatabaseTCNumCalTable->GetAt(nItem))) delete pDatabaseTCNumCalPoint;
				pDatabaseTCNumCalTable->RemoveAt(nItem);
			}
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CAL), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CALP), nControlID) || nControlID == (UINT)-1) && nRow == nRows)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTCTxtCalTable *pDatabaseTCTxtCalTable, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	double  fX[2];
	CString  szY;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_TXF))) && pTable->IsVisible())
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			for (pDatabaseTCTxtCalTable->SetAttributes((nControlID == (UINT)-1) ? (TCCALTABLE_RAWCODING_FLOATINGPOINT | TCCALTABLE_RAWRADIX_DECIMAL) : pDatabaseTCTxtCalTable->GetAttributes()); (pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
			{
				pDatabaseTCTxtCalTable->SetName(pCell->GetText());
				break;
			}
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_TXF_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCTxtCalTable->SetDescription(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCTxtCalTable->SetPoints((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_TXF_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCTxtCalTable->SetStatus(TranslateTCTxtCalTableStatus(pCell->GetText(), FALSE));
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_TXFP), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_TXFP)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nIndex)))
					{
						if ((pDatabaseTCTxtCalPoint = new CDatabaseTCTxtCalPoint))
						{
							EmptyTableRow(pDatabaseTCTxtCalPoint);
							pDatabaseTCTxtCalTable->InsertAt(nIndex, pDatabaseTCTxtCalPoint, 1);
						}
					}
					if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nIndex)))
					{
						for (pDatabaseTCTxtCalPoint->GetRange(fX[0], fX[1], szY); (pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_TXFP_FROM))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
						{
							fX[0] = (pCell->GetValue(sValue)) ? (double)sValue.Value.nValue : NAN;
							break;
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_TXFP_TO))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) fX[1] = (pCell->GetValue(sValue)) ? (double)sValue.Value.nValue : NAN;
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_TXFP_TEXT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) szY = pCell->GetText();
						pDatabaseTCTxtCalPoint->SetRange(fX[0], fX[1], szY);
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTCTxtCalTable->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nItem))) delete pDatabaseTCTxtCalPoint;
				pDatabaseTCTxtCalTable->RemoveAt(nItem);
			}
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_TXF), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_TXFP), nControlID) || nControlID == (UINT)-1) && nRow == nRows)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTCNumOolTable *pDatabaseTCNumOolTable, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	UINT  nType;
	double  fX[2];
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTCNumOolLimit  *pDatabaseTCNumOolLimit;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_OCF))) && pTable->IsVisible())
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			for (pDatabaseTCNumOolTable->SetAttributes((nControlID != (UINT)-1) ? pDatabaseTCNumOolTable->GetAttributes() : 0); (pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
			{
				pDatabaseTCNumOolTable->SetName(pCell->GetText());
				break;
			}
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCNumOolTable->SetChecks(0);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCNumOolTable->SetAttributes((pDatabaseTCNumOolTable->GetAttributes() & ~(TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CHECK_CALIBRATED)) | TranslateTCNumOolTableInterpretation(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_CODING)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCNumOolTable->SetAttributes((pDatabaseTCNumOolTable->GetAttributes() & ~(TCOOLTABLE_CODING_UNSIGNEDINTEGER | TCOOLTABLE_CODING_SIGNEDINTEGER | TCOOLTABLE_CODING_FLOATINGPOINT)) | TranslateTCNumOolTableCoding((pTable->GetCellValue(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)), sValue)) ? (UINT)sValue.Value.nValue : 0, pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_RADIX)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCNumOolTable->SetAttributes((pDatabaseTCNumOolTable->GetAttributes() & ~(TCOOLTABLE_RADIX_HEXADECIMAL | TCOOLTABLE_RADIX_DECIMAL | TCOOLTABLE_RADIX_OCTAL | TCOOLTABLE_RADIX_BINARY)) | TranslateTCNumOolTableRadix((pTable->GetCellValue(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_INTER)), sValue)) ? (UINT)sValue.Value.nValue : 0, pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_OCF_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCNumOolTable->SetStatus(TranslateTCNumOolTableStatus(pCell->GetText(), FALSE));
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_OCFP), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_OCFP)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTCNumOolLimit = pDatabaseTCNumOolTable->GetAt(nIndex)))
					{
						if ((pDatabaseTCNumOolLimit = new CDatabaseTCNumOolLimit))
						{
							EmptyTableRow(pDatabaseTCNumOolLimit);
							pDatabaseTCNumOolTable->InsertAt(nIndex, pDatabaseTCNumOolLimit, 1);
						}
					}
					if ((pDatabaseTCNumOolLimit = pDatabaseTCNumOolTable->GetAt(nIndex)))
					{
						for (pDatabaseTCNumOolLimit->GetRange(nType, fX[0], fX[1]); (pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_OCFP_TYPE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
						{
							nType = (pCell->GetValue(sValue)) ? (UINT)sValue.Value.nValue : TCOOLLIMIT_TYPE_NONE;
							break;
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_OCFP_LVALUE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) fX[0] = (CheckTCNumOolTableLimitValue(pDatabaseTCNumOolTable->GetAttributes(), pCell->GetText())) ? TranslateTCNumOolTableLimitValue(pDatabaseTCNumOolTable->GetAttributes(), pCell->GetText()) : NAN;
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_OCFP_HVALUE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) fX[1] = (CheckTCNumOolTableLimitValue(pDatabaseTCNumOolTable->GetAttributes(), pCell->GetText())) ? TranslateTCNumOolTableLimitValue(pDatabaseTCNumOolTable->GetAttributes(), pCell->GetText()) : NAN;
						pDatabaseTCNumOolLimit->SetType(nType);
						pDatabaseTCNumOolLimit->SetRange(nType, fX[0], fX[1]);
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTCNumOolTable->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTCNumOolLimit = pDatabaseTCNumOolTable->GetAt(nItem))) delete pDatabaseTCNumOolLimit;
				pDatabaseTCNumOolTable->RemoveAt(nItem);
			}
			pDatabaseTCNumOolTable->SetLimits((INT)pDatabaseTCNumOolTable->GetSize());
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_OCF), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_OCFP), nControlID) || nControlID == (UINT)-1) && nRow == nRows)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTCTxtOolTable *pDatabaseTCTxtOolTable, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	UINT  nType;
	CString  szX[2];
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTCTxtOolLimit  *pDatabaseTCTxtOolLimit;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_FXF))) && pTable->IsVisible())
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			for (pDatabaseTCTxtOolTable->SetAttributes((nControlID != (UINT)-1) ? pDatabaseTCTxtOolTable->GetAttributes() : 0); (pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
			{
				pDatabaseTCTxtOolTable->SetName(pCell->GetText());
				break;
			}
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCTxtOolTable->SetChecks(0);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_FXF_INTER)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCTxtOolTable->SetAttributes((pDatabaseTCTxtOolTable->GetAttributes() & ~(TCOOLTABLE_CHECK_RAW | TCOOLTABLE_CHECK_CALIBRATED)) | TranslateTCTxtOolTableInterpretation(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_FXF_RADIX)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCTxtOolTable->SetAttributes((pDatabaseTCTxtOolTable->GetAttributes() & ~(TCOOLTABLE_RADIX_HEXADECIMAL | TCOOLTABLE_RADIX_DECIMAL | TCOOLTABLE_RADIX_OCTAL | TCOOLTABLE_RADIX_BINARY)) | TranslateTCTxtOolTableRadix((pTable->GetCellValue(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_FXF_INTER)), sValue)) ? (UINT)sValue.Value.nValue : 0, pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_FXF_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCTxtOolTable->SetStatus(TranslateTCTxtOolTableStatus(pCell->GetText(), FALSE));
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_FXFP), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_FXFP)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTCTxtOolLimit = pDatabaseTCTxtOolTable->GetAt(nIndex)))
					{
						if ((pDatabaseTCTxtOolLimit = new CDatabaseTCTxtOolLimit))
						{
							EmptyTableRow(pDatabaseTCTxtOolLimit);
							pDatabaseTCTxtOolTable->InsertAt(nIndex, pDatabaseTCTxtOolLimit, 1);
						}
					}
					if ((pDatabaseTCTxtOolLimit = pDatabaseTCTxtOolTable->GetAt(nIndex)))
					{
						for (nType = pDatabaseTCTxtOolLimit->GetType(), pDatabaseTCTxtOolLimit->GetRange(szX[0], szX[1]); (pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_FXFP_TYPE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
						{
							nType = (pCell->GetValue(sValue)) ? (UINT)sValue.Value.nValue : TCOOLLIMIT_TYPE_NONE;
							break;
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_FXFP_FROM))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) szX[0] = pCell->GetText();
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_FXFP_TO))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) szX[1] = pCell->GetText();
						for (pDatabaseTCTxtOolLimit->SetType(nType), pDatabaseTCTxtOolLimit->SetOrder(nRow); pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_CALIBRATED; )
						{
							if (szX[0] != szX[1]) pDatabaseTCTxtOolLimit->SetRange(szX[0], szX[1]);
							if (szX[0] == szX[1]) pDatabaseTCTxtOolLimit->SetLimit(szX[0]);
							break;
						}
						if (pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW)
						{
							if (szX[0] != szX[1]) pDatabaseTCTxtOolLimit->SetRange((CheckTCTxtOolTableLimitValue(pDatabaseTCTxtOolTable->GetAttributes(), szX[0])) ? TranslateTCTxtOolTableLimitValue(pDatabaseTCTxtOolTable->GetAttributes(), szX[0]) : NAN, (CheckTCTxtOolTableLimitValue(pDatabaseTCTxtOolTable->GetAttributes(), szX[1])) ? TranslateTCTxtOolTableLimitValue(pDatabaseTCTxtOolTable->GetAttributes(), szX[1]) : NAN);
							if (szX[0] == szX[1]) pDatabaseTCTxtOolLimit->SetLimit((CheckTCTxtOolTableLimitValue(pDatabaseTCTxtOolTable->GetAttributes(), szX[0])) ? TranslateTCTxtOolTableLimitValue(pDatabaseTCTxtOolTable->GetAttributes(), szX[0]) : NAN);
						}
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTCTxtOolTable->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTCTxtOolLimit = pDatabaseTCTxtOolTable->GetAt(nItem))) delete pDatabaseTCTxtOolLimit;
				pDatabaseTCTxtOolTable->RemoveAt(nItem);
			}
			pDatabaseTCTxtOolTable->SetLimits((INT)pDatabaseTCTxtOolTable->GetSize());
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_FXF), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_FXFP), nControlID) || nControlID == (UINT)-1) && nRow == nRows)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTCPreExeGroup *pDatabaseTCPreExeGroup, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTCPreExeGroupParameter  *pDatabaseTCPreExeGroupParameter;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PVP))))
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PVP_ID)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPreExeGroup->SetID(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PVP_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPreExeGroup->SetDescription(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PVP_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPreExeGroup->SetStatus(TranslateTCPreExeGroupStatus(pCell->GetText(), FALSE));
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PEV), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PEV)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTCPreExeGroupParameter = pDatabaseTCPreExeGroup->GetAt(nIndex)))
					{
						if ((pDatabaseTCPreExeGroupParameter = new CDatabaseTCPreExeGroupParameter))
						{
							EmptyTableRow(pDatabaseTCPreExeGroupParameter);
							pDatabaseTCPreExeGroup->InsertAt(nIndex, pDatabaseTCPreExeGroupParameter, 1);
						}
					}
					if ((pDatabaseTCPreExeGroupParameter = pDatabaseTCPreExeGroup->GetAt(nIndex)))
					{
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PEV_PNAME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPreExeGroupParameter->SetTag(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PEV_PVALUE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPreExeGroupParameter->SetValueAsText(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_PEV_INTER))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCPreExeGroupParameter->SetAttributes((pDatabaseTCPreExeGroupParameter->GetAttributes() & ~(TCPREEXEGROUPPARAMETER_INTERPRETATION_RAW | TCPREEXEGROUPPARAMETER_INTERPRETATION_CALIBRATED)) | TranslateTCPreExeGroupParameterInterpretation(pCell->GetText(), FALSE));
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTCPreExeGroup->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTCPreExeGroupParameter = pDatabaseTCPreExeGroup->GetAt(nItem))) delete pDatabaseTCPreExeGroupParameter;
				pDatabaseTCPreExeGroup->RemoveAt(nItem);
			}
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PVP), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PEV), nControlID) || nControlID == (UINT)-1) && nRow == nRows)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTCExeVerGroup *pDatabaseTCExeVerGroup, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTCExeVerGroupParameter  *pDatabaseTCExeVerGroupParameter;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_CVP))))
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CVP_ID)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCExeVerGroup->SetID(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CVP_NAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCExeVerGroup->SetName(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CVP_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCExeVerGroup->SetDescription(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CVP_NMBST)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCExeVerGroup->SetStages((pCell->GetValue(sValue)) ? (INT)sValue.Value.uValue : 0);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CVP_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCExeVerGroup->SetStatus(TranslateTCExeVerGroupStatus(pCell->GetText(), FALSE));
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CEV), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CEV)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTCExeVerGroupParameter = pDatabaseTCExeVerGroup->GetAt(nIndex)))
					{
						if ((pDatabaseTCExeVerGroupParameter = new CDatabaseTCExeVerGroupParameter))
						{
							EmptyTableRow(pDatabaseTCExeVerGroupParameter);
							pDatabaseTCExeVerGroup->InsertAt(nIndex, pDatabaseTCExeVerGroupParameter, 1);
						}
					}
					if ((pDatabaseTCExeVerGroupParameter = pDatabaseTCExeVerGroup->GetAt(nIndex)))
					{
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_PNAME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCExeVerGroupParameter->SetTag(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_EVTYPE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCExeVerGroupParameter->SetAttributes((pDatabaseTCExeVerGroupParameter->GetAttributes() & ~(TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION | TCEXEVERGROUPPARAMETER_TYPE_REPORT | TCEXEVERGROUPPARAMETER_TYPE_DUMP | TCEXEVERGROUPPARAMETER_TYPE_STATUS)) | TranslateTCExeVerGroupParameterType(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_PVALUE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCExeVerGroupParameter->SetValueAsText(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_INTER))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCExeVerGroupParameter->SetAttributes((pDatabaseTCExeVerGroupParameter->GetAttributes() & ~(TCEXEVERGROUPPARAMETER_INTERPRETATION_RAW | TCEXEVERGROUPPARAMETER_INTERPRETATION_CALIBRATED)) | TranslateTCExeVerGroupParameterInterpretation(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_SWND))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCExeVerGroupParameter->SetTimeWindowInterval((pCell->GetValue(sValue)) ? sValue.Value.uValue : 0);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_STAGE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1))
						{
							pDatabaseTCExeVerGroupParameter->SetStage((pCell->GetValue(sValue)) ? MAKETCEXEVERSTAGEFROMID(sValue.Value.uValue) : 0);
							pDatabaseTCExeVerGroupParameter->SetStep((pCell->GetValue(sValue)) ? MAKETCEXEVERSTAGESTEPFROMID(sValue.Value.uValue) : 0);
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CEV_EPCKID))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCExeVerGroupParameter->SetEventIDPacket(pCell->GetText());
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTCExeVerGroup->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTCExeVerGroupParameter = pDatabaseTCExeVerGroup->GetAt(nItem))) delete pDatabaseTCExeVerGroupParameter;
				pDatabaseTCExeVerGroup->RemoveAt(nItem);
			}
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CVP), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CEV), nControlID) || nControlID == (UINT)-1) && nRow == nRows)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTCParameterSet *pDatabaseTCParameterSet, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_CPS))))
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CPS_NAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameterSet->SetName(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CPS_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameterSet->SetDescription(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_CPS_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCParameterSet->SetStatus(TranslateTCParameterSetStatus(pCell->GetText(), FALSE));
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CPSP), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_CPSP)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTCFunctionElement = pDatabaseTCParameterSet->GetAt(nIndex)))
					{
						if ((pDatabaseTCFunctionElement = new CDatabaseTCFunctionElement))
						{
							EmptyTableRow(pDatabaseTCFunctionElement);
							pDatabaseTCParameterSet->InsertAt(nIndex, pDatabaseTCFunctionElement, 1);
						}
					}
					if ((pDatabaseTCFunctionElement = pDatabaseTCParameterSet->GetAt(nIndex)))
					{
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CPSP_PNAME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1))
						{
							for (pDatabaseTCFunctionElement->SetName(pCell->GetText()); (pDatabaseTCParameter = GetTCParameters()->GetAt(GetTCParameters()->Find(pCell->GetText()))); )
							{
								pDatabaseTCFunctionElement->SetDescription(pDatabaseTCParameter->GetDescription());
								break;
							}
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CPSP_BITOFF))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1))
						{
							pDatabaseTCFunctionElement->SetBytePos((pCell->GetValue(sValue)) ? (INT)(sValue.Value.nValue / 8) : -1);
							pDatabaseTCFunctionElement->SetBitPos((pCell->GetValue(sValue)) ? (INT)(sValue.Value.nValue % 8) : -1);
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CPSP_VTYPE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunctionElement->SetAttributes(((pDatabaseTCFunctionElement->GetAttributes() | TCPARAMETER_TYPE_VARIABLE) & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED)) | TranslateTCFunctionElementValueInterpretation(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CPSP_RADIX))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunctionElement->SetAttributes(((pDatabaseTCFunctionElement->GetAttributes() | TCPARAMETER_TYPE_VARIABLE) & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | TranslateTCFunctionElementValueRadix(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_CPSP_PVALUE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunctionElement->SetConstValueAsText(pCell->GetText());
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTCParameterSet->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTCFunctionElement = pDatabaseTCParameterSet->GetAt(nItem))) delete pDatabaseTCFunctionElement;
				pDatabaseTCParameterSet->RemoveAt(nItem);
			}
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CPS), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_CPS), nControlID) || nControlID == (UINT)-1) && nRow == nRows)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTMPacketHeaders *pDatabaseTMPacketHeaders, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nBit;
	INT  nByte;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	INT  nLength;
	BOOL  bValue;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTMPacketHeader  *pDatabaseTMPacketHeader;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_DFH))))
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTMPacketHeader = pDatabaseTMPacketHeaders->GetAt(nIndex)))
					{
						if ((pDatabaseTMPacketHeader = new CDatabaseTMPacketHeader))
						{
							EmptyTableRow(pDatabaseTMPacketHeader);
							pDatabaseTMPacketHeaders->InsertAt(nIndex, pDatabaseTMPacketHeader, 1);
						}
					}
					if ((pDatabaseTMPacketHeader = pDatabaseTMPacketHeaders->GetAt(nIndex)))
					{
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_NAME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketHeader->SetName(pCell->GetText());
						for (pDatabaseTMPacketHeader->GetTMTypePosition(nByte, nBit, nLength); (pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_PRESENT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
						{
							pDatabaseTMPacketHeader->SetTMTypePosition((bValue) ? nByte : 0, (bValue) ? nBit : 0, ((bValue = pCell->GetValue(sValue))) ? nLength : 0);
							break;
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_OFFSET))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketHeader->SetTMTypePosition((bValue) ? (INT)(sValue.Value.nValue / 8) : 0, (bValue) ? (INT)(sValue.Value.nValue % 8) : 0, ((bValue = pCell->GetValue(sValue))) ? nLength : 0);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_LENGTH))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketHeader->SetTMTypePosition((bValue) ? nByte : 0, (bValue) ? nBit : 0, ((bValue = pCell->GetValue(sValue))) ? (INT)sValue.Value.nValue : 0);
						for (pDatabaseTMPacketHeader->GetTMIDPosition(nByte, nBit, nLength); (pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_ID_PRESENT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
						{
							pDatabaseTMPacketHeader->SetTMIDPosition((bValue) ? nByte : 0, (bValue) ? nBit : 0, ((bValue = pCell->GetValue(sValue))) ? nLength : 0);
							break;
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_OFFSET))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketHeader->SetTMIDPosition((bValue) ? (INT)(sValue.Value.nValue / 8) : 0, (bValue) ? (INT)(sValue.Value.nValue % 8) : 0, ((bValue = pCell->GetValue(sValue))) ? nLength : 0);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_LENGTH))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketHeader->SetTMIDPosition((bValue) ? nByte : 0, (bValue) ? nBit : 0, ((bValue = pCell->GetValue(sValue))) ? (INT)sValue.Value.nValue : 0);
						for (pDatabaseTMPacketHeader->Get3DiscPosition(nByte, nBit, nLength); (pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_3DISC_PRESENT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
						{
							pDatabaseTMPacketHeader->Set3DiscPosition((bValue) ? nByte : 0, (bValue) ? nBit : 0, ((bValue = pCell->GetValue(sValue))) ? nLength : 0);
							break;
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_OFFSET))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketHeader->Set3DiscPosition((bValue) ? (INT)(sValue.Value.nValue / 8) : 0, (bValue) ? (INT)(sValue.Value.nValue % 8) : 0, ((bValue = pCell->GetValue(sValue))) ? nLength : 0);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_LENGTH))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketHeader->Set3DiscPosition((bValue) ? nByte : 0, (bValue) ? nBit : 0, ((bValue = pCell->GetValue(sValue))) ? (INT)sValue.Value.nValue : 0);
						for (pDatabaseTMPacketHeader->GetTimestampPosition(nByte, nBit, nLength); (pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TIME_PRESENT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
						{
							pDatabaseTMPacketHeader->SetTimestampPosition((bValue) ? nByte : 0, (bValue) ? nBit : 0, ((bValue = pCell->GetValue(sValue))) ? nLength : 0);
							break;
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_OFFSET))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketHeader->SetTimestampPosition((bValue) ? (INT)(sValue.Value.nValue / 8) : 0, (bValue) ? (INT)(sValue.Value.nValue % 8) : 0, ((bValue = pCell->GetValue(sValue))) ? nLength : 0);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_LENGTH))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketHeader->SetTimestampPosition((bValue) ? nByte : 0, (bValue) ? nBit : 0, ((bValue = pCell->GetValue(sValue))) ? (INT)sValue.Value.nValue : 0);
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTMPacketHeaders->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTMPacketHeader = pDatabaseTMPacketHeaders->GetAt(nItem))) delete pDatabaseTMPacketHeader;
				pDatabaseTMPacketHeaders->RemoveAt(nItem);
			}
			return((nRow == nRows) ? TRUE : FALSE);
		}
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTMPacketStreams *pDatabaseTMPacketStreams, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTMPacketStream  *pDatabaseTMPacketStream;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_STR))))
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTMPacketStream = pDatabaseTMPacketStreams->GetAt(nIndex)))
					{
						if ((pDatabaseTMPacketStream = new CDatabaseTMPacketStream))
						{
							EmptyTableRow(pDatabaseTMPacketStream);
							pDatabaseTMPacketStreams->InsertAt(nIndex, pDatabaseTMPacketStream, 1);
						}
					}
					if ((pDatabaseTMPacketStream = pDatabaseTMPacketStreams->GetAt(nIndex)))
					{
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_STID))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketStream->SetName(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_APID))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketStream->SetAPID((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_TMID))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketStream->SetTMID((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_PERIOD))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketStream->SetPeriod((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_TIMEOUT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketStream->SetTimeout((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_STR_VALID))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTMPacketStream->SetValidityParameter(pCell->GetText());
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTMPacketStreams->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTMPacketStream = pDatabaseTMPacketStreams->GetAt(nItem))) delete pDatabaseTMPacketStream;
				pDatabaseTMPacketStreams->RemoveAt(nItem);
			}
			return((nRow == nRows) ? TRUE : FALSE);
		}
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseTCFunctionBlock *pDatabaseTCFunctionBlock, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseTCFunctionBlockElement  *pDatabaseTCFunctionBlockElement;
	TABLEVIEWCELLVALUE  sValue[2];

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_BCF))))
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_BCF_CNAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunctionBlock->SetName(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_BCF_INTER)))) && (nControlID == pCell->GetControlID() || nControlID == TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)) || nControlID == TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)) || nControlID == (UINT)-1)) pDatabaseTCFunctionBlock->SetLocation(TranslateTCFunctionBlockInterpretation(pCell->GetText(), FALSE), (pTable->GetCellValue(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)), sValue[0])) ? (INT)sValue[0].Value.nValue : 0, (pTable->GetCellValue(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)), sValue[1])) ? (INT)sValue[1].Value.nValue : 0);
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_BCCF), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_BCCF)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseTCFunctionBlockElement = pDatabaseTCFunctionBlock->GetAt(nIndex)))
					{
						if ((pDatabaseTCFunctionBlockElement = new CDatabaseTCFunctionBlockElement))
						{
							EmptyTableRow(pDatabaseTCFunctionBlockElement);
							pDatabaseTCFunctionBlock->InsertAt(nIndex, pDatabaseTCFunctionBlockElement, 1);
						}
					}
					if ((pDatabaseTCFunctionBlockElement = pDatabaseTCFunctionBlock->GetAt(nIndex)))
					{
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_BCCF_CONTENT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunctionBlockElement->SetName(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_BCCF_INTER))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseTCFunctionBlockElement->SetAttributes(TranslateTCFunctionBlockElementInterpretation(pCell->GetText(), FALSE));
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseTCFunctionBlock->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseTCFunctionBlockElement = pDatabaseTCFunctionBlock->GetAt(nItem))) delete pDatabaseTCFunctionBlockElement;
				pDatabaseTCFunctionBlock->RemoveAt(nItem);
			}
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_BCF), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_BCCF), nControlID) || nControlID == (UINT)-1) && nRow == nRows)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CDatabaseOBProcessorMemoryImage *pDatabaseOBProcessorMemoryImage, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	UINT  nAddress[2];
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CDatabaseOBProcessorMemoryImageBlock  *pDatabaseOBProcessorMemoryImageBlock;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PIMG))))
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			for (; (pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PIMG_MNAME)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
			{
				pDatabaseOBProcessorMemoryImage->SetName(pCell->GetText());
				break;
			}
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_IMGP), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_IMGP)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nIndex)))
					{
						if ((pDatabaseOBProcessorMemoryImageBlock = new CDatabaseOBProcessorMemoryImageBlock))
						{
							EmptyTableRow(pDatabaseOBProcessorMemoryImageBlock);
							pDatabaseOBProcessorMemoryImage->InsertAt(nIndex, pDatabaseOBProcessorMemoryImageBlock, 1);
						}
					}
					if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nIndex)))
					{
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMGP_VERSION))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryImageBlock->SetVersion(pCell->GetText());
						for (pDatabaseOBProcessorMemoryImageBlock->GetAddress(nAddress[0], nAddress[1]); (pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMGP_PAGE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
						{
							pDatabaseOBProcessorMemoryImageBlock->SetAddress((pCell->TranslateText(pCell->GetText(), sValue)) ? (UINT)sValue.Value.uValue : -1, nAddress[1]);
							break;
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMGP_ADDRESS))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryImageBlock->SetAddress(nAddress[0], (pCell->TranslateText(pCell->GetText(), sValue)) ? (UINT)sValue.Value.uValue : -1);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_IMGP_DATA))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pDatabaseOBProcessorMemoryImageBlock->SetData(pCell->GetText());
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pDatabaseOBProcessorMemoryImage->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nItem))) delete pDatabaseOBProcessorMemoryImageBlock;
				pDatabaseOBProcessorMemoryImage->RemoveAt(nItem);
			}
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PIMG), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_IMGP), nControlID) || nControlID == (UINT)-1) && nRow == nRows)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CANDLayout *pANDLayout, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	UINT  nFormat;
	CUIntArray  nColumns;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CANDLayoutParameter  *pParameter;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_DPF))))
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_DPF_NUMBER)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pANDLayout->SetName(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_DPF_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pANDLayout->SetTitle(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_DPF_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pANDLayout->SetStatus(TranslateANDStatus(pCell->GetText(), FALSE));
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_DPFP), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_DPFP)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pParameter = pANDLayout->GetAt(nIndex)))
					{
						if ((pParameter = new CANDLayoutParameter))
						{
							EmptyTableRow(pParameter);
							pANDLayout->InsertAt(nIndex, pParameter, 1);
						}
					}
					if ((pParameter = pANDLayout->GetAt(nIndex)))
					{
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_PNAME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetName(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_COMMENT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetComment(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_ROW))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetRow((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_COL))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetColumn((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_COLOR))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetColor(CTableViewComboBoxColorsCtrl::TranslateColor(pCell->GetText()));
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_COMM))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetOccurrence((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_VALMODE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetAttributes(TranslateANDParameterMode(pCell->GetText(), FALSE));
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_VALCHARS))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetDigits((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_DPFP_VALALIGN))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetAlignment((pCell->GetValue(sValue)) ? (UINT)sValue.Value.nValue : 0);
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pANDLayout->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pParameter = pANDLayout->GetAt(nItem))) delete pParameter;
				pANDLayout->RemoveAt(nItem);
			}
			break;
		}
		for (nCol = nCols = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)) : (CTableViewObject *)NULL); )
		{
			for (nCol = 0, nCols = pTable->GetColumns(), nColumns.RemoveAll(), nFormat = 0; nCol < nCols; nCol++)
			{
				if ((pCell = pTable->FindCell(0, nCol)) != (CTableViewCell *)NULL)
				{
					if (TranslateANDColumn(pCell->GetText(), FALSE) == ANDLAYOUT_TITLEITEM_ID)
					{
						if (nFormat != 0 && nCol > 0)
						{
							nColumns.Add(nFormat);
							nFormat = 0;
						}
					}
					for (nFormat |= (!pCell->GetText().IsEmpty()) ? TranslateANDColumn(pCell->GetText(), FALSE) : 0; nCol == nCols - 1; )
					{
						nColumns.Add(nFormat);
						break;
					}
					pANDLayout->SetColumns(nColumns);
					continue;
				}
				break;
			}
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_DPF), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_DPFP), nControlID) || nControlID == (UINT)-1) && nRow == nRows) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT), nControlID) || nControlID == (UINT)-1) && nCol == nCols)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CGRDLayout *pGRDLayout, UINT nControlID) CONST
{
	INT  nRow;
	INT  nRows;
	INT  nCol;
	INT  nCols;
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	INT  nGrids[2];
	INT  nTicks[2];
	UINT  nFormat;
	double  fMinimum;
	double  fMaximum;
	CUIntArray  nColumns;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CGRDLayoutParameter  *pParameter;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_GPF))))
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_NUMBER)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetName(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetTitle(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_TYPE)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetType(TranslateGRDType(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetMode((pGRDLayout->GetMode() & ~(GRDLAYOUT_MODE_NORMAL | GRDLAYOUT_MODE_AREA)) | TranslateGRDPlotType(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_MODE)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetMode((pGRDLayout->GetMode() & ~(GRDLAYOUT_MODE_SCROLL | GRDLAYOUT_MODE_OVERWRITE | GRDLAYOUT_MODE_RESTART)) | TranslateGRDPlotMode(pCell->GetText(), FALSE));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_DAYS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetDuration((pCell->GetValue(sValue)) ? (SECONDSPERDAY*sValue.Value.nValue + pGRDLayout->GetDuration().GetTotalSeconds() % SECONDSPERDAY) : pGRDLayout->GetDuration().GetTotalSeconds());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_HOURS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetDuration((pCell->GetValue(sValue)) ? (SECONDSPERHOUR*sValue.Value.nValue + pGRDLayout->GetDuration().GetTotalSeconds() - SECONDSPERHOUR*((pGRDLayout->GetDuration().GetTotalSeconds() % SECONDSPERDAY) / SECONDSPERHOUR)) : pGRDLayout->GetDuration().GetTotalSeconds());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_MINUTES)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetDuration((pCell->GetValue(sValue)) ? (SECONDSPERMINUTE*sValue.Value.nValue + SECONDSPERHOUR*(pGRDLayout->GetDuration().GetTotalSeconds() / SECONDSPERHOUR)) : pGRDLayout->GetDuration().GetTotalSeconds());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_INTERVAL)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetInterval((pCell->GetValue(sValue)) ? (SECONDSPERMINUTE*sValue.Value.nValue) : 0);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_UPDATE)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetUpdateInterval((pCell->GetValue(sValue)) ? (SECONDSPERMINUTE*sValue.Value.nValue) : 0);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_WIDTH)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetPlotSize((pCell->GetValue(sValue)) ? CSize((INT)sValue.Value.nValue, pGRDLayout->GetPlotSize().cy) : CSize(0, pGRDLayout->GetPlotSize().cy));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_HEIGHT)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetPlotSize((pCell->GetValue(sValue)) ? CSize(pGRDLayout->GetPlotSize().cx, (INT)sValue.Value.nValue) : CSize(pGRDLayout->GetPlotSize().cx, 0));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_XGRIDS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetGrids((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0, pGRDLayout->GetGrids(nGrids[0], nGrids[1])*(nGrids[1]));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_YGRIDS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetGrids(pGRDLayout->GetGrids(nGrids[0], nGrids[1])*(nGrids[0]), (pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_XTICKS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetTicks((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0, pGRDLayout->GetTicks(nTicks[0], nTicks[1])*(nTicks[1]));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_YTICKS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetTicks(pGRDLayout->GetTicks(nTicks[0], nTicks[1])*(nTicks[0]), (pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetGridsWidth((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetTicksWidth((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_GRIDSCOLOR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetGridsColor(CTableViewComboBoxColorsCtrl::TranslateColor(pCell->GetText()));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_TICKSCOLOR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetTicksColor(CTableViewComboBoxColorsCtrl::TranslateColor(pCell->GetText()));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_BKGNDCOLOR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetBackgroundColor(CTableViewComboBoxColorsCtrl::TranslateColor(pCell->GetText()));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_LABELCOLOR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetLabelColor(CTableViewComboBoxColorsCtrl::TranslateColor(pCell->GetText()));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetParameters((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_GPF_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pGRDLayout->SetStatus(TranslateGRDStatus(pCell->GetText(), FALSE));
		}
		for (nRow = nRows = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_GPFP), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_GPFP)) : (CTableViewObject *)NULL); )
		{
			for (nRow = (nControlID != (UINT)-1) ? max(pTable->GetSelRow(), 1) : 1, nRows = (nControlID != (UINT)-1) ? min(pTable->GetSelRow() + 1, pTable->GetRows()) : pTable->GetRows(), nIndex = (nControlID != (UINT)-1) ? (nRow - 1) : 0, nCount = 0; nRow < nRows; nRow++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow) || nControlID != (UINT)-1)
				{
					if (!(pParameter = pGRDLayout->GetAt(nIndex)))
					{
						if ((pParameter = new CGRDLayoutParameter))
						{
							EmptyTableRow(pParameter);
							pGRDLayout->InsertAt(nIndex, pParameter, 1);
						}
					}
					if ((pParameter = pGRDLayout->GetAt(nIndex)))
					{
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_PNAME))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetName(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_COMMENT))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetComment(pCell->GetText());
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_POSITION))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetPosition((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_COMM))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetOccurrence((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : -1);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_VALMODE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetAttributes((pCell->GetValue(sValue)) ? sValue.Value.nValue : TranslateGRDParameterMode(EMPTYSTRING));
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_VALCHARS))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetDigits((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
						for (pParameter->GetRange(fMinimum, fMaximum); (pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_VALMINIMUM))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1); )
						{
							pParameter->SetRange((pCell->GetValue(sValue)) ? sValue.Value.fValue : NAN, fMaximum);
							break;
						}
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_VALMAXIMUM))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetRange(fMinimum, (pCell->GetValue(sValue)) ? sValue.Value.fValue : NAN);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_COLOR))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetColor(CTableViewComboBoxColorsCtrl::TranslateColor(pCell->GetText()));
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetLineWidth((pCell->GetValue(sValue)) ? (INT)sValue.Value.nValue : 0);
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_LINESTYLE))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetLineStyle(CTableViewComboBoxLineStylesCtrl::TranslateLineStyle(pCell->GetText()));
						if ((pCell = pTable->FindCell(nRow, STRING(IDS_DATABASE_TABLE_GPFP_LINESYMBOL))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pParameter->SetLineSymbol(CTableViewComboBoxLineSymbolsCtrl::TranslateLineSymbol(pCell->GetText()));
						nIndex++;
						continue;
					}
					nRows = -1;
					break;
				}
				nCount++;
			}
			for (nItem = (INT)(pGRDLayout->GetSize() - 1), nItems = pTable->GetRows() - nCount - 1; nItem >= nItems; nItem--)
			{
				if ((pParameter = pGRDLayout->GetAt(nItem))) delete pParameter;
				pGRDLayout->RemoveAt(nItem);
			}
			break;
		}
		for (nCol = nCols = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)) : (CTableViewObject *)NULL); )
		{
			for (nCol = 0, nCols = pTable->GetColumns(), nColumns.RemoveAll(), nFormat = 0; nCol < nCols; nCol++)
			{
				if ((pCell = pTable->FindCell(0, nCol)) != (CTableViewCell *)NULL)
				{
					if (TranslateGRDColumn(pCell->GetText(), FALSE) == GRDLAYOUT_TITLEITEM_ID)
					{
						if (nFormat != 0 && nCol > 0)
						{
							nColumns.Add(nFormat);
							nFormat = 0;
						}
					}
					for (nFormat |= (!pCell->GetText().IsEmpty()) ? TranslateGRDColumn(pCell->GetText(), FALSE) : 0; nCol == nCols - 1; )
					{
						nColumns.Add(nFormat);
						break;
					}
					pGRDLayout->SetColumns(nColumns);
					continue;
				}
				break;
			}
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_GPF), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_GPFP), nControlID) || nControlID == (UINT)-1) && nRow == nRows) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT), nControlID) || nControlID == (UINT)-1) && nCol == nCols)) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CALTELDatabaseEngine::TransferTableData(CONST CDatabaseTableView *pView, CPODLayout *pPODLayout, UINT nControlID) CONST
{
	INT  nCol;
	INT  nCols;
	INT  nRow[3];
	INT  nRows[3];
	UINT  nFormat;
	CStringArray  szFunctions;
	CStringArray  szParameters;
	CTableViewCell  *pCell;
	CTableViewObject  *pTable;
	CPODLayoutExpression  *pPODLayoutExpression;
	TABLEVIEWCELLVALUE  sValue;

	if ((pTable = pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF))))
	{
		if (IsTableFieldID(pView, pTable->GetName(), nControlID) || nControlID == (UINT)-1)
		{
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PPF_NUMBER)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pPODLayout->SetName(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PPF_DESCR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pPODLayout->SetTitle(pCell->GetText());
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pPODLayout->SetExpressionColor(CTableViewComboBoxColorsCtrl::TranslateColor(pCell->GetText()));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pPODLayout->SetParametersColor(CTableViewComboBoxColorsCtrl::TranslateColor(pCell->GetText()));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pPODLayout->SetFunctionsColor(CTableViewComboBoxColorsCtrl::TranslateColor(pCell->GetText()));
			if ((pCell = pTable->FindCell(TranslateTableFieldToID(pView, pTable->GetName(), STRING(IDS_DATABASE_TABLE_PPF_STATUS)))) && (nControlID == pCell->GetControlID() || nControlID == (UINT)-1)) pPODLayout->SetStatus(TranslatePODStatus(pCell->GetText(), FALSE));
		}
		for (nRow[0] = nRows[0] = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) : (CTableViewObject *)NULL); )
		{
			for (nRow[0] = 0, nRows[0] = pTable->GetRows(), pPODLayout->RemoveAll(); nRow[0] < nRows[0]; nRow[0]++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow[0]) || nControlID != (UINT)-1)
				{
					if ((pCell = pTable->FindCell(nRow[0], pTable->GetColumns() - 1)))
					{
						if ((pPODLayoutExpression = new CPODLayoutExpression))
						{
							TranslatePODExpressionStackElement(pCell->GetText(), pPODLayoutExpression);
							pPODLayout->InsertAt(nRow[0], pPODLayoutExpression, 1);
							continue;
						}
					}
					nRows[0] = -1;
					break;
				}
			}
			break;
		}
		for (nRow[1] = nRows[1] = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) : (CTableViewObject *)NULL); )
		{
			for (nRow[1] = 0, nRows[1] = pTable->GetRows(), szParameters.RemoveAll(); nRow[1] < nRows[1]; nRow[1]++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow[1]) || nControlID != (UINT)-1)
				{
					if ((pCell = pTable->FindCell(nRow[1], pTable->GetColumns() - 1)))
					{
						szParameters.Add(pCell->GetText());
						pPODLayout->SetParameters(szParameters);
						continue;
					}
					nRows[1] = -1;
					break;
				}
			}
			break;
		}
		for (nRow[2] = nRows[2] = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)) : (CTableViewObject *)NULL); )
		{
			for (nRow[2] = 0, nRows[2] = pTable->GetRows(), szFunctions.RemoveAll(); nRow[2] < nRows[2]; nRow[2]++)
			{
				if (!pView->IsTableRowEmpty(pTable, nRow[2]) || nControlID != (UINT)-1)
				{
					if ((pCell = pTable->FindCell(nRow[2], pTable->GetColumns() - 1)))
					{
						szFunctions.Add(pCell->GetText());
						pPODLayout->SetFunctions(szFunctions);
						continue;
					}
					nRows[2] = -1;
					break;
				}
			}
			break;
		}
		for (nCol = nCols = 0; (pTable = (IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT), nControlID) || nControlID == (UINT)-1) ? pView->FindTable(STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)) : (CTableViewObject *)NULL); )
		{
			for (nCol = 0, nCols = pTable->GetColumns(), nFormat = 0; nCol < nCols; nCol++)
			{
				if ((pCell = pTable->FindCell(0, nCol)) != (CTableViewCell *)NULL)
				{
					nFormat |= (!pCell->GetText().IsEmpty()) ? TranslatePODColumn(pCell->GetText(), FALSE) : 0;
					pPODLayout->SetColumns(nFormat);
					continue;
				}
				break;
			}
			break;
		}
		return((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PPF), nControlID) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK), nControlID) || nControlID == (UINT)-1) && nRow[0] == nRows[0]) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS), nControlID) || nControlID == (UINT)-1) && nRow[1] == nRows[1]) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS), nControlID) || nControlID == (UINT)-1) && nRow[2] == nRows[2]) || ((IsTableFieldID(pView, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT), nControlID) || nControlID == (UINT)-1) && nCol == nCols)) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMPacket *pDatabaseTMPacket, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTMPackets[0].Find(pDatabaseTMPacket->GetTag()) < 0 || pView->m_pDatabaseTMPackets[1].Find(pDatabaseTMPacket->GetTag()) < 0 || !pView->m_pDatabaseTMPackets[0].GetAt(pView->m_pDatabaseTMPackets[0].Find(pDatabaseTMPacket->GetTag()))->Compare(pView->m_pDatabaseTMPackets[1].GetAt(pView->m_pDatabaseTMPackets[1].Find(pDatabaseTMPacket->GetTag())))) : ((bExist) ? (pView->m_pDatabaseTMPackets[1].Find(pDatabaseTMPacket->GetTag()) >= 0) : CheckTableData(pView, pDatabaseTMPacket, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMPacket *pDatabaseTMPacket, CStringArray &szIssues) CONST
{
	INT  nParameter;
	INT  nParameters;
	BOOL  bTableData;
	CDatabaseTMPacketParameter  *pDatabaseTMPacketParameter;
	CALTELDatabaseTMPacketsRecordset  cDatabaseTMPackets(this);
	CALTELDatabaseTMPacketParametersRecordset  cDatabaseTMPacketParameters(this);

	for (nParameter = 0, nParameters = (INT)pDatabaseTMPacket->GetSize(), cDatabaseTMPackets.Translate(pDatabaseTMPacket), bTableData = TRUE; nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMPacketParameter = pDatabaseTMPacket->GetAt(nParameter)))
		{
			cDatabaseTMPacketParameters.Translate(pDatabaseTMPacket, pDatabaseTMPacketParameter);
			bTableData &= (!IsTableRowEmpty(pDatabaseTMPacketParameter)) ? cDatabaseTMPacketParameters.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseTMPackets.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCPacket *pDatabaseTCPacket, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTCPackets[0].Find(pDatabaseTCPacket->GetTag()) < 0 || pView->m_pDatabaseTCPackets[1].Find(pDatabaseTCPacket->GetTag()) < 0 || !pView->m_pDatabaseTCPackets[0].GetAt(pView->m_pDatabaseTCPackets[0].Find(pDatabaseTCPacket->GetTag()))->Compare(pView->m_pDatabaseTCPackets[1].GetAt(pView->m_pDatabaseTCPackets[1].Find(pDatabaseTCPacket->GetTag())))) : ((bExist) ? (pView->m_pDatabaseTCPackets[1].Find(pDatabaseTCPacket->GetTag()) >= 0) : CheckTableData(pView, pDatabaseTCPacket, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCPacket *pDatabaseTCPacket, CStringArray &szIssues) CONST
{
	INT  nParameter;
	INT  nParameters;
	BOOL  bTableData;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CALTELDatabaseTCPacketsRecordset  cDatabaseTCPackets(this);
	CALTELDatabaseTCPacketParametersRecordset  cDatabaseTCPacketParameters(this);

	for (nParameter = 0, nParameters = (INT)pDatabaseTCPacket->GetSize(), cDatabaseTCPackets.Translate(pDatabaseTCPacket), bTableData = TRUE; nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCPacketParameter = pDatabaseTCPacket->GetAt(nParameter)))
		{
			cDatabaseTCPacketParameters.Translate(pDatabaseTCPacket, pDatabaseTCPacketParameter);
			bTableData &= (!IsTableRowEmpty(pDatabaseTCPacketParameter)) ? cDatabaseTCPacketParameters.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseTCPackets.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCFunction *pDatabaseTCFunction, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTCFunctions[0].Find(pDatabaseTCFunction->GetName()) < 0 || pView->m_pDatabaseTCFunctions[1].Find(pDatabaseTCFunction->GetName()) < 0 || !pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pDatabaseTCFunction->GetName()))->Compare(pView->m_pDatabaseTCFunctions[1].GetAt(pView->m_pDatabaseTCFunctions[1].Find(pDatabaseTCFunction->GetName())))) : ((bExist) ? (pView->m_pDatabaseTCFunctions[1].Find(pDatabaseTCFunction->GetName()) >= 0) : CheckTableData(pView, pDatabaseTCFunction, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCFunction *pDatabaseTCFunction, CStringArray &szIssues) CONST
{
	INT  nSet;
	INT  nSets;
	INT  nElement;
	INT  nElements;
	BOOL  bTableData;
	CStringArray  szSets;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CALTELDatabaseTCFunctionsRecordset  cDatabaseTCFunctions(this);
	CALTELDatabaseTCFunctionElementsRecordset  cDatabaseTCFunctionElements(this);
	CALTELDatabaseTCParameterSetAssociationsRecordset  cDatabaseTCParameterSetAssociations(this);

	for (nElement = 0, nElements = (INT)pDatabaseTCFunction->GetSize(), cDatabaseTCFunctions.Translate(pDatabaseTCFunction), bTableData = TRUE; nElement < nElements; nElement++)
	{
		if ((pDatabaseTCFunctionElement = pDatabaseTCFunction->GetAt(nElement)))
		{
			cDatabaseTCFunctionElements.Translate(pDatabaseTCFunction, pDatabaseTCFunctionElement);
			bTableData &= (!IsTableRowEmpty(pDatabaseTCFunctionElement)) ? cDatabaseTCFunctionElements.Check(szIssues) : bTableData;
		}
	}
	for (nSet = 0, nSets = pDatabaseTCFunction->GetParameterSets(szSets); nSet < nSets; nSet++)
	{
		if ((pDatabaseTCParameterSet = new CDatabaseTCParameterSet))
		{
			pDatabaseTCParameterSet->SetName(szSets.GetAt(nSet));
			cDatabaseTCParameterSetAssociations.Translate(pDatabaseTCFunction, pDatabaseTCParameterSet);
			bTableData &= cDatabaseTCParameterSetAssociations.Check(szIssues);
			delete pDatabaseTCParameterSet;
		}
	}
	return((cDatabaseTCFunctions.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCSequence *pDatabaseTCSequence, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTCSequences[0].Find(pDatabaseTCSequence->GetName()) < 0 || pView->m_pDatabaseTCSequences[1].Find(pDatabaseTCSequence->GetName()) < 0 || !pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pDatabaseTCSequence->GetName()))->Compare(pView->m_pDatabaseTCSequences[1].GetAt(pView->m_pDatabaseTCSequences[1].Find(pDatabaseTCSequence->GetName())))) : ((bExist) ? (pView->m_pDatabaseTCSequences[1].Find(pDatabaseTCSequence->GetName()) >= 0) : CheckTableData(pView, pDatabaseTCSequence, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCSequence *pDatabaseTCSequence, CStringArray &szIssues) CONST
{
	INT  nEntry;
	INT  nEntries;
	INT  nParameter;
	INT  nParameters;
	BOOL  bTableData;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCParameters  pDatabaseTCParameters;
	CDatabaseTCSequenceEntry  *pDatabaseTCSequenceEntry;
	CDatabaseTCSequenceEntryParameter  *pDatabaseTCSequenceEntryParameter;
	CALTELDatabaseTCSequencesRecordset  cDatabaseTCSequences(this);
	CALTELDatabaseTCSequenceEntriesRecordset  cDatabaseTCSequenceEntries(this);
	CALTELDatabaseTCSequenceParametersRecordset  cDatabaseTCSequenceParameters(this);
	CALTELDatabaseTCSequenceEntryParametersRecordset  cDatabaseTCSequenceEntryParameters(this);

	for (nEntry = 0, nEntries = (INT)pDatabaseTCSequence->GetSize(), cDatabaseTCSequences.Translate(pDatabaseTCSequence), bTableData = TRUE; nEntry < nEntries; nEntry++)
	{
		if ((pDatabaseTCSequenceEntry = pDatabaseTCSequence->GetAt(nEntry)) != (CDatabaseTCSequenceEntry *)NULL)
		{
			for (nParameter = 0, nParameters = (INT)pDatabaseTCSequenceEntry->GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pDatabaseTCSequenceEntryParameter = pDatabaseTCSequenceEntry->GetAt(nParameter)))
				{
					cDatabaseTCSequenceEntryParameters.Translate(pDatabaseTCSequence, pDatabaseTCSequenceEntryParameter, nEntry);
					bTableData &= (!IsTableRowEmpty(pDatabaseTCSequenceEntryParameter)) ? cDatabaseTCSequenceEntryParameters.Check(szIssues) : bTableData;
				}
			}
			cDatabaseTCSequenceEntries.Translate(pDatabaseTCSequence, pDatabaseTCSequenceEntry, nEntry);
			bTableData &= (!IsTableRowEmpty(pDatabaseTCSequenceEntry)) ? cDatabaseTCSequenceEntries.Check(szIssues) : bTableData;
		}
	}
	for (nParameter = 0, nParameters = pDatabaseTCSequence->GetParameters(pDatabaseTCParameters); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter = pDatabaseTCParameters.GetAt(nParameter)))
		{
			cDatabaseTCSequenceParameters.Translate(pDatabaseTCSequence, pDatabaseTCParameter, nParameter);
			bTableData &= (!IsTableRowEmpty(pDatabaseTCParameter)) ? cDatabaseTCSequenceParameters.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseTCSequences.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseOBProcessor *pDatabaseOBProcessor, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseOBProcessors[0].Find(pDatabaseOBProcessor->GetName()) < 0 || pView->m_pDatabaseOBProcessors[1].Find(pDatabaseOBProcessor->GetName()) < 0 || !pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pDatabaseOBProcessor->GetName()))->Compare(pView->m_pDatabaseOBProcessors[1].GetAt(pView->m_pDatabaseOBProcessors[1].Find(pDatabaseOBProcessor->GetName())))) : ((bExist) ? (pView->m_pDatabaseOBProcessors[1].Find(pDatabaseOBProcessor->GetName()) >= 0) : CheckTableData(pView, pDatabaseOBProcessor, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseOBProcessor *pDatabaseOBProcessor, CStringArray &szIssues) CONST
{
	INT  nImageBlock;
	INT  nImageBlocks;
	INT  nMemoryArea;
	INT  nMemoryAreas;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	INT  nCatalogueEntry;
	INT  nCatalogueEntries;
	BOOL  bTableData;
	CDatabaseOBProcessorMemoryArea  *pDatabaseOBProcessorMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;
	CDatabaseOBProcessorMemoryAreaBlock  *pDatabaseOBProcessorMemoryAreaBlock;
	CDatabaseOBProcessorMemoryImageBlock  *pDatabaseOBProcessorMemoryImageBlock;
	CDatabaseOBProcessorMemoryAreaCheckSum  *pDatabaseOBProcessorMemoryAreaCheckSum;
	CDatabaseOBProcessorMemoryAreaCatalogue  *pDatabaseOBProcessorMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pDatabaseOBProcessorMemoryAreaCatalogueEntry;
	CALTELDatabaseOBProcessorsRecordset  cDatabaseOBProcessors(this);
	CALTELDatabaseOBProcessorMemoryAreasRecordset  cDatabaseOBProcessorMemoryAreas(this);
	CALTELDatabaseOBProcessorMemoryImagesRecordset  cDatabaseOBProcessorMemoryImages(this);
	CALTELDatabaseOBProcessorMemoryAreaBlocksRecordset  cDatabaseOBProcessorMemoryAreaBlocks(this);
	CALTELDatabaseOBProcessorMemoryAreaCheckSumsRecordset  cDatabaseOBProcessorMemoryAreaCheckSums(this);
	CALTELDatabaseOBProcessorMemoryAreaCataloguesRecordset  cDatabaseOBProcessorMemoryAreaCatalogues(this);

	for (nMemoryArea = 0, nMemoryAreas = (INT)pDatabaseOBProcessor->GetSize(), cDatabaseOBProcessors.Translate(pDatabaseOBProcessor), bTableData = TRUE; nMemoryArea < nMemoryAreas; nMemoryArea++)
	{
		if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nMemoryArea)))
		{
			cDatabaseOBProcessorMemoryAreas.Translate(pDatabaseOBProcessor, pDatabaseOBProcessorMemoryArea);
			bTableData &= (!IsTableRowEmpty(pDatabaseOBProcessorMemoryArea)) ? cDatabaseOBProcessorMemoryAreas.Check(szIssues) : bTableData;
			for (nMemoryBlock = 0, nMemoryBlocks = (INT)pDatabaseOBProcessorMemoryArea->GetSize(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if ((pDatabaseOBProcessorMemoryAreaBlock = pDatabaseOBProcessorMemoryArea->GetAt(nMemoryBlock)))
				{
					cDatabaseOBProcessorMemoryAreaBlocks.Translate(pDatabaseOBProcessorMemoryArea, pDatabaseOBProcessorMemoryAreaBlock);
					bTableData &= (!IsTableRowEmpty(pDatabaseOBProcessorMemoryAreaBlock)) ? cDatabaseOBProcessorMemoryAreaBlocks.Check(szIssues) : bTableData;
				}
			}
			if ((pDatabaseOBProcessorMemoryImage = new CDatabaseOBProcessorMemoryImage))
			{
				if ((pDatabaseOBProcessorMemoryAreaCheckSum = new CDatabaseOBProcessorMemoryAreaCheckSum))
				{
					if ((pDatabaseOBProcessorMemoryAreaCatalogue = new CDatabaseOBProcessorMemoryAreaCatalogue))
					{
						for (nImageBlock = 0, nImageBlocks = (pDatabaseOBProcessorMemoryArea->GetMemoryImage(pDatabaseOBProcessorMemoryImage)) ? (INT)pDatabaseOBProcessorMemoryImage->GetSize() : -1; nImageBlock < nImageBlocks; nImageBlock++)
						{
							if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nImageBlock)))
							{
								cDatabaseOBProcessorMemoryImages.Translate(pDatabaseOBProcessorMemoryImage, pDatabaseOBProcessorMemoryImageBlock);
								bTableData &= (!IsTableRowEmpty(pDatabaseOBProcessorMemoryImageBlock)) ? cDatabaseOBProcessorMemoryImages.Check(szIssues) : bTableData;
							}
						}
						for (nCatalogueEntry = 0, nCatalogueEntries = (pDatabaseOBProcessorMemoryArea->GetCatalogue(pDatabaseOBProcessorMemoryAreaCatalogue)) ? (INT)pDatabaseOBProcessorMemoryAreaCatalogue->GetSize() : -1; nCatalogueEntry < nCatalogueEntries; nCatalogueEntry++)
						{
							if ((pDatabaseOBProcessorMemoryAreaCatalogueEntry = pDatabaseOBProcessorMemoryAreaCatalogue->GetAt(nCatalogueEntry)))
							{
								cDatabaseOBProcessorMemoryAreaCatalogues.Translate(pDatabaseOBProcessorMemoryArea, pDatabaseOBProcessorMemoryAreaCatalogueEntry);
								bTableData &= (!IsTableRowEmpty(pDatabaseOBProcessorMemoryAreaCatalogueEntry)) ? cDatabaseOBProcessorMemoryAreaCatalogues.Check(szIssues) : bTableData;
							}
						}
						pDatabaseOBProcessorMemoryArea->GetCheckSum(pDatabaseOBProcessorMemoryAreaCheckSum);
						cDatabaseOBProcessorMemoryAreaCheckSums.Translate(pDatabaseOBProcessor, pDatabaseOBProcessorMemoryArea, pDatabaseOBProcessorMemoryAreaCheckSum);
						bTableData &= (!IsTableRowEmpty(pDatabaseOBProcessorMemoryAreaCheckSum)) ? cDatabaseOBProcessorMemoryAreaCheckSums.Check(szIssues) : bTableData;
						delete pDatabaseOBProcessorMemoryAreaCatalogue;
					}
					delete pDatabaseOBProcessorMemoryAreaCheckSum;
				}
				delete pDatabaseOBProcessorMemoryImage;
			}
		}
	}
	return((cDatabaseOBProcessors.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMParameter *pDatabaseTMParameter, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTMParameters[0].Find(pDatabaseTMParameter->GetTag()) < 0 || pView->m_pDatabaseTMParameters[1].Find(pDatabaseTMParameter->GetTag()) < 0 || !pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pDatabaseTMParameter->GetTag()))->Compare(pView->m_pDatabaseTMParameters[1].GetAt(pView->m_pDatabaseTMParameters[1].Find(pDatabaseTMParameter->GetTag())))) : ((bExist) ? (pView->m_pDatabaseTMParameters[1].Find(pDatabaseTMParameter->GetTag()) >= 0) : CheckTableData(pView, pDatabaseTMParameter, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMParameter *pDatabaseTMParameter, CStringArray &szIssues) CONST
{
	INT  nTable;
	INT  nTables;
	BOOL  bTableData;
	CString  szMessage;
	CStringArray  szCalTables[2];
	CStringArray  szOolTables[2];
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;
	CALTELDatabaseTMParametersRecordset  cDatabaseTMParameters(this);
	CALTELDatabaseTMNumCalTableAssociationsRecordset  cDatabaseTMNumCalTableAssociations(this);
	CALTELDatabaseTMTxtCalTableAssociationsRecordset  cDatabaseTMTxtCalTableAssociations(this);
	CALTELDatabaseTMNumOolTableAssociationsRecordset  cDatabaseTMNumOolTableAssociations(this);
	CALTELDatabaseTMTxtOolTableAssociationsRecordset  cDatabaseTMTxtOolTableAssociations(this);

	for (nTable = 0, nTables = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]) : 0, cDatabaseTMParameters.Translate(pDatabaseTMParameter), bTableData = TRUE; nTable < nTables; nTable++)
	{
		if ((pDatabaseTMNumCalTable = pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find(szCalTables[0].GetAt(nTable)))))
		{
			cDatabaseTMNumCalTableAssociations.Translate(pDatabaseTMNumCalTable, pDatabaseTMParameter, szCalTables[1].GetAt(nTable));
			bTableData = (cDatabaseTMNumCalTableAssociations.Check(szIssues)) ? bTableData : FALSE;
		}
	}
	for (nTable = 0, nTables = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]) : 0; nTable < nTables; nTable++)
	{
		if ((pDatabaseTMTxtCalTable = pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find(szCalTables[0].GetAt(nTable)))))
		{
			cDatabaseTMTxtCalTableAssociations.Translate(pDatabaseTMTxtCalTable, pDatabaseTMParameter, szCalTables[1].GetAt(nTable));
			bTableData = (cDatabaseTMTxtCalTableAssociations.Check(szIssues)) ? bTableData : FALSE;
		}
	}
	for (nTable = 0, nTables = ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NONE) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)) ? pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1]) : 0; nTable < nTables; nTable++)
	{
		if ((pDatabaseTMNumOolTable = pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find(szOolTables[0].GetAt(nTable)))))
		{
			cDatabaseTMNumOolTableAssociations.Translate(pDatabaseTMNumOolTable, pDatabaseTMParameter, szOolTables[1].GetAt(nTable));
			bTableData = (cDatabaseTMNumOolTableAssociations.Check(szIssues)) ? bTableData : FALSE;
		}
	}
	for (nTable = 0, nTables = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1]) : 0; nTable < nTables; nTable++)
	{
		if ((pDatabaseTMTxtOolTable = pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find(szOolTables[0].GetAt(nTable)))))
		{
			cDatabaseTMTxtOolTableAssociations.Translate(pDatabaseTMTxtOolTable, pDatabaseTMParameter, szOolTables[1].GetAt(nTable));
			bTableData = (cDatabaseTMTxtOolTableAssociations.Check(szIssues)) ? bTableData : FALSE;
		}
	}
	if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) && !szCalTables[0].GetSize())
	{
		szMessage.Format(STRING(IDS_DATABASE_COMPILEERROR_TMPARAMETER_MISSINGCALIBRATIONTABLE), (LPCTSTR)pDatabaseTMParameter->GetTag());
		szIssues.Add(szMessage);
	}
	return((cDatabaseTMParameters.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCParameter *pDatabaseTCParameter, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTCParameters[0].Find(pDatabaseTCParameter->GetTag()) < 0 || pView->m_pDatabaseTCParameters[1].Find(pDatabaseTCParameter->GetTag()) < 0 || !pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pDatabaseTCParameter->GetTag()))->Compare(pView->m_pDatabaseTCParameters[1].GetAt(pView->m_pDatabaseTCParameters[1].Find(pDatabaseTCParameter->GetTag())))) : ((bExist) ? (pView->m_pDatabaseTCParameters[1].Find(pDatabaseTCParameter->GetTag()) >= 0) : CheckTableData(pView, pDatabaseTCParameter, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCParameter *pDatabaseTCParameter, CStringArray &szIssues) CONST
{
	BOOL  bTableData;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;
	CALTELDatabaseTCParametersRecordset  cDatabaseTCParameters(this);

	for (cDatabaseTCParameters.Translate(pDatabaseTCParameter), bTableData = TRUE; pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL; )
	{
		bTableData = ((pDatabaseTCNumCalTable = pView->m_pDatabaseTCNumCalTables[0].GetAt(pView->m_pDatabaseTCNumCalTables[0].Find(pDatabaseTCParameter->GetCalTable())))) ? bTableData : FALSE;
		break;
	}
	for (; pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS; )
	{
		bTableData = ((pDatabaseTCTxtCalTable = pView->m_pDatabaseTCTxtCalTables[0].GetAt(pView->m_pDatabaseTCTxtCalTables[0].Find(pDatabaseTCParameter->GetCalTable())))) ? bTableData : FALSE;
		break;
	}
	for (; ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) && !pDatabaseTCParameter->GetOolTable().IsEmpty(); )
	{
		bTableData = ((pDatabaseTCNumOolTable = pView->m_pDatabaseTCNumOolTables[0].GetAt(pView->m_pDatabaseTCNumOolTables[0].Find(pDatabaseTCParameter->GetOolTable())))) ? bTableData : FALSE;
		break;
	}
	for (; (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) && !pDatabaseTCParameter->GetOolTable().IsEmpty(); )
	{
		bTableData = ((pDatabaseTCTxtOolTable = pView->m_pDatabaseTCTxtOolTables[0].GetAt(pView->m_pDatabaseTCTxtOolTables[0].Find(pDatabaseTCParameter->GetOolTable())))) ? bTableData : FALSE;
		break;
	}
	return((cDatabaseTCParameters.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMNumCalTable *pDatabaseTMNumCalTable, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTMNumCalTables[0].Find(pDatabaseTMNumCalTable->GetName()) < 0 || pView->m_pDatabaseTMNumCalTables[1].Find(pDatabaseTMNumCalTable->GetName()) < 0 || !pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find(pDatabaseTMNumCalTable->GetName()))->Compare(pView->m_pDatabaseTMNumCalTables[1].GetAt(pView->m_pDatabaseTMNumCalTables[1].Find(pDatabaseTMNumCalTable->GetName())))) : ((bExist) ? (pView->m_pDatabaseTMNumCalTables[1].Find(pDatabaseTMNumCalTable->GetName()) >= 0) : CheckTableData(pView, pDatabaseTMNumCalTable, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMNumCalTable *pDatabaseTMNumCalTable, CStringArray &szIssues) CONST
{
	INT  nPoint;
	INT  nPoints;
	BOOL  bTableData;
	CDatabaseTMNumCalPoint  *pDatabaseTMNumCalPoint;
	CALTELDatabaseTMNumCalTablesRecordset  cDatabaseTMNumCalTables(this);
	CALTELDatabaseTMNumCalTablePointsRecordset  cDatabaseTMNumCalTablePoints(this);

	for (nPoint = 0, nPoints = (INT)pDatabaseTMNumCalTable->GetSize(), cDatabaseTMNumCalTables.Translate(pDatabaseTMNumCalTable), bTableData = TRUE; nPoint < nPoints; nPoint++)
	{
		if ((pDatabaseTMNumCalPoint = pDatabaseTMNumCalTable->GetAt(nPoint)))
		{
			cDatabaseTMNumCalTablePoints.Translate(pDatabaseTMNumCalTable, pDatabaseTMNumCalPoint);
			bTableData &= (!IsTableRowEmpty(pDatabaseTMNumCalPoint)) ? cDatabaseTMNumCalTablePoints.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseTMNumCalTables.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMTxtCalTable *pDatabaseTMTxtCalTable, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTMTxtCalTables[0].Find(pDatabaseTMTxtCalTable->GetName()) < 0 || pView->m_pDatabaseTMTxtCalTables[1].Find(pDatabaseTMTxtCalTable->GetName()) < 0 || !pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find(pDatabaseTMTxtCalTable->GetName()))->Compare(pView->m_pDatabaseTMTxtCalTables[1].GetAt(pView->m_pDatabaseTMTxtCalTables[1].Find(pDatabaseTMTxtCalTable->GetName())))) : ((bExist) ? (pView->m_pDatabaseTMTxtCalTables[1].Find(pDatabaseTMTxtCalTable->GetName()) >= 0) : CheckTableData(pView, pDatabaseTMTxtCalTable, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMTxtCalTable *pDatabaseTMTxtCalTable, CStringArray &szIssues) CONST
{
	INT  nPoint;
	INT  nPoints;
	BOOL  bTableData;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;
	CALTELDatabaseTMTxtCalTablesRecordset  cDatabaseTMTxtCalTables(this);
	CALTELDatabaseTMTxtCalTablePointsRecordset  cDatabaseTMTxtCalTablePoints(this);

	for (nPoint = 0, nPoints = (INT)pDatabaseTMTxtCalTable->GetSize(), cDatabaseTMTxtCalTables.Translate(pDatabaseTMTxtCalTable), bTableData = TRUE; nPoint < nPoints; nPoint++)
	{
		if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt(nPoint)))
		{
			cDatabaseTMTxtCalTablePoints.Translate(pDatabaseTMTxtCalTable, pDatabaseTMTxtCalPoint);
			bTableData &= (!IsTableRowEmpty(pDatabaseTMTxtCalPoint)) ? cDatabaseTMTxtCalTablePoints.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseTMTxtCalTables.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMNumOolTable *pDatabaseTMNumOolTable, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTMNumOolTables[0].Find(pDatabaseTMNumOolTable->GetName()) < 0 || pView->m_pDatabaseTMNumOolTables[1].Find(pDatabaseTMNumOolTable->GetName()) < 0 || !pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find(pDatabaseTMNumOolTable->GetName()))->Compare(pView->m_pDatabaseTMNumOolTables[1].GetAt(pView->m_pDatabaseTMNumOolTables[1].Find(pDatabaseTMNumOolTable->GetName())))) : ((bExist) ? (pView->m_pDatabaseTMNumOolTables[1].Find(pDatabaseTMNumOolTable->GetName()) >= 0) : CheckTableData(pView, pDatabaseTMNumOolTable, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMNumOolTable *pDatabaseTMNumOolTable, CStringArray &szIssues) CONST
{
	INT  nLimit;
	INT  nLimits;
	BOOL  bTableData;
	CDatabaseTMNumOolLimit  *pDatabaseTMNumOolLimit;
	CALTELDatabaseTMNumOolTablesRecordset  cDatabaseTMNumOolTables(this);
	CALTELDatabaseTMNumOolTableLimitsRecordset  cDatabaseTMNumOolTableLimits(this);

	for (nLimit = 0, nLimits = (INT)pDatabaseTMNumOolTable->GetSize(), cDatabaseTMNumOolTables.Translate(pDatabaseTMNumOolTable), bTableData = TRUE; nLimit < nLimits; nLimit++)
	{
		if ((pDatabaseTMNumOolLimit = pDatabaseTMNumOolTable->GetAt(nLimit)))
		{
			cDatabaseTMNumOolTableLimits.Translate(pDatabaseTMNumOolTable, pDatabaseTMNumOolLimit);
			bTableData &= (!IsTableRowEmpty(pDatabaseTMNumOolLimit)) ? cDatabaseTMNumOolTableLimits.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseTMNumOolTables.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMTxtOolTable *pDatabaseTMTxtOolTable, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTMTxtOolTables[0].Find(pDatabaseTMTxtOolTable->GetName()) < 0 || pView->m_pDatabaseTMTxtOolTables[1].Find(pDatabaseTMTxtOolTable->GetName()) < 0 || !pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find(pDatabaseTMTxtOolTable->GetName()))->Compare(pView->m_pDatabaseTMTxtOolTables[1].GetAt(pView->m_pDatabaseTMTxtOolTables[1].Find(pDatabaseTMTxtOolTable->GetName())))) : ((bExist) ? (pView->m_pDatabaseTMTxtOolTables[1].Find(pDatabaseTMTxtOolTable->GetName()) >= 0) : CheckTableData(pView, pDatabaseTMTxtOolTable, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMTxtOolTable *pDatabaseTMTxtOolTable, CStringArray &szIssues) CONST
{
	INT  nLimit;
	INT  nLimits;
	BOOL  bTableData;
	CDatabaseTMTxtOolLimit  *pDatabaseTMTxtOolLimit;
	CALTELDatabaseTMTxtOolTablesRecordset  cDatabaseTMTxtOolTables(this);
	CALTELDatabaseTMTxtOolTableLimitsRecordset  cDatabaseTMTxtOolTableLimits(this);

	for (nLimit = 0, nLimits = (INT)pDatabaseTMTxtOolTable->GetSize(), cDatabaseTMTxtOolTables.Translate(pDatabaseTMTxtOolTable), bTableData = TRUE; nLimit < nLimits; nLimit++)
	{
		if ((pDatabaseTMTxtOolLimit = pDatabaseTMTxtOolTable->GetAt(nLimit)))
		{
			cDatabaseTMTxtOolTableLimits.Translate(pDatabaseTMTxtOolTable, pDatabaseTMTxtOolLimit);
			bTableData &= (!IsTableRowEmpty(pDatabaseTMTxtOolLimit)) ? cDatabaseTMTxtOolTableLimits.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseTMTxtOolTables.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCNumCalTable *pDatabaseTCNumCalTable, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTCNumCalTables[0].Find(pDatabaseTCNumCalTable->GetName()) < 0 || pView->m_pDatabaseTCNumCalTables[1].Find(pDatabaseTCNumCalTable->GetName()) < 0 || !pView->m_pDatabaseTCNumCalTables[0].GetAt(pView->m_pDatabaseTCNumCalTables[0].Find(pDatabaseTCNumCalTable->GetName()))->Compare(pView->m_pDatabaseTCNumCalTables[1].GetAt(pView->m_pDatabaseTCNumCalTables[1].Find(pDatabaseTCNumCalTable->GetName())))) : ((bExist) ? (pView->m_pDatabaseTCNumCalTables[1].Find(pDatabaseTCNumCalTable->GetName()) >= 0) : CheckTableData(pView, pDatabaseTCNumCalTable, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCNumCalTable *pDatabaseTCNumCalTable, CStringArray &szIssues) CONST
{
	INT  nPoint;
	INT  nPoints;
	BOOL  bTableData;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint;
	CALTELDatabaseTCNumCalTablesRecordset  cDatabaseTCNumCalTables(this);
	CALTELDatabaseTCNumCalTablePointsRecordset  cDatabaseTCNumCalTablePoints(this);

	for (nPoint = 0, nPoints = (INT)pDatabaseTCNumCalTable->GetSize(), cDatabaseTCNumCalTables.Translate(pDatabaseTCNumCalTable), bTableData = TRUE; nPoint < nPoints; nPoint++)
	{
		if ((pDatabaseTCNumCalPoint = pDatabaseTCNumCalTable->GetAt(nPoint)))
		{
			cDatabaseTCNumCalTablePoints.Translate(pDatabaseTCNumCalTable, pDatabaseTCNumCalPoint);
			bTableData &= (!IsTableRowEmpty(pDatabaseTCNumCalPoint)) ? cDatabaseTCNumCalTablePoints.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseTCNumCalTables.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCTxtCalTable *pDatabaseTCTxtCalTable, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTCTxtCalTables[0].Find(pDatabaseTCTxtCalTable->GetName()) < 0 || pView->m_pDatabaseTCTxtCalTables[1].Find(pDatabaseTCTxtCalTable->GetName()) < 0 || !pView->m_pDatabaseTCTxtCalTables[0].GetAt(pView->m_pDatabaseTCTxtCalTables[0].Find(pDatabaseTCTxtCalTable->GetName()))->Compare(pView->m_pDatabaseTCTxtCalTables[1].GetAt(pView->m_pDatabaseTCTxtCalTables[1].Find(pDatabaseTCTxtCalTable->GetName())))) : ((bExist) ? (pView->m_pDatabaseTCTxtCalTables[1].Find(pDatabaseTCTxtCalTable->GetName()) >= 0) : CheckTableData(pView, pDatabaseTCTxtCalTable, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCTxtCalTable *pDatabaseTCTxtCalTable, CStringArray &szIssues) CONST
{
	INT  nPoint;
	INT  nPoints;
	BOOL  bTableData;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;
	CALTELDatabaseTCTxtCalTablesRecordset  cDatabaseTCTxtCalTables(this);
	CALTELDatabaseTCTxtCalTablePointsRecordset  cDatabaseTCTxtCalTablePoints(this);

	for (nPoint = 0, nPoints = (INT)pDatabaseTCTxtCalTable->GetSize(), cDatabaseTCTxtCalTables.Translate(pDatabaseTCTxtCalTable), bTableData = TRUE; nPoint < nPoints; nPoint++)
	{
		if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nPoint)))
		{
			cDatabaseTCTxtCalTablePoints.Translate(pDatabaseTCTxtCalTable, pDatabaseTCTxtCalPoint);
			bTableData &= (!IsTableRowEmpty(pDatabaseTCTxtCalPoint)) ? cDatabaseTCTxtCalTablePoints.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseTCTxtCalTables.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCNumOolTable *pDatabaseTCNumOolTable, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTCNumOolTables[0].Find(pDatabaseTCNumOolTable->GetName()) < 0 || pView->m_pDatabaseTCNumOolTables[1].Find(pDatabaseTCNumOolTable->GetName()) < 0 || !pView->m_pDatabaseTCNumOolTables[0].GetAt(pView->m_pDatabaseTCNumOolTables[0].Find(pDatabaseTCNumOolTable->GetName()))->Compare(pView->m_pDatabaseTCNumOolTables[1].GetAt(pView->m_pDatabaseTCNumOolTables[1].Find(pDatabaseTCNumOolTable->GetName())))) : ((bExist) ? (pView->m_pDatabaseTCNumOolTables[1].Find(pDatabaseTCNumOolTable->GetName()) >= 0) : CheckTableData(pView, pDatabaseTCNumOolTable, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCNumOolTable *pDatabaseTCNumOolTable, CStringArray &szIssues) CONST
{
	INT  nLimit;
	INT  nLimits;
	BOOL  bTableData;
	CDatabaseTCNumOolLimit  *pDatabaseTCNumOolLimit;
	CALTELDatabaseTCNumOolTablesRecordset  cDatabaseTCNumOolTables(this);
	CALTELDatabaseTCNumOolTableLimitsRecordset  cDatabaseTCNumOolTableLimits(this);

	for (nLimit = 0, nLimits = (INT)pDatabaseTCNumOolTable->GetSize(), cDatabaseTCNumOolTables.Translate(pDatabaseTCNumOolTable), bTableData = TRUE; nLimit < nLimits; nLimit++)
	{
		if ((pDatabaseTCNumOolLimit = pDatabaseTCNumOolTable->GetAt(nLimit)))
		{
			cDatabaseTCNumOolTableLimits.Translate(pDatabaseTCNumOolTable, pDatabaseTCNumOolLimit);
			bTableData &= (!IsTableRowEmpty(pDatabaseTCNumOolLimit)) ? cDatabaseTCNumOolTableLimits.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseTCNumOolTables.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCTxtOolTable *pDatabaseTCTxtOolTable, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTCTxtOolTables[0].Find(pDatabaseTCTxtOolTable->GetName()) < 0 || pView->m_pDatabaseTCTxtOolTables[1].Find(pDatabaseTCTxtOolTable->GetName()) < 0 || !pView->m_pDatabaseTCTxtOolTables[0].GetAt(pView->m_pDatabaseTCTxtOolTables[0].Find(pDatabaseTCTxtOolTable->GetName()))->Compare(pView->m_pDatabaseTCTxtOolTables[1].GetAt(pView->m_pDatabaseTCTxtOolTables[1].Find(pDatabaseTCTxtOolTable->GetName())))) : ((bExist) ? (pView->m_pDatabaseTCTxtOolTables[1].Find(pDatabaseTCTxtOolTable->GetName()) >= 0) : CheckTableData(pView, pDatabaseTCTxtOolTable, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCTxtOolTable *pDatabaseTCTxtOolTable, CStringArray &szIssues) CONST
{
	INT  nLimit;
	INT  nLimits;
	BOOL  bTableData;
	CDatabaseTCTxtOolLimit  *pDatabaseTCTxtOolLimit;
	CALTELDatabaseTCTxtOolTablesRecordset  cDatabaseTCTxtOolTables(this);
	CALTELDatabaseTCTxtOolTableLimitsRecordset  cDatabaseTCTxtOolTableLimits(this);

	for (nLimit = 0, nLimits = (INT)pDatabaseTCTxtOolTable->GetSize(), cDatabaseTCTxtOolTables.Translate(pDatabaseTCTxtOolTable), bTableData = TRUE; nLimit < nLimits; nLimit++)
	{
		if ((pDatabaseTCTxtOolLimit = pDatabaseTCTxtOolTable->GetAt(nLimit)))
		{
			cDatabaseTCTxtOolTableLimits.Translate(pDatabaseTCTxtOolTable, pDatabaseTCTxtOolLimit);
			bTableData &= (!IsTableRowEmpty(pDatabaseTCTxtOolLimit)) ? cDatabaseTCTxtOolTableLimits.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseTCTxtOolTables.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCPreExeGroup *pDatabaseTCPreExeGroup, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTCPreExeGroups[0].Find(pDatabaseTCPreExeGroup->GetID()) < 0 || pView->m_pDatabaseTCPreExeGroups[1].Find(pDatabaseTCPreExeGroup->GetID()) < 0 || !pView->m_pDatabaseTCPreExeGroups[0].GetAt(pView->m_pDatabaseTCPreExeGroups[0].Find(pDatabaseTCPreExeGroup->GetID()))->Compare(pView->m_pDatabaseTCPreExeGroups[1].GetAt(pView->m_pDatabaseTCPreExeGroups[1].Find(pDatabaseTCPreExeGroup->GetID())))) : ((bExist) ? (pView->m_pDatabaseTCPreExeGroups[1].Find(pDatabaseTCPreExeGroup->GetID()) >= 0) : CheckTableData(pView, pDatabaseTCPreExeGroup, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCPreExeGroup *pDatabaseTCPreExeGroup, CStringArray &szIssues) CONST
{
	INT  nParameter;
	INT  nParameters;
	BOOL  bTableData;
	CDatabaseTCPreExeGroupParameter  *pDatabaseTCPreExeGroupParameter;
	CALTELDatabaseTCPreExeGroupsRecordset  cDatabaseTCPreExeGroups(this);
	CALTELDatabaseTCPreExeGroupParametersRecordset  cDatabaseTCPreExeGroupParameters(this);

	for (nParameter = 0, nParameters = (INT)pDatabaseTCPreExeGroup->GetSize(), cDatabaseTCPreExeGroups.Translate(pDatabaseTCPreExeGroup), bTableData = TRUE; nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCPreExeGroupParameter = pDatabaseTCPreExeGroup->GetAt(nParameter)))
		{
			cDatabaseTCPreExeGroupParameters.Translate(pDatabaseTCPreExeGroup, pDatabaseTCPreExeGroupParameter);
			bTableData &= (!IsTableRowEmpty(pDatabaseTCPreExeGroupParameter)) ? cDatabaseTCPreExeGroupParameters.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseTCPreExeGroups.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCExeVerGroup *pDatabaseTCExeVerGroup, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTCExeVerGroups[0].Find(pDatabaseTCExeVerGroup->GetID()) < 0 || pView->m_pDatabaseTCExeVerGroups[1].Find(pDatabaseTCExeVerGroup->GetID()) < 0 || !pView->m_pDatabaseTCExeVerGroups[0].GetAt(pView->m_pDatabaseTCExeVerGroups[0].Find(pDatabaseTCExeVerGroup->GetID()))->Compare(pView->m_pDatabaseTCExeVerGroups[1].GetAt(pView->m_pDatabaseTCExeVerGroups[1].Find(pDatabaseTCExeVerGroup->GetID())))) : ((bExist) ? (pView->m_pDatabaseTCExeVerGroups[1].Find(pDatabaseTCExeVerGroup->GetID()) >= 0) : CheckTableData(pView, pDatabaseTCExeVerGroup, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCExeVerGroup *pDatabaseTCExeVerGroup, CStringArray &szIssues) CONST
{
	INT  nParameter;
	INT  nParameters;
	BOOL  bTableData;
	CDatabaseTCExeVerGroupParameter  *pDatabaseTCExeVerGroupParameter;
	CALTELDatabaseTCExeVerGroupsRecordset  cDatabaseTCExeVerGroups(this);
	CALTELDatabaseTCExeVerGroupParametersRecordset  cDatabaseTCExeVerGroupParameters(this);

	for (nParameter = 0, nParameters = (INT)pDatabaseTCExeVerGroup->GetSize(), cDatabaseTCExeVerGroups.Translate(pDatabaseTCExeVerGroup), bTableData = TRUE; nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCExeVerGroupParameter = pDatabaseTCExeVerGroup->GetAt(nParameter)))
		{
			cDatabaseTCExeVerGroupParameters.Translate(pDatabaseTCExeVerGroup, pDatabaseTCExeVerGroupParameter);
			bTableData &= (!IsTableRowEmpty(pDatabaseTCExeVerGroupParameter)) ? cDatabaseTCExeVerGroupParameters.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseTCExeVerGroups.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCParameterSet *pDatabaseTCParameterSet, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTCParameterSets[0].Find(pDatabaseTCParameterSet->GetName()) < 0 || pView->m_pDatabaseTCParameterSets[1].Find(pDatabaseTCParameterSet->GetName()) < 0 || !pView->m_pDatabaseTCParameterSets[0].GetAt(pView->m_pDatabaseTCParameterSets[0].Find(pDatabaseTCParameterSet->GetName()))->Compare(pView->m_pDatabaseTCParameterSets[1].GetAt(pView->m_pDatabaseTCParameterSets[1].Find(pDatabaseTCParameterSet->GetName())))) : ((bExist) ? (pView->m_pDatabaseTCParameterSets[1].Find(pDatabaseTCParameterSet->GetName()) >= 0) : CheckTableData(pView, pDatabaseTCParameterSet, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCParameterSet *pDatabaseTCParameterSet, CStringArray &szIssues) CONST
{
	INT  nParameter;
	INT  nParameters;
	BOOL  bTableData;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CALTELDatabaseTCParameterSetsRecordset  cDatabaseTCParameterSets(this);
	CALTELDatabaseTCParameterSetItemsRecordset  cDatabaseTCParameterSetItems(this);

	for (nParameter = 0, nParameters = (INT)pDatabaseTCParameterSet->GetSize(), cDatabaseTCParameterSets.Translate(pDatabaseTCParameterSet), bTableData = TRUE; nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCFunctionElement = pDatabaseTCParameterSet->GetAt(nParameter)))
		{
			cDatabaseTCParameterSetItems.Translate(pDatabaseTCParameterSet, pDatabaseTCFunctionElement);
			bTableData &= (!IsTableRowEmpty(pDatabaseTCFunctionElement)) ? cDatabaseTCParameterSetItems.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseTCParameterSets.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMPacketHeader *pDatabaseTMPacketHeader, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTMPacketHeaders[0].Find(pDatabaseTMPacketHeader->GetName()) < 0 || pView->m_pDatabaseTMPacketHeaders[1].Find(pDatabaseTMPacketHeader->GetName()) < 0 || !pView->m_pDatabaseTMPacketHeaders[0].GetAt(pView->m_pDatabaseTMPacketHeaders[0].Find(pDatabaseTMPacketHeader->GetName()))->Compare(pView->m_pDatabaseTMPacketHeaders[1].GetAt(pView->m_pDatabaseTMPacketHeaders[1].Find(pDatabaseTMPacketHeader->GetName())))) : ((bExist) ? (pView->m_pDatabaseTMPacketHeaders[1].Find(pDatabaseTMPacketHeader->GetName()) >= 0) : CheckTableData(pView, pDatabaseTMPacketHeader, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMPacketHeader *pDatabaseTMPacketHeader, CStringArray &szIssues) CONST
{
	CALTELDatabaseTMPacketHeadersRecordset  cDatabaseTMPacketHeaders(this);

	cDatabaseTMPacketHeaders.Translate(pDatabaseTMPacketHeader);
	return((IsTableRowEmpty(pDatabaseTMPacketHeader) || cDatabaseTMPacketHeaders.Check(szIssues)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMPacketHeaders *pDatabaseTMPacketHeaders, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (!pView->m_pDatabaseTMPacketHeaders[0].Compare(&pView->m_pDatabaseTMPacketHeaders[1])) : ((!bExist) ? CheckTableData(pView, pDatabaseTMPacketHeaders, szIssues) : TRUE));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMPacketHeaders *pDatabaseTMPacketHeaders, CStringArray &szIssues) CONST
{
	INT  nPacketHeader;
	INT  nPacketHeaders;
	BOOL  bTableData;
	CStringArray  szMessages;
	CDatabaseTMPacketHeader  *pDatabaseTMPacketHeader;

	for (nPacketHeader = 0, nPacketHeaders = (INT)pDatabaseTMPacketHeaders->GetSize(), bTableData = TRUE; nPacketHeader < nPacketHeaders; nPacketHeader++)
	{
		if ((pDatabaseTMPacketHeader = pDatabaseTMPacketHeaders->GetAt(nPacketHeader)))
		{
			bTableData &= CheckTableData(pView, pDatabaseTMPacketHeader, szMessages);
			szIssues.Append(szMessages);
			szMessages.RemoveAll();
		}
	}
	return bTableData;
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMPacketStream *pDatabaseTMPacketStream, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTMPacketStreams[0].Find(pDatabaseTMPacketStream->GetName()) < 0 || pView->m_pDatabaseTMPacketStreams[1].Find(pDatabaseTMPacketStream->GetName()) < 0 || !pView->m_pDatabaseTMPacketStreams[0].GetAt(pView->m_pDatabaseTMPacketStreams[0].Find(pDatabaseTMPacketStream->GetName()))->Compare(pView->m_pDatabaseTMPacketStreams[1].GetAt(pView->m_pDatabaseTMPacketStreams[1].Find(pDatabaseTMPacketStream->GetName())))) : ((bExist) ? (pView->m_pDatabaseTMPacketStreams[1].Find(pDatabaseTMPacketStream->GetName()) >= 0) : CheckTableData(pView, pDatabaseTMPacketStream, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMPacketStream *pDatabaseTMPacketStream, CStringArray &szIssues) CONST
{
	CALTELDatabaseTMPacketStreamsRecordset  cDatabaseTMPacketStreams(this);

	cDatabaseTMPacketStreams.Translate(pDatabaseTMPacketStream);
	return((IsTableRowEmpty(pDatabaseTMPacketStream) || cDatabaseTMPacketStreams.Check(szIssues)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMPacketStreams *pDatabaseTMPacketStreams, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (!pView->m_pDatabaseTMPacketStreams[0].Compare(&pView->m_pDatabaseTMPacketStreams[1])) : ((!bExist) ? CheckTableData(pView, pDatabaseTMPacketStreams, szIssues) : TRUE));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTMPacketStreams *pDatabaseTMPacketStreams, CStringArray &szIssues) CONST
{
	INT  nPacketStream;
	INT  nPacketStreams;
	BOOL  bTableData;
	CStringArray  szMessages;
	CDatabaseTMPacketStream  *pDatabaseTMPacketStream;

	for (nPacketStream = 0, nPacketStreams = (INT)pDatabaseTMPacketStreams->GetSize(), bTableData = TRUE; nPacketStream < nPacketStreams; nPacketStream++)
	{
		if ((pDatabaseTMPacketStream = pDatabaseTMPacketStreams->GetAt(nPacketStream)))
		{
			bTableData &= CheckTableData(pView, pDatabaseTMPacketStream, szMessages);
			szIssues.Append(szMessages);
			szMessages.RemoveAll();
		}
	}
	return bTableData;
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCFunctionBlock *pDatabaseTCFunctionBlock, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseTCFunctionBlocks[0].Find(pDatabaseTCFunctionBlock->GetName()) < 0 || pView->m_pDatabaseTCFunctionBlocks[1].Find(pDatabaseTCFunctionBlock->GetName()) < 0 || !pView->m_pDatabaseTCFunctionBlocks[0].GetAt(pView->m_pDatabaseTCFunctionBlocks[0].Find(pDatabaseTCFunctionBlock->GetName()))->Compare(pView->m_pDatabaseTCFunctionBlocks[1].GetAt(pView->m_pDatabaseTCFunctionBlocks[1].Find(pDatabaseTCFunctionBlock->GetName())))) : ((bExist) ? (pView->m_pDatabaseTCFunctionBlocks[1].Find(pDatabaseTCFunctionBlock->GetName()) >= 0) : CheckTableData(pView, pDatabaseTCFunctionBlock, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseTCFunctionBlock *pDatabaseTCFunctionBlock, CStringArray &szIssues) CONST
{
	INT  nElement;
	INT  nElements;
	UINT  nType[2];
	BOOL  bTableData;
	CDatabaseTCFunctionBlockElement  *pDatabaseTCFunctionBlockElement;
	CALTELDatabaseTCFunctionBlocksRecordset  cDatabaseTCFunctionBlocks(this);
	CALTELDatabaseTCFunctionBlockElementsRecordset  cDatabaseTCFunctionBlockElements(this);

	for (nType[0] = min(min(min(min(min(TCFUNCTIONBLOCK_TYPE_LI, TCFUNCTIONBLOCK_TYPE_LTT), TCFUNCTIONBLOCK_TYPE_L2S), TCFUNCTIONBLOCK_TYPE_NI), TCFUNCTIONBLOCK_TYPE_NTT), TCFUNCTIONBLOCK_TYPE_N2S), nType[1] = max(max(max(max(max(TCFUNCTIONBLOCK_TYPE_LI, TCFUNCTIONBLOCK_TYPE_LTT), TCFUNCTIONBLOCK_TYPE_L2S), TCFUNCTIONBLOCK_TYPE_NI), TCFUNCTIONBLOCK_TYPE_NTT), TCFUNCTIONBLOCK_TYPE_N2S), bTableData = TRUE; nType[0] <= nType[1]; nType[0] <<= 1)
	{
		if ((pDatabaseTCFunctionBlock->GetAttributes() & nType[0]) == nType[0])
		{
			cDatabaseTCFunctionBlocks.Translate(pDatabaseTCFunctionBlock, nType[0]);
			bTableData &= cDatabaseTCFunctionBlocks.Check(szIssues);
		}
	}
	for (nElement = 0, nElements = (INT)pDatabaseTCFunctionBlock->GetSize(); nElement < nElements; nElement++)
	{
		if ((pDatabaseTCFunctionBlockElement = pDatabaseTCFunctionBlock->GetAt(nElement)))
		{
			cDatabaseTCFunctionBlockElements.Translate(pDatabaseTCFunctionBlock, pDatabaseTCFunctionBlockElement);
			bTableData &= (!IsTableRowEmpty(pDatabaseTCFunctionBlockElement)) ? cDatabaseTCFunctionBlockElements.Check(szIssues) : bTableData;
		}
	}
	return bTableData;
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseOBProcessorMemoryImage *pDatabaseOBProcessorMemoryImage, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pDatabaseOBProcessorMemoryImage->GetName()) < 0 || pView->m_pDatabaseOBProcessorMemoryImages[1].Find(pDatabaseOBProcessorMemoryImage->GetName()) < 0 || !pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pDatabaseOBProcessorMemoryImage->GetName()))->Compare(pView->m_pDatabaseOBProcessorMemoryImages[1].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[1].Find(pDatabaseOBProcessorMemoryImage->GetName())))) : ((bExist) ? (pView->m_pDatabaseOBProcessorMemoryImages[1].Find(pDatabaseOBProcessorMemoryImage->GetName()) >= 0) : CheckTableData(pView, pDatabaseOBProcessorMemoryImage, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CDatabaseOBProcessorMemoryImage *pDatabaseOBProcessorMemoryImage, CStringArray &szIssues) CONST
{
	INT  nImageBlock;
	INT  nImageBlocks;
	BOOL  bTableData;
	CDatabaseOBProcessorMemoryImageBlock  *pDatabaseOBProcessorMemoryImageBlock;
	CALTELDatabaseOBProcessorMemoryImagesRecordset  cDatabaseOBProcessorMemoryImages(this);

	for (nImageBlock = 0, nImageBlocks = (INT)pDatabaseOBProcessorMemoryImage->GetSize(), bTableData = TRUE; nImageBlock < nImageBlocks; nImageBlock++)
	{
		if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nImageBlock)))
		{
			cDatabaseOBProcessorMemoryImages.Translate(pDatabaseOBProcessorMemoryImage, pDatabaseOBProcessorMemoryImageBlock);
			bTableData &= (!IsTableRowEmpty(pDatabaseOBProcessorMemoryImageBlock)) ? cDatabaseOBProcessorMemoryImages.Check(szIssues) : bTableData;
		}
	}
	return bTableData;
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CANDLayout *pANDLayout, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pANDLayouts[0].Find(pANDLayout->GetName()) < 0 || pView->m_pANDLayouts[1].Find(pANDLayout->GetName()) < 0 || !pView->m_pANDLayouts[0].GetAt(pView->m_pANDLayouts[0].Find(pANDLayout->GetName()))->Compare(pView->m_pANDLayouts[1].GetAt(pView->m_pANDLayouts[1].Find(pANDLayout->GetName())))) : ((bExist) ? (pView->m_pANDLayouts[0].Find(pANDLayout->GetName()) >= 0) : CheckTableData(pView, pANDLayout, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CANDLayout *pANDLayout, CStringArray &szIssues) CONST
{
	INT  nParameter;
	INT  nParameters;
	BOOL  bTableData;
	CANDLayoutParameter  *pParameter;
	CALTELDatabaseANDDirectoryRecordset  cDatabaseANDDirectory(this);
	CALTELDatabaseANDParametersRecordset  cDatabaseANDParameters(this);

	{ for (nParameter = 0, nParameters = (INT)pANDLayout->GetSize(), cDatabaseANDDirectory.Translate(pANDLayout), bTableData = TRUE; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = pANDLayout->GetAt(nParameter)))
		{
			cDatabaseANDParameters.Translate(pANDLayout, pParameter);
			bTableData &= (!IsTableRowEmpty(pParameter)) ? cDatabaseANDParameters.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseANDDirectory.Check(szIssues)) ? bTableData : FALSE);
	}
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CGRDLayout *pGRDLayout, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pGRDLayouts[0].Find(pGRDLayout->GetName()) < 0 || pView->m_pGRDLayouts[1].Find(pGRDLayout->GetName()) < 0 || !pView->m_pGRDLayouts[0].GetAt(pView->m_pGRDLayouts[0].Find(pGRDLayout->GetName()))->Compare(pView->m_pGRDLayouts[1].GetAt(pView->m_pGRDLayouts[1].Find(pGRDLayout->GetName())))) : ((bExist) ? (pView->m_pGRDLayouts[0].Find(pGRDLayout->GetName()) >= 0) : CheckTableData(pView, pGRDLayout, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CGRDLayout *pGRDLayout, CStringArray &szIssues) CONST
{
	INT  nParameter;
	INT  nParameters;
	BOOL  bTableData;
	CGRDLayoutParameter  *pParameter;
	CALTELDatabaseGRDDirectoryRecordset  cDatabaseGRDDirectory(this);
	CALTELDatabaseGRDParametersRecordset  cDatabaseGRDParameters(this);

	for (nParameter = 0, nParameters = (INT)pGRDLayout->GetSize(), cDatabaseGRDDirectory.Translate(pGRDLayout), bTableData = TRUE; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = pGRDLayout->GetAt(nParameter)))
		{
			cDatabaseGRDParameters.Translate(pGRDLayout, pParameter);
			bTableData &= (!IsTableRowEmpty(pParameter)) ? cDatabaseGRDParameters.Check(szIssues) : bTableData;
		}
	}
	return((cDatabaseGRDDirectory.Check(szIssues)) ? bTableData : FALSE);
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CPODLayout *pPODLayout, BOOL bModified, BOOL bExist) CONST
{
	CStringArray  szIssues;

	return((bModified) ? (pView->m_pPODLayouts[0].Find(pPODLayout->GetName()) < 0 || pView->m_pPODLayouts[1].Find(pPODLayout->GetName()) < 0 || !pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pPODLayout->GetName()))->Compare(pView->m_pPODLayouts[1].GetAt(pView->m_pPODLayouts[1].Find(pPODLayout->GetName())))) : ((bExist) ? (pView->m_pPODLayouts[0].Find(pPODLayout->GetName()) >= 0) : CheckTableData(pView, pPODLayout, szIssues)));
}
BOOL CALTELDatabaseEngine::CheckTableData(CONST CDatabaseTableView *pView, CONST CPODLayout *pPODLayout, CStringArray &szIssues) CONST
{
	CALTELDatabasePODDirectoryRecordset  cDatabasePODDirectory(this);

	cDatabasePODDirectory.Translate(pPODLayout);
	return cDatabasePODDirectory.Check(szIssues);
}

VOID CALTELDatabaseEngine::UpdateTable(CDatabaseTableView *pView, CONST CDatabaseTMNumCalTable *pDatabaseTMNumCalTable, BOOL bDelete)
{
	INT  nIndex;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;

	if ((pDatabaseTCNumCalTable = ((nIndex = GetTCNumCalTables()->Find(pDatabaseTMNumCalTable->GetName())) >= 0) ? GetTCNumCalTables()->GetAt(nIndex) : new CDatabaseTCNumCalTable))
	{
		for (pDatabaseTCNumCalTable->Copy(pDatabaseTMNumCalTable); (nIndex < 0 && GetTCNumCalTables()->Add(pDatabaseTCNumCalTable) >= 0) || nIndex >= 0; )
		{
			pView->UpdateTableForms(pDatabaseTCNumCalTable, bDelete);
			return;
		}
		delete pDatabaseTCNumCalTable;
	}
}
VOID CALTELDatabaseEngine::UpdateTable(CDatabaseTableView *pView, CONST CDatabaseTMTxtCalTable *pDatabaseTMTxtCalTable, BOOL bDelete)
{
	INT  nIndex;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;

	if ((pDatabaseTCTxtCalTable = ((nIndex = GetTCTxtCalTables()->Find(pDatabaseTMTxtCalTable->GetName())) >= 0) ? GetTCTxtCalTables()->GetAt(nIndex) : new CDatabaseTCTxtCalTable))
	{
		for (pDatabaseTCTxtCalTable->Copy(pDatabaseTMTxtCalTable); (nIndex < 0 && GetTCTxtCalTables()->Add(pDatabaseTCTxtCalTable) >= 0) || nIndex >= 0; )
		{
			pView->UpdateTableForms(pDatabaseTCTxtCalTable, bDelete);
			return;
		}
		delete pDatabaseTCTxtCalTable;
	}
}
VOID CALTELDatabaseEngine::UpdateTable(CDatabaseTableView *pView, CONST CDatabaseTCNumCalTable *pDatabaseTCNumCalTable, BOOL bDelete)
{
	INT  nIndex;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;

	if ((pDatabaseTMNumCalTable = ((nIndex = GetTMNumCalTables()->Find(pDatabaseTCNumCalTable->GetName())) >= 0) ? GetTMNumCalTables()->GetAt(nIndex) : new CDatabaseTMNumCalTable))
	{
		for (pDatabaseTMNumCalTable->Copy(pDatabaseTCNumCalTable); (nIndex < 0 && GetTMNumCalTables()->Add(pDatabaseTMNumCalTable) >= 0) || nIndex >= 0; )
		{
			pView->UpdateTableForms(pDatabaseTMNumCalTable, bDelete);
			return;
		}
		delete pDatabaseTMNumCalTable;
	}
}
VOID CALTELDatabaseEngine::UpdateTable(CDatabaseTableView *pView, CONST CDatabaseTCTxtCalTable *pDatabaseTCTxtCalTable, BOOL bDelete)
{
	INT  nIndex;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;

	if ((pDatabaseTMTxtCalTable = ((nIndex = GetTMTxtCalTables()->Find(pDatabaseTCTxtCalTable->GetName())) >= 0) ? GetTMTxtCalTables()->GetAt(nIndex) : new CDatabaseTMTxtCalTable))
	{
		for (pDatabaseTMTxtCalTable->Copy(pDatabaseTCTxtCalTable); (nIndex < 0 && GetTMTxtCalTables()->Add(pDatabaseTMTxtCalTable) >= 0) || nIndex >= 0; )
		{
			pView->UpdateTableForms(pDatabaseTMTxtCalTable, bDelete);
			return;
		}
		delete pDatabaseTMTxtCalTable;
	}
}

INT CALTELDatabaseEngine::EnumDBMSTables(CStringArray &szTables, CStringArray &szDescriptions) CONST
{
	INT  nTable;
	INT  nTables;
	CStringArray  szColumns;
	CStringArray  szDataTypes;
	CStringArray  szDefaults;
	CByteArray  bAllowNulls;

	for (nTable = 0, nTables = MAXDATABASETABLEID - MINDATABASETABLEID, szTables.RemoveAll(), szDescriptions.RemoveAll(); nTable <= nTables; nTable++)
	{
		if (GetDBMSTableCharacteristics(STRING(MINDATABASETABLEID + nTable), szColumns, szDataTypes, szDefaults, bAllowNulls))
		{
			szTables.Add(STRING(MINDATABASETABLEID + nTable));
			szDescriptions.Add(STRING(MINDATABASETABLEDESCRIPTIONID + nTable));
		}
	}
	return((INT)szTables.GetSize());
}

BOOL CALTELDatabaseEngine::GetDBMSTableCharacteristics(LPCTSTR pszTable, CStringArray &szColumns, CStringArray &szDataTypes, CStringArray &szDefaults, CByteArray &bAllowNulls) CONST
{
	for (szColumns.RemoveAll(), szDataTypes.RemoveAll(), szDefaults.RemoveAll(), bAllowNulls.RemoveAll(); UsesDBMSTables(DATABASE_COMPONENT_TMPACKET); )
	{
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_DFH)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DFH_NAME)); szDataTypes.Add(Varchar(GetTMPacketDataFieldHeaderNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_PRESENT)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_OFFSET)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_LENGTH)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DFH_TM_ID_PRESENT)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_OFFSET)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_LENGTH)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DFH_3DISC_PRESENT)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_OFFSET)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_LENGTH)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DFH_TIME_PRESENT)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_OFFSET)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_LENGTH)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DFH_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_PMF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_PACKID)); szDataTypes.Add(Char(GetTMPacketTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_TYPE)); szDataTypes.Add(Char(GetTMPacketTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_DESCR)); szDataTypes.Add(Varchar(GetTMPacketDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_HFLG)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_APID)); szDataTypes.Add(Char(GetTMPacketAPIDLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_LENG)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_TMTY)); szDataTypes.Add(Char(GetTMPacketTMTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_TMID)); szDataTypes.Add(Char(GetTMPacketTMIDLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_FUNC)); szDataTypes.Add(Varchar(GetTMPacketDetailsLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_SMPRT)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_VALID)); szDataTypes.Add(Char(GetTMPacketTransmissionRetriesLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_3VAL)); szDataTypes.Add(Varchar(GetTMPacket3DiscLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_STATUS)); szDataTypes.Add(Char(GetTMPacketStatusLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME)); szDataTypes.Add(Varchar(GetTMPacketDataFieldHeaderNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_VCID)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PMF_EVENTID)); szDataTypes.Add(Char(GetTMPacketEventIDLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_PLF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PLF_NAME)); szDataTypes.Add(Char(GetTMPacketParameterTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PLF_PACKID)); szDataTypes.Add(Char(GetTMPacketTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PLF_OFFBY)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PLF_OFFBI)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PLF_NBOCC)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PLF_NBGRP)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PLF_LGOCC)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PLF_LGGRP)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PLF_TIME)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PLF_TDOCC)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PLF_VALID)); szDataTypes.Add(Char(GetTMPacketParameterValidityLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PLF_STATUS)); szDataTypes.Add(Char(GetTMPacketStatusLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PLF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_STR)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_STR_STID)); szDataTypes.Add(Char(GetTMPacketStreamNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_STR_APID)); szDataTypes.Add(Char(GetTMPacketStreamAPIDLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_STR_TMID)); szDataTypes.Add(Char(GetTMPacketStreamTMIDLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_STR_PERIOD)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_STR_TIMEOUT)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_STR_VALID)); szDataTypes.Add(Char(GetTMPacketStreamValidityParameterLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		break;
	}
	if (UsesDBMSTables(DATABASE_COMPONENT_TCFUNCTION))
	{
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_CCF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_CNAME)); szDataTypes.Add(Varchar(GetTCFunctionNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_DESCR)); szDataTypes.Add(Varchar(GetTCFunctionDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_CTYPE)); szDataTypes.Add(Varchar(GetTCFunctionTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_WNDCL)); szDataTypes.Add(Varchar(2)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_TCPID)); szDataTypes.Add(Char(GetTCFunctionPacketTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_ADD)); szDataTypes.Add(Char(GetTCFunctionTCIDLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_LDESC)); szDataTypes.Add(Varchar(GetTCFunctionDetailsLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_DESS)); szDataTypes.Add(Varchar(GetTCFunctionDestinationSubSystemLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_DEUN)); szDataTypes.Add(Varchar(GetTCFunctionDestinationEquipmentLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_ROUTS)); szDataTypes.Add(Varchar(GetTCFunctionRouterSubSystemLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_ROUTU)); szDataTypes.Add(Varchar(GetTCFunctionRouterEquipmentLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_OPINFO)); szDataTypes.Add(Varchar(GetTCFunctionOperationalInfoLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_VALID)); szDataTypes.Add(Varchar(GetTCFunctionValidityConditionsLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_FUNC1)); szDataTypes.Add(Varchar(GetTCFunctionExtendedDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_FUNC2)); szDataTypes.Add(Varchar(GetTCFunctionExtendedDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_ALTC)); szDataTypes.Add(Varchar(GetTCFunctionAssociatedTelecommandsLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_CMPTC)); szDataTypes.Add(Varchar(GetTCFunctionComplementaryTelecommandsLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_SSCH)); szDataTypes.Add(Varchar(GetTCFunctionDestinationSubScheduleLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_TCTYPE)); szDataTypes.Add(Char(GetTCFunctionTCTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_ULPPTF)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_HAZ)); szDataTypes.Add(Char(GetTCFunctionHazardousFlagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_COSEV)); szDataTypes.Add(Varchar(GetTCFunctionMissionPlannerEventLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_STATUS)); szDataTypes.Add(Char(GetTCFunctionStatusLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_CVPID)); szDataTypes.Add(Varchar(GetTCFunctionExeVerGroupLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CCF_PVPID)); szDataTypes.Add(Varchar(GetTCFunctionPreExeGroupLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_CDF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CDF_CNAME)); szDataTypes.Add(Varchar(GetTCFunctionNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CDF_ELTYPE)); szDataTypes.Add(Char(GetTCFunctionElementTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CDF_ELLEN)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CDF_BITOFF)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CDF_PNAME)); szDataTypes.Add(Varchar(GetTCFunctionElementNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CDF_VTYPE)); szDataTypes.Add(Char(GetTCFunctionElementValueInterpretationLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CDF_VALUE)); szDataTypes.Add(Varchar(GetTCFunctionElementConstValueLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CDF_RADIX)); szDataTypes.Add(Char(GetTCFunctionElementValueRadixLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CDF_DESCR)); szDataTypes.Add(Varchar(GetTCFunctionElementDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CDF_STATUS)); szDataTypes.Add(Char(GetTCFunctionStatusLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CDF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_TCP)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TCP_PACKID)); szDataTypes.Add(Char(GetTCPacketTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TCP_TYPE)); szDataTypes.Add(Char(GetTCPacketTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TCP_DESCR)); szDataTypes.Add(Varchar(GetTCPacketDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TCP_HFLG)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TCP_APID)); szDataTypes.Add(Char(GetTCPacketAPIDLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TCP_LENG)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TCP_FUNC)); szDataTypes.Add(Varchar(GetTCPacketDetailsLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TCP_FUNC2)); szDataTypes.Add(Varchar(GetTCPacketDetailsLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TCP_STATUS)); szDataTypes.Add(Char(GetTCPacketStatusLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TCP_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TCP_UNIQID)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_PCDF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCDF_CNAME)); szDataTypes.Add(Char(GetTCPacketTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE)); szDataTypes.Add(Char(GetTCPacketParameterTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCDF_ELLEN)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCDF_BITOFF)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCDF_PNAME)); szDataTypes.Add(Varchar(GetTCPacketParameterTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCDF_VTYPE)); szDataTypes.Add(Char(GetTCPacketParameterValueInterpretationLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCDF_VALUE)); szDataTypes.Add(Varchar(GetTCPacketParameterConstValueLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCDF_RADIX)); szDataTypes.Add(Char(GetTCPacketParameterValueRadixLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCDF_DESCR)); szDataTypes.Add(Varchar(GetTCPacketParameterDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCDF_STATUS)); szDataTypes.Add(Char(GetTCPacketStatusLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCDF_CODING)); szDataTypes.Add(Char(GetTCPacketParameterValueCodingLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCDF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_BCF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_BCF_CNAME)); szDataTypes.Add(Varchar(GetTCFunctionBlockNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_BCF_INTER)); szDataTypes.Add(Char(GetTCFunctionBlockInterpretationLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_BCF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_BCCF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_BCCF_CNAME)); szDataTypes.Add(Varchar(GetTCFunctionBlockNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_BCCF_INTER)); szDataTypes.Add(Char(GetTCFunctionBlockElementInterpretationLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_BCCF_CONTENT)); szDataTypes.Add(Varchar(GetTCFunctionNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_BCCF_CNSRT)); szDataTypes.Add(Char(1)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_BCCF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_CPS)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPS_NAME)); szDataTypes.Add(Varchar(GetTCParameterSetNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPS_DESCR)); szDataTypes.Add(Varchar(GetTCParameterSetDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPS_STATUS)); szDataTypes.Add(Char(GetTCParameterSetStatusLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_CPSP)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPSP_NAME)); szDataTypes.Add(Varchar(GetTCParameterSetNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPSP_PNAME)); szDataTypes.Add(Varchar(GetTCParameterSetItemNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPSP_BITOFF)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPSP_PVALUE)); szDataTypes.Add(Varchar(GetTCParameterSetItemConstValueLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPSP_VTYPE)); szDataTypes.Add(Char(GetTCParameterSetItemValueInterpretationLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPSP_RADIX)); szDataTypes.Add(Char(GetTCParameterSetItemValueRadixLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_PCPS)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCPS_CNAME)); szDataTypes.Add(Varchar(GetTCFunctionNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCPS_NAME)); szDataTypes.Add(Varchar(GetTCParameterSetNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_PVP)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PVP_ID)); szDataTypes.Add(Varchar(GetTCPreExeGroupIDLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PVP_DESCR)); szDataTypes.Add(Varchar(GetTCPreExeGroupDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PVP_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_PEV)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PEV_ID)); szDataTypes.Add(Varchar(GetTCPreExeGroupIDLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PEV_PNAME)); szDataTypes.Add(Char(GetTCPreExeGroupParameterTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PEV_PVALUE)); szDataTypes.Add(Varchar(GetTCPreExeGroupParameterConstValueLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PEV_INTER)); szDataTypes.Add(Char(GetTCPreExeGroupParameterInterpretationLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PEV_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_CVP)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CVP_ID)); szDataTypes.Add(Varchar(GetTCExeVerGroupIDLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CVP_NAME)); szDataTypes.Add(Varchar(GetTCExeVerGroupNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CVP_DESCR)); szDataTypes.Add(Varchar(GetTCExeVerGroupDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CVP_MINWND)); szDataTypes.Add(Char(1)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CVP_NMBST)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CVP_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_CEV)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CEV_ID)); szDataTypes.Add(Varchar(GetTCExeVerGroupIDLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CEV_EVTYPE)); szDataTypes.Add(Char(GetTCExeVerGroupParameterTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CEV_PNAME)); szDataTypes.Add(Char(GetTCExeVerGroupParameterTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CEV_PVALUE)); szDataTypes.Add(Varchar(GetTCExeVerGroupParameterConstValueLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CEV_INTER)); szDataTypes.Add(Char(GetTCExeVerGroupParameterInterpretationLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CEV_SWND)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CEV_STAGE)); szDataTypes.Add(Varchar(GetTCExeVerGroupParameterStageLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CEV_EPCKID)); szDataTypes.Add(Char(GetTCExeVerGroupParameterEventIDLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CEV_STATUS)); szDataTypes.Add(Char(GetTCExeVerGroupStatusLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CEV_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
	}
	if (UsesDBMSTables(DATABASE_COMPONENT_TCSEQUENCE))
	{
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_CSF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_NAME)); szDataTypes.Add(Varchar(GetTCSequenceNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_DESCR)); szDataTypes.Add(Varchar(GetTCSequenceDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_IFTT)); szDataTypes.Add(Char(1)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_NFPARS)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_NSTMNT)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_REFCNT)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_TYPCNT)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_TYPE)); szDataTypes.Add(Char(1)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_SEQDATE)); szDataTypes.Add(Varchar(GetTCSequenceDateLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_SEQUSER)); szDataTypes.Add(Varchar(GetTCSequenceUserNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_DOCNAME)); szDataTypes.Add(Varchar(GetTCSequenceDocumentNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_DOCISSUE)); szDataTypes.Add(Varchar(GetTCSequenceDocumentIssueLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_DOCDATE)); szDataTypes.Add(Varchar(GetTCSequenceDocumentDateLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_COSEV)); szDataTypes.Add(Varchar(GetTCSequenceMissionPlannerEventLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_SSCH)); szDataTypes.Add(Varchar(GetTCSequenceSubScheduleDestinationLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_CSS)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_SQNAME)); szDataTypes.Add(Varchar(GetTCSequenceNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_COMMENT)); szDataTypes.Add(Varchar(GetTCSequenceEntryDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_TCTYPE)); szDataTypes.Add(Varchar(GetTCSequenceEntryTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_1STEP)); szDataTypes.Add(Varchar(GetTCSequenceEntry1StepLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_EXTRA1)); szDataTypes.Add(Varchar(40)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_EXTRA2)); szDataTypes.Add(Varchar(40)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_EXTRA3)); szDataTypes.Add(Varchar(40)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_EXTRA4)); szDataTypes.Add(Varchar(40)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_EXTRA5)); szDataTypes.Add(Varchar(40)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_ENTRY)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_IDENT)); szDataTypes.Add(Varchar(GetTCSequenceEntryNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_TYPE)); szDataTypes.Add(Varchar(GetTCSequenceEntrySubTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_RELTIME)); szDataTypes.Add(Varchar(GetTCSequenceEntryReleaseDeltaTimeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_ABSTIME)); szDataTypes.Add(Varchar(GetTCSequenceEntryExecutionTimeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_EXETIME)); szDataTypes.Add(Varchar(GetTCSequenceEntryExecutionDeltaTimeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_LABEL)); szDataTypes.Add(Varchar(5)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_GROUP)); szDataTypes.Add(Varchar(GetTCSequenceEntryGroupFlagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_BLOCK)); szDataTypes.Add(Varchar(GetTCSequenceEntryBlockMembershipLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL)); szDataTypes.Add(Varchar(GetTCSequenceEntryBlockFlagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_ILOCK)); szDataTypes.Add(Varchar(1)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_PTV)); szDataTypes.Add(Varchar(1)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_PTV_V)); szDataTypes.Add(Varchar(1)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_PTV_C)); szDataTypes.Add(Varchar(1)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_PTV_F)); szDataTypes.Add(Varchar(1)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_UV)); szDataTypes.Add(Varchar(1)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_NPARS)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_CEV)); szDataTypes.Add(Varchar(1)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSS_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_CSP)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSP_SQNAME)); szDataTypes.Add(Varchar(GetTCSequenceNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSP_FPNAME)); szDataTypes.Add(Varchar(GetTCSequenceParameterTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSP_FPNUM)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSP_DESCR)); szDataTypes.Add(Varchar(GetTCSequenceParameterDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSP_LENGTH)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSP_CODING)); szDataTypes.Add(Varchar(GetTCSequenceParameterCodingLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSP_UNIT)); szDataTypes.Add(Varchar(GetTCSequenceParameterUnitLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSP_VTYPE)); szDataTypes.Add(Varchar(GetTCSequenceParameterValueTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSP_RADIX)); szDataTypes.Add(Varchar(GetTCSequenceParameterValueRadixLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSP_DEFVAL)); szDataTypes.Add(Varchar(GetTCSequenceParameterConstValueLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSP_CATEG)); szDataTypes.Add(Varchar(GetTCSequenceParameterCategoryLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSP_CALREF)); szDataTypes.Add(Varchar(GetTCSequenceParameterCalTableLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSP_TXFREF)); szDataTypes.Add(Varchar(GetTCSequenceParameterCalTableLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSP_OCFREF)); szDataTypes.Add(Varchar(GetTCSequenceParameterOolTableLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CSP_FXFREF)); szDataTypes.Add(Varchar(GetTCSequenceParameterOolTableLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_SDF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_SDF_SQNAME)); szDataTypes.Add(Varchar(GetTCSequenceNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_SDF_ENTRY)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_SDF_BITOFF)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_SDF_PNAME)); szDataTypes.Add(Varchar(GetTCSequenceEntryParameterTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_SDF_VALRADIX)); szDataTypes.Add(Varchar(GetTCSequenceEntryParameterValueRadixLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_SDF_DSPFMT)); szDataTypes.Add(Varchar(2)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_SDF_VALTYPE)); szDataTypes.Add(Varchar(GetTCSequenceEntryParameterValueTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_SDF_VALUE)); szDataTypes.Add(Varchar(GetTCSequenceEntryParameterConstValueLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_SDF_COMMENT)); szDataTypes.Add(Varchar(GetTCSequenceEntryParameterCommentLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_SDF_PSET)); szDataTypes.Add(Varchar(GetTCSequenceEntryParameterMemoryAreaNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_SDF_PSINST)); szDataTypes.Add(Varchar(GetTCSequenceEntryParameterMemoryAreaVersionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_SDF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
	}
	if (UsesDBMSTables(DATABASE_COMPONENT_OBPROCESSOR))
	{
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_GEN)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)); szDataTypes.Add(Varchar(GetOBProcessorNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GEN_PATCHTC)); szDataTypes.Add(Varchar(GetOBProcessorPatchCommandLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GEN_DUMPTC)); szDataTypes.Add(Varchar(GetOBProcessorDumpCommandLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GEN_TMPKT)); szDataTypes.Add(Varchar(GetOBProcessorDumpPacketLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GEN_STARTADDR)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GEN_ENDADDR)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GEN_IMGNAME)); szDataTypes.Add(Varchar(GetOBProcessorMasterImageLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GEN_INTERVAL)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GEN_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_MAD)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MAD_PROCESSOR)); szDataTypes.Add(Varchar(GetOBProcessorNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MAD_NAME)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MAD_DESCR)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MAD_TYPE)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MAD_PATCHTC)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaPatchCommandLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MAD_DUMPTC)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaDumpCommandLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MAD_TMPKT)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaDumpPacketLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MAD_PATCHABLE)); szDataTypes.Add(Char(GetOBProcessorMemoryAreaPatchFlagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MAD_DUMPABLE)); szDataTypes.Add(Char(GetOBProcessorMemoryAreaDumpFlagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MAD_UPDATE)); szDataTypes.Add(Char(GetOBProcessorMemoryAreaUpdateFlagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MAD_INHIBIT)); szDataTypes.Add(Char(GetOBProcessorMemoryAreaInhibitFlagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MAD_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_MEM)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MEM_MNAME)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaBlockNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MEM_TMNAME)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaBlockTMParameterLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MEM_TCNAME)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaBlockTCParameterLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MEM_PAGE)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MEM_ADDRESS)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MEM_BITOFF)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MEM_WIDTH)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MEM_DESCR)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaBlockDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_MEM_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_CAT)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAT_ID)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaCatalogueEntryIDLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAT_NAME)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaCatalogueNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAT_DESCR)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaCatalogueEntryDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAT_VERSION)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaCatalogueEntryVersionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAT_DATE)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaCatalogueEntryDateLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAT_TIME)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaCatalogueEntryTimeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAT_LOCATION)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaCatalogueEntryLocationLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAT_COMPLETE)); szDataTypes.Add(Char(GetOBProcessorMemoryAreaCatalogueEntryFlagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAT_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_CRC)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CRC_NAME)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaCheckSumNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CRC_PROCESSOR)); szDataTypes.Add(Varchar(GetOBProcessorNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CRC_DEST)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CRC_LENGTH)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CRC_PAGE)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CRC_START)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CRC_END)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CRC_SEED)); szDataTypes.Add(Varchar(GetOBProcessorMemoryAreaCheckSumSeedValueLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CRC_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_IMG)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_IMG_MNAME)); szDataTypes.Add(Varchar(GetOBProcessorMemoryImageNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_IMG_VERSION)); szDataTypes.Add(Varchar(GetOBProcessorMemoryImageBlockVersionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_IMG_PAGE)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_IMG_ADDRESS)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_IMG_DATA)); szDataTypes.Add(Text()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_IMG_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
	}
	if (UsesDBMSTables(DATABASE_COMPONENT_TMPARAMETER))
	{
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_PCF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_NAME)); szDataTypes.Add(Char(GetTMParameterTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_DESCR)); szDataTypes.Add(Varchar(GetTMParameterDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_UNIT)); szDataTypes.Add(Varchar(GetTMParameterUnitLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_VALID)); szDataTypes.Add(Char(GetTMParameterValidityParameterLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_CATEG)); szDataTypes.Add(Char(GetTMParameterCategoryLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_WIDTH)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_NATURE)); szDataTypes.Add(Char(GetTMParameterNatureLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_CODING)); szDataTypes.Add(Char(GetTMParameterCodingLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_INTER)); szDataTypes.Add(Char(GetTMParameterInterpretationLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_USECON)); szDataTypes.Add(Char(GetTMParameterConsistenceChecksFlagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_PARVAL)); szDataTypes.Add(Varchar(GetTMParameterConstValueLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_TYPE)); szDataTypes.Add(Varchar(GetTMParameterTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_LDESC)); szDataTypes.Add(Varchar(GetTMParameterDetailsLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_SOURS)); szDataTypes.Add(Varchar(GetTMParameterSourceSubSystemLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_SOURU)); szDataTypes.Add(Varchar(GetTMParameterSourceEquipmentLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_ROUTS)); szDataTypes.Add(Varchar(GetTMParameterRouterSubSystemLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_ROUTU)); szDataTypes.Add(Varchar(GetTMParameterRouterEquipmentLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_ASTC)); szDataTypes.Add(Varchar(GetTMParameterAssociatedTelecommandsLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_OPINFO)); szDataTypes.Add(Varchar(GetTMParameterOperationalInfoLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_APPLC)); szDataTypes.Add(Varchar(GetTMParameterValidityConditionsLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_MONIT)); szDataTypes.Add(Varchar(GetTMParameterDangerConditionsLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_ALTM)); szDataTypes.Add(Varchar(GetTMParameterAlternativeParametersLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_INTM)); szDataTypes.Add(Varchar(GetTMParameterInterrogationInstructionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_DRVEXP)); szDataTypes.Add(Text()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_EXPTRG)); szDataTypes.Add(Varchar(GetTMParameterTriggerExpressionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_TRGTYP)); szDataTypes.Add(Char(GetTMParameterTriggerTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_OBSPAR)); szDataTypes.Add(Char(GetTMParameterOBSTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_STATUS)); szDataTypes.Add(Char(GetTMParameterStatusLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
	}
	if (UsesDBMSTables(DATABASE_COMPONENT_TCPARAMETER))
	{
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_CPC)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPC_PNAME)); szDataTypes.Add(Varchar(GetTCParameterTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPC_DESCR)); szDataTypes.Add(Varchar(GetTCParameterDescriptionLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPC_LENGTH)); szDataTypes.Add(Varchar(2)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPC_DSPFMT)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPC_CODING)); szDataTypes.Add(Char(GetTCParameterCodingLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPC_UNIT)); szDataTypes.Add(Varchar(GetTCParameterUnitLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPC_CATEG)); szDataTypes.Add(Char(GetTCParameterCategoryLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPC_CALREF)); szDataTypes.Add(Varchar(GetTCParameterCalTableLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPC_TXFREF)); szDataTypes.Add(Varchar(GetTCParameterCalTableLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPC_OCFREF)); szDataTypes.Add(Varchar(GetTCParameterOolTableLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPC_FXFREF)); szDataTypes.Add(Varchar(GetTCParameterOolTableLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPC_STATUS)); szDataTypes.Add(Char(GetTCParameterStatusLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CPC_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
	}
	if (UsesDBMSTables(DATABASE_COMPONENT_TMPARAMETER) || UsesDBMSTables(DATABASE_COMPONENT_TCPARAMETER))
	{
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_CAL)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAL_NAME)); szDataTypes.Add(Varchar(max(GetTMNumCalTableNameLength(), GetTCNumCalTableNameLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAL_DESCR)); szDataTypes.Add(Varchar(max(GetTMNumCalTableDescriptionLength(), GetTCNumCalTableDescriptionLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAL_UNIT)); szDataTypes.Add(Varchar(max(GetTMNumCalTableUnitLength(), GetTCNumCalTableUnitLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAL_NBPNT)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAL_STATUS)); szDataTypes.Add(Char(max(GetTMNumCalTableStatusLength(), GetTCNumCalTableStatusLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAL_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CAL_UNIQID)); szDataTypes.Add(Numeric(5, 0)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_CALP)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CALP_NAME)); szDataTypes.Add(Varchar(max(GetTMNumCalTableNameLength(), GetTCNumCalTableNameLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CALP_XVAL)); szDataTypes.Add(Float()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CALP_YVAL)); szDataTypes.Add(Float()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CALP_STATUS)); szDataTypes.Add(Char(max(GetTMNumCalTableStatusLength(), GetTCNumCalTableStatusLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_CALP_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_PCAL)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCAL_PNAME)); szDataTypes.Add(Char(GetTMParameterTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCAL_CNAME)); szDataTypes.Add(Varchar(max(GetTMNumCalTableNameLength(), GetTCNumCalTableNameLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCAL_VALID)); szDataTypes.Add(Char(GetTMParameterValidityParameterLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCAL_STATUS)); szDataTypes.Add(Char(max(GetTMNumCalTableStatusLength(), GetTCNumCalTableStatusLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PCAL_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_TXF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TXF_NAME)); szDataTypes.Add(Varchar(max(GetTMTxtCalTableNameLength(), GetTCTxtCalTableNameLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TXF_DESCR)); szDataTypes.Add(Varchar(max(GetTMTxtCalTableDescriptionLength(), GetTCTxtCalTableDescriptionLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TXF_NBTXT)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TXF_STATUS)); szDataTypes.Add(Char(max(GetTMTxtCalTableStatusLength(), GetTCTxtCalTableStatusLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TXF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TXF_UNIQID)); szDataTypes.Add(Numeric(5, 0)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_TXFP)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TXFP_NAME)); szDataTypes.Add(Varchar(max(GetTMTxtCalTableNameLength(), GetTCTxtCalTableNameLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TXFP_FROM)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TXFP_TO)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TXFP_TEXT)); szDataTypes.Add(Varchar(max(GetTMTxtCalTablePointTextLength(), GetTCTxtCalTablePointTextLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TXFP_STATUS)); szDataTypes.Add(Char(max(GetTMTxtCalTableStatusLength(), GetTCTxtCalTableStatusLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_TXFP_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_PTXF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PTXF_PNAME)); szDataTypes.Add(Char(GetTMParameterTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PTXF_CNAME)); szDataTypes.Add(Varchar(max(GetTMTxtCalTableNameLength(), GetTCTxtCalTableNameLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PTXF_VALID)); szDataTypes.Add(Char(GetTMParameterValidityParameterLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PTXF_STATUS)); szDataTypes.Add(Char(max(GetTMTxtCalTableStatusLength(), GetTCTxtCalTableStatusLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PTXF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_OCF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_OCF_ONAME)); szDataTypes.Add(Varchar(max(GetTMNumOolTableNameLength(), GetTCNumOolTableNameLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_OCF_INTER)); szDataTypes.Add(Char(max(GetTMNumOolTableInterpretationLength(), GetTCNumOolTableInterpretationLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_OCF_CODING)); szDataTypes.Add(Char(max(GetTMNumOolTableCodingLength(), GetTCNumOolTableCodingLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_OCF_RADIX)); szDataTypes.Add(Char(max(GetTMNumOolTableRadixLength(), GetTCNumOolTableRadixLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_OCF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_OCFP)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_OCFP_ONAME)); szDataTypes.Add(Varchar(max(GetTMNumOolTableNameLength(), GetTCNumOolTableNameLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_OCFP_ORDER)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_OCFP_LVALUE)); szDataTypes.Add(Varchar(max(GetTMNumOolTableLimitValueLength(), GetTCNumOolTableLimitValueLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_OCFP_HVALUE)); szDataTypes.Add(Varchar(max(GetTMNumOolTableLimitValueLength(), GetTCNumOolTableLimitValueLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_OCFP_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_POCF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_POCF_PNAME)); szDataTypes.Add(Char(GetTMParameterTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_POCF_ONAME)); szDataTypes.Add(Varchar(max(GetTMNumOolTableNameLength(), GetTCNumOolTableNameLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_POCF_VALID)); szDataTypes.Add(Char(GetTMParameterValidityParameterLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_POCF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_FXF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_FXF_SNAME)); szDataTypes.Add(Varchar(max(GetTMTxtOolTableNameLength(), GetTCTxtOolTableNameLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_FXF_INTER)); szDataTypes.Add(Char(max(GetTMTxtOolTableInterpretationLength(), GetTCTxtOolTableInterpretationLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_FXF_RADIX)); szDataTypes.Add(Char(max(GetTMTxtOolTableRadixLength(), GetTCTxtOolTableRadixLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_FXF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_FXFP)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_FXFP_SNAME)); szDataTypes.Add(Varchar(max(GetTMTxtOolTableNameLength(), GetTCTxtOolTableNameLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_FXFP_ORDER)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_FXFP_FROM)); szDataTypes.Add(Varchar(GetTMTxtOolTableLimitValueLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_FXFP_TO)); szDataTypes.Add(Varchar(max(GetTMTxtOolTableLimitValueLength(), GetTCTxtOolTableLimitValueLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_FXFP_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_PFXF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PFXF_PNAME)); szDataTypes.Add(Char(GetTMParameterTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PFXF_SNAME)); szDataTypes.Add(Varchar(max(GetTMTxtOolTableNameLength(), GetTCTxtOolTableNameLength()))); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PFXF_VALID)); szDataTypes.Add(Char(GetTMParameterValidityParameterLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PFXF_SC_NAME)); szDataTypes.Add(Varchar(32)); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
	}
	if (UsesDBMSTables(DATABASE_COMPONENT_AND))
	{
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_DPF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DPF_NUMBER)); szDataTypes.Add(Char(GetANDNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DPF_DESCR)); szDataTypes.Add(Varchar(GetANDTitleLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)); szDataTypes.Add(Varchar(GetANDColumnsLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DPF_STATUS)); szDataTypes.Add(Char(GetANDStatusLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_DPFP)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DPFP_NUMBER)); szDataTypes.Add(Char(GetANDNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DPFP_PNAME)); szDataTypes.Add(Char(GetANDParameterTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DPFP_COMMENT)); szDataTypes.Add(Varchar(GetANDParameterCommentLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DPFP_ROW)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DPFP_COL)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DPFP_COLOR)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DPFP_COMM)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DPFP_VALMODE)); szDataTypes.Add(Char(GetANDParameterModeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DPFP_VALCHARS)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_DPFP_VALALIGN)); szDataTypes.Add(Char(GetANDParameterAlignmentLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			return TRUE;
		}
	}
	if (UsesDBMSTables(DATABASE_COMPONENT_GRD))
	{
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_GPF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_NUMBER)); szDataTypes.Add(Char(GetGRDNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_DESCR)); szDataTypes.Add(Varchar(GetGRDTitleLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_TYPE)); szDataTypes.Add(Char(GetGRDTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE)); szDataTypes.Add(Char(GetGRDPlotTypeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_MODE)); szDataTypes.Add(Char(GetGRDPlotModeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_DAYS)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_HOURS)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_MINUTES)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_INTERVAL)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_UPDATE)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_WIDTH)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_HEIGHT)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_XGRIDS)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_YGRIDS)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_XTICKS)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_YTICKS)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_GRIDSCOLOR)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_TICKSCOLOR)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_BKGNDCOLOR)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_LABELCOLOR)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPF_STATUS)); szDataTypes.Add(Char(GetGRDStatusLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_GPFP)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPFP_NUMBER)); szDataTypes.Add(Char(GetGRDNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPFP_PNAME)); szDataTypes.Add(Char(GetGRDParameterTagLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPFP_COMMENT)); szDataTypes.Add(Varchar(GetGRDParameterCommentLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPFP_POSITION)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPFP_COMM)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPFP_VALMODE)); szDataTypes.Add(Char(GetGRDParameterModeLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPFP_VALCHARS)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPFP_VALMINIMUM)); szDataTypes.Add(Float()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPFP_VALMAXIMUM)); szDataTypes.Add(Float()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPFP_COLOR)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPFP_LINESTYLE)); szDataTypes.Add(Char(GetGRDParameterLineStyleLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_GPFP_LINESYMBOL)); szDataTypes.Add(Char(GetGRDParameterLineSymbolLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			return TRUE;
		}
	}
	if (UsesDBMSTables(DATABASE_COMPONENT_POD))
	{
		if (!_tcscmp(pszTable, STRING(IDS_DATABASE_TABLE_PPF)))
		{
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PPF_NUMBER)); szDataTypes.Add(Char(GetPODNameLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PPF_DESCR)); szDataTypes.Add(Varchar(GetPODTitleLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)); szDataTypes.Add(Varchar(GetPODExpressionStackLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)); szDataTypes.Add(Varchar(GetPODParametersListLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)); szDataTypes.Add(Varchar(GetPODFunctionsListLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR)); szDataTypes.Add(Integer()); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(FALSE);
			szColumns.Add(STRING(IDS_DATABASE_TABLE_PPF_STATUS)); szDataTypes.Add(Char(GetPODStatusLength())); szDefaults.Add(EMPTYSTRING); bAllowNulls.Add(TRUE);
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CALTELDatabaseEngine::UsesDBMSTables(ULONGLONG nComponent) CONST
{
	switch (DATABASECOMPONENTFROMCODE(nComponent))
	{
	case DATABASE_COMPONENT_TMPACKET:
	case DATABASE_COMPONENT_TCFUNCTION:
	case DATABASE_COMPONENT_TCSEQUENCE:
	case DATABASE_COMPONENT_OBPROCESSOR:
	case DATABASE_COMPONENT_TMPARAMETER:
	case DATABASE_COMPONENT_TCPARAMETER:
	case DATABASE_COMPONENT_AND:
	case DATABASE_COMPONENT_GRD:
	case DATABASE_COMPONENT_POD:
	{ return TRUE;
	break;
	}
	}
	return FALSE;
}

INT CALTELDatabaseEngine::ConstructTMPacketTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_PACKID)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TYPE)), STRING(IDS_DATABASE_TABLE_PMF_TYPE_CONSTANT));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_FUNC)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_HFLG)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_APID)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMTY)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMID)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_3VAL)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_SMPRT)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VALID)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_LENG)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VCID)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_EVENTID)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMPacketTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTMPacket *pDatabaseTMPacket, CStringArray &szContents) CONST
{
	CString  szParameter;
	CString  szPacketHeader;
	CStringTools  cStringTools;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMPacketHeader  *pDatabaseTMPacketHeader;

	for (szContents.RemoveAll(); (pDatabaseTMPacketHeader = pView->m_pDatabaseTMPacketHeaders[0].GetAt(pView->m_pDatabaseTMPacketHeaders[0].Find(pDatabaseTMPacket->GetDataFieldHeader()))); )
	{
		szPacketHeader = pDatabaseTMPacketHeader->GetName();
		break;
	}
	for (szParameter = pDatabaseTMPacket->GetEventIDParameter(); (pDatabaseTMParameter = GetTMParameters()->GetAt(GetTMParameters()->Find(pDatabaseTMPacket->GetEventIDParameter()))); )
	{
		szParameter.Format(STRING(IDS_DATABASE_TABLE_PMF_PARAMETERFORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_PACKID)), pDatabaseTMPacket->GetTag());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TYPE)), STRING(IDS_DATABASE_TABLE_PMF_TYPE_CONSTANT));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DESCR)), pDatabaseTMPacket->GetDescription());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_FUNC)), pDatabaseTMPacket->GetDetails());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME)), szPacketHeader);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_HFLG)), TranslateTMPacketDataFieldHeaderFlag(!pDatabaseTMPacket->GetDataFieldHeader().IsEmpty(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_APID)), TranslateTMPacketAPID(pDatabaseTMPacket->GetAPID(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMTY)), TranslateTMPacketTMType(pDatabaseTMPacket->GetTMType(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMID)), (pDatabaseTMPacket->GetTMID() >= 0) ? TranslateTMPacketTMID(pDatabaseTMPacket->GetTMID(), FALSE) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_3VAL)), (pDatabaseTMPacket->Get3Disc() >= 0) ? (TranslateTMPacket3Disc(pDatabaseTMPacket->Get3Disc(), FALSE)) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_SMPRT)), (pDatabaseTMPacket->GetTransmissionRate() > 0) ? cStringTools.ConvertIntToString(pDatabaseTMPacket->GetTransmissionRate()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VALID)), (pDatabaseTMPacket->GetTransmissionRetries() > 0) ? cStringTools.ConvertIntToString(pDatabaseTMPacket->GetTransmissionRetries()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_LENG)), (pDatabaseTMPacket->GetDataSize() > 0) ? cStringTools.ConvertIntToString(pDatabaseTMPacket->GetDataSize() + 1) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VCID)), (pDatabaseTMPacket->GetVirtualChannel() >= 0) ? cStringTools.ConvertIntToString(pDatabaseTMPacket->GetVirtualChannel()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)), (pDatabaseTMPacket->GetDataSize() != 0) ? ((pDatabaseTMPacket->GetDataSize() > 0) ? TranslateTMPacketDataSize(TMPACKET_LENGTH_FIXED, FALSE) : TranslateTMPacketDataSize(TMPACKET_LENGTH_VARIABLE, FALSE)) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_EVENTID)), szParameter);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_STATUS)), TranslateTMPacketStatus(pDatabaseTMPacket->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMPacketTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszTag, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTMPacket  *pDatabaseTMPacket;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMPacketTableContents(pView, szContents); (pDatabaseTMPacket = pView->m_pDatabaseTMPackets[0].GetAt(pView->m_pDatabaseTMPackets[0].Find(pszTag))); )
	{
		ConstructTMPacketTableContents(pView, pDatabaseTMPacket, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_PACKID)), CString(STRING(IDS_DATABASE_TABLE_PMF_PACKID)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_PACKID_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_PACKID))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TYPE)), CString(STRING(IDS_DATABASE_TABLE_PMF_TYPE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_TYPE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TYPE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DESCR)), CString(STRING(IDS_DATABASE_TABLE_PMF_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_FUNC)), CString(STRING(IDS_DATABASE_TABLE_PMF_FUNC)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_FUNC_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_FUNC))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME)), CString(STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_HFLG)), CString(STRING(IDS_DATABASE_TABLE_PMF_HFLG)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_HFLG_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_HFLG))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_APID)), CString(STRING(IDS_DATABASE_TABLE_PMF_APID)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_APID_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_APID))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMTY)), CString(STRING(IDS_DATABASE_TABLE_PMF_TMTY)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_TMTY_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMTY))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMID)), CString(STRING(IDS_DATABASE_TABLE_PMF_TMID)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_TMID_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMID))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_3VAL)), CString(STRING(IDS_DATABASE_TABLE_PMF_3VAL)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_3VAL_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_3VAL))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_SMPRT)), CString(STRING(IDS_DATABASE_TABLE_PMF_SMPRT)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_SMPRT_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_SMPRT))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VALID)), CString(STRING(IDS_DATABASE_TABLE_PMF_VALID)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_VALID_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VALID))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_LENG)), CString(STRING(IDS_DATABASE_TABLE_PMF_LENG)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_LENG_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_LENG))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)), CString(STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_VARIABLE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VARIABLE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VCID)), CString(STRING(IDS_DATABASE_TABLE_PMF_VCID)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_VCID_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VCID))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_EVENTID)), CString(STRING(IDS_DATABASE_TABLE_PMF_EVENTID)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_EVENTID_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_EVENTID))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_STATUS)), CString(STRING(IDS_DATABASE_TABLE_PMF_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PMF_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_PACKID)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TYPE)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_FUNC)), TAS_TYPE_MULTILINEEDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_HFLG)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_APID)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMTY)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMID)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_3VAL)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_SMPRT)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VALID)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_LENG)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VCID)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_EVENTID)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_PACKID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_PACKID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_FUNC)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_FUNC)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_HFLG)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_HFLG)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_APID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_APID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMTY)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMTY)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_3VAL)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_3VAL)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_SMPRT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_SMPRT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VALID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VALID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_LENG)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_LENG)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VCID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VCID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_EVENTID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_EVENTID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_PACKID)), STRING(IDS_DATABASE_TABLE_PMF_PACKID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TYPE)), STRING(IDS_DATABASE_TABLE_PMF_TYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DESCR)), STRING(IDS_DATABASE_TABLE_PMF_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_FUNC)), STRING(IDS_DATABASE_TABLE_PMF_FUNC_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME)), STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_HFLG)), STRING(IDS_DATABASE_TABLE_PMF_HFLG_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_APID)), STRING(IDS_DATABASE_TABLE_PMF_APID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMTY)), STRING(IDS_DATABASE_TABLE_PMF_TMTY_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMID)), STRING(IDS_DATABASE_TABLE_PMF_TMID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_3VAL)), STRING(IDS_DATABASE_TABLE_PMF_3VAL_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_SMPRT)), STRING(IDS_DATABASE_TABLE_PMF_SMPRT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VALID)), STRING(IDS_DATABASE_TABLE_PMF_VALID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_LENG)), STRING(IDS_DATABASE_TABLE_PMF_LENG_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)), STRING(IDS_DATABASE_TABLE_PMF_VARIABLE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VCID)), STRING(IDS_DATABASE_TABLE_PMF_VCID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_EVENTID)), STRING(IDS_DATABASE_TABLE_PMF_EVENTID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_STATUS)), STRING(IDS_DATABASE_TABLE_PMF_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_PACKID)), Varchar(GetTMPacketTagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TYPE)), Char(GetTMPacketTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DESCR)), Varchar(GetTMPacketDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_FUNC)), Varchar(GetTMPacketDetailsLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_DFH_NAME)), Varchar(GetTMPacketDataFieldHeaderNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_HFLG)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_APID)), Char(GetTMPacketAPIDLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMTY)), Char(GetTMPacketTMTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_TMID)), Char(GetTMPacketTMIDLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_3VAL)), Varchar(GetTMPacket3DiscLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_SMPRT)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VALID)), Char(GetTMPacketTransmissionRetriesLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_LENG)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VARIABLE)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_VCID)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_EVENTID)), Char(GetTMPacketEventIDLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PMF), STRING(IDS_DATABASE_TABLE_PMF_STATUS)), Char(GetTMPacketStatusLength()));
	szDescriptions.InsertAt(0, STRING(IDS_DATABASE_TABLE_PMF_COMMENTS));
	szDataTypes.InsertAt(0, NotApplicable());
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMPacketParametersTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMPacketParametersTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTMPacket *pDatabaseTMPacket, INT nCount, CStringArray &szContents) CONST
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CStringTools  cStringTools;
	CDatabaseTMPacketParameter  *pDatabaseTMPacketParameter;

	for (nParameter = 0, nParameters = (nCount >= 0) ? (INT)min(pDatabaseTMPacket->GetSize(), nCount) : (INT)pDatabaseTMPacket->GetSize(), szContents.RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMPacketParameter = pDatabaseTMPacket->GetAt(nParameter)))
		{
			szParameter = pDatabaseTMPacketParameter->GetTag();
			szParameter += (pDatabaseTMPacketParameter->GetBytePos() >= 0) ? (TAB + cStringTools.ConvertIntToString(pDatabaseTMPacketParameter->GetBytePos())) : CString(TAB);
			szParameter += (pDatabaseTMPacketParameter->GetBitPos() >= 0) ? (TAB + cStringTools.ConvertIntToString(pDatabaseTMPacketParameter->GetBitPos())) : CString(TAB);
			szParameter += (pDatabaseTMPacketParameter->GetOccurrenceCount() > 0) ? (TAB + cStringTools.ConvertIntToString(pDatabaseTMPacketParameter->GetOccurrenceCount())) : CString(TAB);
			szParameter += (pDatabaseTMPacketParameter->GetOccurrenceCount() > 1) ? (TAB + cStringTools.ConvertIntToString(pDatabaseTMPacketParameter->GetOccurrenceInterval())) : CString(TAB);
			szParameter += TAB + pDatabaseTMPacketParameter->GetValidityParameter();
			szContents.Add(szParameter);
		}
	}
	return((!szContents.GetSize()) ? ConstructTMPacketParametersTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMPacketParametersTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszTag, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTMPacket  *pDatabaseTMPacket;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMPacketParametersTableContents(pView, szContents); (pDatabaseTMPacket = pView->m_pDatabaseTMPackets[0].GetAt(pView->m_pDatabaseTMPackets[0].Find(pszTag))); )
	{
		ConstructTMPacketParametersTableContents(pView, pDatabaseTMPacket, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_NAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_OFFBY)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_OFFBI)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_NBOCC)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_LGOCC)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_VALID)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_OFFBY)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_OFFBY)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_OFFBI)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_OFFBI)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_NBOCC)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_NBOCC)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_LGOCC)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_LGOCC)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_VALID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_VALID)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_NAME)), STRING(IDS_DATABASE_TABLE_PLF_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_OFFBY)), STRING(IDS_DATABASE_TABLE_PLF_OFFBY_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_OFFBI)), STRING(IDS_DATABASE_TABLE_PLF_OFFBI_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_NBOCC)), STRING(IDS_DATABASE_TABLE_PLF_NBOCC_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_LGOCC)), STRING(IDS_DATABASE_TABLE_PLF_LGOCC_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_VALID)), STRING(IDS_DATABASE_TABLE_PLF_VALID_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_NAME)), Varchar(GetTMParameterTagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_OFFBY)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_OFFBI)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_NBOCC)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_LGOCC)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PLF), STRING(IDS_DATABASE_TABLE_PLF_VALID)), Varchar(GetTMParameterTagLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMPacketHeadersTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMPacketHeadersTableContents(CONST CDatabaseTableView *pView, INT nCount, CStringArray &szContents) CONST
{
	INT  nBit;
	INT  nByte;
	INT  nLength;
	INT  nPacketHeader;
	INT  nPacketHeaders;
	BOOL  bPacketHeader;
	CString  szPacketHeader;
	CStringTools  cStringTools;
	CDatabaseTMPacketHeader  *pDatabaseTMPacketHeader;

	for (nPacketHeader = 0, nPacketHeaders = (nCount >= 0) ? (INT)min(pView->m_pDatabaseTMPacketHeaders[0].GetSize(), nCount) : (INT)pView->m_pDatabaseTMPacketHeaders[0].GetSize(), szContents.RemoveAll(); nPacketHeader < nPacketHeaders; nPacketHeader++)
	{
		if ((pDatabaseTMPacketHeader = pView->m_pDatabaseTMPacketHeaders[0].GetAt(nPacketHeader)))
		{
			szPacketHeader = pDatabaseTMPacketHeader->GetName();
			szPacketHeader += TAB + TranslateTMPacketHeaderTMTypeFlag((bPacketHeader = pDatabaseTMPacketHeader->GetTMTypePosition(nByte, nBit, nLength)), FALSE);
			szPacketHeader += (bPacketHeader) ? (TAB + cStringTools.ConvertIntToString(8 * nByte + nBit)) : TAB;
			szPacketHeader += (bPacketHeader) ? (TAB + cStringTools.ConvertIntToString(nLength)) : TAB;
			szPacketHeader += TAB + TranslateTMPacketHeaderTMIDFlag((bPacketHeader = pDatabaseTMPacketHeader->GetTMIDPosition(nByte, nBit, nLength)), FALSE);
			szPacketHeader += (bPacketHeader) ? (TAB + cStringTools.ConvertIntToString(8 * nByte + nBit)) : TAB;
			szPacketHeader += (bPacketHeader) ? (TAB + cStringTools.ConvertIntToString(nLength)) : TAB;
			szPacketHeader += TAB + TranslateTMPacketHeader3DiscFlag((bPacketHeader = pDatabaseTMPacketHeader->Get3DiscPosition(nByte, nBit, nLength)), FALSE);
			szPacketHeader += (bPacketHeader) ? (TAB + cStringTools.ConvertIntToString(8 * nByte + nBit)) : TAB;
			szPacketHeader += (bPacketHeader) ? (TAB + cStringTools.ConvertIntToString(nLength)) : TAB;
			szPacketHeader += TAB + TranslateTMPacketHeaderTimestampFlag((bPacketHeader = pDatabaseTMPacketHeader->GetTimestampPosition(nByte, nBit, nLength)), FALSE);
			szPacketHeader += (bPacketHeader) ? (TAB + cStringTools.ConvertIntToString(8 * nByte + nBit)) : TAB;
			szPacketHeader += (bPacketHeader) ? (TAB + cStringTools.ConvertIntToString(nLength)) : TAB;
			szContents.Add(szPacketHeader);
		}
	}
	return((!szContents.GetSize()) ? ConstructTMPacketHeadersTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMPacketHeadersTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMPacketHeadersTableContents(pView, szContents); nCount != 0; )
	{
		ConstructTMPacketHeadersTableContents(pView, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_NAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_PRESENT)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_OFFSET)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_LENGTH)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_PRESENT)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_OFFSET)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_LENGTH)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_3DISC_PRESENT)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_OFFSET)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_LENGTH)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TIME_PRESENT)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_OFFSET)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_LENGTH)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_PRESENT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_PRESENT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_OFFSET)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_OFFSET)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_LENGTH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_LENGTH)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_PRESENT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_PRESENT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_OFFSET)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_OFFSET)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_LENGTH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_LENGTH)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_3DISC_PRESENT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_3DISC_PRESENT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_OFFSET)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_OFFSET)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_LENGTH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_LENGTH)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TIME_PRESENT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TIME_PRESENT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_OFFSET)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_OFFSET)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_LENGTH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_LENGTH)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_NAME)), STRING(IDS_DATABASE_TABLE_DFH_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_PRESENT)), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_PRESENT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_OFFSET)), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_OFFSET_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_LENGTH)), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_LENGTH_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_PRESENT)), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_PRESENT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_OFFSET)), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_OFFSET_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_LENGTH)), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_LENGTH_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_3DISC_PRESENT)), STRING(IDS_DATABASE_TABLE_DFH_3DISC_PRESENT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_OFFSET)), STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_OFFSET_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_LENGTH)), STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_LENGTH_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TIME_PRESENT)), STRING(IDS_DATABASE_TABLE_DFH_TIME_PRESENT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_OFFSET)), STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_OFFSET_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_LENGTH)), STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_LENGTH_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_NAME)), Varchar(GetTMPacketDataFieldHeaderNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_PRESENT)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_OFFSET)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_TYPE_BIT_LENGTH)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_PRESENT)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_OFFSET)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TM_ID_BIT_LENGTH)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_3DISC_PRESENT)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_OFFSET)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_3DISC_BIT_LENGTH)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TIME_PRESENT)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_OFFSET)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DFH), STRING(IDS_DATABASE_TABLE_DFH_TIME_BIT_LENGTH)), Integer());
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMPacketStreamsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMPacketStreamsTableContents(CONST CDatabaseTableView *pView, INT nCount, CStringArray &szContents) CONST
{
	INT  nPacketStream;
	INT  nPacketStreams;
	CString  szPacketStream;
	CStringTools  cStringTools;
	CDatabaseTMPacketStream  *pDatabaseTMPacketStream;

	for (nPacketStream = 0, nPacketStreams = (nCount >= 0) ? (INT)min(pView->m_pDatabaseTMPacketStreams[0].GetSize(), nCount) : (INT)pView->m_pDatabaseTMPacketStreams[0].GetSize(), szContents.RemoveAll(); nPacketStream < nPacketStreams; nPacketStream++)
	{
		if ((pDatabaseTMPacketStream = pView->m_pDatabaseTMPacketStreams[0].GetAt(nPacketStream)))
		{
			szPacketStream = pDatabaseTMPacketStream->GetName();
			szPacketStream += (pDatabaseTMPacketStream->GetAPID() >= 0) ? (TAB + TranslateTMPacketStreamAPID(pDatabaseTMPacketStream->GetAPID(), FALSE)) : TAB;
			szPacketStream += (pDatabaseTMPacketStream->GetTMID() >= 0) ? (TAB + TranslateTMPacketStreamTMID(pDatabaseTMPacketStream->GetTMID(), FALSE)) : TAB;
			szPacketStream += (pDatabaseTMPacketStream->GetPeriod() >= 0) ? (TAB + cStringTools.ConvertIntToString(pDatabaseTMPacketStream->GetPeriod())) : TAB;
			szPacketStream += (pDatabaseTMPacketStream->GetTimeout() >= 0) ? (TAB + cStringTools.ConvertIntToString(pDatabaseTMPacketStream->GetTimeout())) : TAB;
			szPacketStream += TAB + pDatabaseTMPacketStream->GetValidityParameter();
			szContents.Add(szPacketStream);
		}
	}
	return((!szContents.GetSize()) ? ConstructTMPacketStreamsTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMPacketStreamsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszTag, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMPacketStreamsTableContents(pView, szContents); nCount != 0; )
	{
		ConstructTMPacketStreamsTableContents(pView, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_STID)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_APID)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_TMID)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_PERIOD)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_TIMEOUT)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_VALID)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_STID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_STID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_APID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_APID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_TMID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_TMID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_PERIOD)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_PERIOD)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_TIMEOUT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_TIMEOUT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_VALID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_VALID)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_STID)), STRING(IDS_DATABASE_TABLE_STR_STID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_APID)), STRING(IDS_DATABASE_TABLE_STR_APID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_TMID)), STRING(IDS_DATABASE_TABLE_STR_TMID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_PERIOD)), STRING(IDS_DATABASE_TABLE_STR_PERIOD_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_TIMEOUT)), STRING(IDS_DATABASE_TABLE_STR_TIMEOUT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_VALID)), STRING(IDS_DATABASE_TABLE_STR_VALID_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_STID)), Varchar(GetTMPacketStreamNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_APID)), Varchar(GetTMPacketStreamAPIDLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_TMID)), Varchar(GetTMPacketStreamTMIDLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_PERIOD)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_TIMEOUT)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_STR), STRING(IDS_DATABASE_TABLE_STR_VALID)), Varchar(GetTMPacketStreamValidityParameterLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCFunctionTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CTYPE)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCPID)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ADD)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_LDESC)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESS)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DEUN)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTS)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTU)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_OPINFO)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_VALID)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_FUNC)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ALTC)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CMPTC)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_SSCH)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCTYPE)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_HAZ)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_COSEV)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_PVPID)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CVPID)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCFunctionTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCFunction *pDatabaseTCFunction, CStringArray &szContents) CONST
{
	CStringTools  cStringTools;

	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)), pDatabaseTCFunction->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESCR)), pDatabaseTCFunction->GetDescription());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CTYPE)), TranslateTCFunctionType(pDatabaseTCFunction->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCPID)), pDatabaseTCFunction->GetTCPacket());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ADD)), (pDatabaseTCFunction->GetTCID() >= 0) ? cStringTools.ConvertIntToPaddedString(pDatabaseTCFunction->GetTCID(), 2, 16) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_LDESC)), pDatabaseTCFunction->GetDetails());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESS)), pDatabaseTCFunction->GetDestinationSubSystem());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DEUN)), pDatabaseTCFunction->GetDestinationEquipment());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTS)), pDatabaseTCFunction->GetRouterSubSystem());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTU)), pDatabaseTCFunction->GetRouterEquipment());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_OPINFO)), pDatabaseTCFunction->GetOperationalInfo());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_VALID)), pDatabaseTCFunction->GetValidityConditions());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_FUNC)), pDatabaseTCFunction->GetExtendedDescription());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ALTC)), pDatabaseTCFunction->GetAssociatedTelecommands());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CMPTC)), pDatabaseTCFunction->GetComplementaryTelecommands());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_SSCH)), pDatabaseTCFunction->GetDestinationSubSchedule());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCTYPE)), TranslateTCFunctionTCType(pDatabaseTCFunction->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_HAZ)), TranslateTCFunctionHazardousFlag(pDatabaseTCFunction->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_COSEV)), pDatabaseTCFunction->GetMissionPlannerEvent());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_PVPID)), pDatabaseTCFunction->GetPreExeGroup());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CVPID)), pDatabaseTCFunction->GetExeVerGroup());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_STATUS)), TranslateTCFunctionStatus(pDatabaseTCFunction->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCFunctionTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCFunction  *pDatabaseTCFunction;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCFunctionTableContents(pView, szContents); (pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pszName))); )
	{
		ConstructTCFunctionTableContents(pView, pDatabaseTCFunction, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)), CString(STRING(IDS_DATABASE_TABLE_CCF_CNAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_CNAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESCR)), CString(STRING(IDS_DATABASE_TABLE_CCF_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CTYPE)), CString(STRING(IDS_DATABASE_TABLE_CCF_CTYPE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_CTYPE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CTYPE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCPID)), CString(STRING(IDS_DATABASE_TABLE_CCF_TCPID)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_TCPID_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCPID))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ADD)), CString(STRING(IDS_DATABASE_TABLE_CCF_ADD)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_ADD_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ADD))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_LDESC)), CString(STRING(IDS_DATABASE_TABLE_CCF_LDESC)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_LDESC_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_LDESC))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESS)), CString(STRING(IDS_DATABASE_TABLE_CCF_DESS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_DESS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESS))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DEUN)), CString(STRING(IDS_DATABASE_TABLE_CCF_DEUN)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_DEUN_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DEUN))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTS)), CString(STRING(IDS_DATABASE_TABLE_CCF_ROUTS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_ROUTS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTS))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTU)), CString(STRING(IDS_DATABASE_TABLE_CCF_ROUTU)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_ROUTU_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTU))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_OPINFO)), CString(STRING(IDS_DATABASE_TABLE_CCF_OPINFO)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_OPINFO_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_OPINFO))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_VALID)), CString(STRING(IDS_DATABASE_TABLE_CCF_VALID)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_VALID_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_VALID))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_FUNC)), CString(STRING(IDS_DATABASE_TABLE_CCF_FUNC)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_FUNC_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_FUNC))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ALTC)), CString(STRING(IDS_DATABASE_TABLE_CCF_ALTC)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_ALTC_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ALTC))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CMPTC)), CString(STRING(IDS_DATABASE_TABLE_CCF_CMPTC)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_CMPTC_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CMPTC))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_SSCH)), CString(STRING(IDS_DATABASE_TABLE_CCF_SSCH)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_SSCH_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_SSCH))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCTYPE)), CString(STRING(IDS_DATABASE_TABLE_CCF_TCTYPE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_TCTYPE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCTYPE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_HAZ)), CString(STRING(IDS_DATABASE_TABLE_CCF_HAZ)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_HAZ_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_HAZ))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_COSEV)), CString(STRING(IDS_DATABASE_TABLE_CCF_COSEV)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_COSEV_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_COSEV))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_PVPID)), CString(STRING(IDS_DATABASE_TABLE_CCF_PVPID)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_PVPID_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_PVPID))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CVPID)), CString(STRING(IDS_DATABASE_TABLE_CCF_CVPID)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_CVPID_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CVPID))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_STATUS)), CString(STRING(IDS_DATABASE_TABLE_CCF_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CCF_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CTYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCPID)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ADD)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_LDESC)), TAS_TYPE_MULTILINEEDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESS)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DEUN)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTS)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTU)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_OPINFO)), TAS_TYPE_MULTILINEEDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_VALID)), TAS_TYPE_MULTILINEEDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_FUNC)), TAS_TYPE_MULTILINEEDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ALTC)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CMPTC)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_SSCH)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCTYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_HAZ)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_COSEV)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_PVPID)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CVPID)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CTYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CTYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCPID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCPID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ADD)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ADD)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_LDESC)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_LDESC)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DEUN)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DEUN)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTU)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTU)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_OPINFO)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_OPINFO)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_VALID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_VALID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_FUNC)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_FUNC)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ALTC)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ALTC)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CMPTC)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CMPTC)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_SSCH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_SSCH)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCTYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCTYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_HAZ)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_HAZ)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_COSEV)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_COSEV)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_PVPID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_PVPID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CVPID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CVPID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)), STRING(IDS_DATABASE_TABLE_CCF_CNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESCR)), STRING(IDS_DATABASE_TABLE_CCF_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CTYPE)), STRING(IDS_DATABASE_TABLE_CCF_CTYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCPID)), STRING(IDS_DATABASE_TABLE_CCF_TCPID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ADD)), STRING(IDS_DATABASE_TABLE_CCF_ADD_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_LDESC)), STRING(IDS_DATABASE_TABLE_CCF_LDESC_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESS)), STRING(IDS_DATABASE_TABLE_CCF_DESS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DEUN)), STRING(IDS_DATABASE_TABLE_CCF_DEUN_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTS)), STRING(IDS_DATABASE_TABLE_CCF_ROUTS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTU)), STRING(IDS_DATABASE_TABLE_CCF_ROUTU_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_OPINFO)), STRING(IDS_DATABASE_TABLE_CCF_OPINFO_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_VALID)), STRING(IDS_DATABASE_TABLE_CCF_VALID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_FUNC)), STRING(IDS_DATABASE_TABLE_CCF_FUNC_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ALTC)), STRING(IDS_DATABASE_TABLE_CCF_ALTC_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CMPTC)), STRING(IDS_DATABASE_TABLE_CCF_CMPTC_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_SSCH)), STRING(IDS_DATABASE_TABLE_CCF_SSCH_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCTYPE)), STRING(IDS_DATABASE_TABLE_CCF_TCTYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_HAZ)), STRING(IDS_DATABASE_TABLE_CCF_HAZ_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_COSEV)), STRING(IDS_DATABASE_TABLE_CCF_COSEV_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_PVPID)), STRING(IDS_DATABASE_TABLE_CCF_PVPID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CVPID)), STRING(IDS_DATABASE_TABLE_CCF_CVPID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_STATUS)), STRING(IDS_DATABASE_TABLE_CCF_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CNAME)), Varchar(GetTCFunctionNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESCR)), Varchar(GetTCFunctionDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CTYPE)), Varchar(GetTCFunctionTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCPID)), Char(GetTCFunctionPacketTagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ADD)), Char(GetTCFunctionTCIDLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_LDESC)), Varchar(GetTCFunctionDetailsLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DESS)), Varchar(GetTCFunctionDestinationSubSystemLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_DEUN)), Varchar(GetTCFunctionDestinationEquipmentLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTS)), Varchar(GetTCFunctionRouterSubSystemLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ROUTU)), Varchar(GetTCFunctionRouterEquipmentLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_OPINFO)), Varchar(GetTCFunctionOperationalInfoLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_VALID)), Varchar(GetTCFunctionValidityConditionsLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_FUNC)), Varchar(2 * GetTCFunctionExtendedDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_ALTC)), Varchar(GetTCFunctionAssociatedTelecommandsLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CMPTC)), Varchar(GetTCFunctionComplementaryTelecommandsLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_SSCH)), Varchar(GetTCFunctionDestinationSubScheduleLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_TCTYPE)), Char(GetTCFunctionTCTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_HAZ)), Char(GetTCFunctionHazardousFlagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_COSEV)), Varchar(GetTCFunctionMissionPlannerEventLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_PVPID)), Varchar(GetTCFunctionPreExeGroupLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_CVPID)), Varchar(GetTCFunctionExeVerGroupLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CCF), STRING(IDS_DATABASE_TABLE_CCF_STATUS)), Char(GetTCFunctionStatusLength()));
	szDescriptions.InsertAt(0, STRING(IDS_DATABASE_TABLE_CCF_COMMENTS));
	szDataTypes.InsertAt(0, NotApplicable());
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCFunctionElementsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCFunctionElementsTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCFunction *pDatabaseTCFunction, INT nCount, CStringArray &szContents) CONST
{
	INT  nElement;
	INT  nElements;
	CString  szElement;
	CStringTools  cStringTools;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;

	for (nElement = 0, nElements = (nCount >= 0) ? (INT)min(pDatabaseTCFunction->GetSize(), nCount) : (INT)pDatabaseTCFunction->GetSize(), szContents.RemoveAll(); nElement < nElements; nElement++)
	{
		if ((pDatabaseTCFunctionElement = pDatabaseTCFunction->GetAt(nElement)))
		{
			szElement = pDatabaseTCFunctionElement->GetName();
			szElement += TAB + pDatabaseTCFunctionElement->GetDescription();
			szElement += (pDatabaseTCFunctionElement->GetAttributes() & (TCFUNCTIONELEMENT_TYPE_PARAMETER | TCFUNCTIONELEMENT_TYPE_CONSTANT)) ? (TAB + TranslateTCFunctionElementType(pDatabaseTCFunctionElement->GetAttributes(), FALSE)) : CString(TAB);
			szElement += (pDatabaseTCFunctionElement->GetWidth() > 0) ? (TAB + cStringTools.ConvertIntToString(pDatabaseTCFunctionElement->GetWidth())) : CString(TAB);
			szElement += (pDatabaseTCFunctionElement->GetBytePos() >= 0 && pDatabaseTCFunctionElement->GetBitPos() >= 0) ? (TAB + cStringTools.ConvertIntToString(8 * pDatabaseTCFunctionElement->GetBytePos() + pDatabaseTCFunctionElement->GetBitPos())) : CString(TAB);
			szElement += (pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED)) ? (TAB + TranslateTCFunctionElementValueInterpretation(pDatabaseTCFunctionElement->GetAttributes(), FALSE)) : CString(TAB);
			szElement += (pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) ? (TAB + TranslateTCFunctionElementValueRadix(pDatabaseTCFunctionElement->GetAttributes(), FALSE)) : CString(TAB);
			szElement += TAB + pDatabaseTCFunctionElement->GetConstValueAsText();
			szContents.Add(szElement);
		}
	}
	return((!szContents.GetSize()) ? ConstructTCFunctionElementsTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCFunctionElementsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCFunction  *pDatabaseTCFunction;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCFunctionElementsTableContents(pView, szContents); (pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pszName))); )
	{
		ConstructTCFunctionElementsTableContents(pView, pDatabaseTCFunction, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_PNAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_ELTYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_ELLEN)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_BITOFF)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_VTYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_RADIX)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_VALUE)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_PNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_PNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_ELTYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_ELTYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_ELLEN)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_ELLEN)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_BITOFF)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_BITOFF)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_VTYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_VTYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_RADIX)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_RADIX)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_VALUE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_VALUE)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_PNAME)), STRING(IDS_DATABASE_TABLE_CDF_PNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_DESCR)), STRING(IDS_DATABASE_TABLE_CDF_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_ELTYPE)), STRING(IDS_DATABASE_TABLE_CDF_ELTYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_ELLEN)), STRING(IDS_DATABASE_TABLE_CDF_ELLEN_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_BITOFF)), STRING(IDS_DATABASE_TABLE_CDF_BITOFF_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_VTYPE)), STRING(IDS_DATABASE_TABLE_CDF_VTYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_RADIX)), STRING(IDS_DATABASE_TABLE_CDF_RADIX_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_VALUE)), STRING(IDS_DATABASE_TABLE_CDF_VALUE_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_PNAME)), Varchar(GetTCFunctionElementNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_DESCR)), Varchar(GetTCFunctionElementDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_ELTYPE)), Char(GetTCFunctionElementTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_ELLEN)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_BITOFF)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_VTYPE)), Char(GetTCFunctionElementValueInterpretationLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_RADIX)), Char(GetTCFunctionElementValueRadixLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CDF), STRING(IDS_DATABASE_TABLE_CDF_VALUE)), Varchar(GetTCFunctionElementConstValueLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCPacketTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_PACKID)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_TYPE)), STRING(IDS_DATABASE_TABLE_TCP_TYPE_CONSTANT));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_FUNC)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_HFLG)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_APID)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_LENG)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCPacketTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCPacket *pDatabaseTCPacket, CStringArray &szContents) CONST
{
	CStringTools  cStringTools;

	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_PACKID)), pDatabaseTCPacket->GetTag());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_TYPE)), STRING(IDS_DATABASE_TABLE_TCP_TYPE_CONSTANT));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_DESCR)), pDatabaseTCPacket->GetDescription());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_FUNC)), pDatabaseTCPacket->GetDetails());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_HFLG)), TranslateTCPacketDataFieldHeaderFlag(pDatabaseTCPacket->GetDataFieldHeaderFlag(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_APID)), TranslateTCPacketAPID(pDatabaseTCPacket->GetAPID(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_LENG)), (pDatabaseTCPacket->GetDataSize() > 0) ? (LPCTSTR)cStringTools.ConvertIntToString(pDatabaseTCPacket->GetDataSize() + 1) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)), (pDatabaseTCPacket->GetDataSize() != 0) ? ((pDatabaseTCPacket->GetDataSize() > 0) ? TranslateTCPacketDataSize(TCPACKET_LENGTH_FIXED, FALSE) : TranslateTCPacketDataSize(TCPACKET_LENGTH_VARIABLE, FALSE)) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_STATUS)), TranslateTCPacketStatus(pDatabaseTCPacket->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCPacketTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszTag, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCPacket  *pDatabaseTCPacket;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCPacketTableContents(pView, szContents); (pDatabaseTCPacket = pView->m_pDatabaseTCPackets[0].GetAt(pView->m_pDatabaseTCPackets[0].Find(pszTag))); )
	{
		ConstructTCPacketTableContents(pView, pDatabaseTCPacket, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_PACKID)), CString(STRING(IDS_DATABASE_TABLE_TCP_PACKID)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TCP_PACKID_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_PACKID))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_TYPE)), CString(STRING(IDS_DATABASE_TABLE_TCP_TYPE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TCP_TYPE_DESCRIPTION)) + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_TYPE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_DESCR)), CString(STRING(IDS_DATABASE_TABLE_TCP_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TCP_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_FUNC)), CString(STRING(IDS_DATABASE_TABLE_TCP_FUNC)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TCP_FUNC_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_FUNC))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_HFLG)), CString(STRING(IDS_DATABASE_TABLE_TCP_HFLG)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TCP_HFLG_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_HFLG))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_APID)), CString(STRING(IDS_DATABASE_TABLE_TCP_APID)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TCP_APID_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_APID))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_LENG)), CString(STRING(IDS_DATABASE_TABLE_TCP_LENG)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TCP_LENG_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_LENG))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)), CString(STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TCP_VARIABLE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_VARIABLE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_STATUS)), CString(STRING(IDS_DATABASE_TABLE_TCP_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TCP_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_PACKID)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_TYPE)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_FUNC)), TAS_TYPE_MULTILINEEDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_HFLG)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_APID)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_LENG)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_PACKID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_PACKID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_TYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_TYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_FUNC)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_FUNC)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_HFLG)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_HFLG)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_APID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_APID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_LENG)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_LENG)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_PACKID)), STRING(IDS_DATABASE_TABLE_TCP_PACKID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_TYPE)), STRING(IDS_DATABASE_TABLE_TCP_TYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_DESCR)), STRING(IDS_DATABASE_TABLE_TCP_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_FUNC)), STRING(IDS_DATABASE_TABLE_TCP_FUNC_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_HFLG)), STRING(IDS_DATABASE_TABLE_TCP_HFLG_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_APID)), STRING(IDS_DATABASE_TABLE_TCP_APID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_LENG)), STRING(IDS_DATABASE_TABLE_TCP_LENG_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)), STRING(IDS_DATABASE_TABLE_TCP_VARIABLE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_STATUS)), STRING(IDS_DATABASE_TABLE_TCP_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_PACKID)), Varchar(GetTCPacketTagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_TYPE)), Char(GetTCPacketTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_DESCR)), Varchar(GetTCPacketDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_FUNC)), Varchar(2 * GetTCPacketDetailsLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_HFLG)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_APID)), Varchar(GetTCPacketAPIDLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_LENG)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_VARIABLE)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TCP), STRING(IDS_DATABASE_TABLE_TCP_STATUS)), Char(GetTCPacketStatusLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCPacketParametersTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCPacketParametersTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCPacket *pDatabaseTCPacket, INT nCount, CStringArray &szContents) CONST
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CStringTools  cStringTools;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;

	for (nParameter = 0, nParameters = (nCount >= 0) ? (INT)min(pDatabaseTCPacket->GetSize(), nCount) : (INT)pDatabaseTCPacket->GetSize(), szContents.RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCPacketParameter = pDatabaseTCPacket->GetAt(nParameter)))
		{
			szParameter = pDatabaseTCPacketParameter->GetTag();
			szParameter += TAB + pDatabaseTCPacketParameter->GetDescription();
			szParameter += (pDatabaseTCPacketParameter->GetAttributes() & (TCPACKETPARAMETER_TYPE_VARIABLE | TCPACKETPARAMETER_TYPE_FIXED)) ? (TAB + TranslateTCPacketParameterType(pDatabaseTCPacketParameter->GetAttributes(), FALSE)) : EMPTYSTRING;
			szParameter += (pDatabaseTCPacketParameter->GetWidth() > 0) ? (TAB + cStringTools.ConvertIntToString(pDatabaseTCPacketParameter->GetWidth())) : CString(TAB);
			szParameter += (pDatabaseTCPacketParameter->GetBytePos() >= 0 && pDatabaseTCPacketParameter->GetBitPos() >= 0) ? (TAB + cStringTools.ConvertIntToString(8 * pDatabaseTCPacketParameter->GetBytePos() + pDatabaseTCPacketParameter->GetBitPos())) : CString(TAB);
			szParameter += (pDatabaseTCPacketParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED)) ? (TAB + TranslateTCPacketParameterValueInterpretation(pDatabaseTCPacketParameter->GetAttributes(), FALSE)) : CString(TAB);
			szParameter += (pDatabaseTCPacketParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) ? (TAB + TranslateTCPacketParameterValueRadix(pDatabaseTCPacketParameter->GetAttributes(), FALSE)) : CString(TAB);
			szParameter += (pDatabaseTCPacketParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) ? (TAB + TranslateTCPacketParameterValueCoding(pDatabaseTCPacketParameter->GetAttributes(), FALSE)) : CString(TAB);
			szParameter += TAB + pDatabaseTCPacketParameter->GetConstValueAsText();
			szContents.Add(szParameter);
		}
	}
	return((!szContents.GetSize()) ? ConstructTCPacketParametersTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCPacketParametersTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszTag, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCPacket  *pDatabaseTCPacket;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCPacketParametersTableContents(pView, szContents); (pDatabaseTCPacket = pView->m_pDatabaseTCPackets[0].GetAt(pView->m_pDatabaseTCPackets[0].Find(pszTag))); )
	{
		ConstructTCPacketParametersTableContents(pView, pDatabaseTCPacket, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_PNAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_ELLEN)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_BITOFF)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_VTYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_RADIX)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_CODING)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_VALUE)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_PNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_PNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_ELLEN)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_ELLEN)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_BITOFF)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_BITOFF)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_VTYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_VTYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_RADIX)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_RADIX)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_CODING)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_CODING)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_VALUE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_VALUE)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_PNAME)), STRING(IDS_DATABASE_TABLE_PCDF_PNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_DESCR)), STRING(IDS_DATABASE_TABLE_PCDF_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE)), STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_ELLEN)), STRING(IDS_DATABASE_TABLE_PCDF_ELLEN_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_BITOFF)), STRING(IDS_DATABASE_TABLE_PCDF_BITOFF_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_VTYPE)), STRING(IDS_DATABASE_TABLE_PCDF_VTYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_RADIX)), STRING(IDS_DATABASE_TABLE_PCDF_RADIX_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_CODING)), STRING(IDS_DATABASE_TABLE_PCDF_CODING_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_VALUE)), STRING(IDS_DATABASE_TABLE_PCDF_VALUE_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_PNAME)), Varchar(GetTCPacketParameterTagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_DESCR)), Varchar(GetTCPacketParameterDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_ELTYPE)), Char(GetTCPacketParameterTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_ELLEN)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_BITOFF)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_VTYPE)), Char(GetTCPacketParameterValueInterpretationLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_RADIX)), Char(GetTCPacketParameterValueRadixLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_CODING)), Char(GetTCPacketParameterValueCodingLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCDF), STRING(IDS_DATABASE_TABLE_PCDF_VALUE)), Varchar(GetTCPacketParameterConstValueLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCPreExeGroupsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_ID)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCPreExeGroupsTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCPreExeGroup *pDatabaseTCPreExeGroup, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_ID)), pDatabaseTCPreExeGroup->GetID());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_DESCR)), pDatabaseTCPreExeGroup->GetDescription());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_STATUS)), TranslateTCPreExeGroupStatus(pDatabaseTCPreExeGroup->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCPreExeGroupsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszID, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCPreExeGroupsTableContents(pView, szContents); (pDatabaseTCPreExeGroup = pView->m_pDatabaseTCPreExeGroups[0].GetAt(pView->m_pDatabaseTCPreExeGroups[0].Find(pszID))); )
	{
		ConstructTCPreExeGroupsTableContents(pView, pDatabaseTCPreExeGroup, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_ID)), CString(STRING(IDS_DATABASE_TABLE_PVP_ID)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PVP_ID_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_ID))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_DESCR)), CString(STRING(IDS_DATABASE_TABLE_PVP_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PVP_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_STATUS)), CString(STRING(IDS_DATABASE_TABLE_PVP_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PVP_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_ID)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_DESCR)), TAS_TYPE_MULTILINEEDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_ID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_ID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_ID)), STRING(IDS_DATABASE_TABLE_PVP_ID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_DESCR)), STRING(IDS_DATABASE_TABLE_PVP_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_STATUS)), STRING(IDS_DATABASE_TABLE_PVP_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_ID)), Varchar(GetTCPreExeGroupIDLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_DESCR)), Varchar(GetTCPreExeGroupDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PVP), STRING(IDS_DATABASE_TABLE_PVP_STATUS)), Char(GetTCPreExeGroupStatusLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCPreExeGroupParametersTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCPreExeGroupParametersTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCPreExeGroup *pDatabaseTCPreExeGroup, INT nCount, CStringArray &szContents) CONST
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CDatabaseTCPreExeGroupParameter  *pDatabaseTCPreExeGroupParameter;

	for (nParameter = 0, nParameters = (nCount >= 0) ? (INT)min(pDatabaseTCPreExeGroup->GetSize(), nCount) : (INT)pDatabaseTCPreExeGroup->GetSize(), szContents.RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCPreExeGroupParameter = pDatabaseTCPreExeGroup->GetAt(nParameter)))
		{
			szParameter = pDatabaseTCPreExeGroupParameter->GetTag();
			szParameter += TAB + pDatabaseTCPreExeGroupParameter->GetValueAsText();
			szParameter += TAB + TranslateTCPreExeGroupParameterInterpretation(pDatabaseTCPreExeGroupParameter->GetAttributes(), FALSE);
			szContents.Add(szParameter);
		}
	}
	return((!szContents.GetSize()) ? ConstructTCPreExeGroupParametersTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCPreExeGroupParametersTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszID, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCPreExeGroupParametersTableContents(pView, szContents); (pDatabaseTCPreExeGroup = pView->m_pDatabaseTCPreExeGroups[0].GetAt(pView->m_pDatabaseTCPreExeGroups[0].Find(pszID))); )
	{
		ConstructTCPreExeGroupParametersTableContents(pView, pDatabaseTCPreExeGroup, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PEV), STRING(IDS_DATABASE_TABLE_PEV_PNAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PEV), STRING(IDS_DATABASE_TABLE_PEV_PVALUE)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PEV), STRING(IDS_DATABASE_TABLE_PEV_INTER)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PEV), STRING(IDS_DATABASE_TABLE_PEV_PNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PEV), STRING(IDS_DATABASE_TABLE_PEV_PNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PEV), STRING(IDS_DATABASE_TABLE_PEV_PVALUE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PEV), STRING(IDS_DATABASE_TABLE_PEV_PVALUE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PEV), STRING(IDS_DATABASE_TABLE_PEV_INTER)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PEV), STRING(IDS_DATABASE_TABLE_PEV_INTER)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PEV), STRING(IDS_DATABASE_TABLE_PEV_PNAME)), STRING(IDS_DATABASE_TABLE_PEV_PNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PEV), STRING(IDS_DATABASE_TABLE_PEV_PVALUE)), STRING(IDS_DATABASE_TABLE_PEV_PVALUE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PEV), STRING(IDS_DATABASE_TABLE_PEV_INTER)), STRING(IDS_DATABASE_TABLE_PEV_INTER_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PEV), STRING(IDS_DATABASE_TABLE_PEV_PNAME)), Varchar(GetTCPreExeGroupParameterTagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PEV), STRING(IDS_DATABASE_TABLE_PEV_PVALUE)), Varchar(GetTCPreExeGroupParameterConstValueLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PEV), STRING(IDS_DATABASE_TABLE_PEV_INTER)), Char(GetTCPreExeGroupParameterInterpretationLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCExeVerGroupsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_ID)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NMBST)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCExeVerGroupsTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCExeVerGroup *pDatabaseTCExeVerGroup, CStringArray &szContents) CONST
{
	CStringTools  cStringTools;

	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_ID)), pDatabaseTCExeVerGroup->GetID());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NAME)), pDatabaseTCExeVerGroup->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_DESCR)), pDatabaseTCExeVerGroup->GetDescription());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NMBST)), (pDatabaseTCExeVerGroup->GetStages() > 0) ? cStringTools.ConvertIntToString(pDatabaseTCExeVerGroup->GetStages()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_STATUS)), TranslateTCExeVerGroupStatus(pDatabaseTCExeVerGroup->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCExeVerGroupsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszID, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCExeVerGroupsTableContents(pView, szContents); (pDatabaseTCExeVerGroup = pView->m_pDatabaseTCExeVerGroups[0].GetAt(pView->m_pDatabaseTCExeVerGroups[0].Find(pszID))); )
	{
		ConstructTCExeVerGroupsTableContents(pView, pDatabaseTCExeVerGroup, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_ID)), CString(STRING(IDS_DATABASE_TABLE_CVP_ID)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CVP_ID_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_ID))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NAME)), CString(STRING(IDS_DATABASE_TABLE_CVP_NAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CVP_NAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_DESCR)), CString(STRING(IDS_DATABASE_TABLE_CVP_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CVP_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NMBST)), CString(STRING(IDS_DATABASE_TABLE_CVP_NMBST)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CVP_NMBST_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NMBST))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_STATUS)), CString(STRING(IDS_DATABASE_TABLE_CVP_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CVP_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_ID)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_DESCR)), TAS_TYPE_MULTILINEEDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NMBST)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_ID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_ID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NMBST)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NMBST)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_ID)), STRING(IDS_DATABASE_TABLE_CVP_ID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NAME)), STRING(IDS_DATABASE_TABLE_CVP_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_DESCR)), STRING(IDS_DATABASE_TABLE_CVP_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NMBST)), STRING(IDS_DATABASE_TABLE_CVP_NMBST_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_STATUS)), STRING(IDS_DATABASE_TABLE_CVP_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_ID)), Varchar(GetTCExeVerGroupIDLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NAME)), Varchar(GetTCExeVerGroupNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_DESCR)), Varchar(GetTCExeVerGroupDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_NMBST)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CVP), STRING(IDS_DATABASE_TABLE_CVP_STATUS)), Char(GetTCExeVerGroupStatusLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCExeVerGroupParametersTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCExeVerGroupParametersTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCExeVerGroup *pDatabaseTCExeVerGroup, INT nCount, CStringArray &szContents) CONST
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CStringTools  cStringTools;
	CDatabaseTCExeVerGroupParameter  *pDatabaseTCExeVerGroupParameter;

	for (nParameter = 0, nParameters = (nCount >= 0) ? (INT)min(pDatabaseTCExeVerGroup->GetSize(), nCount) : (INT)pDatabaseTCExeVerGroup->GetSize(), szContents.RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCExeVerGroupParameter = pDatabaseTCExeVerGroup->GetAt(nParameter)))
		{
			szParameter = pDatabaseTCExeVerGroupParameter->GetTag();
			szParameter += TAB + TranslateTCExeVerGroupParameterType(pDatabaseTCExeVerGroupParameter->GetAttributes(), FALSE);
			szParameter += TAB + pDatabaseTCExeVerGroupParameter->GetValueAsText();
			szParameter += TAB + TranslateTCExeVerGroupParameterInterpretation(pDatabaseTCExeVerGroupParameter->GetAttributes(), FALSE);
			szParameter += (pDatabaseTCExeVerGroupParameter->GetTimeWindowInterval() > 0) ? (TAB + cStringTools.ConvertLongIntToString(pDatabaseTCExeVerGroupParameter->GetTimeWindowInterval().GetTotalSeconds())) : CString(TAB);
			szParameter += (pDatabaseTCExeVerGroupParameter->GetStage() > 0) ? (TAB + TranslateTCExeVerGroupParameterStage(MAKETCEXEVERSTAGEID(pDatabaseTCExeVerGroupParameter->GetStage(), pDatabaseTCExeVerGroupParameter->GetStep()), FALSE)) : CString(TAB);
			szParameter += TAB + pDatabaseTCExeVerGroupParameter->GetEventIDPacket();
			szContents.Add(szParameter);
		}
	}
	return((!szContents.GetSize()) ? ConstructTCExeVerGroupParametersTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCExeVerGroupParametersTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszID, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCExeVerGroupParametersTableContents(pView, szContents); (pDatabaseTCExeVerGroup = pView->m_pDatabaseTCExeVerGroups[0].GetAt(pView->m_pDatabaseTCExeVerGroups[0].Find(pszID))); )
	{
		ConstructTCExeVerGroupParametersTableContents(pView, pDatabaseTCExeVerGroup, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_PNAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_EVTYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_PVALUE)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_INTER)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_SWND)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_STAGE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_EPCKID)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_PNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_PNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_EVTYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_EVTYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_PVALUE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_PVALUE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_INTER)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_INTER)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_SWND)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_SWND)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_STAGE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_STAGE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_EPCKID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_EPCKID)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_PNAME)), STRING(IDS_DATABASE_TABLE_CEV_PNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_EVTYPE)), STRING(IDS_DATABASE_TABLE_CEV_EVTYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_PVALUE)), STRING(IDS_DATABASE_TABLE_CEV_PVALUE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_INTER)), STRING(IDS_DATABASE_TABLE_CEV_INTER_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_SWND)), STRING(IDS_DATABASE_TABLE_CEV_SWND_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_STAGE)), STRING(IDS_DATABASE_TABLE_CEV_STAGE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_EPCKID)), STRING(IDS_DATABASE_TABLE_CEV_EPCKID_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_PNAME)), Varchar(GetTCExeVerGroupParameterTagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_EVTYPE)), Char(GetTCExeVerGroupParameterTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_PVALUE)), Varchar(GetTCExeVerGroupParameterConstValueLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_INTER)), Char(GetTCExeVerGroupParameterInterpretationLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_SWND)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_STAGE)), Varchar(GetTCExeVerGroupParameterStageLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CEV), STRING(IDS_DATABASE_TABLE_CEV_EPCKID)), Char(GetTCExeVerGroupParameterEventIDLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCParameterSetsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_NAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCParameterSetsTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCParameterSet *pDatabaseTCParameterSet, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_NAME)), pDatabaseTCParameterSet->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_DESCR)), pDatabaseTCParameterSet->GetDescription());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_STATUS)), TranslateTCParameterSetStatus(pDatabaseTCParameterSet->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCParameterSetsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCParameterSetsTableContents(pView, szContents); (pDatabaseTCParameterSet = pView->m_pDatabaseTCParameterSets[0].GetAt(pView->m_pDatabaseTCParameterSets[0].Find(pszName))); )
	{
		ConstructTCParameterSetsTableContents(pView, pDatabaseTCParameterSet, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_NAME)), CString(STRING(IDS_DATABASE_TABLE_CPS_NAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CPS_NAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_NAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_DESCR)), CString(STRING(IDS_DATABASE_TABLE_CPS_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CPS_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_STATUS)), CString(STRING(IDS_DATABASE_TABLE_CPS_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CPS_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_NAME)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_NAME)), STRING(IDS_DATABASE_TABLE_CPS_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_DESCR)), STRING(IDS_DATABASE_TABLE_CPS_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_STATUS)), STRING(IDS_DATABASE_TABLE_CPS_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_NAME)), Varchar(GetTCParameterSetNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_DESCR)), Varchar(GetTCParameterSetDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPS), STRING(IDS_DATABASE_TABLE_CPS_STATUS)), Char(GetTCParameterSetStatusLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCParameterSetMembersTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCParameterSetMembersTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCParameterSet *pDatabaseTCParameterSet, INT nCount, CStringArray &szContents) CONST
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CStringTools  cStringTools;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;

	for (nParameter = 0, nParameters = (nCount >= 0) ? (INT)min(pDatabaseTCParameterSet->GetSize(), nCount) : (INT)pDatabaseTCParameterSet->GetSize(), szContents.RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCFunctionElement = pDatabaseTCParameterSet->GetAt(nParameter)))
		{
			szParameter = pDatabaseTCFunctionElement->GetName();
			szParameter += (pDatabaseTCFunctionElement->GetBytePos() >= 0 && pDatabaseTCFunctionElement->GetBitPos() >= 0) ? (TAB + cStringTools.ConvertIntToString(8 * pDatabaseTCFunctionElement->GetBytePos() + pDatabaseTCFunctionElement->GetBitPos())) : CString(TAB);
			szParameter += (pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED)) ? (TAB + TranslateTCParameterSetItemValueInterpretation(pDatabaseTCFunctionElement->GetAttributes(), FALSE)) : CString(TAB);
			szParameter += (pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) ? (TAB + TranslateTCParameterSetItemValueRadix(pDatabaseTCFunctionElement->GetAttributes(), FALSE)) : CString(TAB);
			szParameter += TAB + pDatabaseTCFunctionElement->GetConstValueAsText();
			szContents.Add(szParameter);
		}
	}
	return((!szContents.GetSize()) ? ConstructTCParameterSetMembersTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCParameterSetMembersTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCParameterSetMembersTableContents(pView, szContents); (pDatabaseTCParameterSet = pView->m_pDatabaseTCParameterSets[0].GetAt(pView->m_pDatabaseTCParameterSets[0].Find(pszName))); )
	{
		ConstructTCParameterSetMembersTableContents(pView, pDatabaseTCParameterSet, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_PNAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_BITOFF)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_VTYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_RADIX)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_PVALUE)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_PNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_PNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_BITOFF)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_BITOFF)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_VTYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_VTYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_RADIX)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_RADIX)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_PVALUE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_PVALUE)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_PNAME)), STRING(IDS_DATABASE_TABLE_CPSP_PNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_BITOFF)), STRING(IDS_DATABASE_TABLE_CPSP_BITOFF_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_VTYPE)), STRING(IDS_DATABASE_TABLE_CPSP_VTYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_RADIX)), STRING(IDS_DATABASE_TABLE_CPSP_RADIX_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_PVALUE)), STRING(IDS_DATABASE_TABLE_CPSP_PVALUE_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_PNAME)), Varchar(GetTCParameterSetItemNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_BITOFF)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_VTYPE)), Char(GetTCParameterSetItemValueInterpretationLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_RADIX)), Char(GetTCParameterSetItemValueRadixLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPSP), STRING(IDS_DATABASE_TABLE_CPSP_PVALUE)), Varchar(GetTCParameterSetItemConstValueLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCParameterSetsAssociationTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCParameterSetsAssociationTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCFunction *pDatabaseTCFunction, INT nCount, CStringArray &szContents) CONST
{
	INT  nSet;
	INT  nSets;
	CStringArray  szParameterSets;

	for (nSet = 0, nSets = pDatabaseTCFunction->GetParameterSets(szParameterSets), nSets = (nCount >= 0) ? min(nSets, nCount) : nSets, szContents.RemoveAll(); nSet < nSets; nSet++)
	{
		szContents.Add(szParameterSets.GetAt(nSet));
		continue;
	}
	return((!szContents.GetSize()) ? ConstructTCParameterSetsAssociationTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCParameterSetsAssociationTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCFunction  *pDatabaseTCFunction;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCParameterSetsAssociationTableContents(pView, szContents); (pDatabaseTCFunction = pView->m_pDatabaseTCFunctions[0].GetAt(pView->m_pDatabaseTCFunctions[0].Find(pszName))); )
	{
		ConstructTCParameterSetsAssociationTableContents(pView, pDatabaseTCFunction, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCPS), STRING(IDS_DATABASE_TABLE_PCPS_NAME)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCPS), STRING(IDS_DATABASE_TABLE_PCPS_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCPS), STRING(IDS_DATABASE_TABLE_PCPS_NAME)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCPS), STRING(IDS_DATABASE_TABLE_PCPS_NAME)), STRING(IDS_DATABASE_TABLE_PCPS_NAME_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCPS), STRING(IDS_DATABASE_TABLE_PCPS_NAME)), Varchar(GetTCParameterSetNameLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCSequenceTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQDATE)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQUSER)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCNAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCISSUE)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCDATE)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_COSEV)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SSCH)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCSequenceTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCSequence *pDatabaseTCSequence, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME)), pDatabaseTCSequence->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DESCR)), pDatabaseTCSequence->GetDescription());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQDATE)), CTableViewTimeSpinCtrl::TranslateTime(1000000 * pDatabaseTCSequence->GetDate().GetTime()));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQUSER)), pDatabaseTCSequence->GetUser());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCNAME)), pDatabaseTCSequence->GetDocumentName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCISSUE)), pDatabaseTCSequence->GetDocumentIssue());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCDATE)), CTableViewTimeSpinCtrl::TranslateTime(1000000 * pDatabaseTCSequence->GetDocumentDate().GetTime()));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_COSEV)), pDatabaseTCSequence->GetMissionPlannerEvent());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SSCH)), pDatabaseTCSequence->GetDestinationSubSchedule());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_STATUS)), TranslateTCSequenceStatus(pDatabaseTCSequence->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCSequenceTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCSequence  *pDatabaseTCSequence;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCSequenceTableContents(pView, szContents); (pDatabaseTCSequence = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pszName))); )
	{
		ConstructTCSequenceTableContents(pView, pDatabaseTCSequence, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME)), CString(STRING(IDS_DATABASE_TABLE_CSF_NAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CSF_NAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DESCR)), CString(STRING(IDS_DATABASE_TABLE_CSF_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CSF_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQDATE)), CString(STRING(IDS_DATABASE_TABLE_CSF_SEQDATE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CSF_SEQDATE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQDATE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQUSER)), CString(STRING(IDS_DATABASE_TABLE_CSF_SEQUSER)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CSF_SEQUSER_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQUSER))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCNAME)), CString(STRING(IDS_DATABASE_TABLE_CSF_DOCNAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CSF_DOCNAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCNAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCISSUE)), CString(STRING(IDS_DATABASE_TABLE_CSF_DOCISSUE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CSF_DOCISSUE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCISSUE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCDATE)), CString(STRING(IDS_DATABASE_TABLE_CSF_DOCDATE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CSF_DOCDATE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCDATE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_COSEV)), CString(STRING(IDS_DATABASE_TABLE_CSF_COSEV)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CSF_COSEV_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_COSEV))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SSCH)), CString(STRING(IDS_DATABASE_TABLE_CSF_SSCH)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CSF_SSCH_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SSCH))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_STATUS)), CString(STRING(IDS_DATABASE_TABLE_CSF_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CSF_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQDATE)), TAS_TYPE_TIMESPINBOX | TAS_TIME_PAST | TAS_TIME_UTC | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQUSER)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCNAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCISSUE)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCDATE)), TAS_TYPE_TIMESPINBOX | TAS_TIME_PAST | TAS_TIME_UTC | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_COSEV)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SSCH)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQDATE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQDATE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQUSER)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQUSER)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCISSUE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCISSUE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCDATE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCDATE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_COSEV)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_COSEV)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SSCH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SSCH)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME)), STRING(IDS_DATABASE_TABLE_CSF_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DESCR)), STRING(IDS_DATABASE_TABLE_CSF_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQDATE)), STRING(IDS_DATABASE_TABLE_CSF_SEQDATE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQUSER)), STRING(IDS_DATABASE_TABLE_CSF_SEQUSER_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCNAME)), STRING(IDS_DATABASE_TABLE_CSF_DOCNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCISSUE)), STRING(IDS_DATABASE_TABLE_CSF_DOCISSUE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCDATE)), STRING(IDS_DATABASE_TABLE_CSF_DOCDATE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_COSEV)), STRING(IDS_DATABASE_TABLE_CSF_COSEV_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SSCH)), STRING(IDS_DATABASE_TABLE_CSF_SSCH_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_STATUS)), STRING(IDS_DATABASE_TABLE_CSF_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_NAME)), Varchar(GetTCSequenceNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DESCR)), Varchar(GetTCSequenceDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQDATE)), Timestamp());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SEQUSER)), Varchar(GetTCSequenceUserNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCNAME)), Varchar(GetTCSequenceDocumentNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCISSUE)), Varchar(GetTCSequenceDocumentIssueLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_DOCDATE)), Timestamp());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_COSEV)), Varchar(GetTCSequenceMissionPlannerEventLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_SSCH)), Varchar(GetTCSequenceSubScheduleDestinationLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSF), STRING(IDS_DATABASE_TABLE_CSF_STATUS)), Char(GetTCSequenceStatusLength()));
	szDescriptions.InsertAt(0, STRING(IDS_DATABASE_TABLE_CSF_COMMENTS));
	szDataTypes.InsertAt(0, NotApplicable());
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCSequenceEntriesTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCSequenceEntriesTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCSequence *pDatabaseTCSequence, INT nCount, CStringArray &szContents) CONST
{
	INT  nEntry;
	INT  nEntries;
	INT  nParameter;
	INT  nParameters;
	CString  szEntry;
	CTimeTag  tTimeTag;
	CStringTools  cStringTools;
	CDatabaseTCSequenceEntry  *pDatabaseTCSequenceEntry;
	CDatabaseTCSequenceEntryParameter  *pDatabaseTCSequenceEntryParameter;

	for (nEntry = 0, nEntries = (nCount >= 0) ? (INT)min(pDatabaseTCSequence->GetSize(), nCount) : (INT)pDatabaseTCSequence->GetSize(), szContents.RemoveAll(); nEntry < nEntries; nEntry++)
	{
		if ((pDatabaseTCSequenceEntry = pDatabaseTCSequence->GetAt(nEntry)))
		{
			szEntry = pDatabaseTCSequenceEntry->GetName();
			szEntry += TAB + TranslateTCSequenceEntryType(pDatabaseTCSequenceEntry->GetAttributes(), FALSE);
			szEntry += TAB + TranslateTCSequenceEntrySubType(pDatabaseTCSequenceEntry->GetAttributes(), FALSE);
			szEntry += (!IsTableRowEmpty(pDatabaseTCSequenceEntry)) ? (TAB + cStringTools.ConvertIntToString(nEntry + 1)) : CString(TAB);
			szEntry += TAB + pDatabaseTCSequenceEntry->GetAssociated1Step();
			szEntry += TAB + pDatabaseTCSequenceEntry->GetDescription();
			szEntry += (((pDatabaseTCSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG) && pDatabaseTCSequenceEntry->GetExecutionTime() == 0 && pDatabaseTCSequenceEntry->GetExecutionDeltaTime() == 0) || pDatabaseTCSequenceEntry->GetReleaseDeltaTime() > 0) ? (TAB + CTableViewTimeSpinCtrl::TranslateTime(1000 * (TIMETAG)pDatabaseTCSequenceEntry->GetReleaseDeltaTime(), TRUE)) : CString(TAB);
			szEntry += (pDatabaseTCSequenceEntry->GetExecutionTime() > 0) ? (TAB + CTableViewTimeSpinCtrl::TranslateTime(pDatabaseTCSequenceEntry->GetExecutionTime().GetTime())) : CString(TAB);
			szEntry += (pDatabaseTCSequenceEntry->GetExecutionDeltaTime() > 0) ? (TAB + CTableViewTimeSpinCtrl::TranslateTime((pDatabaseTCSequenceEntry->IsEarlierExecutionDeltaTime()) ? (-1000 * (TIMETAG)pDatabaseTCSequenceEntry->GetExecutionDeltaTime()) : (1000 * (TIMETAG)pDatabaseTCSequenceEntry->GetExecutionDeltaTime()), TRUE)) : CString(TAB);
			szEntry += TAB + TranslateTCSequenceEntryGroupFlag(pDatabaseTCSequenceEntry->GetAttributes(), FALSE);
			szEntry += TAB + TranslateTCSequenceEntryBlockFlag(pDatabaseTCSequenceEntry->GetAttributes(), FALSE);
			szEntry += TAB + TranslateTCSequenceEntryBlockMembership(pDatabaseTCSequenceEntry->GetBlockMembership());
			for (nParameter = 0, nParameters = (INT)pDatabaseTCSequenceEntry->GetSize(), nCount = 0; nParameter < nParameters; nParameter++)
			{
				if ((pDatabaseTCSequenceEntryParameter = pDatabaseTCSequenceEntry->GetAt(nParameter)))
				{
					nCount = (!IsTableRowEmpty(pDatabaseTCSequenceEntryParameter)) ? (nCount + 1) : nCount;
					continue;
				}
			}
			szEntry += (nCount > 0) ? (TAB + cStringTools.ConvertIntToString(nCount)) : CString(TAB);
			szContents.Add(szEntry);
		}
	}
	return((!szContents.GetSize()) ? ConstructTCSequenceEntriesTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCSequenceEntriesTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCSequence  *pDatabaseTCSequence;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCSequenceEntriesTableContents(pView, szContents); (pDatabaseTCSequence = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pszName))); )
	{
		ConstructTCSequenceEntriesTableContents(pView, pDatabaseTCSequence, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_IDENT)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_TYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_TCTYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_ENTRY)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_1STEP)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_COMMENT)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_RELTIME)), TAS_TYPE_TIMESPINBOX | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_ABSTIME)), TAS_TYPE_TIMESPINBOX | TAS_TIME_FUTURE | TAS_TIME_UTC | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_EXETIME)), TAS_TYPE_TIMESPINBOX | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_GROUP)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_BLOCK)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_NPARS)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_IDENT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_IDENT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_TYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_TYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_TCTYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_TCTYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_ENTRY)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_ENTRY)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_1STEP)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_1STEP)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_COMMENT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_COMMENT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_RELTIME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_RELTIME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_ABSTIME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_ABSTIME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_EXETIME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_EXETIME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_GROUP)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_GROUP)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_BLOCK)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_BLOCK)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_NPARS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_NPARS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_IDENT)), STRING(IDS_DATABASE_TABLE_CSS_IDENT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_TYPE)), STRING(IDS_DATABASE_TABLE_CSS_TYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_TCTYPE)), STRING(IDS_DATABASE_TABLE_CSS_TCTYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_ENTRY)), STRING(IDS_DATABASE_TABLE_CSS_ENTRY_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_1STEP)), STRING(IDS_DATABASE_TABLE_CSS_1STEP_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_COMMENT)), STRING(IDS_DATABASE_TABLE_CSS_COMMENT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_RELTIME)), STRING(IDS_DATABASE_TABLE_CSS_RELTIME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_ABSTIME)), STRING(IDS_DATABASE_TABLE_CSS_ABSTIME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_EXETIME)), STRING(IDS_DATABASE_TABLE_CSS_EXETIME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_GROUP)), STRING(IDS_DATABASE_TABLE_CSS_GROUP_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL)), STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_BLOCK)), STRING(IDS_DATABASE_TABLE_CSS_BLOCK_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_NPARS)), STRING(IDS_DATABASE_TABLE_CSS_NPARS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_IDENT)), Varchar(GetTCSequenceEntryNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_TYPE)), Char(GetTCSequenceEntryTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_TCTYPE)), Varchar(GetTCSequenceEntrySubTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_ENTRY)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_1STEP)), Varchar(GetTCSequenceEntryNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_COMMENT)), Varchar(GetTCSequenceEntryDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_RELTIME)), Timestamp());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_ABSTIME)), Timestamp());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_EXETIME)), Timestamp());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_GROUP)), Char(GetTCSequenceEntryGroupFlagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_BLKCNTL)), Char(GetTCSequenceEntryBlockFlagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_BLOCK)), Varchar(GetTCSequenceEntryBlockMembershipLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSS), STRING(IDS_DATABASE_TABLE_CSS_NPARS)), Integer());
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCSequenceParametersTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCSequenceParametersTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCSequence *pDatabaseTCSequence, INT nCount, CStringArray &szContents) CONST
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CStringTools  cStringTools;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCParameters  pDatabaseTCParameters;

	for (nParameter = 0, nParameters = pDatabaseTCSequence->GetParameters(pDatabaseTCParameters), nParameters = (nCount >= 0) ? min(nParameters, nCount) : nParameters, szContents.RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter = pDatabaseTCParameters.GetAt(nParameter)))
		{
			szParameter = pDatabaseTCParameter->GetTag();
			szParameter += TAB + cStringTools.ConvertIntToString(nParameter);
			szParameter += TAB + pDatabaseTCParameter->GetDescription();
			szParameter += TAB + pDatabaseTCParameter->GetUnit();
			szParameter += (pDatabaseTCParameter->GetWidth() > 0) ? (TAB + cStringTools.ConvertIntToString(pDatabaseTCParameter->GetWidth())) : CString(TAB);
			szParameter += TAB + TranslateTCSequenceParameterValueType(pDatabaseTCParameter->GetAttributes(), FALSE);
			szParameter += TAB + TranslateTCSequenceParameterCategory(pDatabaseTCParameter->GetAttributes(), FALSE);
			szParameter += TAB + TranslateTCSequenceParameterCoding(pDatabaseTCParameter->GetAttributes(), FALSE);
			szParameter += TAB + TranslateTCSequenceParameterValueRadix(pDatabaseTCParameter->GetAttributes(), FALSE);
			szParameter += (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? (TAB + pDatabaseTCParameter->GetCalTable()) : CString(TAB);
			szParameter += (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? (TAB + pDatabaseTCParameter->GetCalTable()) : CString(TAB);
			szParameter += (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? (TAB + pDatabaseTCParameter->GetOolTable()) : CString(TAB);
			szParameter += (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? (TAB + pDatabaseTCParameter->GetOolTable() + TAB + pDatabaseTCParameter->GetConstValueAsText()) : (CString(TAB) + TAB + pDatabaseTCParameter->GetConstValueAsText());
			szContents.Add((!IsTableRowEmpty(pDatabaseTCParameter)) ? szParameter : EMPTYSTRING);
		}
	}
	return((!szContents.GetSize()) ? ConstructTCSequenceParametersTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCSequenceParametersTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCSequence  *pDatabaseTCSequence;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCSequenceParametersTableContents(pView, szContents); (pDatabaseTCSequence = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pszName))); )
	{
		ConstructTCSequenceParametersTableContents(pView, pDatabaseTCSequence, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_FPNAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_FPNUM)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_UNIT)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_LENGTH)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_VTYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_CATEG)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_CODING)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_RADIX)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_CALREF)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_TXFREF)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_OCFREF)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_FXFREF)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_DEFVAL)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_FPNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_FPNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_FPNUM)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_FPNUM)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_UNIT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_UNIT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_LENGTH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_LENGTH)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_VTYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_VTYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_CATEG)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_CATEG)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_CODING)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_CODING)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_RADIX)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_RADIX)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_CALREF)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_CALREF)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_TXFREF)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_TXFREF)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_OCFREF)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_OCFREF)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_FXFREF)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_FXFREF)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_DEFVAL)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_DEFVAL)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_FPNAME)), STRING(IDS_DATABASE_TABLE_CSP_FPNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_FPNUM)), STRING(IDS_DATABASE_TABLE_CSP_FPNUM_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_DESCR)), STRING(IDS_DATABASE_TABLE_CSP_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_UNIT)), STRING(IDS_DATABASE_TABLE_CSP_UNIT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_LENGTH)), STRING(IDS_DATABASE_TABLE_CSP_LENGTH_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_VTYPE)), STRING(IDS_DATABASE_TABLE_CSP_VTYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_CATEG)), STRING(IDS_DATABASE_TABLE_CSP_CATEG_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_CODING)), STRING(IDS_DATABASE_TABLE_CSP_CODING_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_RADIX)), STRING(IDS_DATABASE_TABLE_CSP_RADIX_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_CALREF)), STRING(IDS_DATABASE_TABLE_CSP_CALREF_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_TXFREF)), STRING(IDS_DATABASE_TABLE_CSP_TXFREF_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_OCFREF)), STRING(IDS_DATABASE_TABLE_CSP_OCFREF_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_FXFREF)), STRING(IDS_DATABASE_TABLE_CSP_FXFREF_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_DEFVAL)), STRING(IDS_DATABASE_TABLE_CSP_DEFVAL_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_FPNAME)), Varchar(GetTCSequenceParameterTagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_FPNUM)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_DESCR)), Varchar(GetTCSequenceParameterDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_UNIT)), Varchar(GetTCSequenceParameterUnitLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_LENGTH)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_VTYPE)), Char(GetTCSequenceParameterValueTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_CATEG)), Char(GetTCSequenceParameterCategoryLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_CODING)), Char(GetTCSequenceParameterCodingLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_RADIX)), Char(GetTCSequenceParameterValueRadixLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_CALREF)), Varchar(GetTCSequenceParameterCalTableLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_TXFREF)), Varchar(GetTCSequenceParameterCalTableLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_OCFREF)), Varchar(GetTCSequenceParameterOolTableLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_FXFREF)), Varchar(GetTCSequenceParameterOolTableLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CSP), STRING(IDS_DATABASE_TABLE_CSP_DEFVAL)), Varchar(GetTCSequenceParameterConstValueLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCSequenceEntryParametersTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCSequenceEntryParametersTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCSequence *pDatabaseTCSequence, INT nCount, CStringArray &szContents) CONST
{
	INT  nIndex;
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CString  szMemory[2];
	CStringTools  cStringTools;
	CDatabaseTCSequenceEntry  *pDatabaseTCSequenceEntry;
	CDatabaseTCSequenceEntryParameter  *pDatabaseTCSequenceEntryParameter;

	for (nParameter = 0, nParameters = ((pDatabaseTCSequenceEntry = pDatabaseTCSequence->GetAt((nIndex = max(pView->GetTableFloatingAlignment(STRING(IDS_DATABASE_TABLE_SDF)) - 1, 0))))) ? ((nCount >= 0) ? (INT)min(pDatabaseTCSequenceEntry->GetSize(), nCount) : (INT)pDatabaseTCSequenceEntry->GetSize()) : 0, szContents.RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCSequenceEntryParameter = pDatabaseTCSequenceEntry->GetAt(nParameter)))
		{
			szParameter = pDatabaseTCSequenceEntryParameter->GetTag();
			szParameter += TAB + cStringTools.ConvertIntToString(nIndex + 1);
			szParameter += (pDatabaseTCSequenceEntryParameter->GetBytePos() >= 0 && pDatabaseTCSequenceEntryParameter->GetBitPos() >= 0) ? (TAB + cStringTools.ConvertIntToString(8 * pDatabaseTCSequenceEntryParameter->GetBytePos() + pDatabaseTCSequenceEntryParameter->GetBitPos())) : CString(TAB);
			szParameter += TAB + pDatabaseTCSequenceEntryParameter->GetDescription();
			szParameter += TAB + TranslateTCSequenceEntryParameterValueType(pDatabaseTCSequenceEntryParameter->GetAttributes(), FALSE);
			szParameter += TAB + TranslateTCSequenceEntryParameterValueRadix(pDatabaseTCSequenceEntryParameter->GetAttributes(), FALSE);
			szParameter += TAB + pDatabaseTCSequenceEntryParameter->GetConstValueAsText();
			szParameter += (pDatabaseTCSequenceEntryParameter->GetMemoryArea(szMemory[0], szMemory[1])) ? (TAB + szMemory[0]) : CString(TAB);
			szParameter += (pDatabaseTCSequenceEntryParameter->GetMemoryArea(szMemory[0], szMemory[1])) ? (TAB + szMemory[1]) : CString(TAB);
			szContents.Add((!IsTableRowEmpty(pDatabaseTCSequenceEntryParameter)) ? szParameter : EMPTYSTRING);
		}
	}
	return((!szContents.GetSize()) ? ConstructTCSequenceEntryParametersTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCSequenceEntryParametersTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCSequence  *pDatabaseTCSequence;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCSequenceEntryParametersTableContents(pView, szContents); (pDatabaseTCSequence = pView->m_pDatabaseTCSequences[0].GetAt(pView->m_pDatabaseTCSequences[0].Find(pszName))); )
	{
		ConstructTCSequenceEntryParametersTableContents(pView, pDatabaseTCSequence, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_PNAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_ENTRY)), TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_BITOFF)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_COMMENT)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_VALTYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_VALRADIX)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_VALUE)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_PSET)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_PSINST)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_PNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_PNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_ENTRY)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_ENTRY)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_BITOFF)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_BITOFF)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_COMMENT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_COMMENT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_VALTYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_VALTYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_VALRADIX)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_VALRADIX)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_VALUE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_VALUE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_PSET)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_PSET)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_PSINST)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_PSINST)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_PNAME)), STRING(IDS_DATABASE_TABLE_SDF_PNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_ENTRY)), STRING(IDS_DATABASE_TABLE_SDF_ENTRY_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_BITOFF)), STRING(IDS_DATABASE_TABLE_SDF_BITOFF_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_COMMENT)), STRING(IDS_DATABASE_TABLE_SDF_COMMENT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_VALTYPE)), STRING(IDS_DATABASE_TABLE_SDF_VALTYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_VALRADIX)), STRING(IDS_DATABASE_TABLE_SDF_VALRADIX_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_VALUE)), STRING(IDS_DATABASE_TABLE_SDF_VALUE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_PSET)), STRING(IDS_DATABASE_TABLE_SDF_PSET_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_PSINST)), STRING(IDS_DATABASE_TABLE_SDF_PSINST_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_PNAME)), Varchar(GetTCSequenceEntryParameterTagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_ENTRY)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_BITOFF)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_COMMENT)), Varchar(GetTCSequenceEntryParameterCommentLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_VALTYPE)), Char(GetTCSequenceEntryParameterValueTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_VALRADIX)), Char(GetTCSequenceEntryParameterValueRadixLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_VALUE)), Varchar(GetTCSequenceEntryParameterConstValueLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_PSET)), Varchar(GetTCSequenceEntryParameterMemoryAreaNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_SDF), STRING(IDS_DATABASE_TABLE_SDF_PSINST)), Varchar(GetTCSequenceEntryParameterMemoryAreaVersionLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCSequenceFunctionBlockTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_CNAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_INTER)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCSequenceFunctionBlockTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCFunctionBlock *pDatabaseTCFunctionBlock, CStringArray &szContents) CONST
{
	INT  nOffset;
	INT  nLength;
	UINT  nType[2];
	CStringTools  cStringTools;

	for (nType[0] = min(min(min(min(min(TCFUNCTIONBLOCK_TYPE_LI, TCFUNCTIONBLOCK_TYPE_LTT), TCFUNCTIONBLOCK_TYPE_L2S), TCFUNCTIONBLOCK_TYPE_NI), TCFUNCTIONBLOCK_TYPE_NTT), TCFUNCTIONBLOCK_TYPE_N2S), nType[1] = max(max(max(max(max(TCFUNCTIONBLOCK_TYPE_LI, TCFUNCTIONBLOCK_TYPE_LTT), TCFUNCTIONBLOCK_TYPE_L2S), TCFUNCTIONBLOCK_TYPE_NI), TCFUNCTIONBLOCK_TYPE_NTT), TCFUNCTIONBLOCK_TYPE_N2S), szContents.RemoveAll(), szContents.Add(pDatabaseTCFunctionBlock->GetName()); nType[0] <= nType[1]; nType[0] <<= 1)
	{
		if ((pDatabaseTCFunctionBlock->GetAttributes() & nType[0]) && pDatabaseTCFunctionBlock->GetLocation(nType[0], nOffset, nLength))
		{
			szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_INTER)), TranslateTCFunctionBlockInterpretation(nType[0], FALSE));
			szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)), cStringTools.ConvertIntToString(nOffset));
			szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)), cStringTools.ConvertIntToString(nLength));
			szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_STATUS)), TranslateTCFunctionBlockStatus(pDatabaseTCFunctionBlock->GetStatus(), FALSE));
			break;
		}
	}
	if (nType[0] > nType[1])
	{
		szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_INTER)), EMPTYSTRING);
		szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)), EMPTYSTRING);
		szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)), EMPTYSTRING);
		szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_STATUS)), EMPTYSTRING);
	}
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCSequenceFunctionBlockTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCSequenceFunctionBlockTableContents(pView, szContents); (pDatabaseTCFunctionBlock = pView->m_pDatabaseTCFunctionBlocks[0].GetAt(pView->m_pDatabaseTCFunctionBlocks[0].Find(pszName))); )
	{
		ConstructTCSequenceFunctionBlockTableContents(pView, pDatabaseTCFunctionBlock, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_CNAME)), CString(STRING(IDS_DATABASE_TABLE_BCF_CNAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_BCF_CNAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_CNAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_INTER)), CString(STRING(IDS_DATABASE_TABLE_BCF_INTER)) + TAB + CString(STRING(IDS_DATABASE_TABLE_BCF_INTER_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_INTER))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)), CString(STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)) + TAB + CString(STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)), CString(STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)) + TAB + CString(STRING(IDS_DATABASE_TABLE_BCF_MAXLEN_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_MAXLEN))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_STATUS)), CString(STRING(IDS_DATABASE_TABLE_BCF_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_BCF_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_CNAME)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_INTER)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_CNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_CNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_INTER)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_INTER)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_CNAME)), STRING(IDS_DATABASE_TABLE_BCF_CNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_INTER)), STRING(IDS_DATABASE_TABLE_BCF_INTER_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)), STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)), STRING(IDS_DATABASE_TABLE_BCF_MAXLEN_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_STATUS)), STRING(IDS_DATABASE_TABLE_BCF_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_CNAME)), Varchar(GetTCFunctionBlockNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_INTER)), Char(GetTCFunctionBlockInterpretationLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_BYTEOFF)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_MAXLEN)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCF), STRING(IDS_DATABASE_TABLE_BCF_STATUS)), Char(GetTCFunctionBlockStatusLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCSequenceFunctionBlockElementsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCSequenceFunctionBlockElementsTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCFunctionBlock *pDatabaseTCFunctionBlock, INT nCount, CStringArray &szContents) CONST
{
	INT  nElement;
	INT  nElements;
	CString  szElement;
	CDatabaseTCFunctionBlockElement  *pDatabaseTCFunctionBlockElement;

	for (nElement = 0, nElements = (nCount >= 0) ? (INT)min(pDatabaseTCFunctionBlock->GetSize(), nCount) : (INT)pDatabaseTCFunctionBlock->GetSize(), szContents.RemoveAll(); nElement < nElements; nElement++)
	{
		if ((pDatabaseTCFunctionBlockElement = pDatabaseTCFunctionBlock->GetAt(nElement)))
		{
			szElement = pDatabaseTCFunctionBlockElement->GetName();
			szElement += TAB + TranslateTCFunctionBlockElementInterpretation(pDatabaseTCFunctionBlockElement->GetAttributes(), FALSE);
			szContents.Add(szElement);
		}
	}
	return((!szContents.GetSize()) ? ConstructTCSequenceFunctionBlockElementsTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCSequenceFunctionBlockElementsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCFunctionBlock  *pDatabaseTCFunctionBlock;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCSequenceFunctionBlockElementsTableContents(pView, szContents); (pDatabaseTCFunctionBlock = pView->m_pDatabaseTCFunctionBlocks[0].GetAt(pView->m_pDatabaseTCFunctionBlocks[0].Find(pszName))); )
	{
		ConstructTCSequenceFunctionBlockElementsTableContents(pView, pDatabaseTCFunctionBlock, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCCF), STRING(IDS_DATABASE_TABLE_BCCF_CONTENT)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCCF), STRING(IDS_DATABASE_TABLE_BCCF_INTER)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCCF), STRING(IDS_DATABASE_TABLE_BCCF_CONTENT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_BCCF), STRING(IDS_DATABASE_TABLE_BCCF_CONTENT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCCF), STRING(IDS_DATABASE_TABLE_BCCF_INTER)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_BCCF), STRING(IDS_DATABASE_TABLE_BCCF_INTER)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCCF), STRING(IDS_DATABASE_TABLE_BCCF_CONTENT)), STRING(IDS_DATABASE_TABLE_BCCF_CONTENT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCCF), STRING(IDS_DATABASE_TABLE_BCCF_INTER)), STRING(IDS_DATABASE_TABLE_BCCF_INTER_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCCF), STRING(IDS_DATABASE_TABLE_BCCF_CONTENT)), Varchar(GetTCFunctionBlockElementNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_BCCF), STRING(IDS_DATABASE_TABLE_BCCF_INTER)), Char(GetTCFunctionBlockElementInterpretationLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructOBProcessorTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PATCHTC)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_DUMPTC)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_TMPKT)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTADDR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDADDR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_IMGNAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_INTERVAL)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseOBProcessor *pDatabaseOBProcessor, CStringArray &szContents) CONST
{
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	CString  szPacket;
	CString  szFunction[2];
	CStringTools  cStringTools;
	CDatabaseTMPacket  *pDatabaseTMPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;

	for (szFunction[0].Empty(), szContents.RemoveAll(), GetOBProcessorAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); (pDatabaseTCFunction = GetTCFunctions()->GetAt(GetTCFunctions()->Find(pDatabaseOBProcessor->GetPatchCommand()))); )
	{
		szFunction[0].Format(STRING(IDS_DATABASE_TABLE_GEN_TCFUNCTION_FORMAT), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCFunction->GetDescription());
		break;
	}
	for (szFunction[1].Empty(); (pDatabaseTCFunction = GetTCFunctions()->GetAt(GetTCFunctions()->Find(pDatabaseOBProcessor->GetDumpCommand()))); )
	{
		szFunction[1].Format(STRING(IDS_DATABASE_TABLE_GEN_TCFUNCTION_FORMAT), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCFunction->GetDescription());
		break;
	}
	for (szPacket.Empty(); (pDatabaseTMPacket = GetTMPackets()->GetAt(GetTMPackets()->Find(pDatabaseOBProcessor->GetDumpPacket()))); )
	{
		szPacket.Format(STRING(IDS_DATABASE_TABLE_GEN_TMPACKET_FORMAT), (LPCTSTR)pDatabaseTMPacket->GetTag(), (LPCTSTR)pDatabaseTMPacket->GetDescription());
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)), pDatabaseOBProcessor->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PATCHTC)), szFunction[0]);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_DUMPTC)), szFunction[1]);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_TMPKT)), szPacket);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE)), (pDatabaseOBProcessor->GetAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1]) && nAddress[0][0] != (UINT)-1) ? cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), 16) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTADDR)), (pDatabaseOBProcessor->GetAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1]) && nAddress[1][0] != (UINT)-1) ? cStringTools.ConvertUIntToPaddedString(nAddress[1][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE)), (pDatabaseOBProcessor->GetAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1]) && nAddress[0][1] != (UINT)-1) ? cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), 16) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDADDR)), (pDatabaseOBProcessor->GetAddressRange(nAddress[0][0], nAddress[1][0], nAddress[0][1], nAddress[1][1]) && nAddress[1][1] != (UINT)-1) ? cStringTools.ConvertUIntToPaddedString(nAddress[1][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_IMGNAME)), pDatabaseOBProcessor->GetMasterImage());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_INTERVAL)), (pDatabaseOBProcessor->GetDumpInterval() > 0) ? cStringTools.ConvertLongIntToString(pDatabaseOBProcessor->GetDumpInterval().GetTotalSeconds()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH)), (pDatabaseOBProcessor->GetDumpCount() >= 0) ? cStringTools.ConvertIntToString(pDatabaseOBProcessor->GetDumpCount()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STATUS)), TranslateOBProcessorStatus(pDatabaseOBProcessor->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseOBProcessor  *pDatabaseOBProcessor;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructOBProcessorTableContents(pView, szContents); (pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszName))); )
	{
		ConstructOBProcessorTableContents(pView, pDatabaseOBProcessor, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)), CString(STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PATCHTC)), CString(STRING(IDS_DATABASE_TABLE_GEN_PATCHTC)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GEN_PATCHTC_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PATCHTC))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_DUMPTC)), CString(STRING(IDS_DATABASE_TABLE_GEN_DUMPTC)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GEN_DUMPTC_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_DUMPTC))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_TMPKT)), CString(STRING(IDS_DATABASE_TABLE_GEN_TMPKT)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GEN_TMPKT_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_TMPKT))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE)), CString(STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTADDR)), CString(STRING(IDS_DATABASE_TABLE_GEN_STARTADDR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GEN_STARTADDR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTADDR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE)), CString(STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDADDR)), CString(STRING(IDS_DATABASE_TABLE_GEN_ENDADDR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GEN_ENDADDR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDADDR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_IMGNAME)), CString(STRING(IDS_DATABASE_TABLE_GEN_IMGNAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GEN_IMGNAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_IMGNAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_INTERVAL)), CString(STRING(IDS_DATABASE_TABLE_GEN_INTERVAL)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GEN_INTERVAL_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_INTERVAL))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH)), CString(STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STATUS)), CString(STRING(IDS_DATABASE_TABLE_GEN_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GEN_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PATCHTC)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_DUMPTC)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_TMPKT)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTADDR)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDADDR)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_IMGNAME)), TAS_TYPE_SUBTABLE);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_INTERVAL)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PATCHTC)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PATCHTC)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_DUMPTC)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_DUMPTC)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_TMPKT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_TMPKT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTADDR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTADDR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDADDR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDADDR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_IMGNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_IMGNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_INTERVAL)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_INTERVAL)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PATCHTC)), STRING(IDS_DATABASE_TABLE_GEN_PATCHTC_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_DUMPTC)), STRING(IDS_DATABASE_TABLE_GEN_DUMPTC_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_TMPKT)), STRING(IDS_DATABASE_TABLE_GEN_TMPKT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE)), STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTADDR)), STRING(IDS_DATABASE_TABLE_GEN_STARTADDR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE)), STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDADDR)), STRING(IDS_DATABASE_TABLE_GEN_ENDADDR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_IMGNAME)), STRING(IDS_DATABASE_TABLE_GEN_IMGNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_INTERVAL)), STRING(IDS_DATABASE_TABLE_GEN_INTERVAL_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH)), STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STATUS)), STRING(IDS_DATABASE_TABLE_GEN_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PROCESSOR)), Varchar(GetOBProcessorNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_PATCHTC)), Varchar(GetOBProcessorPatchCommandLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_DUMPTC)), Varchar(GetOBProcessorDumpCommandLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_TMPKT)), Varchar(GetOBProcessorDumpPacketLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTPAGE)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STARTADDR)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDPAGE)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_ENDADDR)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_IMGNAME)), Varchar(GetOBProcessorMasterImageLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_INTERVAL)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_NUMPATCH)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GEN), STRING(IDS_DATABASE_TABLE_GEN_STATUS)), Char(GetOBProcessorStatusLength()));
	szDescriptions.InsertAt(0, STRING(IDS_DATABASE_TABLE_GEN_COMMENTS));
	szDataTypes.InsertAt(0, NotApplicable());
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructOBProcessorMemoryAreasTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorMemoryAreasTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseOBProcessor *pDatabaseOBProcessor, INT nCount, CStringArray &szContents) CONST
{
	INT  nMemoryArea;
	INT  nMemoryAreas;
	CString  szMemoryArea;
	CDatabaseOBProcessorMemoryArea  *pDatabaseOBProcessorMemoryArea;

	for (nMemoryArea = 0, nMemoryAreas = (nCount >= 0) ? (INT)min(pDatabaseOBProcessor->GetSize(), nCount) : (INT)pDatabaseOBProcessor->GetSize(), szContents.RemoveAll(); nMemoryArea < nMemoryAreas; nMemoryArea++)
	{
		if ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(nMemoryArea)))
		{
			szMemoryArea = pDatabaseOBProcessorMemoryArea->GetName();
			szMemoryArea += TAB + pDatabaseOBProcessorMemoryArea->GetDescription();
			szMemoryArea += TAB + TranslateOBProcessorMemoryAreaType(pDatabaseOBProcessorMemoryArea->GetAttributes(), FALSE);
			szMemoryArea += TAB + pDatabaseOBProcessorMemoryArea->GetPatchCommand();
			szMemoryArea += TAB + pDatabaseOBProcessorMemoryArea->GetDumpCommand();
			szMemoryArea += TAB + pDatabaseOBProcessorMemoryArea->GetDumpPacket();
			szMemoryArea += TAB + TranslateOBProcessorMemoryAreaPatchFlag(pDatabaseOBProcessorMemoryArea->GetAttributes(), FALSE);
			szMemoryArea += TAB + TranslateOBProcessorMemoryAreaDumpFlag(pDatabaseOBProcessorMemoryArea->GetAttributes(), FALSE);
			szMemoryArea += TAB + TranslateOBProcessorMemoryAreaUpdateFlag(pDatabaseOBProcessorMemoryArea->GetAttributes(), FALSE);
			szMemoryArea += TAB + TranslateOBProcessorMemoryAreaInhibitFlag(pDatabaseOBProcessorMemoryArea->GetAttributes(), FALSE);
			szContents.Add(szMemoryArea);
		}
	}
	return((!szContents.GetSize()) ? ConstructOBProcessorMemoryAreasTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorMemoryAreasTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseOBProcessor  *pDatabaseOBProcessor;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructOBProcessorMemoryAreasTableContents(pView, szContents); (pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszName))); )
	{
		ConstructOBProcessorMemoryAreasTableContents(pView, pDatabaseOBProcessor, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_NAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_TYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_PATCHTC)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_DUMPTC)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_TMPKT)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_PATCHABLE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_DUMPABLE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_UPDATE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_INHIBIT)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_TYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_TYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_PATCHTC)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_PATCHTC)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_DUMPTC)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_DUMPTC)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_TMPKT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_TMPKT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_PATCHABLE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_PATCHABLE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_DUMPABLE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_DUMPABLE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_UPDATE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_UPDATE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_INHIBIT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_INHIBIT)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_NAME)), STRING(IDS_DATABASE_TABLE_MAD_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_DESCR)), STRING(IDS_DATABASE_TABLE_MAD_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_TYPE)), STRING(IDS_DATABASE_TABLE_MAD_TYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_PATCHTC)), STRING(IDS_DATABASE_TABLE_MAD_PATCHTC_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_DUMPTC)), STRING(IDS_DATABASE_TABLE_MAD_DUMPTC_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_TMPKT)), STRING(IDS_DATABASE_TABLE_MAD_TMPKT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_PATCHABLE)), STRING(IDS_DATABASE_TABLE_MAD_PATCHABLE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_DUMPABLE)), STRING(IDS_DATABASE_TABLE_MAD_DUMPABLE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_UPDATE)), STRING(IDS_DATABASE_TABLE_MAD_UPDATE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_INHIBIT)), STRING(IDS_DATABASE_TABLE_MAD_INHIBIT_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_NAME)), Varchar(GetOBProcessorMemoryAreaNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_DESCR)), Varchar(GetOBProcessorMemoryAreaDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_TYPE)), Varchar(GetOBProcessorMemoryAreaTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_PATCHTC)), Varchar(GetOBProcessorMemoryAreaPatchCommandLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_DUMPTC)), Varchar(GetOBProcessorMemoryAreaDumpCommandLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_TMPKT)), Varchar(GetOBProcessorMemoryAreaDumpPacketLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_PATCHABLE)), Char(GetOBProcessorMemoryAreaPatchFlagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_DUMPABLE)), Char(GetOBProcessorMemoryAreaDumpFlagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_UPDATE)), Char(GetOBProcessorMemoryAreaUpdateFlagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MAD), STRING(IDS_DATABASE_TABLE_MAD_INHIBIT)), Char(GetOBProcessorMemoryAreaInhibitFlagLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructOBProcessorMemoryAreaBlocksTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorMemoryAreaBlocksTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseOBProcessor *pDatabaseOBProcessor, INT nCount, CStringArray &szContents) CONST
{
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	CString  szMemoryBlock;
	CStringTools  cStringTools;
	CDatabaseOBProcessorMemoryArea  *pDatabaseOBProcessorMemoryArea;
	CDatabaseOBProcessorMemoryAreaBlock  *pDatabaseOBProcessorMemoryAreaBlock;

	for (nMemoryBlock = 0, nMemoryBlocks = ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(max(pView->GetTableFloatingAlignment(STRING(IDS_DATABASE_TABLE_MEM)) - 1, 0)))) ? ((nCount >= 0) ? (INT)min(pDatabaseOBProcessorMemoryArea->GetSize(), nCount) : (INT)pDatabaseOBProcessorMemoryArea->GetSize()) : 0, GetOBProcessorMemoryAreaBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), szContents.RemoveAll(); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
	{
		if ((pDatabaseOBProcessorMemoryAreaBlock = pDatabaseOBProcessorMemoryArea->GetAt(nMemoryBlock)))
		{
			szMemoryBlock = pDatabaseOBProcessorMemoryAreaBlock->GetTMParameter();
			szMemoryBlock += TAB + pDatabaseOBProcessorMemoryAreaBlock->GetTCParameter();
			szMemoryBlock += TAB + pDatabaseOBProcessorMemoryAreaBlock->GetDescription();
			szMemoryBlock += (pDatabaseOBProcessorMemoryAreaBlock->GetAddress(nAddress[0][0], nAddress[0][1]) && nAddress[0][0] != (UINT)-1) ? (TAB + cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), 16)) : CString(TAB);
			szMemoryBlock += (pDatabaseOBProcessorMemoryAreaBlock->GetAddress(nAddress[0][0], nAddress[0][1]) && nAddress[0][1] != (UINT)-1) ? (TAB + cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16)) : CString(TAB);
			szMemoryBlock += (pDatabaseOBProcessorMemoryAreaBlock->GetBitOffset() >= 0) ? (TAB + cStringTools.ConvertIntToString(pDatabaseOBProcessorMemoryAreaBlock->GetBitOffset())) : CString(TAB);
			szMemoryBlock += (pDatabaseOBProcessorMemoryAreaBlock->GetBitWidth() > 0) ? (TAB + cStringTools.ConvertIntToString(pDatabaseOBProcessorMemoryAreaBlock->GetBitWidth())) : CString(TAB);
			szContents.Add(szMemoryBlock);
		}
	}
	return((!szContents.GetSize()) ? ConstructOBProcessorMemoryAreaBlocksTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorMemoryAreaBlocksTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseOBProcessor  *pDatabaseOBProcessor;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructOBProcessorMemoryAreaBlocksTableContents(pView, szContents); (pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszName))); )
	{
		ConstructOBProcessorMemoryAreaBlocksTableContents(pView, pDatabaseOBProcessor, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_TMNAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_TCNAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_PAGE)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_ADDRESS)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_BITOFF)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_WIDTH)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_TMNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_TMNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_TCNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_TCNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_PAGE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_PAGE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_ADDRESS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_ADDRESS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_BITOFF)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_BITOFF)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_WIDTH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_WIDTH)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_TMNAME)), STRING(IDS_DATABASE_TABLE_MEM_TMNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_TCNAME)), STRING(IDS_DATABASE_TABLE_MEM_TCNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_DESCR)), STRING(IDS_DATABASE_TABLE_MEM_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_PAGE)), STRING(IDS_DATABASE_TABLE_MEM_PAGE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_ADDRESS)), STRING(IDS_DATABASE_TABLE_MEM_ADDRESS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_BITOFF)), STRING(IDS_DATABASE_TABLE_MEM_BITOFF_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_WIDTH)), STRING(IDS_DATABASE_TABLE_MEM_WIDTH_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_TMNAME)), Varchar(GetOBProcessorMemoryAreaBlockTMParameterLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_TCNAME)), Varchar(GetOBProcessorMemoryAreaBlockTCParameterLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_DESCR)), Varchar(GetOBProcessorMemoryAreaBlockDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_PAGE)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_ADDRESS)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_BITOFF)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_MEM), STRING(IDS_DATABASE_TABLE_MEM_WIDTH)), Integer());
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructOBProcessorMemoryAreaChecksumsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorMemoryAreaChecksumsTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseOBProcessor *pDatabaseOBProcessor, INT nCount, CStringArray &szContents) CONST
{
	UINT  nRange[2][2];
	UINT  nAddress[2][3];
	CString  szMemoryCheck;
	CStringTools  cStringTools;
	CDatabaseOBProcessorMemoryArea  *pDatabaseOBProcessorMemoryArea;
	CDatabaseOBProcessorMemoryAreaCheckSum  *pDatabaseOBProcessorMemoryAreaCheckSum;

	for (GetOBProcessorMemoryAreaCheckSumAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), szContents.RemoveAll(); (pDatabaseOBProcessorMemoryAreaCheckSum = ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(max(pView->GetTableFloatingAlignment(STRING(IDS_DATABASE_TABLE_CRC)) - 1, 0)))) ? new CDatabaseOBProcessorMemoryAreaCheckSum : (CDatabaseOBProcessorMemoryAreaCheckSum *)NULL) && pDatabaseOBProcessorMemoryArea->GetCheckSum(pDatabaseOBProcessorMemoryAreaCheckSum) >= 0; )
	{
		szMemoryCheck = (pDatabaseOBProcessorMemoryAreaCheckSum->GetDestination() != (UINT)-1) ? cStringTools.ConvertUIntToString(pDatabaseOBProcessorMemoryAreaCheckSum->GetDestination(), 16) : EMPTYSTRING;
		szMemoryCheck += (pDatabaseOBProcessorMemoryAreaCheckSum->GetLength() > 0) ? (TAB + cStringTools.ConvertUIntToString(pDatabaseOBProcessorMemoryAreaCheckSum->GetLength())) : CString(TAB);
		szMemoryCheck += (pDatabaseOBProcessorMemoryAreaCheckSum->GetAddressRange(nAddress[0][0], nAddress[0][1], nAddress[0][2]) && nAddress[0][0] != (UINT)-1) ? (TAB + cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16)) : CString(TAB);
		szMemoryCheck += (pDatabaseOBProcessorMemoryAreaCheckSum->GetAddressRange(nAddress[0][0], nAddress[0][1], nAddress[0][2]) && nAddress[0][1] != (UINT)-1) ? (TAB + cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16)) : CString(TAB);
		szMemoryCheck += (pDatabaseOBProcessorMemoryAreaCheckSum->GetAddressRange(nAddress[0][0], nAddress[0][1], nAddress[0][2]) && nAddress[0][2] != (UINT)-1) ? (TAB + cStringTools.ConvertUIntToPaddedString(nAddress[0][2], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16)) : CString(TAB);
		szMemoryCheck += (pDatabaseOBProcessorMemoryAreaCheckSum->GetSeed() != (UINT)-1) ? (TAB + cStringTools.ConvertUIntToString(pDatabaseOBProcessorMemoryAreaCheckSum->GetSeed(), 16)) : CString(TAB);
		szContents.Add(szMemoryCheck);
		break;
	}
	delete pDatabaseOBProcessorMemoryAreaCheckSum;
	return((!szContents.GetSize()) ? ConstructOBProcessorMemoryAreaChecksumsTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorMemoryAreaChecksumsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseOBProcessor  *pDatabaseOBProcessor;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructOBProcessorMemoryAreaChecksumsTableContents(pView, szContents); (pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszName))); )
	{
		ConstructOBProcessorMemoryAreaChecksumsTableContents(pView, pDatabaseOBProcessor, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_DEST)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_LENGTH)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_PAGE)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_START)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_END)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_SEED)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_DEST)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_DEST)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_LENGTH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_LENGTH)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_PAGE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_PAGE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_START)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_START)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_END)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_END)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_SEED)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_SEED)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_DEST)), STRING(IDS_DATABASE_TABLE_CRC_DEST_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_LENGTH)), STRING(IDS_DATABASE_TABLE_CRC_LENGTH_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_PAGE)), STRING(IDS_DATABASE_TABLE_CRC_PAGE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_START)), STRING(IDS_DATABASE_TABLE_CRC_START_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_END)), STRING(IDS_DATABASE_TABLE_CRC_END_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_SEED)), STRING(IDS_DATABASE_TABLE_CRC_SEED_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_DEST)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_LENGTH)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_PAGE)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_START)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_END)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CRC), STRING(IDS_DATABASE_TABLE_CRC_SEED)), Integer());
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructOBProcessorMemoryAreaCatalogueEntriesTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorMemoryAreaCatalogueEntriesTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseOBProcessor *pDatabaseOBProcessor, INT nCount, CStringArray &szContents) CONST
{
	INT  nCatalogueEntry;
	INT  nCatalogueEntries;
	CString  szCatalogueEntry;
	CDatabaseOBProcessorMemoryArea  *pDatabaseOBProcessorMemoryArea;
	CDatabaseOBProcessorMemoryAreaCatalogue  *pDatabaseOBProcessorMemoryAreaCatalogue;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pDatabaseOBProcessorMemoryAreaCatalogueEntry;

	for (szContents.RemoveAll(); (pDatabaseOBProcessorMemoryAreaCatalogue = ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(max(pView->GetTableFloatingAlignment(STRING(IDS_DATABASE_TABLE_CAT)) - 1, 0)))) ? new CDatabaseOBProcessorMemoryAreaCatalogue : (CDatabaseOBProcessorMemoryAreaCatalogue *)NULL) && pDatabaseOBProcessorMemoryArea->GetCatalogue(pDatabaseOBProcessorMemoryAreaCatalogue); )
	{
		for (nCatalogueEntry = 0, nCatalogueEntries = (nCount >= 0) ? (INT)min(pDatabaseOBProcessorMemoryAreaCatalogue->GetSize(), nCount) : (INT)pDatabaseOBProcessorMemoryAreaCatalogue->GetSize(); nCatalogueEntry < nCatalogueEntries; nCatalogueEntry++)
		{
			if ((pDatabaseOBProcessorMemoryAreaCatalogueEntry = pDatabaseOBProcessorMemoryAreaCatalogue->GetAt(nCatalogueEntry)))
			{
				szCatalogueEntry = pDatabaseOBProcessorMemoryAreaCatalogueEntry->GetName();
				szCatalogueEntry += TAB + pDatabaseOBProcessorMemoryAreaCatalogueEntry->GetDescription();
				szCatalogueEntry += TAB + pDatabaseOBProcessorMemoryAreaCatalogueEntry->GetVersion();
				szCatalogueEntry += TAB + pDatabaseOBProcessorMemoryAreaCatalogueEntry->GetDate();
				szCatalogueEntry += TAB + pDatabaseOBProcessorMemoryAreaCatalogueEntry->GetTime();
				szCatalogueEntry += TAB + pDatabaseOBProcessorMemoryAreaCatalogueEntry->GetLocation();
				szCatalogueEntry += TAB + TranslateOBProcessorMemoryAreaCatalogueEntryFlag(pDatabaseOBProcessorMemoryAreaCatalogueEntry->GetAttributes(), FALSE);
				szContents.Add(szCatalogueEntry);
			}
		}
		break;
	}
	delete pDatabaseOBProcessorMemoryAreaCatalogue;
	return((!szContents.GetSize()) ? ConstructOBProcessorMemoryAreaCatalogueEntriesTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorMemoryAreaCatalogueEntriesTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseOBProcessor  *pDatabaseOBProcessor;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructOBProcessorMemoryAreaChecksumsTableContents(pView, szContents); (pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszName))); )
	{
		ConstructOBProcessorMemoryAreaChecksumsTableContents(pView, pDatabaseOBProcessor, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_ID)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_VERSION)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_DATE)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_TIME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_LOCATION)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_COMPLETE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_ID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_ID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_VERSION)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_VERSION)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_DATE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_DATE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_TIME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_TIME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_LOCATION)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_LOCATION)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_COMPLETE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_COMPLETE)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_ID)), STRING(IDS_DATABASE_TABLE_CAT_ID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_DESCR)), STRING(IDS_DATABASE_TABLE_CAT_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_VERSION)), STRING(IDS_DATABASE_TABLE_CAT_VERSION_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_DATE)), STRING(IDS_DATABASE_TABLE_CAT_DATE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_TIME)), STRING(IDS_DATABASE_TABLE_CAT_TIME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_LOCATION)), STRING(IDS_DATABASE_TABLE_CAT_LOCATION_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_COMPLETE)), STRING(IDS_DATABASE_TABLE_CAT_COMPLETE_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_ID)), Varchar(GetOBProcessorMemoryAreaCatalogueEntryIDLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_DESCR)), Varchar(GetOBProcessorMemoryAreaCatalogueEntryDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_VERSION)), Varchar(GetOBProcessorMemoryAreaCatalogueEntryVersionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_DATE)), Varchar(GetOBProcessorMemoryAreaCatalogueEntryDateLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_TIME)), Varchar(GetOBProcessorMemoryAreaCatalogueEntryTimeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_LOCATION)), Varchar(GetOBProcessorMemoryAreaCatalogueEntryLocationLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAT), STRING(IDS_DATABASE_TABLE_CAT_COMPLETE)), Char(GetOBProcessorMemoryAreaCatalogueEntryFlagLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructOBProcessorMemoryMasterImagesTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorMemoryMasterImagesTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseOBProcessorMemoryImage *pDatabaseOBProcessorMemoryImage, INT nCount, CStringArray &szContents) CONST
{
	INT  nImageBlock;
	INT  nImageBlocks;
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	CString  szImageBlock;
	CStringTools  cStringTools;
	CDatabaseOBProcessorMemoryImageBlock  *pDatabaseOBProcessorMemoryImageBlock;

	for (nImageBlock = 0, nImageBlocks = (nCount >= 0) ? (INT)min(pDatabaseOBProcessorMemoryImage->GetSize(), nCount) : (INT)pDatabaseOBProcessorMemoryImage->GetSize(), GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), szContents.RemoveAll(); nImageBlock < nImageBlocks; nImageBlock++)
	{
		if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nImageBlock)))
		{
			szImageBlock = pDatabaseOBProcessorMemoryImageBlock->GetVersion();
			szImageBlock += (pDatabaseOBProcessorMemoryImageBlock->GetAddress(nAddress[0][0], nAddress[0][1]) && nAddress[0][0] != (UINT)-1) ? (TAB + cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), 16)) : CString(TAB);
			szImageBlock += (pDatabaseOBProcessorMemoryImageBlock->GetAddress(nAddress[0][0], nAddress[0][1]) && nAddress[0][1] != (UINT)-1) ? (TAB + cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16)) : CString(TAB);
			szImageBlock += TAB + pDatabaseOBProcessorMemoryImageBlock->GetData();
			szContents.Add(szImageBlock);
		}
	}
	return((!szContents.GetSize()) ? ConstructOBProcessorMemoryMasterImagesTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorMemoryMasterImagesTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructOBProcessorMemoryMasterImagesTableContents(pView, szContents); (pDatabaseOBProcessorMemoryImage = pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pszName))); )
	{
		ConstructOBProcessorMemoryMasterImagesTableContents(pView, pDatabaseOBProcessorMemoryImage, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_VERSION)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_TOP);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_PAGE)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_TOP);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_ADDRESS)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_TOP);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_DATA)), TAS_TYPE_MULTILINEEDIT | TAS_ALIGN_LEFT | TAS_ALIGN_TOP);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_VERSION)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_VERSION)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_PAGE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_PAGE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_ADDRESS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_ADDRESS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_DATA)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_DATA)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_VERSION)), STRING(IDS_DATABASE_TABLE_IMGP_VERSION_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_PAGE)), STRING(IDS_DATABASE_TABLE_IMGP_PAGE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_ADDRESS)), STRING(IDS_DATABASE_TABLE_IMGP_ADDRESS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_DATA)), STRING(IDS_DATABASE_TABLE_IMGP_DATA_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_VERSION)), Varchar(GetOBProcessorMemoryImageBlockVersionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_PAGE)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_ADDRESS)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMGP), STRING(IDS_DATABASE_TABLE_IMGP_DATA)), Text());
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructOBProcessorMemoryImagesTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorMemoryImagesTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseOBProcessor *pDatabaseOBProcessor, INT nCount, CStringArray &szContents) CONST
{
	INT  nImageBlock;
	INT  nImageBlocks;
	UINT  nRange[2][2];
	UINT  nAddress[2][2];
	CString  szImageBlock;
	CStringTools  cStringTools;
	CDatabaseOBProcessorMemoryArea  *pDatabaseOBProcessorMemoryArea;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;
	CDatabaseOBProcessorMemoryImageBlock  *pDatabaseOBProcessorMemoryImageBlock;

	for (nImageBlock = 0, nImageBlocks = ((pDatabaseOBProcessorMemoryImage = ((pDatabaseOBProcessorMemoryArea = pDatabaseOBProcessor->GetAt(max(pView->GetTableFloatingAlignment(STRING(IDS_DATABASE_TABLE_IMG)) - 1, 0))) && (pDatabaseOBProcessorMemoryArea->GetAttributes() & OBPROCESSORMEMORYAREA_TYPE_IMAGE)) ? new CDatabaseOBProcessorMemoryImage : (CDatabaseOBProcessorMemoryImage *)NULL) && pDatabaseOBProcessorMemoryArea->GetMemoryImage(pDatabaseOBProcessorMemoryImage)) ? (INT)pDatabaseOBProcessorMemoryImage->GetSize() : 0, GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]), szContents.RemoveAll(); nImageBlock < nImageBlocks; nImageBlock++)
	{
		if ((pDatabaseOBProcessorMemoryImageBlock = pDatabaseOBProcessorMemoryImage->GetAt(nImageBlock)))
		{
			szImageBlock = pDatabaseOBProcessorMemoryImageBlock->GetVersion();
			szImageBlock += (pDatabaseOBProcessorMemoryImageBlock->GetAddress(nAddress[0][0], nAddress[0][1]) && nAddress[0][0] != (UINT)-1) ? (TAB + cStringTools.ConvertUIntToPaddedString(nAddress[0][0], 4 * ((nRange[0][1] - nRange[0][0]) / 0x10000 + 1), 16)) : CString(TAB);
			szImageBlock += (pDatabaseOBProcessorMemoryImageBlock->GetAddress(nAddress[0][0], nAddress[0][1]) && nAddress[0][1] != (UINT)-1) ? (TAB + cStringTools.ConvertUIntToPaddedString(nAddress[0][1], 4 * ((nRange[1][1] - nRange[1][0]) / 0x10000 + 1), 16)) : CString(TAB);
			szImageBlock += TAB + pDatabaseOBProcessorMemoryImageBlock->GetData();
			szContents.Add(szImageBlock);
		}
	}
	delete pDatabaseOBProcessorMemoryImage;
	return((!szContents.GetSize()) ? ConstructOBProcessorMemoryImagesTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorMemoryImagesTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseOBProcessor  *pDatabaseOBProcessor;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructOBProcessorMemoryImagesTableContents(pView, szContents); (pDatabaseOBProcessor = pView->m_pDatabaseOBProcessors[0].GetAt(pView->m_pDatabaseOBProcessors[0].Find(pszName))); )
	{
		ConstructOBProcessorMemoryImagesTableContents(pView, pDatabaseOBProcessor, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_VERSION)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_TOP);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_PAGE)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_TOP);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_ADDRESS)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_TOP);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_DATA)), TAS_TYPE_MULTILINEEDIT | TAS_ALIGN_LEFT | TAS_ALIGN_TOP);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_VERSION)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_VERSION)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_PAGE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_PAGE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_ADDRESS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_ADDRESS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_DATA)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_DATA)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_VERSION)), STRING(IDS_DATABASE_TABLE_IMG_VERSION_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_PAGE)), STRING(IDS_DATABASE_TABLE_IMG_PAGE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_ADDRESS)), STRING(IDS_DATABASE_TABLE_IMG_ADDRESS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_DATA)), STRING(IDS_DATABASE_TABLE_IMG_DATA_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_VERSION)), Varchar(GetOBProcessorMemoryImageBlockVersionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_PAGE)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_ADDRESS)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_IMG), STRING(IDS_DATABASE_TABLE_IMG_DATA)), Text());
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructOBProcessorMemoryImagesAssociationTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorMemoryImagesAssociationTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseOBProcessorMemoryImage *pDatabaseOBProcessorMemoryImage, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(pDatabaseOBProcessorMemoryImage->GetName());
	return((!szContents.GetSize()) ? ConstructOBProcessorMemoryImagesAssociationTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructOBProcessorMemoryImagesAssociationTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructOBProcessorMemoryImagesAssociationTableContents(pView, szContents); (pDatabaseOBProcessorMemoryImage = pView->m_pDatabaseOBProcessorMemoryImages[0].GetAt(pView->m_pDatabaseOBProcessorMemoryImages[0].Find(pszName))); )
	{
		ConstructOBProcessorMemoryImagesAssociationTableContents(pView, pDatabaseOBProcessorMemoryImage, szContents);
		break;
	}
	nFormats.Add(TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_VCENTER);
	nIDs.Add(TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PIMG), STRING(IDS_DATABASE_TABLE_PIMG_MNAME)));
	szDescriptions.Add(STRING(IDS_DATABASE_TABLE_PIMG_MNAME_COMMENTS));
	szDataTypes.Add(Varchar(GetOBProcessorMasterImageLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMParameterTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_LDESC)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_UNIT)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NATURE)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CATEG)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TYPE)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CODING)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_WIDTH)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_PARVAL)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_VALID)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_APPLC)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_MONIT)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTER)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CALTABLES)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DRVEXP)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TRGTYP)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_EXPTRG)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURS)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURU)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTS)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTU)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OBSPAR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OPINFO)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_USECON)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTM)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ALTM)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ASTC)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMParameterTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTMParameter *pDatabaseTMParameter, CStringArray &szContents) CONST
{
	CString  szParameter;
	CStringTools  cStringTools;
	CDatabaseTMParameter  *pParameter;

	for (szParameter = pDatabaseTMParameter->GetValidityParameter(), szContents.RemoveAll(); (pParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pDatabaseTMParameter->GetValidityParameter()))); )
	{
		szParameter.Format(STRING(IDS_DATABASE_TABLE_PCF_PARAMETERFORMAT), (LPCTSTR)pParameter->GetTag(), (LPCTSTR)pParameter->GetDescription());
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)), pDatabaseTMParameter->GetTag());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DESCR)), pDatabaseTMParameter->GetDescription());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_LDESC)), pDatabaseTMParameter->GetDetails());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_UNIT)), pDatabaseTMParameter->GetUnit());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NATURE)), TranslateTMParameterNature(pDatabaseTMParameter->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CATEG)), TranslateTMParameterCategory(pDatabaseTMParameter->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TYPE)), TranslateTMParameterType(pDatabaseTMParameter->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CODING)), TranslateTMParameterCoding(pDatabaseTMParameter->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_WIDTH)), (pDatabaseTMParameter->GetWidth() > 0) ? cStringTools.ConvertIntToString(pDatabaseTMParameter->GetWidth()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_PARVAL)), pDatabaseTMParameter->GetConstValueAsText());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_VALID)), szParameter);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_APPLC)), pDatabaseTMParameter->GetValidityConditions());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_MONIT)), pDatabaseTMParameter->GetDangerConditions());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTER)), TranslateTMParameterInterpretation(pDatabaseTMParameter->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DRVEXP)), pDatabaseTMParameter->GetDerivationExpression());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TRGTYP)), TranslateTMParameterTriggerType(pDatabaseTMParameter->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_EXPTRG)), pDatabaseTMParameter->GetTriggerExpression());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURS)), pDatabaseTMParameter->GetSourceSubSystem());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURU)), pDatabaseTMParameter->GetSourceEquipment());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTS)), pDatabaseTMParameter->GetRouterSubSystem());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTU)), pDatabaseTMParameter->GetRouterEquipment());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OBSPAR)), TranslateTMParameterOBSType(pDatabaseTMParameter->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OPINFO)), pDatabaseTMParameter->GetOperationalInfo());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_USECON)), TranslateTMParameterConsistencyChecksFlag(pDatabaseTMParameter->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTM)), TranslateTMParameterInterrogationInstruction(pDatabaseTMParameter->GetInterrogationInstruction()));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ALTM)), pDatabaseTMParameter->GetRelatedParameter());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ASTC)), pDatabaseTMParameter->GetAssociatedTelecommands());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_STATUS)), TranslateTMParameterStatus(pDatabaseTMParameter->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMParameterTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszTag, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTMParameter  *pDatabaseTMParameter;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMParameterTableContents(pView, szContents); (pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszTag))); )
	{
		ConstructTMParameterTableContents(pView, pDatabaseTMParameter, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)), CString(STRING(IDS_DATABASE_TABLE_PCF_NAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_NAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DESCR)), CString(STRING(IDS_DATABASE_TABLE_PCF_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_LDESC)), CString(STRING(IDS_DATABASE_TABLE_PCF_LDESC)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_LDESC_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_LDESC))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_UNIT)), CString(STRING(IDS_DATABASE_TABLE_PCF_UNIT)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_UNIT_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_UNIT))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NATURE)), CString(STRING(IDS_DATABASE_TABLE_PCF_NATURE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_NATURE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NATURE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CATEG)), CString(STRING(IDS_DATABASE_TABLE_PCF_CATEG)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_CATEG_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CATEG))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TYPE)), CString(STRING(IDS_DATABASE_TABLE_PCF_TYPE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_TYPE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TYPE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CODING)), CString(STRING(IDS_DATABASE_TABLE_PCF_CODING)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_CODING_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CODING))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_WIDTH)), CString(STRING(IDS_DATABASE_TABLE_PCF_WIDTH)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_WIDTH_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_WIDTH))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_PARVAL)), CString(STRING(IDS_DATABASE_TABLE_PCF_PARVAL)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_PARVAL_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_PARVAL))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_VALID)), CString(STRING(IDS_DATABASE_TABLE_PCF_VALID)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_VALID_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_VALID))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_APPLC)), CString(STRING(IDS_DATABASE_TABLE_PCF_APPLC)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_APPLC_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_APPLC))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_MONIT)), CString(STRING(IDS_DATABASE_TABLE_PCF_MONIT)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_MONIT_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_MONIT))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTER)), CString(STRING(IDS_DATABASE_TABLE_PCF_INTER)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_INTER_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTER))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CALTABLES)), CString(STRING(IDS_DATABASE_TABLE_PCF_CALTABLES)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_CALTABLES_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CALTABLES))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES)), CString(STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DRVEXP)), CString(STRING(IDS_DATABASE_TABLE_PCF_DRVEXP)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_DRVEXP_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DRVEXP))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TRGTYP)), CString(STRING(IDS_DATABASE_TABLE_PCF_TRGTYP)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_TRGTYP_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TRGTYP))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_EXPTRG)), CString(STRING(IDS_DATABASE_TABLE_PCF_EXPTRG)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_EXPTRG_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_EXPTRG))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURS)), CString(STRING(IDS_DATABASE_TABLE_PCF_SOURS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_SOURS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURS))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURU)), CString(STRING(IDS_DATABASE_TABLE_PCF_SOURU)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_SOURU_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURU))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTS)), CString(STRING(IDS_DATABASE_TABLE_PCF_ROUTS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_ROUTS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTS))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTU)), CString(STRING(IDS_DATABASE_TABLE_PCF_ROUTU)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_ROUTU_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTU))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OBSPAR)), CString(STRING(IDS_DATABASE_TABLE_PCF_OBSPAR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_OBSPAR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OBSPAR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OPINFO)), CString(STRING(IDS_DATABASE_TABLE_PCF_OPINFO)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_OPINFO_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OPINFO))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_USECON)), CString(STRING(IDS_DATABASE_TABLE_PCF_USECON)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_USECON_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_USECON))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTM)), CString(STRING(IDS_DATABASE_TABLE_PCF_INTM)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_INTM_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTM))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ALTM)), CString(STRING(IDS_DATABASE_TABLE_PCF_ALTM)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_ALTM_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ALTM))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ASTC)), CString(STRING(IDS_DATABASE_TABLE_PCF_ASTC)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_ASTC_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ASTC))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_STATUS)), CString(STRING(IDS_DATABASE_TABLE_PCF_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PCF_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_LDESC)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_UNIT)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NATURE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CATEG)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CODING)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_WIDTH)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_PARVAL)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_VALID)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_APPLC)), TAS_TYPE_MULTILINEEDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_MONIT)), TAS_TYPE_MULTILINEEDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTER)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CALTABLES)), TAS_TYPE_SUBTABLE);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES)), TAS_TYPE_SUBTABLE);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DRVEXP)), TAS_TYPE_MULTILINEEDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TRGTYP)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_EXPTRG)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURS)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURU)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTS)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTU)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OBSPAR)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OPINFO)), TAS_TYPE_MULTILINEEDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_USECON)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTM)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ALTM)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ASTC)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_LDESC)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_LDESC)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_UNIT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_UNIT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NATURE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NATURE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CATEG)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CATEG)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CODING)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CODING)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_WIDTH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_WIDTH)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_PARVAL)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_PARVAL)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_VALID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_VALID)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_APPLC)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_APPLC)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_MONIT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_MONIT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTER)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTER)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CALTABLES)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CALTABLES)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DRVEXP)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DRVEXP)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TRGTYP)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TRGTYP)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_EXPTRG)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_EXPTRG)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURU)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURU)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTU)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTU)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OBSPAR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OBSPAR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OPINFO)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OPINFO)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_USECON)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_USECON)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTM)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTM)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ALTM)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ALTM)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ASTC)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ASTC)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)), STRING(IDS_DATABASE_TABLE_PCF_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DESCR)), STRING(IDS_DATABASE_TABLE_PCF_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_LDESC)), STRING(IDS_DATABASE_TABLE_PCF_LDESC_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_UNIT)), STRING(IDS_DATABASE_TABLE_PCF_UNIT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NATURE)), STRING(IDS_DATABASE_TABLE_PCF_NATURE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CATEG)), STRING(IDS_DATABASE_TABLE_PCF_CATEG_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TYPE)), STRING(IDS_DATABASE_TABLE_PCF_TYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CODING)), STRING(IDS_DATABASE_TABLE_PCF_CODING_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_WIDTH)), STRING(IDS_DATABASE_TABLE_PCF_WIDTH_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_PARVAL)), STRING(IDS_DATABASE_TABLE_PCF_PARVAL_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_VALID)), STRING(IDS_DATABASE_TABLE_PCF_VALID_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_APPLC)), STRING(IDS_DATABASE_TABLE_PCF_APPLC_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_MONIT)), STRING(IDS_DATABASE_TABLE_PCF_MONIT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTER)), STRING(IDS_DATABASE_TABLE_PCF_INTER_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CALTABLES)), STRING(IDS_DATABASE_TABLE_PCF_CALTABLES_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES)), STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DRVEXP)), STRING(IDS_DATABASE_TABLE_PCF_DRVEXP_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TRGTYP)), STRING(IDS_DATABASE_TABLE_PCF_TRGTYP_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_EXPTRG)), STRING(IDS_DATABASE_TABLE_PCF_EXPTRG_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURS)), STRING(IDS_DATABASE_TABLE_PCF_SOURS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURU)), STRING(IDS_DATABASE_TABLE_PCF_SOURU_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTS)), STRING(IDS_DATABASE_TABLE_PCF_ROUTS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTU)), STRING(IDS_DATABASE_TABLE_PCF_ROUTU_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OBSPAR)), STRING(IDS_DATABASE_TABLE_PCF_OBSPAR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OPINFO)), STRING(IDS_DATABASE_TABLE_PCF_OPINFO_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_USECON)), STRING(IDS_DATABASE_TABLE_PCF_USECON_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTM)), STRING(IDS_DATABASE_TABLE_PCF_INTM_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ALTM)), STRING(IDS_DATABASE_TABLE_PCF_ALTM_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ASTC)), STRING(IDS_DATABASE_TABLE_PCF_ASTC_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_STATUS)), STRING(IDS_DATABASE_TABLE_PCF_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NAME)), Varchar(GetTMParameterTagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DESCR)), Varchar(GetTMParameterDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_LDESC)), Varchar(GetTMParameterDetailsLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_UNIT)), Varchar(GetTMParameterUnitLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_NATURE)), Char(GetTMParameterNatureLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CATEG)), Char(GetTMParameterCategoryLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TYPE)), Varchar(GetTMParameterTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CODING)), Char(GetTMParameterCodingLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_WIDTH)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_PARVAL)), Varchar(GetTMParameterConstValueLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_VALID)), Char(GetTMParameterValidityParameterLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_APPLC)), Varchar(GetTMParameterValidityConditionsLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_MONIT)), Varchar(GetTMParameterDangerConditionsLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTER)), Char(GetTMParameterInterpretationLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_CALTABLES)), NotApplicable());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OOLTABLES)), NotApplicable());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_DRVEXP)), Text());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_TRGTYP)), Char(GetTMParameterTriggerTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_EXPTRG)), Varchar(GetTMParameterTriggerExpressionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURS)), Varchar(GetTMParameterSourceSubSystemLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_SOURU)), Varchar(GetTMParameterSourceEquipmentLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTS)), Varchar(GetTMParameterRouterSubSystemLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ROUTU)), Varchar(GetTMParameterRouterEquipmentLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OBSPAR)), Char(GetTMParameterOBSTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_OPINFO)), Varchar(GetTMParameterOperationalInfoLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_USECON)), Char(GetTMParameterConsistenceChecksFlagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_INTM)), Varchar(GetTMParameterInterrogationInstructionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ALTM)), Varchar(GetTMParameterRelatedParameterLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_ASTC)), Varchar(GetTMParameterAssociatedTelecommandsLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCF), STRING(IDS_DATABASE_TABLE_PCF_STATUS)), Char(GetTMParameterStatusLength()));
	szDescriptions.InsertAt(0, STRING(IDS_DATABASE_TABLE_PCF_COMMENTS));
	szDataTypes.InsertAt(0, NotApplicable());
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMNumCalCurveTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMNumCalCurveTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTMNumCalTable *pDatabaseTMNumCalTable, CStringArray &szContents) CONST
{
	CStringTools  cStringTools;

	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), pDatabaseTMNumCalTable->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)), pDatabaseTMNumCalTable->GetDescription());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)), pDatabaseTMNumCalTable->GetUnit());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)), (pDatabaseTMNumCalTable->GetPoints() >= 0) ? cStringTools.ConvertIntToString(pDatabaseTMNumCalTable->GetPoints()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)), TranslateTMNumCalTableStatus(pDatabaseTMNumCalTable->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMNumCalCurveTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMNumCalCurveTableContents(pView, szContents); (pDatabaseTMNumCalTable = pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find(pszName))); )
	{
		ConstructTMNumCalCurveTableContents(pView, pDatabaseTMNumCalTable, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), CString(STRING(IDS_DATABASE_TABLE_CAL_NAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CAL_NAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)), CString(STRING(IDS_DATABASE_TABLE_CAL_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CAL_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)), CString(STRING(IDS_DATABASE_TABLE_CAL_UNIT)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CAL_UNIT_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)), CString(STRING(IDS_DATABASE_TABLE_CAL_NBPNT)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CAL_NBPNT_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)), CString(STRING(IDS_DATABASE_TABLE_CAL_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CAL_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), STRING(IDS_DATABASE_TABLE_CAL_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)), STRING(IDS_DATABASE_TABLE_CAL_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)), STRING(IDS_DATABASE_TABLE_CAL_UNIT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)), STRING(IDS_DATABASE_TABLE_CAL_NBPNT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)), STRING(IDS_DATABASE_TABLE_CAL_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), Varchar(GetTMNumCalTableNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)), Varchar(GetTMNumCalTableDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)), Varchar(GetTMNumCalTableUnitLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)), Char(GetTMNumCalTableStatusLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMNumCalCurvePointsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMNumCalCurvePointsTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTMNumCalTable *pDatabaseTMNumCalTable, INT nCount, CStringArray &szContents) CONST
{
	INT  nPoint;
	INT  nPoints;
	CString  szPoint;
	CStringTools  cStringTools;
	CDatabaseTMNumCalPoint  *pDatabaseTMNumCalPoint;

	for (nPoint = 0, nPoints = (nCount >= 0) ? (INT)min(pDatabaseTMNumCalTable->GetSize(), nCount) : (INT)pDatabaseTMNumCalTable->GetSize(), szContents.RemoveAll(); nPoint < nPoints; nPoint++)
	{
		if ((pDatabaseTMNumCalPoint = pDatabaseTMNumCalTable->GetAt(nPoint)) != (CDatabaseTMNumCalPoint *)NULL)
		{
			szPoint = (!isnan(pDatabaseTMNumCalPoint->GetX())) ? cStringTools.ConvertFloatToString(pDatabaseTMNumCalPoint->GetX()) : EMPTYSTRING;
			szPoint += (!isnan(pDatabaseTMNumCalPoint->GetY())) ? (TAB + cStringTools.ConvertFloatToString(pDatabaseTMNumCalPoint->GetY())) : CString(TAB);
			szContents.Add(szPoint);
		}
	}
	return((!szContents.GetSize()) ? ConstructTMNumCalCurvePointsTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMNumCalCurvePointsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMNumCalCurvePointsTableContents(pView, szContents); (pDatabaseTMNumCalTable = pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find(pszName))); )
	{
		ConstructTMNumCalCurvePointsTableContents(pView, pDatabaseTMNumCalTable, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_XVAL)), TAS_TYPE_DECNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_YVAL)), TAS_TYPE_DECNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_XVAL)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_XVAL)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_YVAL)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_YVAL)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_XVAL)), STRING(IDS_DATABASE_TABLE_CALP_XVAL_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_YVAL)), STRING(IDS_DATABASE_TABLE_CALP_YVAL_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_XVAL)), Numeric(10, 3));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_YVAL)), Numeric(10, 3));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMNumCalCurveAssociationTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMNumCalCurveAssociationTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTMParameter *pDatabaseTMParameter, INT nCount, CStringArray &szContents) CONST
{
	INT  nTable;
	INT  nTables;
	CString  szParameter;
	CStringArray  szCalTables[2];
	CDatabaseTMParameter  *pParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;

	for (nTable = 0, nTables = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]) : 0, nTables = (nCount >= 0) ? min(nCount, nTables) : nTables, szContents.RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pDatabaseTMNumCalTable = pView->m_pDatabaseTMNumCalTables[0].GetAt(pView->m_pDatabaseTMNumCalTables[0].Find(szCalTables[0].GetAt(nTable)))))
		{
			for (szContents.Add(pDatabaseTMNumCalTable->GetName()); (pParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(szCalTables[1].GetAt(nTable)))); )
			{
				szParameter.Format(STRING(IDS_DATABASE_TABLE_PCAL_PARAMETERFORMAT), (LPCTSTR)pParameter->GetTag(), (LPCTSTR)pParameter->GetDescription());
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szParameter);
				break;
			}
			if (szContents.GetAt(szContents.GetUpperBound()) == pDatabaseTMNumCalTable->GetName() && !szCalTables[1].GetAt(nTable).IsEmpty())
			{
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szCalTables[1].GetAt(nTable));
				continue;
			}
		}
		else
		{
			for (szContents.Add(szCalTables[0].GetAt(nTable)); (pParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(szCalTables[1].GetAt(nTable)))); )
			{
				szParameter.Format(STRING(IDS_DATABASE_TABLE_PCAL_PARAMETERFORMAT), (LPCTSTR)pParameter->GetTag(), (LPCTSTR)pParameter->GetDescription());
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szParameter);
				break;
			}
			if (!szContents.GetAt(szContents.GetUpperBound()).IsEmpty() && !szCalTables[1].GetAt(nTable).IsEmpty())
			{
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szCalTables[1].GetAt(nTable));
				continue;
			}
		}
	}
	return((!szContents.GetSize()) ? ConstructTMNumCalCurveAssociationTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMNumCalCurveAssociationTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszTag, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTMParameter  *pDatabaseTMParameter;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMNumCalCurveAssociationTableContents(pView, szContents); (pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszTag))); )
	{
		ConstructTMNumCalCurveAssociationTableContents(pView, pDatabaseTMParameter, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCAL), STRING(IDS_DATABASE_TABLE_PCAL_NAME)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCAL), STRING(IDS_DATABASE_TABLE_PCAL_VALID)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCAL), STRING(IDS_DATABASE_TABLE_PCAL_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCAL), STRING(IDS_DATABASE_TABLE_PCAL_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCAL), STRING(IDS_DATABASE_TABLE_PCAL_VALID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PCAL), STRING(IDS_DATABASE_TABLE_PCAL_VALID)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCAL), STRING(IDS_DATABASE_TABLE_PCAL_NAME)), STRING(IDS_DATABASE_TABLE_PCAL_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCAL), STRING(IDS_DATABASE_TABLE_PCAL_VALID)), STRING(IDS_DATABASE_TABLE_PCAL_VALID_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCAL), STRING(IDS_DATABASE_TABLE_PCAL_NAME)), Varchar(GetTMNumCalTableNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PCAL), STRING(IDS_DATABASE_TABLE_PCAL_VALID)), Varchar(GetTMParameterTagLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMTxtCalCurveTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMTxtCalCurveTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTMTxtCalTable *pDatabaseTMTxtCalTable, CStringArray &szContents) CONST
{
	CStringTools  cStringTools;

	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), pDatabaseTMTxtCalTable->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)), pDatabaseTMTxtCalTable->GetDescription());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)), (pDatabaseTMTxtCalTable->GetPoints() >= 0) ? cStringTools.ConvertIntToString(pDatabaseTMTxtCalTable->GetPoints()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)), TranslateTMTxtCalTableStatus(pDatabaseTMTxtCalTable->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMTxtCalCurveTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMTxtCalCurveTableContents(pView, szContents); (pDatabaseTMTxtCalTable = pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find(pszName))); )
	{
		ConstructTMTxtCalCurveTableContents(pView, pDatabaseTMTxtCalTable, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), CString(STRING(IDS_DATABASE_TABLE_TXF_NAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TXF_NAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)), CString(STRING(IDS_DATABASE_TABLE_TXF_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TXF_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)), CString(STRING(IDS_DATABASE_TABLE_TXF_NBTXT)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TXF_NBTXT_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)), CString(STRING(IDS_DATABASE_TABLE_TXF_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TXF_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), STRING(IDS_DATABASE_TABLE_TXF_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)), STRING(IDS_DATABASE_TABLE_TXF_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)), STRING(IDS_DATABASE_TABLE_TXF_NBTXT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)), STRING(IDS_DATABASE_TABLE_TXF_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), Varchar(GetTMTxtCalTableNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)), Varchar(GetTMTxtCalTableDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)), Char(GetTMTxtCalTableStatusLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMTxtCalCurvePointsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMTxtCalCurvePointsTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTMTxtCalTable *pDatabaseTMTxtCalTable, INT nCount, CStringArray &szContents) CONST
{
	INT  nPoint;
	INT  nPoints;
	double  fX[2];
	CString  szText;
	CString  szPoint;
	CStringTools  cStringTools;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;

	for (nPoint = 0, nPoints = (nCount >= 0) ? (INT)min(pDatabaseTMTxtCalTable->GetSize(), nCount) : (INT)pDatabaseTMTxtCalTable->GetSize(), szContents.RemoveAll(); nPoint < nPoints; nPoint++)
	{
		if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt(nPoint)))
		{
			if (pDatabaseTMTxtCalPoint->GetRange(fX[0], fX[1], szText))
			{
				szPoint = (!isnan(fX[0])) ? cStringTools.ConvertLongIntToString((LONGLONG)fX[0]) : EMPTYSTRING;
				szPoint += (!isnan(fX[1])) ? (TAB + cStringTools.ConvertLongIntToString((LONGLONG)fX[1])) : CString(TAB);
				szPoint += TAB + szText;
				szContents.Add(szPoint);
				continue;
			}
			if (pDatabaseTMTxtCalPoint->GetPoint(fX[0], szText))
			{
				szPoint = (!isnan(fX[0])) ? cStringTools.ConvertLongIntToString((LONGLONG)fX[0]) : EMPTYSTRING;
				szPoint += (!isnan(fX[0])) ? (TAB + cStringTools.ConvertLongIntToString((LONGLONG)fX[0])) : CString(TAB);
				szPoint += TAB + szText;
				szContents.Add(szPoint);
				continue;
			}
			szPoint.Empty();
			szContents.Add(szPoint);
		}
	}
	return((!szContents.GetSize()) ? ConstructTMTxtCalCurvePointsTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMTxtCalCurvePointsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMTxtCalCurvePointsTableContents(pView, szContents); (pDatabaseTMTxtCalTable = pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find(pszName))); )
	{
		ConstructTMTxtCalCurvePointsTableContents(pView, pDatabaseTMTxtCalTable, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_FROM)), TAS_TYPE_DECNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TO)), TAS_TYPE_DECNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TEXT)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_FROM)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_FROM)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TO)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TO)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TEXT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TEXT)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_FROM)), STRING(IDS_DATABASE_TABLE_TXFP_FROM_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TO)), STRING(IDS_DATABASE_TABLE_TXFP_TO_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TEXT)), STRING(IDS_DATABASE_TABLE_TXFP_TEXT_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_FROM)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TO)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TEXT)), Varchar(GetTMTxtCalTablePointTextLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMTxtCalCurveAssociationTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMTxtCalCurveAssociationTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTMParameter *pDatabaseTMParameter, INT nCount, CStringArray &szContents) CONST
{
	INT  nTable;
	INT  nTables;
	CString  szParameter;
	CStringArray  szCalTables[2];
	CDatabaseTMParameter  *pParameter;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;

	for (nTable = 0, nTables = pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]), nTables = (nCount >= 0) ? min(nCount, nTables) : nTables, szContents.RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pDatabaseTMTxtCalTable = pView->m_pDatabaseTMTxtCalTables[0].GetAt(pView->m_pDatabaseTMTxtCalTables[0].Find(szCalTables[0].GetAt(nTable)))))
		{
			for (szContents.Add(pDatabaseTMTxtCalTable->GetName()); (pParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(szCalTables[1].GetAt(nTable)))); )
			{
				szParameter.Format(STRING(IDS_DATABASE_TABLE_PTXF_PARAMETERFORMAT), (LPCTSTR)pParameter->GetTag(), (LPCTSTR)pParameter->GetDescription());
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szParameter);
				break;
			}
			if (szContents.GetAt(szContents.GetUpperBound()) == pDatabaseTMTxtCalTable->GetName() && !szCalTables[1].GetAt(nTable).IsEmpty())
			{
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szCalTables[1].GetAt(nTable));
				continue;
			}
		}
		else
		{
			for (szContents.Add(szCalTables[0].GetAt(nTable)); (pParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(szCalTables[1].GetAt(nTable)))); )
			{
				szParameter.Format(STRING(IDS_DATABASE_TABLE_PTXF_PARAMETERFORMAT), (LPCTSTR)pParameter->GetTag(), (LPCTSTR)pParameter->GetDescription());
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szParameter);
				break;
			}
			if (!szContents.GetAt(szContents.GetUpperBound()).IsEmpty() && !szCalTables[1].GetAt(nTable).IsEmpty())
			{
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szCalTables[1].GetAt(nTable));
				continue;
			}
		}
	}
	return((!szContents.GetSize()) ? ConstructTMTxtCalCurveAssociationTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMTxtCalCurveAssociationTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszTag, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTMParameter  *pDatabaseTMParameter;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMTxtCalCurveAssociationTableContents(pView, szContents); (pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszTag))); )
	{
		ConstructTMTxtCalCurveAssociationTableContents(pView, pDatabaseTMParameter, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PTXF), STRING(IDS_DATABASE_TABLE_PTXF_NAME)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PTXF), STRING(IDS_DATABASE_TABLE_PTXF_VALID)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PTXF), STRING(IDS_DATABASE_TABLE_PTXF_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PTXF), STRING(IDS_DATABASE_TABLE_PTXF_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PTXF), STRING(IDS_DATABASE_TABLE_PTXF_VALID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PTXF), STRING(IDS_DATABASE_TABLE_PTXF_VALID)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PTXF), STRING(IDS_DATABASE_TABLE_PTXF_NAME)), STRING(IDS_DATABASE_TABLE_PTXF_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PTXF), STRING(IDS_DATABASE_TABLE_PTXF_VALID)), STRING(IDS_DATABASE_TABLE_PTXF_VALID_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PTXF), STRING(IDS_DATABASE_TABLE_PTXF_NAME)), Varchar(GetTMTxtCalTableNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PTXF), STRING(IDS_DATABASE_TABLE_PTXF_VALID)), Varchar(GetTMParameterTagLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMNumOolChecksTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMNumOolChecksTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTMNumOolTable *pDatabaseTMNumOolTable, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), pDatabaseTMNumOolTable->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)), TranslateTMNumOolTableCheckCount(pDatabaseTMNumOolTable->GetChecks()));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)), TranslateTMNumOolTableInterpretation(pDatabaseTMNumOolTable->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)), TranslateTMNumOolTableCoding(pDatabaseTMNumOolTable->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)), TranslateTMNumOolTableRadix(pDatabaseTMNumOolTable->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)), TranslateTMNumOolTableStatus(pDatabaseTMNumOolTable->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMNumOolChecksTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMNumOolChecksTableContents(pView, szContents); (pDatabaseTMNumOolTable = pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find(pszName))); )
	{
		ConstructTMNumOolChecksTableContents(pView, pDatabaseTMNumOolTable, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), CString(STRING(IDS_DATABASE_TABLE_OCF_NAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_OCF_NAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)), CString(STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)) + TAB + CString(STRING(IDS_DATABASE_TABLE_OCF_NBCHECK_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)), CString(STRING(IDS_DATABASE_TABLE_OCF_INTER)) + TAB + CString(STRING(IDS_DATABASE_TABLE_OCF_INTER_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)), CString(STRING(IDS_DATABASE_TABLE_OCF_CODING)) + TAB + CString(STRING(IDS_DATABASE_TABLE_OCF_CODING_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)), CString(STRING(IDS_DATABASE_TABLE_OCF_RADIX)) + TAB + CString(STRING(IDS_DATABASE_TABLE_OCF_RADIX_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)), CString(STRING(IDS_DATABASE_TABLE_OCF_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_OCF_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), STRING(IDS_DATABASE_TABLE_OCF_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)), STRING(IDS_DATABASE_TABLE_OCF_INTER_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)), STRING(IDS_DATABASE_TABLE_OCF_CODING_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)), STRING(IDS_DATABASE_TABLE_OCF_RADIX_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)), STRING(IDS_DATABASE_TABLE_OCF_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), Varchar(GetTMNumOolTableNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)), Char(GetTMNumOolTableInterpretationLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)), Char(GetTMNumOolTableCodingLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)), Char(GetTMNumOolTableRadixLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)), Char(GetTMNumOolTableStatusLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMNumOolCheckLimitsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMNumOolCheckLimitsTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTMNumOolTable *pDatabaseTMNumOolTable, INT nCount, CStringArray &szContents) CONST
{
	INT  nLimit;
	INT  nLimits;
	UINT  nType;
	UINT  nRadix;
	double  fLow;
	double  fHigh;
	CString  szLimit;
	CStringTools  cStringTools;
	CDatabaseTMNumOolLimit  *pDatabaseTMNumOolLimit;

	for (nLimit = 0, nLimits = (nCount >= 0) ? (INT)min(pDatabaseTMNumOolTable->GetSize(), nCount) : (INT)pDatabaseTMNumOolTable->GetSize(), szContents.RemoveAll(); nLimit < nLimits; nLimit++)
	{
		if ((pDatabaseTMNumOolLimit = pDatabaseTMNumOolTable->GetAt(nLimit)))
		{
			if (pDatabaseTMNumOolLimit->GetType() != TMOOLLIMIT_TYPE_NONE)
			{
				if (pDatabaseTMNumOolLimit->GetRange(nType, fLow, fHigh))
				{
					for (szLimit = TranslateTMNumOolTableLimitType(nType), nRadix = (pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_RADIX_HEXADECIMAL) ? 16 : ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_RADIX_OCTAL) ? 8 : ((pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_RADIX_BINARY) ? 2 : 10)); pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_FLOATINGPOINT; )
					{
						szLimit += TAB + cStringTools.ConvertFloatToString(fLow);
						szLimit += TAB + cStringTools.ConvertFloatToString(fHigh);
						break;
					}
					if (pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_UNSIGNEDINTEGER)
					{
						szLimit += TAB + cStringTools.ConvertLongUIntToString((ULONGLONG)fLow, nRadix);
						szLimit += TAB + cStringTools.ConvertLongUIntToString((ULONGLONG)fHigh, nRadix);
					}
					if (pDatabaseTMNumOolTable->GetAttributes() & TMOOLTABLE_CODING_SIGNEDINTEGER)
					{
						szLimit += TAB + cStringTools.ConvertLongIntToString((LONGLONG)fLow, nRadix);
						szLimit += TAB + cStringTools.ConvertLongIntToString((LONGLONG)fHigh, nRadix);
					}
					szContents.Add(szLimit);
					continue;
				}
			}
			szLimit.Empty();
			szContents.Add(szLimit);
		}
	}
	return((!szContents.GetSize()) ? ConstructTMNumOolCheckLimitsTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMNumOolCheckLimitsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMNumOolCheckLimitsTableContents(pView, szContents); (pDatabaseTMNumOolTable = pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find(pszName))); )
	{
		ConstructTMNumOolCheckLimitsTableContents(pView, pDatabaseTMNumOolTable, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_TYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_LVALUE)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_HVALUE)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_TYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_TYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_LVALUE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_LVALUE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_HVALUE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_HVALUE)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_TYPE)), STRING(IDS_DATABASE_TABLE_OCFP_TYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_LVALUE)), STRING(IDS_DATABASE_TABLE_OCFP_LVALUE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_HVALUE)), STRING(IDS_DATABASE_TABLE_OCFP_HVALUE_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_TYPE)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_LVALUE)), Varchar(GetTMNumOolTableLimitValueLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_HVALUE)), Varchar(GetTMNumOolTableLimitValueLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMNumOolChecksAssociationTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMNumOolChecksAssociationTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTMParameter *pDatabaseTMParameter, INT nCount, CStringArray &szContents) CONST
{
	INT  nTable;
	INT  nTables;
	CString  szParameter;
	CStringArray  szOolTables[2];
	CDatabaseTMParameter  *pParameter;
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;

	for (nTable = 0, nTables = pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1]), nTables = (nCount >= 0) ? min(nCount, nTables) : nTables, szContents.RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pDatabaseTMNumOolTable = pView->m_pDatabaseTMNumOolTables[0].GetAt(pView->m_pDatabaseTMNumOolTables[0].Find(szOolTables[0].GetAt(nTable)))))
		{
			for (szContents.Add(pDatabaseTMNumOolTable->GetName()); (pParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(szOolTables[1].GetAt(nTable)))); )
			{
				szParameter.Format(STRING(IDS_DATABASE_TABLE_POCF_PARAMETERFORMAT), (LPCTSTR)pParameter->GetTag(), (LPCTSTR)pParameter->GetDescription());
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szParameter);
				break;
			}
			if (szContents.GetAt(szContents.GetUpperBound()) == pDatabaseTMNumOolTable->GetName() && !szOolTables[1].GetAt(nTable).IsEmpty())
			{
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szOolTables[1].GetAt(nTable));
				continue;
			}
		}
		else
		{
			for (szContents.Add(szOolTables[0].GetAt(nTable)); (pParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(szOolTables[1].GetAt(nTable)))); )
			{
				szParameter.Format(STRING(IDS_DATABASE_TABLE_POCF_PARAMETERFORMAT), (LPCTSTR)pParameter->GetTag(), (LPCTSTR)pParameter->GetDescription());
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szParameter);
				break;
			}
			if (!szContents.GetAt(szContents.GetUpperBound()).IsEmpty() && !szOolTables[1].GetAt(nTable).IsEmpty())
			{
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szOolTables[1].GetAt(nTable));
				continue;
			}
		}
	}
	return((!szContents.GetSize()) ? ConstructTMNumOolChecksAssociationTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMNumOolChecksAssociationTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszTag, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTMParameter  *pDatabaseTMParameter;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMNumOolChecksAssociationTableContents(pView, szContents); (pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszTag))); )
	{
		ConstructTMNumOolChecksAssociationTableContents(pView, pDatabaseTMParameter, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_POCF), STRING(IDS_DATABASE_TABLE_POCF_NAME)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_POCF), STRING(IDS_DATABASE_TABLE_POCF_VALID)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_POCF), STRING(IDS_DATABASE_TABLE_POCF_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_POCF), STRING(IDS_DATABASE_TABLE_POCF_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_POCF), STRING(IDS_DATABASE_TABLE_POCF_VALID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_POCF), STRING(IDS_DATABASE_TABLE_POCF_VALID)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_POCF), STRING(IDS_DATABASE_TABLE_POCF_NAME)), STRING(IDS_DATABASE_TABLE_POCF_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_POCF), STRING(IDS_DATABASE_TABLE_POCF_VALID)), STRING(IDS_DATABASE_TABLE_POCF_VALID_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_POCF), STRING(IDS_DATABASE_TABLE_POCF_NAME)), Varchar(GetTMNumOolTableNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_POCF), STRING(IDS_DATABASE_TABLE_POCF_VALID)), Varchar(GetTMParameterTagLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMTxtOolChecksTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMTxtOolChecksTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTMTxtOolTable *pDatabaseTMTxtOolTable, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), pDatabaseTMTxtOolTable->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)), TranslateTMTxtOolTableCheckCount(pDatabaseTMTxtOolTable->GetChecks()));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)), TranslateTMTxtOolTableInterpretation(pDatabaseTMTxtOolTable->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)), TranslateTMTxtOolTableRadix(pDatabaseTMTxtOolTable->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)), TranslateTMTxtOolTableStatus(pDatabaseTMTxtOolTable->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMTxtOolChecksTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMTxtOolChecksTableContents(pView, szContents); (pDatabaseTMTxtOolTable = pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find(pszName))); )
	{
		ConstructTMTxtOolChecksTableContents(pView, pDatabaseTMTxtOolTable, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), CString(STRING(IDS_DATABASE_TABLE_FXF_NAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_FXF_NAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)), CString(STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)) + TAB + CString(STRING(IDS_DATABASE_TABLE_FXF_NBCHECK_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)), CString(STRING(IDS_DATABASE_TABLE_FXF_INTER)) + TAB + CString(STRING(IDS_DATABASE_TABLE_FXF_INTER_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)), CString(STRING(IDS_DATABASE_TABLE_FXF_RADIX)) + TAB + CString(STRING(IDS_DATABASE_TABLE_FXF_RADIX_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)), CString(STRING(IDS_DATABASE_TABLE_FXF_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_FXF_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), STRING(IDS_DATABASE_TABLE_FXF_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)), STRING(IDS_DATABASE_TABLE_FXF_INTER_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)), STRING(IDS_DATABASE_TABLE_FXF_RADIX_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)), STRING(IDS_DATABASE_TABLE_FXF_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), Varchar(GetTMTxtOolTableNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)), Char(GetTMTxtOolTableInterpretationLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)), Char(GetTMTxtOolTableRadixLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)), Char(GetTMTxtOolTableStatusLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMTxtOolCheckLimitsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMTxtOolCheckLimitsTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTMTxtOolTable *pDatabaseTMTxtOolTable, INT nCount, CStringArray &szContents) CONST
{
	INT  nLimit;
	INT  nLimits;
	UINT  nRadix;
	double  fLow;
	double  fHigh;
	double  fLimit;
	CString  szLow;
	CString  szHigh;
	CString  szText;
	CString  szLimit;
	CStringTools  cStringTools;
	CDatabaseTMTxtOolLimit  *pDatabaseTMTxtOolLimit;

	for (nLimit = 0, nLimits = (nCount >= 0) ? (INT)min(pDatabaseTMTxtOolTable->GetSize(), nCount) : (INT)pDatabaseTMTxtOolTable->GetSize(), szContents.RemoveAll(); nLimit < nLimits; nLimit++)
	{
		if ((pDatabaseTMTxtOolLimit = pDatabaseTMTxtOolTable->GetAt(nLimit)))
		{
			if (pDatabaseTMTxtOolLimit->GetType() != TMOOLLIMIT_TYPE_NONE)
			{
				if (pDatabaseTMTxtOolLimit->GetLimit(fLimit))
				{
					szLimit = TranslateTMTxtOolTableLimitType(TMOOLLIMIT_TYPE_HARD, FALSE);
					szLimit += ((nRadix = (pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_RADIX_HEXADECIMAL) ? 16 : ((pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_RADIX_OCTAL) ? 8 : ((pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_RADIX_BINARY) ? 2 : 10))) == 10) ? (TAB + cStringTools.ConvertFloatToString(fLimit)) : (TAB + cStringTools.ConvertLongUIntToString((ULONGLONG)fLimit, nRadix));
					szLimit += (nRadix == 10) ? (TAB + cStringTools.ConvertFloatToString(fLimit)) : (TAB + cStringTools.ConvertLongUIntToString((ULONGLONG)fLimit, nRadix));
					szContents.Add(szLimit);
					continue;
				}
				if (pDatabaseTMTxtOolLimit->GetLimit(szText))
				{
					szLimit = TranslateTMTxtOolTableLimitType(TMOOLLIMIT_TYPE_HARD, FALSE);
					szLimit += TAB + szText + TAB + szText;
					szContents.Add(szLimit);
					continue;
				}
				if (pDatabaseTMTxtOolLimit->GetRange(fLow, fHigh))
				{
					szLimit = TranslateTMTxtOolTableLimitType(TMOOLLIMIT_TYPE_HARD, FALSE);
					szLimit += ((nRadix = (pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_RADIX_HEXADECIMAL) ? 16 : ((pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_RADIX_OCTAL) ? 8 : ((pDatabaseTMTxtOolTable->GetAttributes() & TMOOLTABLE_RADIX_BINARY) ? 2 : 10))) == 10) ? (TAB + cStringTools.ConvertFloatToString(fLow)) : (TAB + cStringTools.ConvertLongUIntToString((ULONGLONG)fLow, nRadix));
					szLimit += (nRadix == 10) ? (TAB + cStringTools.ConvertFloatToString(fHigh)) : (TAB + cStringTools.ConvertLongUIntToString((ULONGLONG)fHigh, nRadix));
					szContents.Add(szLimit);
					continue;
				}
				if (pDatabaseTMTxtOolLimit->GetRange(szLow, szHigh))
				{
					szLimit = TranslateTMTxtOolTableLimitType(TMOOLLIMIT_TYPE_HARD, FALSE);
					szLimit += TAB + szLow + TAB + szHigh;
					szContents.Add(szLimit);
					continue;
				}
			}
			szLimit.Empty();
			szContents.Add(szLimit);
		}
	}
	return((!szContents.GetSize()) ? ConstructTMTxtOolCheckLimitsTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMTxtOolCheckLimitsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMTxtOolCheckLimitsTableContents(pView, szContents); (pDatabaseTMTxtOolTable = pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find(pszName))); )
	{
		ConstructTMTxtOolCheckLimitsTableContents(pView, pDatabaseTMTxtOolTable, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_FROM)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TO)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_FROM)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_FROM)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TO)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TO)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TYPE)), STRING(IDS_DATABASE_TABLE_FXFP_TYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_FROM)), STRING(IDS_DATABASE_TABLE_FXFP_FROM_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TO)), STRING(IDS_DATABASE_TABLE_FXFP_TO_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TYPE)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_FROM)), Varchar(GetTMTxtOolTableLimitValueLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TO)), Varchar(GetTMTxtOolTableLimitValueLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTMTxtOolChecksAssociationTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMTxtOolChecksAssociationTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTMParameter *pDatabaseTMParameter, INT nCount, CStringArray &szContents) CONST
{
	INT  nTable;
	INT  nTables;
	CString  szParameter;
	CStringArray  szOolTables[2];
	CDatabaseTMParameter  *pParameter;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;

	for (nTable = 0, nTables = pDatabaseTMParameter->GetOolTables(szOolTables[0], szOolTables[1]), nTables = (nCount >= 0) ? min(nCount, nTables) : nTables, szContents.RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pDatabaseTMTxtOolTable = pView->m_pDatabaseTMTxtOolTables[0].GetAt(pView->m_pDatabaseTMTxtOolTables[0].Find(szOolTables[0].GetAt(nTable)))))
		{
			for (szContents.Add(pDatabaseTMTxtOolTable->GetName()); (pParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(szOolTables[1].GetAt(nTable)))); )
			{
				szParameter.Format(STRING(IDS_DATABASE_TABLE_PFXF_PARAMETERFORMAT), (LPCTSTR)pParameter->GetTag(), (LPCTSTR)pParameter->GetDescription());
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szParameter);
				break;
			}
			if (szContents.GetAt(szContents.GetUpperBound()) == pDatabaseTMTxtOolTable->GetName() && !szOolTables[1].GetAt(nTable).IsEmpty())
			{
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szOolTables[1].GetAt(nTable));
				continue;
			}
		}
		else
		{
			for (szContents.Add(szOolTables[0].GetAt(nTable)); (pParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(szOolTables[1].GetAt(nTable)))); )
			{
				szParameter.Format(STRING(IDS_DATABASE_TABLE_PFXF_PARAMETERFORMAT), (LPCTSTR)pParameter->GetTag(), (LPCTSTR)pParameter->GetDescription());
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szParameter);
				break;
			}
			if (!szContents.GetAt(szContents.GetUpperBound()).IsEmpty() && !szOolTables[1].GetAt(nTable).IsEmpty())
			{
				szContents.SetAt(szContents.GetUpperBound(), szContents.GetAt(szContents.GetUpperBound()) + TAB + szOolTables[1].GetAt(nTable));
				continue;
			}
		}
	}
	return((!szContents.GetSize()) ? ConstructTMTxtOolChecksAssociationTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTMTxtOolChecksAssociationTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszTag, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTMParameter  *pDatabaseTMParameter;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTMTxtOolChecksAssociationTableContents(pView, szContents); (pDatabaseTMParameter = pView->m_pDatabaseTMParameters[0].GetAt(pView->m_pDatabaseTMParameters[0].Find(pszTag))); )
	{
		ConstructTMTxtOolChecksAssociationTableContents(pView, pDatabaseTMParameter, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PFXF), STRING(IDS_DATABASE_TABLE_PFXF_NAME)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PFXF), STRING(IDS_DATABASE_TABLE_PFXF_VALID)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PFXF), STRING(IDS_DATABASE_TABLE_PFXF_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PFXF), STRING(IDS_DATABASE_TABLE_PFXF_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PFXF), STRING(IDS_DATABASE_TABLE_PFXF_VALID)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PFXF), STRING(IDS_DATABASE_TABLE_PFXF_VALID)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PFXF), STRING(IDS_DATABASE_TABLE_PFXF_NAME)), STRING(IDS_DATABASE_TABLE_PFXF_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PFXF), STRING(IDS_DATABASE_TABLE_PFXF_VALID)), STRING(IDS_DATABASE_TABLE_PFXF_VALID_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PFXF), STRING(IDS_DATABASE_TABLE_PFXF_NAME)), Varchar(GetTMTxtOolTableNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PFXF), STRING(IDS_DATABASE_TABLE_PFXF_VALID)), Varchar(GetTMParameterTagLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCParameterTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_UNIT)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CODING)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_LENGTH)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CATEG)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CALREF)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_TXFREF)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_OCFREF)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_FXFREF)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCParameterTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCParameter *pDatabaseTCParameter, CStringArray &szContents) CONST
{
	CStringTools  cStringTools;

	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)), pDatabaseTCParameter->GetTag());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_DESCR)), pDatabaseTCParameter->GetDescription());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_UNIT)), pDatabaseTCParameter->GetUnit());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CODING)), TranslateTCParameterCoding(pDatabaseTCParameter->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_LENGTH)), (pDatabaseTCParameter->GetWidth() > 0) ? cStringTools.ConvertIntToString(pDatabaseTCParameter->GetWidth()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CATEG)), TranslateTCParameterCategory(pDatabaseTCParameter->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CALREF)), (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? pDatabaseTCParameter->GetCalTable() : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_TXFREF)), (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? pDatabaseTCParameter->GetCalTable() : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_OCFREF)), ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? pDatabaseTCParameter->GetOolTable() : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_FXFREF)), (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? pDatabaseTCParameter->GetOolTable() : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_STATUS)), TranslateTCParameterStatus(pDatabaseTCParameter->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCParameterTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszTag, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCParameter  *pDatabaseTCParameter;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCParameterTableContents(pView, szContents); (pDatabaseTCParameter = pView->m_pDatabaseTCParameters[0].GetAt(pView->m_pDatabaseTCParameters[0].Find(pszTag))); )
	{
		ConstructTCParameterTableContents(pView, pDatabaseTCParameter, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)), CString(STRING(IDS_DATABASE_TABLE_CPC_PNAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CPC_PNAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_DESCR)), CString(STRING(IDS_DATABASE_TABLE_CPC_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CPC_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_UNIT)), CString(STRING(IDS_DATABASE_TABLE_CPC_UNIT)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CPC_UNIT_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_UNIT))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CODING)), CString(STRING(IDS_DATABASE_TABLE_CPC_CODING)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CPC_CODING_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CODING))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_LENGTH)), CString(STRING(IDS_DATABASE_TABLE_CPC_LENGTH)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CPC_LENGTH_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_LENGTH))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CATEG)), CString(STRING(IDS_DATABASE_TABLE_CPC_CATEG)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CPC_CATEG_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CATEG))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CALREF)), CString(STRING(IDS_DATABASE_TABLE_CPC_CALREF)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CPC_CALREF_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CALREF))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_TXFREF)), CString(STRING(IDS_DATABASE_TABLE_CPC_TXFREF)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CPC_TXFREF_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_TXFREF))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_OCFREF)), CString(STRING(IDS_DATABASE_TABLE_CPC_OCFREF)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CPC_OCFREF_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_OCFREF))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_FXFREF)), CString(STRING(IDS_DATABASE_TABLE_CPC_FXFREF)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CPC_FXFREF_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_FXFREF))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_STATUS)), CString(STRING(IDS_DATABASE_TABLE_CPC_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CPC_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_UNIT)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CODING)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_LENGTH)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CATEG)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CALREF)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_TXFREF)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_OCFREF)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_FXFREF)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_UNIT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_UNIT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CODING)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CODING)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_LENGTH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_LENGTH)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CATEG)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CATEG)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CALREF)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CALREF)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_TXFREF)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_TXFREF)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_OCFREF)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_OCFREF)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_FXFREF)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_FXFREF)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)), STRING(IDS_DATABASE_TABLE_CPC_PNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_DESCR)), STRING(IDS_DATABASE_TABLE_CPC_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_UNIT)), STRING(IDS_DATABASE_TABLE_CPC_UNIT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CODING)), STRING(IDS_DATABASE_TABLE_CPC_CODING_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_LENGTH)), STRING(IDS_DATABASE_TABLE_CPC_LENGTH_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CATEG)), STRING(IDS_DATABASE_TABLE_CPC_CATEG_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CALREF)), STRING(IDS_DATABASE_TABLE_CPC_CALREF_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_TXFREF)), STRING(IDS_DATABASE_TABLE_CPC_TXFREF_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_OCFREF)), STRING(IDS_DATABASE_TABLE_CPC_OCFREF_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_FXFREF)), STRING(IDS_DATABASE_TABLE_CPC_FXFREF_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_STATUS)), STRING(IDS_DATABASE_TABLE_CPC_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_PNAME)), Varchar(GetTCParameterTagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_DESCR)), Varchar(GetTCParameterDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_UNIT)), Varchar(GetTCParameterUnitLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CODING)), Char(GetTCParameterCodingLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_LENGTH)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CATEG)), Char(GetTCParameterCategoryLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_CALREF)), Varchar(GetTCParameterCalTableLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_TXFREF)), Varchar(GetTCParameterCalTableLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_OCFREF)), Varchar(GetTCParameterOolTableLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_FXFREF)), Varchar(GetTCParameterOolTableLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CPC), STRING(IDS_DATABASE_TABLE_CPC_STATUS)), Char(GetTCParameterStatusLength()));
	szDescriptions.InsertAt(0, STRING(IDS_DATABASE_TABLE_CPC_COMMENTS));
	szDataTypes.InsertAt(0, NotApplicable());
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCNumCalCurveTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCNumCalCurveTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCNumCalTable *pDatabaseTCNumCalTable, CStringArray &szContents) CONST
{
	CStringTools  cStringTools;

	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), pDatabaseTCNumCalTable->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)), pDatabaseTCNumCalTable->GetDescription());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)), pDatabaseTCNumCalTable->GetUnit());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)), (pDatabaseTCNumCalTable->GetPoints() >= 0) ? cStringTools.ConvertIntToString(pDatabaseTCNumCalTable->GetPoints()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)), TranslateTCNumCalTableStatus(pDatabaseTCNumCalTable->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCNumCalCurveTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCNumCalCurveTableContents(pView, szContents); (pDatabaseTCNumCalTable = pView->m_pDatabaseTCNumCalTables[0].GetAt(pView->m_pDatabaseTCNumCalTables[0].Find(pszName))); )
	{
		ConstructTCNumCalCurveTableContents(pView, pDatabaseTCNumCalTable, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), CString(STRING(IDS_DATABASE_TABLE_CAL_NAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CAL_NAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)), CString(STRING(IDS_DATABASE_TABLE_CAL_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CAL_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)), CString(STRING(IDS_DATABASE_TABLE_CAL_UNIT)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CAL_UNIT_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)), CString(STRING(IDS_DATABASE_TABLE_CAL_NBPNT)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CAL_NBPNT_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)), CString(STRING(IDS_DATABASE_TABLE_CAL_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_CAL_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), STRING(IDS_DATABASE_TABLE_CAL_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)), STRING(IDS_DATABASE_TABLE_CAL_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)), STRING(IDS_DATABASE_TABLE_CAL_UNIT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)), STRING(IDS_DATABASE_TABLE_CAL_NBPNT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)), STRING(IDS_DATABASE_TABLE_CAL_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NAME)), Varchar(GetTCNumCalTableNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_DESCR)), Varchar(GetTCNumCalTableDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_UNIT)), Varchar(GetTCNumCalTableUnitLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_NBPNT)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CAL), STRING(IDS_DATABASE_TABLE_CAL_STATUS)), Char(GetTCNumCalTableStatusLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCNumCalCurvePointsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCNumCalCurvePointsTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCNumCalTable *pDatabaseTCNumCalTable, INT nCount, CStringArray &szContents) CONST
{
	INT  nPoint;
	INT  nPoints;
	CString  szPoint;
	CStringTools  cStringTools;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint;

	for (nPoint = 0, nPoints = (nCount >= 0) ? (INT)min(pDatabaseTCNumCalTable->GetSize(), nCount) : (INT)pDatabaseTCNumCalTable->GetSize(), szContents.RemoveAll(); nPoint < nPoints; nPoint++)
	{
		if ((pDatabaseTCNumCalPoint = pDatabaseTCNumCalTable->GetAt(nPoint)) != (CDatabaseTCNumCalPoint *)NULL)
		{
			szPoint = (!isnan(pDatabaseTCNumCalPoint->GetX())) ? cStringTools.ConvertFloatToString(pDatabaseTCNumCalPoint->GetX()) : EMPTYSTRING;
			szPoint += (!isnan(pDatabaseTCNumCalPoint->GetY())) ? (TAB + cStringTools.ConvertFloatToString(pDatabaseTCNumCalPoint->GetY())) : CString(TAB);
			szContents.Add(szPoint);
		}
	}
	return((!szContents.GetSize()) ? ConstructTCNumCalCurvePointsTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCNumCalCurvePointsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCNumCalCurvePointsTableContents(pView, szContents); (pDatabaseTCNumCalTable = pView->m_pDatabaseTCNumCalTables[0].GetAt(pView->m_pDatabaseTCNumCalTables[0].Find(pszName))); )
	{
		ConstructTCNumCalCurvePointsTableContents(pView, pDatabaseTCNumCalTable, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_XVAL)), TAS_TYPE_DECNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_YVAL)), TAS_TYPE_DECNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_XVAL)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_XVAL)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_YVAL)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_YVAL)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_XVAL)), STRING(IDS_DATABASE_TABLE_CALP_XVAL_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_YVAL)), STRING(IDS_DATABASE_TABLE_CALP_YVAL_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_XVAL)), Numeric(10, 3));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_CALP), STRING(IDS_DATABASE_TABLE_CALP_YVAL)), Numeric(10, 3));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCTxtCalCurveTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCTxtCalCurveTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCTxtCalTable *pDatabaseTCTxtCalTable, CStringArray &szContents) CONST
{
	CStringTools  cStringTools;

	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), pDatabaseTCTxtCalTable->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)), pDatabaseTCTxtCalTable->GetDescription());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)), (pDatabaseTCTxtCalTable->GetPoints() >= 0) ? cStringTools.ConvertIntToString(pDatabaseTCTxtCalTable->GetPoints()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)), TranslateTCTxtCalTableStatus(pDatabaseTCTxtCalTable->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCTxtCalCurveTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCTxtCalCurveTableContents(pView, szContents); (pDatabaseTCTxtCalTable = pView->m_pDatabaseTCTxtCalTables[0].GetAt(pView->m_pDatabaseTCTxtCalTables[0].Find(pszName))); )
	{
		ConstructTCTxtCalCurveTableContents(pView, pDatabaseTCTxtCalTable, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), CString(STRING(IDS_DATABASE_TABLE_TXF_NAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TXF_NAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)), CString(STRING(IDS_DATABASE_TABLE_TXF_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TXF_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)), CString(STRING(IDS_DATABASE_TABLE_TXF_NBTXT)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TXF_NBTXT_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)), CString(STRING(IDS_DATABASE_TABLE_TXF_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_TXF_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), STRING(IDS_DATABASE_TABLE_TXF_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)), STRING(IDS_DATABASE_TABLE_TXF_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)), STRING(IDS_DATABASE_TABLE_TXF_NBTXT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)), STRING(IDS_DATABASE_TABLE_TXF_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NAME)), Varchar(GetTCTxtCalTableNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_DESCR)), Varchar(GetTCTxtCalTableDescriptionLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_NBTXT)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXF), STRING(IDS_DATABASE_TABLE_TXF_STATUS)), Char(GetTCTxtCalTableStatusLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCTxtCalCurvePointsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCTxtCalCurvePointsTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCTxtCalTable *pDatabaseTCTxtCalTable, INT nCount, CStringArray &szContents) CONST
{
	INT  nPoint;
	INT  nPoints;
	double  fX[2];
	CString  szText;
	CString  szPoint;
	CStringTools  cStringTools;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;

	for (nPoint = 0, nPoints = (nCount >= 0) ? (INT)min(pDatabaseTCTxtCalTable->GetSize(), nCount) : (INT)pDatabaseTCTxtCalTable->GetSize(), szContents.RemoveAll(); nPoint < nPoints; nPoint++)
	{
		if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nPoint)))
		{
			if (pDatabaseTCTxtCalPoint->GetRange(fX[0], fX[1], szText))
			{
				szPoint = (!isnan(fX[0])) ? cStringTools.ConvertLongIntToString((LONGLONG)fX[0]) : EMPTYSTRING;
				szPoint += (!isnan(fX[1])) ? (TAB + cStringTools.ConvertLongIntToString((LONGLONG)fX[1])) : CString(TAB);
				szPoint += TAB + szText;
				szContents.Add(szPoint);
				continue;
			}
			if (pDatabaseTCTxtCalPoint->GetPoint(fX[0], szText))
			{
				szPoint = (!isnan(fX[0])) ? cStringTools.ConvertLongIntToString((LONGLONG)fX[0]) : EMPTYSTRING;
				szPoint += (!isnan(fX[0])) ? (TAB + cStringTools.ConvertLongIntToString((LONGLONG)fX[0])) : CString(TAB);
				szPoint += TAB + szText;
				szContents.Add(szPoint);
				continue;
			}
			szPoint.Empty();
			szContents.Add(szPoint);
		}
	}
	return((!szContents.GetSize()) ? ConstructTCTxtCalCurvePointsTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCTxtCalCurvePointsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCTxtCalCurvePointsTableContents(pView, szContents); (pDatabaseTCTxtCalTable = pView->m_pDatabaseTCTxtCalTables[0].GetAt(pView->m_pDatabaseTCTxtCalTables[0].Find(pszName))); )
	{
		ConstructTCTxtCalCurvePointsTableContents(pView, pDatabaseTCTxtCalTable, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_FROM)), TAS_TYPE_DECNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TO)), TAS_TYPE_DECNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TEXT)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_FROM)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_FROM)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TO)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TO)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TEXT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TEXT)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_FROM)), STRING(IDS_DATABASE_TABLE_TXFP_FROM_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TO)), STRING(IDS_DATABASE_TABLE_TXFP_TO_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TEXT)), STRING(IDS_DATABASE_TABLE_TXFP_TEXT_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_FROM)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TO)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_TXFP), STRING(IDS_DATABASE_TABLE_TXFP_TEXT)), Varchar(GetTCTxtCalTablePointTextLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCNumOolChecksTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCNumOolChecksTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCNumOolTable *pDatabaseTCNumOolTable, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), pDatabaseTCNumOolTable->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)), TranslateTCNumOolTableCheckCount(pDatabaseTCNumOolTable->GetChecks()));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)), TranslateTCNumOolTableInterpretation(pDatabaseTCNumOolTable->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)), TranslateTCNumOolTableCoding(pDatabaseTCNumOolTable->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)), TranslateTCNumOolTableRadix(pDatabaseTCNumOolTable->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)), TranslateTCNumOolTableStatus(pDatabaseTCNumOolTable->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCNumOolChecksTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCNumOolChecksTableContents(pView, szContents); (pDatabaseTCNumOolTable = pView->m_pDatabaseTCNumOolTables[0].GetAt(pView->m_pDatabaseTCNumOolTables[0].Find(pszName))); )
	{
		ConstructTCNumOolChecksTableContents(pView, pDatabaseTCNumOolTable, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), CString(STRING(IDS_DATABASE_TABLE_OCF_NAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_OCF_NAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)), CString(STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)) + TAB + CString(STRING(IDS_DATABASE_TABLE_OCF_NBCHECK_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)), CString(STRING(IDS_DATABASE_TABLE_OCF_INTER)) + TAB + CString(STRING(IDS_DATABASE_TABLE_OCF_INTER_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)), CString(STRING(IDS_DATABASE_TABLE_OCF_CODING)) + TAB + CString(STRING(IDS_DATABASE_TABLE_OCF_CODING_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)), CString(STRING(IDS_DATABASE_TABLE_OCF_RADIX)) + TAB + CString(STRING(IDS_DATABASE_TABLE_OCF_RADIX_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)), CString(STRING(IDS_DATABASE_TABLE_OCF_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_OCF_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), STRING(IDS_DATABASE_TABLE_OCF_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)), STRING(IDS_DATABASE_TABLE_OCF_INTER_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)), STRING(IDS_DATABASE_TABLE_OCF_CODING_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)), STRING(IDS_DATABASE_TABLE_OCF_RADIX_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)), STRING(IDS_DATABASE_TABLE_OCF_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NAME)), Varchar(GetTCNumOolTableNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_NBCHECK)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_INTER)), Char(GetTCNumOolTableInterpretationLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_CODING)), Char(GetTCNumOolTableCodingLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_RADIX)), Char(GetTCNumOolTableRadixLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCF), STRING(IDS_DATABASE_TABLE_OCF_STATUS)), Char(GetTCNumOolTableStatusLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCNumOolCheckLimitsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCNumOolCheckLimitsTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCNumOolTable *pDatabaseTCNumOolTable, INT nCount, CStringArray &szContents) CONST
{
	INT  nLimit;
	INT  nLimits;
	UINT  nType;
	UINT  nRadix;
	double  fLow;
	double  fHigh;
	CString  szLimit;
	CStringTools  cStringTools;
	CDatabaseTCNumOolLimit  *pDatabaseTCNumOolLimit;

	for (nLimit = 0, nLimits = (nCount >= 0) ? (INT)min(pDatabaseTCNumOolTable->GetSize(), nCount) : (INT)pDatabaseTCNumOolTable->GetSize(), szContents.RemoveAll(); nLimit < nLimits; nLimit++)
	{
		if ((pDatabaseTCNumOolLimit = pDatabaseTCNumOolTable->GetAt(nLimit)))
		{
			if (pDatabaseTCNumOolLimit->GetType() != TCOOLLIMIT_TYPE_NONE)
			{
				if (pDatabaseTCNumOolLimit->GetRange(nType, fLow, fHigh))
				{
					for (szLimit = TranslateTCNumOolTableLimitType(nType), nRadix = (pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_RADIX_HEXADECIMAL) ? 16 : ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_RADIX_OCTAL) ? 8 : ((pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_RADIX_BINARY) ? 2 : 10)); pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_FLOATINGPOINT; )
					{
						szLimit += TAB + cStringTools.ConvertFloatToString(fLow);
						szLimit += TAB + cStringTools.ConvertFloatToString(fHigh);
						break;
					}
					if (pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_UNSIGNEDINTEGER)
					{
						szLimit += TAB + cStringTools.ConvertLongUIntToString((ULONGLONG)fLow, nRadix);
						szLimit += TAB + cStringTools.ConvertLongUIntToString((ULONGLONG)fHigh, nRadix);
					}
					if (pDatabaseTCNumOolTable->GetAttributes() & TCOOLTABLE_CODING_SIGNEDINTEGER)
					{
						szLimit += TAB + cStringTools.ConvertLongIntToString((LONGLONG)fLow, nRadix);
						szLimit += TAB + cStringTools.ConvertLongIntToString((LONGLONG)fHigh, nRadix);
					}
					szContents.Add(szLimit);
					continue;
				}
			}
			szLimit.Empty();
			szContents.Add(szLimit);
		}
	}
	return((!szContents.GetSize()) ? ConstructTCNumOolCheckLimitsTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCNumOolCheckLimitsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCNumOolTable  *pDatabaseTCNumOolTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCNumOolCheckLimitsTableContents(pView, szContents); (pDatabaseTCNumOolTable = pView->m_pDatabaseTCNumOolTables[0].GetAt(pView->m_pDatabaseTCNumOolTables[0].Find(pszName))); )
	{
		ConstructTCNumOolCheckLimitsTableContents(pView, pDatabaseTCNumOolTable, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_TYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_LVALUE)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_HVALUE)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_TYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_TYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_LVALUE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_LVALUE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_HVALUE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_HVALUE)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_TYPE)), STRING(IDS_DATABASE_TABLE_OCFP_TYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_LVALUE)), STRING(IDS_DATABASE_TABLE_OCFP_LVALUE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_HVALUE)), STRING(IDS_DATABASE_TABLE_OCFP_HVALUE_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_TYPE)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_LVALUE)), Varchar(GetTCNumOolTableLimitValueLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_OCFP), STRING(IDS_DATABASE_TABLE_OCFP_HVALUE)), Varchar(GetTCNumOolTableLimitValueLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCTxtOolChecksTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCTxtOolChecksTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCTxtOolTable *pDatabaseTCTxtOolTable, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), pDatabaseTCTxtOolTable->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)), TranslateTCTxtOolTableCheckCount(pDatabaseTCTxtOolTable->GetChecks()));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)), TranslateTCTxtOolTableInterpretation(pDatabaseTCTxtOolTable->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)), TranslateTCTxtOolTableRadix(pDatabaseTCTxtOolTable->GetAttributes(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)), TranslateTCTxtOolTableStatus(pDatabaseTCTxtOolTable->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCTxtOolChecksTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCTxtOolChecksTableContents(pView, szContents); (pDatabaseTCTxtOolTable = pView->m_pDatabaseTCTxtOolTables[0].GetAt(pView->m_pDatabaseTCTxtOolTables[0].Find(pszName))); )
	{
		ConstructTCTxtOolChecksTableContents(pView, pDatabaseTCTxtOolTable, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), CString(STRING(IDS_DATABASE_TABLE_FXF_NAME)) + TAB + CString(STRING(IDS_DATABASE_TABLE_FXF_NAME_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)), CString(STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)) + TAB + CString(STRING(IDS_DATABASE_TABLE_FXF_NBCHECK_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)), CString(STRING(IDS_DATABASE_TABLE_FXF_INTER)) + TAB + CString(STRING(IDS_DATABASE_TABLE_FXF_INTER_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)), CString(STRING(IDS_DATABASE_TABLE_FXF_RADIX)) + TAB + CString(STRING(IDS_DATABASE_TABLE_FXF_RADIX_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)), CString(STRING(IDS_DATABASE_TABLE_FXF_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_FXF_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), STRING(IDS_DATABASE_TABLE_FXF_NAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)), STRING(IDS_DATABASE_TABLE_FXF_INTER_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)), STRING(IDS_DATABASE_TABLE_FXF_RADIX_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)), STRING(IDS_DATABASE_TABLE_FXF_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NAME)), Varchar(GetTCTxtOolTableNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_NBCHECK)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_INTER)), Char(GetTCTxtOolTableInterpretationLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_RADIX)), Char(GetTCTxtOolTableRadixLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXF), STRING(IDS_DATABASE_TABLE_FXF_STATUS)), Char(GetTCTxtOolTableStatusLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructTCTxtOolCheckLimitsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCTxtOolCheckLimitsTableContents(CONST CDatabaseTableView *pView, CONST CDatabaseTCTxtOolTable *pDatabaseTCTxtOolTable, INT nCount, CStringArray &szContents) CONST
{
	INT  nLimit;
	INT  nLimits;
	UINT  nRadix;
	double  fLow;
	double  fHigh;
	double  fLimit;
	CString  szLow;
	CString  szHigh;
	CString  szText;
	CString  szLimit;
	CStringTools  cStringTools;
	CDatabaseTCTxtOolLimit  *pDatabaseTCTxtOolLimit;

	for (nLimit = 0, nLimits = (nCount >= 0) ? (INT)min(pDatabaseTCTxtOolTable->GetSize(), nCount) : (INT)pDatabaseTCTxtOolTable->GetSize(), szContents.RemoveAll(); nLimit < nLimits; nLimit++)
	{
		if ((pDatabaseTCTxtOolLimit = pDatabaseTCTxtOolTable->GetAt(nLimit)))
		{
			if (pDatabaseTCTxtOolLimit->GetType() != TCOOLLIMIT_TYPE_NONE)
			{
				if (pDatabaseTCTxtOolLimit->GetLimit(fLimit))
				{
					szLimit = TranslateTCTxtOolTableLimitType(TCOOLLIMIT_TYPE_HARD, FALSE);
					szLimit += ((nRadix = (pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_RADIX_HEXADECIMAL) ? 16 : ((pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_RADIX_OCTAL) ? 8 : ((pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_RADIX_BINARY) ? 2 : 10))) == 10) ? (TAB + cStringTools.ConvertFloatToString(fLimit)) : (TAB + cStringTools.ConvertLongUIntToString((ULONGLONG)fLimit, nRadix));
					szLimit += (nRadix == 10) ? (TAB + cStringTools.ConvertFloatToString(fLimit)) : (TAB + cStringTools.ConvertLongUIntToString((ULONGLONG)fLimit, nRadix));
					szContents.Add(szLimit);
					continue;
				}
				if (pDatabaseTCTxtOolLimit->GetLimit(szText))
				{
					szLimit = TranslateTCTxtOolTableLimitType(TCOOLLIMIT_TYPE_HARD, FALSE);
					szLimit += TAB + szText + TAB + szText;
					szContents.Add(szLimit);
					continue;
				}
				if (pDatabaseTCTxtOolLimit->GetRange(fLow, fHigh))
				{
					szLimit = TranslateTCTxtOolTableLimitType(TCOOLLIMIT_TYPE_HARD, FALSE);
					szLimit += ((nRadix = (pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_RADIX_HEXADECIMAL) ? 16 : ((pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_RADIX_OCTAL) ? 8 : ((pDatabaseTCTxtOolTable->GetAttributes() & TCOOLTABLE_RADIX_BINARY) ? 2 : 10))) == 10) ? (TAB + cStringTools.ConvertFloatToString(fLow)) : (TAB + cStringTools.ConvertLongUIntToString((ULONGLONG)fLow, nRadix));
					szLimit += (nRadix == 10) ? (TAB + cStringTools.ConvertFloatToString(fHigh)) : (TAB + cStringTools.ConvertLongUIntToString((ULONGLONG)fHigh, nRadix));
					szContents.Add(szLimit);
					continue;
				}
				if (pDatabaseTCTxtOolLimit->GetRange(szLow, szHigh))
				{
					szLimit = TranslateTCTxtOolTableLimitType(TCOOLLIMIT_TYPE_HARD, FALSE);
					szLimit += TAB + szLow + TAB + szHigh;
					szContents.Add(szLimit);
					continue;
				}
			}
			szLimit.Empty();
			szContents.Add(szLimit);
		}
	}
	return((!szContents.GetSize()) ? ConstructTCTxtOolCheckLimitsTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructTCTxtOolCheckLimitsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CDatabaseTCTxtOolTable  *pDatabaseTCTxtOolTable;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructTCTxtOolCheckLimitsTableContents(pView, szContents); (pDatabaseTCTxtOolTable = pView->m_pDatabaseTCTxtOolTables[0].GetAt(pView->m_pDatabaseTCTxtOolTables[0].Find(pszName))); )
	{
		ConstructTCTxtOolCheckLimitsTableContents(pView, pDatabaseTCTxtOolTable, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_FROM)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TO)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_FROM)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_FROM)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TO)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TO)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TYPE)), STRING(IDS_DATABASE_TABLE_FXFP_TYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_FROM)), STRING(IDS_DATABASE_TABLE_FXFP_FROM_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TO)), STRING(IDS_DATABASE_TABLE_FXFP_TO_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TYPE)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_FROM)), Varchar(GetTCTxtOolTableLimitValueLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_FXFP), STRING(IDS_DATABASE_TABLE_FXFP_TO)), Varchar(GetTCTxtOolTableLimitValueLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructANDTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_NUMBER)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructANDTableContents(CONST CDatabaseTableView *pView, CONST CANDLayout *pANDLayout, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_NUMBER)), pANDLayout->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_DESCR)), pANDLayout->GetTitle());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_STATUS)), TranslateANDStatus(pANDLayout->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructANDTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CANDLayout  *pANDLayout;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructANDTableContents(pView, szContents); (pANDLayout = pView->m_pANDLayouts[0].GetAt(pView->m_pANDLayouts[0].Find(pszName))); )
	{
		ConstructANDTableContents(pView, pANDLayout, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_NUMBER)), CString(STRING(IDS_DATABASE_TABLE_DPF_NUMBER)) + TAB + CString(STRING(IDS_DATABASE_TABLE_DPF_NUMBER_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_NUMBER))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_DESCR)), CString(STRING(IDS_DATABASE_TABLE_DPF_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_DPF_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)), CString(STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)) + TAB + CString(STRING(IDS_DATABASE_TABLE_DPF_LAYOUT_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_LAYOUT))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_STATUS)), CString(STRING(IDS_DATABASE_TABLE_DPF_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_DPF_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_NUMBER)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)), TAS_TYPE_SUBTABLE);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_NUMBER)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_NUMBER)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_NUMBER)), STRING(IDS_DATABASE_TABLE_DPF_NUMBER_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_DESCR)), STRING(IDS_DATABASE_TABLE_DPF_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)), STRING(IDS_DATABASE_TABLE_DPF_LAYOUT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_STATUS)), STRING(IDS_DATABASE_TABLE_DPF_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_NUMBER)), Varchar(GetANDNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_DESCR)), Varchar(GetANDTitleLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)), Varchar(GetANDColumnsLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPF), STRING(IDS_DATABASE_TABLE_DPF_STATUS)), Char(GetANDStatusLength()));
	szDescriptions.InsertAt(0, STRING(IDS_DATABASE_TABLE_DPF_COMMENTS));
	szDataTypes.InsertAt(0, NotApplicable());
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructANDLayoutTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	CUIntArray  nColumns;

	szContents.RemoveAll();
	nColumns.Add(ANDLAYOUT_TITLEITEMS_DEFAULT);
	szContents.Add(TranslateANDColumns(nColumns, FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructANDLayoutTableContents(CONST CDatabaseTableView *pView, CONST CANDLayout *pANDLayout, CStringArray &szContents) CONST
{
	CUIntArray  nColumns;

	for (szContents.RemoveAll(); pANDLayout->GetColumns(nColumns) > 0 || !nColumns.Add(ANDLAYOUT_TITLEITEMS_DEFAULT); )
	{
		szContents.Add(TranslateANDColumns(nColumns, FALSE));
		break;
	}
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructANDLayoutTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	INT  nCol;
	INT  nCols;
	INT  nPos[2];
	CANDLayout  *pANDLayout;
	CStringArray  szColumns;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructANDLayoutTableContents(pView, szContents); (pANDLayout = pView->m_pANDLayouts[0].GetAt(pView->m_pANDLayouts[0].Find(pszName))); )
	{
		ConstructANDLayoutTableContents(pView, pANDLayout, szContents);
		break;
	}
	for (nPos[0] = 0; (nPos[1] = szContents.GetAt(szContents.GetUpperBound()).Mid(nPos[0]).Find(TAB)) >= 0 || !szContents.GetAt(szContents.GetUpperBound()).Mid(nPos[0]).IsEmpty(); nPos[0] += nPos[1] + 1)
	{
		szColumns.Add((nPos[1] >= 0) ? szContents.GetAt(szContents.GetUpperBound()).Mid(nPos[0], nPos[1]) : szContents.GetAt(szContents.GetUpperBound()).Mid(nPos[0]));
		if (nPos[1] < 0) break;
	}
	for (nCol = 0, nCols = (INT)szColumns.GetSize(); nCol < nCols; nCol++)
	{
		nFormats.SetAtGrow(nCol, (!nCol) ? (TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER) : (TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER));
		nIDs.SetAtGrow(nCol, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT), STRING(IDS_DATABASE_TABLE_DPF_LAYOUT)));
		szDescriptions.SetAtGrow(nCol, STRING(IDS_DATABASE_TABLE_DPF_LAYOUT_COMMENTS));
		szDataTypes.SetAtGrow(nCol, Varchar(GetANDColumnsLength()));
	}
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructANDParametersTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructANDParametersTableContents(CONST CDatabaseTableView *pView, CONST CANDLayout *pANDLayout, INT nCount, CStringArray &szContents) CONST
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CStringTools  cStringTools;
	CANDLayoutParameter  *pANDLayoutParameter;

	for (nParameter = 0, nParameters = (nCount >= 0) ? (INT)min(pANDLayout->GetSize(), nCount) : (INT)pANDLayout->GetSize(), szContents.RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pANDLayoutParameter = pANDLayout->GetAt(nParameter)))
		{
			szParameter = pANDLayoutParameter->GetName();
			szParameter += TAB + TranslateANDParameterComment(pANDLayoutParameter->GetComment(), FALSE);
			szParameter += (pANDLayoutParameter->GetRow() >= 0) ? (TAB + cStringTools.ConvertIntToString(pANDLayoutParameter->GetRow())) : CString(TAB);
			szParameter += (pANDLayoutParameter->GetColumn() >= 0) ? (TAB + cStringTools.ConvertIntToString(pANDLayoutParameter->GetColumn())) : CString(TAB);
			szParameter += (pANDLayoutParameter->GetName().GetLength() > 0 || pANDLayoutParameter->GetComment().GetLength() > 0) ? (TAB + CTableViewComboBoxColorsCtrl::TranslateColor(pANDLayoutParameter->GetColor())) : CString(TAB);
			szParameter += (pANDLayoutParameter->GetName().GetLength() > 0) ? (TAB + cStringTools.ConvertIntToString(pANDLayoutParameter->GetOccurrence())) : CString(TAB);
			szParameter += (!pANDLayoutParameter->IsLabel()) ? (TAB + TranslateANDParameterMode(pANDLayoutParameter->GetAttributes(), FALSE)) : CString(TAB);
			szParameter += (pANDLayoutParameter->GetDigits() > 0) ? (TAB + cStringTools.ConvertIntToString(pANDLayoutParameter->GetDigits())) : CString(TAB);
			szParameter += TAB + TranslateANDParameterAlignment(pANDLayoutParameter->GetAlignment(), FALSE);
			szContents.Add(szParameter);
		}
	}
	return((!szContents.GetSize()) ? ConstructANDParametersTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructANDParametersTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CANDLayout  *pANDLayout;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructANDParametersTableContents(pView, szContents); (pANDLayout = pView->m_pANDLayouts[0].GetAt(pView->m_pANDLayouts[0].Find(pszName))); )
	{
		ConstructANDParametersTableContents(pView, pANDLayout, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_PNAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COMMENT)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_ROW)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COL)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COLOR)), TAS_TYPE_COMBOCOLORSBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COMM)), TAS_TYPE_DECNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_VALMODE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_VALCHARS)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_VALALIGN)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_PNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_PNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COMMENT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COMMENT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_ROW)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_ROW)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COL)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COL)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COLOR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COLOR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COMM)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COMM)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_VALMODE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_VALMODE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_VALCHARS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_VALCHARS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_VALALIGN)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_VALALIGN)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_PNAME)), STRING(IDS_DATABASE_TABLE_DPFP_PNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COMMENT)), STRING(IDS_DATABASE_TABLE_DPFP_COMMENT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_ROW)), STRING(IDS_DATABASE_TABLE_DPFP_ROW_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COL)), STRING(IDS_DATABASE_TABLE_DPFP_COL_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COLOR)), STRING(IDS_DATABASE_TABLE_DPFP_COLOR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COMM)), STRING(IDS_DATABASE_TABLE_DPFP_COMM_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_VALMODE)), STRING(IDS_DATABASE_TABLE_DPFP_VALMODE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_VALCHARS)), STRING(IDS_DATABASE_TABLE_DPFP_VALCHARS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_VALALIGN)), STRING(IDS_DATABASE_TABLE_DPFP_VALALIGN_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_PNAME)), Varchar(GetANDParameterTagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COMMENT)), Varchar(GetANDParameterCommentLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_ROW)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COL)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COLOR)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_COMM)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_VALMODE)), Char(GetANDParameterModeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_VALCHARS)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_DPFP), STRING(IDS_DATABASE_TABLE_DPFP_VALALIGN)), Char(GetANDParameterAlignmentLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructGRDTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_NUMBER)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TYPE)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MODE)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DAYS)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HOURS)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MINUTES)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_INTERVAL)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_UPDATE)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_WIDTH)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HEIGHT)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XGRIDS)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YGRIDS)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XTICKS)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YTICKS)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSCOLOR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSCOLOR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_BKGNDCOLOR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LABELCOLOR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructGRDTableContents(CONST CDatabaseTableView *pView, CONST CGRDLayout *pGRDLayout, CStringArray &szContents) CONST
{
	INT  nGrids[2];
	INT  nTicks[2];
	CStringTools  cStringTools;

	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_NUMBER)), pGRDLayout->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DESCR)), pGRDLayout->GetTitle());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TYPE)), TranslateGRDType(pGRDLayout->GetType(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE)), TranslateGRDPlotType(pGRDLayout->GetMode(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MODE)), TranslateGRDPlotMode(pGRDLayout->GetMode(), FALSE));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DAYS)), (pGRDLayout->GetDuration() > 0) ? cStringTools.ConvertLongIntToString(pGRDLayout->GetDuration().GetDays()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HOURS)), (pGRDLayout->GetDuration() > 0) ? cStringTools.ConvertIntToString(pGRDLayout->GetDuration().GetHours()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MINUTES)), (pGRDLayout->GetDuration() > 0) ? cStringTools.ConvertIntToString(pGRDLayout->GetDuration().GetMinutes()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_INTERVAL)), (pGRDLayout->GetInterval() > 0) ? cStringTools.ConvertLongIntToString(pGRDLayout->GetInterval().GetTotalMinutes()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_UPDATE)), (pGRDLayout->GetUpdateInterval() > 0) ? cStringTools.ConvertLongIntToString(pGRDLayout->GetUpdateInterval().GetTotalMinutes()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_WIDTH)), (pGRDLayout->GetPlotSize().cx > 0) ? cStringTools.ConvertIntToString(pGRDLayout->GetPlotSize().cx) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HEIGHT)), (pGRDLayout->GetPlotSize().cy > 0) ? cStringTools.ConvertIntToString(pGRDLayout->GetPlotSize().cy) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XGRIDS)), (pGRDLayout->GetGrids(nGrids[0], nGrids[1])) ? cStringTools.ConvertIntToString(nGrids[0]) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YGRIDS)), (pGRDLayout->GetGrids(nGrids[0], nGrids[1]) && pGRDLayout->GetType() != GRDLAYOUT_TYPE_STRIPCHART) ? cStringTools.ConvertIntToString(nGrids[1]) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XTICKS)), (pGRDLayout->GetTicks(nTicks[0], nTicks[1])) ? cStringTools.ConvertIntToString(nTicks[0]) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YTICKS)), (pGRDLayout->GetTicks(nTicks[0], nTicks[1])) ? cStringTools.ConvertIntToString(nTicks[1]) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH)), (pGRDLayout->GetGridsWidth() > 0) ? cStringTools.ConvertIntToString(pGRDLayout->GetGridsWidth()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH)), (pGRDLayout->GetTicksWidth() > 0) ? cStringTools.ConvertIntToString(pGRDLayout->GetTicksWidth()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSCOLOR)), CTableViewComboBoxColorsCtrl::TranslateColor(pGRDLayout->GetGridsColor()));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSCOLOR)), CTableViewComboBoxColorsCtrl::TranslateColor(pGRDLayout->GetTicksColor()));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_BKGNDCOLOR)), CTableViewComboBoxColorsCtrl::TranslateColor(pGRDLayout->GetBackgroundColor()));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LABELCOLOR)), CTableViewComboBoxColorsCtrl::TranslateColor(pGRDLayout->GetLabelColor()));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS)), cStringTools.ConvertIntToString(pGRDLayout->GetParameters()));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_STATUS)), TranslateGRDStatus(pGRDLayout->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructGRDTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CGRDLayout  *pGRDLayout;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructGRDTableContents(pView, szContents); (pGRDLayout = pView->m_pGRDLayouts[0].GetAt(pView->m_pGRDLayouts[0].Find(pszName))); )
	{
		ConstructGRDTableContents(pView, pGRDLayout, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_NUMBER)), CString(STRING(IDS_DATABASE_TABLE_GPF_NUMBER)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_NUMBER_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_NUMBER))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DESCR)), CString(STRING(IDS_DATABASE_TABLE_GPF_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)), CString(STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_LAYOUT_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LAYOUT))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TYPE)), CString(STRING(IDS_DATABASE_TABLE_GPF_TYPE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_TYPE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TYPE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE)), CString(STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MODE)), CString(STRING(IDS_DATABASE_TABLE_GPF_MODE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_MODE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MODE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DAYS)), CString(STRING(IDS_DATABASE_TABLE_GPF_DAYS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_DAYS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DAYS))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HOURS)), CString(STRING(IDS_DATABASE_TABLE_GPF_HOURS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_HOURS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HOURS))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MINUTES)), CString(STRING(IDS_DATABASE_TABLE_GPF_MINUTES)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_MINUTES_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MINUTES))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_INTERVAL)), CString(STRING(IDS_DATABASE_TABLE_GPF_INTERVAL)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_INTERVAL_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_INTERVAL))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_UPDATE)), CString(STRING(IDS_DATABASE_TABLE_GPF_UPDATE)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_UPDATE_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_UPDATE))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_WIDTH)), CString(STRING(IDS_DATABASE_TABLE_GPF_WIDTH)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_WIDTH_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_WIDTH))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HEIGHT)), CString(STRING(IDS_DATABASE_TABLE_GPF_HEIGHT)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_HEIGHT_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HEIGHT))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XGRIDS)), CString(STRING(IDS_DATABASE_TABLE_GPF_XGRIDS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_XGRIDS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XGRIDS))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YGRIDS)), CString(STRING(IDS_DATABASE_TABLE_GPF_YGRIDS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_YGRIDS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YGRIDS))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XTICKS)), CString(STRING(IDS_DATABASE_TABLE_GPF_XTICKS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_XTICKS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XTICKS))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YTICKS)), CString(STRING(IDS_DATABASE_TABLE_GPF_YTICKS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_YTICKS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YTICKS))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH)), CString(STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH)), CString(STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSCOLOR)), CString(STRING(IDS_DATABASE_TABLE_GPF_GRIDSCOLOR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_GRIDSCOLOR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSCOLOR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSCOLOR)), CString(STRING(IDS_DATABASE_TABLE_GPF_TICKSCOLOR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_TICKSCOLOR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSCOLOR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_BKGNDCOLOR)), CString(STRING(IDS_DATABASE_TABLE_GPF_BKGNDCOLOR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_BKGNDCOLOR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_BKGNDCOLOR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LABELCOLOR)), CString(STRING(IDS_DATABASE_TABLE_GPF_LABELCOLOR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_LABELCOLOR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LABELCOLOR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS)), CString(STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_STATUS)), CString(STRING(IDS_DATABASE_TABLE_GPF_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_GPF_STATUS_DESCRIPTION)));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_NUMBER)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)), TAS_TYPE_SUBTABLE);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MODE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DAYS)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HOURS)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MINUTES)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_INTERVAL)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_UPDATE)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_WIDTH)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HEIGHT)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XGRIDS)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YGRIDS)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XTICKS)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YTICKS)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSCOLOR)), TAS_TYPE_COMBOCOLORSBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSCOLOR)), TAS_TYPE_COMBOCOLORSBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_BKGNDCOLOR)), TAS_TYPE_COMBOCOLORSBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LABELCOLOR)), TAS_TYPE_COMBOCOLORSBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_NUMBER)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_NUMBER)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MODE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MODE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DAYS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DAYS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HOURS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HOURS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MINUTES)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MINUTES)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_INTERVAL)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_INTERVAL)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_UPDATE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_UPDATE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_WIDTH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_WIDTH)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HEIGHT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HEIGHT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XGRIDS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XGRIDS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YGRIDS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YGRIDS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XTICKS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XTICKS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YTICKS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YTICKS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSCOLOR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSCOLOR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSCOLOR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSCOLOR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_BKGNDCOLOR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_BKGNDCOLOR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LABELCOLOR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LABELCOLOR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_NUMBER)), STRING(IDS_DATABASE_TABLE_GPF_NUMBER_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DESCR)), STRING(IDS_DATABASE_TABLE_GPF_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)), STRING(IDS_DATABASE_TABLE_GPF_LAYOUT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TYPE)), STRING(IDS_DATABASE_TABLE_GPF_TYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE)), STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MODE)), STRING(IDS_DATABASE_TABLE_GPF_MODE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DAYS)), STRING(IDS_DATABASE_TABLE_GPF_DAYS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HOURS)), STRING(IDS_DATABASE_TABLE_GPF_HOURS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MINUTES)), STRING(IDS_DATABASE_TABLE_GPF_MINUTES_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_INTERVAL)), STRING(IDS_DATABASE_TABLE_GPF_INTERVAL_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_UPDATE)), STRING(IDS_DATABASE_TABLE_GPF_UPDATE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_WIDTH)), STRING(IDS_DATABASE_TABLE_GPF_WIDTH_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HEIGHT)), STRING(IDS_DATABASE_TABLE_GPF_HEIGHT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XGRIDS)), STRING(IDS_DATABASE_TABLE_GPF_XGRIDS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YGRIDS)), STRING(IDS_DATABASE_TABLE_GPF_YGRIDS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XTICKS)), STRING(IDS_DATABASE_TABLE_GPF_XTICKS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YTICKS)), STRING(IDS_DATABASE_TABLE_GPF_YTICKS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH)), STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH)), STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSCOLOR)), STRING(IDS_DATABASE_TABLE_GPF_GRIDSCOLOR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSCOLOR)), STRING(IDS_DATABASE_TABLE_GPF_TICKSCOLOR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_BKGNDCOLOR)), STRING(IDS_DATABASE_TABLE_GPF_BKGNDCOLOR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LABELCOLOR)), STRING(IDS_DATABASE_TABLE_GPF_LABELCOLOR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS)), STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_STATUS)), STRING(IDS_DATABASE_TABLE_GPF_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_NUMBER)), Varchar(GetGRDNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DESCR)), Varchar(GetGRDTitleLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TYPE)), Char(GetGRDTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_SUBTYPE)), Char(GetGRDPlotTypeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MODE)), Char(GetGRDPlotModeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_DAYS)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HOURS)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_MINUTES)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_INTERVAL)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_UPDATE)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_WIDTH)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_HEIGHT)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XGRIDS)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YGRIDS)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_XTICKS)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_YTICKS)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSWIDTH)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSWIDTH)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_GRIDSCOLOR)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_TICKSCOLOR)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_BKGNDCOLOR)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_LABELCOLOR)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_PARAMETERS)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPF), STRING(IDS_DATABASE_TABLE_GPF_STATUS)), Char(GetGRDStatusLength()));
	szDescriptions.InsertAt(0, STRING(IDS_DATABASE_TABLE_GPF_COMMENTS));
	szDataTypes.InsertAt(0, NotApplicable());
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructGRDLayoutTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	CUIntArray  nColumns;

	szContents.RemoveAll();
	nColumns.Add(GRDLAYOUT_TITLEITEMS_DEFAULT);
	szContents.Add(TranslateGRDColumns(nColumns, FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructGRDLayoutTableContents(CONST CDatabaseTableView *pView, CONST CGRDLayout *pGRDLayout, CStringArray &szContents) CONST
{
	CUIntArray  nColumns;

	for (szContents.RemoveAll(); pGRDLayout->GetColumns(nColumns) > 0 || !nColumns.Add(GRDLAYOUT_TITLEITEMS_DEFAULT); )
	{
		szContents.Add(TranslateGRDColumns(nColumns, FALSE));
		break;
	}
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructGRDLayoutTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	INT  nCol;
	INT  nCols;
	INT  nPos[2];
	CGRDLayout  *pGRDLayout;
	CStringArray  szColumns;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructGRDLayoutTableContents(pView, szContents); (pGRDLayout = pView->m_pGRDLayouts[0].GetAt(pView->m_pGRDLayouts[0].Find(pszName))); )
	{
		ConstructGRDLayoutTableContents(pView, pGRDLayout, szContents);
		break;
	}
	for (nPos[0] = 0; (nPos[1] = szContents.GetAt(szContents.GetUpperBound()).Mid(nPos[0]).Find(TAB)) >= 0 || !szContents.GetAt(szContents.GetUpperBound()).Mid(nPos[0]).IsEmpty(); nPos[0] += nPos[1] + 1)
	{
		szColumns.Add((nPos[1] >= 0) ? szContents.GetAt(szContents.GetUpperBound()).Mid(nPos[0], nPos[1]) : szContents.GetAt(szContents.GetUpperBound()).Mid(nPos[0]));
		if (nPos[1] < 0) break;
	}
	for (nCol = 0, nCols = (INT)szColumns.GetSize(); nCol < nCols; nCol++)
	{
		nFormats.SetAtGrow(nCol, (!nCol) ? (TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER) : (TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER));
		nIDs.SetAtGrow(nCol, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT), STRING(IDS_DATABASE_TABLE_GPF_LAYOUT)));
		szDescriptions.SetAtGrow(nCol, STRING(IDS_DATABASE_TABLE_GPF_LAYOUT_COMMENTS));
		szDataTypes.SetAtGrow(nCol, Integer());
	}
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructGRDParametersTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructGRDParametersTableContents(CONST CDatabaseTableView *pView, CONST CGRDLayout *pGRDLayout, INT nCount, CStringArray &szContents) CONST
{
	INT  nParameter;
	INT  nParameters;
	double  fLow, fHigh;
	CString  szParameter;
	CStringTools  cStringTools;
	CGRDLayoutParameter  *pGRDLayoutParameter;

	for (nParameter = 0, nParameters = (nCount >= 0) ? (INT)min(pGRDLayout->GetSize(), nCount) : (INT)pGRDLayout->GetSize(), szContents.RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pGRDLayoutParameter = pGRDLayout->GetAt(nParameter)))
		{
			szParameter = pGRDLayoutParameter->GetName();
			szParameter += TAB + pGRDLayoutParameter->GetComment();
			szParameter += (pGRDLayoutParameter->GetPosition() >= 0) ? (TAB + cStringTools.ConvertIntToString(pGRDLayoutParameter->GetPosition())) : CString(TAB);
			szParameter += (pGRDLayoutParameter->GetOccurrence() >= 0) ? (TAB + cStringTools.ConvertIntToString(pGRDLayoutParameter->GetOccurrence())) : CString(TAB);
			szParameter += TAB + TranslateGRDParameterMode(pGRDLayoutParameter->GetAttributes(), FALSE);
			szParameter += (pGRDLayoutParameter->GetDigits() > 0) ? (TAB + cStringTools.ConvertIntToString(pGRDLayoutParameter->GetDigits())) : CString(TAB);
			szParameter += (pGRDLayoutParameter->GetRange(fLow, fHigh) && !isnan(fLow)) ? (TAB + cStringTools.ConvertFloatToString(fLow)) : CString(TAB);
			szParameter += (pGRDLayoutParameter->GetRange(fLow, fHigh) && !isnan(fHigh)) ? (TAB + cStringTools.ConvertFloatToString(fHigh)) : CString(TAB);
			szParameter += TAB + CTableViewComboBoxColorsCtrl::TranslateColor(pGRDLayoutParameter->GetColor());
			szParameter += (pGRDLayoutParameter->GetLineWidth() > 0) ? (TAB + cStringTools.ConvertIntToString(pGRDLayoutParameter->GetLineWidth())) : CString(TAB);
			szParameter += TAB + CTableViewComboBoxLineStylesCtrl::TranslateLineStyle(pGRDLayoutParameter->GetLineStyle());
			szParameter += TAB + CTableViewComboBoxLineSymbolsCtrl::TranslateLineSymbol(pGRDLayoutParameter->GetLineSymbol());
			szContents.Add(szParameter);
		}
	}
	return((!szContents.GetSize()) ? ConstructGRDParametersTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructGRDParametersTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CGRDLayout  *pGRDLayout;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructGRDParametersTableContents(pView, szContents); (pGRDLayout = pView->m_pGRDLayouts[0].GetAt(pView->m_pGRDLayouts[0].Find(pszName))); )
	{
		ConstructGRDParametersTableContents(pView, pGRDLayout, nCount, szContents);
		break;
	}
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_PNAME)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_COMMENT)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_POSITION)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_COMM)), TAS_TYPE_DECNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALMODE)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALCHARS)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALMINIMUM)), TAS_TYPE_DECNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALMAXIMUM)), TAS_TYPE_DECNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_COLOR)), TAS_TYPE_COMBOCOLORSBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH)), TAS_TYPE_RAWNUMBEREDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_LINESTYLE)), TAS_TYPE_COMBOLINESTYLESBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_LINESYMBOL)), TAS_TYPE_COMBOLINESYMBOLSBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_PNAME)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_PNAME)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_COMMENT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_COMMENT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_POSITION)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_POSITION)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_COMM)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_COMM)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALMODE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALMODE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALCHARS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALCHARS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALMINIMUM)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALMINIMUM)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALMAXIMUM)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALMAXIMUM)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_COLOR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_COLOR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_LINESTYLE)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_LINESTYLE)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_LINESYMBOL)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_LINESYMBOL)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_PNAME)), STRING(IDS_DATABASE_TABLE_GPFP_PNAME_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_COMMENT)), STRING(IDS_DATABASE_TABLE_GPFP_COMMENT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_POSITION)), STRING(IDS_DATABASE_TABLE_GPFP_POSITION_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_COMM)), STRING(IDS_DATABASE_TABLE_GPFP_COMM_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALMODE)), STRING(IDS_DATABASE_TABLE_GPFP_VALMODE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALCHARS)), STRING(IDS_DATABASE_TABLE_GPFP_VALCHARS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALMINIMUM)), STRING(IDS_DATABASE_TABLE_GPFP_VALMINIMUM_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALMAXIMUM)), STRING(IDS_DATABASE_TABLE_GPFP_VALMAXIMUM_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_COLOR)), STRING(IDS_DATABASE_TABLE_GPFP_COLOR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH)), STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_LINESTYLE)), STRING(IDS_DATABASE_TABLE_GPFP_LINESTYLE_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_LINESYMBOL)), STRING(IDS_DATABASE_TABLE_GPFP_LINESYMBOL_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_PNAME)), Varchar(GetGRDParameterTagLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_COMMENT)), Varchar(GetGRDParameterCommentLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_POSITION)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_COMM)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALMODE)), Char(GetGRDParameterModeLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALCHARS)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALMINIMUM)), Float());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_VALMAXIMUM)), Float());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_COLOR)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_LINEWIDTH)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_LINESTYLE)), Char(GetGRDParameterLineStyleLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_GPFP), STRING(IDS_DATABASE_TABLE_GPFP_LINESYMBOL)), Char(GetGRDParameterLineSymbolLength()));
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructPODTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_NUMBER)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_DESCR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR)), EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_STATUS)), EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructPODTableContents(CONST CDatabaseTableView *pView, CONST CPODLayout *pPODLayout, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_NUMBER)), pPODLayout->GetName());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_DESCR)), pPODLayout->GetTitle());
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR)), (pPODLayout->GetExpressionColor() != GetSysColor(COLOR_WINDOW)) ? CTableViewComboBoxColorsCtrl::TranslateColor(pPODLayout->GetExpressionColor()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR)), (pPODLayout->GetParametersColor() != GetSysColor(COLOR_WINDOW)) ? CTableViewComboBoxColorsCtrl::TranslateColor(pPODLayout->GetParametersColor()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR)), (pPODLayout->GetFunctionsColor() != GetSysColor(COLOR_WINDOW)) ? CTableViewComboBoxColorsCtrl::TranslateColor(pPODLayout->GetFunctionsColor()) : EMPTYSTRING);
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_STATUS)), TranslatePODStatus(pPODLayout->GetStatus(), FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructPODTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	CPODLayout  *pPODLayout;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructPODTableContents(pView, szContents); (pPODLayout = pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pszName))); )
	{
		ConstructPODTableContents(pView, pPODLayout, szContents);
		break;
	}
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_NUMBER)), CString(STRING(IDS_DATABASE_TABLE_PPF_NUMBER)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PPF_NUMBER_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_NUMBER))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_DESCR)), CString(STRING(IDS_DATABASE_TABLE_PPF_DESCR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PPF_DESCR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_DESCR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)), CString(STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PPF_LAYOUT_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_LAYOUT))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)), CString(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR)), CString(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)), CString(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR)), CString(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)), CString(STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR)), CString(STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR))));
	szContents.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_STATUS)), CString(STRING(IDS_DATABASE_TABLE_PPF_STATUS)) + TAB + CString(STRING(IDS_DATABASE_TABLE_PPF_STATUS_DESCRIPTION)) + TAB + szContents.GetAt(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_STATUS))));
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_NUMBER)), TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_DESCR)), TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)), TAS_TYPE_SUBTABLE);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)), TAS_TYPE_SUBTABLE);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR)), TAS_TYPE_COMBOCOLORSBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)), TAS_TYPE_SUBTABLE);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR)), TAS_TYPE_COMBOCOLORSBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)), TAS_TYPE_SUBTABLE);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR)), TAS_TYPE_COMBOCOLORSBOX | TAS_ALIGN_VCENTER);
	nFormats.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_STATUS)), TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_NUMBER)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_NUMBER)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_DESCR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_DESCR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR)));
	nIDs.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_STATUS)), TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_STATUS)));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_NUMBER)), STRING(IDS_DATABASE_TABLE_PPF_NUMBER_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_DESCR)), STRING(IDS_DATABASE_TABLE_PPF_DESCR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)), STRING(IDS_DATABASE_TABLE_PPF_LAYOUT_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR)), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR)), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR)), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR_COMMENTS));
	szDescriptions.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_STATUS)), STRING(IDS_DATABASE_TABLE_PPF_STATUS_COMMENTS));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_NUMBER)), Varchar(GetPODNameLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_DESCR)), Varchar(GetPODTitleLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)), Varchar(GetPODExpressionStackLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONCOLOR)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)), Varchar(GetPODParametersListLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERSCOLOR)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)), Varchar(GetPODFunctionsListLength()));
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONSCOLOR)), Integer());
	szDataTypes.SetAtGrow(TranslateTableFieldToIndex(pView, STRING(IDS_DATABASE_TABLE_PPF), STRING(IDS_DATABASE_TABLE_PPF_STATUS)), Char(GetPODStatusLength()));
	szDescriptions.InsertAt(0, STRING(IDS_DATABASE_TABLE_PPF_COMMENTS));
	szDataTypes.InsertAt(0, NotApplicable());
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructPODLayoutTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	CUIntArray  nColumns;

	szContents.RemoveAll();
	nColumns.Add(PODLAYOUT_TITLEITEMS_DEFAULT);
	szContents.Add(TranslatePODColumns(nColumns, FALSE));
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructPODLayoutTableContents(CONST CDatabaseTableView *pView, CONST CPODLayout *pPODLayout, CStringArray &szContents) CONST
{
	CUIntArray  nColumns;

	for (szContents.RemoveAll(); nColumns.Add((pPODLayout->GetColumns() != 0) ? pPODLayout->GetColumns() : PODLAYOUT_TITLEITEMS_DEFAULT) >= 0; )
	{
		szContents.Add(TranslatePODColumns(nColumns, FALSE));
		break;
	}
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructPODLayoutTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	INT  nCol;
	INT  nCols;
	INT  nPos[2];
	CPODLayout  *pPODLayout;
	CStringArray  szColumns;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructPODLayoutTableContents(pView, szContents); (pPODLayout = pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pszName))); )
	{
		ConstructPODLayoutTableContents(pView, pPODLayout, szContents);
		break;
	}
	for (nPos[0] = 0; (nPos[1] = szContents.GetAt(szContents.GetUpperBound()).Mid(nPos[0]).Find(TAB)) >= 0 || !szContents.GetAt(szContents.GetUpperBound()).Mid(nPos[0]).IsEmpty(); nPos[0] += nPos[1] + 1)
	{
		szColumns.Add((nPos[1] >= 0) ? szContents.GetAt(szContents.GetUpperBound()).Mid(nPos[0], nPos[1]) : szContents.GetAt(szContents.GetUpperBound()).Mid(nPos[0]));
		if (nPos[1] < 0) break;
	}
	for (nCol = 0, nCols = (INT)szColumns.GetSize(); nCol < nCols; nCol++)
	{
		nFormats.SetAtGrow(nCol, (!nCol) ? (TAS_TYPE_TEXT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER) : (TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER));
		nIDs.SetAtGrow(nCol, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT), STRING(IDS_DATABASE_TABLE_PPF_LAYOUT)));
		szDescriptions.SetAtGrow(nCol, STRING(IDS_DATABASE_TABLE_PPF_LAYOUT_COMMENTS));
		szDataTypes.SetAtGrow(nCol, Integer());
	}
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructPODExpressionStackTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructPODExpressionStackTableContents(CONST CDatabaseTableView *pView, CONST CPODLayout *pPODLayout, INT nCount, CStringArray &szContents) CONST
{
	INT  nSample;
	INT  nExpression;
	INT  nExpressions;
	CString  szParameter;
	CString  szExpression;
	ULONGLONG  nAttributes;
	CPODLayoutExpression  *pPODLayoutExpression;

	for (nExpression = 0, nExpressions = (nCount >= 0) ? (INT)min(pPODLayout->GetSize(), nCount) : (INT)pPODLayout->GetSize(), szContents.RemoveAll(); nExpression < nExpressions; nExpression++)
	{
		for (; (pPODLayoutExpression = pPODLayout->GetAt(nExpression)); )
		{
			if (pPODLayoutExpression->IsFunction())
			{
				szContents.Add(pPODLayoutExpression->GetFunction());
				break;
			}
			if (pPODLayoutExpression->IsOperator())
			{
				szContents.Add(pPODLayoutExpression->GetOperator());
				break;
			}
			if (pPODLayoutExpression->IsParameter() && pPODLayoutExpression->GetParameter(szParameter, nSample, nAttributes))
			{
				szExpression.Format(STRING(IDS_DATABASE_TABLE_PPF_PARAMETERFORMAT), (LPCTSTR)szParameter, nSample, nAttributes);
				szContents.Add((nSample != 0 || nAttributes) ? szExpression : szParameter);
				break;
			}
			if (pPODLayoutExpression->IsNumber())
			{
				szContents.Add(pPODLayoutExpression->GetNumberAsText());
				break;
			}
			szContents.Add(EMPTYSTRING);
			break;
		}
	}
	return((!szContents.GetSize()) ? ConstructPODExpressionStackTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructPODExpressionStackTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	INT  nExpression;
	INT  nExpressions;
	CPODLayout  *pPODLayout;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructPODExpressionStackTableContents(pView, szContents); (pPODLayout = pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pszName))); )
	{
		ConstructPODExpressionStackTableContents(pView, pPODLayout, nCount, szContents);
		break;
	}
	for (nExpression = 0, nExpressions = (INT)szContents.GetSize(); nExpression < nExpressions || !nExpression; nExpression++)
	{
		nFormats.SetAtGrow(nExpression, TAS_TYPE_COMBOEDITBOX | TAS_ALIGN_VCENTER);
		nIDs.SetAtGrow(nExpression, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK), STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK)));
		szDescriptions.SetAtGrow(nExpression, STRING(IDS_DATABASE_TABLE_PPF_EXPRESSIONSTACK_COMMENTS));
		szDataTypes.SetAtGrow(nExpression, Varchar(GetPODExpressionStackLength()));
	}
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructPODParametersTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructPODParametersTableContents(CONST CDatabaseTableView *pView, CONST CPODLayout *pPODLayout, INT nCount, CStringArray &szContents) CONST
{
	for (pPODLayout->GetParameters(szContents); nCount >= 0; )
	{
		szContents.SetSize(min(nCount, szContents.GetSize()));
		break;
	}
	return((!szContents.GetSize()) ? ConstructPODParametersTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructPODParametersTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	INT  nParameter;
	INT  nParameters;
	CPODLayout  *pPODLayout;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructPODParametersTableContents(pView, szContents); (pPODLayout = pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pszName))); )
	{
		ConstructPODParametersTableContents(pView, pPODLayout, nCount, szContents);
		break;
	}
	for (nParameter = 0, nParameters = (INT)szContents.GetSize(); nParameter < nParameters || !nParameter; nParameter++)
	{
		nIDs.SetAtGrow(nParameter, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS), STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS)));
		szDescriptions.SetAtGrow(nParameter, STRING(IDS_DATABASE_TABLE_PPF_PARAMETERS_COMMENTS));
		nFormats.SetAtGrow(nParameter, TAS_TYPE_EDIT | TAS_ALIGN_LEFT | TAS_ALIGN_VCENTER);
		szDataTypes.SetAtGrow(nParameter, Varchar(GetPODParameterTagLength()));
	}
	return((INT)szContents.GetSize());
}

INT CALTELDatabaseEngine::ConstructPODFunctionsTableContents(CONST CDatabaseTableView *pView, CStringArray &szContents) CONST
{
	szContents.RemoveAll();
	szContents.Add(EMPTYSTRING);
	return((INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructPODFunctionsTableContents(CONST CDatabaseTableView *pView, CONST CPODLayout *pPODLayout, INT nCount, CStringArray &szContents) CONST
{
	for (pPODLayout->GetFunctions(szContents); nCount >= 0; )
	{
		szContents.SetSize(min(nCount, szContents.GetSize()));
		break;
	}
	return((!szContents.GetSize()) ? ConstructPODFunctionsTableContents(pView, szContents) : (INT)szContents.GetSize());
}
INT CALTELDatabaseEngine::ConstructPODFunctionsTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszName, INT nCount, CStringArray &szContents, CUIntArray &nFormats, CUIntArray &nIDs, CStringArray &szDescriptions, CStringArray &szDataTypes) CONST
{
	INT  nFunction;
	INT  nFunctions;
	CPODLayout  *pPODLayout;

	for (szContents.RemoveAll(), nFormats.RemoveAll(), nIDs.RemoveAll(), szDescriptions.RemoveAll(), szDataTypes.RemoveAll(), ConstructPODFunctionsTableContents(pView, szContents); (pPODLayout = pView->m_pPODLayouts[0].GetAt(pView->m_pPODLayouts[0].Find(pszName))); )
	{
		ConstructPODFunctionsTableContents(pView, pPODLayout, nCount, szContents);
		break;
	}
	for (nFunction = 0, nFunctions = (INT)szContents.GetSize(); nFunction < nFunctions || !nFunction; nFunction++)
	{
		nIDs.SetAtGrow(nFunction, TranslateTableFieldToID(pView, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS), STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS)));
		szDescriptions.SetAtGrow(nFunction, STRING(IDS_DATABASE_TABLE_PPF_FUNCTIONS_COMMENTS));
		nFormats.SetAtGrow(nFunction, TAS_TYPE_COMBOLISTBOX | TAS_ALIGN_VCENTER);
		szDataTypes.SetAtGrow(nFunction, Varchar(GetPODFunctionLength()));
	}
	return((INT)szContents.GetSize());
}

VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTMPacketHeader *pDatabaseTMPacketHeader) CONST
{
	return;
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTMPacketStream *pDatabaseTMPacketStream) CONST
{
	return;
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTMPacketParameter *pDatabaseTMPacketParameter) CONST
{
	pDatabaseTMPacketParameter->SetBytePos(-1);
	pDatabaseTMPacketParameter->SetBitPos(-1);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTCPacketParameter *pDatabaseTCPacketParameter) CONST
{
	pDatabaseTCPacketParameter->SetBytePos(-1);
	pDatabaseTCPacketParameter->SetBitPos(-1);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTCFunctionElement *pDatabaseTCFunctionElement) CONST
{
	pDatabaseTCFunctionElement->SetBytePos(-1);
	pDatabaseTCFunctionElement->SetBitPos(-1);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTCFunctionBlockElement *pDatabaseTCFunctionBlockElement) CONST
{
	return;
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTCPreExeGroupParameter *pDatabaseTCPreExeGroupParameter) CONST
{
	return;
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTCExeVerGroupParameter *pDatabaseTCExeVerGroupParameter) CONST
{
	return;
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTCSequenceEntry *pDatabaseTCSequenceEntry) CONST
{
	return;
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTCSequenceEntryParameter *pDatabaseTCSequenceEntryParameter) CONST
{
	pDatabaseTCSequenceEntryParameter->SetBitPos(-1);
	pDatabaseTCSequenceEntryParameter->SetBytePos(-1);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseOBProcessorMemoryArea *pDatabaseOBProcessorMemoryArea) CONST
{
	CDatabaseOBProcessorMemoryAreaCheckSum  cDatabaseOBProcessorMemoryAreaCheckSum;

	EmptyTableRow(&cDatabaseOBProcessorMemoryAreaCheckSum);
	pDatabaseOBProcessorMemoryArea->SetCheckSum(&cDatabaseOBProcessorMemoryAreaCheckSum);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseOBProcessorMemoryAreaBlock *pDatabaseOBProcessorMemoryAreaBlock) CONST
{
	pDatabaseOBProcessorMemoryAreaBlock->SetBitOffset(-1);
	pDatabaseOBProcessorMemoryAreaBlock->SetBitWidth(0);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseOBProcessorMemoryImageBlock *pDatabaseOBProcessorMemoryImageBlock) CONST
{
	return;
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseOBProcessorMemoryAreaCheckSum *pDatabaseOBProcessorMemoryAreaCheckSum) CONST
{
	pDatabaseOBProcessorMemoryAreaCheckSum->SetSeed(-1);
	pDatabaseOBProcessorMemoryAreaCheckSum->SetDestination(-1);
	pDatabaseOBProcessorMemoryAreaCheckSum->SetAddressRange(-1, -1, -1);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseOBProcessorMemoryAreaCatalogueEntry *pDatabaseOBProcessorMemoryAreaCatalogueEntry) CONST
{
	return;
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTMNumCalPoint *pDatabaseTMNumCalPoint) CONST
{
	pDatabaseTMNumCalPoint->SetPoint(NAN, NAN);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTMTxtCalPoint *pDatabaseTMTxtCalPoint) CONST
{
	pDatabaseTMTxtCalPoint->SetRange(NAN, NAN, EMPTYSTRING);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTMNumOolLimit *pDatabaseTMNumOolLimit) CONST
{
	pDatabaseTMNumOolLimit->SetRange(TMOOLLIMIT_TYPE_NONE, NAN, NAN);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTMTxtOolLimit *pDatabaseTMTxtOolLimit) CONST
{
	pDatabaseTMTxtOolLimit->SetRange(EMPTYSTRING, EMPTYSTRING);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTCParameter *pDatabaseTCParameter) CONST
{
	pDatabaseTCParameter->SetBitPos(-1);
	pDatabaseTCParameter->SetBytePos(-1);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTCNumCalPoint *pDatabaseTCNumCalPoint) CONST
{
	pDatabaseTCNumCalPoint->SetPoint(NAN, NAN);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTCTxtCalPoint *pDatabaseTCTxtCalPoint) CONST
{
	pDatabaseTCTxtCalPoint->SetRange(NAN, NAN, EMPTYSTRING);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTCNumOolLimit *pDatabaseTCNumOolLimit) CONST
{
	pDatabaseTCNumOolLimit->SetRange(TCOOLLIMIT_TYPE_NONE, NAN, NAN);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CDatabaseTCTxtOolLimit *pDatabaseTCTxtOolLimit) CONST
{
	pDatabaseTCTxtOolLimit->SetRange(EMPTYSTRING, EMPTYSTRING);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CANDLayoutParameter *pParameter) CONST
{
	pParameter->SetColor(-1);
	pParameter->SetAlignment(0);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CGRDLayoutParameter *pParameter) CONST
{
	pParameter->SetColor(-1);
	pParameter->SetLineWidth(0);
	pParameter->SetLineStyle(-1);
	pParameter->SetLineSymbol(-1);
	pParameter->SetOccurrence(-1);
}
VOID CALTELDatabaseEngine::EmptyTableRow(CPODLayoutExpression *pExpression) CONST
{
	return;
}

BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTMPacketHeader *pDatabaseTMPacketHeader) CONST
{
	CDatabaseTMPacketHeader  cDatabaseTMPacketHeader;

	EmptyTableRow(&cDatabaseTMPacketHeader);
	return((cDatabaseTMPacketHeader.Compare(pDatabaseTMPacketHeader)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTMPacketStream *pDatabaseTMPacketStream) CONST
{
	CDatabaseTMPacketStream  cDatabaseTMPacketStream;

	EmptyTableRow(&cDatabaseTMPacketStream);
	return((cDatabaseTMPacketStream.Compare(pDatabaseTMPacketStream)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTMPacketParameter *pDatabaseTMPacketParameter) CONST
{
	CDatabaseTMPacketParameter  cDatabaseTMPacketParameter;

	EmptyTableRow(&cDatabaseTMPacketParameter);
	return((cDatabaseTMPacketParameter.Compare(pDatabaseTMPacketParameter)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTCPacketParameter *pDatabaseTCPacketParameter) CONST
{
	CDatabaseTCPacketParameter  cDatabaseTCPacketParameter;

	EmptyTableRow(&cDatabaseTCPacketParameter);
	return((cDatabaseTCPacketParameter.Compare(pDatabaseTCPacketParameter)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTCFunctionElement *pDatabaseTCFunctionElement) CONST
{
	CDatabaseTCFunctionElement  cDatabaseTCFunctionElement;

	EmptyTableRow(&cDatabaseTCFunctionElement);
	return((cDatabaseTCFunctionElement.Compare(pDatabaseTCFunctionElement)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTCFunctionBlockElement *pDatabaseTCFunctionBlockElement) CONST
{
	CDatabaseTCFunctionBlockElement  cDatabaseTCFunctionBlockElement;

	EmptyTableRow(&cDatabaseTCFunctionBlockElement);
	return((cDatabaseTCFunctionBlockElement.Compare(pDatabaseTCFunctionBlockElement)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTCPreExeGroupParameter *pDatabaseTCPreExeGroupParameter) CONST
{
	CDatabaseTCPreExeGroupParameter  cDatabaseTCPreExeGroupParameter;

	EmptyTableRow(&cDatabaseTCPreExeGroupParameter);
	return((cDatabaseTCPreExeGroupParameter.Compare(pDatabaseTCPreExeGroupParameter)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTCExeVerGroupParameter *pDatabaseTCExeVerGroupParameter) CONST
{
	CDatabaseTCExeVerGroupParameter  cDatabaseTCExeVerGroupParameter;

	EmptyTableRow(&cDatabaseTCExeVerGroupParameter);
	return((cDatabaseTCExeVerGroupParameter.Compare(pDatabaseTCExeVerGroupParameter)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTCSequenceEntry *pDatabaseTCSequenceEntry) CONST
{
	CDatabaseTCSequenceEntry  cDatabaseTCSequenceEntry;

	EmptyTableRow(&cDatabaseTCSequenceEntry);
	return((cDatabaseTCSequenceEntry.Compare(pDatabaseTCSequenceEntry)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTCSequenceEntryParameter *pDatabaseTCSequenceEntryParameter) CONST
{
	CDatabaseTCSequenceEntryParameter  cDatabaseTCSequenceEntryParameter;

	EmptyTableRow(&cDatabaseTCSequenceEntryParameter);
	return((cDatabaseTCSequenceEntryParameter.Compare(pDatabaseTCSequenceEntryParameter)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseOBProcessorMemoryArea *pDatabaseOBProcessorMemoryArea) CONST
{
	CDatabaseOBProcessorMemoryArea  cDatabaseOBProcessorMemoryArea;

	EmptyTableRow(&cDatabaseOBProcessorMemoryArea);
	return((cDatabaseOBProcessorMemoryArea.Compare(pDatabaseOBProcessorMemoryArea)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseOBProcessorMemoryAreaBlock *pDatabaseOBProcessorMemoryAreaBlock) CONST
{
	CDatabaseOBProcessorMemoryAreaBlock  cDatabaseOBProcessorMemoryAreaBlock;

	EmptyTableRow(&cDatabaseOBProcessorMemoryAreaBlock);
	return((cDatabaseOBProcessorMemoryAreaBlock.Compare(pDatabaseOBProcessorMemoryAreaBlock)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseOBProcessorMemoryImageBlock *pDatabaseOBProcessorMemoryImageBlock) CONST
{
	CDatabaseOBProcessorMemoryImageBlock  cDatabaseOBProcessorMemoryImageBlock;

	EmptyTableRow(&cDatabaseOBProcessorMemoryImageBlock);
	return((cDatabaseOBProcessorMemoryImageBlock.Compare(pDatabaseOBProcessorMemoryImageBlock)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseOBProcessorMemoryAreaCheckSum *pDatabaseOBProcessorMemoryAreaCheckSum) CONST
{
	CDatabaseOBProcessorMemoryAreaCheckSum  cDatabaseOBProcessorMemoryAreaCheckSum;

	EmptyTableRow(&cDatabaseOBProcessorMemoryAreaCheckSum);
	return((cDatabaseOBProcessorMemoryAreaCheckSum.Compare(pDatabaseOBProcessorMemoryAreaCheckSum)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseOBProcessorMemoryAreaCatalogueEntry *pDatabaseOBProcessorMemoryAreaCatalogueEntry) CONST
{
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  cDatabaseOBProcessorMemoryAreaCatalogueEntry;

	EmptyTableRow(&cDatabaseOBProcessorMemoryAreaCatalogueEntry);
	return((cDatabaseOBProcessorMemoryAreaCatalogueEntry.Compare(pDatabaseOBProcessorMemoryAreaCatalogueEntry)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTMNumCalPoint *pDatabaseTMNumCalPoint) CONST
{
	CDatabaseTMNumCalPoint  cDatabaseTMNumCalPoint;

	EmptyTableRow(&cDatabaseTMNumCalPoint);
	return((cDatabaseTMNumCalPoint.Compare(pDatabaseTMNumCalPoint)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTMTxtCalPoint *pDatabaseTMTxtCalPoint) CONST
{
	CDatabaseTMTxtCalPoint  cDatabaseTMTxtCalPoint;

	EmptyTableRow(&cDatabaseTMTxtCalPoint);
	return((cDatabaseTMTxtCalPoint.Compare(pDatabaseTMTxtCalPoint)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTMNumOolLimit *pDatabaseTMNumOolLimit) CONST
{
	CDatabaseTMNumOolLimit  cDatabaseTMNumOolLimit;

	EmptyTableRow(&cDatabaseTMNumOolLimit);
	return((cDatabaseTMNumOolLimit.Compare(pDatabaseTMNumOolLimit)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTMTxtOolLimit *pDatabaseTMTxtOolLimit) CONST
{
	CDatabaseTMTxtOolLimit  cDatabaseTMTxtOolLimit;

	EmptyTableRow(&cDatabaseTMTxtOolLimit);
	return((cDatabaseTMTxtOolLimit.Compare(pDatabaseTMTxtOolLimit)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTCParameter *pDatabaseTCParameter) CONST
{
	CDatabaseTCParameter  cDatabaseTCParameter;

	EmptyTableRow(&cDatabaseTCParameter);
	return((cDatabaseTCParameter.Compare(pDatabaseTCParameter)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTCNumCalPoint *pDatabaseTCNumCalPoint) CONST
{
	CDatabaseTCNumCalPoint  cDatabaseTCNumCalPoint;

	EmptyTableRow(&cDatabaseTCNumCalPoint);
	return((cDatabaseTCNumCalPoint.Compare(pDatabaseTCNumCalPoint)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTCTxtCalPoint *pDatabaseTCTxtCalPoint) CONST
{
	CDatabaseTCTxtCalPoint  cDatabaseTCTxtCalPoint;

	EmptyTableRow(&cDatabaseTCTxtCalPoint);
	return((cDatabaseTCTxtCalPoint.Compare(pDatabaseTCTxtCalPoint)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTCNumOolLimit *pDatabaseTCNumOolLimit) CONST
{
	CDatabaseTCNumOolLimit  cDatabaseTCNumOolLimit;

	EmptyTableRow(&cDatabaseTCNumOolLimit);
	return((cDatabaseTCNumOolLimit.Compare(pDatabaseTCNumOolLimit)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CDatabaseTCTxtOolLimit *pDatabaseTCTxtOolLimit) CONST
{
	CDatabaseTCTxtOolLimit  cDatabaseTCTxtOolLimit;

	EmptyTableRow(&cDatabaseTCTxtOolLimit);
	return((cDatabaseTCTxtOolLimit.Compare(pDatabaseTCTxtOolLimit)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CANDLayoutParameter *pParameter) CONST
{
	CANDLayoutParameter  cParameter;

	EmptyTableRow(&cParameter);
	return((cParameter.Compare(pParameter)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CGRDLayoutParameter *pParameter) CONST
{
	CGRDLayoutParameter  cParameter;

	EmptyTableRow(&cParameter);
	return((cParameter.Compare(pParameter)) ? TRUE : FALSE);
}
BOOL CALTELDatabaseEngine::IsTableRowEmpty(CONST CPODLayoutExpression *pExpression) CONST
{
	CPODLayoutExpression  cExpression;

	EmptyTableRow(&cExpression);
	return((cExpression.Compare(pExpression)) ? TRUE : FALSE);
}

INT CALTELDatabaseEngine::CalcTableColumnWidth(CONST CStringArray &szItems) CONST
{
	INT  nItem;
	INT  nItems;
	INT  nCount;

	for (nItem = 0, nItems = (INT)szItems.GetSize(), nCount = 0; nItem < nItems; nItem++)
	{
		nCount = max(szItems.GetAt(nItem).GetLength(), nCount);
		continue;
	}
	return nCount;
}

VOID CALTELDatabaseEngine::ShowCompileMessages(CALTELDatabaseRecordset *pRecordset)
{
	INT  nError;
	INT  nErrors;
	INT  nWarning;
	INT  nWarnings;
	CStringArray  szNames;
	CStringArray  szInfos;
	CStringArray  szErrors;
	CStringArray  szWarnings;
	CLongUIntArray  nComponents;

	for (nError = 0, nErrors = pRecordset->GetErrors(szNames, szInfos, nComponents, szErrors), pRecordset->ResetErrors(); nError < nErrors; nError++)
	{
		ShowCompileMessage(szNames.GetAt(nError), szInfos.GetAt(nError), nComponents.GetAt(nError), szErrors.GetAt(nError), FALSE, TRUE, FALSE);
		continue;
	}
	for (nWarning = 0, nWarnings = pRecordset->GetWarnings(szNames, szInfos, nComponents, szWarnings), pRecordset->ResetWarnings(); nWarning < nWarnings; nWarning++)
	{
		ShowCompileMessage(szNames.GetAt(nWarning), szInfos.GetAt(nWarning), nComponents.GetAt(nWarning), szWarnings.GetAt(nWarning), TRUE, TRUE, FALSE);
		continue;
	}
}

BOOL CALTELDatabaseEngine::ShowCompileMessage(LPCTSTR pszMessage, BOOL bTimestamp, BOOL bAudition)
{
	return ShowCompileMessage(EMPTYSTRING, EMPTYSTRING, DATABASE_COMPONENT_NONE, pszMessage, FALSE, bTimestamp, bAudition);
}
BOOL CALTELDatabaseEngine::ShowCompileMessage(LPCTSTR pszTable, LPCTSTR pszInfo, ULONGLONG nComponent, LPCTSTR pszMessage, BOOL bWarning, BOOL bTimestamp, BOOL bAudition)
{
	return((m_pDatabaseCompileMessagesProc != (DATABASECOMPILEMESSAGESPROC)NULL) ? (*m_pDatabaseCompileMessagesProc)(pszTable, pszInfo, nComponent, pszMessage, bWarning, bTimestamp, bAudition) : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CALTELMemoryDumpsServiceEngine

UINT CALTELMemoryDumpsServiceEngine::EnumMemoryDumpSources() CONST
{
	/* Returns the types of supported memory dumps.
	The flags must be combinable as multiple types are possible.
	Example:
	#define MEMORYDUMP_SOURCE_IU   MAKELONG(1<<0,0)
	#define MEMORYDUMP_SOURCE_IU_MAB   MAKELONG(MEMORYDUMP_SOURCE_IU | (1<<1),0)
	#define MEMORYDUMP_SOURCE_IU_SPY   MAKELONG(MEMORYDUMP_SOURCE_IU | (1<<2),0)
	#define MEMORYDUMP_SOURCE_BSW   MAKELONG(1<<3,0)
	#define MEMORYDUMP_SOURCE_REG   MAKELONG(1<<4,0)
	#define MEMORYDUMP_SOURCE_APC   MAKELONG(1<<5,0)
	*/
	return 0;
}

INT CALTELMemoryDumpsServiceEngine::EnumMemoryDumpSources(CStringArray &szSources) CONST
{
	/* Enumerates the supported memory dumps as human-readable names.
	Example:
	"Intelligent User"
	"Memory Acquisition Buffer"
	"Basic Software"
	"Antenna Pointing Controller"
	*/
	szSources.RemoveAll();
	return((INT)szSources.GetSize());
}

UINT CALTELMemoryDumpsServiceEngine::TranslateMemoryDumpSource(LPCTSTR pszSource) CONST
{
	/* Translates a human-readable memory dump type into its corresponding numerical identifier. */
	return 0;
}
CString CALTELMemoryDumpsServiceEngine::TranslateMemoryDumpSource(UINT nSource) CONST
{
	/* Translates a numerical memory dump type identifier into its corresponding human-readable type. */
	return EMPTYSTRING;
}

UINT CALTELMemoryDumpsServiceEngine::DetermineMemoryDumpSource(LPCTSTR pszTag) CONST
{
	/* Determines the memory dump type associated with a certain telemetry packet identified by 'pszTag'. */
	return 0;
}

BOOL CALTELMemoryDumpsServiceEngine::IsMemoryDumpByAddressRange(UINT nSource) CONST
{
	/* Specifies if a memory dump consists of a normal address range (=TRUE) or individual registers (=FALSE). */
	return TRUE;
}

BOOL CALTELMemoryDumpsServiceEngine::IsMemoryDumpByRegisters(UINT nSource) CONST
{
	/* Specifies if a memory dump consists of individual registers (=TRUE) or a nromal address range (=FALSE). */
	return FALSE;
}

UINT CALTELMemoryDumpsServiceEngine::EnumMemoryDumpFormatTypes() CONST
{
	/* Returns the supported memory dump format types.
	The flags must be combinable as multiple format types are possible.
	Example:
	#define MEMORYDUMP_FORMATTYPE_DEFAULT   MAKELONG(0,1<<0)
	#define MEMORYDUMP_FORMATTYPE_CNES   MAKELONG(0,1<<1)
	*/
	return 0;
}
INT CALTELMemoryDumpsServiceEngine::EnumMemoryDumpFormatTypes(CStringArray &szTypes) CONST
{
	/* Enumerates the supported memory dump format types as human-readable names.
	Example:
	"Default"
	"CNES"
	*/
	szTypes.RemoveAll();
	return((INT)szTypes.GetSize());
}

UINT CALTELMemoryDumpsServiceEngine::TranslateMemoryDumpFormatType(LPCTSTR pszType) CONST
{
	/* Translates a human-readable memory dump format type into its corresponding numerical identifier. */
	return 0;
}
CString CALTELMemoryDumpsServiceEngine::TranslateMemoryDumpFormatType(UINT nType) CONST
{
	/* Translates a numerical memory dump format type identifier into its corresponding human-readable format type. */
	return EMPTYSTRING;
}

UINT CALTELMemoryDumpsServiceEngine::EnumMemoryDumpFileFormats(UINT nSource) CONST
{
	/* Returns the supported memory dump file formats.
	The flags must be combinable as multiple file formats are possible.
	Example:
	#define MEMORYDUMP_FILEFORMAT_NORMAL   (1<<0)
	#define MEMORYDUMP_FILEFORMAT_DESCRIPTIVE   (1<<1)
	#define MEMORYDUMP_FILEFORMAT_DELIMITED   (1<<2)
	*/
	return 0;
}

INT CALTELMemoryDumpsServiceEngine::ProcessTMUnit(CONST CTMEnvironment *pTMEnvironment, CONST CMemoryDumps &pMemoryDumps, BOOL bUnicode) CONST
{
	/* Checks the current telemetry packet (specified by 'pTMEnvironment') if there is any memory dump data to be extracted.
	This is achieved by consulting the provided pre-defined memory dump templates 'pMemoryDumps'.
	The variable 'bUnicode' specifies if the dumped data should be saved with Unicode encoding.
	*/
	return FALSE;
}

INT CALTELMemoryDumpsServiceEngine::ProcessTMDump(CMemoryDump *pMemoryDump, BOOL bUnicode) CONST
{
	/* Performs any additional processing on the extracted memory dump data (like e.g. formatting, saving).
	The variable 'bUnicode' specifies if the dumped data should be saved with Unicode encoding.
	*/
	return FALSE;
}

CString CALTELMemoryDumpsServiceEngine::GetMemoryDumpFileName(CONST CMemoryDump *pMemoryDump, LPCTSTR pszPrefix, CONST CTimeTag &tTimeTag, LPCTSTR pszExtension) CONST
{
	/* Constructs a unique memory dump file name. */
	return EMPTYSTRING;
}

CString CALTELMemoryDumpsServiceEngine::GetMemoryDumpFTPFileName(CONST CMemoryDump *pMemoryDump, UINT nFormat) CONST
{
	/* Constructs a FTP destination address for the memory dump based on the information contained in 'pMemoryDump'. */
	return EMPTYSTRING;
}

CString CALTELMemoryDumpsServiceEngine::GetMemoryDumpSearchFileName(LPCTSTR pszPrefix, LPCTSTR pszExtension) CONST
{
	/* Constructs a wild-card based memory dump search file name.
	Searching for stored memory dumps is required to send the results to the registered clients.
	*/
	return EMPTYSTRING;
}

CTimeSpan CALTELMemoryDumpsServiceEngine::GetMemoryDumpInterval(UINT nSource, UINT nSubSystem) CONST
{
	/* Returns the number of seconds between two consequtive memory dumps of a certain source and sub-system. */
	return 0;
}

UINT CALTELMemoryDumpsServiceEngine::GetMemoryDumpIntervalTolerance(UINT nSource, UINT nSubSystem) CONST
{
	/* Returns the number of milliseconds allowed as tolerance between two consequtive memory dumps of a certain source and sub-system. */
	return 0;
}

CString CALTELMemoryDumpsServiceEngine::FormatMemoryDumpData(CONST CMemoryDump *pMemoryDump, UINT nFormat) CONST
{
	/* Formats the memory dump data as specified by 'nFormat' which is one of the file formats returned by 'EnumMemoryDumpFileFormats'. */
	return EMPTYSTRING;
}

BOOL CALTELMemoryDumpsServiceEngine::IsServiceSupported() CONST
{
	/* Returns TRUE if memory dump processing is implemented; FALSE if not. */
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CALTELTPEPServiceEngine

CALTELTPEPServiceEngine::CALTELTPEPServiceEngine() : CTPEPServiceEngine()
{
	m_pCriticalSection = new CCriticalSection;
}

CALTELTPEPServiceEngine::~CALTELTPEPServiceEngine()
{
	delete m_pCriticalSection;
}

UINT CALTELTPEPServiceEngine::GetTPEPSupport() CONST
{
	return TPEP_TYPE_PACKETS | TPEP_TYPE_PARAMETERS;
}

UINT CALTELTPEPServiceEngine::GetTPEPSpacecraftID() CONST
{
	/* Returns a unique identification number for the spacecraft. */
	return 1;
}

CString CALTELTPEPServiceEngine::GetTPEPTimeKeyFormat() CONST
{
	return STRING(IDS_TPEP_TIMEKEY_REALTIMEFORMAT);
}

CString CALTELTPEPServiceEngine::GetTPEPRetrieveTimeKeyFormat() CONST
{
	return STRING(IDS_TPEP_TIMEKEY_RETRIEVEFORMAT);
}

INT CALTELTPEPServiceEngine::EnumTPEPTMUnits(CONST CDatabaseEngine *pDatabase, CONST CStringArray &szParameters, CStringArray &szTMUnits) CONST
{
	/* Returns all telemetry packets resp. their identification tag that contain one or more of the parameters specified by 'szParameters'.
	If no telemetry packets are found then return all of them.
	*/
	szTMUnits.RemoveAll();
	return((INT)szTMUnits.GetSize());
}

INT CALTELTPEPServiceEngine::EnumTPEPTMUnitParameters(CONST CDatabaseEngine *pDatabase, CONST CTMUnit *pTMUnit, CTPEPConnection *pConnection, BOOL bAll, CStringArray &szParameters) CONST
{
	/* Enumerates all telemetry parameters contained in the telemetry packet specified by 'pTMUnit'.
	Set the variable 'bAll' to TRUE if any derived parameters contained in the parameter list of the connection identified by 'pConnection' should be enumerated too (resp. added to 'szParameters').
	*/
	szParameters.RemoveAll();
	return 0;
}

BOOL CALTELTPEPServiceEngine::GenerateTPEPRandomData(CONST CDatabaseEngine *pDatabase, CTPEPConnection *pConnection, CTMEnvironment *pTMEnvironment)
{
	/* Generates random telemetry data in form of the telemetry packet specified by 'pTMEnvironment->GetTMUnit()'.
	The random data must be generated as raw data as well as individual value set to the corresponding entry of the 'pTMEnvironment->GetTMParameters()' array.
	*/
	return FALSE;
}

BOOL CALTELTPEPServiceEngine::Lock()
{
	return m_pCriticalSection->Lock();
}

BOOL CALTELTPEPServiceEngine::Unlock()
{
	return m_pCriticalSection->Unlock();
}


/////////////////////////////////////////////////////////////////////////////
// CALTELPFLPServiceEngine

BOOL CALTELPFLPServiceEngine::IsServiceSupported() CONST
{
	return TRUE;
}

BOOL CALTELPFLPServiceEngine::FilterPFLPTMUnits(CONST CTMEnvironment *pTMEnvironment, BYTE nManipulationCode, BYTE nGroupIdentifier, WORD wDataIdentifier) CONST
{
	CTMPacket  *pTMPacket;

	return(((pTMPacket = (CTMPacket *)pTMEnvironment->GetTMUnit()) && pTMPacket->GetSize() > 0) ? ((nManipulationCode == PFLP_FILTER_NONE || (((nManipulationCode != PFLP_FILTER_APID  &&  nManipulationCode != PFLP_FILTER_APIDANDVCID) || pTMPacket->GetAPID() == (INT)wDataIdentifier) && ((nManipulationCode != PFLP_FILTER_VCID  &&  nManipulationCode != PFLP_FILTER_APIDANDVCID) || pTMPacket->GetVirtualChannel() == (INT)nGroupIdentifier))) ? TRUE : FALSE) : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CALTELTMProcessInfo

CALTELTMProcessInfo::CALTELTMProcessInfo() : CTMProcessInfo()
{
	m_nOBRT = 0;
	m_tOBRT[0] = 0;
	m_tOBRT[1] = 0;
	m_bOBRT = FALSE;
	m_tError = 0;
	m_tDelta = 0;
}

VOID CALTELTMProcessInfo::SetTimeCorrelation(CONST CTimeTag &tOBRT, UINT nOBRT)
{
	CTimeTag  tTime;
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	m_nOBRT = nOBRT;
	m_tOBRT[0] = tOBRT.GetTime();
	m_tOBRT[1] = tTime.GetTime();
	m_bOBRT = (tOBRT.GetTime() > 0) ? TRUE : FALSE;
}

CTimeTag CALTELTMProcessInfo::GetTimeCorrelation(CTimeTag &tOBRT, UINT &nOBRT) CONST
{
	BOOL  bOBRT;
	CTimeTag  tTime;
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	nOBRT = m_nOBRT;
	tOBRT = m_tOBRT[0];
	tTime = m_tOBRT[1];
	bOBRT = m_bOBRT;
	return((bOBRT) ? tTime : 0);
}

VOID CALTELTMProcessInfo::SetTimeCorrelationError(LONG tError, LONG tDelta)
{
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	m_tError = tError;
	m_tDelta = tDelta;
}

BOOL CALTELTMProcessInfo::GetTimeCorrelationError(LONG &tError, LONG &tDelta) CONST
{
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	tError = m_tError;
	tDelta = m_tDelta;
	return TRUE;
}

BOOL CALTELTMProcessInfo::GetTMBandwidth(double &fTotalTMBandwidth, double &fMaxDiagnosticTMBandwidth) CONST
{
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	fTotalTMBandwidth = 0.0;
	fMaxDiagnosticTMBandwidth = 0.0;
	return FALSE;
}

BOOL CALTELTMProcessInfo::SetData(CONST CByteArray &nData)
{
	DATA  sData;
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	if (nData.GetSize() == sizeof(DATA))
	{
		CopyMemory(&sData, nData.GetData(), sizeof(DATA));
		m_tOBRT[0] = sData.tOBRT;
		m_nOBRT = sData.nOBRT;
		m_bOBRT = sData.bOBRT;
		return TRUE;
	}
	return FALSE;
}

INT CALTELTMProcessInfo::GetData(CByteArray &nData) CONST
{
	DATA  sData;
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	nData.RemoveAll();
	sData.tOBRT = m_tOBRT[0];
	sData.nOBRT = m_nOBRT;
	sData.bOBRT = m_bOBRT;
	nData.SetSize(sizeof(DATA));
	CopyMemory(nData.GetData(), &sData, sizeof(DATA));
	return((INT)nData.GetSize());
}

VOID CALTELTMProcessInfo::Reset()
{
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	m_nOBRT = 0;
	m_tOBRT[0] = 0;
	m_tOBRT[1] = 0;
	m_bOBRT = FALSE;
	CTMProcessInfo::Reset();
}


/////////////////////////////////////////////////////////////////////////////
// CALTELTMProcessEngine

CALTELTMProcessEngine::CALTELTMProcessEngine() : CTMProcessEngine()
{
	/* Initializes with the telemetry service level supported by this engine. */
	m_nTMServiceLevel = TMSERVICELEVEL_PACKETS;
}

UINT CALTELTMProcessEngine::DetectTMServiceLevel() CONST
{
	return m_nTMServiceLevel;
}

INT CALTELTMProcessEngine::EnumSubSystems(CStringArray &szSubSystems, BOOL bAll) CONST
{
	/* Enumerates all available satellite on-board sub-systems. */
	szSubSystems.RemoveAll();
	return((INT)szSubSystems.GetSize());
}

UINT CALTELTMProcessEngine::TranslateSubSystemToID(LPCTSTR pszSubSystem) CONST
{
	/* Translates the human-readable sub-system name into a corresponding identifier. */
	return -1;
}

CString CALTELTMProcessEngine::TranslateIDToSubSystem(UINT nSubSystemID) CONST
{
	/* Translates the sub-system identifier into a human-readable name. */
	return EMPTYSTRING;
}

INT CALTELTMProcessEngine::ProcessTMUnit(CONST CDatabaseEngine *pDatabase, CONST CTMUnit *pTMUnit, CTMEnvironment *pTMEnvironment)
{
	/* Decodes the telemetry packet, processes its parameters (inkl. derived parameters) and returns the index of the decoded telemetry packet (or -1 if not found).
	Consult the 'SCOS-2000.cpp' for a more in-depth description (with some code).
	*/
	return -1;
}

BOOL CALTELTMProcessEngine::IsTMDump(CONST CTMEnvironment *pTMEnvironment) CONST
{
	/* Returns TRUE if the telemetry packet specified by 'pTMEnvironment->GetTMUnit()' contains a dump packet (or FALSE if not). */
	return FALSE;
}

UINT CALTELTMProcessEngine::GetTMUnitID(CONST CTMUnit *pTMUnit) CONST
{
	CTMPacket  *pTMPacket = (CTMPacket *)pTMUnit;

	return pTMPacket->GetTimestamp();
}

BOOL CALTELTMProcessEngine::SetTimeCorrelation(CTMEnvironment *pTMEnvironment)
{
	CALTELTMProcessInfo  *pTMInfo;

	if ((pTMInfo = (CALTELTMProcessInfo *)pTMEnvironment->GetTMProcessInfo()))
	{
		pTMInfo->SetTimeCorrelation();
		pTMInfo->SetTMBandwidth();
		return TRUE;
	}
	return FALSE;
}
BOOL CALTELTMProcessEngine::SetTimeCorrelation(CTMEnvironment *pTMEnvironment, CONST CTimeTag &tOBRT, UINT nOBRT, UINT nOBTID)
{
	CALTELTMProcessInfo  *pTMInfo;

	if ((pTMInfo = (CALTELTMProcessInfo *)pTMEnvironment->GetTMProcessInfo()))
	{
		pTMInfo->SetTimeCorrelation(tOBRT, nOBRT);
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELTMProcessEngine::GetTimeCorrelation(CONST CTMEnvironment *pTMEnvironment, CTimeTag &tOBRT, UINT &nOBRT, UINT nOBTID) CONST
{
	CALTELTMProcessInfo  *pTMInfo;

	return(((pTMInfo = (CALTELTMProcessInfo *)pTMEnvironment->GetTMProcessInfo())) ? (pTMInfo->GetTimeCorrelation(tOBRT, nOBRT) > 0) : FALSE);
}

BOOL CALTELTMProcessEngine::SetTimeCorrelationError(CONST CTMEnvironment *pTMEnvironment, LONG tError, LONG tDelta, UINT nOBTID)
{
	CALTELTMProcessInfo  *pTMInfo;

	if ((pTMInfo = (CALTELTMProcessInfo *)pTMEnvironment->GetTMProcessInfo()))
	{
		pTMInfo->SetTimeCorrelationError(tError, tDelta);
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELTMProcessEngine::GetTimeCorrelationError(CONST CTMEnvironment *pTMEnvironment, LONG &tError, LONG &tDelta, UINT nOBTID) CONST
{
	CALTELTMProcessInfo  *pTMInfo;

	return(((pTMInfo = (CALTELTMProcessInfo *)pTMEnvironment->GetTMProcessInfo())) ? pTMInfo->GetTimeCorrelationError(tError, tDelta) : FALSE);
}

UINT CALTELTMProcessEngine::GetTimeCorrelationDelay(UINT nOBTID) CONST
{
	/* Returns the number of milliseconds the telemetry data may be out-of-snyc (delayed) with respect to the on-board timer sepcified by 'nOBTID'.*/
	return 0;
}

UINT CALTELTMProcessEngine::GetTimeCorrelationRange(UINT nOBTID) CONST
{
	/* Returns the number of milliseconds the telemtry data may be out-of-sync with respect to the on-board timer sepcified by 'nOBTID'. */
	return 0;
}

CTimeTag CALTELTMProcessEngine::Correlate(CONST CTMEnvironment *pTMEnvironment, UINT tField, INT nLength, BOOL bCorrelate, UINT nOBTID) CONST
{
	/* Correlates the on-board reference counter with ground segment time for the on-board timer specified by 'nOBTID'. */
	return 0;
}

BOOL CALTELTMProcessEngine::CanCorrelate(CONST CTMEnvironment *pTMEnvironment, UINT nOBTID) CONST
{
	UINT  nOBRT;
	CTimeTag  tOBRT;

	return GetTimeCorrelation(pTMEnvironment, tOBRT, nOBRT);
}

CTimeSpan CALTELTMProcessEngine::GetTMStreamInterruptionInterval() CONST
{
	/* Specifies the number of seconds no telemetry data is received before an event is raised. */
	return 0;
}

CTimeSpan CALTELTMProcessEngine::GetTMStreamDelayInterval() CONST
{
	return GetTimeCorrelationDelay();
}

BOOL CALTELTMProcessEngine::CheckTMStreamInterruption(TIMETAG tInterval) CONST
{
	return((tInterval >= 1000000 * GetTMStreamInterruptionInterval().GetTotalSeconds()) ? TRUE : FALSE);
}

BOOL CALTELTMProcessEngine::CheckTMStreamDelay(TIMETAG tDelay, TIMETAG tInterval) CONST
{
	return((tDelay >= max(1000000 * GetTimeCorrelationDelay(), tInterval)) ? TRUE : FALSE);
}

BOOL CALTELTMProcessEngine::CheckTMStreamCorrelation(CONST CTMEnvironment *pTMEnvironment) CONST
{
	/* Returns TRUE if the telemetry data contained in 'pTMEnvironment' is correlated (or FALSE if not). */
	return FALSE;
}

BOOL CALTELTMProcessEngine::CheckTMParameterOolStatus(CONST CDatabaseEngine *pDatabase, CONST CTMEnvironment *pTMEnvironment, CONST CTMParameter *pTMParameter, INT nCalTableRef, INT nOolTableRef, ULONGLONG nValue, ULONGLONG nOldValue, INT nOldCalTableRef, BOOL bOldValue, UINT &nOolLimit, UINT &nOolStatus) CONST
{
	/* Evaluates the out-of-limit status of a telemetry parameter.
	Consult the 'SCOS-2000.cpp' for a more in-depth description (with some code).
	*/
	nOolStatus = TMPARAMETER_STATUS_NONE;
	nOolLimit = (UINT)-1;
	return FALSE;
}

BOOL CALTELTMProcessEngine::ConvertTMParameterValue(CONST CDatabaseEngine *pDatabase, CONST CTMParameter *pTMParameter, INT nCalTableRef, LPCTSTR pszValue, ULONGLONG &nValue) CONST
{
	/* Encodes the value of the telemetry parameter specified by 'pTMParameter' and stores it in the variable 'nValue'.
	Consult the 'SCOS-2000.cpp' for a more in-depth description (with some code).
	*/
	return FALSE;
}

BOOL CALTELTMProcessEngine::AllocateTMProcessInfo(CTMEnvironment *pTMEnvironment) CONST
{
	CTMProcessInfo  *pTMProcessInfo;

	if ((pTMProcessInfo = new CALTELTMProcessInfo))
	{
		pTMEnvironment->Initialize(pTMProcessInfo);
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELTMProcessEngine::FreeTMProcessInfo(CTMEnvironment *pTMEnvironment) CONST
{
	CTMProcessInfo  *pTMProcessInfo;

	if ((pTMProcessInfo = pTMEnvironment->GetTMProcessInfo()))
	{
		pTMEnvironment->Initialize((CTMProcessInfo *)NULL);
		delete pTMProcessInfo;
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELTMProcessEngine::UpdateTMPacketCache(CTMEnvironment *pTMEnvironment) CONST
{
	CTMUnit  *pTMUnit;

	if (pTMEnvironment->GetTMUnit()->IsValid())
	{
		if ((pTMUnit = pTMEnvironment->GetTMUnitCache()->GetAt(pTMEnvironment->GetTMUnitCache()->Find(pTMEnvironment->GetTMUnit()->GetTag()))))
		{
			pTMUnit->Copy(pTMEnvironment->GetTMUnit());
			return TRUE;
		}
		if ((pTMUnit = new CTMUnit))
		{
			pTMUnit->Copy(pTMEnvironment->GetTMUnit());
			if (pTMEnvironment->GetTMUnitCache()->Add(pTMUnit) >= 0) return TRUE;
			delete pTMUnit;
		}
		return FALSE;
	}
	return TRUE;
}

VOID CALTELTMProcessEngine::ProcessTMParameter(CONST CDatabaseEngine *pDatabase, CTMEnvironment *pTMEnvironment, CONST CDatabaseTMParameter *pDatabaseTMParameter, CONST CDatabaseTMPacketParameter *pDatabaseTMPacketParameter, ULONGLONG nValue) CONST
{
	INT  nTable;
	INT  nTables;
	INT  nTrigger[2];
	INT  nTriggers[2];
	UINT  nStatus[2];
	WORD  wOolTable;
	WORD  wOolLimit;
	BOOL  bRawValue;
	CString  szCalTable;
	CString  szOolUnit;
	CTimeTag  tOolTime;
	ULONGLONG  nRawValue;
	CUIntArray  nValidityRefs;
	CUIntArray  nCalTableRefs;
	CUIntArray  nCalValidityRefs;
	CUIntArray  nTriggerRefs[2];
	CStringArray  szCalTables[2];
	CTMParameter  *pTMParameter;
	CTMParameter  *pValidityParameter;
	CTMParameter  *pDerivedParameter;
	COolParameter  *pOolParameter;

	if ((pTMParameter = pTMEnvironment->GetTMParameters()->GetAt(pDatabaseTMPacketParameter->GetRef())))
	{
		for (nTable = 0, nTables = (pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]) == pDatabaseTMParameter->GetCalTableRefs(nCalTableRefs, nCalValidityRefs)) ? (INT)nCalTableRefs.GetSize() : 0; nTable < nTables; nTable++)
		{
			if (CheckTMParameterValidityValue(pTMEnvironment->GetTMParameters()->GetAt(nCalValidityRefs.GetAt(nTable))) == TMPARAMETER_STATUS_VALID) break;
			continue;
		}
		for (bRawValue = pTMParameter->GetRawValue(pDatabaseTMPacketParameter->GetOccurrence(), nRawValue, (nStatus[0] = 0), szCalTable), pTMParameter->SetRawValue(pTMEnvironment->GetTMUnit(), pDatabaseTMPacketParameter->GetOccurrence(), nValue, (nStatus[1] = ((!pTMEnvironment->GetTMUnit()->HasBadData()) ? TMPARAMETER_STATUS_GOOD : TMPARAMETER_STATUS_BAD) | CheckTMParameterValidityValue(pTMEnvironment, pDatabaseTMParameter, pTMParameter) | CheckTMParameterOolStatus(pDatabase, pTMEnvironment, pDatabaseTMParameter, pTMParameter, nValue, (nTable < nTables) ? szCalTables[0].GetAt(nTable) : EMPTYSTRING, wOolTable, wOolLimit)), (nTable < nTables) ? szCalTables[0].GetAt(nTable) : EMPTYSTRING); (!bRawValue && (nStatus[1] & (TMPARAMETER_STATUS_SOFTLIMIT | TMPARAMETER_STATUS_HARDLIMIT | TMPARAMETER_STATUS_DELTALIMIT))) || (bRawValue && (nStatus[0] & (TMPARAMETER_STATUS_NOLIMIT | TMPARAMETER_STATUS_SOFTLIMIT | TMPARAMETER_STATUS_HARDLIMIT | TMPARAMETER_STATUS_DELTALIMIT)) != (nStatus[1] & (TMPARAMETER_STATUS_NOLIMIT | TMPARAMETER_STATUS_SOFTLIMIT | TMPARAMETER_STATUS_HARDLIMIT | TMPARAMETER_STATUS_DELTALIMIT))); )
		{
			if (nStatus[1] & (TMPARAMETER_STATUS_SOFTLIMIT | TMPARAMETER_STATUS_HARDLIMIT | TMPARAMETER_STATUS_DELTALIMIT))
			{
				pTMParameter->SetOolInfo(pTMEnvironment->GetTMUnit()->GetTag(), pTMEnvironment->GetTMUnit()->GetTimeTag(), wOolTable, wOolLimit);
				pTMParameter->SetOolCount(pTMParameter->GetOolCount());
			}
			else
			{
				pTMParameter->SetOolInfo();
				pTMParameter->SetOolCount();
			}
			if ((pOolParameter = new COolParameter))
			{
				pOolParameter->CTMParameter::Copy(pTMParameter);
				if (pTMEnvironment->GetOolParameters()->Add(pOolParameter) < 0) delete pOolParameter;
			}
			break;
		}
		for (nTrigger[0] = 0, nTriggers[0] = pDatabaseTMParameter->GetValidityRefs(nValidityRefs); nTrigger[0] < nTriggers[0]; nTrigger[0]++)
		{
			if ((pValidityParameter = pTMEnvironment->GetTMParameters()->GetAt(nValidityRefs.GetAt(nTrigger[0]))) && pValidityParameter->GetValidityStatus() != (nStatus[0] = (nValue == pDatabase->GetTMParameters()->GetAt(nValidityRefs.GetAt(nTrigger[0]))->GetValidityValue()) ? TMPARAMETER_STATUS_VALID : TMPARAMETER_STATUS_INVALID))
			{
				if (pValidityParameter->GetOolInfo(szOolUnit, tOolTime, wOolTable, wOolLimit))
				{
					if ((pOolParameter = new COolParameter) != (COolParameter *)NULL)
					{
						pOolParameter->CTMParameter::Copy(pValidityParameter);
						pOolParameter->SetValidityStatus(nStatus[0]);
						if (pTMEnvironment->GetOolParameters()->Add(pOolParameter) < 0) delete pOolParameter;
					}
				}
				pValidityParameter->SetValidityStatus(nStatus[0]);
			}
		}
		for (nTrigger[0] = 0, nTriggers[0] = pDatabaseTMParameter->GetTriggerRefs(nTriggerRefs[0], nTriggerRefs[1]); nTrigger[0] < nTriggers[0]; nTrigger[0]++)
		{
			if ((pDerivedParameter = ((nTriggerRefs[1].GetAt(nTrigger[0]) == (UINT)-1 || pDatabase->GetTMPackets()->GetAt(nTriggerRefs[1].GetAt(nTrigger[0]))->GetTag() == pTMEnvironment->GetTMUnit()->GetTag())) ? pTMEnvironment->GetTMParameters()->GetAt(nTriggerRefs[0].GetAt(nTrigger[0])) : (CTMParameter *)NULL))
			{
				for (nTrigger[1] = 0, nTriggers[1] = (ProcessTMParameter(pDatabase, pTMEnvironment, pDatabase->GetTMParameters()->GetAt(nTriggerRefs[0].GetAt(nTrigger[0])), pDerivedParameter)) ? (pDatabase->GetTMParameters()->GetAt(nTriggerRefs[0].GetAt(nTrigger[0]))->GetValidityRefs(nValidityRefs)*pDerivedParameter->GetRawValue(max(pDerivedParameter->GetValueCount() - 1, 0), nRawValue, nStatus[1])) : 0; nTrigger[1] < nTriggers[1]; nTrigger[1]++)
				{
					if ((pValidityParameter = pTMEnvironment->GetTMParameters()->GetAt(nValidityRefs.GetAt(nTrigger[1]))) && pValidityParameter->GetValidityStatus() != (nStatus[0] = (nRawValue == pDatabase->GetTMParameters()->GetAt(nValidityRefs.GetAt(nTrigger[1]))->GetValidityValue()) ? TMPARAMETER_STATUS_VALID : TMPARAMETER_STATUS_INVALID))
					{
						if (pValidityParameter->GetOolInfo(szOolUnit, tOolTime, wOolTable, wOolLimit))
						{
							if ((pOolParameter = new COolParameter) != (COolParameter *)NULL)
							{
								pOolParameter->CTMParameter::Copy(pValidityParameter);
								pOolParameter->SetValidityStatus(nStatus[0]);
								if (pTMEnvironment->GetOolParameters()->Add(pOolParameter) < 0) delete pOolParameter;
							}
						}
						pValidityParameter->SetValidityStatus(nStatus[0]);
					}
				}
			}
		}
	}
}
BOOL CALTELTMProcessEngine::ProcessTMParameter(CONST CDatabaseEngine *pDatabase, CTMEnvironment *pTMEnvironment, CONST CDatabaseTMParameter *pDatabaseTMParameter, CTMParameter *pTMParameter) CONST
{
	INT  nTable;
	INT  nTables;
	INT  nSample;
	INT  nSamples;
	INT  nTrigger[2];
	INT  nTriggers[2];
	UINT  nStatus[2];
	WORD  wOolTable[2];
	WORD  wOolLimit[2];
	CString  szCalTable;
	CString  szOolUnit;
	CTimeTag  tOolTime;
	ULONGLONG  nRawValue;
	CUIntArray  nValidityRefs;
	CUIntArray  nCalTableRefs;
	CUIntArray  nCalValidityRefs;
	CUIntArray  nTriggerRefs[2];
	CStringArray  szCalTables[2];
	CTMParameter  *pValidityParameter;
	CTMParameter  *pDerivedParameter;
	COolParameter  *pOolParameter;
	DERIVATIONPROCEDURE  pDerivationProcedure;

	if ((pDerivationProcedure = pTMParameter->GetDerivationProcedure()))
	{
		for (nTable = 0, nTables = (pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]) == pDatabaseTMParameter->GetCalTableRefs(nCalTableRefs, nCalValidityRefs)) ? (INT)nCalTableRefs.GetSize() : 0, (*pDerivationProcedure)(pDatabase, pTMEnvironment); nTable < nTables; nTable++)
		{
			if (CheckTMParameterValidityValue(pTMEnvironment->GetTMParameters()->GetAt(nCalValidityRefs.GetAt(nTable))) == TMPARAMETER_STATUS_VALID) break;
			continue;
		}
		for (nSample = 0, nSamples = pTMParameter->GetValueCount(); nSample < nSamples; nSample++)
		{
			if (pTMParameter->GetRawValue(nSample, nRawValue, nStatus[0]) && pTMParameter->SetRawValue(pTMEnvironment->GetTMUnit(), nSample, nRawValue, (nStatus[1] = ((nStatus[0] & (TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_BAD)) | CheckTMParameterValidityValue(pTMEnvironment, pDatabaseTMParameter, pTMParameter) | CheckTMParameterOolStatus(pDatabase, pTMEnvironment, pDatabaseTMParameter, pTMParameter, nRawValue, (nTable < nTables) ? szCalTables[0].GetAt(nTable) : EMPTYSTRING, wOolTable[0], wOolLimit[0]))), (nTable < nTables) ? szCalTables[0].GetAt(nTable) : EMPTYSTRING))
			{
				if (((nStatus[1] & (TMPARAMETER_STATUS_SOFTLIMIT | TMPARAMETER_STATUS_HARDLIMIT | TMPARAMETER_STATUS_DELTALIMIT)) && !pTMParameter->GetOolInfo(szOolUnit, tOolTime, wOolTable[1], wOolLimit[1])) || ((nStatus[1] & TMPARAMETER_STATUS_NOLIMIT) && pTMParameter->GetOolInfo(szOolUnit, tOolTime, wOolTable[1], wOolLimit[1])))
				{
					if (nStatus[1] & (TMPARAMETER_STATUS_SOFTLIMIT | TMPARAMETER_STATUS_HARDLIMIT | TMPARAMETER_STATUS_DELTALIMIT))
					{
						pTMParameter->SetOolInfo(pTMEnvironment->GetTMUnit()->GetTag(), pTMEnvironment->GetTMUnit()->GetTimeTag(), wOolTable[0], wOolLimit[0]);
						pTMParameter->SetOolCount(pTMParameter->GetOolCount());
					}
					else
					{
						pTMParameter->SetOolInfo();
						pTMParameter->SetOolCount();
					}
					if ((pOolParameter = new COolParameter))
					{
						pOolParameter->CTMParameter::Copy(pTMParameter);
						if (pTMEnvironment->GetOolParameters()->Add(pOolParameter) < 0) delete pOolParameter;
					}
				}
			}
		}
		for (nTrigger[0] = 0, nTriggers[0] = (pTMParameter->GetRawValue(pTMParameter->GetValueCount() - 1, nRawValue, nStatus[1])) ? pDatabaseTMParameter->GetValidityRefs(nValidityRefs) : 0; nTrigger[0] < nTriggers[0]; nTrigger[0]++)
		{
			if ((pValidityParameter = pTMEnvironment->GetTMParameters()->GetAt(nValidityRefs.GetAt(nTrigger[0]))) && pValidityParameter->GetValidityStatus() != (nStatus[0] = (nRawValue == pDatabase->GetTMParameters()->GetAt(nValidityRefs.GetAt(nTrigger[0]))->GetValidityValue()) ? TMPARAMETER_STATUS_VALID : TMPARAMETER_STATUS_INVALID))
			{
				if (pValidityParameter->GetOolInfo(szOolUnit, tOolTime, wOolTable[1], wOolLimit[1]))
				{
					if ((pOolParameter = new COolParameter) != (COolParameter *)NULL)
					{
						pOolParameter->CTMParameter::Copy(pValidityParameter);
						pOolParameter->SetValidityStatus(nStatus[0]);
						if (pTMEnvironment->GetOolParameters()->Add(pOolParameter) < 0) delete pOolParameter;
					}
				}
				pValidityParameter->SetValidityStatus(nStatus[0]);
			}
		}
		for (nTrigger[0] = 0, nTriggers[0] = pDatabaseTMParameter->GetTriggerRefs(nTriggerRefs[0], nTriggerRefs[1]); nTrigger[0] < nTriggers[0]; nTrigger[0]++)
		{
			if ((pDerivedParameter = ((nTriggerRefs[1].GetAt(nTrigger[0]) == (UINT)-1 || pDatabase->GetTMPackets()->GetAt(nTriggerRefs[1].GetAt(nTrigger[0]))->GetTag() == pTMEnvironment->GetTMUnit()->GetTag())) ? pTMEnvironment->GetTMParameters()->GetAt(nTriggerRefs[0].GetAt(nTrigger[0])) : (CTMParameter *)NULL))
			{
				for (nTrigger[1] = 0, nTriggers[1] = (ProcessTMParameter(pDatabase, pTMEnvironment, pDatabase->GetTMParameters()->GetAt(nTriggerRefs[0].GetAt(nTrigger[0])), pDerivedParameter)) ? (pDatabase->GetTMParameters()->GetAt(nTriggerRefs[0].GetAt(nTrigger[0]))->GetValidityRefs(nValidityRefs)*pDerivedParameter->GetRawValue(max(pDerivedParameter->GetValueCount() - 1, 0), nRawValue, nStatus[1])) : 0; nTrigger[1] < nTriggers[1]; nTrigger[1]++)
				{
					if ((pValidityParameter = pTMEnvironment->GetTMParameters()->GetAt(nValidityRefs.GetAt(nTrigger[1]))) && pValidityParameter->GetValidityStatus() != (nStatus[0] = (nRawValue == pDatabase->GetTMParameters()->GetAt(nValidityRefs.GetAt(nTrigger[1]))->GetValidityValue()) ? TMPARAMETER_STATUS_VALID : TMPARAMETER_STATUS_INVALID))
					{
						if (pValidityParameter->GetOolInfo(szOolUnit, tOolTime, wOolTable[1], wOolLimit[1]))
						{
							if ((pOolParameter = new COolParameter) != (COolParameter *)NULL)
							{
								pOolParameter->CTMParameter::Copy(pValidityParameter);
								pOolParameter->SetValidityStatus(nStatus[0]);
								if (pTMEnvironment->GetOolParameters()->Add(pOolParameter) < 0) delete pOolParameter;
							}
						}
						pValidityParameter->SetValidityStatus(nStatus[0]);
					}
				}
			}
		}
		return TRUE;
	}
	return FALSE;
}

UINT CALTELTMProcessEngine::CheckTMParameterOolStatus(CONST CDatabaseEngine *pDatabase, CONST CTMEnvironment *pTMEnvironment, CONST CDatabaseTMParameter *pDatabaseTMParameter, CTMParameter *pTMParameter, ULONGLONG nValue, LPCTSTR pszCalTable, WORD &wOolTable, WORD &wOolLimit) CONST
{
	INT  nTable;
	INT  nTables;
	UINT  nOolLimit;
	UINT  nOolStatus;
	CUIntArray  nTableRefs[2];
	CDatabaseTMNumOolTable  *pDatabaseTMNumOolTable;
	CDatabaseTMTxtOolTable  *pDatabaseTMTxtOolTable;

	for (nTable = 0, nTables = pDatabaseTMParameter->GetOolTableRefs(nTableRefs[0], nTableRefs[1]), wOolTable = (WORD)-1, wOolLimit = (WORD)-1; nTable < nTables; nTable++)
	{
		if (CheckTMParameterValidityValue(pTMEnvironment->GetTMParameters()->GetAt(nTableRefs[1].GetAt(nTable))) == TMPARAMETER_STATUS_VALID  &&  CheckTMParameterOolStatus(pDatabase, pTMEnvironment, pTMParameter, (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) ? ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? pDatabase->GetTMNumCalTables()->Find(pszCalTable) : pDatabase->GetTMTxtCalTables()->Find(pszCalTable)) : -1, nTableRefs[0].GetAt(nTable), nValue, 0, -1, FALSE, nOolLimit, nOolStatus))
		{
			for (wOolTable = (WORD)nTable, wOolLimit = (WORD)nOolLimit; nOolStatus == TMPARAMETER_STATUS_NONE || nOolStatus == TMPARAMETER_STATUS_NOLIMIT; )
			{
				pTMParameter->SetOolCount(0);
				return nOolStatus;
			}
			if ((pDatabaseTMNumOolTable = ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NONE) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)) ? pDatabase->GetTMNumOolTables()->GetAt(nTableRefs[0].GetAt(nTable)) : (CDatabaseTMNumOolTable *)NULL))
			{
				pTMParameter->SetOolCount(min(pTMParameter->GetOolCount() + 1, pDatabaseTMNumOolTable->GetChecks()));
				return((pTMParameter->GetOolCount() >= pDatabaseTMNumOolTable->GetChecks()) ? nOolStatus : TMPARAMETER_STATUS_NOLIMIT);
			}
			if ((pDatabaseTMTxtOolTable = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? pDatabase->GetTMTxtOolTables()->GetAt(nTableRefs[0].GetAt(nTable)) : (CDatabaseTMTxtOolTable *)NULL))
			{
				pTMParameter->SetOolCount(min(pTMParameter->GetOolCount() + 1, pDatabaseTMTxtOolTable->GetChecks()));
				return((pTMParameter->GetOolCount() >= pDatabaseTMTxtOolTable->GetChecks()) ? nOolStatus : TMPARAMETER_STATUS_NOLIMIT);
			}
		}
	}
	return TMPARAMETER_STATUS_NOLIMIT;
}

UINT CALTELTMProcessEngine::CheckTMParameterValidityValue(CONST CTMEnvironment *pTMEnvironment, CONST CDatabaseTMParameter *pDatabaseTMParameter, CONST CTMParameter *pTMParameter) CONST
{
	UINT  nStatus;
	ULONGLONG  nRawValue;
	CTMParameter  *pValidityParameter;

	return(((pValidityParameter = pTMEnvironment->GetTMParameters()->GetAt(pDatabaseTMParameter->GetValidityParameterRef()))) ? ((pValidityParameter->GetRawValue(max(pValidityParameter->GetValueCount() - 1, 0), nRawValue, nStatus) && nRawValue == pDatabaseTMParameter->GetValidityValue()) ? (nStatus & (TMPARAMETER_STATUS_VALID | TMPARAMETER_STATUS_INVALID)) : TMPARAMETER_STATUS_INVALID) : (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_DERIVED)) ? ((pTMParameter->GetRawValue(max(pTMParameter->GetValueCount() - 1, 0), nRawValue, nStatus)) ? (nStatus & (TMPARAMETER_STATUS_VALID | TMPARAMETER_STATUS_INVALID)) : TMPARAMETER_STATUS_NONE) : TMPARAMETER_STATUS_VALID));
}
UINT CALTELTMProcessEngine::CheckTMParameterValidityValue(CONST CTMParameter *pTMParameter) CONST
{
	UINT  nStatus;
	ULONGLONG  nValue;

	return((!pTMParameter || (pTMParameter->GetRawValue(max(pTMParameter->GetValueCount() - 1, 0), nValue, nStatus) && nValue == 1)) ? TMPARAMETER_STATUS_VALID : TMPARAMETER_STATUS_INVALID);
}


/////////////////////////////////////////////////////////////////////////////
// CALTELTCProcessInfo

CALTELTCProcessInfo::CALTELTCProcessInfo() : CTCProcessInfo()
{
	m_nOBRT = 0;
	m_tOBRT[0] = 0;
	m_tOBRT[1] = 0;
	m_bOBRT = FALSE;
}

CALTELTCProcessInfo::~CALTELTCProcessInfo()
{
	return;
}

VOID CALTELTCProcessInfo::SetTimeCorrelation(CONST CTimeTag &tOBRT, UINT nOBRT)
{
	CTimeTag  tTime;
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	m_nOBRT = nOBRT;
	m_tOBRT[0] = tOBRT.GetTime();
	m_tOBRT[1] = tTime.GetTime();
	m_bOBRT = (tOBRT.GetTime() > 0) ? TRUE : FALSE;
}

CTimeTag CALTELTCProcessInfo::GetTimeCorrelation(CTimeTag &tOBRT, UINT &nOBRT) CONST
{
	BOOL  bOBRT;
	CTimeTag  tTime;
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	nOBRT = m_nOBRT;
	tOBRT = m_tOBRT[0];
	tTime = m_tOBRT[1];
	bOBRT = m_bOBRT;
	return((bOBRT) ? tTime : 0);
}

INT CALTELTCProcessInfo::GenerateTCPacketSequenceCount(LPCTSTR pszName, INT nAPID, INT nTCID, ULONGLONG nFlags, BOOL bExample)
{
	return -1;
}

BOOL CALTELTCProcessInfo::SetData(CONST CByteArray &nData)
{
	DATA  sData;
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	for (CopyMemory(&sData, nData.GetData(), (nData.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nData.GetSize() >= sizeof(DATA) && nData.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA); )
	{
		m_tOBRT[0] = sData.tOBRT;
		m_nOBRT = sData.nOBRT;
		m_bOBRT = sData.bOBRT;
		return TRUE;
	}
	return FALSE;
}

INT CALTELTCProcessInfo::GetData(CByteArray &nData) CONST
{
	DATA  sData;
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	for (sData.tOBRT = m_tOBRT[0], sData.nOBRT = m_nOBRT, sData.bOBRT = m_bOBRT, nData.SetSize((sData.cbSize = sizeof(DATA))); nData.GetSize() == sData.cbSize; )
	{
		CopyMemory(nData.GetData(), &sData, sizeof(DATA));
		return((INT)nData.GetSize());
	}
	return 0;
}

VOID CALTELTCProcessInfo::Reset()
{
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	m_nOBRT = 0;
	m_tOBRT[0] = 0;
	m_tOBRT[1] = 0;
	m_bOBRT = FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CALTELTCProcessEngine

CALTELTCProcessEngine::CALTELTCProcessEngine() : CTCProcessEngine()
{
	/* Initializes with the telecommand service level supported by this engine and prepares the CRC tables. */
	INT  i, j;
	INT  k, l;
	WORD  wValue;
	DWORD  dwValue[2];

	for (i = 0, j = sizeof(m_wTCPacketCRC16Table) / sizeof(m_wTCPacketCRC16Table[0]), m_nTCServiceLevel = TCSERVICELEVEL_PACKETS, m_tTCFunctionExecutionTimeOffset[0] = TCFUNCTIONEXECUTIONTIME_DEFAULT_MINIMUMOFFSET, m_tTCFunctionExecutionTimeOffset[1] = TCFUNCTIONEXECUTIONTIME_DEFAULT_MAXIMUMOFFSET, m_tTCFunctionParameterTimeOffset[0] = TCFUNCTIONPARAMETERTIME_DEFAULT_MINIMUMOFFSET, m_tTCFunctionParameterTimeOffset[1] = TCFUNCTIONPARAMETERTIME_DEFAULT_MAXIMUMOFFSET, m_bDebugging = FALSE; i < j; i++)
	{
		for (wValue = 0; i & 0x01; )
		{
			wValue ^= 0x1021;
			break;
		}
		if (i & 0x02) wValue ^= 0x2042;
		if (i & 0x04) wValue ^= 0x4084;
		if (i & 0x08) wValue ^= 0x8108;
		if (i & 0x10) wValue ^= 0x1231;
		if (i & 0x20) wValue ^= 0x2462;
		if (i & 0x40) wValue ^= 0x48C4;
		if (i & 0x80) wValue ^= 0x9188;
		m_wTCPacketCRC16Table[i] = wValue;
	}
	for (i = 0, j = sizeof(m_dwTCPacketCRC32Table) / sizeof(m_dwTCPacketCRC32Table[0]), dwValue[0] = 0x04C11DB7; i < j; i++)
	{
		for (k = 0, l = i, dwValue[1] = 0; k < 8; k++)
		{
			dwValue[1] |= (l & 0x01) << (7 - k);
			l >>= 1;
		}
		for (k = 0, m_dwTCPacketCRC32Table[i] = dwValue[1] << 24; k < 8; k++)
		{
			for (l = 0, m_dwTCPacketCRC32Table[i] = (m_dwTCPacketCRC32Table[i] << 1) ^ ((m_dwTCPacketCRC32Table[i] & (1 << 31)) ? dwValue[0] : 0), dwValue[1] = 0; l < 32; l++)
			{
				dwValue[1] |= (m_dwTCPacketCRC32Table[i] & 0x01) << (31 - l);
				m_dwTCPacketCRC32Table[i] >>= 1;
			}
			m_dwTCPacketCRC32Table[i] = dwValue[1];
		}
	}
}

UINT CALTELTCProcessEngine::DetectTCServiceLevel() CONST
{
	return m_nTCServiceLevel;
}

INT CALTELTCProcessEngine::EnumSubSystems(CStringArray &szSubSystems, BOOL bAll) CONST
{
	/* Enumerates all available satellite on-board sub-systems. */
	szSubSystems.RemoveAll();
	return((INT)szSubSystems.GetSize());
}

UINT CALTELTCProcessEngine::TranslateSubSystemToID(LPCTSTR pszSubSystem) CONST
{
	/* Translates the human-readable sub-system name into a corresponding identifier. */
	return -1;
}

CString CALTELTCProcessEngine::TranslateIDToSubSystem(UINT nSubSystemID) CONST
{
	/* Translates the sub-system identifier into a human-readable name. */
	return EMPTYSTRING;
}

BOOL CALTELTCProcessEngine::GenerateTCPackets(CONST CDatabaseEngine *pDatabase, CONST CDatabaseTCFunction *pDatabaseTCFunction, CONST CDatabaseTCPacket *pDatabaseTCPacket, CONST CTMEnvironment *pTMEnvironment, CONST CTCEnvironment *pTCEnvironment, LPCTSTR pszMemoryPatch, BOOL bTimeTagged, BOOL b2ndStep, BOOL bBlocked, BOOL bExample, CDatabaseTCFunctions &pDatabaseTCFunctions, CDatabaseTCPackets &pDatabaseTCPackets) CONST
{
	/* Generates all telecommand packets resulting from 'pDatabaseTCFunction' and 'pDatabaseTCPacket' and stores them in 'pDatabaseTCFunctions' and 'pDatabaseTCPackets'.
	This includes the generation of blocked or segmented telecommands.
	If the variable 'bExample' is TRUE a preview of the telecommand is generated (no counter increments).
	Consult the 'SCOS-2000.cpp' for a more in-depth description (with some code).
	*/
	pDatabaseTCFunctions.RemoveAll();
	pDatabaseTCPackets.RemoveAll();
	return FALSE;
}

BOOL CALTELTCProcessEngine::InitializeTCPacket(CONST CDatabaseEngine *pDatabase, CONST CTMEnvironment *pTMEnvironment, CONST CTCEnvironment *pTCEnvironment, CONST CDatabaseTCFunction *pDatabaseTCFunction, CONST CDatabaseTCPacket *pDatabaseTCPacket, CTCPacket *pTCPacket, CONST CTimeTag &tExecutionTime, BOOL bBlocked, BOOL bExample)
{
	/* Encodes the telecommand packet specified by 'pTCPacket'.
	If the variable 'bExample' is TRUE a preview of the telecommand is generated (no counter increments).
	Consult the 'SCOS-2000.cpp' for a more in-depth description (with some code).
	*/
	return FALSE;
}

BOOL CALTELTCProcessEngine::CollectTCPacket(CONST CDatabaseEngine *pDatabase, CONST CTMEnvironment *pTMEnvironment, CDatabaseTCFunction *pDatabaseTCFunction, CTCPacket *pTCPacket, INT nBlockID)
{
	/* Generates a blocked telecommand by appending an additional one to the telecommand packet specified by 'pTCPacket'.
	Consult the 'SCOS-2000.cpp' for a more in-depth description (with some code).
	*/
	return FALSE;
}

BOOL CALTELTCProcessEngine::DecodeTCPacket(CONST CDatabaseEngine *pDatabase, CONST CTCEnvironment *pTCEnvironment, CONST CTCPacket *pTCPacket, CDatabaseTCFunction *pDatabaseTCFunction, CDatabaseTCFunctions &pDatabaseBlockedTCFunctions, CDatabaseTCPacket *pDatabaseTCPacket) CONST
{
	INT  nByte;
	INT  nBytes;
	INT  nEntry;
	INT  nEntries;
	INT  nSequence;
	INT  nSequences;
	INT  nParameter;
	INT  nParameters;
	INT  nElement[2];
	INT  nElements[2];
	INT  nBlockElement;
	INT  nBlockElements;
	INT  nBlockOffset;
	INT  nBlockLength;
	INT  nBlockByte;
	INT  nBlockBits;
	BOOL  bValues;
	CString  szOBRT;
	ULONGLONG  nValue;
	CStringArray  szFunctions;
	CStringTools  cStringTools;
	CDatabaseTCSequence  *pTCSequence;
	CDatabaseTCFunction  *pTCFunction[2];
	CDatabaseTCFunctionBlock  *pTCFunctionBlock;
	CDatabaseTCSequenceEntry  *pTCSequenceEntry;
	CDatabaseTCPacketParameter  *pTCPacketParameter;
	CDatabaseTCFunctionElement  *pTCFunctionElement[2];

	for (nElement[0] = 0, nElements[0] = (INT)pDatabaseTCFunction->GetSize(), pDatabaseBlockedTCFunctions.RemoveAll(), bValues = TRUE; nElement[0] < nElements[0]; nElement[0]++)
	{
		if ((pTCFunctionElement[0] = pDatabaseTCFunction->GetAt(nElement[0])) != (CDatabaseTCFunctionElement *)NULL)
		{
			if (pTCPacket->GetData(pTCFunctionElement[0]->GetBytePos(), pTCFunctionElement[0]->GetBitPos(), pTCFunctionElement[0]->GetWidth(), nValue))
			{
				if (!ConvertTCParameterValue(pDatabase, pTCEnvironment, pTCFunctionElement[0], nValue))
				{
					pTCFunctionElement[0]->SetConstValueAsText(EMPTYSTRING);
					pTCFunctionElement[0]->SetConstValue();
					bValues = FALSE;
				}
				else if (pTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_TIME)
				{
					szOBRT.Format(STRING(IDS_ONBOARDMEMORYDUMPS_TIMEKEY_FORMAT), (LPCTSTR)cStringTools.ConvertLongUIntToPaddedString(pTCFunctionElement[0]->GetConstValue(), (pTCFunctionElement[0]->GetWidth() + 3) / 4, 16));
					pTCFunctionElement[0]->SetConstValueAsText(szOBRT);
				}
				continue;
			}
			if (!IsFixedSize(pDatabaseTCPacket))
			{
				pDatabaseTCFunction->RemoveAt(nElement[0]);
				delete pTCFunctionElement[0];
				nElements[0]--;
				nElement[0]--;
				continue;
			}
		}
		break;
	}
	for (nParameter = 0, nParameters = (INT)pDatabaseTCPacket->GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pTCPacketParameter = pDatabaseTCPacket->GetAt(nParameter)) != (CDatabaseTCPacketParameter *)NULL)
		{
			if (pTCPacket->GetData(pTCPacketParameter->GetBytePos(), pTCPacketParameter->GetBitPos(), pTCPacketParameter->GetWidth(), nValue))
			{
				if (!ConvertTCParameterValue(pDatabase, pTCEnvironment, pTCPacketParameter, nValue))
				{
					pTCPacketParameter->SetConstValueAsText(EMPTYSTRING);
					pTCPacketParameter->SetConstValue();
					bValues = FALSE;
				}
				else if (pTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME)
				{
					szOBRT.Format(STRING(IDS_ONBOARDMEMORYDUMPS_TIMEKEY_FORMAT), (LPCTSTR)cStringTools.ConvertLongUIntToPaddedString(pTCPacketParameter->GetConstValue(), (pTCPacketParameter->GetWidth() + 3) / 4, 16));
					pTCPacketParameter->SetConstValueAsText(szOBRT);
				}
				continue;
			}
			if (!IsFixedSize(pDatabaseTCPacket))
			{
				pDatabaseTCPacket->RemoveAt(nParameter);
				delete pTCPacketParameter;
				nParameters--;
				nParameter--;
				continue;
			}
		}
		break;
	}
	if ((pTCFunctionBlock = pDatabase->GetTCFunctionBlocks()->GetAt(pDatabase->GetTCFunctionBlocks()->Find(pDatabaseTCFunction->GetName()))))
	{
		for (nSequence = 0, nSequences = (INT)pDatabase->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
		{
			if ((pTCSequence = pDatabase->GetTCSequences()->GetAt(nSequence)) != (CDatabaseTCSequence *)NULL)
			{
				for (nEntry = 0, nEntries = (INT)pTCSequence->GetSize(), szFunctions.RemoveAll(); nEntry < nEntries; nEntry++)
				{
					if ((pTCSequenceEntry = pTCSequence->GetAt(nEntry)) != (CDatabaseTCSequenceEntry *)NULL)
					{
						if (pTCSequenceEntry->GetName() == pTCFunctionBlock->GetName() && (pTCSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_FLAG_BLOCKMACRO))
						{
							szFunctions.Add(pTCSequenceEntry->GetName());
							continue;
						}
						if (szFunctions.GetSize() > 0)
						{
							if (pTCSequenceEntry->GetAttributes() & TCSEQUENCEENTRY_FLAG_BLOCKMEMBER)
							{
								szFunctions.Add(pTCSequenceEntry->GetName());
								if (nEntry < nEntries - 1) continue;
							}
							if (((pTCPacket->GetTCType() == TCPACKET_TCTYPE_IMMEDIATE && (pTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_LI, nBlockOffset, nBlockLength) || pTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_NI, nBlockOffset, nBlockLength))) || (pTCPacket->GetTCType() == TCPACKET_TCTYPE_TIMETAG && (pTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_LTT, nBlockOffset, nBlockLength) || pTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_NTT, nBlockOffset, nBlockLength))) || (pTCPacket->GetTCType() == TCPACKET_TCTYPE_FIRSTSTEP && (pTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_L2S, nBlockOffset, nBlockLength) || pTCFunctionBlock->GetLocation(TCFUNCTIONBLOCK_TYPE_N2S, nBlockOffset, nBlockLength)))) && nBlockLength > 0)
							{
								for (nBlockElement = 1, nBlockElements = (INT)szFunctions.GetSize(), pDatabaseBlockedTCFunctions.RemoveAll(); nBlockElement < nBlockElements; nBlockElement++)
								{
									if ((pTCFunction[0] = (pTCPacket->GetData(nBlockOffset, 0, 32, nValue)) ? new CDatabaseTCFunction : (CDatabaseTCFunction *)NULL) != (CDatabaseTCFunction *)NULL)
									{
										if ((pTCFunction[1] = pDatabase->GetTCFunctions()->GetAt(pDatabase->GetTCFunctions()->Find(szFunctions.GetAt(nBlockElement)))) && pTCFunction[0]->Copy(pTCFunction[1]))
										{
											for (nElement[1] = 0, nElements[1] = ((nBlockByte = ((pTCFunctionElement[1] = pTCFunction[0]->GetAt(nElement[1]))) ? pTCFunctionElement[1]->GetBytePos() : -1) >= 0) ? (INT)pTCFunction[0]->GetSize() : -1, nBlockBits = 0; nElement[1] < nElements[1]; nElement[1]++)
											{
												if ((pTCFunctionElement[1] = pTCFunction[0]->GetAt(nElement[1])) && (nElement[1] > 0 || (pTCFunctionElement[1]->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT) == 0 || (pTCPacket->GetData(pTCFunctionElement[1]->GetBytePos() + nBlockOffset - nBlockByte, pTCFunctionElement[1]->GetBitPos(), pTCFunctionElement[1]->GetWidth(), nValue) && pTCFunctionElement[1]->GetConstValue() == nValue)))
												{
													if (pTCPacket->GetData(pTCFunctionElement[1]->GetBytePos() + nBlockOffset - nBlockByte, pTCFunctionElement[1]->GetBitPos(), pTCFunctionElement[1]->GetWidth(), nValue))
													{
														nBlockBits = max(8 * (pTCFunctionElement[1]->GetBytePos() - nBlockByte) + pTCFunctionElement[1]->GetBitPos() + pTCFunctionElement[1]->GetWidth(), nBlockBits);
														pTCFunctionElement[1]->SetBytePos(pTCFunctionElement[1]->GetBytePos() + nBlockOffset - nBlockByte);
														if (!ConvertTCParameterValue(pDatabase, pTCEnvironment, pTCFunctionElement[1], nValue))
														{
															pTCFunctionElement[1]->SetConstValueAsText(EMPTYSTRING);
															pTCFunctionElement[1]->SetConstValue();
															bValues = FALSE;
														}
														else if (pTCFunctionElement[1]->GetAttributes() & TCPARAMETER_CODING_TIME)
														{
															szOBRT.Format(STRING(IDS_ONBOARDMEMORYDUMPS_TIMEKEY_FORMAT), (LPCTSTR)cStringTools.ConvertLongUIntToPaddedString(pTCFunctionElement[1]->GetConstValue(), (pTCFunctionElement[1]->GetWidth() + 3) / 4, 16));
															pTCFunctionElement[1]->SetConstValueAsText(szOBRT);
														}
														continue;
													}
												}
												break;
											}
											if (nElement[1] == nElements[1])
											{
												pDatabaseBlockedTCFunctions.InsertAt(pDatabaseBlockedTCFunctions.GetSize(), pTCFunction[0], 1);
												nBlockOffset = nBlockOffset + (nBlockBits + 7) / 8;
												continue;
											}
										}
										delete pTCFunction[0];
									}
									break;
								}
								if (nBlockElement == nBlockElements)
								{
									for (nByte = nBlockOffset, nBytes = pTCPacket->GetSize() - sizeof(WORD); nByte < nBytes; nByte++)
									{
										if (pTCPacket->GetData(nBlockOffset, 0, 8, nValue) && nValue != 0) break;
										continue;
									}
									if (nByte == nBytes) break;
								}
							}
						}
					}
					szFunctions.RemoveAll();
				}
				if (nEntry < nEntries) break;
			}
		}
		return((nElement[0] == nElements[0] && nParameter == nParameters  &&  nSequence < nSequences  &&  bValues) ? (pTCPacket->GetTCType() != TCPACKET_TCTYPE_TIMETAG || CanConvertOBRTToTime(pTCEnvironment)) : FALSE);
	}
	return(pTCPacket->GetTCType() != TCPACKET_TCTYPE_TIMETAG || CanConvertOBRTToTime(pTCEnvironment));
}

BOOL CALTELTCProcessEngine::CheckTCFunctionPreexecutionParameterGroup(CONST CDatabaseEngine *pDatabase, CONST CTMEnvironment *pTMEnvironment, INT nGroupID, CStringArray &szParameters) CONST
{
	INT  nIndex;
	INT  nCount;
	UINT  nStatus;
	ULONGLONG  nValue;
	CTMParameter  *pTMParameter;
	CDatabaseTCPreExeGroup  *pTCPreExeGroup;
	CDatabaseTCPreExeGroupParameter  *pTCPreExeGroupParameter;

	for (szParameters.RemoveAll(); (pTCPreExeGroup = pDatabase->GetTCPreExeGroups()->GetAt(nGroupID)); )
	{
		for (nIndex = 0, nCount = (INT)pTCPreExeGroup->GetSize(); nIndex < nCount; nIndex++)
		{
			if ((pTCPreExeGroupParameter = pTCPreExeGroup->GetAt(nIndex)))
			{
				if ((pTMParameter = pTMEnvironment->GetTMParameters()->GetAt(pTCPreExeGroupParameter->GetRef())))
				{
					if (!pTMParameter->GetRawValue(max(pTMParameter->GetValueCount() - 1, 0), nValue, nStatus))
					{
						szParameters.Add(pTCPreExeGroupParameter->GetTag());
						continue;
					}
					if ((nStatus & (TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_VALID)) != (TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_VALID))
					{
						szParameters.Add(pTCPreExeGroupParameter->GetTag());
						continue;
					}
					CheckTCFunctionPreexecutionParameterValues(pDatabase, pTCPreExeGroupParameter, pTMParameter, szParameters);
				}
			}
		}
		return((szParameters.GetSize() == 0) ? TRUE : FALSE);
	}
	return TRUE;
}
BOOL CALTELTCProcessEngine::CheckTCFunctionPreexecutionParameterGroup(CONST CDatabaseEngine *pDatabase, CONST CTMParameters &pTMParameters, LPCTSTR pszGroup, CStringArray &szParameters) CONST
{
	INT  nIndex;
	INT  nCount;
	UINT  nStatus;
	ULONGLONG  nValue;
	CTMParameter  *pTMParameter;
	CDatabaseTCPreExeGroup  *pTCPreExeGroup;
	CDatabaseTCPreExeGroupParameter  *pTCPreExeGroupParameter;

	for (szParameters.RemoveAll(); (pTCPreExeGroup = pDatabase->GetTCPreExeGroups()->GetAt(pDatabase->GetTCPreExeGroups()->Find(pszGroup))); )
	{
		for (nIndex = 0, nCount = (INT)pTCPreExeGroup->GetSize(); nIndex < nCount; nIndex++)
		{
			if ((pTCPreExeGroupParameter = pTCPreExeGroup->GetAt(nIndex)))
			{
				if ((pTMParameter = pTMParameters.GetAt(pTMParameters.Find(pTCPreExeGroupParameter->GetTag()))))
				{
					if (!pTMParameter->GetRawValue(max(pTMParameter->GetValueCount() - 1, 0), nValue, nStatus))
					{
						szParameters.Add(pTCPreExeGroupParameter->GetTag());
						continue;
					}
					if ((nStatus & (TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_VALID)) != (TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_VALID))
					{
						szParameters.Add(pTCPreExeGroupParameter->GetTag());
						continue;
					}
					CheckTCFunctionPreexecutionParameterValues(pDatabase, pTCPreExeGroupParameter, pTMParameter, szParameters);
				}
			}
		}
		return((szParameters.GetSize() == 0) ? TRUE : FALSE);
	}
	return((!lstrlen(pszGroup)) ? TRUE : FALSE);
}

BOOL CALTELTCProcessEngine::CheckTCFunctionExecutionParameterGroup(CONST CDatabaseEngine *pDatabase, CONST CTMEnvironment *pTMEnvironment, CONST CDatabaseTCFunction *pDatabaseTCFunction, INT nGroupID, UINT nStageID, CONST CTimeTag &tStageStart, CONST CTimeSpan &tUncertainty, CStringArray &szParameters) CONST
{
	INT  nIndex;
	INT  nCount;
	INT  nSample;
	UINT  nStatus;
	BOOL  bFailure;
	ULONGLONG  nValue;
	CStringArray  szParameter;
	CTMParameter  *pTMParameter;
	CDatabaseTCExeVerGroup  *pTCExeVerGroup;
	CDatabaseTCFunctionElement  *pTCFunctionElement;
	CDatabaseTCExeVerGroupParameter  *pTCExeVerGroupParameter;

	for (szParameters.RemoveAll(); (pTCExeVerGroup = pDatabase->GetTCExeVerGroups()->GetAt(nGroupID)); )
	{
		for (nIndex = 0, nCount = (INT)pTCExeVerGroup->GetSize(), bFailure = FALSE; nIndex < nCount; nIndex++)
		{
			if ((pTCExeVerGroupParameter = pTCExeVerGroup->GetAt(nIndex)))
			{
				if ((pTMParameter = (nStageID == MAKETCEXEVERSTAGEID(pTCExeVerGroupParameter->GetStage(), pTCExeVerGroupParameter->GetStep())) ? pTMEnvironment->GetTMParameters()->GetAt(pTCExeVerGroupParameter->GetRef()) : (CTMParameter *)NULL))
				{
					if (!pTMParameter->GetRawValue(max(pTMParameter->GetValueCount() - 1, 0), nValue, nStatus))
					{
						if (tStageStart == 0) szParameters.Add(pTCExeVerGroupParameter->GetTag());
						bFailure = TRUE;
						continue;
					}
					if (pTMParameter->GetLastUpdateTime() >= tStageStart.GetTime() - 1000000 * tUncertainty.GetTotalSeconds())
					{
						if ((nStatus & (TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_VALID)) != (TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_VALID))
						{
							if (pTMParameter->GetLastUpdateTime() >= tStageStart || tStageStart == 0) szParameters.Add(pTCExeVerGroupParameter->GetTag());
							bFailure = TRUE;
							continue;
						}
						if (pTCExeVerGroupParameter->GetAttributes() & TCEXEVERGROUPPARAMETER_INTERPRETATION_ECHOED)
						{
							for (nSample = 0; pTMParameter->GetAttributes() & TMPARAMETER_FLAG_CONSISTENCYCHECKS; nSample++)
							{
								if ((pTCFunctionElement = pDatabaseTCFunction->GetAt(pDatabaseTCFunction->Find(pTCExeVerGroupParameter->GetValueAsText(), nSample))))
								{
									CheckTCFunctionExecutionParameterValues(pDatabase, pTCExeVerGroupParameter, pTCFunctionElement, pTMParameter, szParameter, TRUE);
									if (!szParameter.GetSize()) break;
									szParameter.RemoveAll();
									continue;
								}
								if (pTMParameter->GetLastUpdateTime() >= tStageStart || tStageStart == 0) szParameters.Add(pTCExeVerGroupParameter->GetTag());
								bFailure = TRUE;
								break;
							}
							continue;
						}
						bFailure |= !CheckTCFunctionExecutionParameterValues(pDatabase, pTCExeVerGroupParameter, pTMParameter, szParameters, pTMParameter->GetLastUpdateTime() >= tStageStart || tStageStart == 0);
						continue;
					}
					if (tStageStart == 0) szParameters.Add(pTCExeVerGroupParameter->GetTag());
					bFailure = TRUE;
				}
			}
		}
		return((szParameters.GetSize() == 0) ? !bFailure : FALSE);
	}
	return TRUE;
}
BOOL CALTELTCProcessEngine::CheckTCFunctionExecutionParameterGroup(CONST CDatabaseEngine *pDatabase, CONST CTMParameters &pTMParameters, CONST CDatabaseTCFunction *pDatabaseTCFunction, LPCTSTR pszGroup, UINT nStageID, CONST CTimeTag &tStageStart, CONST CTimeSpan &tUncertainty, CStringArray &szParameters) CONST
{
	INT  nIndex;
	INT  nCount;
	INT  nSample;
	UINT  nStatus;
	BOOL  bFailure;
	CTimeTag  tTime;
	ULONGLONG  nValue;
	CStringArray  szParameter;
	CTMParameter  *pTMParameter;
	CDatabaseTCExeVerGroup  *pTCExeVerGroup;
	CDatabaseTCFunctionElement  *pTCFunctionElement;
	CDatabaseTCExeVerGroupParameter  *pTCExeVerGroupParameter;

	for (szParameters.RemoveAll(); (pTCExeVerGroup = pDatabase->GetTCExeVerGroups()->GetAt(pDatabase->GetTCExeVerGroups()->Find(pszGroup))); )
	{
		for (nIndex = 0, nCount = (INT)pTCExeVerGroup->GetSize(), bFailure = FALSE; nIndex < nCount; nIndex++)
		{
			if ((pTCExeVerGroupParameter = pTCExeVerGroup->GetAt(nIndex)))
			{
				if ((pTMParameter = (nStageID == MAKETCEXEVERSTAGEID(pTCExeVerGroupParameter->GetStage(), pTCExeVerGroupParameter->GetStep())) ? pTMParameters.GetAt(pTMParameters.Find(pTCExeVerGroupParameter->GetTag())) : (CTMParameter *)NULL))
				{
					if (!pTMParameter->GetRawValue(max(pTMParameter->GetValueCount() - 1, 0), nValue, nStatus))
					{
						if (tStageStart == 0) szParameters.Add(pTCExeVerGroupParameter->GetTag());
						bFailure = TRUE;
						continue;
					}
					if (pTMParameter->GetLastUpdateTime() >= tStageStart.GetTime() - 1000000 * tUncertainty.GetTotalSeconds())
					{
						if ((nStatus & (TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_VALID)) != (TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_VALID))
						{
							if (tTime >= tStageStart || tStageStart == 0) szParameters.Add(pTCExeVerGroupParameter->GetTag());
							bFailure = TRUE;
							continue;
						}
						if (pTCExeVerGroupParameter->GetAttributes() & TCEXEVERGROUPPARAMETER_INTERPRETATION_ECHOED)
						{
							for (nSample = 0; pTMParameter->GetAttributes() & TMPARAMETER_FLAG_CONSISTENCYCHECKS; nSample++)
							{
								if ((pTCFunctionElement = pDatabaseTCFunction->GetAt(pDatabaseTCFunction->Find(pTCExeVerGroupParameter->GetValueAsText(), nSample))))
								{
									CheckTCFunctionExecutionParameterValues(pDatabase, pTCExeVerGroupParameter, pTCFunctionElement, pTMParameter, szParameter, TRUE);
									if (!szParameter.GetSize()) break;
									szParameter.RemoveAll();
									continue;
								}
								if (tTime >= tStageStart || tStageStart == 0) szParameters.Add(pTCExeVerGroupParameter->GetTag());
								bFailure = TRUE;
								break;
							}
							continue;
						}
						bFailure |= !CheckTCFunctionExecutionParameterValues(pDatabase, pTCExeVerGroupParameter, pTMParameter, szParameters, tTime >= tStageStart || tStageStart == 0);
						continue;
					}
					if (tStageStart == 0) szParameters.Add(pTCExeVerGroupParameter->GetTag());
					bFailure = TRUE;
				}
			}
		}
		return((szParameters.GetSize() == 0) ? !bFailure : FALSE);
	}
	return((!lstrlen(pszGroup)) ? TRUE : FALSE);
}

BOOL CALTELTCProcessEngine::CheckTCFunctionExecutionTime(CONST CDatabaseTCFunction *pDatabaseTCFunction, CONST CDatabaseTCPacket *pDatabaseTCPacket, CONST CTimeTag &tExecutionTime) CONST
{
	CTimeTag  tTimeTag;

	return((pDatabaseTCPacket->GetDataFieldHeaderFlag() && (tTimeTag <= tExecutionTime.GetTime() - 1000000 * m_tTCFunctionExecutionTimeOffset[0].GetTotalSeconds() || tExecutionTime == 0)) ? TRUE : FALSE);
}

BOOL CALTELTCProcessEngine::SetTCFunctionExecutionTimeOffsets(CONST CTimeSpan &tMin, CONST CTimeSpan &tMax)
{
	if (tMin <= tMax)
	{
		m_tTCFunctionExecutionTimeOffset[0] = tMin;
		m_tTCFunctionExecutionTimeOffset[1] = tMax;
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELTCProcessEngine::GetTCFunctionExecutionTimeOffsets(CTimeSpan &tMin, CTimeSpan &tMax) CONST
{
	tMin = m_tTCFunctionExecutionTimeOffset[0];
	tMax = m_tTCFunctionExecutionTimeOffset[1];
	return((tMin <= tMax  &&  tMax > 0) ? TRUE : FALSE);
}

BOOL CALTELTCProcessEngine::SetTCFunctionParameterTimeOffsets(CONST CTimeSpan &tMin, CONST CTimeSpan &tMax)
{
	if (tMin <= tMax)
	{
		m_tTCFunctionParameterTimeOffset[0] = tMin;
		m_tTCFunctionParameterTimeOffset[1] = tMax;
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELTCProcessEngine::GetTCFunctionParameterTimeOffsets(CTimeSpan &tMin, CTimeSpan &tMax) CONST
{
	tMin = m_tTCFunctionParameterTimeOffset[0];
	tMax = m_tTCFunctionParameterTimeOffset[1];
	return((tMin <= tMax  &&  tMax > 0) ? TRUE : FALSE);
}

UINT CALTELTCProcessEngine::CheckTCParameterOolStatus(CONST CDatabaseEngine *pDatabase, CONST CDatabaseTCParameter *pDatabaseTCParameter, CTCParameter *pTCParameter, ULONGLONG nValue) CONST
{
	INT  nPoint;
	INT  nPoints;
	INT  nLimit;
	INT  nLimits;
	UINT  nLimitType;
	BOOL  bOolLowLimit;
	BOOL  bOolHighLimit;
	BOOL  bOolOutValue;
	double  fOolValue;
	double  fOolLowLimit[2];
	double  fOolHighLimit[2];
	CString  szOolValue;
	CString  szOolLowLimit;
	CString  szOolHighLimit;
	ULONGLONG  nAttributes;
	CDatabaseTCTxtCalTable  *pTCTxtCalTable;
	CDatabaseTCNumOolTable  *pTCNumOolTable;
	CDatabaseTCNumOolLimit  *pTCNumOolLimit;
	CDatabaseTCTxtOolTable  *pTCTxtOolTable;
	CDatabaseTCTxtOolLimit  *pTCTxtOolLimit;

	if ((((nAttributes = pDatabaseTCParameter->GetAttributes()) & TCPARAMETER_CALIBRATION_NUMERICAL) || ((nAttributes & (TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) && IsTCParameterNumerical(pDatabase, pDatabaseTCParameter->GetTag()))))
	{
		if ((pTCNumOolTable = pDatabase->GetTCNumOolTables()->GetAt((pDatabaseTCParameter->GetOolTableRef() < 0) ? pDatabase->GetTCNumOolTables()->Find(pDatabaseTCParameter->GetOolTable()) : pDatabaseTCParameter->GetOolTableRef())))
		{
			if ((pTCNumOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) || pDatabaseTCParameter->GetCalTableRef() >= 0 || !pDatabaseTCParameter->GetCalTable().IsEmpty())
			{
				for (nLimit = 0, nLimits = (INT)pTCNumOolTable->GetSize(), pTCParameter->Calibrate(pDatabase, (pTCNumOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) ? ((nAttributes & ~TCPARAMETER_CALIBRATION_NUMERICAL) | TCPARAMETER_CALIBRATION_NONE) : ((nAttributes & ~TCPARAMETER_CALIBRATION_NONE) | TCPARAMETER_CALIBRATION_NUMERICAL), nValue, fOolValue, bOolOutValue); nLimit < nLimits; nLimit++)
				{
					if ((pTCNumOolLimit = pTCNumOolTable->GetAt(nLimit)) && pTCNumOolLimit->GetRange(nLimitType, fOolLowLimit[0], fOolHighLimit[0]) && nLimitType == TCOOLLIMIT_TYPE_HARD)
					{
						if (fOolValue < fOolLowLimit[0] || fOolValue > fOolHighLimit[0]) break;
						continue;
					}
				}
				if (nLimit == nLimits)
				{
					for (nLimit = 0; nLimit < nLimits; nLimit++)
					{
						if ((pTCNumOolLimit = pTCNumOolTable->GetAt(nLimit)) && pTCNumOolLimit->GetRange(nLimitType, fOolLowLimit[0], fOolHighLimit[0]) && nLimitType == TCOOLLIMIT_TYPE_SOFT)
						{
							if (fOolValue < fOolLowLimit[0] || fOolValue > fOolHighLimit[0]) break;
							continue;
						}
					}
				}
				pTCParameter->SetOolCount((nLimit < nLimits) ? min(pTCParameter->GetOolCount() + 1, max(pTCNumOolTable->GetChecks(), 1)) : 0);
				return((pTCParameter->GetOolCount() >= pTCNumOolTable->GetChecks() && pTCParameter->GetOolCount() > 0) ? ((nLimitType == TCOOLLIMIT_TYPE_SOFT) ? TCPARAMETER_STATUS_SOFTLIMIT : TCPARAMETER_STATUS_HARDLIMIT) : TCPARAMETER_STATUS_NOLIMIT);
			}
		}
	}
	if ((nAttributes & TCPARAMETER_CALIBRATION_STATUS) || ((nAttributes & (TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_DISABLED)) && IsTCParameterTextual(pDatabase, pDatabaseTCParameter->GetTag())))
	{
		if ((pTCTxtOolTable = pDatabase->GetTCTxtOolTables()->GetAt((pDatabaseTCParameter->GetOolTableRef() < 0) ? pDatabase->GetTCTxtOolTables()->Find(pDatabaseTCParameter->GetOolTable()) : pDatabaseTCParameter->GetOolTableRef())))
		{
			if ((pTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) || pDatabaseTCParameter->GetCalTableRef() >= 0 || !pDatabaseTCParameter->GetOolTable().IsEmpty())
			{
				for (nLimit = 0, nLimits = (INT)pTCTxtOolTable->GetSize(), pTCParameter->Calibrate(pDatabase, (pTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW) ? ((nAttributes & ~TCPARAMETER_CALIBRATION_STATUS) | TCPARAMETER_CALIBRATION_NONE) : ((nAttributes & ~TCPARAMETER_CALIBRATION_NONE) | TCPARAMETER_CALIBRATION_STATUS), nValue, fOolValue, bOolOutValue); nLimit < nLimits; nLimit++)
				{
					if ((pTCTxtOolLimit = pTCTxtOolTable->GetAt(nLimit)))
					{
						if (pTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_RAW)
						{
							if (pTCTxtOolLimit->GetRange(fOolLowLimit[0], fOolHighLimit[0]))
							{
								if (fOolValue >= fOolLowLimit[0] && fOolValue <= fOolHighLimit[0]) break;
								continue;
							}
						}
						if (pTCTxtOolTable->GetAttributes() & TCOOLTABLE_CHECK_CALIBRATED)
						{
							if (pTCTxtOolLimit->GetRange(szOolLowLimit, szOolHighLimit))
							{
								for (nPoint = 0, nPoints = ((pTCTxtCalTable = pDatabase->GetTCTxtCalTables()->GetAt((pDatabaseTCParameter->GetCalTableRef() < 0) ? pDatabase->GetTCTxtCalTables()->Find(pDatabaseTCParameter->GetCalTable()) : pDatabaseTCParameter->GetCalTableRef()))) ? (INT)pTCTxtCalTable->GetSize() : 0, bOolLowLimit = bOolHighLimit = FALSE; nPoint < nPoints && (!bOolLowLimit || !bOolHighLimit); nPoint++)
								{
									if (pTCTxtCalTable->GetAt(nPoint)->GetRange(fOolLowLimit[0], fOolHighLimit[0], szOolValue))
									{
										if (szOolLowLimit == szOolHighLimit  &&  szOolLowLimit == szOolValue)
										{
											fOolLowLimit[1] = fOolLowLimit[0];
											fOolHighLimit[1] = fOolHighLimit[0];
											bOolLowLimit = TRUE;
											bOolHighLimit = TRUE;
											break;
										}
										if (szOolLowLimit == szOolValue || szOolHighLimit == szOolValue)
										{
											fOolLowLimit[1] = (szOolLowLimit == szOolValue) ? fOolLowLimit[0] : fOolLowLimit[1];
											fOolHighLimit[1] = (szOolHighLimit == szOolValue) ? fOolHighLimit[0] : fOolHighLimit[1];
											bOolLowLimit = (szOolLowLimit == szOolValue) ? TRUE : bOolLowLimit;
											bOolHighLimit = (szOolHighLimit == szOolValue) ? TRUE : bOolHighLimit;
										}
									}
								}
								if (bOolLowLimit  &&  bOolHighLimit)
								{
									if (fOolValue >= fOolLowLimit[1] && fOolValue <= fOolHighLimit[1]) break;
									continue;
								}
							}
						}
					}
				}
				pTCParameter->SetOolCount((nLimit == nLimits  &&  nLimits > 0) ? min(pTCParameter->GetOolCount() + 1, max(pTCTxtOolTable->GetChecks(), 1)) : 0);
				return((pTCParameter->GetOolCount() >= pTCTxtOolTable->GetChecks() && pTCParameter->GetOolCount() > 0) ? TCPARAMETER_STATUS_HARDLIMIT : TCPARAMETER_STATUS_NOLIMIT);
			}
		}
	}
	return TCPARAMETER_STATUS_NOLIMIT;
}

BOOL CALTELTCProcessEngine::ConvertTCParameterValue(CONST CDatabaseEngine *pDatabase, LPCTSTR pszTag, ULONGLONG nAttributes, LPCTSTR pszValue, ULONGLONG &nValue) CONST
{
	CTimeTag  tTime;
	CDatabaseTCParameter  *pTCParameter[2];

	if ((pTCParameter[0] = new CDatabaseTCParameter))
	{
		if ((pTCParameter[1] = pDatabase->GetTCParameters()->GetAt(pDatabase->GetTCParameters()->Find(pszTag))) && pTCParameter[0]->Copy(pTCParameter[1]))
		{
			for (pTCParameter[0]->SetAttributes(nAttributes), pTCParameter[0]->SetConstValueAsText(pszValue); ConvertTCParameterValue(pDatabase, pTCParameter[0], nValue); )
			{
				delete pTCParameter[0];
				return TRUE;
			}
			delete pTCParameter[0];
			return FALSE;
		}
		delete pTCParameter[0];
	}
	for (nValue = 0; pDatabase->CheckTCParameterConstValue(nAttributes, pszValue); )
	{
		nValue = pDatabase->TranslateTCParameterConstValue(nAttributes, 8 * sizeof(nValue), pszValue);
		return TRUE;
	}
	return FALSE;
}
BOOL CALTELTCProcessEngine::ConvertTCParameterValue(CONST CDatabaseEngine *pDatabase, CONST CDatabaseTCParameter *pDatabaseTCParameter, ULONGLONG &nValue) CONST
{
	INT  nPoint;
	INT  nPoints;
	double  fX[2];
	double  fValue;
	double  fRawValue;
	LPTSTR  pszfValue;
	CString  szValue;
	CTimeTag  tTime;
	CDatabaseTCNumCalTable  *pTCNumCalTable;
	CDatabaseTCNumCalPoint  *pTCNumCalPoint[2];
	CDatabaseTCTxtCalTable  *pTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pTCTxtCalPoint;

	if ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED) == 0)
	{
		if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)
		{
			for (fValue = _tcstod(pDatabaseTCParameter->GetConstValueAsText(), &pszfValue); !pDatabaseTCParameter->GetConstValueAsText().IsEmpty() && _tcsspn(pszfValue, SPACE) == lstrlen(pszfValue); )
			{
				if ((pTCNumCalTable = pDatabase->GetTCNumCalTables()->GetAt((pDatabaseTCParameter->GetCalTableRef() < 0) ? pDatabase->GetTCNumCalTables()->Find(pDatabaseTCParameter->GetCalTable()) : pDatabaseTCParameter->GetCalTableRef())))
				{
					for (nPoint = 0, nPoints = (INT)pTCNumCalTable->GetSize() - 1; nPoint < nPoints; nPoint = nPoint + 1)
					{
						if ((pTCNumCalPoint[0] = pTCNumCalTable->GetAt(nPoint)))
						{
							if ((pTCNumCalPoint[1] = pTCNumCalTable->GetAt(nPoint + 1)))
							{
								if ((fValue >= pTCNumCalPoint[0]->GetY() && fValue <= pTCNumCalPoint[1]->GetY()) || (fValue <= pTCNumCalPoint[0]->GetY() && fValue >= pTCNumCalPoint[1]->GetY()))
								{
									fRawValue = pTCNumCalPoint[0]->GetX() + ((fValue - pTCNumCalPoint[0]->GetY()) / (pTCNumCalPoint[1]->GetY() - pTCNumCalPoint[0]->GetY()))*(pTCNumCalPoint[1]->GetX() - pTCNumCalPoint[0]->GetX());
									break;
								}
							}
						}
					}
					for (; (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_INTERPRETATION_EXTRAPOLATE) && nPoint == nPoints; )
					{
						if ((pTCNumCalPoint[0] = ((pTCNumCalPoint[1] = pTCNumCalTable->GetAt(1))) ? pTCNumCalTable->GetAt(0) : (CDatabaseTCNumCalPoint *)NULL))
						{
							if ((fRawValue = pTCNumCalPoint[0]->GetX() + ((fValue - pTCNumCalPoint[0]->GetY()) / (pTCNumCalPoint[1]->GetY() - pTCNumCalPoint[0]->GetY()))*(pTCNumCalPoint[1]->GetX() - pTCNumCalPoint[0]->GetX())) >= 0.0  &&  fRawValue < pow(2.0, pDatabaseTCParameter->GetWidth()))
							{
								nPoint = nPoints - 1;
								break;
							}
						}
						if ((pTCNumCalPoint[0] = ((pTCNumCalPoint[1] = pTCNumCalTable->GetAt((INT)pTCNumCalTable->GetUpperBound()))) ? pTCNumCalTable->GetAt((INT)pTCNumCalTable->GetUpperBound() - 1) : (CDatabaseTCNumCalPoint *)NULL))
						{
							if ((fRawValue = pTCNumCalPoint[0]->GetX() + ((fValue - pTCNumCalPoint[0]->GetY()) / (pTCNumCalPoint[1]->GetY() - pTCNumCalPoint[0]->GetY()))*(pTCNumCalPoint[1]->GetX() - pTCNumCalPoint[0]->GetX())) >= 0.0  &&  fRawValue < pow(2.0, pDatabaseTCParameter->GetWidth()))
							{
								nPoint = nPoints - 1;
								break;
							}
						}
						break;
					}
					if (nPoint < nPoints)
					{
						nValue = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? CDatabaseEngine::EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, pDatabaseTCParameter->GetAttributes(), fRawValue) : CDatabaseEngine::EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, pDatabaseTCParameter->GetAttributes(), pDatabaseTCParameter->GetWidth(), (UINT)fRawValue);
						return TRUE;
					}
				}
				break;
			}
			return FALSE;
		}
		if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
		{
			if ((pTCTxtCalTable = pDatabase->GetTCTxtCalTables()->GetAt((pDatabaseTCParameter->GetCalTableRef() < 0) ? pDatabase->GetTCTxtCalTables()->Find(pDatabaseTCParameter->GetCalTable()) : pDatabaseTCParameter->GetCalTableRef())))
			{
				for (nPoint = 0, nPoints = (INT)pTCTxtCalTable->GetSize(); nPoint < nPoints; nPoint++)
				{
					if ((pTCTxtCalPoint = pTCTxtCalTable->GetAt(nPoint)))
					{
						if ((pTCTxtCalPoint->GetPoint(fX[0], szValue) && szValue == pDatabaseTCParameter->GetConstValueAsText()) || (pTCTxtCalPoint->GetRange(fX[0], fX[1], szValue) && szValue == pDatabaseTCParameter->GetConstValueAsText())) break;
						continue;
					}
				}
				if (nPoint < nPoints)
				{
					nValue = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? CDatabaseEngine::EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, pDatabaseTCParameter->GetAttributes(), fX[0]) : CDatabaseEngine::EncodeValue(DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF, pDatabaseTCParameter->GetAttributes(), pDatabaseTCParameter->GetWidth(), (UINT)fX[0]);
					return TRUE;
				}
			}
			return FALSE;
		}
	}
	for (nValue = 0; pDatabase->CheckTCParameterConstValue(pDatabaseTCParameter->GetAttributes(), pDatabaseTCParameter->GetConstValueAsText()); )
	{
		nValue = pDatabase->TranslateTCParameterConstValue(pDatabaseTCParameter->GetAttributes(), pDatabaseTCParameter->GetWidth(), pDatabaseTCParameter->GetConstValueAsText());
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELTCProcessEngine::ConvertTCParameterTimeValue(CONST CDatabaseEngine *pDatabase, CONST CTCEnvironment *pTCEnvironment, LPCTSTR pszTag, INT nWidth, LPCTSTR pszTime, ULONGLONG &nValue) CONST
{
	TIMETAG  tTime;

	for (nValue = 0; (tTime = CDatabaseEngine::ParseTime(pszTime)) > 0; ) return ConvertTCParameterTimeValue(pDatabase, pTCEnvironment, pszTag, nWidth, tTime, nValue);
	return FALSE;
}
BOOL CALTELTCProcessEngine::ConvertTCParameterTimeValue(CONST CDatabaseEngine *pDatabase, CONST CTCEnvironment *pTCEnvironment, LPCTSTR pszTag, INT nWidth, CONST CTimeTag &tTime, ULONGLONG &nValue) CONST
{
	nValue = ConvertTimeToOBRT(pTCEnvironment, tTime) >> (8 * sizeof(UINT) - nWidth);
	return CanConvertTimeToOBRT(pTCEnvironment);
}
BOOL CALTELTCProcessEngine::ConvertTCParameterTimeValue(CONST CDatabaseEngine *pDatabase, CONST CTCEnvironment *pTCEnvironment, LPCTSTR pszTag, INT nWidth, ULONGLONG nValue, CTimeTag &tTime) CONST
{
	tTime = ConvertOBRTToTime(pTCEnvironment, (UINT)(nValue << (8 * sizeof(UINT) - nWidth)));
	return CanConvertTimeToOBRT(pTCEnvironment);
}

INT CALTELTCProcessEngine::EnumTCDiagnosticsOversamplingDumpRates(CStringArray &szRates) CONST
{
	/* Enumerates all supported oversampling dump rates (in seconds). */
	szRates.RemoveAll();
	return((INT)szRates.GetSize());
}

BOOL CALTELTCProcessEngine::EncodeTCDiagnosticsOversamplingDump(CONST CDatabaseEngine *pDatabase, CONST CTimeTag &tExecutionTime, CONST COversamplingParameters &pOversamplingParameters, CDatabaseTCFunction *pDatabaseTCFunction) CONST
{
	/* Encodes the telecommand requesting the oversampling dump specified by the telemetry parameters listed in 'pOversamplingParameters'. */
	return FALSE;
}

BOOL CALTELTCProcessEngine::DecodeTCDiagnosticsOversamplingDump(CONST CDatabaseEngine *pDatabase, CONST CDatabaseTCFunction *pDatabaseTCFunction, COversamplingParameters &pOversamplingParameters) CONST
{
	/* Decodes a telecommand requesting an oversampling dump and returns the contributing telemetry parameters in 'pOversamplingParameters'. */
	return FALSE;
}
BOOL CALTELTCProcessEngine::DecodeTCDiagnosticsOversamplingDump(CONST CDatabaseEngine *pDatabase, CONST CTMEnvironment *pTMEnvironment, COversamplingParameters &pOversamplingParameters, BOOL bAutomatic) CONST
{
	/* Examines a telemetry packet for an oversampling dump and, in case of a received dump, returns the contributing telemetry parameters (incl. their values) in 'pOversamplingParameters'
	The variable 'bAutomatic' is set to TRUE if the oversampled telemetry parameters have already been extracted to 'pTMEnvironment -> GetOversamplingParameters()' and just need to be copied to 'pOversamplingParameters'.
	Otherwise the values for the telemetry parameters specified by 'pOversamplingParameters' have to be derived from the data contained in the dump.
	*/
	return FALSE;
}

double CALTELTCProcessEngine::CalculateTCDiagnosticsOversamplingBandwidth(CONST CDatabaseEngine *pDatabase, COversamplingParameters &pOversamplingParameters) CONST
{
	/* Calculates the required bandwidth (in bps) for an oversampling dump coontaining the telemetry parameters specified in 'pOversamplingParameters'. */
	return 0.0;
}

INT CALTELTCProcessEngine::EnumTCOnBoardBufferTypes(CStringArray &szTypes) CONST
{
	/* Returns the human-readable names of all on-board buffer types (e.g. 'Time-tagged TCs'). */
	szTypes.RemoveAll();
	return((INT)szTypes.GetSize());
}

INT CALTELTCProcessEngine::EnumTCOnBoardBufferQueues(LPCTSTR pszType, CStringArray &szNames) CONST
{
	CUIntArray  nAPIDs;
	CUIntArray  nLimits;
	CUIntArray  nSubScheduleIDs;
	CUIntArray  tTimeouts;
	CStringArray  szUnits;

	return EnumTCOnBoardBufferQueues(pszType, szNames, nAPIDs, nSubScheduleIDs, nLimits, szUnits, tTimeouts);
}
INT CALTELTCProcessEngine::EnumTCOnBoardBufferQueues(LPCTSTR pszType, CStringArray &szNames, CUIntArray &nAPIDs, CUIntArray &nSubScheduleIDs, CUIntArray &nLimits, CStringArray &szUnits, CUIntArray &tTimeouts) CONST
{
	/* Enumerates the properties of all sub-systems that could generate TCs for the specified on-board buffer type 'pszType'. */
	szNames.RemoveAll();
	nAPIDs.RemoveAll();
	nSubScheduleIDs.RemoveAll();
	nLimits.RemoveAll();
	szUnits.RemoveAll();
	tTimeouts.RemoveAll();
	return((INT)szNames.GetSize());
}

INT CALTELTCProcessEngine::UpdateTCOnBoardBufferQueues(CONST CDatabaseEngine *pDatabase, CONST CTMEnvironment *pTMEnvironment, CStringArray &szTypes, CStringArray &szNames, CUIntArray &nSubScheduleIDs, CUIntArray &nCounts, CTimeTagArray &tUpdateTimes, CUIntArray &nStatus)
{
	/* Updates the information about the on-board buffers (e.g. number of available TCs) according to the telemetry data returned and available in 'pTMEnvironment'. */
	szTypes.RemoveAll();
	szNames.RemoveAll();
	nSubScheduleIDs.RemoveAll();
	nCounts.RemoveAll();
	tUpdateTimes.RemoveAll();
	nStatus.RemoveAll();
	return((INT)szNames.GetSize());
}

BOOL CALTELTCProcessEngine::CheckTCOnBoardBufferQueue(LPCTSTR pszType, LPCTSTR pszName, BOOL &bStatus, BOOL &bDumpAllEntries, BOOL &bDumpByAPID, BOOL &bDumpByPSC, BOOL &bDumpByEntryRange, BOOL &bDumpByTimeRange, BOOL &bResetAllEntries, BOOL &bResetByAPID, BOOL &bResetByPSC, BOOL &bResetByEntryRange, BOOL &bResetByTimeRange) CONST
{
	/* Returns the capabilities of the on-board buffer specified by 'pszType' and 'pszName'. */
	bDumpAllEntries = bDumpByAPID = bDumpByPSC = bDumpByEntryRange = bDumpByTimeRange = bResetAllEntries = bResetByAPID = bResetByPSC = bResetByEntryRange = bResetByTimeRange = bStatus = FALSE;
	return FALSE;
}

BOOL CALTELTCProcessEngine::EncodeTCOnBoardBufferQueueStatus(CONST CDatabaseEngine *pDatabase, CONST CTCEnvironment *pTCEnvironment, LPCTSTR pszType, LPCTSTR pszName, CONST CTimeTag &tExecutionTime, BOOL bEnable, CDatabaseTCFunction *pDatabaseTCFunction) CONST
{
	/* Encodes the telecommand that requests the downlink of the on-board buffer status specified by 'pszType' and 'pszName'. */
	return FALSE;
}

BOOL CALTELTCProcessEngine::EncodeTCOnBoardBufferQueueDump(CONST CDatabaseEngine *pDatabase, CONST CTCEnvironment *pTCEnvironment, LPCTSTR pszType, LPCTSTR pszName, CONST CTimeTag &tExecutionTime, UINT nAPID, UINT nPSC, UINT nLowEntry, UINT nHighEntry, CONST CTimeKey &tStartTime, CONST CTimeKey &tStopTime, CDatabaseTCFunction *pDatabaseTCFunction) CONST
{
	/* Encodes the telecommand that requests the downlink of the on-board buffer content specified by 'pszType' and 'pszName'. */
	return FALSE;
}

BOOL CALTELTCProcessEngine::EncodeTCOnBoardBufferQueueReset(CONST CDatabaseEngine *pDatabase, CONST CTCEnvironment *pTCEnvironment, LPCTSTR pszType, LPCTSTR pszName, CONST CTimeTag &tExecutionTime, UINT nAPID, UINT nPSC, UINT nLowEntry, UINT nHighEntry, CONST CTimeKey &tStartTime, CONST CTimeKey &tStopTime, CONST CTCPacket *pTCPacket, CDatabaseTCFunction *pDatabaseTCFunction) CONST
{
	/* Encodes the telecommand that requests the reset (clear content) of the on-board buffer specified by 'pszType' and 'pszName'. */
	return FALSE;
}

BOOL CALTELTCProcessEngine::DecodeTCOnBoardBufferQueueDump(CONST CDatabaseEngine *pDatabase, CONST CTMEnvironment *pTMEnvironment, CString &szType, CString &szName, UINT &nSubScheduleID, CTCPacket *pTCPacket) CONST
{
	/* Decodes the downlinked dump with the on-board buffer content according to the telemetry data returned and available in 'pTMEnvironment'.
	Calls 'FindTCOnBoardBufferQueue' in order to identify the dumped on-board buffer type and name. 
	*/
	return FALSE;
}
BOOL CALTELTCProcessEngine::DecodeTCOnBoardBufferQueueDump(CONST CDatabaseEngine *pDatabase, CONST CTMEnvironment *pTMEnvironment, CONST CTCEnvironment *pTCEnvironment, CONST CTCPacket *pTCPacket, CDatabaseTCFunction *pDatabaseTCFunction, CDatabaseTCFunctions &pBlockedItems, CDatabaseTCPacket *pDatabaseTCPacket, CTimeTag &tExecutionTime) CONST
{
	/* Decodes the downlinked dump with the on-board buffer content according to the extracted telecommand specified by 'pTCPacket' i.e. converts it back to a 'CDatabaseTCFunction' format.
	For blocked telecommands the individual TCs are enumerated in 'pBlockedItems'.
	*/
	return FALSE;
}

BOOL CALTELTCProcessEngine::FindTCOnBoardBufferQueue(CONST CTCPacket *pTCPacket, CString &szType, CString &szName, UINT &nSubScheduleID) CONST
{
	/* Identifies the on-board buffer type and name according to the supplied telecommand specified by 'pTCPacket'. */
	szType.Empty();
	szName.Empty();
	nSubScheduleID = (UINT)-1;
	return FALSE;
}

BOOL CALTELTCProcessEngine::ExpandTCOnBoardBufferQueueEntry(CONST CTCEnvironment *pTCEnvironment, CONST CTCPacket *pTCPacket, UINT &nBlockOffset, UINT &nBlockBytes, CUIntArray &nBlockSizes, CTimeTagArray &tBlockTimes) CONST
{
	/* Extracts the blocking properties for the telecommand specified by 'pTCPacket'.
	Calls 'CalculateTCOnBoardBufferQueueEntry' in order to determine the block size.
	*/
	nBlockOffset = nBlockBytes = 0;
	nBlockSizes.RemoveAll();
	tBlockTimes.RemoveAll();
	return FALSE;
}

UINT CALTELTCProcessEngine::CalculateTCOnBoardBufferQueueEntry(CONST CTCPacket *pTCPacket) CONST
{
	/* See above. */
	return 0;
}

BOOL CALTELTCProcessEngine::CheckTCOnBoardMemoryImageDumpCapabilities(CONST CDatabaseEngine *pDatabase, CONST CDatabaseOBProcessor *pProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, BOOL &bStop) CONST
{
	/* Returns TRUE if the on-board memory image specified by 'pImage' is dumpable.
	The variable 'bStop' is set to TRUE if an ongoing downlink can be interrupted.
	*/
	return((bStop = FALSE));
}

BOOL CALTELTCProcessEngine::EncodeTCOnBoardMemoryImageDump(CONST CDatabaseEngine *pDatabase, CTCEnvironment *pTCEnvironment, CONST CDatabaseOBProcessor *pProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, CONST CTimeTag &tExecutionTime, BOOL bStop, CDatabaseTCFunction *pDatabaseTCFunction) CONST
{
	/* Encodes the telecommand that requests the downlink of the on-board memory image specified by 'pImage'. */
	return FALSE;
}

BOOL CALTELTCProcessEngine::IsTCOnBoardMemoryImageDump(CONST CDatabaseEngine *pDatabase, CONST CTMEnvironment *pTMEnvironment) CONST
{
	/* Returns TRUE if the telemetry packet contained in 'pTMEnvironment' is part of an on-board memory image dump. */
	return FALSE;
}

BOOL CALTELTCProcessEngine::CheckTCOnBoardMemoryImagePatchCapabilities(CONST CDatabaseEngine *pDatabase, CONST CDatabaseOBProcessor *pProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage) CONST
{
	/* Returns TRUE if the on-board memory area specified by 'pImage' is patchable. */
	return FALSE;
}

BOOL CALTELTCProcessEngine::EncodeTCOnBoardMemoryImagePatch(CONST CDatabaseEngine *pDatabase, CONST CTMEnvironment *pTMEnvironment, CONST CTCEnvironment *pTCEnvironment, CONST CDatabaseOBProcessor *pProcessor, CONST CDatabaseOBProcessorMemoryImage *pImage, CONST CTimeTag &tExecutionTime, CDatabaseTCFunctions &pDatabaseTCFunctions, CDatabaseTCPackets &pDatabaseTCPackets) CONST
{
	/* Encodes the telecommand(s) that patch the on-board memory area specified by 'pImage'. */
	pDatabaseTCFunctions.RemoveAll();
	pDatabaseTCPackets.RemoveAll();
	return FALSE;
}

BOOL CALTELTCProcessEngine::CalculateTCOnBoardMemoryImageCRC(CONST CDatabaseEngine *pDatabase, CONST CDatabaseOBProcessor *pProcessor, CDatabaseOBProcessorMemoryImage *pImage, LPCTSTR pszImageVersion) CONST
{
	INT  nByte;
	INT  nBytes;
	INT  nMemoryBlock;
	INT  nMemoryBlocks;
	INT  nAddressRange[2];
	UINT  nRange[2][2];
	UINT  nAddress[2];
	UINT  nAddressBytes;
	UINT  nAddressOffset;
	UINT  nCheckSumPage;
	UINT  nCheckSumAddress[2];
	WORD  wMemoryImageCRC16;
	DWORD  dwMemoryImageCRC32;
	CByteArray  nMemoryImageData[2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;
	CDatabaseOBProcessorMemoryAreaCheckSum  cMemoryAreaCheckSum;

	if ((pMemoryArea = pProcessor->GetAt(pProcessor->Find(pImage->GetName()))))
	{
		if (pMemoryArea->GetCheckSum(&cMemoryAreaCheckSum) && cMemoryAreaCheckSum.GetAddressRange(nCheckSumPage, nCheckSumAddress[0], nCheckSumAddress[1]))
		{
			for (nMemoryBlock = 0, nMemoryBlocks = (INT)pImage->GetSize(), nAddress[0] = nAddress[1] = 0, nAddressBytes = max(GetDatabaseEngine()->GetOBProcessorMemoryImageBlockAddressWidth() / 8, 1), GetDatabaseEngine()->GetOBProcessorMemoryImageBlockAddressRange(nRange[0][0], nRange[0][1], nRange[1][0], nRange[1][1]); nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
			{
				if ((pMemoryImageBlock = pImage->GetAt(nMemoryBlock)) && pMemoryImageBlock->GetVersion() == pszImageVersion && (nMemoryImageData[0].GetSize() > 0 || pMemoryImageBlock->GetAddress(nAddress[0], nAddress[1])) && pMemoryImageBlock->GetData(nMemoryImageData[1]) >= 0)
				{
					nMemoryImageData[0].Append(nMemoryImageData[1]);
					continue;
				}
			}
			for (nAddressRange[0] = (INT)((LONGLONG)nCheckSumPage*(LONGLONG)(nRange[1][1] - nRange[1][0]) + (LONGLONG)nCheckSumAddress[0] - (LONGLONG)nAddress[0] * (LONGLONG)(nRange[1][1] - nRange[1][0]) - (LONGLONG)nAddress[1]), nAddressRange[1] = (INT)((LONGLONG)nAddress[0] * (LONGLONG)(nRange[1][1] - nRange[1][0]) + (LONGLONG)nAddress[1] + (nMemoryImageData[0].GetSize() + nAddressBytes - 1) / nAddressBytes - (LONGLONG)nCheckSumPage*(LONGLONG)(nRange[1][1] - nRange[1][0]) - (LONGLONG)nCheckSumAddress[1] - (LONGLONG)cMemoryAreaCheckSum.GetLength() / 16); nAddressRange[0] >= 0 && nAddressRange[1] >= 0; )
			{
				for (nMemoryImageData[0].RemoveAt(0, nAddressRange[0] * nAddressBytes), nMemoryImageData[0].RemoveAt(nMemoryImageData[0].GetSize() - nAddressRange[1] * nAddressBytes, nAddressRange[1] * nAddressBytes), wMemoryImageCRC16 = 0, dwMemoryImageCRC32 = 0; cMemoryAreaCheckSum.GetLength() == 16; )
				{
					wMemoryImageCRC16 = CalculateCRC16(nMemoryImageData[0], (WORD)cMemoryAreaCheckSum.GetSeed());
					break;
				}
				for (; cMemoryAreaCheckSum.GetLength() == 32; )
				{
					dwMemoryImageCRC32 = CalculateCRC32(nMemoryImageData[0], (DWORD)cMemoryAreaCheckSum.GetSeed());
					break;
				}
				for (nMemoryBlock = 0, nMemoryBlocks = (cMemoryAreaCheckSum.GetLength() == 16 || cMemoryAreaCheckSum.GetLength() == 32) ? (INT)pImage->GetSize() : -1, nAddressOffset = 0; nMemoryBlock < nMemoryBlocks; nMemoryBlock++)
				{
					if ((pMemoryImageBlock = pImage->GetAt(nMemoryBlock)) != (CDatabaseOBProcessorMemoryImageBlock *)NULL  &&  pMemoryImageBlock->GetVersion() == pszImageVersion  &&  pMemoryImageBlock->GetData(nMemoryImageData[1]) >= 0)
					{
						if ((ULONGLONG)nAddress[0] * (ULONGLONG)(nRange[1][1] - nRange[1][0]) + (ULONGLONG)nAddress[1] + (ULONGLONG)((nAddressOffset + nMemoryImageData[1].GetSize() + nAddressBytes - 1) / nAddressBytes) >= (ULONGLONG)nCheckSumPage*(ULONGLONG)(nRange[1][1] - nRange[1][0]) + (ULONGLONG)cMemoryAreaCheckSum.GetDestination() + (ULONGLONG)(cMemoryAreaCheckSum.GetLength() / (8 * nAddressBytes)))
						{
							for (nByte = (INT)(((ULONGLONG)nCheckSumPage*(ULONGLONG)(nRange[1][1] - nRange[1][0]) + (ULONGLONG)cMemoryAreaCheckSum.GetDestination() - (ULONGLONG)nAddress[0] * (ULONGLONG)(nRange[1][1] - nRange[1][0]) - (ULONGLONG)nAddress[1] - (ULONGLONG)(nAddressOffset / nAddressBytes))*nAddressBytes), nBytes = nByte + cMemoryAreaCheckSum.GetLength() / 8; nByte < nBytes; nByte++)
							{
								nMemoryImageData[1].SetAtGrow(nByte, (BYTE)((cMemoryAreaCheckSum.GetLength() == 16) ? ((wMemoryImageCRC16 >> (8 * (nBytes - nByte - 1))) & 0xFF) : ((dwMemoryImageCRC32 >> (8 * (nBytes - nByte - 1))) && 0xFF)));
								continue;
							}
							pMemoryImageBlock->SetData(nMemoryImageData[1]);
							return TRUE;
						}
						nAddressOffset += (UINT)nMemoryImageData[1].GetSize();
					}
					continue;
				}
				break;
			}
		}
		return FALSE;
	}
	return TRUE;
}

BOOL CALTELTCProcessEngine::IsTCOnBoardMemoryImagePatch(CONST CDatabaseEngine *pDatabase, CONST CTCPacket *pTCPacket, CString &szProcessor) CONST
{
	/* Returns TRUE if the telemetry packet contained in 'pTCPacket' is part of an on-board memory area patch.
	The variable 'szProcessor' returns the human-readable name of the involved on-board processor.
	*/
	szProcessor.Empty();
	return FALSE;
}

BOOL CALTELTCProcessEngine::Get1stStepTCData(CONST CTMEnvironment *pTMEnvironment, CByteArray &nData) CONST
{
	/* Returns TRUE if the telemetry packet contained in 'pTMEnvironment' contains the downlinked data of the first telecommand belonging to a 'two-step' procedure where the second telecommand is a confirmation of the first one. */
	nData.RemoveAll();
	return FALSE;
}

BOOL CALTELTCProcessEngine::SetTimeCorrelation(CTCEnvironment *pTCEnvironment)
{
	CALTELTCProcessInfo  *pTCInfo;

	if ((pTCInfo = (CALTELTCProcessInfo *)pTCEnvironment->GetTCProcessInfo()))
	{
		pTCInfo->SetTimeCorrelation();
		return TRUE;
	}
	return FALSE;
}
BOOL CALTELTCProcessEngine::SetTimeCorrelation(CTCEnvironment *pTCEnvironment, CONST CTimeTag &tOBRT, UINT nOBRT, UINT nOBTID)
{
	CALTELTCProcessInfo  *pTCInfo;

	if ((pTCInfo = (CALTELTCProcessInfo *)pTCEnvironment->GetTCProcessInfo()))
	{
		pTCInfo->SetTimeCorrelation(tOBRT, nOBRT);
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELTCProcessEngine::GetTimeCorrelation(CONST CTCEnvironment *pTCEnvironment, CTimeTag &tOBRT, UINT &nOBRT, UINT nOBTID) CONST
{
	CALTELTCProcessInfo  *pTCInfo;

	return(((pTCInfo = (CALTELTCProcessInfo *)pTCEnvironment->GetTCProcessInfo())) ? (pTCInfo->GetTimeCorrelation(tOBRT, nOBRT) > 0) : FALSE);
}

UINT CALTELTCProcessEngine::ConvertTimeToOBRT(CONST CTCEnvironment *pTCEnvironment, CONST CTimeTag &tTime, UINT nOBTID) CONST
{
	/* Converts the time specified by 'tTime' into an on-board reference counter value for the on-board timer 'nOBTID' and returns it. */
	return 0;
}

BOOL CALTELTCProcessEngine::CanConvertTimeToOBRT(CONST CTCEnvironment *pTCEnvironment, UINT nOBTID) CONST
{
	/* Returns TRUE if any time could be correlated for the on-board timer 'nOBTID' and converted into an OBRT. */
	return FALSE;
}

CTimeTag CALTELTCProcessEngine::ConvertOBRTToTime(CONST CTCEnvironment *pTCEnvironment, UINT nOBRT, UINT nOBTID) CONST
{
	/* Converts the on-board reference counter specified by 'nOBRT' into a time for the on-board timer 'nOBTID' and returns it. */
	return 0;
}

BOOL CALTELTCProcessEngine::CanConvertOBRTToTime(CONST CTCEnvironment *pTCEnvironment, UINT nOBTID) CONST
{
	/* Returns TRUE if any on-board reference counter could be correlated for the on-board timer 'nOBTID' and converted into a time. */
	return FALSE;
}

BOOL CALTELTCProcessEngine::EnableDebugging(BOOL bEnable)
{
	m_bDebugging = bEnable;
	return TRUE;
}

BOOL CALTELTCProcessEngine::IsDebuggingEnabled() CONST
{
	return m_bDebugging;
}

BOOL CALTELTCProcessEngine::AllocateTCProcessInfo(CTCEnvironment *pTCEnvironment) CONST
{
	CTCProcessInfo  *pTCProcessInfo;

	if ((pTCProcessInfo = new CALTELTCProcessInfo))
	{
		pTCEnvironment->Initialize(pTCProcessInfo);
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELTCProcessEngine::FreeTCProcessInfo(CTCEnvironment *pTCEnvironment) CONST
{
	CTCProcessInfo  *pTCProcessInfo;

	if ((pTCProcessInfo = pTCEnvironment->GetTCProcessInfo()))
	{
		pTCEnvironment->Initialize((CTCProcessInfo *)NULL);
		delete pTCProcessInfo;
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELTCProcessEngine::Generate2ndStep(CONST CDatabaseTCFunction *pDatabaseTCFunction, CONST CDatabaseTCPacket *pDatabaseTCPacket, CDatabaseTCFunctions &pDatabaseTCFunctions, CDatabaseTCPackets &pDatabaseTCPackets) CONST
{
	CDatabaseTCPacket  *pTCPacket;
	CDatabaseTCFunction  *pTCFunction;

	if ((pTCPacket = new CDatabaseTCPacket))
	{
		if ((pTCFunction = new CDatabaseTCFunction))
		{
			if (pTCFunction->Copy(pDatabaseTCFunction) && pTCPacket->Copy(pDatabaseTCPacket))
			{
				pTCFunction->SetAttributes((pTCFunction->GetAttributes() & ~TCFUNCTION_EXETYPE_FIRSTSTEP) | TCFUNCTION_EXETYPE_SECONDSTEP);
				pDatabaseTCFunctions.InsertAt(pDatabaseTCFunctions.GetSize(), pTCFunction, 1);
				pDatabaseTCPackets.InsertAt(pDatabaseTCPackets.GetSize(), pTCPacket, 1);
				return TRUE;
			}
			delete pTCFunction;
		}
		delete pTCPacket;
	}
	return FALSE;
}

VOID CALTELTCProcessEngine::CheckTCFunctionPreexecutionParameterValues(CONST CDatabaseEngine *pDatabase, CONST CDatabaseTCPreExeGroupParameter *pDatabaseTCPreExeGroupParameter, CONST CTMParameter *pTMParameter, CStringArray &szParameters) CONST
{
	INT  nPoint;
	INT  nPoints;
	INT  nSample;
	INT  nSamples;
	UINT  nStatus;
	double  fValue;
	double  fPoint[2];
	CString  szTable;
	CString  szValue;
	ULONGLONG  nValue;
	CDatabaseTMTxtCalTable  *pTMTxtCalTable;
	CDatabaseTMTxtCalPoint  *pTMTxtCalPoint;

	for (nSample = pTMParameter->GetValueCount() - 1, nSamples = pTMParameter->GetValueCount(); nSample < nSamples; nSample++)
	{
		if ((pDatabaseTCPreExeGroupParameter->GetAttributes() & TCPREEXEGROUPPARAMETER_INTERPRETATION_CALIBRATED) != TCPREEXEGROUPPARAMETER_INTERPRETATION_CALIBRATED)
		{
			if (pTMParameter->GetValue(pDatabase, nSample, (pTMParameter->GetAttributes() & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) | TMPARAMETER_CALIBRATION_NONE, fValue))
			{
				if ((!IsDebuggingEnabled() && fValue != pDatabaseTCPreExeGroupParameter->GetValue()) || (IsDebuggingEnabled() && fValue != pDatabase->TranslateTCPreExeGroupParameterConstValue((pTMParameter->GetAttributes() & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) | TMPARAMETER_NATURE_CONSTANT, pDatabaseTCPreExeGroupParameter->GetValueAsText()))) szParameters.Add(pDatabaseTCPreExeGroupParameter->GetTag());
				continue;
			}
			szParameters.Add(pDatabaseTCPreExeGroupParameter->GetTag());
			continue;
		}
		if (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)
		{
			if (!pTMParameter->GetValueAsText(pDatabase, nSample, szValue) || _ttof(pDatabaseTCPreExeGroupParameter->GetValueAsText()) != _ttof(szValue)) szParameters.Add(pDatabaseTCPreExeGroupParameter->GetTag());
			continue;
		}
		if (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS)
		{
			if (pTMParameter->GetRawValue(nSample, nValue, nStatus, szTable) && pTMParameter->GetValue(pDatabase, nSample, (pTMParameter->GetAttributes() & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) | TMPARAMETER_CALIBRATION_NONE, fValue))
			{
				if ((pTMTxtCalTable = pDatabase->GetTMTxtCalTables()->GetAt(pDatabase->GetTMTxtCalTables()->Find(szTable))))
				{
					for (nPoint = 0, nPoints = (INT)pTMTxtCalTable->GetSize(); nPoint < nPoints; nPoint++)
					{
						if ((pTMTxtCalPoint = pTMTxtCalTable->GetAt(nPoint)))
						{
							if ((pTMTxtCalPoint->GetRange(fPoint[0], fPoint[1], szValue) || pTMTxtCalPoint->GetPoint(fPoint[0], szValue)) && pDatabaseTCPreExeGroupParameter->GetValueAsText() == szValue) break;
							continue;
						}
					}
					if (nPoint < nPoints  &&  fPoint[0] <= fValue  &&  fPoint[1] >= fValue) continue;
				}
			}
			szParameters.Add(pDatabaseTCPreExeGroupParameter->GetTag());
		}
	}
}

BOOL CALTELTCProcessEngine::CheckTCFunctionExecutionParameterValues(CONST CDatabaseEngine *pDatabase, CONST CDatabaseTCExeVerGroupParameter *pDatabaseTCExeVerGroupParameter, CONST CTMParameter *pTMParameter, CStringArray &szParameters, BOOL bInInterval) CONST
{
	INT  nSamples;
	BOOL  bFailure;
	double  fValue[2];
	CString  szValue;

	for (nSamples = pTMParameter->GetValueCount(), bFailure = FALSE; pDatabaseTCExeVerGroupParameter->GetAttributes() & TCEXEVERGROUPPARAMETER_CHECKS_ENABLED; )
	{
		if ((pDatabaseTCExeVerGroupParameter->GetAttributes() & TCEXEVERGROUPPARAMETER_INTERPRETATION_CALIBRATED) != TCEXEVERGROUPPARAMETER_INTERPRETATION_CALIBRATED)
		{
			if (pTMParameter->GetValue(pDatabase, nSamples - 1, (pTMParameter->GetAttributes() & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) | TMPARAMETER_CALIBRATION_NONE, fValue[0]))
			{
				fValue[1] = (IsDebuggingEnabled()) ? pDatabase->TranslateTCExeVerGroupParameterConstValue(pTMParameter->GetAttributes(), pDatabaseTCExeVerGroupParameter->GetValueAsText()) : pDatabaseTCExeVerGroupParameter->GetValue();
				if (fabs(fValue[0] - fValue[1]) <= 2.0*FLT_EPSILON) break;
			}
			if (bInInterval) szParameters.Add(pDatabaseTCExeVerGroupParameter->GetTag());
			bFailure = TRUE;
			break;
		}
		if (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)
		{
			if (pTMParameter->GetValue(pDatabase, nSamples - 1, fValue[0]))
			{
				fValue[1] = pDatabase->TranslateTCExeVerGroupParameterConstValue(pTMParameter->GetAttributes(), pDatabaseTCExeVerGroupParameter->GetValueAsText());
				if (fabs(fValue[0] - fValue[1]) <= 2.0*FLT_EPSILON) break;
			}
			if (bInInterval) szParameters.Add(pDatabaseTCExeVerGroupParameter->GetTag());
			bFailure = TRUE;
			break;
		}
		if (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS)
		{
			if (pTMParameter->GetValueAsText(pDatabase, nSamples - 1, szValue) && szValue == pDatabaseTCExeVerGroupParameter->GetValueAsText()) break;
			if (bInInterval) szParameters.Add(pDatabaseTCExeVerGroupParameter->GetTag());
			bFailure = TRUE;
		}
		break;
	}
	return !bFailure;
}
BOOL CALTELTCProcessEngine::CheckTCFunctionExecutionParameterValues(CONST CDatabaseEngine *pDatabase, CONST CDatabaseTCExeVerGroupParameter *pDatabaseTCExeVerGroupParameter, CONST CDatabaseTCFunctionElement *pDatabaseTCFunctionElement, CTMParameter *pTMParameter, CStringArray &szParameters, BOOL bInInterval) CONST
{
	INT  nSamples;
	BOOL  bFailure;
	double  fValue[2];
	CString  szValue;

	for (nSamples = pTMParameter->GetValueCount(), bFailure = FALSE; pDatabaseTCExeVerGroupParameter->GetAttributes() & TCEXEVERGROUPPARAMETER_CHECKS_ENABLED; )
	{
		if ((pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0)
		{
			if (pTMParameter->GetValue(pDatabase, nSamples - 1, (pTMParameter->GetAttributes() & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) | TMPARAMETER_CALIBRATION_NONE, fValue[0]) && !pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty())
			{
				fValue[1] = ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) == 0) ? (double)CDatabaseEngine::DecodeValue(pDatabase->GetType(), pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetWidth(), pDatabase->TranslateTCFunctionElementConstValue(pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetWidth(), pDatabaseTCFunctionElement->GetConstValueAsText())) : 0.0;
				fValue[1] = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? CDatabaseEngine::DecodeValue(pDatabase->GetType(), pDatabaseTCFunctionElement->GetAttributes(), pDatabase->TranslateTCFunctionElementConstValue(pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetWidth(), pDatabaseTCFunctionElement->GetConstValueAsText())) : fValue[1];
				if (fabs(fValue[0] - fValue[1]) <= 2.0*FLT_EPSILON) break;
			}
			if (bInInterval) szParameters.Add(pDatabaseTCExeVerGroupParameter->GetTag());
			bFailure = TRUE;
			break;
		}
		if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)
		{
			if (pTMParameter->GetValue(pDatabase, nSamples - 1, fValue[0]) && !pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty())
			{
				fValue[1] = CDatabaseEngine::DecodeValue(pDatabase->GetType(), pTMParameter->GetAttributes(), pDatabase->TranslateTCFunctionElementConstValue(pTMParameter->GetAttributes(), pDatabaseTCFunctionElement->GetWidth(), pDatabaseTCFunctionElement->GetConstValueAsText()));
				if (fabs(fValue[0] - fValue[1]) <= 2.0*FLT_EPSILON) break;
			}
			if (bInInterval) szParameters.Add(pDatabaseTCExeVerGroupParameter->GetTag());
			bFailure = TRUE;
			break;
		}
		if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
		{
			if (pTMParameter->GetValueAsText(pDatabase, nSamples - 1, szValue) && !pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty() && szValue == pDatabaseTCFunctionElement->GetConstValueAsText()) break;
			if (bInInterval) szParameters.Add(pDatabaseTCExeVerGroupParameter->GetTag());
			bFailure = TRUE;
		}
		break;
	}
	return !bFailure;
}

BOOL CALTELTCProcessEngine::ConvertTCParameterValues(CONST CDatabaseEngine *pDatabase, CONST CTCEnvironment *pTCEnvironment, CONST CDatabaseTCFunctions &pDatabaseTCFunctions, CONST CDatabaseTCPackets &pDatabaseTCPackets) CONST
{
	INT  nPacket;
	INT  nPackets;
	INT  nElement;
	INT  nElements;
	INT  nFunction;
	INT  nFunctions;
	INT  nParameter;
	INT  nParameters;
	BOOL  bSuccess;
	BOOL  bAutoValue;
	ULONGLONG  nValue;
	CDatabaseTCPacket  *pTCPacket;
	CDatabaseTCFunction  *pTCFunction;
	CDatabaseTCPacketParameter  *pTCPacketParameter;
	CDatabaseTCFunctionElement  *pTCFunctionElement;

	for (nFunction = 0, nFunctions = (INT)pDatabaseTCFunctions.GetSize(), bSuccess = TRUE; nFunction < nFunctions; nFunction++)
	{
		if ((pTCFunction = pDatabaseTCFunctions.GetAt(nFunction)))
		{
			if ((pTCPacket = pDatabaseTCPackets.GetAt(nFunction)))
			{
				for (nElement = 0, nElements = (!IsFixedSize(pTCPacket)) ? (INT)pTCFunction->GetSize() : 0; nElement < nElements; nElement++)
				{
					if ((pTCFunctionElement = pTCFunction->GetAt(nElement)) && !pTCFunctionElement->HasConstValue() && pTCFunctionElement->GetConstValueAsText().IsEmpty())
					{
						pTCFunction->RemoveAt(nElement);
						delete pTCFunctionElement;
						nElements--;
						nElement--;
					}
				}
			}
			for (nElement = 0, nElements = (INT)pTCFunction->GetSize(); nElement < nElements; nElement++)
			{
				if ((pTCFunctionElement = pTCFunction->GetAt(nElement)) != (CDatabaseTCFunctionElement *)NULL)
				{
					if ((pTCFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER) && (pTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 && (bAutoValue = pTCFunctionElement->GetConstValueAsText().IsEmpty()) >= 0 && pTCFunctionElement->HasConstValue())
					{
						if (ConvertTCParameterValue(pDatabase, pTCEnvironment, pTCFunctionElement, pTCFunctionElement->GetConstValue()))
						{
							pTCFunctionElement->SetAttributes(pTCFunctionElement->GetAttributes() | (TCPARAMETER_VTYPE_AUTO*bAutoValue));
							continue;
						}
						pTCFunctionElement->SetConstValue();
						continue;
					}
					if (pTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME)
					{
						if (ConvertTCParameterTimeValue(pDatabase, pTCEnvironment, pTCFunctionElement->GetName(), pTCFunctionElement->GetWidth(), pTCFunctionElement->GetConstValueAsText(), nValue))
						{
							pTCFunctionElement->SetConstValue(nValue);
							continue;
						}
						pTCFunctionElement->SetConstValue();
					}
					continue;
				}
				bSuccess = FALSE;
			}
			continue;
		}
		bSuccess = FALSE;
	}
	for (nPacket = 0, nPackets = (INT)pDatabaseTCPackets.GetSize(); nPacket < nPackets; nPacket++)
	{
		if ((pTCPacket = pDatabaseTCPackets.GetAt(nPacket)) != (CDatabaseTCPacket *)NULL)
		{
			for (nParameter = 0, nParameters = (INT)pTCPacket->GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pTCPacketParameter = pTCPacket->GetAt(nParameter)) != (CDatabaseTCPacketParameter *)NULL)
				{
					if ((pTCPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE) && (pTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) != TCPARAMETER_CODING_TIME && (bAutoValue = pTCPacketParameter->GetConstValueAsText().IsEmpty()) >= 0 && pTCPacketParameter->HasConstValue())
					{
						if (ConvertTCParameterValue(pDatabase, pTCEnvironment, pTCPacketParameter, pTCPacketParameter->GetConstValue()))
						{
							pTCPacketParameter->SetAttributes(pTCPacketParameter->GetAttributes() | (TCPARAMETER_VTYPE_AUTO*bAutoValue));
							continue;
						}
						pTCPacketParameter->SetConstValue();
						continue;
					}
					if (pTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME)
					{
						if (ConvertTCParameterTimeValue(pDatabase, pTCEnvironment, pTCPacketParameter->GetTag(), pTCPacketParameter->GetWidth(), pTCPacketParameter->GetConstValueAsText(), nValue))
						{
							pTCPacketParameter->SetConstValue(nValue);
							continue;
						}
						pTCPacketParameter->SetConstValue();
					}
					continue;
				}
				bSuccess = FALSE;
			}
			continue;
		}
		bSuccess = FALSE;
	}
	return bSuccess;
}

BOOL CALTELTCProcessEngine::ConvertTCParameterValue(CONST CDatabaseEngine *pDatabase, CONST CTCEnvironment *pTCEnvironment, CDatabaseTCFunctionElement *pDatabaseTCFunctionElement, ULONGLONG nValue) CONST
{
	CString  szValue;
	CTimeTag  tTime;
	CTCParameter  cTCParameter;

	for (cTCParameter.SetTag(pDatabaseTCFunctionElement->GetName()), cTCParameter.SetAttributes(pDatabaseTCFunctionElement->GetAttributes()); (((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 && cTCParameter.SetRawValue(0, nValue, TCPARAMETER_STATUS_NONE)) || ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) && ConvertTCParameterTimeValue(pDatabase, pTCEnvironment, pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetWidth(), nValue, tTime) && cTCParameter.SetRawValue(0, tTime, TCPARAMETER_STATUS_NONE))) && cTCParameter.GetValueAsText(pDatabase, 0, szValue); )
	{
		pDatabaseTCFunctionElement->SetConstValueAsText(szValue);
		pDatabaseTCFunctionElement->SetConstValue(nValue);
		return TRUE;
	}
	return FALSE;
}
BOOL CALTELTCProcessEngine::ConvertTCParameterValue(CONST CDatabaseEngine *pDatabase, CONST CTCEnvironment *pTCEnvironment, CDatabaseTCPacketParameter *pDatabaseTCPacketParameter, ULONGLONG nValue) CONST
{
	CString  szValue;
	CTimeTag  tTime;
	CTCParameter  cTCParameter;

	for (cTCParameter.SetTag(pDatabaseTCPacketParameter->GetTag()), cTCParameter.SetAttributes(pDatabaseTCPacketParameter->GetAttributes()); (((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 && cTCParameter.SetRawValue(0, nValue, TCPARAMETER_STATUS_NONE)) || ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) && ConvertTCParameterTimeValue(pDatabase, pTCEnvironment, pDatabaseTCPacketParameter->GetTag(), pDatabaseTCPacketParameter->GetWidth(), nValue, tTime) && cTCParameter.SetRawValue(0, tTime, TCPARAMETER_STATUS_NONE))) && cTCParameter.GetValueAsText(pDatabase, 0, szValue); )
	{
		pDatabaseTCPacketParameter->SetConstValueAsText(szValue);
		pDatabaseTCPacketParameter->SetConstValue(nValue);
		return TRUE;
	}
	return FALSE;
}
BOOL CALTELTCProcessEngine::ConvertTCParameterValue(CONST CDatabaseEngine *pDatabase, CDatabaseTCFunctionElement *pDatabaseTCFunctionElement, ULONGLONG nValue) CONST
{
	CString  szValue;
	CTCParameter  cTCParameter;

	for (cTCParameter.SetTag(pDatabaseTCFunctionElement->GetName()), cTCParameter.SetAttributes(pDatabaseTCFunctionElement->GetAttributes()); (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 && cTCParameter.SetRawValue(0, nValue, TCPARAMETER_STATUS_NONE) && cTCParameter.GetValueAsText(pDatabase, 0, szValue); )
	{
		pDatabaseTCFunctionElement->SetConstValueAsText(szValue);
		pDatabaseTCFunctionElement->SetConstValue(nValue);
		return TRUE;
	}
	return FALSE;
}
BOOL CALTELTCProcessEngine::ConvertTCParameterValue(CONST CDatabaseEngine *pDatabase, CDatabaseTCPacketParameter *pDatabaseTCPacketParameter, ULONGLONG nValue) CONST
{
	CString  szValue;
	CTCParameter  cTCParameter;

	for (cTCParameter.SetTag(pDatabaseTCPacketParameter->GetTag()), cTCParameter.SetAttributes(pDatabaseTCPacketParameter->GetAttributes()); (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 && cTCParameter.SetRawValue(0, nValue, TCPARAMETER_STATUS_NONE) && cTCParameter.GetValueAsText(pDatabase, 0, szValue); )
	{
		pDatabaseTCPacketParameter->SetConstValueAsText(szValue);
		pDatabaseTCPacketParameter->SetConstValue(nValue);
		return TRUE;
	}
	return FALSE;
}

BOOL CALTELTCProcessEngine::IsTCParameterNumerical(CONST CDatabaseEngine *pDatabase, LPCTSTR pszTag) CONST
{
	CDatabaseTCParameter  *pTCParameter;

	return(((pTCParameter = pDatabase->GetTCParameters()->GetAt(pDatabase->GetTCParameters()->Find(pszTag)))) ? ((pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) == 0) : FALSE);
}

BOOL CALTELTCProcessEngine::IsTCParameterTextual(CONST CDatabaseEngine *pDatabase, LPCTSTR pszTag) CONST
{
	CDatabaseTCParameter  *pTCParameter;

	return(((pTCParameter = pDatabase->GetTCParameters()->GetAt(pDatabase->GetTCParameters()->Find(pszTag)))) ? ((pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) != 0) : FALSE);
}

INT CALTELTCProcessEngine::CalculateDataSize(CONST CDatabaseTCPacket *pDatabaseTCPacket) CONST
{
	INT  nPacket;
	INT  nPackets;

	for (nPacket = 0, nPackets = (pDatabaseTCPacket->GetDataSize() > 0) ? (MAXTCPACKETVARIABLESIZELIST - MINTCPACKETVARIABLESIZELIST + 1) : -1; nPacket < nPackets; nPacket++)
	{
		if (!lstrcmp(pDatabaseTCPacket->GetTag(), STRING(MINTCPACKETVARIABLESIZELIST + nPacket))) break;
		continue;
	}
	return((nPacket == nPackets) ? (pDatabaseTCPacket->GetDataSize() + 1) : 0);
}

WORD CALTELTCProcessEngine::CalculateCRC(CONST CByteArray &nData, BOOL bHighPriority) CONST
{
	CByteArray  nCRCData;

	for (nCRCData.Copy(nData); nCRCData.GetSize() > sizeof(WORD); )
	{
		nCRCData.RemoveAt(nCRCData.GetSize() - sizeof(WORD), sizeof(WORD));
		return CalculateCRC16(nCRCData, (nCRCData.GetAt(0) << 8) + nCRCData.GetAt(1), !bHighPriority);
	}
	return 0;
}

WORD CALTELTCProcessEngine::CalculateCRC16(CONST CByteArray &nData, WORD wSeed, BOOL bXOR) CONST
{
	INT  nByte;
	INT  nBytes;
	WORD  wCRC;
	LPBYTE  pByte;

	for (nByte = 0, nBytes = (!bXOR) ? (INT)nData.GetSize() : 0, pByte = (LPBYTE)nData.GetData(), wCRC = wSeed; nByte < nBytes; nByte++)
	{
		wCRC = ((wCRC << 8) & 0xFF00) ^ m_wTCPacketCRC16Table[((wCRC >> 8) ^ *pByte++) & 0x00FF];
		continue;
	}
	for (nByte = 0, nBytes = (bXOR && nData.GetSize() % 2 == 0 && nData.GetSize() > 0) ? (INT)nData.GetSize() : 0; nByte < nBytes; nByte += 2)
	{
		wCRC ^= (pByte[nByte] << 8) + pByte[nByte + 1];
		continue;
	}
	return wCRC;
}

DWORD CALTELTCProcessEngine::CalculateCRC32(CONST CByteArray &nData, DWORD dwSeed, BOOL bXOR) CONST
{
	INT  nByte;
	INT  nBytes;
	DWORD  dwCRC;
	LPBYTE  pByte;

	for (nByte = 0, nBytes = (!bXOR) ? (INT)nData.GetSize() : 0, pByte = (LPBYTE)nData.GetData(), dwCRC = dwSeed; nByte < nBytes; nByte++)
	{
		dwCRC = (dwCRC >> 8) ^ m_dwTCPacketCRC32Table[(dwCRC & 0xFF) ^ *pByte++];
		continue;
	}
	for (nByte = 0, nBytes = (bXOR && nData.GetSize() % 4 == 0 && nData.GetSize() > 0) ? (INT)nData.GetSize() : 0; nByte < nBytes; nByte += 4)
	{
		dwCRC ^= (pByte[nByte] << 24) + (pByte[nByte + 1] << 16) + (pByte[nByte + 2] << 8) + pByte[nByte + 3];
		continue;
	}
	return dwCRC;
}

BOOL CALTELTCProcessEngine::IsFixedSize(CONST CDatabaseTCPacket *pDatabaseTCPacket) CONST
{
	return((CalculateDataSize(pDatabaseTCPacket) > 0) ? TRUE : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CALTELLibraryApp

BOOL CALTELLibraryApp::InitInstance()
{
	return((CLibraryApp::InitInstance()) ? LoadStrings() : FALSE);
}

int CALTELLibraryApp::ExitInstance()
{
	FreeStrings();
	return CLibraryApp::ExitInstance();
}

CALTELDatabaseEngine* CALTELLibraryApp::GetDatabaseEngine() CONST
{
	return(&cALTELLibraryApp.m_cDatabaseEngine);
}

CALTELTMProcessEngine* CALTELLibraryApp::GetTMProcessEngine() CONST
{
	return(&cALTELLibraryApp.m_cTMProcessEngine);
}

CALTELTCProcessEngine* CALTELLibraryApp::GetTCProcessEngine() CONST
{
	return(&cALTELLibraryApp.m_cTCProcessEngine);
}

CALTELMemoryDumpsServiceEngine* CALTELLibraryApp::GetMemoryDumpsServiceEngine() CONST
{
	return(&cALTELLibraryApp.m_cMemoryDumpsServiceEngine);
}

CALTELTPEPServiceEngine* CALTELLibraryApp::GetTPEPServiceEngine() CONST
{
	return(&cALTELLibraryApp.m_cTPEPServiceEngine);
}

CALTELPFLPServiceEngine* CALTELLibraryApp::GetPFLPServiceEngine() CONST
{
	return(&cALTELLibraryApp.m_cPFLPServiceEngine);
}

CALTELLibraryApp* CALTELLibraryApp::GetLibraryApp()
{
	return(&cALTELLibraryApp);
}

BEGIN_MESSAGE_MAP(CALTELLibraryApp, CLibraryApp)
	//{{AFX_MSG_MAP(CALTELLibraryApp)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//    DO NOT EDIT what you see in these blocks of generated code!
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CALTELLibraryApp message handlers
